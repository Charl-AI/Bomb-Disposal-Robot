

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 18:20:05 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _ANSEL1	set	4025
    86  0000                     _ANSEL0	set	4024
    87  0000                     _T5CON	set	4023
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _TXSTAbits	set	4012
    92  0000                     _BAUDCONbits	set	4010
    93  0000                     _SPBRGH	set	4016
    94  0000                     _SPBRG	set	4015
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATDbits	set	3980
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _RCREG	set	4014
   108  0000                     _PIR1bits	set	3998
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _T0CON	set	4053
   111  0000                     _TRISDbits	set	3989
   112  0000                     _TRISBbits	set	3987
   113  0000                     _RCONbits	set	4048
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCCONbits	set	4051
   116  0000                     _OSCCON	set	4051
   117  0000                     _PDC1H	set	3958
   118  0000                     _PDC1L	set	3959
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121                           
   122                           	psect	smallconst
   123  000300                     __psmallconst:
   124                           	opt callstack 0
   125  000300  00                 	db	0
   126  000301                     STR_12:
   127  000301  53                 	db	83	;'S'
   128  000302  54                 	db	84	;'T'
   129  000303  41                 	db	65	;'A'
   130  000304  52                 	db	82	;'R'
   131  000305  54                 	db	84	;'T'
   132  000306  49                 	db	73	;'I'
   133  000307  4E                 	db	78	;'N'
   134  000308  47                 	db	71	;'G'
   135  000309  20                 	db	32
   136  00030A  53                 	db	83	;'S'
   137  00030B  45                 	db	69	;'E'
   138  00030C  41                 	db	65	;'A'
   139  00030D  52                 	db	82	;'R'
   140  00030E  43                 	db	67	;'C'
   141  00030F  48                 	db	72	;'H'
   142  000310  00                 	db	0
   143  000311                     STR_11:
   144  000311  54                 	db	84	;'T'
   145  000312  4F                 	db	79	;'O'
   146  000313  20                 	db	32
   147  000314  53                 	db	83	;'S'
   148  000315  54                 	db	84	;'T'
   149  000316  41                 	db	65	;'A'
   150  000317  52                 	db	82	;'R'
   151  000318  54                 	db	84	;'T'
   152  000319  20                 	db	32
   153  00031A  53                 	db	83	;'S'
   154  00031B  45                 	db	69	;'E'
   155  00031C  41                 	db	65	;'A'
   156  00031D  52                 	db	82	;'R'
   157  00031E  43                 	db	67	;'C'
   158  00031F  48                 	db	72	;'H'
   159  000320  00                 	db	0
   160  000321                     STR_7:
   161  000321  52                 	db	82	;'R'
   162  000322  45                 	db	69	;'E'
   163  000323  53                 	db	83	;'S'
   164  000324  45                 	db	69	;'E'
   165  000325  54                 	db	84	;'T'
   166  000326  54                 	db	84	;'T'
   167  000327  49                 	db	73	;'I'
   168  000328  4E                 	db	78	;'N'
   169  000329  47                 	db	71	;'G'
   170  00032A  20                 	db	32
   171  00032B  52                 	db	82	;'R'
   172  00032C  4F                 	db	79	;'O'
   173  00032D  42                 	db	66	;'B'
   174  00032E  4F                 	db	79	;'O'
   175  00032F  54                 	db	84	;'T'
   176  000330  00                 	db	0
   177  000331                     STR_3:
   178  000331  43                 	db	67	;'C'
   179  000332  48                 	db	72	;'H'
   180  000333  45                 	db	69	;'E'
   181  000334  43                 	db	67	;'C'
   182  000335  4B                 	db	75	;'K'
   183  000336  53                 	db	83	;'S'
   184  000337  55                 	db	85	;'U'
   185  000338  4D                 	db	77	;'M'
   186  000339  20                 	db	32
   187  00033A  46                 	db	70	;'F'
   188  00033B  41                 	db	65	;'A'
   189  00033C  49                 	db	73	;'I'
   190  00033D  4C                 	db	76	;'L'
   191  00033E  45                 	db	69	;'E'
   192  00033F  44                 	db	68	;'D'
   193  000340  00                 	db	0
   194  000341                     STR_2:
   195  000341  43                 	db	67	;'C'
   196  000342  48                 	db	72	;'H'
   197  000343  45                 	db	69	;'E'
   198  000344  43                 	db	67	;'C'
   199  000345  4B                 	db	75	;'K'
   200  000346  53                 	db	83	;'S'
   201  000347  55                 	db	85	;'U'
   202  000348  4D                 	db	77	;'M'
   203  000349  20                 	db	32
   204  00034A  50                 	db	80	;'P'
   205  00034B  41                 	db	65	;'A'
   206  00034C  53                 	db	83	;'S'
   207  00034D  53                 	db	83	;'S'
   208  00034E  45                 	db	69	;'E'
   209  00034F  44                 	db	68	;'D'
   210  000350  00                 	db	0
   211  000351                     STR_5:
   212  000351  4D                 	db	77	;'M'
   213  000352  4F                 	db	79	;'O'
   214  000353  56                 	db	86	;'V'
   215  000354  49                 	db	73	;'I'
   216  000355  4E                 	db	78	;'N'
   217  000356  47                 	db	71	;'G'
   218  000357  20                 	db	32
   219  000358  54                 	db	84	;'T'
   220  000359  4F                 	db	79	;'O'
   221  00035A  20                 	db	32
   222  00035B  42                 	db	66	;'B'
   223  00035C  4F                 	db	79	;'O'
   224  00035D  4D                 	db	77	;'M'
   225  00035E  42                 	db	66	;'B'
   226  00035F  00                 	db	0
   227  000360                     STR_6:
   228  000360  52                 	db	82	;'R'
   229  000361  45                 	db	69	;'E'
   230  000362  54                 	db	84	;'T'
   231  000363  55                 	db	85	;'U'
   232  000364  52                 	db	82	;'R'
   233  000365  4E                 	db	78	;'N'
   234  000366  49                 	db	73	;'I'
   235  000367  4E                 	db	78	;'N'
   236  000368  47                 	db	71	;'G'
   237  000369  20                 	db	32
   238  00036A  48                 	db	72	;'H'
   239  00036B  4F                 	db	79	;'O'
   240  00036C  4D                 	db	77	;'M'
   241  00036D  45                 	db	69	;'E'
   242  00036E  00                 	db	0
   243  00036F                     STR_1:
   244  00036F  43                 	db	67	;'C'
   245  000370  72                 	db	114	;'r'
   246  000371  69                 	db	105	;'i'
   247  000372  74                 	db	116	;'t'
   248  000373  69                 	db	105	;'i'
   249  000374  63                 	db	99	;'c'
   250  000375  61                 	db	97	;'a'
   251  000376  6C                 	db	108	;'l'
   252  000377  20                 	db	32
   253  000378  45                 	db	69	;'E'
   254  000379  72                 	db	114	;'r'
   255  00037A  72                 	db	114	;'r'
   256  00037B  6F                 	db	111	;'o'
   257  00037C  72                 	db	114	;'r'
   258  00037D  00                 	db	0
   259  00037E                     STR_10:
   260  00037E  50                 	db	80	;'P'
   261  00037F  52                 	db	82	;'R'
   262  000380  45                 	db	69	;'E'
   263  000381  53                 	db	83	;'S'
   264  000382  53                 	db	83	;'S'
   265  000383  20                 	db	32
   266  000384  42                 	db	66	;'B'
   267  000385  55                 	db	85	;'U'
   268  000386  54                 	db	84	;'T'
   269  000387  54                 	db	84	;'T'
   270  000388  4F                 	db	79	;'O'
   271  000389  4E                 	db	78	;'N'
   272  00038A  00                 	db	0
   273  00038B                     STR_4:
   274  00038B  53                 	db	83	;'S'
   275  00038C  45                 	db	69	;'E'
   276  00038D  41                 	db	65	;'A'
   277  00038E  52                 	db	82	;'R'
   278  00038F  43                 	db	67	;'C'
   279  000390  48                 	db	72	;'H'
   280  000391  49                 	db	73	;'I'
   281  000392  4E                 	db	78	;'N'
   282  000393  47                 	db	71	;'G'
   283  000394  00                 	db	0
   284  000395                     STR_8:
   285  000395  25                 	db	37
   286  000396  75                 	db	117	;'u'
   287  000397  00                 	db	0
   288  0000                     
   289                           ; #config settings
   290  000398  00                 	db	0	; dummy byte at the end
   291  0000                     
   292                           	psect	cinit
   293  001008                     __pcinit:
   294                           	opt callstack 0
   295  001008                     start_initialization:
   296                           	opt callstack 0
   297  001008                     __initialization:
   298                           	opt callstack 0
   299                           
   300                           ; Clear objects allocated to BANK0 (50 bytes)
   301  001008  EE00  F060         	lfsr	0,__pbssBANK0
   302  00100C  0E32               	movlw	50
   303  00100E                     clear_0:
   304  00100E  6AEE               	clrf	postinc0,c
   305  001010  06E8               	decf	wreg,f,c
   306  001012  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to COMRAM (13 bytes)
   309  001014  EE00  F03C         	lfsr	0,__pbssCOMRAM
   310  001018  0E0D               	movlw	13
   311  00101A                     clear_1:
   312  00101A  6AEE               	clrf	postinc0,c
   313  00101C  06E8               	decf	wreg,f,c
   314  00101E  E1FD               	bnz	clear_1
   315  001020                     end_of_initialization:
   316                           	opt callstack 0
   317  001020                     __end_of__initialization:
   318                           	opt callstack 0
   319  001020  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   320  001022  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   321  001024  0E00               	movlw	low (__Lmediumconst shr (0+16))
   322  001026  6EF8               	movwf	tblptru,c
   323  001028  0100               	movlb	0
   324  00102A  EF07  F003         	goto	_main	;jump to C main() function
   325                           
   326                           	psect	bssCOMRAM
   327  00003C                     __pbssCOMRAM:
   328                           	opt callstack 0
   329  00003C                     	ds	2
   330  00003E                     debug@smoothed_data:
   331                           	opt callstack 0
   332  00003E                     	ds	2
   333  000040                     classify_data@smoothed:
   334                           	opt callstack 0
   335  000040                     	ds	2
   336  000042                     processRFID@position_in_buf:
   337                           	opt callstack 0
   338  000042                     	ds	1
   339  000043                     _robot_mode:
   340                           	opt callstack 0
   341  000043                     	ds	1
   342  000044                     _movement_time:
   343                           	opt callstack 0
   344  000044                     	ds	4
   345  000048                     _RFID_flag:
   346                           	opt callstack 0
   347  000048                     	ds	1
   348                           
   349                           	psect	bssBANK0
   350  000060                     __pbssBANK0:
   351                           	opt callstack 0
   352  000060                     	ds	2
   353  000062                     	ds	2
   354  000064                     	ds	2
   355  000066                     	ds	32
   356  000086                     _RFIDbuf:
   357                           	opt callstack 0
   358  000086                     	ds	12
   359                           
   360                           	psect	cstackBANK0
   361  000092                     __pcstackBANK0:
   362                           	opt callstack 0
   363  000092                     main@searching_speed:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x0
   367  000092                     	ds	2
   368  000094                     main@moving_speed:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x2
   372  000094                     	ds	2
   373  000096                     main@motorL:
   374                           	opt callstack 0
   375                           
   376                           ; 9 bytes @ 0x4
   377  000096                     	ds	9
   378  00009F                     main@motorR:
   379                           	opt callstack 0
   380                           
   381                           ; 9 bytes @ 0xD
   382  00009F                     	ds	9
   383                           
   384                           	psect	cstackCOMRAM
   385  000001                     __pcstackCOMRAM:
   386                           	opt callstack 0
   387  000001                     processRFID@RFIDbuf:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000001                     	ds	2
   392  000003                     processRFID@latestChar:
   393                           	opt callstack 0
   394                           
   395                           ; 1 bytes @ 0x2
   396  000003                     	ds	1
   397  000004                     processRFID@i:
   398                           	opt callstack 0
   399                           
   400                           ; 1 bytes @ 0x3
   401  000004                     	ds	1
   402  000005                     ??_InterruptHandlerHigh:
   403                           
   404                           ; 1 bytes @ 0x4
   405  000005                     	ds	3
   406  000008                     ??_InterruptHandlerLow:
   407                           
   408                           ; 1 bytes @ 0x7
   409  000008                     	ds	3
   410  00000B                     ??_LCDout:
   411  00000B                     ?___wmul:
   412                           	opt callstack 0
   413  00000B                     initPWM@PWMperiod:
   414                           	opt callstack 0
   415  00000B                     classify_data@raw_data:
   416                           	opt callstack 0
   417  00000B                     ___wmul@multiplier:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xA
   421  00000B                     	ds	1
   422  00000C                     LCDout@number:
   423                           	opt callstack 0
   424                           
   425                           ; 1 bytes @ 0xB
   426  00000C                     	ds	1
   427  00000D                     ??_classify_data:
   428  00000D                     SendLCD@type:
   429                           	opt callstack 0
   430  00000D                     ___wmul@multiplicand:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0xC
   434  00000D                     	ds	1
   435  00000E                     SendLCD@Byte:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0xD
   439  00000E                     	ds	1
   440  00000F                     ??_init_LCD:
   441  00000F                     ??_ClearLCD:
   442  00000F                     SetLine@line:
   443                           	opt callstack 0
   444  00000F                     LCD_String@string:
   445                           	opt callstack 0
   446  00000F                     classify_data@filtered:
   447                           	opt callstack 0
   448  00000F                     ___wmul@product:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0xE
   452  00000F                     	ds	1
   453  000010                     display_RFID@dataBuf:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0xF
   457  000010                     	ds	1
   458  000011                     ??_waitForInput:
   459  000011                     ?___awdiv:
   460                           	opt callstack 0
   461  000011                     check_RFID@dataBuf:
   462                           	opt callstack 0
   463  000011                     ___awdiv@dividend:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x10
   467  000011                     	ds	1
   468  000012                     display_RFID@i:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x11
   472  000012                     	ds	1
   473  000013                     ??_check_RFID:
   474  000013                     ___awdiv@divisor:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x12
   478  000013                     	ds	1
   479  000014                     waitForInput@raw_data:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x13
   483  000014                     	ds	1
   484  000015                     ___awdiv@counter:
   485                           	opt callstack 0
   486  000015                     check_RFID@hexBuf:
   487                           	opt callstack 0
   488                           
   489                           ; 12 bytes @ 0x14
   490  000015                     	ds	1
   491  000016                     ___awdiv@sign:
   492                           	opt callstack 0
   493  000016                     waitForInput@i:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x15
   497  000016                     	ds	1
   498  000017                     ___awdiv@quotient:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x16
   502  000017                     	ds	1
   503  000018                     waitForInput@i_1364:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x17
   507  000018                     	ds	1
   508  000019                     setMotorPWM@m:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x18
   512  000019                     	ds	2
   513  00001B                     ??_setMotorPWM:
   514                           
   515                           ; 1 bytes @ 0x1A
   516  00001B                     	ds	5
   517  000020                     setMotorPWM@PWMduty:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x1F
   521  000020                     	ds	1
   522  000021                     check_RFID@byte1:
   523                           	opt callstack 0
   524                           
   525                           ; 1 bytes @ 0x20
   526  000021                     	ds	1
   527  000022                     check_RFID@byte2:
   528                           	opt callstack 0
   529  000022                     stop@mL:
   530                           	opt callstack 0
   531  000022                     turn@mL:
   532                           	opt callstack 0
   533  000022                     moveForward@mL:
   534                           	opt callstack 0
   535  000022                     moveBackward@mL:
   536                           	opt callstack 0
   537  000022                     init_motor_struct@mL:
   538                           	opt callstack 0
   539                           
   540                           ; 2 bytes @ 0x21
   541  000022                     	ds	1
   542  000023                     check_RFID@byte3:
   543                           	opt callstack 0
   544                           
   545                           ; 1 bytes @ 0x22
   546  000023                     	ds	1
   547  000024                     check_RFID@byte4:
   548                           	opt callstack 0
   549  000024                     stop@mR:
   550                           	opt callstack 0
   551  000024                     turn@mR:
   552                           	opt callstack 0
   553  000024                     moveForward@mR:
   554                           	opt callstack 0
   555  000024                     moveBackward@mR:
   556                           	opt callstack 0
   557  000024                     init_motor_struct@mR:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x23
   561  000024                     	ds	1
   562  000025                     check_RFID@byte5:
   563                           	opt callstack 0
   564                           
   565                           ; 1 bytes @ 0x24
   566  000025                     	ds	1
   567  000026                     check_RFID@checksum:
   568                           	opt callstack 0
   569  000026                     stop@initial_speed:
   570                           	opt callstack 0
   571  000026                     turn@max_power:
   572                           	opt callstack 0
   573  000026                     moveForward@max_power:
   574                           	opt callstack 0
   575  000026                     moveBackward@max_power:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x25
   579  000026                     	ds	1
   580  000027                     check_RFID@i:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x26
   584  000027                     	ds	1
   585  000028                     ??_stop:
   586  000028                     ??_turn:
   587  000028                     ??_moveForward:
   588  000028                     ??_moveBackward:
   589                           
   590                           ; 1 bytes @ 0x27
   591  000028                     	ds	1
   592  000029                     stop@i:
   593                           	opt callstack 0
   594  000029                     turn@i:
   595                           	opt callstack 0
   596  000029                     moveForward@i:
   597                           	opt callstack 0
   598  000029                     moveBackward@i:
   599                           	opt callstack 0
   600                           
   601                           ; 2 bytes @ 0x28
   602  000029                     	ds	2
   603  00002B                     scanForBeacon@mL:
   604                           	opt callstack 0
   605  00002B                     moveToBeacon@mL:
   606                           	opt callstack 0
   607  00002B                     returnHome@mL:
   608                           	opt callstack 0
   609  00002B                     stopAndDisplay@mL:
   610                           	opt callstack 0
   611                           
   612                           ; 2 bytes @ 0x2A
   613  00002B                     	ds	2
   614  00002D                     scanForBeacon@mR:
   615                           	opt callstack 0
   616  00002D                     moveToBeacon@mR:
   617                           	opt callstack 0
   618  00002D                     returnHome@mR:
   619                           	opt callstack 0
   620  00002D                     stopAndDisplay@mR:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x2C
   624  00002D                     	ds	2
   625  00002F                     scanForBeacon@speed:
   626                           	opt callstack 0
   627  00002F                     moveToBeacon@speed:
   628                           	opt callstack 0
   629  00002F                     returnHome@speed:
   630                           	opt callstack 0
   631  00002F                     stopAndDisplay@speed:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x2E
   635  00002F                     	ds	2
   636  000031                     ??_scanForBeacon:
   637  000031                     moveToBeacon@time:
   638                           	opt callstack 0
   639  000031                     returnHome@time:
   640                           	opt callstack 0
   641  000031                     stopAndDisplay@RFID_buffer:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0x30
   645  000031                     	ds	2
   646  000033                     ??_stopAndDisplay:
   647  000033                     scanForBeacon@raw_data:
   648                           	opt callstack 0
   649  000033                     moveToBeacon@exit_flag:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0x32
   653  000033                     	ds	2
   654  000035                     ??_moveToBeacon:
   655  000035                     scanForBeacon@beacon_location:
   656                           	opt callstack 0
   657  000035                     stopAndDisplay@i:
   658                           	opt callstack 0
   659                           
   660                           ; 2 bytes @ 0x34
   661  000035                     	ds	2
   662  000037                     moveToBeacon@raw_data:
   663                           	opt callstack 0
   664                           
   665                           ; 2 bytes @ 0x36
   666  000037                     	ds	2
   667  000039                     moveToBeacon@beacon_location:
   668                           	opt callstack 0
   669                           
   670                           ; 1 bytes @ 0x38
   671  000039                     	ds	1
   672  00003A                     moveToBeacon@count:
   673                           	opt callstack 0
   674                           
   675                           ; 2 bytes @ 0x39
   676  00003A                     	ds	2
   677  00003C                     
   678                           ; 1 bytes @ 0x3B
   679 ;;
   680 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   681 ;;
   682 ;; *************** function _main *****************
   683 ;; Defined at:
   684 ;;		line 115 in file "main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  motorR          9   13[BANK0 ] struct DC_motor
   689 ;;  motorL          9    4[BANK0 ] struct DC_motor
   690 ;;  moving_speed    2    2[BANK0 ] int 
   691 ;;  searching_sp    2    0[BANK0 ] int 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   701 ;;      Params:         0       0       0       0
   702 ;;      Locals:         0      22       0       0
   703 ;;      Temps:          0       0       0       0
   704 ;;      Totals:         0      22       0       0
   705 ;;Total ram usage:       22 bytes
   706 ;; Hardware stack levels required when called:    9
   707 ;; This function calls:
   708 ;;		_LCD_String
   709 ;;		_init_motor_struct
   710 ;;		_moveToBeacon
   711 ;;		_returnHome
   712 ;;		_scanForBeacon
   713 ;;		_setup
   714 ;;		_stopAndDisplay
   715 ;;		_waitForInput
   716 ;; This function is called by:
   717 ;;		Startup code after reset
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text0
   722  00060E                     __ptext0:
   723                           	opt callstack 0
   724  00060E                     _main:
   725                           	opt callstack 22
   726                           
   727                           ;main.c: 118:   setup();
   728                           
   729                           ;incstack = 0
   730  00060E  ECA0  F007         	call	_setup	;wreg free
   731                           
   732                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   733  000612  0E96               	movlw	low main@motorL
   734  000614  6E22               	movwf	init_motor_struct@mL,c
   735  000616  0E00               	movlw	high main@motorL
   736  000618  6E23               	movwf	init_motor_struct@mL+1,c
   737  00061A  0E9F               	movlw	low main@motorR
   738  00061C  6E24               	movwf	init_motor_struct@mR,c
   739  00061E  0E00               	movlw	high main@motorR
   740  000620  6E25               	movwf	init_motor_struct@mR+1,c
   741  000622  EC80  F003         	call	_init_motor_struct	;wreg free
   742                           
   743                           ;main.c: 125:   int searching_speed = 65;
   744  000626  0E00               	movlw	0
   745  000628  0100               	movlb	0	; () banked
   746  00062A  6F93               	movwf	(main@searching_speed+1)& (0+255),b
   747  00062C  0E41               	movlw	65
   748  00062E  6F92               	movwf	main@searching_speed& (0+255),b
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 126:   int moving_speed = 95;
   752  000630  0E00               	movlw	0
   753  000632  6F95               	movwf	(main@moving_speed+1)& (0+255),b
   754  000634  0E5F               	movlw	95
   755  000636  6F94               	movwf	main@moving_speed& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 128:   waitForInput();
   759  000638  EC59  F004         	call	_waitForInput	;wreg free
   760  00063C                     l2663:
   761                           
   762                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   763  00063C  5043               	movf	_robot_mode,w,c	;volatile
   764  00063E  A4D8               	btfss	status,2,c
   765  000640  D00F               	goto	l2667
   766                           
   767                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed);
   768  000642  0E96               	movlw	low main@motorL
   769  000644  6E2B               	movwf	scanForBeacon@mL,c
   770  000646  0E00               	movlw	high main@motorL
   771  000648  6E2C               	movwf	scanForBeacon@mL+1,c
   772  00064A  0E9F               	movlw	low main@motorR
   773  00064C  6E2D               	movwf	scanForBeacon@mR,c
   774  00064E  0E00               	movlw	high main@motorR
   775  000650  6E2E               	movwf	scanForBeacon@mR+1,c
   776  000652  C092  F02F         	movff	main@searching_speed,scanForBeacon@speed
   777  000656  C093  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   778  00065A  ECE9  F006         	call	_scanForBeacon	;wreg free
   779  00065E  D047               	goto	L3
   780  000660                     l2667:
   781  000660  0443               	decf	_robot_mode,w,c	;volatile
   782  000662  A4D8               	btfss	status,2,c
   783  000664  D017               	goto	l2671
   784                           
   785                           ;main.c: 142:       {;main.c: 143:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   786  000666  0E96               	movlw	low main@motorL
   787  000668  6E2B               	movwf	moveToBeacon@mL,c
   788  00066A  0E00               	movlw	high main@motorL
   789  00066C  6E2C               	movwf	moveToBeacon@mL+1,c
   790  00066E  0E9F               	movlw	low main@motorR
   791  000670  6E2D               	movwf	moveToBeacon@mR,c
   792  000672  0E00               	movlw	high main@motorR
   793  000674  6E2E               	movwf	moveToBeacon@mR+1,c
   794  000676  C094  F02F         	movff	main@moving_speed,moveToBeacon@speed
   795  00067A  C095  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   796  00067E  0E44               	movlw	low _movement_time
   797  000680  6E31               	movwf	moveToBeacon@time,c
   798  000682  0E00               	movlw	high _movement_time
   799  000684  6E32               	movwf	moveToBeacon@time+1,c
   800  000686  0E48               	movlw	low _RFID_flag
   801  000688  6E33               	movwf	moveToBeacon@exit_flag,c
   802  00068A  0E00               	movlw	high _RFID_flag
   803  00068C  6E34               	movwf	moveToBeacon@exit_flag+1,c
   804  00068E  EC02  F005         	call	_moveToBeacon	;wreg free
   805  000692  D02D               	goto	L3
   806  000694                     l2671:
   807  000694  0E02               	movlw	2
   808  000696  1843               	xorwf	_robot_mode,w,c	;volatile
   809  000698  A4D8               	btfss	status,2,c
   810  00069A  D013               	goto	l2675
   811                           
   812                           ;main.c: 149:       {;main.c: 150:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   813  00069C  0E96               	movlw	low main@motorL
   814  00069E  6E2B               	movwf	returnHome@mL,c
   815  0006A0  0E00               	movlw	high main@motorL
   816  0006A2  6E2C               	movwf	returnHome@mL+1,c
   817  0006A4  0E9F               	movlw	low main@motorR
   818  0006A6  6E2D               	movwf	returnHome@mR,c
   819  0006A8  0E00               	movlw	high main@motorR
   820  0006AA  6E2E               	movwf	returnHome@mR+1,c
   821  0006AC  C094  F02F         	movff	main@moving_speed,returnHome@speed
   822  0006B0  C095  F030         	movff	main@moving_speed+1,returnHome@speed+1
   823  0006B4  0E44               	movlw	low _movement_time
   824  0006B6  6E31               	movwf	returnHome@time,c
   825  0006B8  0E00               	movlw	high _movement_time
   826  0006BA  6E32               	movwf	returnHome@time+1,c
   827  0006BC  EC3C  F007         	call	_returnHome	;wreg free
   828  0006C0  D016               	goto	L3
   829  0006C2                     l2675:
   830  0006C2  0E03               	movlw	3
   831  0006C4  1843               	xorwf	_robot_mode,w,c	;volatile
   832  0006C6  A4D8               	btfss	status,2,c
   833  0006C8  D014               	goto	l2679
   834                           
   835                           ;main.c: 156:       {;main.c: 157:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   836  0006CA  0E96               	movlw	low main@motorL
   837  0006CC  6E2B               	movwf	stopAndDisplay@mL,c
   838  0006CE  0E00               	movlw	high main@motorL
   839  0006D0  6E2C               	movwf	stopAndDisplay@mL+1,c
   840  0006D2  0E9F               	movlw	low main@motorR
   841  0006D4  6E2D               	movwf	stopAndDisplay@mR,c
   842  0006D6  0E00               	movlw	high main@motorR
   843  0006D8  6E2E               	movwf	stopAndDisplay@mR+1,c
   844  0006DA  C094  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   845  0006DE  C095  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   846  0006E2  0E86               	movlw	low _RFIDbuf
   847  0006E4  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   848  0006E6  0E00               	movlw	high _RFIDbuf
   849  0006E8  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   850  0006EA  ECB6  F004         	call	_stopAndDisplay	;wreg free
   851  0006EE                     L3:
   852  0006EE  6E43               	movwf	_robot_mode,c	;volatile
   853                           
   854                           ;main.c: 158:       }
   855  0006F0  D7A5               	goto	l2663
   856  0006F2                     l2679:
   857                           
   858                           ;main.c: 162:       {;main.c: 163:           LCD_String("Critical Error");
   859  0006F2  0E6F               	movlw	low STR_1
   860  0006F4  6E0F               	movwf	LCD_String@string,c
   861  0006F6  0E03               	movlw	high STR_1
   862  0006F8  6E10               	movwf	LCD_String@string+1,c
   863  0006FA  EC8C  F006         	call	_LCD_String	;wreg free
   864  0006FE  D79E               	goto	l2663
   865  000700                     __end_of_main:
   866                           	opt callstack 0
   867                           
   868 ;; *************** function _waitForInput *****************
   869 ;; Defined at:
   870 ;;		line 156 in file "subroutines.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  raw_data        2   19[COMRAM] unsigned int 
   875 ;;  throwaway       1    0        unsigned char 
   876 ;;  i               2   23[COMRAM] int 
   877 ;;  i               2   21[COMRAM] int 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   887 ;;      Params:         0       0       0       0
   888 ;;      Locals:         7       0       0       0
   889 ;;      Temps:          2       0       0       0
   890 ;;      Totals:         9       0       0       0
   891 ;;Total ram usage:        9 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    7
   894 ;; This function calls:
   895 ;;		_ClearLCD
   896 ;;		_LCD_String
   897 ;;		_SetLine
   898 ;;		_classify_data
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text1
   905  0008B2                     __ptext1:
   906                           	opt callstack 0
   907  0008B2                     _waitForInput:
   908                           	opt callstack 23
   909                           
   910                           ;subroutines.c: 159:     for(int i =0;i<500;i++)
   911                           
   912                           ;incstack = 0
   913  0008B2  0E00               	movlw	0
   914  0008B4  6E17               	movwf	waitForInput@i+1,c
   915  0008B6  0E00               	movlw	0
   916  0008B8  6E16               	movwf	waitForInput@i,c
   917  0008BA                     l2531:
   918                           
   919                           ;subroutines.c: 160:     {;subroutines.c: 161:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   920  0008BA  5068               	movf	3944,w,c	;volatile
   921  0008BC  CF69 F011          	movff	3945,??_waitForInput	;volatile
   922  0008C0  6A12               	clrf	(??_waitForInput+1)& (0+255),c
   923  0008C2  C011  F012         	movff	??_waitForInput,??_waitForInput+1
   924  0008C6  6A11               	clrf	??_waitForInput,c
   925  0008C8  1011               	iorwf	??_waitForInput,w,c
   926  0008CA  6E14               	movwf	waitForInput@raw_data,c
   927  0008CC  5012               	movf	??_waitForInput+1,w,c
   928  0008CE  6E15               	movwf	waitForInput@raw_data+1,c
   929  0008D0  C014  F00B         	movff	waitForInput@raw_data,classify_data@raw_data
   930  0008D4  C015  F00C         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   931  0008D8  EC5E  F007         	call	_classify_data	;wreg free
   932                           
   933                           ;subroutines.c: 163:     }
   934  0008DC  4A16               	infsnz	waitForInput@i,f,c
   935  0008DE  2A17               	incf	waitForInput@i+1,f,c
   936  0008E0  BE17               	btfsc	waitForInput@i+1,7,c
   937  0008E2  D7EB               	goto	l2531
   938  0008E4  0EF4               	movlw	244
   939  0008E6  5C16               	subwf	waitForInput@i,w,c
   940  0008E8  0E01               	movlw	1
   941  0008EA  5817               	subwfb	waitForInput@i+1,w,c
   942  0008EC  A0D8               	btfss	status,0,c
   943  0008EE  D7E5               	goto	l2531
   944                           
   945                           ;subroutines.c: 166:     ClearLCD();
   946  0008F0  EC44  F008         	call	_ClearLCD	;wreg free
   947                           
   948                           ;subroutines.c: 167:     SetLine(1);
   949  0008F4  0E01               	movlw	1
   950  0008F6  ECED  F007         	call	_SetLine
   951                           
   952                           ;subroutines.c: 168:     LCD_String("PRESS BUTTON");
   953  0008FA  0E7E               	movlw	low STR_10
   954  0008FC  6E0F               	movwf	LCD_String@string,c
   955  0008FE  0E03               	movlw	high STR_10
   956  000900  6E10               	movwf	LCD_String@string+1,c
   957  000902  EC8C  F006         	call	_LCD_String	;wreg free
   958                           
   959                           ;subroutines.c: 169:     SetLine(2);
   960  000906  0E02               	movlw	2
   961  000908  ECED  F007         	call	_SetLine
   962                           
   963                           ;subroutines.c: 170:     LCD_String("TO START SEARCH");
   964  00090C  0E11               	movlw	low STR_11
   965  00090E  6E0F               	movwf	LCD_String@string,c
   966  000910  0E03               	movlw	high STR_11
   967  000912  6E10               	movwf	LCD_String@string+1,c
   968  000914  EC8C  F006         	call	_LCD_String	;wreg free
   969  000918                     l345:
   970  000918  A483               	btfss	3971,2,c	;volatile
   971  00091A  D7FE               	goto	l345
   972                           
   973                           ;subroutines.c: 176:     ClearLCD();
   974  00091C  EC44  F008         	call	_ClearLCD	;wreg free
   975                           
   976                           ;subroutines.c: 177:     SetLine(1);
   977  000920  0E01               	movlw	1
   978  000922  ECED  F007         	call	_SetLine
   979                           
   980                           ;subroutines.c: 178:     LCD_String("STARTING SEARCH");
   981  000926  0E01               	movlw	low STR_12
   982  000928  6E0F               	movwf	LCD_String@string,c
   983  00092A  0E03               	movlw	high STR_12
   984  00092C  6E10               	movwf	LCD_String@string+1,c
   985  00092E  EC8C  F006         	call	_LCD_String	;wreg free
   986                           
   987                           ;subroutines.c: 179:     for(int i=0; i<10;i++)
   988  000932  0E00               	movlw	0
   989  000934  6E19               	movwf	waitForInput@i_1364+1,c
   990  000936  0E00               	movlw	0
   991  000938  6E18               	movwf	waitForInput@i_1364,c
   992  00093A                     l2555:
   993                           
   994                           ;subroutines.c: 180:     {;subroutines.c: 181:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   995  00093A  0E02               	movlw	2
   996  00093C  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   997  00093E  0E04               	movlw	4
   998  000940  6E11               	movwf	??_waitForInput& (0+255),c
   999  000942  0EBA               	movlw	186
  1000  000944                     u1897:
  1001  000944  2EE8               	decfsz	wreg,f,c
  1002  000946  D7FE               	bra	u1897
  1003  000948  2E11               	decfsz	??_waitForInput& (0+255),f,c
  1004  00094A  D7FC               	bra	u1897
  1005  00094C  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
  1006  00094E  D7FA               	bra	u1897
  1007  000950  D000               	nop2	
  1008                           
  1009                           ;subroutines.c: 182:     }
  1010  000952  4A18               	infsnz	waitForInput@i_1364,f,c
  1011  000954  2A19               	incf	waitForInput@i_1364+1,f,c
  1012  000956  BE19               	btfsc	waitForInput@i_1364+1,7,c
  1013  000958  D7F0               	goto	l2555
  1014  00095A  5019               	movf	waitForInput@i_1364+1,w,c
  1015  00095C  E104               	bnz	u1760
  1016  00095E  0E0A               	movlw	10
  1017  000960  5C18               	subwf	waitForInput@i_1364,w,c
  1018  000962  A0D8               	btfss	status,0,c
  1019  000964  D7EA               	goto	l2555
  1020  000966                     u1760:
  1021                           
  1022                           ;subroutines.c: 183:     ClearLCD();
  1023  000966  EC44  F008         	call	_ClearLCD	;wreg free
  1024  00096A  0012               	return		;funcret
  1025  00096C                     __end_of_waitForInput:
  1026                           	opt callstack 0
  1027                           
  1028 ;; *************** function _stopAndDisplay *****************
  1029 ;; Defined at:
  1030 ;;		line 94 in file "subroutines.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1033 ;;		 -> main@motorL(9), 
  1034 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1035 ;;		 -> main@motorR(9), 
  1036 ;;  speed           2   46[COMRAM] int 
  1037 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
  1038 ;;		 -> RFIDbuf(12), 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  i               2   52[COMRAM] int 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      unsigned char 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1050 ;;      Params:         8       0       0       0
  1051 ;;      Locals:         2       0       0       0
  1052 ;;      Temps:          2       0       0       0
  1053 ;;      Totals:        12       0       0       0
  1054 ;;Total ram usage:       12 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    8
  1057 ;; This function calls:
  1058 ;;		_ClearLCD
  1059 ;;		_LCD_String
  1060 ;;		_check_RFID
  1061 ;;		_display_RFID
  1062 ;;		_stop
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text2
  1069  00096C                     __ptext2:
  1070                           	opt callstack 0
  1071  00096C                     _stopAndDisplay:
  1072                           	opt callstack 22
  1073                           
  1074                           ;subroutines.c: 94: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *mR
      +                          , int speed,;subroutines.c: 95:                                 volatile char RFID_buffe
      +                          r[]);subroutines.c: 96: {;subroutines.c: 97:     stop(mL, mR,speed);
  1075                           
  1076                           ;incstack = 0
  1077  00096C  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1078  000970  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1079  000974  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1080  000978  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1081  00097C  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1082  000980  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1083  000984  ECBB  F006         	call	_stop	;wreg free
  1084                           
  1085                           ;subroutines.c: 99:     display_RFID(RFID_buffer);
  1086  000988  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1087  00098C  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1088  000990  EC80  F007         	call	_display_RFID	;wreg free
  1089                           
  1090                           ;subroutines.c: 100:     check_RFID(RFID_buffer);
  1091  000994  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1092  000998  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1093  00099C  ECCD  F001         	call	_check_RFID	;wreg free
  1094                           
  1095                           ;subroutines.c: 102:     if(RFID_buffer[0] != 0)
  1096  0009A0  C031  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1097  0009A4  C032  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1098  0009A8  50DF               	movf	indf2,w,c
  1099  0009AA  A4D8               	btfss	status,2,c
  1100  0009AC  D026               	goto	l2647
  1101  0009AE  D028               	goto	l2649
  1102  0009B0                     l2631:
  1103                           
  1104                           ;subroutines.c: 107:             {;subroutines.c: 108:                 ClearLCD();
  1105  0009B0  EC44  F008         	call	_ClearLCD	;wreg free
  1106                           
  1107                           ;subroutines.c: 109:                 LCD_String("RESETTING ROBOT");
  1108  0009B4  0E21               	movlw	low STR_7
  1109  0009B6  6E0F               	movwf	LCD_String@string,c
  1110  0009B8  0E03               	movlw	high STR_7
  1111  0009BA  6E10               	movwf	LCD_String@string+1,c
  1112  0009BC  EC8C  F006         	call	_LCD_String	;wreg free
  1113                           
  1114                           ;subroutines.c: 110:                 for(int i=0; i<10;i++)
  1115  0009C0  0E00               	movlw	0
  1116  0009C2  6E36               	movwf	stopAndDisplay@i+1,c
  1117  0009C4  0E00               	movlw	0
  1118  0009C6  6E35               	movwf	stopAndDisplay@i,c
  1119  0009C8                     l2641:
  1120                           
  1121                           ;subroutines.c: 111:                 {;subroutines.c: 112:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1122  0009C8  0E02               	movlw	2
  1123  0009CA  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1124  0009CC  0E04               	movlw	4
  1125  0009CE  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1126  0009D0  0EBA               	movlw	186
  1127  0009D2                     u1907:
  1128  0009D2  2EE8               	decfsz	wreg,f,c
  1129  0009D4  D7FE               	bra	u1907
  1130  0009D6  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1131  0009D8  D7FC               	bra	u1907
  1132  0009DA  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1133  0009DC  D7FA               	bra	u1907
  1134  0009DE  D000               	nop2	
  1135                           
  1136                           ;subroutines.c: 113:                 }
  1137  0009E0  4A35               	infsnz	stopAndDisplay@i,f,c
  1138  0009E2  2A36               	incf	stopAndDisplay@i+1,f,c
  1139  0009E4  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1140  0009E6  D7F0               	goto	l2641
  1141  0009E8  5036               	movf	stopAndDisplay@i+1,w,c
  1142  0009EA  E104               	bnz	u1830
  1143  0009EC  0E0A               	movlw	10
  1144  0009EE  5C35               	subwf	stopAndDisplay@i,w,c
  1145  0009F0  A0D8               	btfss	status,0,c
  1146  0009F2  D7EA               	goto	l2641
  1147  0009F4                     u1830:
  1148                           
  1149                           ;subroutines.c: 114:                 ClearLCD();
  1150  0009F4  EC44  F008         	call	_ClearLCD	;wreg free
  1151  0009F8  00FF               	reset		;# 
  1152  0009FA                     l2647:
  1153                           
  1154                           ;subroutines.c: 106:             while(PORTDbits.RD2 == 1)
  1155  0009FA  A483               	btfss	3971,2,c	;volatile
  1156  0009FC  D7FE               	goto	l2647
  1157  0009FE  D7D8               	goto	l2631
  1158  000A00                     l2649:
  1159                           
  1160                           ;subroutines.c: 120:     {;subroutines.c: 121:         return 0;
  1161  000A00  0E00               	movlw	0
  1162  000A02  0012               	return		;funcret
  1163  000A04                     __end_of_stopAndDisplay:
  1164                           	opt callstack 0
  1165                           
  1166 ;; *************** function _stop *****************
  1167 ;; Defined at:
  1168 ;;		line 40 in file "dc_motor.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1171 ;;		 -> main@motorL(9), 
  1172 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1173 ;;		 -> main@motorR(9), 
  1174 ;;  initial_spee    2   37[COMRAM] int 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  i               2   40[COMRAM] int 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1186 ;;      Params:         6       0       0       0
  1187 ;;      Locals:         2       0       0       0
  1188 ;;      Temps:          1       0       0       0
  1189 ;;      Totals:         9       0       0       0
  1190 ;;Total ram usage:        9 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    5
  1193 ;; This function calls:
  1194 ;;		_setMotorPWM
  1195 ;; This function is called by:
  1196 ;;		_stopAndDisplay
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text3
  1201  000D76                     __ptext3:
  1202                           	opt callstack 0
  1203  000D76                     _stop:
  1204                           	opt callstack 24
  1205                           
  1206                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1207                           
  1208                           ;incstack = 0
  1209  000D76  C026  F029         	movff	stop@initial_speed,stop@i
  1210  000D7A  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  1211  000D7E                     l2365:
  1212  000D7E  BE2A               	btfsc	stop@i+1,7,c
  1213  000D80  0012               	return	
  1214  000D82  502A               	movf	stop@i+1,w,c
  1215  000D84  E103               	bnz	l2369
  1216  000D86  0429               	decf	stop@i,w,c
  1217  000D88  A0D8               	btfss	status,0,c
  1218  000D8A  0012               	return	
  1219  000D8C                     l2369:
  1220                           
  1221                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1222  000D8C  C022  FFD9         	movff	stop@mL,fsr2l
  1223  000D90  C023  FFDA         	movff	stop@mL+1,fsr2h
  1224  000D94  C029  FFDF         	movff	stop@i,indf2
  1225                           
  1226                           ;dc_motor.c: 45:         mR->power = i;
  1227  000D98  C024  FFD9         	movff	stop@mR,fsr2l
  1228  000D9C  C025  FFDA         	movff	stop@mR+1,fsr2h
  1229  000DA0  C029  FFDF         	movff	stop@i,indf2
  1230                           
  1231                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1232  000DA4  C022  F019         	movff	stop@mL,setMotorPWM@m
  1233  000DA8  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  1234  000DAC  EC75  F002         	call	_setMotorPWM	;wreg free
  1235                           
  1236                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1237  000DB0  C024  F019         	movff	stop@mR,setMotorPWM@m
  1238  000DB4  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  1239  000DB8  EC75  F002         	call	_setMotorPWM	;wreg free
  1240                           
  1241                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1242  000DBC  0E03               	movlw	3
  1243  000DBE  6E28               	movwf	??_stop& (0+255),c
  1244  000DC0  0E98               	movlw	152
  1245  000DC2                     u1917:
  1246  000DC2  2EE8               	decfsz	wreg,f,c
  1247  000DC4  D7FE               	bra	u1917
  1248  000DC6  2E28               	decfsz	??_stop& (0+255),f,c
  1249  000DC8  D7FC               	bra	u1917
  1250                           
  1251                           ;dc_motor.c: 49:     }
  1252  000DCA  0629               	decf	stop@i,f,c
  1253  000DCC  A0D8               	btfss	status,0,c
  1254  000DCE  062A               	decf	stop@i+1,f,c
  1255  000DD0  D7D6               	goto	l2365
  1256  000DD2                     __end_of_stop:
  1257                           	opt callstack 0
  1258                           
  1259 ;; *************** function _display_RFID *****************
  1260 ;; Defined at:
  1261 ;;		line 107 in file "RFID.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1264 ;;		 -> RFIDbuf(12), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  i               2   17[COMRAM] int 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1276 ;;      Params:         2       0       0       0
  1277 ;;      Locals:         2       0       0       0
  1278 ;;      Temps:          0       0       0       0
  1279 ;;      Totals:         4       0       0       0
  1280 ;;Total ram usage:        4 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    7
  1283 ;; This function calls:
  1284 ;;		_ClearLCD
  1285 ;;		_SendLCD
  1286 ;;		_SetLine
  1287 ;; This function is called by:
  1288 ;;		_stopAndDisplay
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text4
  1293  000F00                     __ptext4:
  1294                           	opt callstack 0
  1295  000F00                     _display_RFID:
  1296                           	opt callstack 22
  1297                           
  1298                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1299                           
  1300                           ;incstack = 0
  1301  000F00  EC44  F008         	call	_ClearLCD	;wreg free
  1302                           
  1303                           ;RFID.c: 110:     SetLine(1);
  1304  000F04  0E01               	movlw	1
  1305  000F06  ECED  F007         	call	_SetLine
  1306                           
  1307                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1308  000F0A  0E00               	movlw	0
  1309  000F0C  6E13               	movwf	display_RFID@i+1,c
  1310  000F0E  0E00               	movlw	0
  1311  000F10  6E12               	movwf	display_RFID@i,c
  1312  000F12                     l2469:
  1313                           
  1314                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1315  000F12  0E01               	movlw	1
  1316  000F14  6E0D               	movwf	SendLCD@type,c
  1317  000F16  5012               	movf	display_RFID@i,w,c
  1318  000F18  2410               	addwf	display_RFID@dataBuf,w,c
  1319  000F1A  6ED9               	movwf	fsr2l,c
  1320  000F1C  5013               	movf	display_RFID@i+1,w,c
  1321  000F1E  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1322  000F20  6EDA               	movwf	fsr2h,c
  1323  000F22  50DF               	movf	indf2,w,c
  1324  000F24  ECD5  F007         	call	_SendLCD
  1325                           
  1326                           ;RFID.c: 114:     }
  1327  000F28  4A12               	infsnz	display_RFID@i,f,c
  1328  000F2A  2A13               	incf	display_RFID@i+1,f,c
  1329  000F2C  BE13               	btfsc	display_RFID@i+1,7,c
  1330  000F2E  D7F1               	goto	l2469
  1331  000F30  5013               	movf	display_RFID@i+1,w,c
  1332  000F32  E105               	bnz	u1710
  1333  000F34  0E0A               	movlw	10
  1334  000F36  5C12               	subwf	display_RFID@i,w,c
  1335  000F38  B0D8               	btfsc	status,0,c
  1336  000F3A  0012               	return	
  1337  000F3C  D7EA               	goto	l2469
  1338  000F3E                     u1710:
  1339  000F3E  0012               	return		;funcret
  1340  000F40                     __end_of_display_RFID:
  1341                           	opt callstack 0
  1342                           
  1343 ;; *************** function _check_RFID *****************
  1344 ;; Defined at:
  1345 ;;		line 70 in file "RFID.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1348 ;;		 -> RFIDbuf(12), 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  i               2   38[COMRAM] int 
  1351 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1352 ;;  checksum        1   37[COMRAM] unsigned char 
  1353 ;;  byte5           1   36[COMRAM] unsigned char 
  1354 ;;  byte4           1   35[COMRAM] unsigned char 
  1355 ;;  byte3           1   34[COMRAM] unsigned char 
  1356 ;;  byte2           1   33[COMRAM] unsigned char 
  1357 ;;  byte1           1   32[COMRAM] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      void 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1367 ;;      Params:         2       0       0       0
  1368 ;;      Locals:        20       0       0       0
  1369 ;;      Temps:          2       0       0       0
  1370 ;;      Totals:        24       0       0       0
  1371 ;;Total ram usage:       24 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    7
  1374 ;; This function calls:
  1375 ;;		_LCD_String
  1376 ;;		_SetLine
  1377 ;; This function is called by:
  1378 ;;		_stopAndDisplay
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text5
  1383  00039A                     __ptext5:
  1384                           	opt callstack 0
  1385  00039A                     _check_RFID:
  1386                           	opt callstack 22
  1387                           
  1388                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1389                           
  1390                           ;incstack = 0
  1391  00039A  0E00               	movlw	0
  1392  00039C  6E28               	movwf	check_RFID@i+1,c
  1393  00039E  0E00               	movlw	0
  1394  0003A0  6E27               	movwf	check_RFID@i,c
  1395  0003A2                     l2435:
  1396                           
  1397                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1398  0003A2  5027               	movf	check_RFID@i,w,c
  1399  0003A4  2411               	addwf	check_RFID@dataBuf,w,c
  1400  0003A6  6ED9               	movwf	fsr2l,c
  1401  0003A8  5028               	movf	check_RFID@i+1,w,c
  1402  0003AA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1403  0003AC  6EDA               	movwf	fsr2h,c
  1404  0003AE  0E2F               	movlw	47
  1405  0003B0  64DF               	cpfsgt	indf2,c
  1406  0003B2  D018               	goto	l2441
  1407  0003B4  5027               	movf	check_RFID@i,w,c
  1408  0003B6  2411               	addwf	check_RFID@dataBuf,w,c
  1409  0003B8  6ED9               	movwf	fsr2l,c
  1410  0003BA  5028               	movf	check_RFID@i+1,w,c
  1411  0003BC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1412  0003BE  6EDA               	movwf	fsr2h,c
  1413  0003C0  0E3A               	movlw	58
  1414  0003C2  60DF               	cpfslt	indf2,c
  1415  0003C4  D00F               	goto	l2441
  1416                           
  1417                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1418  0003C6  0E15               	movlw	low check_RFID@hexBuf
  1419  0003C8  2427               	addwf	check_RFID@i,w,c
  1420  0003CA  6ED9               	movwf	fsr2l,c
  1421  0003CC  0E00               	movlw	high check_RFID@hexBuf
  1422  0003CE  2028               	addwfc	check_RFID@i+1,w,c
  1423  0003D0  6EDA               	movwf	fsr2h,c
  1424  0003D2  5027               	movf	check_RFID@i,w,c
  1425  0003D4  2411               	addwf	check_RFID@dataBuf,w,c
  1426  0003D6  6EE1               	movwf	fsr1l,c
  1427  0003D8  5028               	movf	check_RFID@i+1,w,c
  1428  0003DA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1429  0003DC  6EE2               	movwf	fsr1h,c
  1430  0003DE  50E7               	movf	indf1,w,c
  1431  0003E0  0FD0               	addlw	208
  1432  0003E2  D020               	goto	L4
  1433  0003E4                     l2441:
  1434  0003E4  5027               	movf	check_RFID@i,w,c
  1435  0003E6  2411               	addwf	check_RFID@dataBuf,w,c
  1436  0003E8  6ED9               	movwf	fsr2l,c
  1437  0003EA  5028               	movf	check_RFID@i+1,w,c
  1438  0003EC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1439  0003EE  6EDA               	movwf	fsr2h,c
  1440  0003F0  0E40               	movlw	64
  1441  0003F2  64DF               	cpfsgt	indf2,c
  1442  0003F4  D018               	goto	l2447
  1443  0003F6  5027               	movf	check_RFID@i,w,c
  1444  0003F8  2411               	addwf	check_RFID@dataBuf,w,c
  1445  0003FA  6ED9               	movwf	fsr2l,c
  1446  0003FC  5028               	movf	check_RFID@i+1,w,c
  1447  0003FE  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1448  000400  6EDA               	movwf	fsr2h,c
  1449  000402  0E47               	movlw	71
  1450  000404  60DF               	cpfslt	indf2,c
  1451  000406  D00F               	goto	l2447
  1452                           
  1453                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1454  000408  0E15               	movlw	low check_RFID@hexBuf
  1455  00040A  2427               	addwf	check_RFID@i,w,c
  1456  00040C  6ED9               	movwf	fsr2l,c
  1457  00040E  0E00               	movlw	high check_RFID@hexBuf
  1458  000410  2028               	addwfc	check_RFID@i+1,w,c
  1459  000412  6EDA               	movwf	fsr2h,c
  1460  000414  5027               	movf	check_RFID@i,w,c
  1461  000416  2411               	addwf	check_RFID@dataBuf,w,c
  1462  000418  6EE1               	movwf	fsr1l,c
  1463  00041A  5028               	movf	check_RFID@i+1,w,c
  1464  00041C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1465  00041E  6EE2               	movwf	fsr1h,c
  1466  000420  50E7               	movf	indf1,w,c
  1467  000422  0FC9               	addlw	201
  1468  000424                     L4:
  1469  000424  6EDF               	movwf	indf2,c
  1470  000426                     l2447:
  1471                           
  1472                           ;RFID.c: 84:     }
  1473  000426  4A27               	infsnz	check_RFID@i,f,c
  1474  000428  2A28               	incf	check_RFID@i+1,f,c
  1475  00042A  BE28               	btfsc	check_RFID@i+1,7,c
  1476  00042C  D7BA               	goto	l2435
  1477  00042E  5028               	movf	check_RFID@i+1,w,c
  1478  000430  E104               	bnz	u1550
  1479  000432  0E0C               	movlw	12
  1480  000434  5C27               	subwf	check_RFID@i,w,c
  1481  000436  A0D8               	btfss	status,0,c
  1482  000438  D7B4               	goto	l2435
  1483  00043A                     u1550:
  1484                           
  1485                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1486  00043A  5015               	movf	check_RFID@hexBuf,w,c
  1487  00043C  A4D8               	btfss	status,2,c
  1488  00043E  D002               	goto	u1560
  1489  000440  0E01               	movlw	1
  1490  000442  D001               	goto	u1570
  1491  000444                     u1560:
  1492  000444  0E00               	movlw	0
  1493  000446                     u1570:
  1494  000446  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1495  000448  6E21               	movwf	check_RFID@byte1,c
  1496                           
  1497                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1498  00044A  5017               	movf	check_RFID@hexBuf+2,w,c
  1499  00044C  A4D8               	btfss	status,2,c
  1500  00044E  D002               	goto	u1580
  1501  000450  0E01               	movlw	1
  1502  000452  D001               	goto	u1590
  1503  000454                     u1580:
  1504  000454  0E00               	movlw	0
  1505  000456                     u1590:
  1506  000456  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1507  000458  6E22               	movwf	check_RFID@byte2,c
  1508                           
  1509                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1510  00045A  5019               	movf	check_RFID@hexBuf+4,w,c
  1511  00045C  A4D8               	btfss	status,2,c
  1512  00045E  D002               	goto	u1600
  1513  000460  0E01               	movlw	1
  1514  000462  D001               	goto	u1610
  1515  000464                     u1600:
  1516  000464  0E00               	movlw	0
  1517  000466                     u1610:
  1518  000466  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1519  000468  6E23               	movwf	check_RFID@byte3,c
  1520                           
  1521                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1522  00046A  501B               	movf	check_RFID@hexBuf+6,w,c
  1523  00046C  A4D8               	btfss	status,2,c
  1524  00046E  D002               	goto	u1620
  1525  000470  0E01               	movlw	1
  1526  000472  D001               	goto	u1630
  1527  000474                     u1620:
  1528  000474  0E00               	movlw	0
  1529  000476                     u1630:
  1530  000476  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1531  000478  6E24               	movwf	check_RFID@byte4,c
  1532                           
  1533                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1534  00047A  501D               	movf	check_RFID@hexBuf+8,w,c
  1535  00047C  A4D8               	btfss	status,2,c
  1536  00047E  D002               	goto	u1640
  1537  000480  0E01               	movlw	1
  1538  000482  D001               	goto	u1650
  1539  000484                     u1640:
  1540  000484  0E00               	movlw	0
  1541  000486                     u1650:
  1542  000486  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1543  000488  6E25               	movwf	check_RFID@byte5,c
  1544                           
  1545                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1546  00048A  501F               	movf	check_RFID@hexBuf+10,w,c
  1547  00048C  A4D8               	btfss	status,2,c
  1548  00048E  D002               	goto	u1660
  1549  000490  0E01               	movlw	1
  1550  000492  D001               	goto	u1670
  1551  000494                     u1660:
  1552  000494  0E00               	movlw	0
  1553  000496                     u1670:
  1554  000496  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1555  000498  6E26               	movwf	check_RFID@checksum,c
  1556                           
  1557                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1558  00049A  5021               	movf	check_RFID@byte1,w,c
  1559  00049C  1822               	xorwf	check_RFID@byte2,w,c
  1560  00049E  1823               	xorwf	check_RFID@byte3,w,c
  1561  0004A0  1824               	xorwf	check_RFID@byte4,w,c
  1562  0004A2  6E13               	movwf	??_check_RFID& (0+255),c
  1563  0004A4  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1564  0004A6  5026               	movf	check_RFID@checksum,w,c
  1565  0004A8  1825               	xorwf	check_RFID@byte5,w,c
  1566  0004AA  A4D8               	btfss	status,2,c
  1567  0004AC  D002               	goto	u1680
  1568  0004AE  0E01               	movlw	1
  1569  0004B0  D001               	goto	u1690
  1570  0004B2                     u1680:
  1571  0004B2  0E00               	movlw	0
  1572  0004B4                     u1690:
  1573  0004B4  1A13               	xorwf	??_check_RFID,f,c
  1574  0004B6  0E00               	movlw	0
  1575  0004B8  1A14               	xorwf	??_check_RFID+1,f,c
  1576  0004BA  5013               	movf	??_check_RFID,w,c
  1577  0004BC  1014               	iorwf	??_check_RFID+1,w,c
  1578  0004BE  B4D8               	btfsc	status,2,c
  1579  0004C0  D00A               	goto	l2457
  1580                           
  1581                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1582  0004C2  0E02               	movlw	2
  1583  0004C4  ECED  F007         	call	_SetLine
  1584                           
  1585                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1586  0004C8  0E41               	movlw	low STR_2
  1587  0004CA  6E0F               	movwf	LCD_String@string,c
  1588  0004CC  0E03               	movlw	high STR_2
  1589  0004CE  6E10               	movwf	LCD_String@string+1,c
  1590  0004D0  EC8C  F006         	call	_LCD_String	;wreg free
  1591                           
  1592                           ;RFID.c: 99:     }
  1593  0004D4  0012               	return	
  1594  0004D6                     l2457:
  1595                           
  1596                           ;RFID.c: 102:         SetLine(2);
  1597  0004D6  0E02               	movlw	2
  1598  0004D8  ECED  F007         	call	_SetLine
  1599                           
  1600                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1601  0004DC  0E31               	movlw	low STR_3
  1602  0004DE  6E0F               	movwf	LCD_String@string,c
  1603  0004E0  0E03               	movlw	high STR_3
  1604  0004E2  6E10               	movwf	LCD_String@string+1,c
  1605  0004E4  EC8C  F006         	call	_LCD_String	;wreg free
  1606  0004E8  0012               	return		;funcret
  1607  0004EA                     __end_of_check_RFID:
  1608                           	opt callstack 0
  1609                           
  1610 ;; *************** function _SetLine *****************
  1611 ;; Defined at:
  1612 ;;		line 107 in file "LCDIO.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  line            1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  line            1   14[COMRAM] unsigned char 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       0       0       0
  1627 ;;      Locals:         1       0       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         1       0       0       0
  1630 ;;Total ram usage:        1 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    6
  1633 ;; This function calls:
  1634 ;;		_SendLCD
  1635 ;; This function is called by:
  1636 ;;		_check_RFID
  1637 ;;		_display_RFID
  1638 ;;		_waitForInput
  1639 ;;		_debug
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text6
  1644  000FDA                     __ptext6:
  1645                           	opt callstack 0
  1646  000FDA                     _SetLine:
  1647                           	opt callstack 23
  1648                           
  1649                           ;incstack = 0
  1650                           ;SetLine@line stored from wreg
  1651  000FDA  6E0F               	movwf	SetLine@line,c
  1652                           
  1653                           ;LCDIO.c: 109:     if(line == 1){
  1654  000FDC  040F               	decf	SetLine@line,w,c
  1655  000FDE  A4D8               	btfss	status,2,c
  1656  000FE0  D005               	goto	l2297
  1657                           
  1658                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1659  000FE2  0E00               	movlw	0
  1660  000FE4  6E0D               	movwf	SendLCD@type,c
  1661  000FE6  0E80               	movlw	128
  1662  000FE8  ECD5  F007         	call	_SendLCD
  1663  000FEC                     l2297:
  1664                           
  1665                           ;LCDIO.c: 113:     if(line == 2){
  1666  000FEC  0E02               	movlw	2
  1667  000FEE  180F               	xorwf	SetLine@line,w,c
  1668  000FF0  A4D8               	btfss	status,2,c
  1669  000FF2  D005               	goto	l2301
  1670                           
  1671                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1672  000FF4  0E00               	movlw	0
  1673  000FF6  6E0D               	movwf	SendLCD@type,c
  1674  000FF8  0EC0               	movlw	192
  1675  000FFA  ECD5  F007         	call	_SendLCD
  1676  000FFE                     l2301:
  1677                           
  1678                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1679  000FFE  0E21               	movlw	33
  1680  001000                     u1927:
  1681  001000  2EE8               	decfsz	wreg,f,c
  1682  001002  D7FE               	bra	u1927
  1683  001004  F000               	nop	
  1684  001006  0012               	return		;funcret
  1685  001008                     __end_of_SetLine:
  1686                           	opt callstack 0
  1687                           
  1688 ;; *************** function _setup *****************
  1689 ;; Defined at:
  1690 ;;		line 45 in file "main.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;		None
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;		None
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		wreg, status,2, status,0, cstack
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1704 ;;      Params:         0       0       0       0
  1705 ;;      Locals:         0       0       0       0
  1706 ;;      Temps:          0       0       0       0
  1707 ;;      Totals:         0       0       0       0
  1708 ;;Total ram usage:        0 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    7
  1711 ;; This function calls:
  1712 ;;		_initPWM
  1713 ;;		_init_LCD
  1714 ;;		_init_RFID
  1715 ;;		_init_sensor
  1716 ;; This function is called by:
  1717 ;;		_main
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text7
  1722  000F40                     __ptext7:
  1723                           	opt callstack 0
  1724  000F40                     _setup:
  1725                           	opt callstack 23
  1726                           
  1727                           ;main.c: 48:     OSCCON = 0x72;
  1728                           
  1729                           ;incstack = 0
  1730  000F40  0E72               	movlw	114
  1731  000F42  6ED3               	movwf	4051,c	;volatile
  1732  000F44                     l55:
  1733  000F44  A4D3               	btfss	4051,2,c	;volatile
  1734  000F46  D7FE               	goto	l55
  1735                           
  1736                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1737  000F48  8EF2               	bsf	4082,7,c	;volatile
  1738                           
  1739                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1740  000F4A  8CF2               	bsf	4082,6,c	;volatile
  1741                           
  1742                           ;main.c: 52:     RCONbits.IPEN=1;
  1743  000F4C  8ED0               	bsf	4048,7,c	;volatile
  1744                           
  1745                           ;main.c: 55:     init_LCD();
  1746  000F4E  ECF5  F003         	call	_init_LCD	;wreg free
  1747                           
  1748                           ;main.c: 56:     init_RFID();
  1749  000F52  EC2A  F008         	call	_init_RFID	;wreg free
  1750                           
  1751                           ;main.c: 57:     init_sensor();
  1752  000F56  EC51  F008         	call	_init_sensor	;wreg free
  1753                           
  1754                           ;main.c: 58:     initPWM(199);
  1755  000F5A  0E00               	movlw	0
  1756  000F5C  6E0C               	movwf	initPWM@PWMperiod+1,c
  1757  000F5E  0EC7               	movlw	199
  1758  000F60  6E0B               	movwf	initPWM@PWMperiod,c
  1759  000F62  EC37  F008         	call	_initPWM	;wreg free
  1760                           
  1761                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1762  000F66  9093               	bcf	3987,0,c	;volatile
  1763                           
  1764                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1765  000F68  9493               	bcf	3987,2,c	;volatile
  1766                           
  1767                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1768  000F6A  8495               	bsf	3989,2,c	;volatile
  1769                           
  1770                           ;main.c: 66:     T0CON = 0b11000111;
  1771  000F6C  0EC7               	movlw	199
  1772  000F6E  6ED5               	movwf	4053,c	;volatile
  1773                           
  1774                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1775  000F70  8AF2               	bsf	4082,5,c	;volatile
  1776                           
  1777                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1778  000F72  94F1               	bcf	4081,2,c	;volatile
  1779  000F74  0012               	return		;funcret
  1780  000F76                     __end_of_setup:
  1781                           	opt callstack 0
  1782                           
  1783 ;; *************** function _init_sensor *****************
  1784 ;; Defined at:
  1785 ;;		line 17 in file "signal_processing.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  throwaway       2    0        unsigned int 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1799 ;;      Params:         0       0       0       0
  1800 ;;      Locals:         2       0       0       0
  1801 ;;      Temps:          0       0       0       0
  1802 ;;      Totals:         2       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    3
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_setup
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text8
  1814  0010A2                     __ptext8:
  1815                           	opt callstack 0
  1816  0010A2                     _init_sensor:
  1817                           	opt callstack 26
  1818                           
  1819                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1820                           
  1821                           ;incstack = 0
  1822  0010A2  0E01               	movlw	1
  1823  0010A4  6EB7               	movwf	4023,c	;volatile
  1824                           
  1825                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1826  0010A6  8492               	bsf	3986,2,c	;volatile
  1827                           
  1828                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1829  0010A8  0E00               	movlw	0
  1830  0010AA  6EB8               	movwf	4024,c	;volatile
  1831                           
  1832                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1833  0010AC  0E00               	movlw	0
  1834  0010AE  6EB9               	movwf	4025,c	;volatile
  1835                           
  1836                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1837  0010B0  0E47               	movlw	71
  1838  0010B2  6E63               	movwf	3939,c	;volatile
  1839  0010B4  5069               	movf	3945,w,c	;volatile
  1840  0010B6  5068               	movf	3944,w,c	;volatile
  1841  0010B8  0012               	return		;funcret
  1842  0010BA                     __end_of_init_sensor:
  1843                           	opt callstack 0
  1844                           
  1845 ;; *************** function _init_RFID *****************
  1846 ;; Defined at:
  1847 ;;		line 13 in file "RFID.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1861 ;;      Params:         0       0       0       0
  1862 ;;      Locals:         0       0       0       0
  1863 ;;      Temps:          0       0       0       0
  1864 ;;      Totals:         0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    3
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_setup
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text9
  1876  001054                     __ptext9:
  1877                           	opt callstack 0
  1878  001054                     _init_RFID:
  1879                           	opt callstack 26
  1880                           
  1881                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1882                           
  1883                           ;incstack = 0
  1884  001054  8E94               	bsf	3988,7,c	;volatile
  1885                           
  1886                           ;RFID.c: 19:     SPBRG = 203;
  1887  001056  0ECB               	movlw	203
  1888  001058  6EAF               	movwf	4015,c	;volatile
  1889                           
  1890                           ;RFID.c: 20:     SPBRGH = 0;
  1891  00105A  0E00               	movlw	0
  1892  00105C  6EB0               	movwf	4016,c	;volatile
  1893                           
  1894                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1895  00105E  86AA               	bsf	4010,3,c	;volatile
  1896                           
  1897                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1898  001060  84AC               	bsf	4012,2,c	;volatile
  1899                           
  1900                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1901  001062  88AB               	bsf	4011,4,c	;volatile
  1902                           
  1903                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1904  001064  8EAB               	bsf	4011,7,c	;volatile
  1905                           
  1906                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1907  001066  8AAC               	bsf	4012,5,c	;volatile
  1908                           
  1909                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1910  001068  8A9D               	bsf	3997,5,c	;volatile
  1911                           
  1912                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1913  00106A  8A9F               	bsf	3999,5,c	;volatile
  1914  00106C  0012               	return		;funcret
  1915  00106E                     __end_of_init_RFID:
  1916                           	opt callstack 0
  1917                           
  1918 ;; *************** function _init_LCD *****************
  1919 ;; Defined at:
  1920 ;;		line 56 in file "LCDIO.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  1    wreg      void 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1934 ;;      Params:         0       0       0       0
  1935 ;;      Locals:         0       0       0       0
  1936 ;;      Temps:          1       0       0       0
  1937 ;;      Totals:         1       0       0       0
  1938 ;;Total ram usage:        1 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    6
  1941 ;; This function calls:
  1942 ;;		_LCDout
  1943 ;;		_SendLCD
  1944 ;; This function is called by:
  1945 ;;		_setup
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text10
  1950  0007EA                     __ptext10:
  1951                           	opt callstack 0
  1952  0007EA                     _init_LCD:
  1953                           	opt callstack 23
  1954                           
  1955                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1956                           
  1957                           ;incstack = 0
  1958  0007EA  9094               	bcf	3988,0,c	;volatile
  1959                           
  1960                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1961  0007EC  9E92               	bcf	3986,7,c	;volatile
  1962                           
  1963                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1964  0007EE  9694               	bcf	3988,3,c	;volatile
  1965                           
  1966                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1967  0007F0  9095               	bcf	3989,0,c	;volatile
  1968                           
  1969                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1970  0007F2  9295               	bcf	3989,1,c	;volatile
  1971                           
  1972                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1973  0007F4  9C92               	bcf	3986,6,c	;volatile
  1974                           
  1975                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1976  0007F6  908C               	bcf	3980,0,c	;volatile
  1977                           
  1978                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1979  0007F8  928C               	bcf	3980,1,c	;volatile
  1980                           
  1981                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1982  0007FA  968B               	bcf	3979,3,c	;volatile
  1983                           
  1984                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1985  0007FC  908B               	bcf	3979,0,c	;volatile
  1986                           
  1987                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1988  0007FE  9C89               	bcf	3977,6,c	;volatile
  1989                           
  1990                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1991  000800  9E89               	bcf	3977,7,c	;volatile
  1992                           
  1993                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1994  000802  0E27               	movlw	39
  1995  000804  6E0F               	movwf	??_init_LCD& (0+255),c
  1996  000806  0EF5               	movlw	245
  1997  000808                     u1937:
  1998  000808  2EE8               	decfsz	wreg,f,c
  1999  00080A  D7FE               	bra	u1937
  2000  00080C  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2001  00080E  D7FC               	bra	u1937
  2002  000810  F000               	nop	
  2003                           
  2004                           ;LCDIO.c: 76:  LCDout(0b0011);
  2005  000812  0E03               	movlw	3
  2006  000814  EC50  F006         	call	_LCDout
  2007                           
  2008                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2009  000818  0E0D               	movlw	13
  2010  00081A  6E0F               	movwf	??_init_LCD& (0+255),c
  2011  00081C  0EFC               	movlw	252
  2012  00081E                     u1947:
  2013  00081E  2EE8               	decfsz	wreg,f,c
  2014  000820  D7FE               	bra	u1947
  2015  000822  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2016  000824  D7FC               	bra	u1947
  2017                           
  2018                           ;LCDIO.c: 78:  LCDout(0b0011);
  2019  000826  0E03               	movlw	3
  2020  000828  EC50  F006         	call	_LCDout
  2021                           
  2022                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2023  00082C  0E85               	movlw	133
  2024  00082E                     u1957:
  2025  00082E  2EE8               	decfsz	wreg,f,c
  2026  000830  D7FE               	bra	u1957
  2027  000832  F000               	nop	
  2028                           
  2029                           ;LCDIO.c: 80:  LCDout(0b0011);
  2030  000834  0E03               	movlw	3
  2031  000836  EC50  F006         	call	_LCDout
  2032                           
  2033                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2034  00083A  0E21               	movlw	33
  2035  00083C                     u1967:
  2036  00083C  2EE8               	decfsz	wreg,f,c
  2037  00083E  D7FE               	bra	u1967
  2038  000840  F000               	nop	
  2039                           
  2040                           ;LCDIO.c: 82:  LCDout(0b0010);
  2041  000842  0E02               	movlw	2
  2042  000844  EC50  F006         	call	_LCDout
  2043                           
  2044                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2045  000848  0E21               	movlw	33
  2046  00084A                     u1977:
  2047  00084A  2EE8               	decfsz	wreg,f,c
  2048  00084C  D7FE               	bra	u1977
  2049  00084E  F000               	nop	
  2050                           
  2051                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2052  000850  0E00               	movlw	0
  2053  000852  6E0D               	movwf	SendLCD@type,c
  2054  000854  0E28               	movlw	40
  2055  000856  ECD5  F007         	call	_SendLCD
  2056                           
  2057                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2058  00085A  0E21               	movlw	33
  2059  00085C                     u1987:
  2060  00085C  2EE8               	decfsz	wreg,f,c
  2061  00085E  D7FE               	bra	u1987
  2062  000860  F000               	nop	
  2063                           
  2064                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2065  000862  0E00               	movlw	0
  2066  000864  6E0D               	movwf	SendLCD@type,c
  2067  000866  0E08               	movlw	8
  2068  000868  ECD5  F007         	call	_SendLCD
  2069                           
  2070                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2071  00086C  0E21               	movlw	33
  2072  00086E                     u1997:
  2073  00086E  2EE8               	decfsz	wreg,f,c
  2074  000870  D7FE               	bra	u1997
  2075  000872  F000               	nop	
  2076                           
  2077                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2078  000874  0E00               	movlw	0
  2079  000876  6E0D               	movwf	SendLCD@type,c
  2080  000878  0E01               	movlw	1
  2081  00087A  ECD5  F007         	call	_SendLCD
  2082                           
  2083                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2084  00087E  0E0D               	movlw	13
  2085  000880  6E0F               	movwf	??_init_LCD& (0+255),c
  2086  000882  0EFC               	movlw	252
  2087  000884                     u2007:
  2088  000884  2EE8               	decfsz	wreg,f,c
  2089  000886  D7FE               	bra	u2007
  2090  000888  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2091  00088A  D7FC               	bra	u2007
  2092                           
  2093                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2094  00088C  0E00               	movlw	0
  2095  00088E  6E0D               	movwf	SendLCD@type,c
  2096  000890  0E06               	movlw	6
  2097  000892  ECD5  F007         	call	_SendLCD
  2098                           
  2099                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2100  000896  0E21               	movlw	33
  2101  000898                     u2017:
  2102  000898  2EE8               	decfsz	wreg,f,c
  2103  00089A  D7FE               	bra	u2017
  2104  00089C  F000               	nop	
  2105                           
  2106                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2107  00089E  0E00               	movlw	0
  2108  0008A0  6E0D               	movwf	SendLCD@type,c
  2109  0008A2  0E0C               	movlw	12
  2110  0008A4  ECD5  F007         	call	_SendLCD
  2111                           
  2112                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2113  0008A8  0E21               	movlw	33
  2114  0008AA                     u2027:
  2115  0008AA  2EE8               	decfsz	wreg,f,c
  2116  0008AC  D7FE               	bra	u2027
  2117  0008AE  F000               	nop	
  2118  0008B0  0012               	return		;funcret
  2119  0008B2                     __end_of_init_LCD:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _initPWM *****************
  2123 ;; Defined at:
  2124 ;;		line 5 in file "dc_motor.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  PWMperiod       2   10[COMRAM] int 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2138 ;;      Params:         2       0       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          0       0       0       0
  2141 ;;      Totals:         2       0       0       0
  2142 ;;Total ram usage:        2 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    3
  2145 ;; This function calls:
  2146 ;;		Nothing
  2147 ;; This function is called by:
  2148 ;;		_setup
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text11
  2153  00106E                     __ptext11:
  2154                           	opt callstack 0
  2155  00106E                     _initPWM:
  2156                           	opt callstack 26
  2157                           
  2158                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2159                           
  2160                           ;incstack = 0
  2161  00106E  0E00               	movlw	0
  2162  001070  6E7F               	movwf	3967,c	;volatile
  2163                           
  2164                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2165  001072  0E80               	movlw	128
  2166  001074  6E7E               	movwf	3966,c	;volatile
  2167                           
  2168                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2169  001076  0E6F               	movlw	111
  2170  001078  6E6F               	movwf	3951,c	;volatile
  2171                           
  2172                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2173  00107A  0E00               	movlw	0
  2174  00107C  6E6E               	movwf	3950,c	;volatile
  2175                           
  2176                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2177  00107E  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2178                           
  2179                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2180  001082  500C               	movf	initPWM@PWMperiod+1,w,c
  2181  001084  6E7A               	movwf	3962,c	;volatile
  2182  001086  0012               	return		;funcret
  2183  001088                     __end_of_initPWM:
  2184                           	opt callstack 0
  2185                           
  2186 ;; *************** function _scanForBeacon *****************
  2187 ;; Defined at:
  2188 ;;		line 18 in file "subroutines.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2191 ;;		 -> main@motorL(9), 
  2192 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2193 ;;		 -> main@motorR(9), 
  2194 ;;  speed           2   46[COMRAM] int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  raw_data        2   50[COMRAM] unsigned int 
  2197 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      unsigned char 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2207 ;;      Params:         6       0       0       0
  2208 ;;      Locals:         3       0       0       0
  2209 ;;      Temps:          2       0       0       0
  2210 ;;      Totals:        11       0       0       0
  2211 ;;Total ram usage:       11 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    7
  2214 ;; This function calls:
  2215 ;;		_ClearLCD
  2216 ;;		_LCD_String
  2217 ;;		_classify_data
  2218 ;;		_turn
  2219 ;; This function is called by:
  2220 ;;		_main
  2221 ;; This function uses a non-reentrant model
  2222 ;;
  2223                           
  2224                           	psect	text12
  2225  000DD2                     __ptext12:
  2226                           	opt callstack 0
  2227  000DD2                     _scanForBeacon:
  2228                           	opt callstack 23
  2229                           
  2230                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 19: {;subroutines.c: 20:     turn(mL,mR,speed);
  2231                           
  2232                           ;incstack = 0
  2233  000DD2  C02B  F022         	movff	scanForBeacon@mL,turn@mL
  2234  000DD6  C02C  F023         	movff	scanForBeacon@mL+1,turn@mL+1
  2235  000DDA  C02D  F024         	movff	scanForBeacon@mR,turn@mR
  2236  000DDE  C02E  F025         	movff	scanForBeacon@mR+1,turn@mR+1
  2237  000DE2  C02F  F026         	movff	scanForBeacon@speed,turn@max_power
  2238  000DE6  C030  F027         	movff	scanForBeacon@speed+1,turn@max_power+1
  2239  000DEA  EC8D  F005         	call	_turn	;wreg free
  2240                           
  2241                           ;subroutines.c: 21:     ClearLCD();
  2242  000DEE  EC44  F008         	call	_ClearLCD	;wreg free
  2243                           
  2244                           ;subroutines.c: 22:     LCD_String("SEARCHING");
  2245  000DF2  0E8B               	movlw	low STR_4
  2246  000DF4  6E0F               	movwf	LCD_String@string,c
  2247  000DF6  0E03               	movlw	high STR_4
  2248  000DF8  6E10               	movwf	LCD_String@string+1,c
  2249  000DFA  EC8C  F006         	call	_LCD_String	;wreg free
  2250  000DFE                     l2567:
  2251                           
  2252                           ;subroutines.c: 26:     {;subroutines.c: 28:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2253  000DFE  5068               	movf	3944,w,c	;volatile
  2254  000E00  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2255  000E04  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2256  000E06  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2257  000E0A  6A31               	clrf	??_scanForBeacon,c
  2258  000E0C  1031               	iorwf	??_scanForBeacon,w,c
  2259  000E0E  6E33               	movwf	scanForBeacon@raw_data,c
  2260  000E10  5032               	movf	??_scanForBeacon+1,w,c
  2261  000E12  6E34               	movwf	scanForBeacon@raw_data+1,c
  2262                           
  2263                           ;subroutines.c: 31:         char beacon_location = classify_data(raw_data);
  2264  000E14  C033  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2265  000E18  C034  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2266  000E1C  EC5E  F007         	call	_classify_data	;wreg free
  2267  000E20  6E35               	movwf	scanForBeacon@beacon_location,c
  2268                           
  2269                           ;subroutines.c: 34:         if(beacon_location == 1)
  2270  000E22  0435               	decf	scanForBeacon@beacon_location,w,c
  2271  000E24  A4D8               	btfss	status,2,c
  2272  000E26  D7EB               	goto	l2567
  2273                           
  2274                           ;subroutines.c: 35:         {;subroutines.c: 36:             return 1;
  2275  000E28  0E01               	movlw	1
  2276  000E2A  0012               	return		;funcret
  2277  000E2C                     __end_of_scanForBeacon:
  2278                           	opt callstack 0
  2279                           
  2280 ;; *************** function _turn *****************
  2281 ;; Defined at:
  2282 ;;		line 53 in file "dc_motor.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2285 ;;		 -> main@motorL(9), 
  2286 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2287 ;;		 -> main@motorR(9), 
  2288 ;;  max_power       2   37[COMRAM] int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  i               2   40[COMRAM] int 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2300 ;;      Params:         6       0       0       0
  2301 ;;      Locals:         2       0       0       0
  2302 ;;      Temps:          1       0       0       0
  2303 ;;      Totals:         9       0       0       0
  2304 ;;Total ram usage:        9 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    5
  2307 ;; This function calls:
  2308 ;;		_setMotorPWM
  2309 ;; This function is called by:
  2310 ;;		_scanForBeacon
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text13
  2315  000B1A                     __ptext13:
  2316                           	opt callstack 0
  2317  000B1A                     _turn:
  2318                           	opt callstack 24
  2319                           
  2320                           ;dc_motor.c: 53: void turn(struct DC_motor *mL, struct DC_motor *mR, int max_power);dc_m
      +                          otor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2321                           
  2322                           ;incstack = 0
  2323  000B1A  EE20 F001          	lfsr	2,1
  2324  000B1E  5022               	movf	turn@mL,w,c
  2325  000B20  26D9               	addwf	fsr2l,f,c
  2326  000B22  5023               	movf	turn@mL+1,w,c
  2327  000B24  22DA               	addwfc	fsr2h,f,c
  2328  000B26  0E00               	movlw	0
  2329  000B28  6EDF               	movwf	indf2,c
  2330                           
  2331                           ;dc_motor.c: 57:     mR->direction = 1;
  2332  000B2A  EE20 F001          	lfsr	2,1
  2333  000B2E  5024               	movf	turn@mR,w,c
  2334  000B30  26D9               	addwf	fsr2l,f,c
  2335  000B32  5025               	movf	turn@mR+1,w,c
  2336  000B34  22DA               	addwfc	fsr2h,f,c
  2337  000B36  0E01               	movlw	1
  2338  000B38  6EDF               	movwf	indf2,c
  2339                           
  2340                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2341  000B3A  0E00               	movlw	0
  2342  000B3C  6E2A               	movwf	turn@i+1,c
  2343  000B3E  0E00               	movlw	0
  2344  000B40  6E29               	movwf	turn@i,c
  2345  000B42  D021               	goto	l2395
  2346  000B44                     l2385:
  2347                           
  2348                           ;dc_motor.c: 60:         mL->power = i;
  2349  000B44  C022  FFD9         	movff	turn@mL,fsr2l
  2350  000B48  C023  FFDA         	movff	turn@mL+1,fsr2h
  2351  000B4C  C029  FFDF         	movff	turn@i,indf2
  2352                           
  2353                           ;dc_motor.c: 61:         mR->power = i;
  2354  000B50  C024  FFD9         	movff	turn@mR,fsr2l
  2355  000B54  C025  FFDA         	movff	turn@mR+1,fsr2h
  2356  000B58  C029  FFDF         	movff	turn@i,indf2
  2357                           
  2358                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2359  000B5C  C022  F019         	movff	turn@mL,setMotorPWM@m
  2360  000B60  C023  F01A         	movff	turn@mL+1,setMotorPWM@m+1
  2361  000B64  EC75  F002         	call	_setMotorPWM	;wreg free
  2362                           
  2363                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2364  000B68  C024  F019         	movff	turn@mR,setMotorPWM@m
  2365  000B6C  C025  F01A         	movff	turn@mR+1,setMotorPWM@m+1
  2366  000B70  EC75  F002         	call	_setMotorPWM	;wreg free
  2367                           
  2368                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2369  000B74  0E03               	movlw	3
  2370  000B76  6E28               	movwf	??_turn& (0+255),c
  2371  000B78  0E98               	movlw	152
  2372  000B7A                     u2037:
  2373  000B7A  2EE8               	decfsz	wreg,f,c
  2374  000B7C  D7FE               	bra	u2037
  2375  000B7E  2E28               	decfsz	??_turn& (0+255),f,c
  2376  000B80  D7FC               	bra	u2037
  2377                           
  2378                           ;dc_motor.c: 66:     }
  2379  000B82  4A29               	infsnz	turn@i,f,c
  2380  000B84  2A2A               	incf	turn@i+1,f,c
  2381  000B86                     l2395:
  2382  000B86  5026               	movf	turn@max_power,w,c
  2383  000B88  5C29               	subwf	turn@i,w,c
  2384  000B8A  502A               	movf	turn@i+1,w,c
  2385  000B8C  0A80               	xorlw	128
  2386  000B8E  6E28               	movwf	??_turn& (0+255),c
  2387  000B90  5027               	movf	turn@max_power+1,w,c
  2388  000B92  0A80               	xorlw	128
  2389  000B94  5828               	subwfb	??_turn& (0+255),w,c
  2390  000B96  B0D8               	btfsc	status,0,c
  2391  000B98  0012               	return	
  2392  000B9A  D7D4               	goto	l2385
  2393  000B9C                     __end_of_turn:
  2394                           	opt callstack 0
  2395                           
  2396 ;; *************** function _returnHome *****************
  2397 ;; Defined at:
  2398 ;;		line 82 in file "subroutines.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2401 ;;		 -> main@motorL(9), 
  2402 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2403 ;;		 -> main@motorR(9), 
  2404 ;;  speed           2   46[COMRAM] int 
  2405 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2406 ;;		 -> movement_time(4), 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      unsigned char 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2418 ;;      Params:         8       0       0       0
  2419 ;;      Locals:         0       0       0       0
  2420 ;;      Temps:          4       0       0       0
  2421 ;;      Totals:        12       0       0       0
  2422 ;;Total ram usage:       12 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    7
  2425 ;; This function calls:
  2426 ;;		_ClearLCD
  2427 ;;		_LCD_String
  2428 ;;		_moveBackward
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text14
  2435  000E78                     __ptext14:
  2436                           	opt callstack 0
  2437  000E78                     _returnHome:
  2438                           	opt callstack 23
  2439                           
  2440                           ;subroutines.c: 82: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 83:                             volatile unsigned long *time);s
      +                          ubroutines.c: 84: {;subroutines.c: 85:     moveBackward(mL,mR,speed);
  2441                           
  2442                           ;incstack = 0
  2443  000E78  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2444  000E7C  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2445  000E80  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2446  000E84  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2447  000E88  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2448  000E8C  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2449  000E90  ECCE  F005         	call	_moveBackward	;wreg free
  2450                           
  2451                           ;subroutines.c: 87:     ClearLCD();
  2452  000E94  EC44  F008         	call	_ClearLCD	;wreg free
  2453                           
  2454                           ;subroutines.c: 88:     LCD_String("RETURNING HOME");
  2455  000E98  0E60               	movlw	low STR_6
  2456  000E9A  6E0F               	movwf	LCD_String@string,c
  2457  000E9C  0E03               	movlw	high STR_6
  2458  000E9E  6E10               	movwf	LCD_String@string+1,c
  2459  000EA0  EC8C  F006         	call	_LCD_String	;wreg free
  2460  000EA4                     l2617:
  2461  000EA4  C031  FFD9         	movff	returnHome@time,fsr2l
  2462  000EA8  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2463  000EAC  50DE               	movf	postinc2,w,c
  2464  000EAE  10DE               	iorwf	postinc2,w,c
  2465  000EB0  10DE               	iorwf	postinc2,w,c
  2466  000EB2  10DE               	iorwf	postinc2,w,c
  2467  000EB4  A4D8               	btfss	status,2,c
  2468  000EB6  D7F6               	goto	l2617
  2469                           
  2470                           ;subroutines.c: 90:     return 3;
  2471  000EB8  0E03               	movlw	3
  2472  000EBA  0012               	return		;funcret
  2473  000EBC                     __end_of_returnHome:
  2474                           	opt callstack 0
  2475                           
  2476 ;; *************** function _moveBackward *****************
  2477 ;; Defined at:
  2478 ;;		line 85 in file "dc_motor.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2481 ;;		 -> main@motorL(9), 
  2482 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2483 ;;		 -> main@motorR(9), 
  2484 ;;  max_power       2   37[COMRAM] int 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  i               2   40[COMRAM] int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         6       0       0       0
  2497 ;;      Locals:         2       0       0       0
  2498 ;;      Temps:          1       0       0       0
  2499 ;;      Totals:         9       0       0       0
  2500 ;;Total ram usage:        9 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    5
  2503 ;; This function calls:
  2504 ;;		_setMotorPWM
  2505 ;; This function is called by:
  2506 ;;		_returnHome
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text15
  2511  000B9C                     __ptext15:
  2512                           	opt callstack 0
  2513  000B9C                     _moveBackward:
  2514                           	opt callstack 24
  2515                           
  2516                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2517                           
  2518                           ;incstack = 0
  2519  000B9C  EE20 F001          	lfsr	2,1
  2520  000BA0  5022               	movf	moveBackward@mL,w,c
  2521  000BA2  26D9               	addwf	fsr2l,f,c
  2522  000BA4  5023               	movf	moveBackward@mL+1,w,c
  2523  000BA6  22DA               	addwfc	fsr2h,f,c
  2524  000BA8  0E00               	movlw	0
  2525  000BAA  6EDF               	movwf	indf2,c
  2526                           
  2527                           ;dc_motor.c: 88:     mR->direction = 0;
  2528  000BAC  EE20 F001          	lfsr	2,1
  2529  000BB0  5024               	movf	moveBackward@mR,w,c
  2530  000BB2  26D9               	addwf	fsr2l,f,c
  2531  000BB4  5025               	movf	moveBackward@mR+1,w,c
  2532  000BB6  22DA               	addwfc	fsr2h,f,c
  2533  000BB8  0E00               	movlw	0
  2534  000BBA  6EDF               	movwf	indf2,c
  2535                           
  2536                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2537  000BBC  0E00               	movlw	0
  2538  000BBE  6E2A               	movwf	moveBackward@i+1,c
  2539  000BC0  0E00               	movlw	0
  2540  000BC2  6E29               	movwf	moveBackward@i,c
  2541  000BC4  D021               	goto	l2427
  2542  000BC6                     l2417:
  2543                           
  2544                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2545  000BC6  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2546  000BCA  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2547  000BCE  C029  FFDF         	movff	moveBackward@i,indf2
  2548                           
  2549                           ;dc_motor.c: 92:         mR->power = i;
  2550  000BD2  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2551  000BD6  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2552  000BDA  C029  FFDF         	movff	moveBackward@i,indf2
  2553                           
  2554                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2555  000BDE  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2556  000BE2  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2557  000BE6  EC75  F002         	call	_setMotorPWM	;wreg free
  2558                           
  2559                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2560  000BEA  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2561  000BEE  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2562  000BF2  EC75  F002         	call	_setMotorPWM	;wreg free
  2563                           
  2564                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2565  000BF6  0E03               	movlw	3
  2566  000BF8  6E28               	movwf	??_moveBackward& (0+255),c
  2567  000BFA  0E98               	movlw	152
  2568  000BFC                     u2047:
  2569  000BFC  2EE8               	decfsz	wreg,f,c
  2570  000BFE  D7FE               	bra	u2047
  2571  000C00  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2572  000C02  D7FC               	bra	u2047
  2573                           
  2574                           ;dc_motor.c: 96:     }
  2575  000C04  4A29               	infsnz	moveBackward@i,f,c
  2576  000C06  2A2A               	incf	moveBackward@i+1,f,c
  2577  000C08                     l2427:
  2578  000C08  5026               	movf	moveBackward@max_power,w,c
  2579  000C0A  5C29               	subwf	moveBackward@i,w,c
  2580  000C0C  502A               	movf	moveBackward@i+1,w,c
  2581  000C0E  0A80               	xorlw	128
  2582  000C10  6E28               	movwf	??_moveBackward& (0+255),c
  2583  000C12  5027               	movf	moveBackward@max_power+1,w,c
  2584  000C14  0A80               	xorlw	128
  2585  000C16  5828               	subwfb	??_moveBackward& (0+255),w,c
  2586  000C18  B0D8               	btfsc	status,0,c
  2587  000C1A  0012               	return	
  2588  000C1C  D7D4               	goto	l2417
  2589  000C1E                     __end_of_moveBackward:
  2590                           	opt callstack 0
  2591                           
  2592 ;; *************** function _moveToBeacon *****************
  2593 ;; Defined at:
  2594 ;;		line 43 in file "subroutines.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2597 ;;		 -> main@motorL(9), 
  2598 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2599 ;;		 -> main@motorR(9), 
  2600 ;;  speed           2   46[COMRAM] int 
  2601 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2602 ;;		 -> movement_time(4), 
  2603 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2604 ;;		 -> NULL(0), RFID_flag(1), 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;  raw_data        2   54[COMRAM] unsigned int 
  2607 ;;  beacon_locat    1   56[COMRAM] unsigned char 
  2608 ;;  count           2   57[COMRAM] int 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      unsigned char 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2618 ;;      Params:        10       0       0       0
  2619 ;;      Locals:         5       0       0       0
  2620 ;;      Temps:          2       0       0       0
  2621 ;;      Totals:        17       0       0       0
  2622 ;;Total ram usage:       17 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    7
  2625 ;; This function calls:
  2626 ;;		_ClearLCD
  2627 ;;		_LCD_String
  2628 ;;		_classify_data
  2629 ;;		_moveForward
  2630 ;; This function is called by:
  2631 ;;		_main
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text16
  2636  000A04                     __ptext16:
  2637                           	opt callstack 0
  2638  000A04                     _moveToBeacon:
  2639                           	opt callstack 23
  2640                           
  2641                           ;subroutines.c: 43: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 44:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 45: {;subroutines.c: 46:     moveForward(mL,mR,spe
      +                          ed);
  2642                           
  2643                           ;incstack = 0
  2644  000A04  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2645  000A08  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2646  000A0C  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2647  000A10  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2648  000A14  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2649  000A18  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2650  000A1C  EC0F  F006         	call	_moveForward	;wreg free
  2651                           
  2652                           ;subroutines.c: 47:     ClearLCD();
  2653  000A20  EC44  F008         	call	_ClearLCD	;wreg free
  2654                           
  2655                           ;subroutines.c: 48:     LCD_String("MOVING TO BOMB");
  2656  000A24  0E51               	movlw	low STR_5
  2657  000A26  6E0F               	movwf	LCD_String@string,c
  2658  000A28  0E03               	movlw	high STR_5
  2659  000A2A  6E10               	movwf	LCD_String@string+1,c
  2660  000A2C  EC8C  F006         	call	_LCD_String	;wreg free
  2661                           
  2662                           ;subroutines.c: 49:     int count = 0;
  2663  000A30  0E00               	movlw	0
  2664  000A32  6E3B               	movwf	moveToBeacon@count+1,c
  2665  000A34  0E00               	movlw	0
  2666  000A36  6E3A               	movwf	moveToBeacon@count,c
  2667  000A38                     l2585:
  2668                           
  2669                           ;subroutines.c: 52:     {;subroutines.c: 54:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2670  000A38  5068               	movf	3944,w,c	;volatile
  2671  000A3A  CF69 F035          	movff	3945,??_moveToBeacon	;volatile
  2672  000A3E  6A36               	clrf	(??_moveToBeacon+1)& (0+255),c
  2673  000A40  C035  F036         	movff	??_moveToBeacon,??_moveToBeacon+1
  2674  000A44  6A35               	clrf	??_moveToBeacon,c
  2675  000A46  1035               	iorwf	??_moveToBeacon,w,c
  2676  000A48  6E37               	movwf	moveToBeacon@raw_data,c
  2677  000A4A  5036               	movf	??_moveToBeacon+1,w,c
  2678  000A4C  6E38               	movwf	moveToBeacon@raw_data+1,c
  2679                           
  2680                           ;subroutines.c: 57:         char beacon_location = classify_data(raw_data);
  2681  000A4E  C037  F00B         	movff	moveToBeacon@raw_data,classify_data@raw_data
  2682  000A52  C038  F00C         	movff	moveToBeacon@raw_data+1,classify_data@raw_data+1
  2683  000A56  EC5E  F007         	call	_classify_data	;wreg free
  2684  000A5A  6E39               	movwf	moveToBeacon@beacon_location,c
  2685                           
  2686                           ;subroutines.c: 59:         if(*exit_flag == 1)
  2687  000A5C  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2688  000A60  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2689  000A64  04DE               	decf	postinc2,w,c
  2690  000A66  A4D8               	btfss	status,2,c
  2691  000A68  D002               	goto	l2599
  2692                           
  2693                           ;subroutines.c: 62:             return 2;
  2694  000A6A  0E02               	movlw	2
  2695  000A6C  0012               	return	
  2696  000A6E                     l2599:
  2697  000A6E  5039               	movf	moveToBeacon@beacon_location,w,c
  2698  000A70  A4D8               	btfss	status,2,c
  2699  000A72  D003               	goto	l2603
  2700                           
  2701                           ;subroutines.c: 66:         {;subroutines.c: 67:             count += 1;
  2702  000A74  4A3A               	infsnz	moveToBeacon@count,f,c
  2703  000A76  2A3B               	incf	moveToBeacon@count+1,f,c
  2704                           
  2705                           ;subroutines.c: 68:         }
  2706  000A78  D004               	goto	l2605
  2707  000A7A                     l2603:
  2708                           
  2709                           ;subroutines.c: 70:         {;subroutines.c: 71:             count = 0;
  2710  000A7A  0E00               	movlw	0
  2711  000A7C  6E3B               	movwf	moveToBeacon@count+1,c
  2712  000A7E  0E00               	movlw	0
  2713  000A80  6E3A               	movwf	moveToBeacon@count,c
  2714  000A82                     l2605:
  2715                           
  2716                           ;subroutines.c: 74:         if(count >=20000)
  2717  000A82  BE3B               	btfsc	moveToBeacon@count+1,7,c
  2718  000A84  D7D9               	goto	l2585
  2719  000A86  0E20               	movlw	32
  2720  000A88  5C3A               	subwf	moveToBeacon@count,w,c
  2721  000A8A  0E4E               	movlw	78
  2722  000A8C  583B               	subwfb	moveToBeacon@count+1,w,c
  2723  000A8E  A0D8               	btfss	status,0,c
  2724  000A90  D7D3               	goto	l2585
  2725                           
  2726                           ;subroutines.c: 75:         {;subroutines.c: 76:             return 0;
  2727  000A92  0E00               	movlw	0
  2728  000A94  0012               	return		;funcret
  2729  000A96                     __end_of_moveToBeacon:
  2730                           	opt callstack 0
  2731                           
  2732 ;; *************** function _moveForward *****************
  2733 ;; Defined at:
  2734 ;;		line 70 in file "dc_motor.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2737 ;;		 -> main@motorL(9), 
  2738 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2739 ;;		 -> main@motorR(9), 
  2740 ;;  max_power       2   37[COMRAM] int 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  i               2   40[COMRAM] int 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2752 ;;      Params:         6       0       0       0
  2753 ;;      Locals:         2       0       0       0
  2754 ;;      Temps:          1       0       0       0
  2755 ;;      Totals:         9       0       0       0
  2756 ;;Total ram usage:        9 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    5
  2759 ;; This function calls:
  2760 ;;		_setMotorPWM
  2761 ;; This function is called by:
  2762 ;;		_moveToBeacon
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text17
  2767  000C1E                     __ptext17:
  2768                           	opt callstack 0
  2769  000C1E                     _moveForward:
  2770                           	opt callstack 24
  2771                           
  2772                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2773                           
  2774                           ;incstack = 0
  2775  000C1E  EE20 F001          	lfsr	2,1
  2776  000C22  5022               	movf	moveForward@mL,w,c
  2777  000C24  26D9               	addwf	fsr2l,f,c
  2778  000C26  5023               	movf	moveForward@mL+1,w,c
  2779  000C28  22DA               	addwfc	fsr2h,f,c
  2780  000C2A  0E01               	movlw	1
  2781  000C2C  6EDF               	movwf	indf2,c
  2782                           
  2783                           ;dc_motor.c: 73:     mR->direction = 1;
  2784  000C2E  EE20 F001          	lfsr	2,1
  2785  000C32  5024               	movf	moveForward@mR,w,c
  2786  000C34  26D9               	addwf	fsr2l,f,c
  2787  000C36  5025               	movf	moveForward@mR+1,w,c
  2788  000C38  22DA               	addwfc	fsr2h,f,c
  2789  000C3A  0E01               	movlw	1
  2790  000C3C  6EDF               	movwf	indf2,c
  2791                           
  2792                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2793  000C3E  0E00               	movlw	0
  2794  000C40  6E2A               	movwf	moveForward@i+1,c
  2795  000C42  0E00               	movlw	0
  2796  000C44  6E29               	movwf	moveForward@i,c
  2797  000C46  D021               	goto	l2411
  2798  000C48                     l2401:
  2799                           
  2800                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2801  000C48  C022  FFD9         	movff	moveForward@mL,fsr2l
  2802  000C4C  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2803  000C50  C029  FFDF         	movff	moveForward@i,indf2
  2804                           
  2805                           ;dc_motor.c: 77:         mR->power = i;
  2806  000C54  C024  FFD9         	movff	moveForward@mR,fsr2l
  2807  000C58  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2808  000C5C  C029  FFDF         	movff	moveForward@i,indf2
  2809                           
  2810                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2811  000C60  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2812  000C64  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2813  000C68  EC75  F002         	call	_setMotorPWM	;wreg free
  2814                           
  2815                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2816  000C6C  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2817  000C70  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2818  000C74  EC75  F002         	call	_setMotorPWM	;wreg free
  2819                           
  2820                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2821  000C78  0E03               	movlw	3
  2822  000C7A  6E28               	movwf	??_moveForward& (0+255),c
  2823  000C7C  0E98               	movlw	152
  2824  000C7E                     u2057:
  2825  000C7E  2EE8               	decfsz	wreg,f,c
  2826  000C80  D7FE               	bra	u2057
  2827  000C82  2E28               	decfsz	??_moveForward& (0+255),f,c
  2828  000C84  D7FC               	bra	u2057
  2829                           
  2830                           ;dc_motor.c: 81:     }
  2831  000C86  4A29               	infsnz	moveForward@i,f,c
  2832  000C88  2A2A               	incf	moveForward@i+1,f,c
  2833  000C8A                     l2411:
  2834  000C8A  5026               	movf	moveForward@max_power,w,c
  2835  000C8C  5C29               	subwf	moveForward@i,w,c
  2836  000C8E  502A               	movf	moveForward@i+1,w,c
  2837  000C90  0A80               	xorlw	128
  2838  000C92  6E28               	movwf	??_moveForward& (0+255),c
  2839  000C94  5027               	movf	moveForward@max_power+1,w,c
  2840  000C96  0A80               	xorlw	128
  2841  000C98  5828               	subwfb	??_moveForward& (0+255),w,c
  2842  000C9A  B0D8               	btfsc	status,0,c
  2843  000C9C  0012               	return	
  2844  000C9E  D7D4               	goto	l2401
  2845  000CA0                     __end_of_moveForward:
  2846                           	opt callstack 0
  2847                           
  2848 ;; *************** function _classify_data *****************
  2849 ;; Defined at:
  2850 ;;		line 35 in file "signal_processing.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  raw_data        2   10[COMRAM] unsigned int 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  filtered        2   14[COMRAM] unsigned int 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      unsigned char 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2864 ;;      Params:         2       0       0       0
  2865 ;;      Locals:         2       0       0       0
  2866 ;;      Temps:          2       0       0       0
  2867 ;;      Totals:         6       0       0       0
  2868 ;;Total ram usage:        6 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    3
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_scanForBeacon
  2875 ;;		_moveToBeacon
  2876 ;;		_waitForInput
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text18
  2881  000EBC                     __ptext18:
  2882                           	opt callstack 0
  2883  000EBC                     _classify_data:
  2884                           	opt callstack 26
  2885                           
  2886                           ;signal_processing.c: 35: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           36: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 3
      +                          9:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  2887                           
  2888                           ;incstack = 0
  2889  000EBC  5040               	movf	classify_data@smoothed,w,c
  2890  000EBE  5C0B               	subwf	classify_data@raw_data,w,c
  2891  000EC0  6E0D               	movwf	??_classify_data& (0+255),c
  2892  000EC2  5041               	movf	classify_data@smoothed+1,w,c
  2893  000EC4  580C               	subwfb	classify_data@raw_data+1,w,c
  2894  000EC6  6E0E               	movwf	(??_classify_data+1)& (0+255),c
  2895  000EC8  90D8               	bcf	status,0,c
  2896  000ECA  320E               	rrcf	??_classify_data+1,f,c
  2897  000ECC  320D               	rrcf	??_classify_data,f,c
  2898  000ECE  90D8               	bcf	status,0,c
  2899  000ED0  320E               	rrcf	??_classify_data+1,f,c
  2900  000ED2  320D               	rrcf	??_classify_data,f,c
  2901  000ED4  5040               	movf	classify_data@smoothed,w,c
  2902  000ED6  240D               	addwf	??_classify_data,w,c
  2903  000ED8  6E40               	movwf	classify_data@smoothed,c
  2904  000EDA  5041               	movf	classify_data@smoothed+1,w,c
  2905  000EDC  200E               	addwfc	??_classify_data+1,w,c
  2906  000EDE  6E41               	movwf	classify_data@smoothed+1,c
  2907                           
  2908                           ;signal_processing.c: 40:     unsigned int filtered = raw_data - smoothed;
  2909  000EE0  5040               	movf	classify_data@smoothed,w,c
  2910  000EE2  5C0B               	subwf	classify_data@raw_data,w,c
  2911  000EE4  6E0F               	movwf	classify_data@filtered,c
  2912  000EE6  5041               	movf	classify_data@smoothed+1,w,c
  2913  000EE8  580C               	subwfb	classify_data@raw_data+1,w,c
  2914  000EEA  6E10               	movwf	classify_data@filtered+1,c
  2915                           
  2916                           ;signal_processing.c: 43:     if(filtered >= 100)
  2917  000EEC  5010               	movf	classify_data@filtered+1,w,c
  2918  000EEE  E104               	bnz	u1720
  2919  000EF0  0E64               	movlw	100
  2920  000EF2  5C0F               	subwf	classify_data@filtered,w,c
  2921  000EF4  A0D8               	btfss	status,0,c
  2922  000EF6  D002               	goto	l2483
  2923  000EF8                     u1720:
  2924                           
  2925                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  2926  000EF8  0E01               	movlw	1
  2927  000EFA  0012               	return	
  2928  000EFC                     l2483:
  2929                           
  2930                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  2931  000EFC  0E00               	movlw	0
  2932  000EFE  0012               	return		;funcret
  2933  000F00                     __end_of_classify_data:
  2934                           	opt callstack 0
  2935                           
  2936 ;; *************** function _LCD_String *****************
  2937 ;; Defined at:
  2938 ;;		line 119 in file "LCDIO.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  string          2   14[COMRAM] PTR unsigned char 
  2941 ;;		 -> STR_12(16), STR_11(16), STR_10(13), debug@buf2(16), 
  2942 ;;		 -> debug@buf(16), STR_7(16), STR_6(15), STR_5(15), 
  2943 ;;		 -> STR_4(10), STR_3(16), STR_2(16), STR_1(15), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2955 ;;      Params:         2       0       0       0
  2956 ;;      Locals:         0       0       0       0
  2957 ;;      Temps:          0       0       0       0
  2958 ;;      Totals:         2       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    6
  2962 ;; This function calls:
  2963 ;;		_SendLCD
  2964 ;; This function is called by:
  2965 ;;		_main
  2966 ;;		_check_RFID
  2967 ;;		_scanForBeacon
  2968 ;;		_moveToBeacon
  2969 ;;		_returnHome
  2970 ;;		_stopAndDisplay
  2971 ;;		_waitForInput
  2972 ;;		_debug
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text19
  2977  000D18                     __ptext19:
  2978                           	opt callstack 0
  2979  000D18                     _LCD_String:
  2980                           	opt callstack 23
  2981                           
  2982                           ;LCDIO.c: 121: while(*string != 0){
  2983                           
  2984                           ;incstack = 0
  2985  000D18  D01A               	goto	l2283
  2986  000D1A                     l2277:
  2987                           
  2988                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2989  000D1A  0E01               	movlw	1
  2990  000D1C  6E0D               	movwf	SendLCD@type,c
  2991  000D1E  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2992  000D22  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2993  000D26  6AF8               	clrf	tblptru,c
  2994  000D28  0E02               	movlw	(high __ramtop+-1)
  2995  000D2A  64F7               	cpfsgt	tblptrh,c
  2996  000D2C  D003               	bra	u1387
  2997  000D2E  0008               	tblrd		*
  2998  000D30  50F5               	movf	tablat,w,c
  2999  000D32  D005               	bra	u1380
  3000  000D34                     u1387:
  3001  000D34  CFF6 FFE9          	movff	tblptrl,fsr0l
  3002  000D38  CFF7 FFEA          	movff	tblptrh,fsr0h
  3003  000D3C  50EF               	movf	indf0,w,c
  3004  000D3E                     u1380:
  3005  000D3E  ECD5  F007         	call	_SendLCD
  3006  000D42  4A0F               	infsnz	LCD_String@string,f,c
  3007  000D44  2A10               	incf	LCD_String@string+1,f,c
  3008                           
  3009                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3010  000D46  0E21               	movlw	33
  3011  000D48                     u2067:
  3012  000D48  2EE8               	decfsz	wreg,f,c
  3013  000D4A  D7FE               	bra	u2067
  3014  000D4C  F000               	nop	
  3015  000D4E                     l2283:
  3016                           
  3017                           ;LCDIO.c: 121: while(*string != 0){
  3018  000D4E  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3019  000D52  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3020  000D56  6AF8               	clrf	tblptru,c
  3021  000D58  0E02               	movlw	(high __ramtop+-1)
  3022  000D5A  64F7               	cpfsgt	tblptrh,c
  3023  000D5C  D003               	bra	u1397
  3024  000D5E  0008               	tblrd		*
  3025  000D60  50F5               	movf	tablat,w,c
  3026  000D62  D005               	bra	u1390
  3027  000D64                     u1397:
  3028  000D64  CFF6 FFE9          	movff	tblptrl,fsr0l
  3029  000D68  CFF7 FFEA          	movff	tblptrh,fsr0h
  3030  000D6C  50EF               	movf	indf0,w,c
  3031  000D6E                     u1390:
  3032  000D6E  0900               	iorlw	0
  3033  000D70  B4D8               	btfsc	status,2,c
  3034  000D72  0012               	return	
  3035  000D74  D7D2               	goto	l2277
  3036  000D76                     __end_of_LCD_String:
  3037                           	opt callstack 0
  3038                           
  3039 ;; *************** function _ClearLCD *****************
  3040 ;; Defined at:
  3041 ;;		line 131 in file "LCDIO.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3055 ;;      Params:         0       0       0       0
  3056 ;;      Locals:         0       0       0       0
  3057 ;;      Temps:          1       0       0       0
  3058 ;;      Totals:         1       0       0       0
  3059 ;;Total ram usage:        1 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    6
  3062 ;; This function calls:
  3063 ;;		_SendLCD
  3064 ;; This function is called by:
  3065 ;;		_display_RFID
  3066 ;;		_scanForBeacon
  3067 ;;		_moveToBeacon
  3068 ;;		_returnHome
  3069 ;;		_stopAndDisplay
  3070 ;;		_waitForInput
  3071 ;;		_debug
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text20
  3076  001088                     __ptext20:
  3077                           	opt callstack 0
  3078  001088                     _ClearLCD:
  3079                           	opt callstack 23
  3080                           
  3081                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3082                           
  3083                           ;incstack = 0
  3084  001088  0E00               	movlw	0
  3085  00108A  6E0D               	movwf	SendLCD@type,c
  3086  00108C  0E01               	movlw	1
  3087  00108E  ECD5  F007         	call	_SendLCD
  3088                           
  3089                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3090  001092  0E0D               	movlw	13
  3091  001094  6E0F               	movwf	??_ClearLCD& (0+255),c
  3092  001096  0EFC               	movlw	252
  3093  001098                     u2077:
  3094  001098  2EE8               	decfsz	wreg,f,c
  3095  00109A  D7FE               	bra	u2077
  3096  00109C  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3097  00109E  D7FC               	bra	u2077
  3098  0010A0  0012               	return		;funcret
  3099  0010A2                     __end_of_ClearLCD:
  3100                           	opt callstack 0
  3101                           
  3102 ;; *************** function _SendLCD *****************
  3103 ;; Defined at:
  3104 ;;		line 44 in file "LCDIO.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  Byte            1    wreg     unsigned char 
  3107 ;;  type            1   12[COMRAM] unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  Byte            1   13[COMRAM] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3119 ;;      Params:         1       0       0       0
  3120 ;;      Locals:         1       0       0       0
  3121 ;;      Temps:          0       0       0       0
  3122 ;;      Totals:         2       0       0       0
  3123 ;;Total ram usage:        2 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    5
  3126 ;; This function calls:
  3127 ;;		_LCDout
  3128 ;; This function is called by:
  3129 ;;		_init_LCD
  3130 ;;		_SetLine
  3131 ;;		_LCD_String
  3132 ;;		_ClearLCD
  3133 ;;		_display_RFID
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text21
  3138  000FAA                     __ptext21:
  3139                           	opt callstack 0
  3140  000FAA                     _SendLCD:
  3141                           	opt callstack 23
  3142                           
  3143                           ;incstack = 0
  3144                           ;SendLCD@Byte stored from wreg
  3145  000FAA  6E0E               	movwf	SendLCD@Byte,c
  3146                           
  3147                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3148  000FAC  B00D               	btfsc	SendLCD@type,0,c
  3149  000FAE  D002               	bra	u1315
  3150  000FB0  9E89               	bcf	3977,7,c	;volatile
  3151  000FB2  D001               	bra	u1316
  3152  000FB4                     u1315:
  3153  000FB4  8E89               	bsf	3977,7,c	;volatile
  3154  000FB6                     u1316:
  3155                           
  3156                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3157  000FB6  380E               	swapf	SendLCD@Byte,w,c
  3158  000FB8  0B0F               	andlw	15
  3159  000FBA  0B0F               	andlw	15
  3160  000FBC  EC50  F006         	call	_LCDout
  3161                           
  3162                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3163  000FC0  0E06               	movlw	6
  3164  000FC2                     u2087:
  3165  000FC2  2EE8               	decfsz	wreg,f,c
  3166  000FC4  D7FE               	bra	u2087
  3167  000FC6  D000               	nop2	
  3168                           
  3169                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3170  000FC8  500E               	movf	SendLCD@Byte,w,c
  3171  000FCA  0B0F               	andlw	15
  3172  000FCC  EC50  F006         	call	_LCDout
  3173                           
  3174                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3175  000FD0  0E21               	movlw	33
  3176  000FD2                     u2097:
  3177  000FD2  2EE8               	decfsz	wreg,f,c
  3178  000FD4  D7FE               	bra	u2097
  3179  000FD6  F000               	nop	
  3180  000FD8  0012               	return		;funcret
  3181  000FDA                     __end_of_SendLCD:
  3182                           	opt callstack 0
  3183                           
  3184 ;; *************** function _LCDout *****************
  3185 ;; Defined at:
  3186 ;;		line 31 in file "LCDIO.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  number          1    wreg     unsigned char 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  number          1   11[COMRAM] unsigned char 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3200 ;;      Params:         0       0       0       0
  3201 ;;      Locals:         1       0       0       0
  3202 ;;      Temps:          1       0       0       0
  3203 ;;      Totals:         2       0       0       0
  3204 ;;Total ram usage:        2 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    4
  3207 ;; This function calls:
  3208 ;;		_E_TOG
  3209 ;; This function is called by:
  3210 ;;		_SendLCD
  3211 ;;		_init_LCD
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text22
  3216  000CA0                     __ptext22:
  3217                           	opt callstack 0
  3218  000CA0                     _LCDout:
  3219                           	opt callstack 23
  3220                           
  3221                           ;incstack = 0
  3222                           ;LCDout@number stored from wreg
  3223  000CA0  6E0C               	movwf	LCDout@number,c
  3224                           
  3225                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3226  000CA2  C00C  F00B         	movff	LCDout@number,??_LCDout
  3227  000CA6  0E01               	movlw	1
  3228  000CA8  160B               	andwf	??_LCDout,f,c
  3229  000CAA  508B               	movf	3979,w,c	;volatile
  3230  000CAC  180B               	xorwf	??_LCDout,w,c
  3231  000CAE  0BFE               	andlw	-2
  3232  000CB0  180B               	xorwf	??_LCDout,w,c
  3233  000CB2  6E8B               	movwf	3979,c	;volatile
  3234                           
  3235                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3236  000CB4  C00C  F00B         	movff	LCDout@number,??_LCDout
  3237  000CB8  90D8               	bcf	status,0,c
  3238  000CBA  320B               	rrcf	??_LCDout,f,c
  3239  000CBC  0E01               	movlw	1
  3240  000CBE  160B               	andwf	??_LCDout,f,c
  3241  000CC0  460B               	rlncf	??_LCDout,f,c
  3242  000CC2  460B               	rlncf	??_LCDout,f,c
  3243  000CC4  460B               	rlncf	??_LCDout,f,c
  3244  000CC6  508B               	movf	3979,w,c	;volatile
  3245  000CC8  180B               	xorwf	??_LCDout,w,c
  3246  000CCA  0BF7               	andlw	-9
  3247  000CCC  180B               	xorwf	??_LCDout,w,c
  3248  000CCE  6E8B               	movwf	3979,c	;volatile
  3249                           
  3250                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3251  000CD0  C00C  F00B         	movff	LCDout@number,??_LCDout
  3252  000CD4  90D8               	bcf	status,0,c
  3253  000CD6  320B               	rrcf	??_LCDout,f,c
  3254  000CD8  90D8               	bcf	status,0,c
  3255  000CDA  320B               	rrcf	??_LCDout,f,c
  3256  000CDC  0E01               	movlw	1
  3257  000CDE  160B               	andwf	??_LCDout,f,c
  3258  000CE0  508C               	movf	3980,w,c	;volatile
  3259  000CE2  180B               	xorwf	??_LCDout,w,c
  3260  000CE4  0BFE               	andlw	-2
  3261  000CE6  180B               	xorwf	??_LCDout,w,c
  3262  000CE8  6E8C               	movwf	3980,c	;volatile
  3263                           
  3264                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3265  000CEA  C00C  F00B         	movff	LCDout@number,??_LCDout
  3266  000CEE  90D8               	bcf	status,0,c
  3267  000CF0  320B               	rrcf	??_LCDout,f,c
  3268  000CF2  90D8               	bcf	status,0,c
  3269  000CF4  320B               	rrcf	??_LCDout,f,c
  3270  000CF6  90D8               	bcf	status,0,c
  3271  000CF8  320B               	rrcf	??_LCDout,f,c
  3272  000CFA  0E01               	movlw	1
  3273  000CFC  160B               	andwf	??_LCDout,f,c
  3274  000CFE  460B               	rlncf	??_LCDout,f,c
  3275  000D00  508C               	movf	3980,w,c	;volatile
  3276  000D02  180B               	xorwf	??_LCDout,w,c
  3277  000D04  0BFD               	andlw	-3
  3278  000D06  180B               	xorwf	??_LCDout,w,c
  3279  000D08  6E8C               	movwf	3980,c	;volatile
  3280                           
  3281                           ;LCDIO.c: 39:  E_TOG();
  3282  000D0A  EC5D  F008         	call	_E_TOG	;wreg free
  3283                           
  3284                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3285  000D0E  0E03               	movlw	3
  3286  000D10                     u2107:
  3287  000D10  2EE8               	decfsz	wreg,f,c
  3288  000D12  D7FE               	bra	u2107
  3289  000D14  F000               	nop	
  3290  000D16  0012               	return		;funcret
  3291  000D18                     __end_of_LCDout:
  3292                           	opt callstack 0
  3293                           
  3294 ;; *************** function _E_TOG *****************
  3295 ;; Defined at:
  3296 ;;		line 23 in file "LCDIO.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;		None
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3310 ;;      Params:         0       0       0       0
  3311 ;;      Locals:         0       0       0       0
  3312 ;;      Temps:          0       0       0       0
  3313 ;;      Totals:         0       0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    3
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_LCDout
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text23
  3325  0010BA                     __ptext23:
  3326                           	opt callstack 0
  3327  0010BA                     _E_TOG:
  3328                           	opt callstack 23
  3329                           
  3330                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3331                           
  3332                           ;incstack = 0
  3333  0010BA  8C89               	bsf	3977,6,c	;volatile
  3334                           
  3335                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3336  0010BC  0E03               	movlw	3
  3337  0010BE                     u2117:
  3338  0010BE  2EE8               	decfsz	wreg,f,c
  3339  0010C0  D7FE               	bra	u2117
  3340  0010C2  F000               	nop	
  3341                           
  3342                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3343  0010C4  9C89               	bcf	3977,6,c	;volatile
  3344  0010C6  0012               	return		;funcret
  3345  0010C8                     __end_of_E_TOG:
  3346                           	opt callstack 0
  3347                           
  3348 ;; *************** function _init_motor_struct *****************
  3349 ;; Defined at:
  3350 ;;		line 99 in file "dc_motor.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3353 ;;		 -> main@motorL(9), 
  3354 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3355 ;;		 -> main@motorR(9), 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3367 ;;      Params:         4       0       0       0
  3368 ;;      Locals:         0       0       0       0
  3369 ;;      Temps:          0       0       0       0
  3370 ;;      Totals:         4       0       0       0
  3371 ;;Total ram usage:        4 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    5
  3374 ;; This function calls:
  3375 ;;		_setMotorPWM
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text24
  3382  000700                     __ptext24:
  3383                           	opt callstack 0
  3384  000700                     _init_motor_struct:
  3385                           	opt callstack 25
  3386                           
  3387                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3388                           
  3389                           ;incstack = 0
  3390  000700  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3391  000704  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3392  000708  0E00               	movlw	0
  3393  00070A  6EDF               	movwf	indf2,c
  3394                           
  3395                           ;dc_motor.c: 103: mL->direction = 1;
  3396  00070C  EE20 F001          	lfsr	2,1
  3397  000710  5022               	movf	init_motor_struct@mL,w,c
  3398  000712  26D9               	addwf	fsr2l,f,c
  3399  000714  5023               	movf	init_motor_struct@mL+1,w,c
  3400  000716  22DA               	addwfc	fsr2h,f,c
  3401  000718  0E01               	movlw	1
  3402  00071A  6EDF               	movwf	indf2,c
  3403                           
  3404                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3405  00071C  EE20 F002          	lfsr	2,2
  3406  000720  5022               	movf	init_motor_struct@mL,w,c
  3407  000722  26D9               	addwf	fsr2l,f,c
  3408  000724  5023               	movf	init_motor_struct@mL+1,w,c
  3409  000726  22DA               	addwfc	fsr2h,f,c
  3410  000728  0E79               	movlw	121
  3411  00072A  6EDE               	movwf	postinc2,c
  3412  00072C  0E0F               	movlw	15
  3413  00072E  6EDD               	movwf	postdec2,c
  3414                           
  3415                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3416  000730  EE20 F004          	lfsr	2,4
  3417  000734  5022               	movf	init_motor_struct@mL,w,c
  3418  000736  26D9               	addwf	fsr2l,f,c
  3419  000738  5023               	movf	init_motor_struct@mL+1,w,c
  3420  00073A  22DA               	addwfc	fsr2h,f,c
  3421  00073C  0E78               	movlw	120
  3422  00073E  6EDE               	movwf	postinc2,c
  3423  000740  0E0F               	movlw	15
  3424  000742  6EDD               	movwf	postdec2,c
  3425                           
  3426                           ;dc_motor.c: 106: mL->dir_pin=0;
  3427  000744  EE20 F006          	lfsr	2,6
  3428  000748  5022               	movf	init_motor_struct@mL,w,c
  3429  00074A  26D9               	addwf	fsr2l,f,c
  3430  00074C  5023               	movf	init_motor_struct@mL+1,w,c
  3431  00074E  22DA               	addwfc	fsr2h,f,c
  3432  000750  0E00               	movlw	0
  3433  000752  6EDF               	movwf	indf2,c
  3434                           
  3435                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3436  000754  EE20 F007          	lfsr	2,7
  3437  000758  5022               	movf	init_motor_struct@mL,w,c
  3438  00075A  26D9               	addwf	fsr2l,f,c
  3439  00075C  5023               	movf	init_motor_struct@mL+1,w,c
  3440  00075E  22DA               	addwfc	fsr2h,f,c
  3441  000760  0EC7               	movlw	199
  3442  000762  6EDE               	movwf	postinc2,c
  3443  000764  0E00               	movlw	0
  3444  000766  6EDD               	movwf	postdec2,c
  3445                           
  3446                           ;dc_motor.c: 109: mR->power = 0;
  3447  000768  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3448  00076C  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3449  000770  0E00               	movlw	0
  3450  000772  6EDF               	movwf	indf2,c
  3451                           
  3452                           ;dc_motor.c: 110: mR->direction = 1;
  3453  000774  EE20 F001          	lfsr	2,1
  3454  000778  5024               	movf	init_motor_struct@mR,w,c
  3455  00077A  26D9               	addwf	fsr2l,f,c
  3456  00077C  5025               	movf	init_motor_struct@mR+1,w,c
  3457  00077E  22DA               	addwfc	fsr2h,f,c
  3458  000780  0E01               	movlw	1
  3459  000782  6EDF               	movwf	indf2,c
  3460                           
  3461                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3462  000784  EE20 F002          	lfsr	2,2
  3463  000788  5024               	movf	init_motor_struct@mR,w,c
  3464  00078A  26D9               	addwf	fsr2l,f,c
  3465  00078C  5025               	movf	init_motor_struct@mR+1,w,c
  3466  00078E  22DA               	addwfc	fsr2h,f,c
  3467  000790  0E77               	movlw	119
  3468  000792  6EDE               	movwf	postinc2,c
  3469  000794  0E0F               	movlw	15
  3470  000796  6EDD               	movwf	postdec2,c
  3471                           
  3472                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3473  000798  EE20 F004          	lfsr	2,4
  3474  00079C  5024               	movf	init_motor_struct@mR,w,c
  3475  00079E  26D9               	addwf	fsr2l,f,c
  3476  0007A0  5025               	movf	init_motor_struct@mR+1,w,c
  3477  0007A2  22DA               	addwfc	fsr2h,f,c
  3478  0007A4  0E76               	movlw	118
  3479  0007A6  6EDE               	movwf	postinc2,c
  3480  0007A8  0E0F               	movlw	15
  3481  0007AA  6EDD               	movwf	postdec2,c
  3482                           
  3483                           ;dc_motor.c: 113: mR->dir_pin=2;
  3484  0007AC  EE20 F006          	lfsr	2,6
  3485  0007B0  5024               	movf	init_motor_struct@mR,w,c
  3486  0007B2  26D9               	addwf	fsr2l,f,c
  3487  0007B4  5025               	movf	init_motor_struct@mR+1,w,c
  3488  0007B6  22DA               	addwfc	fsr2h,f,c
  3489  0007B8  0E02               	movlw	2
  3490  0007BA  6EDF               	movwf	indf2,c
  3491                           
  3492                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3493  0007BC  EE20 F007          	lfsr	2,7
  3494  0007C0  5024               	movf	init_motor_struct@mR,w,c
  3495  0007C2  26D9               	addwf	fsr2l,f,c
  3496  0007C4  5025               	movf	init_motor_struct@mR+1,w,c
  3497  0007C6  22DA               	addwfc	fsr2h,f,c
  3498  0007C8  0EC7               	movlw	199
  3499  0007CA  6EDE               	movwf	postinc2,c
  3500  0007CC  0E00               	movlw	0
  3501  0007CE  6EDD               	movwf	postdec2,c
  3502                           
  3503                           ;dc_motor.c: 116: setMotorPWM(mL);
  3504  0007D0  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3505  0007D4  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3506  0007D8  EC75  F002         	call	_setMotorPWM	;wreg free
  3507                           
  3508                           ;dc_motor.c: 117: setMotorPWM(mR);
  3509  0007DC  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3510  0007E0  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3511  0007E4  EC75  F002         	call	_setMotorPWM	;wreg free
  3512  0007E8  0012               	return		;funcret
  3513  0007EA                     __end_of_init_motor_struct:
  3514                           	opt callstack 0
  3515                           
  3516 ;; *************** function _setMotorPWM *****************
  3517 ;; Defined at:
  3518 ;;		line 18 in file "dc_motor.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3521 ;;		 -> main@motorR(9), main@motorL(9), 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  PWMduty         2   31[COMRAM] int 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3533 ;;      Params:         2       0       0       0
  3534 ;;      Locals:         2       0       0       0
  3535 ;;      Temps:          5       0       0       0
  3536 ;;      Totals:         9       0       0       0
  3537 ;;Total ram usage:        9 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    4
  3540 ;; This function calls:
  3541 ;;		___awdiv
  3542 ;;		___wmul
  3543 ;; This function is called by:
  3544 ;;		_stop
  3545 ;;		_turn
  3546 ;;		_moveForward
  3547 ;;		_moveBackward
  3548 ;;		_init_motor_struct
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text25
  3553  0004EA                     __ptext25:
  3554                           	opt callstack 0
  3555  0004EA                     _setMotorPWM:
  3556                           	opt callstack 24
  3557                           
  3558                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3559                           
  3560                           ;incstack = 0
  3561  0004EA  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3562  0004EE  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3563  0004F2  50DF               	movf	indf2,w,c
  3564  0004F4  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3565  0004F6  501B               	movf	??_setMotorPWM,w,c
  3566  0004F8  6E0B               	movwf	___wmul@multiplier,c
  3567  0004FA  6A0C               	clrf	___wmul@multiplier+1,c
  3568  0004FC  EE20 F007          	lfsr	2,7
  3569  000500  5019               	movf	setMotorPWM@m,w,c
  3570  000502  26D9               	addwf	fsr2l,f,c
  3571  000504  501A               	movf	setMotorPWM@m+1,w,c
  3572  000506  22DA               	addwfc	fsr2h,f,c
  3573  000508  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3574  00050C  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3575  000510  EC17  F008         	call	___wmul	;wreg free
  3576  000514  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3577  000518  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3578  00051C  0E00               	movlw	0
  3579  00051E  6E14               	movwf	___awdiv@divisor+1,c
  3580  000520  0E64               	movlw	100
  3581  000522  6E13               	movwf	___awdiv@divisor,c
  3582  000524  EC4B  F005         	call	___awdiv	;wreg free
  3583  000528  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3584  00052C  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3585                           
  3586                           ;dc_motor.c: 24:     if (m->direction)
  3587  000530  EE20 F001          	lfsr	2,1
  3588  000534  5019               	movf	setMotorPWM@m,w,c
  3589  000536  26D9               	addwf	fsr2l,f,c
  3590  000538  501A               	movf	setMotorPWM@m+1,w,c
  3591  00053A  22DA               	addwfc	fsr2h,f,c
  3592  00053C  50DF               	movf	indf2,w,c
  3593  00053E  B4D8               	btfsc	status,2,c
  3594  000540  D024               	goto	l2291
  3595                           
  3596                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3597  000542  EE20 F006          	lfsr	2,6
  3598  000546  5019               	movf	setMotorPWM@m,w,c
  3599  000548  26D9               	addwf	fsr2l,f,c
  3600  00054A  501A               	movf	setMotorPWM@m+1,w,c
  3601  00054C  22DA               	addwfc	fsr2h,f,c
  3602  00054E  50DF               	movf	indf2,w,c
  3603  000550  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3604  000552  0E01               	movlw	1
  3605  000554  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3606  000556  2A1B               	incf	??_setMotorPWM,f,c
  3607  000558  D002               	goto	u1424
  3608  00055A                     u1425:
  3609  00055A  90D8               	bcf	status,0,c
  3610  00055C  361C               	rlcf	??_setMotorPWM+1,f,c
  3611  00055E                     u1424:
  3612  00055E  2E1B               	decfsz	??_setMotorPWM,f,c
  3613  000560  D7FC               	goto	u1425
  3614  000562  501C               	movf	??_setMotorPWM+1,w,c
  3615  000564  108A               	iorwf	3978,w,c	;volatile
  3616  000566  6E8A               	movwf	3978,c	;volatile
  3617                           
  3618                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3619  000568  EE20 F007          	lfsr	2,7
  3620  00056C  5019               	movf	setMotorPWM@m,w,c
  3621  00056E  26D9               	addwf	fsr2l,f,c
  3622  000570  501A               	movf	setMotorPWM@m+1,w,c
  3623  000572  22DA               	addwfc	fsr2h,f,c
  3624  000574  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3625  000578  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3626  00057C  5020               	movf	setMotorPWM@PWMduty,w,c
  3627  00057E  5C1B               	subwf	??_setMotorPWM,w,c
  3628  000580  6E20               	movwf	setMotorPWM@PWMduty,c
  3629  000582  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3630  000584  581C               	subwfb	??_setMotorPWM+1,w,c
  3631  000586  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3632                           
  3633                           ;dc_motor.c: 28:     }
  3634  000588  D014               	goto	l121
  3635  00058A                     l2291:
  3636                           
  3637                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3638  00058A  EE20 F006          	lfsr	2,6
  3639  00058E  5019               	movf	setMotorPWM@m,w,c
  3640  000590  26D9               	addwf	fsr2l,f,c
  3641  000592  501A               	movf	setMotorPWM@m+1,w,c
  3642  000594  22DA               	addwfc	fsr2h,f,c
  3643  000596  50DF               	movf	indf2,w,c
  3644  000598  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3645  00059A  0E01               	movlw	1
  3646  00059C  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3647  00059E  2A1B               	incf	??_setMotorPWM,f,c
  3648  0005A0  D002               	goto	u1434
  3649  0005A2                     u1435:
  3650  0005A2  90D8               	bcf	status,0,c
  3651  0005A4  361C               	rlcf	??_setMotorPWM+1,f,c
  3652  0005A6                     u1434:
  3653  0005A6  2E1B               	decfsz	??_setMotorPWM,f,c
  3654  0005A8  D7FC               	goto	u1435
  3655  0005AA  501C               	movf	??_setMotorPWM+1,w,c
  3656  0005AC  0AFF               	xorlw	255
  3657  0005AE  148A               	andwf	3978,w,c	;volatile
  3658  0005B0  6E8A               	movwf	3978,c	;volatile
  3659  0005B2                     l121:
  3660                           
  3661                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3662  0005B2  EE20 F002          	lfsr	2,2
  3663  0005B6  5019               	movf	setMotorPWM@m,w,c
  3664  0005B8  26D9               	addwf	fsr2l,f,c
  3665  0005BA  501A               	movf	setMotorPWM@m+1,w,c
  3666  0005BC  22DA               	addwfc	fsr2h,f,c
  3667  0005BE  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3668  0005C2  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3669  0005C6  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3670  0005CA  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3671  0005CE  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3672  0005D0  46E8               	rlncf	wreg,f,c
  3673  0005D2  0BFC               	andlw	252
  3674  0005D4  6EDF               	movwf	indf2,c
  3675                           
  3676                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3677  0005D6  EE20 F004          	lfsr	2,4
  3678  0005DA  5019               	movf	setMotorPWM@m,w,c
  3679  0005DC  26D9               	addwf	fsr2l,f,c
  3680  0005DE  501A               	movf	setMotorPWM@m+1,w,c
  3681  0005E0  22DA               	addwfc	fsr2h,f,c
  3682  0005E2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3683  0005E6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3684  0005EA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3685  0005EE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3686  0005F2  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3687  0005F6  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3688  0005FA  0E06               	movlw	6
  3689  0005FC  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3690  0005FE                     u1445:
  3691  0005FE  341E               	rlcf	??_setMotorPWM+3,w,c
  3692  000600  321E               	rrcf	??_setMotorPWM+3,f,c
  3693  000602  321D               	rrcf	??_setMotorPWM+2,f,c
  3694  000604  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3695  000606  D7FB               	goto	u1445
  3696  000608  501D               	movf	??_setMotorPWM+2,w,c
  3697  00060A  6EDF               	movwf	indf2,c
  3698  00060C  0012               	return		;funcret
  3699  00060E                     __end_of_setMotorPWM:
  3700                           	opt callstack 0
  3701                           
  3702 ;; *************** function ___wmul *****************
  3703 ;; Defined at:
  3704 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  multiplier      2   10[COMRAM] unsigned int 
  3707 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  product         2   14[COMRAM] unsigned int 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  2   10[COMRAM] unsigned int 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, prodl, prodh
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3719 ;;      Params:         4       0       0       0
  3720 ;;      Locals:         2       0       0       0
  3721 ;;      Temps:          0       0       0       0
  3722 ;;      Totals:         6       0       0       0
  3723 ;;Total ram usage:        6 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    3
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_setMotorPWM
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text26
  3734  00102E                     __ptext26:
  3735                           	opt callstack 0
  3736  00102E                     ___wmul:
  3737                           	opt callstack 24
  3738                           
  3739                           ;incstack = 0
  3740  00102E  500B               	movf	___wmul@multiplier,w,c
  3741  001030  020D               	mulwf	___wmul@multiplicand,c
  3742  001032  CFF3 F00F          	movff	prodl,___wmul@product
  3743  001036  CFF4 F010          	movff	prodh,___wmul@product+1
  3744  00103A  500B               	movf	___wmul@multiplier,w,c
  3745  00103C  020E               	mulwf	___wmul@multiplicand+1,c
  3746  00103E  50F3               	movf	prodl,w,c
  3747  001040  2610               	addwf	___wmul@product+1,f,c
  3748  001042  500C               	movf	___wmul@multiplier+1,w,c
  3749  001044  020D               	mulwf	___wmul@multiplicand,c
  3750  001046  50F3               	movf	prodl,w,c
  3751  001048  2610               	addwf	___wmul@product+1,f,c
  3752  00104A  C00F  F00B         	movff	___wmul@product,?___wmul
  3753  00104E  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3754  001052  0012               	return		;funcret
  3755  001054                     __end_of___wmul:
  3756                           	opt callstack 0
  3757                           
  3758 ;; *************** function ___awdiv *****************
  3759 ;; Defined at:
  3760 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  dividend        2   16[COMRAM] int 
  3763 ;;  divisor         2   18[COMRAM] int 
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  quotient        2   22[COMRAM] int 
  3766 ;;  sign            1   21[COMRAM] unsigned char 
  3767 ;;  counter         1   20[COMRAM] unsigned char 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  2   16[COMRAM] int 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3777 ;;      Params:         4       0       0       0
  3778 ;;      Locals:         4       0       0       0
  3779 ;;      Temps:          0       0       0       0
  3780 ;;      Totals:         8       0       0       0
  3781 ;;Total ram usage:        8 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    3
  3784 ;; This function calls:
  3785 ;;		Nothing
  3786 ;; This function is called by:
  3787 ;;		_setMotorPWM
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text27
  3792  000A96                     __ptext27:
  3793                           	opt callstack 0
  3794  000A96                     ___awdiv:
  3795                           	opt callstack 24
  3796                           
  3797                           ;incstack = 0
  3798  000A96  0E00               	movlw	0
  3799  000A98  6E16               	movwf	___awdiv@sign,c
  3800  000A9A  AE14               	btfss	___awdiv@divisor+1,7,c
  3801  000A9C  D006               	goto	l2239
  3802  000A9E  6C13               	negf	___awdiv@divisor,c
  3803  000AA0  1E14               	comf	___awdiv@divisor+1,f,c
  3804  000AA2  B0D8               	btfsc	status,0,c
  3805  000AA4  2A14               	incf	___awdiv@divisor+1,f,c
  3806  000AA6  0E01               	movlw	1
  3807  000AA8  6E16               	movwf	___awdiv@sign,c
  3808  000AAA                     l2239:
  3809  000AAA  AE12               	btfss	___awdiv@dividend+1,7,c
  3810  000AAC  D006               	goto	l2245
  3811  000AAE  6C11               	negf	___awdiv@dividend,c
  3812  000AB0  1E12               	comf	___awdiv@dividend+1,f,c
  3813  000AB2  B0D8               	btfsc	status,0,c
  3814  000AB4  2A12               	incf	___awdiv@dividend+1,f,c
  3815  000AB6  0E01               	movlw	1
  3816  000AB8  1A16               	xorwf	___awdiv@sign,f,c
  3817  000ABA                     l2245:
  3818  000ABA  0E00               	movlw	0
  3819  000ABC  6E18               	movwf	___awdiv@quotient+1,c
  3820  000ABE  0E00               	movlw	0
  3821  000AC0  6E17               	movwf	___awdiv@quotient,c
  3822  000AC2  5013               	movf	___awdiv@divisor,w,c
  3823  000AC4  1014               	iorwf	___awdiv@divisor+1,w,c
  3824  000AC6  B4D8               	btfsc	status,2,c
  3825  000AC8  D01C               	goto	l2267
  3826  000ACA  0E01               	movlw	1
  3827  000ACC  6E15               	movwf	___awdiv@counter,c
  3828  000ACE  D004               	goto	l2253
  3829  000AD0                     l2251:
  3830  000AD0  90D8               	bcf	status,0,c
  3831  000AD2  3613               	rlcf	___awdiv@divisor,f,c
  3832  000AD4  3614               	rlcf	___awdiv@divisor+1,f,c
  3833  000AD6  2A15               	incf	___awdiv@counter,f,c
  3834  000AD8                     l2253:
  3835  000AD8  AE14               	btfss	___awdiv@divisor+1,7,c
  3836  000ADA  D7FA               	goto	l2251
  3837  000ADC                     u1350:
  3838  000ADC  90D8               	bcf	status,0,c
  3839  000ADE  3617               	rlcf	___awdiv@quotient,f,c
  3840  000AE0  3618               	rlcf	___awdiv@quotient+1,f,c
  3841  000AE2  5013               	movf	___awdiv@divisor,w,c
  3842  000AE4  5C11               	subwf	___awdiv@dividend,w,c
  3843  000AE6  5014               	movf	___awdiv@divisor+1,w,c
  3844  000AE8  5812               	subwfb	___awdiv@dividend+1,w,c
  3845  000AEA  A0D8               	btfss	status,0,c
  3846  000AEC  D005               	goto	l2263
  3847  000AEE  5013               	movf	___awdiv@divisor,w,c
  3848  000AF0  5E11               	subwf	___awdiv@dividend,f,c
  3849  000AF2  5014               	movf	___awdiv@divisor+1,w,c
  3850  000AF4  5A12               	subwfb	___awdiv@dividend+1,f,c
  3851  000AF6  8017               	bsf	___awdiv@quotient,0,c
  3852  000AF8                     l2263:
  3853  000AF8  90D8               	bcf	status,0,c
  3854  000AFA  3214               	rrcf	___awdiv@divisor+1,f,c
  3855  000AFC  3213               	rrcf	___awdiv@divisor,f,c
  3856  000AFE  2E15               	decfsz	___awdiv@counter,f,c
  3857  000B00  D7ED               	goto	u1350
  3858  000B02                     l2267:
  3859  000B02  5016               	movf	___awdiv@sign,w,c
  3860  000B04  B4D8               	btfsc	status,2,c
  3861  000B06  D004               	goto	l2271
  3862  000B08  6C17               	negf	___awdiv@quotient,c
  3863  000B0A  1E18               	comf	___awdiv@quotient+1,f,c
  3864  000B0C  B0D8               	btfsc	status,0,c
  3865  000B0E  2A18               	incf	___awdiv@quotient+1,f,c
  3866  000B10                     l2271:
  3867  000B10  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3868  000B14  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3869  000B18  0012               	return		;funcret
  3870  000B1A                     __end_of___awdiv:
  3871                           	opt callstack 0
  3872                           
  3873 ;; *************** function _InterruptHandlerLow *****************
  3874 ;; Defined at:
  3875 ;;		line 93 in file "main.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;		None
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3889 ;;      Params:         0       0       0       0
  3890 ;;      Locals:         0       0       0       0
  3891 ;;      Temps:          3       0       0       0
  3892 ;;      Totals:         3       0       0       0
  3893 ;;Total ram usage:        3 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    2
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		Interrupt level 1
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	intcodelo
  3904  000018                     __pintcodelo:
  3905                           	opt callstack 0
  3906  000018                     _InterruptHandlerLow:
  3907                           	opt callstack 22
  3908                           
  3909                           ;incstack = 0
  3910  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3911  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3912  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3913  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3914                           
  3915                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1))
  3916  000026  A4F2               	btfss	4082,2,c	;volatile
  3917  000028  D00A               	goto	i1l70
  3918  00002A  0443               	decf	_robot_mode,w,c	;volatile
  3919  00002C  A4D8               	btfss	status,2,c
  3920  00002E  D007               	goto	i1l70
  3921                           
  3922                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3923  000030  0E01               	movlw	1
  3924  000032  2644               	addwf	_movement_time,f,c	;volatile
  3925  000034  0E00               	movlw	0
  3926  000036  2245               	addwfc	_movement_time+1,f,c	;volatile
  3927  000038  2246               	addwfc	_movement_time+2,f,c	;volatile
  3928  00003A  2247               	addwfc	_movement_time+3,f,c	;volatile
  3929  00003C  D00B               	goto	i1l1621
  3930  00003E                     i1l70:
  3931  00003E  A4F2               	btfss	4082,2,c	;volatile
  3932  000040  D009               	goto	i1l1621
  3933  000042  0E02               	movlw	2
  3934  000044  1843               	xorwf	_robot_mode,w,c	;volatile
  3935  000046  A4D8               	btfss	status,2,c
  3936  000048  D005               	goto	i1l1621
  3937                           
  3938                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  3939  00004A  0644               	decf	_movement_time,f,c	;volatile
  3940  00004C  0E00               	movlw	0
  3941  00004E  5A45               	subwfb	_movement_time+1,f,c	;volatile
  3942  000050  5A46               	subwfb	_movement_time+2,f,c	;volatile
  3943  000052  5A47               	subwfb	_movement_time+3,f,c	;volatile
  3944  000054                     i1l1621:
  3945                           
  3946                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  3947                           
  3948                           ;main.c: 108:     else
  3949                           
  3950                           ;main.c: 106:     }
  3951                           
  3952                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  3953  000054  94F2               	bcf	4082,2,c	;volatile
  3954  000056  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  3955  00005A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  3956  00005E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  3957  000062  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3958  000064  0010               	retfie	
  3959  000066                     __end_of_InterruptHandlerLow:
  3960                           	opt callstack 0
  3961                           
  3962 ;; *************** function _InterruptHandlerHigh *****************
  3963 ;; Defined at:
  3964 ;;		line 75 in file "main.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;		None
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  throwaway       1    0        unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      void 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3978 ;;      Params:         0       0       0       0
  3979 ;;      Locals:         1       0       0       0
  3980 ;;      Temps:          2       0       0       0
  3981 ;;      Totals:         3       0       0       0
  3982 ;;Total ram usage:        3 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    1
  3985 ;; This function calls:
  3986 ;;		_processRFID
  3987 ;; This function is called by:
  3988 ;;		Interrupt level 2
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	intcode
  3993  000008                     __pintcode:
  3994                           	opt callstack 0
  3995  000008                     _InterruptHandlerHigh:
  3996                           	opt callstack 22
  3997                           
  3998                           ;incstack = 0
  3999  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4000  00000A  EFBB  F007         	goto	int_func
  4001                           
  4002                           	psect	intcode_body
  4003  000F76                     __pintcode_body:
  4004                           	opt callstack 22
  4005  000F76                     int_func:
  4006                           	opt callstack 22
  4007  000F76  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4008  000F7A  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4009                           
  4010                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4011  000F7E  AA9E               	btfss	3998,5,c	;volatile
  4012  000F80  D00D               	goto	i2l63
  4013  000F82  0443               	decf	_robot_mode,w,c	;volatile
  4014  000F84  A4D8               	btfss	status,2,c
  4015  000F86  D00A               	goto	i2l63
  4016                           
  4017                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4018  000F88  0E86               	movlw	low _RFIDbuf
  4019  000F8A  6E01               	movwf	processRFID@RFIDbuf,c
  4020  000F8C  0E00               	movlw	high _RFIDbuf
  4021  000F8E  6E02               	movwf	processRFID@RFIDbuf+1,c
  4022  000F90  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4023  000F94  EC16  F007         	call	_processRFID	;wreg free
  4024  000F98  6E48               	movwf	_RFID_flag,c	;volatile
  4025                           
  4026                           ;main.c: 83:     }
  4027  000F9A  D001               	goto	i2l65
  4028  000F9C                     i2l63:
  4029  000F9C  50AE               	movf	4014,w,c	;volatile
  4030  000F9E                     i2l65:
  4031  000F9E  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4032  000FA2  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4033  000FA6  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4034  000FA8  0011               	retfie		f
  4035  000FAA                     __end_of_InterruptHandlerHigh:
  4036                           	opt callstack 0
  4037                           
  4038 ;; *************** function _processRFID *****************
  4039 ;; Defined at:
  4040 ;;		line 34 in file "RFID.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4043 ;;		 -> RFIDbuf(12), 
  4044 ;;  latestChar      1    2[COMRAM] unsigned char 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  i               1    3[COMRAM] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      unsigned char 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4056 ;;      Params:         3       0       0       0
  4057 ;;      Locals:         1       0       0       0
  4058 ;;      Temps:          0       0       0       0
  4059 ;;      Totals:         4       0       0       0
  4060 ;;Total ram usage:        4 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_InterruptHandlerHigh
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text30
  4070  000E2C                     __ptext30:
  4071                           	opt callstack 0
  4072  000E2C                     _processRFID:
  4073                           	opt callstack 22
  4074                           
  4075                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4076                           
  4077                           ;incstack = 0
  4078  000E2C  0E03               	movlw	3
  4079  000E2E  1803               	xorwf	processRFID@latestChar,w,c
  4080  000E30  A4D8               	btfss	status,2,c
  4081  000E32  D002               	goto	i2l1979
  4082                           
  4083                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4084  000E34  0E01               	movlw	1
  4085  000E36  0012               	return	
  4086  000E38                     i2l1979:
  4087                           
  4088                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4089  000E38  0E02               	movlw	2
  4090  000E3A  1803               	xorwf	processRFID@latestChar,w,c
  4091  000E3C  A4D8               	btfss	status,2,c
  4092  000E3E  D012               	goto	i2l1999
  4093                           
  4094                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4095  000E40  0E00               	movlw	0
  4096  000E42  6E42               	movwf	processRFID@position_in_buf,c
  4097                           
  4098                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4099  000E44  0E00               	movlw	0
  4100  000E46  6E04               	movwf	processRFID@i,c
  4101  000E48                     i2l1987:
  4102                           
  4103                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4104  000E48  5004               	movf	processRFID@i,w,c
  4105  000E4A  2401               	addwf	processRFID@RFIDbuf,w,c
  4106  000E4C  6ED9               	movwf	fsr2l,c
  4107  000E4E  0E00               	movlw	0
  4108  000E50  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4109  000E52  6EDA               	movwf	fsr2h,c
  4110  000E54  0E00               	movlw	0
  4111  000E56  6EDF               	movwf	indf2,c
  4112                           
  4113                           ;RFID.c: 56:            }
  4114  000E58  2A04               	incf	processRFID@i,f,c
  4115  000E5A  0E0B               	movlw	11
  4116  000E5C  6404               	cpfsgt	processRFID@i,c
  4117  000E5E  D7F4               	goto	i2l1987
  4118  000E60                     i2u113_40:
  4119                           
  4120                           ;RFID.c: 57:            return 0;
  4121  000E60  0E00               	movlw	0
  4122  000E62  0012               	return	
  4123  000E64                     i2l1999:
  4124                           
  4125                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4126  000E64  5042               	movf	processRFID@position_in_buf,w,c
  4127  000E66  2401               	addwf	processRFID@RFIDbuf,w,c
  4128  000E68  6ED9               	movwf	fsr2l,c
  4129  000E6A  0E00               	movlw	0
  4130  000E6C  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4131  000E6E  6EDA               	movwf	fsr2h,c
  4132  000E70  C003  FFDF         	movff	processRFID@latestChar,indf2
  4133                           
  4134                           ;RFID.c: 63:             position_in_buf++;
  4135  000E74  2A42               	incf	processRFID@position_in_buf,f,c
  4136  000E76  D7F4               	goto	i2u113_40
  4137  000E78                     __end_of_processRFID:
  4138                           	opt callstack 0
  4139                           
  4140                           	psect	rparam
  4141  0000                     
  4142                           	psect	temp
  4143  000049                     btemp:
  4144                           	opt callstack 0
  4145  000049                     	ds	1
  4146  0000                     int$flags	set	btemp
  4147  0000                     wtemp8	set	btemp+1
  4148  0000                     ttemp5	set	btemp+1
  4149  0000                     ttemp6	set	btemp+4
  4150  0000                     ttemp7	set	btemp+8
  4151                           tosu	equ	0xFFF
  4152                           tosh	equ	0xFFE
  4153                           tosl	equ	0xFFD
  4154                           stkptr	equ	0xFFC
  4155                           pclatu	equ	0xFFB
  4156                           pclath	equ	0xFFA
  4157                           pcl	equ	0xFF9
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           indf0	equ	0xFEF
  4165                           postinc0	equ	0xFEE
  4166                           postdec0	equ	0xFED
  4167                           preinc0	equ	0xFEC
  4168                           plusw0	equ	0xFEB
  4169                           fsr0h	equ	0xFEA
  4170                           fsr0l	equ	0xFE9
  4171                           wreg	equ	0xFE8
  4172                           indf1	equ	0xFE7
  4173                           postinc1	equ	0xFE6
  4174                           postdec1	equ	0xFE5
  4175                           preinc1	equ	0xFE4
  4176                           plusw1	equ	0xFE3
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           bsr	equ	0xFE0
  4180                           indf2	equ	0xFDF
  4181                           postinc2	equ	0xFDE
  4182                           postdec2	equ	0xFDD
  4183                           preinc2	equ	0xFDC
  4184                           plusw2	equ	0xFDB
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8


Data Sizes:
    Strings     151
    Constant    0
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      72
    BANK0           160     22      72
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1864_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_7(CODE[16]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[10]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _waitForInput->_LCD_String
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turn
    _turn->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   48207
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    5097
                                             16 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15111
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4716
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       11     5      6    6976
                                             42 COMRAM    11     5      6
                           _ClearLCD
                         _LCD_String
                      _classify_data
                               _turn
 ---------------------------------------------------------------------------------
 (2) _turn                                                 9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6663
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        17     7     10    7230
                                             42 COMRAM    17     7     10
                           _ClearLCD
                         _LCD_String
                      _classify_data
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     366
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2262
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turn
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90       3        0.0%
DATA                 0      0      90      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 18:20:05 2020

                           l55 0F44                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l121 05B2                            l345 0918            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0098  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2301 0FFE                           l2401 0C48                           l2251 0AD0  
                         l2411 0C8A                           l2253 0AD8                           l2245 0ABA  
                         l2271 0B10                           l2263 0AF8                           l2239 0AAA  
                         l2417 0BC6                           l2441 03E4                           l2267 0B02  
                         l2291 058A                           l2283 0D4E                           l2603 0A7A  
                         l2427 0C08                           l2435 03A2                           l2531 08BA  
                         l2277 0D1A                           l2605 0A82                           l2365 0D7E  
                         l2447 0426                           l2631 09B0                           l2617 0EA4  
                         l2385 0B44                           l2297 0FEC                           l2457 04D6  
                         l2369 0D8C                           l2641 09C8                           l2483 0EFC  
                         l2395 0B86                           l2555 093A                           l2469 0F12  
                         l2567 0DFE                           l2647 09FA                           l2671 0694  
                         l2663 063C                           l2585 0A38                           l2649 0A00  
                         l2675 06C2                           l2667 0660                           l2599 0A6E  
                         l2679 06F2                           STR_1 036F                           STR_2 0341  
                         STR_3 0331                           STR_4 038B                           STR_5 0351  
                         STR_6 0360                           STR_7 0321                           STR_8 0395  
                         u2007 0884                           u2017 0898                           u2107 0D10  
                         u1315 0FB4                           u2027 08AA                           u1316 0FB6  
                         u2117 10BE                           u2037 0B7A                           u1350 0ADC  
                         _LATB 000F8A                           u2047 0BFC                           u1424 055E  
                         u1600 0464                           u1425 055A                           u2057 0C7E  
                         u1434 05A6                           u1610 0466                           u1435 05A2  
                         u2067 0D48                           u1380 0D3E                           u1620 0474  
                         u1445 05FE                           u2077 1098                           u1390 0D6E  
                         u1630 0476                           u1550 043A                           u1710 0F3E  
                         u2087 0FC2                           u1720 0EF8                           u1640 0484  
                         u1560 0444                           u2097 0FD2                           u1650 0486  
                         u1570 0446                           u1387 0D34                           u1660 0494  
                         u1580 0454                           u1397 0D64                           u1670 0496  
                         u1590 0456                           u1830 09F4                           u1680 04B2  
                         u1760 0966                           u1690 04B4                           u1907 09D2  
                         u1917 0DC2                           u1927 1000                           u1937 0808  
                         u1947 081E                           u1957 082E                           u1967 083C  
                         u1977 084A                           u1897 0944                           u1987 085C  
                         u1997 086E                           i1l70 003E                           i2l63 0F9C  
                         i2l65 0F9E                           _dbuf 0066                           _main 060E  
                         _prec 0064                           _nout 0060                           fsr0h 000FEA  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0049                           _stop 0D76  
                         _turn 0B1A                           prodh 000FF4                           prodl 000FF3  
                         start 0066                   ___param_bank 000000                __end_of_SendLCD 0FDA  
              __end_of_SetLine 1008                 ??_display_RFID 0012                          ?_main 0001  
          main@searching_speed 0092                __end_of___awdiv 0B1A                          STR_10 037E  
                        STR_11 0311                          STR_12 0301                          ?_stop 0022  
                        ?_turn 0022                          _T0CON 000FD5                ___awdiv@divisor 0013  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0015  
                        _RCREG 000FAE                          _E_TOG 10BA                          _SPBRG 000FAF  
                 ?_init_sensor 0001                __end_of_initPWM 1088                          _flags 003C  
                        _setup 0F40                          _width 0062               moveToBeacon@time 0031  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 004A  
                        ttemp6 004D                          ttemp7 0051                          stop@i 0029  
                        status 000FD8                          turn@i 0029                          wtemp8 004A  
          __size_of_LCD_String 005E               __end_of_ClearLCD 10A2           moveForward@max_power 0026  
               __CFG_MCLRE$OFF 000000                __initialization 1008                   __end_of_main 0700  
                 __end_of_stop 0DD2                   __end_of_turn 0B9C                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000F                         ??_main 003C    moveToBeacon@beacon_location 0039  
                       ??_stop 0028                         ??_turn 0028                  __activetblptr 000002  
                       ?_E_TOG 0001                   ?_setMotorPWM 0019                   ?_moveForward 0022  
 scanForBeacon@beacon_location 0035               ___awdiv@dividend 0011                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         i1l1621 0054  
                       i2l1987 0E48                         i2l1979 0E38                         i2l1999 0E64  
                       _LCDout 0CA0                    SendLCD@Byte 000E                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 000D  
                    ??_SendLCD 000E                      ??_SetLine 000F                  display_RFID@i 0012  
                       ___wmul 102E                      ??___awdiv 0015               __end_of_init_LCD 08B2  
          init_motor_struct@mL 0022            init_motor_struct@mR 0024                         clear_0 100E  
                       clear_1 101A               ___awdiv@quotient 0017              moveToBeacon@count 003A  
       __size_of_scanForBeacon 005A              moveToBeacon@speed 002F                      ??_initPWM 000D  
               _stopAndDisplay 096C                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0022  
                       stop@mR 0024                         turn@mL 0022                         turn@mR 0024  
                 ?_processRFID 0001              _init_motor_struct 0700           __end_of_display_RFID 0F40  
           ?_init_motor_struct 0022                     __accesstop 0060        __end_of__initialization 1020  
                ___rparam_used 000001                    SetLine@line 000F                  __end_of_E_TOG 10C8  
          ??_init_motor_struct 0026                 __pcstackCOMRAM 0001                  __end_of_setup 0F76  
                 ??_LCD_String 0011         __end_of_stopAndDisplay 0A04                        ??_E_TOG 000B  
__size_of_InterruptHandlerHigh 0FA2                      ?_ClearLCD 0001    __end_of_InterruptHandlerLow 0066  
    __end_of_init_motor_struct 07EA          __end_of_classify_data 0F00                     _check_RFID 039A  
         __size_of_init_sensor 0018                        ??_setup 0010                  ?_moveBackward 0022  
                   __pbssBANK0 0060                        ?_LCDout 0001                  _scanForBeacon 0DD2  
           __size_of_init_RFID 001A             __end_of_LCD_String 0D76             waitForInput@i_1364 0018  
                      ?___wmul 000B                  ?_moveToBeacon 002B                        _CAP1CON 000F63  
              ?_stopAndDisplay 002B                     ??_ClearLCD 000F                        _RFIDbuf 0086  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0028  
               ?_scanForBeacon 002B           __size_of_setMotorPWM 0124           __size_of_moveForward 0082  
    stopAndDisplay@RFID_buffer 0031                      ?_init_LCD 0001                __size_of_LCDout 0078  
                moveBackward@i 0029                  ?_waitForInput 0001                        _SendLCD 0FAA  
                      __Hparam 0000                        _SetLine 0FDA                        __Lparam 0000  
               ??_moveToBeacon 0035          processRFID@latestChar 0003                        ___awdiv 0A96  
              __size_of___wmul 0026                   __psmallconst 0300               initPWM@PWMperiod 000B  
                      __pcinit 1008                        __ramtop 0300                        __ptext0 060E  
                      __ptext1 08B2                        __ptext2 096C                        __ptext3 0D76  
                      __ptext4 0F00                        __ptext5 039A                        __ptext6 0FDA  
                      __ptext7 0F40                        __ptext8 10A2                        __ptext9 1054  
            __end_of_init_RFID 106E               check_RFID@hexBuf 0015                        _initPWM 106E  
         waitForInput@raw_data 0014                   LCDout@number 000C     __size_of_init_motor_struct 00EA  
        __size_of_display_RFID 0040              stop@initial_speed 0026                    ?_check_RFID 0011  
               __pintcode_body 0F76           end_of_initialization 1020             setMotorPWM@PWMduty 0020  
                   ??_init_LCD 000F           __size_of_processRFID 004C                 ??_waitForInput 0011  
                __Lmediumconst 0000                        int_func 0F76                      _RFID_flag 0048  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          moveToBeacon@exit_flag 0033                     _robot_mode 0043  
                   _returnHome 0E78                   _display_RFID 0F00                      _PORTDbits 000F83  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                ??_scanForBeacon 0031             debug@smoothed_data 003E  
                moveForward@mL 0022                  moveForward@mR 0024                 __end_of_LCDout 0D18  
                    _TXSTAbits 000FAC                     main@motorL 0096                     main@motorR 009F  
         __end_of_moveBackward 0C1E            __size_of_check_RFID 0150                 __end_of___wmul 1054  
                  _BAUDCONbits 000FAA          classify_data@filtered 000F            start_initialization 1008  
            __size_of_ClearLCD 001A           __end_of_moveToBeacon 0A96          classify_data@raw_data 000B  
                     ??_LCDout 000B          moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 0FAA  
        classify_data@smoothed 0040               ??_stopAndDisplay 0033                       ??___wmul 000F  
              scanForBeacon@mL 002B                scanForBeacon@mR 002D                    ?_returnHome 002B  
         __end_of_waitForInput 096C                    __pbssCOMRAM 003C                  ??_init_sensor 000B  
                __pcstackBANK0 0092   __size_of_InterruptHandlerLow 004E              __size_of_init_LCD 00C8  
                     ?_SendLCD 000D                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 0011         __size_of_classify_data 0044             check_RFID@checksum 0026  
                  __pintcodelo 0018                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 000B                    __smallconst 0300                 __size_of_E_TOG 000E  
                waitForInput@i 0016                      _init_RFID 1054            stopAndDisplay@speed 002F  
                ??_setMotorPWM 001B                  ??_moveForward 0028                   ??_check_RFID 0013  
               __size_of_setup 0036                check_RFID@byte1 0021                check_RFID@byte2 0022  
              check_RFID@byte3 0023                check_RFID@byte4 0024                check_RFID@byte5 0025  
          __end_of_init_sensor 10BA                 ___wmul@product 000F            __size_of_returnHome 0044  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       i2u113_40 0E60  
        __size_of_moveBackward 0082                       _PIR1bits 000F9E                       _RCONbits 000FD0  
         moveToBeacon@raw_data 0037             __end_of_check_RFID 04EA              ___wmul@multiplier 000B  
                 setMotorPWM@m 0019                   moveForward@i 0029               main@moving_speed 0094  
        __size_of_moveToBeacon 0092           _InterruptHandlerHigh 0008                       _ClearLCD 1088  
                _movement_time 0044                     ?_init_RFID 0001                  ??_processRFID 0004  
                _classify_data 0EBC                    _INTCON2bits 000FF1                 moveBackward@mL 0022  
               moveBackward@mR 0024                   _moveBackward 0B9C            __end_of_setMotorPWM 060E  
          __end_of_moveForward 0CA0                    check_RFID@i 0027                       __Hrparam 0000  
                turn@max_power 0026               __size_of_SendLCD 0030                       __Lrparam 0000  
             __size_of_SetLine 002E          __size_of_waitForInput 00BA                   _moveToBeacon 0A04  
             __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A  
                  _init_sensor 10A2                 ?_classify_data 000B              check_RFID@dataBuf 0011  
                     __ptext10 07EA                       __ptext11 106E                       __ptext20 1088  
                     __ptext12 0DD2                       __ptext21 0FAA                       __ptext13 0B1A  
                     __ptext30 0E2C                       __ptext22 0CA0                       __ptext14 0E78  
                     __ptext23 10BA                       __ptext15 0B9C                       __ptext24 0700  
                     __ptext16 0A04                       __ptext25 04EA                       __ptext17 0C1E  
                     __ptext26 102E                       __ptext18 0EBC                       __ptext27 0A96  
                     __ptext19 0D18          __end_of_scanForBeacon 0E2C                       _init_LCD 07EA  
                __size_of_main 00F2                  __size_of_stop 005C                  __size_of_turn 0082  
          __end_of_processRFID 0E78                   _waitForInput 08B2             scanForBeacon@speed 002F  
                     int$flags 0049                   ??_returnHome 0033            _InterruptHandlerLow 0018  
                   _LCD_String 0D18          scanForBeacon@raw_data 0033                     _INTCONbits 000FF2  
                  ??_init_RFID 000B                    _setMotorPWM 04EA                    _moveForward 0C1E  
                     intlevel1 0000                       intlevel2 0000           ?_InterruptHandlerLow 0001  
           __end_of_returnHome 0EBC                     _OSCCONbits 000FD3     processRFID@position_in_buf 0042  
       ??_InterruptHandlerHigh 0005                ??_classify_data 000D               stopAndDisplay@mL 002B  
             stopAndDisplay@mR 002D                returnHome@speed 002F                    _processRFID 0E2C  
        ??_InterruptHandlerLow 0008                stopAndDisplay@i 0035                 returnHome@time 0031  
                 returnHome@mL 002B                   returnHome@mR 002D  
