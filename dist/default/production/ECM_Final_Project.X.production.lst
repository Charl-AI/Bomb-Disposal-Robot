

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 08 17:22:53 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _ANSEL1	set	4025
    86  0000                     _ANSEL0	set	4024
    87  0000                     _T5CON	set	4023
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _TXSTAbits	set	4012
    92  0000                     _BAUDCONbits	set	4010
    93  0000                     _SPBRGH	set	4016
    94  0000                     _SPBRG	set	4015
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATDbits	set	3980
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _RCREG	set	4014
   108  0000                     _PIR1bits	set	3998
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _T0CON	set	4053
   111  0000                     _TRISDbits	set	3989
   112  0000                     _TRISBbits	set	3987
   113  0000                     _RCONbits	set	4048
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCCONbits	set	4051
   116  0000                     _OSCCON	set	4051
   117  0000                     _PDC1H	set	3958
   118  0000                     _PDC1L	set	3959
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121                           
   122                           	psect	smallconst
   123  000300                     __psmallconst:
   124                           	opt callstack 0
   125  000300  00                 	db	0
   126  000301                     STR_14:
   127  000301  53                 	db	83	;'S'
   128  000302  54                 	db	84	;'T'
   129  000303  41                 	db	65	;'A'
   130  000304  52                 	db	82	;'R'
   131  000305  54                 	db	84	;'T'
   132  000306  49                 	db	73	;'I'
   133  000307  4E                 	db	78	;'N'
   134  000308  47                 	db	71	;'G'
   135  000309  20                 	db	32
   136  00030A  53                 	db	83	;'S'
   137  00030B  45                 	db	69	;'E'
   138  00030C  41                 	db	65	;'A'
   139  00030D  52                 	db	82	;'R'
   140  00030E  43                 	db	67	;'C'
   141  00030F  48                 	db	72	;'H'
   142  000310  00                 	db	0
   143  000311                     STR_13:
   144  000311  54                 	db	84	;'T'
   145  000312  4F                 	db	79	;'O'
   146  000313  20                 	db	32
   147  000314  53                 	db	83	;'S'
   148  000315  54                 	db	84	;'T'
   149  000316  41                 	db	65	;'A'
   150  000317  52                 	db	82	;'R'
   151  000318  54                 	db	84	;'T'
   152  000319  20                 	db	32
   153  00031A  53                 	db	83	;'S'
   154  00031B  45                 	db	69	;'E'
   155  00031C  41                 	db	65	;'A'
   156  00031D  52                 	db	82	;'R'
   157  00031E  43                 	db	67	;'C'
   158  00031F  48                 	db	72	;'H'
   159  000320  00                 	db	0
   160  000321                     STR_6:
   161  000321  52                 	db	82	;'R'
   162  000322  45                 	db	69	;'E'
   163  000323  53                 	db	83	;'S'
   164  000324  45                 	db	69	;'E'
   165  000325  54                 	db	84	;'T'
   166  000326  54                 	db	84	;'T'
   167  000327  49                 	db	73	;'I'
   168  000328  4E                 	db	78	;'N'
   169  000329  47                 	db	71	;'G'
   170  00032A  20                 	db	32
   171  00032B  52                 	db	82	;'R'
   172  00032C  4F                 	db	79	;'O'
   173  00032D  42                 	db	66	;'B'
   174  00032E  4F                 	db	79	;'O'
   175  00032F  54                 	db	84	;'T'
   176  000330  00                 	db	0
   177  000331                     STR_3:
   178  000331  43                 	db	67	;'C'
   179  000332  48                 	db	72	;'H'
   180  000333  45                 	db	69	;'E'
   181  000334  43                 	db	67	;'C'
   182  000335  4B                 	db	75	;'K'
   183  000336  53                 	db	83	;'S'
   184  000337  55                 	db	85	;'U'
   185  000338  4D                 	db	77	;'M'
   186  000339  20                 	db	32
   187  00033A  46                 	db	70	;'F'
   188  00033B  41                 	db	65	;'A'
   189  00033C  49                 	db	73	;'I'
   190  00033D  4C                 	db	76	;'L'
   191  00033E  45                 	db	69	;'E'
   192  00033F  44                 	db	68	;'D'
   193  000340  00                 	db	0
   194  000341                     STR_2:
   195  000341  43                 	db	67	;'C'
   196  000342  48                 	db	72	;'H'
   197  000343  45                 	db	69	;'E'
   198  000344  43                 	db	67	;'C'
   199  000345  4B                 	db	75	;'K'
   200  000346  53                 	db	83	;'S'
   201  000347  55                 	db	85	;'U'
   202  000348  4D                 	db	77	;'M'
   203  000349  20                 	db	32
   204  00034A  50                 	db	80	;'P'
   205  00034B  41                 	db	65	;'A'
   206  00034C  53                 	db	83	;'S'
   207  00034D  53                 	db	83	;'S'
   208  00034E  45                 	db	69	;'E'
   209  00034F  44                 	db	68	;'D'
   210  000350  00                 	db	0
   211  000351                     STR_7:
   212  000351  4D                 	db	77	;'M'
   213  000352  4F                 	db	79	;'O'
   214  000353  56                 	db	86	;'V'
   215  000354  49                 	db	73	;'I'
   216  000355  4E                 	db	78	;'N'
   217  000356  47                 	db	71	;'G'
   218  000357  20                 	db	32
   219  000358  54                 	db	84	;'T'
   220  000359  4F                 	db	79	;'O'
   221  00035A  20                 	db	32
   222  00035B  42                 	db	66	;'B'
   223  00035C  4F                 	db	79	;'O'
   224  00035D  4D                 	db	77	;'M'
   225  00035E  42                 	db	66	;'B'
   226  00035F  00                 	db	0
   227  000360                     STR_5:
   228  000360  42                 	db	66	;'B'
   229  000361  4F                 	db	79	;'O'
   230  000362  4D                 	db	77	;'M'
   231  000363  42                 	db	66	;'B'
   232  000364  20                 	db	32
   233  000365  4E                 	db	78	;'N'
   234  000366  4F                 	db	79	;'O'
   235  000367  54                 	db	84	;'T'
   236  000368  20                 	db	32
   237  000369  46                 	db	70	;'F'
   238  00036A  4F                 	db	79	;'O'
   239  00036B  55                 	db	85	;'U'
   240  00036C  4E                 	db	78	;'N'
   241  00036D  44                 	db	68	;'D'
   242  00036E  00                 	db	0
   243  00036F                     STR_8:
   244  00036F  52                 	db	82	;'R'
   245  000370  45                 	db	69	;'E'
   246  000371  54                 	db	84	;'T'
   247  000372  55                 	db	85	;'U'
   248  000373  52                 	db	82	;'R'
   249  000374  4E                 	db	78	;'N'
   250  000375  49                 	db	73	;'I'
   251  000376  4E                 	db	78	;'N'
   252  000377  47                 	db	71	;'G'
   253  000378  20                 	db	32
   254  000379  48                 	db	72	;'H'
   255  00037A  4F                 	db	79	;'O'
   256  00037B  4D                 	db	77	;'M'
   257  00037C  45                 	db	69	;'E'
   258  00037D  00                 	db	0
   259  00037E                     STR_1:
   260  00037E  43                 	db	67	;'C'
   261  00037F  72                 	db	114	;'r'
   262  000380  69                 	db	105	;'i'
   263  000381  74                 	db	116	;'t'
   264  000382  69                 	db	105	;'i'
   265  000383  63                 	db	99	;'c'
   266  000384  61                 	db	97	;'a'
   267  000385  6C                 	db	108	;'l'
   268  000386  20                 	db	32
   269  000387  45                 	db	69	;'E'
   270  000388  72                 	db	114	;'r'
   271  000389  72                 	db	114	;'r'
   272  00038A  6F                 	db	111	;'o'
   273  00038B  72                 	db	114	;'r'
   274  00038C  00                 	db	0
   275  00038D                     STR_12:
   276  00038D  50                 	db	80	;'P'
   277  00038E  52                 	db	82	;'R'
   278  00038F  45                 	db	69	;'E'
   279  000390  53                 	db	83	;'S'
   280  000391  53                 	db	83	;'S'
   281  000392  20                 	db	32
   282  000393  42                 	db	66	;'B'
   283  000394  55                 	db	85	;'U'
   284  000395  54                 	db	84	;'T'
   285  000396  54                 	db	84	;'T'
   286  000397  4F                 	db	79	;'O'
   287  000398  4E                 	db	78	;'N'
   288  000399  00                 	db	0
   289  00039A                     STR_4:
   290  00039A  53                 	db	83	;'S'
   291  00039B  45                 	db	69	;'E'
   292  00039C  41                 	db	65	;'A'
   293  00039D  52                 	db	82	;'R'
   294  00039E  43                 	db	67	;'C'
   295  00039F  48                 	db	72	;'H'
   296  0003A0  49                 	db	73	;'I'
   297  0003A1  4E                 	db	78	;'N'
   298  0003A2  47                 	db	71	;'G'
   299  0003A3  00                 	db	0
   300  0003A4                     STR_10:
   301  0003A4  25                 	db	37
   302  0003A5  75                 	db	117	;'u'
   303  0003A6  00                 	db	0
   304  0000                     
   305                           ; #config settings
   306  0003A7  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  0010B6                     __pcinit:
   310                           	opt callstack 0
   311  0010B6                     start_initialization:
   312                           	opt callstack 0
   313  0010B6                     __initialization:
   314                           	opt callstack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (50 bytes)
   317  0010B6  EE00  F060         	lfsr	0,__pbssBANK0
   318  0010BA  0E32               	movlw	50
   319  0010BC                     clear_0:
   320  0010BC  6AEE               	clrf	postinc0,c
   321  0010BE  06E8               	decf	wreg,f,c
   322  0010C0  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to COMRAM (11 bytes)
   325  0010C2  EE00  F03E         	lfsr	0,__pbssCOMRAM
   326  0010C6  0E0B               	movlw	11
   327  0010C8                     clear_1:
   328  0010C8  6AEE               	clrf	postinc0,c
   329  0010CA  06E8               	decf	wreg,f,c
   330  0010CC  E1FD               	bnz	clear_1
   331  0010CE                     end_of_initialization:
   332                           	opt callstack 0
   333  0010CE                     __end_of__initialization:
   334                           	opt callstack 0
   335  0010CE  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  0010D0  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  0010D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   338  0010D4  6EF8               	movwf	tblptru,c
   339  0010D6  0100               	movlb	0
   340  0010D8  EFA5  F003         	goto	_main	;jump to C main() function
   341                           
   342                           	psect	bssCOMRAM
   343  00003E                     __pbssCOMRAM:
   344                           	opt callstack 0
   345  00003E                     	ds	2
   346  000040                     debug@smoothed_data:
   347                           	opt callstack 0
   348  000040                     	ds	2
   349  000042                     processRFID@position_in_buf:
   350                           	opt callstack 0
   351  000042                     	ds	1
   352  000043                     _robot_mode:
   353                           	opt callstack 0
   354  000043                     	ds	1
   355  000044                     _movement_time:
   356                           	opt callstack 0
   357  000044                     	ds	4
   358  000048                     _RFID_flag:
   359                           	opt callstack 0
   360  000048                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  000060                     __pbssBANK0:
   364                           	opt callstack 0
   365  000060                     	ds	2
   366  000062                     	ds	2
   367  000064                     	ds	2
   368  000066                     	ds	32
   369  000086                     _RFIDbuf:
   370                           	opt callstack 0
   371  000086                     	ds	12
   372                           
   373                           	psect	cstackBANK0
   374  000092                     __pcstackBANK0:
   375                           	opt callstack 0
   376  000092                     main@searching_speed:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x0
   380  000092                     	ds	2
   381  000094                     main@moving_speed:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x2
   385  000094                     	ds	2
   386  000096                     main@motorL:
   387                           	opt callstack 0
   388                           
   389                           ; 9 bytes @ 0x4
   390  000096                     	ds	9
   391  00009F                     main@motorR:
   392                           	opt callstack 0
   393                           
   394                           ; 9 bytes @ 0xD
   395  00009F                     	ds	9
   396                           
   397                           	psect	cstackCOMRAM
   398  000001                     __pcstackCOMRAM:
   399                           	opt callstack 0
   400  000001                     processRFID@RFIDbuf:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x0
   404  000001                     	ds	2
   405  000003                     processRFID@latestChar:
   406                           	opt callstack 0
   407                           
   408                           ; 1 bytes @ 0x2
   409  000003                     	ds	1
   410  000004                     processRFID@i:
   411                           	opt callstack 0
   412                           
   413                           ; 1 bytes @ 0x3
   414  000004                     	ds	1
   415  000005                     ??_InterruptHandlerHigh:
   416                           
   417                           ; 1 bytes @ 0x4
   418  000005                     	ds	3
   419  000008                     ??_InterruptHandlerLow:
   420                           
   421                           ; 1 bytes @ 0x7
   422  000008                     	ds	3
   423  00000B                     ??_LCDout:
   424  00000B                     ?___wmul:
   425                           	opt callstack 0
   426  00000B                     initPWM@PWMperiod:
   427                           	opt callstack 0
   428  00000B                     classify_data@raw_data:
   429                           	opt callstack 0
   430  00000B                     ___wmul@multiplier:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0xA
   434  00000B                     	ds	1
   435  00000C                     LCDout@number:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0xB
   439  00000C                     	ds	1
   440  00000D                     SendLCD@type:
   441                           	opt callstack 0
   442  00000D                     classify_data@smoothed:
   443                           	opt callstack 0
   444  00000D                     ___wmul@multiplicand:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0xC
   448  00000D                     	ds	1
   449  00000E                     SendLCD@Byte:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0xD
   453  00000E                     	ds	1
   454  00000F                     ??_init_LCD:
   455  00000F                     ??_ClearLCD:
   456  00000F                     ??_classify_data:
   457  00000F                     SetLine@line:
   458                           	opt callstack 0
   459  00000F                     LCD_String@string:
   460                           	opt callstack 0
   461  00000F                     ___wmul@product:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0xE
   465  00000F                     	ds	1
   466  000010                     display_RFID@dataBuf:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0xF
   470  000010                     	ds	1
   471  000011                     ??_waitForInput:
   472  000011                     ?___awdiv:
   473                           	opt callstack 0
   474  000011                     check_RFID@dataBuf:
   475                           	opt callstack 0
   476  000011                     ___awdiv@dividend:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x10
   480  000011                     	ds	1
   481  000012                     display_RFID@i:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x11
   485  000012                     	ds	1
   486  000013                     ??_check_RFID:
   487  000013                     waitForInput@i:
   488                           	opt callstack 0
   489  000013                     ___awdiv@divisor:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x12
   493  000013                     	ds	2
   494  000015                     ___awdiv@counter:
   495                           	opt callstack 0
   496  000015                     classify_data@filtered:
   497                           	opt callstack 0
   498  000015                     check_RFID@hexBuf:
   499                           	opt callstack 0
   500                           
   501                           ; 12 bytes @ 0x14
   502  000015                     	ds	1
   503  000016                     ___awdiv@sign:
   504                           	opt callstack 0
   505                           
   506                           ; 1 bytes @ 0x15
   507  000016                     	ds	1
   508  000017                     ___awdiv@quotient:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x16
   512  000017                     	ds	2
   513  000019                     setMotorPWM@m:
   514                           	opt callstack 0
   515                           
   516                           ; 2 bytes @ 0x18
   517  000019                     	ds	2
   518  00001B                     ??_setMotorPWM:
   519                           
   520                           ; 1 bytes @ 0x1A
   521  00001B                     	ds	5
   522  000020                     setMotorPWM@PWMduty:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x1F
   526  000020                     	ds	1
   527  000021                     check_RFID@byte1:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x20
   531  000021                     	ds	1
   532  000022                     check_RFID@byte2:
   533                           	opt callstack 0
   534  000022                     stop@mL:
   535                           	opt callstack 0
   536  000022                     turnRight@mL:
   537                           	opt callstack 0
   538  000022                     moveForward@mL:
   539                           	opt callstack 0
   540  000022                     moveBackward@mL:
   541                           	opt callstack 0
   542  000022                     init_motor_struct@mL:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x21
   546  000022                     	ds	1
   547  000023                     check_RFID@byte3:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x22
   551  000023                     	ds	1
   552  000024                     check_RFID@byte4:
   553                           	opt callstack 0
   554  000024                     stop@mR:
   555                           	opt callstack 0
   556  000024                     turnRight@mR:
   557                           	opt callstack 0
   558  000024                     moveForward@mR:
   559                           	opt callstack 0
   560  000024                     moveBackward@mR:
   561                           	opt callstack 0
   562  000024                     init_motor_struct@mR:
   563                           	opt callstack 0
   564                           
   565                           ; 2 bytes @ 0x23
   566  000024                     	ds	1
   567  000025                     check_RFID@byte5:
   568                           	opt callstack 0
   569                           
   570                           ; 1 bytes @ 0x24
   571  000025                     	ds	1
   572  000026                     check_RFID@checksum:
   573                           	opt callstack 0
   574  000026                     stop@initial_speed:
   575                           	opt callstack 0
   576  000026                     turnRight@max_power:
   577                           	opt callstack 0
   578  000026                     moveForward@max_power:
   579                           	opt callstack 0
   580  000026                     moveBackward@max_power:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x25
   584  000026                     	ds	1
   585  000027                     check_RFID@i:
   586                           	opt callstack 0
   587                           
   588                           ; 2 bytes @ 0x26
   589  000027                     	ds	1
   590  000028                     ??_stop:
   591  000028                     ??_turnRight:
   592  000028                     ??_moveForward:
   593  000028                     ??_moveBackward:
   594                           
   595                           ; 1 bytes @ 0x27
   596  000028                     	ds	1
   597  000029                     stop@i:
   598                           	opt callstack 0
   599  000029                     turnRight@i:
   600                           	opt callstack 0
   601  000029                     moveForward@i:
   602                           	opt callstack 0
   603  000029                     moveBackward@i:
   604                           	opt callstack 0
   605                           
   606                           ; 2 bytes @ 0x28
   607  000029                     	ds	2
   608  00002B                     scanForBeacon@mL:
   609                           	opt callstack 0
   610  00002B                     moveToBeacon@mL:
   611                           	opt callstack 0
   612  00002B                     returnHome@mL:
   613                           	opt callstack 0
   614  00002B                     stopAndDisplay@mL:
   615                           	opt callstack 0
   616                           
   617                           ; 2 bytes @ 0x2A
   618  00002B                     	ds	2
   619  00002D                     scanForBeacon@mR:
   620                           	opt callstack 0
   621  00002D                     moveToBeacon@mR:
   622                           	opt callstack 0
   623  00002D                     returnHome@mR:
   624                           	opt callstack 0
   625  00002D                     stopAndDisplay@mR:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x2C
   629  00002D                     	ds	2
   630  00002F                     scanForBeacon@speed:
   631                           	opt callstack 0
   632  00002F                     moveToBeacon@speed:
   633                           	opt callstack 0
   634  00002F                     returnHome@speed:
   635                           	opt callstack 0
   636  00002F                     stopAndDisplay@speed:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x2E
   640  00002F                     	ds	2
   641  000031                     scanForBeacon@time:
   642                           	opt callstack 0
   643  000031                     moveToBeacon@time:
   644                           	opt callstack 0
   645  000031                     returnHome@time:
   646                           	opt callstack 0
   647  000031                     stopAndDisplay@RFID_buffer:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x30
   651  000031                     	ds	2
   652  000033                     ??_scanForBeacon:
   653  000033                     ??_stopAndDisplay:
   654  000033                     moveToBeacon@exit_flag:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x32
   658  000033                     	ds	2
   659  000035                     stopAndDisplay@i:
   660                           	opt callstack 0
   661                           
   662                           ; 2 bytes @ 0x34
   663  000035                     	ds	2
   664  000037                     scanForBeacon@raw_data:
   665                           	opt callstack 0
   666                           
   667                           ; 2 bytes @ 0x36
   668  000037                     	ds	2
   669  000039                     scanForBeacon@beacon_location:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0x38
   673  000039                     	ds	1
   674  00003A                     scanForBeacon@i:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0x39
   678  00003A                     	ds	2
   679  00003C                     scanForBeacon@smoothed_data:
   680                           	opt callstack 0
   681                           
   682                           ; 2 bytes @ 0x3B
   683  00003C                     	ds	2
   684  00003E                     
   685                           ; 1 bytes @ 0x3D
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 115 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  motorR          9   13[BANK0 ] struct DC_motor
   696 ;;  motorL          9    4[BANK0 ] struct DC_motor
   697 ;;  moving_speed    2    2[BANK0 ] int 
   698 ;;  searching_sp    2    0[BANK0 ] int 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         0      22       0       0
   710 ;;      Temps:          0       0       0       0
   711 ;;      Totals:         0      22       0       0
   712 ;;Total ram usage:       22 bytes
   713 ;; Hardware stack levels required when called:    9
   714 ;; This function calls:
   715 ;;		_LCD_String
   716 ;;		_init_motor_struct
   717 ;;		_moveToBeacon
   718 ;;		_returnHome
   719 ;;		_scanForBeacon
   720 ;;		_setup
   721 ;;		_stopAndDisplay
   722 ;;		_waitForInput
   723 ;; This function is called by:
   724 ;;		Startup code after reset
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text0
   729  00074A                     __ptext0:
   730                           	opt callstack 0
   731  00074A                     _main:
   732                           	opt callstack 22
   733                           
   734                           ;main.c: 118:   setup();
   735                           
   736                           ;incstack = 0
   737  00074A  ECF7  F007         	call	_setup	;wreg free
   738                           
   739                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   740  00074E  0E96               	movlw	low main@motorL
   741  000750  6E22               	movwf	init_motor_struct@mL,c
   742  000752  0E00               	movlw	high main@motorL
   743  000754  6E23               	movwf	init_motor_struct@mL+1,c
   744  000756  0E9F               	movlw	low main@motorR
   745  000758  6E24               	movwf	init_motor_struct@mR,c
   746  00075A  0E00               	movlw	high main@motorR
   747  00075C  6E25               	movwf	init_motor_struct@mR+1,c
   748  00075E  EC22  F004         	call	_init_motor_struct	;wreg free
   749                           
   750                           ;main.c: 125:   int searching_speed = 55;
   751  000762  0E00               	movlw	0
   752  000764  0100               	movlb	0	; () banked
   753  000766  6F93               	movwf	(main@searching_speed+1)& (0+255),b
   754  000768  0E37               	movlw	55
   755  00076A  6F92               	movwf	main@searching_speed& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 126:   int moving_speed = 100;
   759  00076C  0E00               	movlw	0
   760  00076E  6F95               	movwf	(main@moving_speed+1)& (0+255),b
   761  000770  0E64               	movlw	100
   762  000772  6F94               	movwf	main@moving_speed& (0+255),b
   763                           
   764                           ; BSR set to: 0
   765                           ;main.c: 128:   waitForInput();
   766  000774  EC88  F006         	call	_waitForInput	;wreg free
   767  000778                     l2663:
   768                           
   769                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   770  000778  5043               	movf	_robot_mode,w,c	;volatile
   771  00077A  A4D8               	btfss	status,2,c
   772  00077C  D013               	goto	l2667
   773                           
   774                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed,
   775  00077E  0E96               	movlw	low main@motorL
   776  000780  6E2B               	movwf	scanForBeacon@mL,c
   777  000782  0E00               	movlw	high main@motorL
   778  000784  6E2C               	movwf	scanForBeacon@mL+1,c
   779  000786  0E9F               	movlw	low main@motorR
   780  000788  6E2D               	movwf	scanForBeacon@mR,c
   781  00078A  0E00               	movlw	high main@motorR
   782  00078C  6E2E               	movwf	scanForBeacon@mR+1,c
   783  00078E  C092  F02F         	movff	main@searching_speed,scanForBeacon@speed
   784  000792  C093  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   785  000796  0E44               	movlw	low _movement_time
   786  000798  6E31               	movwf	scanForBeacon@time,c
   787  00079A  0E00               	movlw	high _movement_time
   788  00079C  6E32               	movwf	scanForBeacon@time+1,c
   789  00079E  EC7C  F002         	call	_scanForBeacon	;wreg free
   790  0007A2  D047               	goto	L3
   791  0007A4                     l2667:
   792  0007A4  0443               	decf	_robot_mode,w,c	;volatile
   793  0007A6  A4D8               	btfss	status,2,c
   794  0007A8  D017               	goto	l2671
   795                           
   796                           ;main.c: 143:       {;main.c: 144:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   797  0007AA  0E96               	movlw	low main@motorL
   798  0007AC  6E2B               	movwf	moveToBeacon@mL,c
   799  0007AE  0E00               	movlw	high main@motorL
   800  0007B0  6E2C               	movwf	moveToBeacon@mL+1,c
   801  0007B2  0E9F               	movlw	low main@motorR
   802  0007B4  6E2D               	movwf	moveToBeacon@mR,c
   803  0007B6  0E00               	movlw	high main@motorR
   804  0007B8  6E2E               	movwf	moveToBeacon@mR+1,c
   805  0007BA  C094  F02F         	movff	main@moving_speed,moveToBeacon@speed
   806  0007BE  C095  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   807  0007C2  0E44               	movlw	low _movement_time
   808  0007C4  6E31               	movwf	moveToBeacon@time,c
   809  0007C6  0E00               	movlw	high _movement_time
   810  0007C8  6E32               	movwf	moveToBeacon@time+1,c
   811  0007CA  0E48               	movlw	low _RFID_flag
   812  0007CC  6E33               	movwf	moveToBeacon@exit_flag,c
   813  0007CE  0E00               	movlw	high _RFID_flag
   814  0007D0  6E34               	movwf	moveToBeacon@exit_flag+1,c
   815  0007D2  EC02  F007         	call	_moveToBeacon	;wreg free
   816  0007D6  D02D               	goto	L3
   817  0007D8                     l2671:
   818  0007D8  0E02               	movlw	2
   819  0007DA  1843               	xorwf	_robot_mode,w,c	;volatile
   820  0007DC  A4D8               	btfss	status,2,c
   821  0007DE  D013               	goto	l2675
   822                           
   823                           ;main.c: 150:       {;main.c: 151:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   824  0007E0  0E96               	movlw	low main@motorL
   825  0007E2  6E2B               	movwf	returnHome@mL,c
   826  0007E4  0E00               	movlw	high main@motorL
   827  0007E6  6E2C               	movwf	returnHome@mL+1,c
   828  0007E8  0E9F               	movlw	low main@motorR
   829  0007EA  6E2D               	movwf	returnHome@mR,c
   830  0007EC  0E00               	movlw	high main@motorR
   831  0007EE  6E2E               	movwf	returnHome@mR+1,c
   832  0007F0  C094  F02F         	movff	main@moving_speed,returnHome@speed
   833  0007F4  C095  F030         	movff	main@moving_speed+1,returnHome@speed+1
   834  0007F8  0E44               	movlw	low _movement_time
   835  0007FA  6E31               	movwf	returnHome@time,c
   836  0007FC  0E00               	movlw	high _movement_time
   837  0007FE  6E32               	movwf	returnHome@time+1,c
   838  000800  ECB5  F007         	call	_returnHome	;wreg free
   839  000804  D016               	goto	L3
   840  000806                     l2675:
   841  000806  0E03               	movlw	3
   842  000808  1843               	xorwf	_robot_mode,w,c	;volatile
   843  00080A  A4D8               	btfss	status,2,c
   844  00080C  D014               	goto	l2679
   845                           
   846                           ;main.c: 157:       {;main.c: 158:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   847  00080E  0E96               	movlw	low main@motorL
   848  000810  6E2B               	movwf	stopAndDisplay@mL,c
   849  000812  0E00               	movlw	high main@motorL
   850  000814  6E2C               	movwf	stopAndDisplay@mL+1,c
   851  000816  0E9F               	movlw	low main@motorR
   852  000818  6E2D               	movwf	stopAndDisplay@mR,c
   853  00081A  0E00               	movlw	high main@motorR
   854  00081C  6E2E               	movwf	stopAndDisplay@mR+1,c
   855  00081E  C094  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   856  000822  C095  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   857  000826  0E86               	movlw	low _RFIDbuf
   858  000828  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   859  00082A  0E00               	movlw	high _RFIDbuf
   860  00082C  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   861  00082E  EC40  F005         	call	_stopAndDisplay	;wreg free
   862  000832                     L3:
   863  000832  6E43               	movwf	_robot_mode,c	;volatile
   864                           
   865                           ;main.c: 159:       }
   866  000834  D7A1               	goto	l2663
   867  000836                     l2679:
   868                           
   869                           ;main.c: 163:       {;main.c: 164:           LCD_String("Critical Error");
   870  000836  0E7E               	movlw	low STR_1
   871  000838  6E0F               	movwf	LCD_String@string,c
   872  00083A  0E03               	movlw	high STR_1
   873  00083C  6E10               	movwf	LCD_String@string+1,c
   874  00083E  EC32  F007         	call	_LCD_String	;wreg free
   875  000842  D79A               	goto	l2663
   876  000844                     __end_of_main:
   877                           	opt callstack 0
   878                           
   879 ;; *************** function _waitForInput *****************
   880 ;; Defined at:
   881 ;;		line 156 in file "subroutines.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  i               2   18[COMRAM] int 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   895 ;;      Params:         0       0       0       0
   896 ;;      Locals:         2       0       0       0
   897 ;;      Temps:          2       0       0       0
   898 ;;      Totals:         4       0       0       0
   899 ;;Total ram usage:        4 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    7
   902 ;; This function calls:
   903 ;;		_ClearLCD
   904 ;;		_LCD_String
   905 ;;		_SetLine
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text1
   912  000D10                     __ptext1:
   913                           	opt callstack 0
   914  000D10                     _waitForInput:
   915                           	opt callstack 23
   916                           
   917                           ;subroutines.c: 159:     ClearLCD();
   918                           
   919                           ;incstack = 0
   920  000D10  EC9B  F008         	call	_ClearLCD	;wreg free
   921                           
   922                           ;subroutines.c: 160:     SetLine(1);
   923  000D14  0E01               	movlw	1
   924  000D16  EC44  F008         	call	_SetLine
   925                           
   926                           ;subroutines.c: 161:     LCD_String("PRESS BUTTON");
   927  000D1A  0E8D               	movlw	low STR_12
   928  000D1C  6E0F               	movwf	LCD_String@string,c
   929  000D1E  0E03               	movlw	high STR_12
   930  000D20  6E10               	movwf	LCD_String@string+1,c
   931  000D22  EC32  F007         	call	_LCD_String	;wreg free
   932                           
   933                           ;subroutines.c: 162:     SetLine(2);
   934  000D26  0E02               	movlw	2
   935  000D28  EC44  F008         	call	_SetLine
   936                           
   937                           ;subroutines.c: 163:     LCD_String("TO START SEARCH");
   938  000D2C  0E11               	movlw	low STR_13
   939  000D2E  6E0F               	movwf	LCD_String@string,c
   940  000D30  0E03               	movlw	high STR_13
   941  000D32  6E10               	movwf	LCD_String@string+1,c
   942  000D34  EC32  F007         	call	_LCD_String	;wreg free
   943  000D38                     l343:
   944  000D38  A483               	btfss	3971,2,c	;volatile
   945  000D3A  D7FE               	goto	l343
   946                           
   947                           ;subroutines.c: 169:     ClearLCD();
   948  000D3C  EC9B  F008         	call	_ClearLCD	;wreg free
   949                           
   950                           ;subroutines.c: 170:     SetLine(1);
   951  000D40  0E01               	movlw	1
   952  000D42  EC44  F008         	call	_SetLine
   953                           
   954                           ;subroutines.c: 171:     LCD_String("STARTING SEARCH");
   955  000D46  0E01               	movlw	low STR_14
   956  000D48  6E0F               	movwf	LCD_String@string,c
   957  000D4A  0E03               	movlw	high STR_14
   958  000D4C  6E10               	movwf	LCD_String@string+1,c
   959  000D4E  EC32  F007         	call	_LCD_String	;wreg free
   960                           
   961                           ;subroutines.c: 172:     for(int i=0; i<10;i++)
   962  000D52  0E00               	movlw	0
   963  000D54  6E14               	movwf	waitForInput@i+1,c
   964  000D56  0E00               	movlw	0
   965  000D58  6E13               	movwf	waitForInput@i,c
   966  000D5A                     l2543:
   967                           
   968                           ;subroutines.c: 173:     {;subroutines.c: 174:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   969  000D5A  0E02               	movlw	2
   970  000D5C  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   971  000D5E  0E04               	movlw	4
   972  000D60  6E11               	movwf	??_waitForInput& (0+255),c
   973  000D62  0EBA               	movlw	186
   974  000D64                     u1877:
   975  000D64  2EE8               	decfsz	wreg,f,c
   976  000D66  D7FE               	bra	u1877
   977  000D68  2E11               	decfsz	??_waitForInput& (0+255),f,c
   978  000D6A  D7FC               	bra	u1877
   979  000D6C  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
   980  000D6E  D7FA               	bra	u1877
   981  000D70  D000               	nop2	
   982                           
   983                           ;subroutines.c: 175:     }
   984  000D72  4A13               	infsnz	waitForInput@i,f,c
   985  000D74  2A14               	incf	waitForInput@i+1,f,c
   986  000D76  BE14               	btfsc	waitForInput@i+1,7,c
   987  000D78  D7F0               	goto	l2543
   988  000D7A  5014               	movf	waitForInput@i+1,w,c
   989  000D7C  E104               	bnz	u1740
   990  000D7E  0E0A               	movlw	10
   991  000D80  5C13               	subwf	waitForInput@i,w,c
   992  000D82  A0D8               	btfss	status,0,c
   993  000D84  D7EA               	goto	l2543
   994  000D86                     u1740:
   995                           
   996                           ;subroutines.c: 176:     ClearLCD();
   997  000D86  EC9B  F008         	call	_ClearLCD	;wreg free
   998  000D8A  0012               	return		;funcret
   999  000D8C                     __end_of_waitForInput:
  1000                           	opt callstack 0
  1001                           
  1002 ;; *************** function _stopAndDisplay *****************
  1003 ;; Defined at:
  1004 ;;		line 101 in file "subroutines.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1007 ;;		 -> main@motorL(9), 
  1008 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1009 ;;		 -> main@motorR(9), 
  1010 ;;  speed           2   46[COMRAM] int 
  1011 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
  1012 ;;		 -> RFIDbuf(12), 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  i               2   52[COMRAM] int 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      unsigned char 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1024 ;;      Params:         8       0       0       0
  1025 ;;      Locals:         2       0       0       0
  1026 ;;      Temps:          2       0       0       0
  1027 ;;      Totals:        12       0       0       0
  1028 ;;Total ram usage:       12 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    8
  1031 ;; This function calls:
  1032 ;;		_ClearLCD
  1033 ;;		_LCD_String
  1034 ;;		_check_RFID
  1035 ;;		_display_RFID
  1036 ;;		_stop
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text2
  1043  000A80                     __ptext2:
  1044                           	opt callstack 0
  1045  000A80                     _stopAndDisplay:
  1046                           	opt callstack 22
  1047                           
  1048                           ;subroutines.c: 101: volatile char stopAndDisplay(struct DC_motor *mL, struct DC_motor *
      +                          mR, int speed,;subroutines.c: 102: volatile char RFID_buffer[]);subroutines.c: 103: {;su
      +                          broutines.c: 104:     stop(mL, mR,speed);
  1049                           
  1050                           ;incstack = 0
  1051  000A80  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1052  000A84  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1053  000A88  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1054  000A8C  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1055  000A90  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1056  000A94  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1057  000A98  EC61  F007         	call	_stop	;wreg free
  1058                           
  1059                           ;subroutines.c: 106:     display_RFID(RFID_buffer);
  1060  000A9C  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1061  000AA0  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1062  000AA4  ECD7  F007         	call	_display_RFID	;wreg free
  1063                           
  1064                           ;subroutines.c: 107:     check_RFID(RFID_buffer);
  1065  000AA8  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1066  000AAC  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1067  000AB0  ECD4  F001         	call	_check_RFID	;wreg free
  1068  000AB4  D025               	goto	l2651
  1069  000AB6                     l2635:
  1070                           
  1071                           ;subroutines.c: 112:             {;subroutines.c: 113:                 ClearLCD();
  1072  000AB6  EC9B  F008         	call	_ClearLCD	;wreg free
  1073                           
  1074                           ;subroutines.c: 114:                 LCD_String("RESETTING ROBOT");
  1075  000ABA  0E21               	movlw	low STR_6
  1076  000ABC  6E0F               	movwf	LCD_String@string,c
  1077  000ABE  0E03               	movlw	high STR_6
  1078  000AC0  6E10               	movwf	LCD_String@string+1,c
  1079  000AC2  EC32  F007         	call	_LCD_String	;wreg free
  1080                           
  1081                           ;subroutines.c: 115:                 for(int i=0; i<10;i++)
  1082  000AC6  0E00               	movlw	0
  1083  000AC8  6E36               	movwf	stopAndDisplay@i+1,c
  1084  000ACA  0E00               	movlw	0
  1085  000ACC  6E35               	movwf	stopAndDisplay@i,c
  1086  000ACE                     l2645:
  1087                           
  1088                           ;subroutines.c: 116:                 {;subroutines.c: 117:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1089  000ACE  0E02               	movlw	2
  1090  000AD0  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1091  000AD2  0E04               	movlw	4
  1092  000AD4  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1093  000AD6  0EBA               	movlw	186
  1094  000AD8                     u1887:
  1095  000AD8  2EE8               	decfsz	wreg,f,c
  1096  000ADA  D7FE               	bra	u1887
  1097  000ADC  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1098  000ADE  D7FC               	bra	u1887
  1099  000AE0  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1100  000AE2  D7FA               	bra	u1887
  1101  000AE4  D000               	nop2	
  1102                           
  1103                           ;subroutines.c: 118:                 }
  1104  000AE6  4A35               	infsnz	stopAndDisplay@i,f,c
  1105  000AE8  2A36               	incf	stopAndDisplay@i+1,f,c
  1106  000AEA  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1107  000AEC  D7F0               	goto	l2645
  1108  000AEE  5036               	movf	stopAndDisplay@i+1,w,c
  1109  000AF0  E104               	bnz	u1810
  1110  000AF2  0E0A               	movlw	10
  1111  000AF4  5C35               	subwf	stopAndDisplay@i,w,c
  1112  000AF6  A0D8               	btfss	status,0,c
  1113  000AF8  D7EA               	goto	l2645
  1114  000AFA                     u1810:
  1115                           
  1116                           ;subroutines.c: 119:                 ClearLCD();
  1117  000AFA  EC9B  F008         	call	_ClearLCD	;wreg free
  1118  000AFE  00FF               	reset		;# 
  1119  000B00                     l2651:
  1120                           
  1121                           ;subroutines.c: 111:             while(PORTDbits.RD2 == 1)
  1122  000B00  A483               	btfss	3971,2,c	;volatile
  1123  000B02  D7FE               	goto	l2651
  1124  000B04  D7D8               	goto	l2635
  1125  000B06                     __end_of_stopAndDisplay:
  1126                           	opt callstack 0
  1127                           
  1128 ;; *************** function _display_RFID *****************
  1129 ;; Defined at:
  1130 ;;		line 107 in file "RFID.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1133 ;;		 -> RFIDbuf(12), 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  i               2   17[COMRAM] int 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1145 ;;      Params:         2       0       0       0
  1146 ;;      Locals:         2       0       0       0
  1147 ;;      Temps:          0       0       0       0
  1148 ;;      Totals:         4       0       0       0
  1149 ;;Total ram usage:        4 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    7
  1152 ;; This function calls:
  1153 ;;		_ClearLCD
  1154 ;;		_SendLCD
  1155 ;;		_SetLine
  1156 ;; This function is called by:
  1157 ;;		_stopAndDisplay
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text3
  1162  000FAE                     __ptext3:
  1163                           	opt callstack 0
  1164  000FAE                     _display_RFID:
  1165                           	opt callstack 22
  1166                           
  1167                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1168                           
  1169                           ;incstack = 0
  1170  000FAE  EC9B  F008         	call	_ClearLCD	;wreg free
  1171                           
  1172                           ;RFID.c: 110:     SetLine(1);
  1173  000FB2  0E01               	movlw	1
  1174  000FB4  EC44  F008         	call	_SetLine
  1175                           
  1176                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1177  000FB8  0E00               	movlw	0
  1178  000FBA  6E13               	movwf	display_RFID@i+1,c
  1179  000FBC  0E00               	movlw	0
  1180  000FBE  6E12               	movwf	display_RFID@i,c
  1181  000FC0                     l2469:
  1182                           
  1183                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1184  000FC0  0E01               	movlw	1
  1185  000FC2  6E0D               	movwf	SendLCD@type,c
  1186  000FC4  5012               	movf	display_RFID@i,w,c
  1187  000FC6  2410               	addwf	display_RFID@dataBuf,w,c
  1188  000FC8  6ED9               	movwf	fsr2l,c
  1189  000FCA  5013               	movf	display_RFID@i+1,w,c
  1190  000FCC  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1191  000FCE  6EDA               	movwf	fsr2h,c
  1192  000FD0  50DF               	movf	indf2,w,c
  1193  000FD2  EC2C  F008         	call	_SendLCD
  1194                           
  1195                           ;RFID.c: 114:     }
  1196  000FD6  4A12               	infsnz	display_RFID@i,f,c
  1197  000FD8  2A13               	incf	display_RFID@i+1,f,c
  1198  000FDA  BE13               	btfsc	display_RFID@i+1,7,c
  1199  000FDC  D7F1               	goto	l2469
  1200  000FDE  5013               	movf	display_RFID@i+1,w,c
  1201  000FE0  E105               	bnz	u1700
  1202  000FE2  0E0A               	movlw	10
  1203  000FE4  5C12               	subwf	display_RFID@i,w,c
  1204  000FE6  B0D8               	btfsc	status,0,c
  1205  000FE8  0012               	return	
  1206  000FEA  D7EA               	goto	l2469
  1207  000FEC                     u1700:
  1208  000FEC  0012               	return		;funcret
  1209  000FEE                     __end_of_display_RFID:
  1210                           	opt callstack 0
  1211                           
  1212 ;; *************** function _check_RFID *****************
  1213 ;; Defined at:
  1214 ;;		line 70 in file "RFID.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1217 ;;		 -> RFIDbuf(12), 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  i               2   38[COMRAM] int 
  1220 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1221 ;;  checksum        1   37[COMRAM] unsigned char 
  1222 ;;  byte5           1   36[COMRAM] unsigned char 
  1223 ;;  byte4           1   35[COMRAM] unsigned char 
  1224 ;;  byte3           1   34[COMRAM] unsigned char 
  1225 ;;  byte2           1   33[COMRAM] unsigned char 
  1226 ;;  byte1           1   32[COMRAM] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1236 ;;      Params:         2       0       0       0
  1237 ;;      Locals:        20       0       0       0
  1238 ;;      Temps:          2       0       0       0
  1239 ;;      Totals:        24       0       0       0
  1240 ;;Total ram usage:       24 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; Hardware stack levels required when called:    7
  1243 ;; This function calls:
  1244 ;;		_LCD_String
  1245 ;;		_SetLine
  1246 ;; This function is called by:
  1247 ;;		_stopAndDisplay
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text4
  1252  0003A8                     __ptext4:
  1253                           	opt callstack 0
  1254  0003A8                     _check_RFID:
  1255                           	opt callstack 22
  1256                           
  1257                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1258                           
  1259                           ;incstack = 0
  1260  0003A8  0E00               	movlw	0
  1261  0003AA  6E28               	movwf	check_RFID@i+1,c
  1262  0003AC  0E00               	movlw	0
  1263  0003AE  6E27               	movwf	check_RFID@i,c
  1264  0003B0                     l2435:
  1265                           
  1266                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1267  0003B0  5027               	movf	check_RFID@i,w,c
  1268  0003B2  2411               	addwf	check_RFID@dataBuf,w,c
  1269  0003B4  6ED9               	movwf	fsr2l,c
  1270  0003B6  5028               	movf	check_RFID@i+1,w,c
  1271  0003B8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1272  0003BA  6EDA               	movwf	fsr2h,c
  1273  0003BC  0E2F               	movlw	47
  1274  0003BE  64DF               	cpfsgt	indf2,c
  1275  0003C0  D018               	goto	l2441
  1276  0003C2  5027               	movf	check_RFID@i,w,c
  1277  0003C4  2411               	addwf	check_RFID@dataBuf,w,c
  1278  0003C6  6ED9               	movwf	fsr2l,c
  1279  0003C8  5028               	movf	check_RFID@i+1,w,c
  1280  0003CA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1281  0003CC  6EDA               	movwf	fsr2h,c
  1282  0003CE  0E3A               	movlw	58
  1283  0003D0  60DF               	cpfslt	indf2,c
  1284  0003D2  D00F               	goto	l2441
  1285                           
  1286                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1287  0003D4  0E15               	movlw	low check_RFID@hexBuf
  1288  0003D6  2427               	addwf	check_RFID@i,w,c
  1289  0003D8  6ED9               	movwf	fsr2l,c
  1290  0003DA  0E00               	movlw	high check_RFID@hexBuf
  1291  0003DC  2028               	addwfc	check_RFID@i+1,w,c
  1292  0003DE  6EDA               	movwf	fsr2h,c
  1293  0003E0  5027               	movf	check_RFID@i,w,c
  1294  0003E2  2411               	addwf	check_RFID@dataBuf,w,c
  1295  0003E4  6EE1               	movwf	fsr1l,c
  1296  0003E6  5028               	movf	check_RFID@i+1,w,c
  1297  0003E8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1298  0003EA  6EE2               	movwf	fsr1h,c
  1299  0003EC  50E7               	movf	indf1,w,c
  1300  0003EE  0FD0               	addlw	208
  1301  0003F0  D020               	goto	L4
  1302  0003F2                     l2441:
  1303  0003F2  5027               	movf	check_RFID@i,w,c
  1304  0003F4  2411               	addwf	check_RFID@dataBuf,w,c
  1305  0003F6  6ED9               	movwf	fsr2l,c
  1306  0003F8  5028               	movf	check_RFID@i+1,w,c
  1307  0003FA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1308  0003FC  6EDA               	movwf	fsr2h,c
  1309  0003FE  0E40               	movlw	64
  1310  000400  64DF               	cpfsgt	indf2,c
  1311  000402  D018               	goto	l2447
  1312  000404  5027               	movf	check_RFID@i,w,c
  1313  000406  2411               	addwf	check_RFID@dataBuf,w,c
  1314  000408  6ED9               	movwf	fsr2l,c
  1315  00040A  5028               	movf	check_RFID@i+1,w,c
  1316  00040C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1317  00040E  6EDA               	movwf	fsr2h,c
  1318  000410  0E47               	movlw	71
  1319  000412  60DF               	cpfslt	indf2,c
  1320  000414  D00F               	goto	l2447
  1321                           
  1322                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1323  000416  0E15               	movlw	low check_RFID@hexBuf
  1324  000418  2427               	addwf	check_RFID@i,w,c
  1325  00041A  6ED9               	movwf	fsr2l,c
  1326  00041C  0E00               	movlw	high check_RFID@hexBuf
  1327  00041E  2028               	addwfc	check_RFID@i+1,w,c
  1328  000420  6EDA               	movwf	fsr2h,c
  1329  000422  5027               	movf	check_RFID@i,w,c
  1330  000424  2411               	addwf	check_RFID@dataBuf,w,c
  1331  000426  6EE1               	movwf	fsr1l,c
  1332  000428  5028               	movf	check_RFID@i+1,w,c
  1333  00042A  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1334  00042C  6EE2               	movwf	fsr1h,c
  1335  00042E  50E7               	movf	indf1,w,c
  1336  000430  0FC9               	addlw	201
  1337  000432                     L4:
  1338  000432  6EDF               	movwf	indf2,c
  1339  000434                     l2447:
  1340                           
  1341                           ;RFID.c: 84:     }
  1342  000434  4A27               	infsnz	check_RFID@i,f,c
  1343  000436  2A28               	incf	check_RFID@i+1,f,c
  1344  000438  BE28               	btfsc	check_RFID@i+1,7,c
  1345  00043A  D7BA               	goto	l2435
  1346  00043C  5028               	movf	check_RFID@i+1,w,c
  1347  00043E  E104               	bnz	u1540
  1348  000440  0E0C               	movlw	12
  1349  000442  5C27               	subwf	check_RFID@i,w,c
  1350  000444  A0D8               	btfss	status,0,c
  1351  000446  D7B4               	goto	l2435
  1352  000448                     u1540:
  1353                           
  1354                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1355  000448  5015               	movf	check_RFID@hexBuf,w,c
  1356  00044A  A4D8               	btfss	status,2,c
  1357  00044C  D002               	goto	u1550
  1358  00044E  0E01               	movlw	1
  1359  000450  D001               	goto	u1560
  1360  000452                     u1550:
  1361  000452  0E00               	movlw	0
  1362  000454                     u1560:
  1363  000454  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1364  000456  6E21               	movwf	check_RFID@byte1,c
  1365                           
  1366                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1367  000458  5017               	movf	check_RFID@hexBuf+2,w,c
  1368  00045A  A4D8               	btfss	status,2,c
  1369  00045C  D002               	goto	u1570
  1370  00045E  0E01               	movlw	1
  1371  000460  D001               	goto	u1580
  1372  000462                     u1570:
  1373  000462  0E00               	movlw	0
  1374  000464                     u1580:
  1375  000464  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1376  000466  6E22               	movwf	check_RFID@byte2,c
  1377                           
  1378                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1379  000468  5019               	movf	check_RFID@hexBuf+4,w,c
  1380  00046A  A4D8               	btfss	status,2,c
  1381  00046C  D002               	goto	u1590
  1382  00046E  0E01               	movlw	1
  1383  000470  D001               	goto	u1600
  1384  000472                     u1590:
  1385  000472  0E00               	movlw	0
  1386  000474                     u1600:
  1387  000474  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1388  000476  6E23               	movwf	check_RFID@byte3,c
  1389                           
  1390                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1391  000478  501B               	movf	check_RFID@hexBuf+6,w,c
  1392  00047A  A4D8               	btfss	status,2,c
  1393  00047C  D002               	goto	u1610
  1394  00047E  0E01               	movlw	1
  1395  000480  D001               	goto	u1620
  1396  000482                     u1610:
  1397  000482  0E00               	movlw	0
  1398  000484                     u1620:
  1399  000484  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1400  000486  6E24               	movwf	check_RFID@byte4,c
  1401                           
  1402                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1403  000488  501D               	movf	check_RFID@hexBuf+8,w,c
  1404  00048A  A4D8               	btfss	status,2,c
  1405  00048C  D002               	goto	u1630
  1406  00048E  0E01               	movlw	1
  1407  000490  D001               	goto	u1640
  1408  000492                     u1630:
  1409  000492  0E00               	movlw	0
  1410  000494                     u1640:
  1411  000494  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1412  000496  6E25               	movwf	check_RFID@byte5,c
  1413                           
  1414                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1415  000498  501F               	movf	check_RFID@hexBuf+10,w,c
  1416  00049A  A4D8               	btfss	status,2,c
  1417  00049C  D002               	goto	u1650
  1418  00049E  0E01               	movlw	1
  1419  0004A0  D001               	goto	u1660
  1420  0004A2                     u1650:
  1421  0004A2  0E00               	movlw	0
  1422  0004A4                     u1660:
  1423  0004A4  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1424  0004A6  6E26               	movwf	check_RFID@checksum,c
  1425                           
  1426                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1427  0004A8  5021               	movf	check_RFID@byte1,w,c
  1428  0004AA  1822               	xorwf	check_RFID@byte2,w,c
  1429  0004AC  1823               	xorwf	check_RFID@byte3,w,c
  1430  0004AE  1824               	xorwf	check_RFID@byte4,w,c
  1431  0004B0  6E13               	movwf	??_check_RFID& (0+255),c
  1432  0004B2  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1433  0004B4  5026               	movf	check_RFID@checksum,w,c
  1434  0004B6  1825               	xorwf	check_RFID@byte5,w,c
  1435  0004B8  A4D8               	btfss	status,2,c
  1436  0004BA  D002               	goto	u1670
  1437  0004BC  0E01               	movlw	1
  1438  0004BE  D001               	goto	u1680
  1439  0004C0                     u1670:
  1440  0004C0  0E00               	movlw	0
  1441  0004C2                     u1680:
  1442  0004C2  1A13               	xorwf	??_check_RFID,f,c
  1443  0004C4  0E00               	movlw	0
  1444  0004C6  1A14               	xorwf	??_check_RFID+1,f,c
  1445  0004C8  5013               	movf	??_check_RFID,w,c
  1446  0004CA  1014               	iorwf	??_check_RFID+1,w,c
  1447  0004CC  B4D8               	btfsc	status,2,c
  1448  0004CE  D00A               	goto	l2457
  1449                           
  1450                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1451  0004D0  0E02               	movlw	2
  1452  0004D2  EC44  F008         	call	_SetLine
  1453                           
  1454                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1455  0004D6  0E41               	movlw	low STR_2
  1456  0004D8  6E0F               	movwf	LCD_String@string,c
  1457  0004DA  0E03               	movlw	high STR_2
  1458  0004DC  6E10               	movwf	LCD_String@string+1,c
  1459  0004DE  EC32  F007         	call	_LCD_String	;wreg free
  1460                           
  1461                           ;RFID.c: 99:     }
  1462  0004E2  0012               	return	
  1463  0004E4                     l2457:
  1464                           
  1465                           ;RFID.c: 102:         SetLine(2);
  1466  0004E4  0E02               	movlw	2
  1467  0004E6  EC44  F008         	call	_SetLine
  1468                           
  1469                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1470  0004EA  0E31               	movlw	low STR_3
  1471  0004EC  6E0F               	movwf	LCD_String@string,c
  1472  0004EE  0E03               	movlw	high STR_3
  1473  0004F0  6E10               	movwf	LCD_String@string+1,c
  1474  0004F2  EC32  F007         	call	_LCD_String	;wreg free
  1475  0004F6  0012               	return		;funcret
  1476  0004F8                     __end_of_check_RFID:
  1477                           	opt callstack 0
  1478                           
  1479 ;; *************** function _setup *****************
  1480 ;; Defined at:
  1481 ;;		line 45 in file "main.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2, status,0, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1495 ;;      Params:         0       0       0       0
  1496 ;;      Locals:         0       0       0       0
  1497 ;;      Temps:          0       0       0       0
  1498 ;;      Totals:         0       0       0       0
  1499 ;;Total ram usage:        0 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    7
  1502 ;; This function calls:
  1503 ;;		_initPWM
  1504 ;;		_init_LCD
  1505 ;;		_init_RFID
  1506 ;;		_init_sensor
  1507 ;; This function is called by:
  1508 ;;		_main
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text5
  1513  000FEE                     __ptext5:
  1514                           	opt callstack 0
  1515  000FEE                     _setup:
  1516                           	opt callstack 23
  1517                           
  1518                           ;main.c: 48:     OSCCON = 0x72;
  1519                           
  1520                           ;incstack = 0
  1521  000FEE  0E72               	movlw	114
  1522  000FF0  6ED3               	movwf	4051,c	;volatile
  1523  000FF2                     l55:
  1524  000FF2  A4D3               	btfss	4051,2,c	;volatile
  1525  000FF4  D7FE               	goto	l55
  1526                           
  1527                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1528  000FF6  8EF2               	bsf	4082,7,c	;volatile
  1529                           
  1530                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1531  000FF8  8CF2               	bsf	4082,6,c	;volatile
  1532                           
  1533                           ;main.c: 52:     RCONbits.IPEN=1;
  1534  000FFA  8ED0               	bsf	4048,7,c	;volatile
  1535                           
  1536                           ;main.c: 55:     init_LCD();
  1537  000FFC  EC97  F004         	call	_init_LCD	;wreg free
  1538                           
  1539                           ;main.c: 56:     init_RFID();
  1540  001000  EC81  F008         	call	_init_RFID	;wreg free
  1541                           
  1542                           ;main.c: 57:     init_sensor();
  1543  001004  ECA8  F008         	call	_init_sensor	;wreg free
  1544                           
  1545                           ;main.c: 58:     initPWM(199);
  1546  001008  0E00               	movlw	0
  1547  00100A  6E0C               	movwf	initPWM@PWMperiod+1,c
  1548  00100C  0EC7               	movlw	199
  1549  00100E  6E0B               	movwf	initPWM@PWMperiod,c
  1550  001010  EC8E  F008         	call	_initPWM	;wreg free
  1551                           
  1552                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1553  001014  9093               	bcf	3987,0,c	;volatile
  1554                           
  1555                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1556  001016  9493               	bcf	3987,2,c	;volatile
  1557                           
  1558                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1559  001018  8495               	bsf	3989,2,c	;volatile
  1560                           
  1561                           ;main.c: 66:     T0CON = 0b11000111;
  1562  00101A  0EC7               	movlw	199
  1563  00101C  6ED5               	movwf	4053,c	;volatile
  1564                           
  1565                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1566  00101E  8AF2               	bsf	4082,5,c	;volatile
  1567                           
  1568                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1569  001020  94F1               	bcf	4081,2,c	;volatile
  1570  001022  0012               	return		;funcret
  1571  001024                     __end_of_setup:
  1572                           	opt callstack 0
  1573                           
  1574 ;; *************** function _init_sensor *****************
  1575 ;; Defined at:
  1576 ;;		line 17 in file "signal_processing.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  throwaway       2    0        unsigned int 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1590 ;;      Params:         0       0       0       0
  1591 ;;      Locals:         2       0       0       0
  1592 ;;      Temps:          0       0       0       0
  1593 ;;      Totals:         2       0       0       0
  1594 ;;Total ram usage:        2 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    3
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_setup
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text6
  1605  001150                     __ptext6:
  1606                           	opt callstack 0
  1607  001150                     _init_sensor:
  1608                           	opt callstack 26
  1609                           
  1610                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1611                           
  1612                           ;incstack = 0
  1613  001150  0E01               	movlw	1
  1614  001152  6EB7               	movwf	4023,c	;volatile
  1615                           
  1616                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1617  001154  8492               	bsf	3986,2,c	;volatile
  1618                           
  1619                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1620  001156  0E00               	movlw	0
  1621  001158  6EB8               	movwf	4024,c	;volatile
  1622                           
  1623                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1624  00115A  0E00               	movlw	0
  1625  00115C  6EB9               	movwf	4025,c	;volatile
  1626                           
  1627                           ;signal_processing.c: 27:     CAP1CON = 0b01000111;
  1628  00115E  0E47               	movlw	71
  1629  001160  6E63               	movwf	3939,c	;volatile
  1630  001162  5069               	movf	3945,w,c	;volatile
  1631  001164  5068               	movf	3944,w,c	;volatile
  1632  001166  0012               	return		;funcret
  1633  001168                     __end_of_init_sensor:
  1634                           	opt callstack 0
  1635                           
  1636 ;; *************** function _init_RFID *****************
  1637 ;; Defined at:
  1638 ;;		line 13 in file "RFID.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1652 ;;      Params:         0       0       0       0
  1653 ;;      Locals:         0       0       0       0
  1654 ;;      Temps:          0       0       0       0
  1655 ;;      Totals:         0       0       0       0
  1656 ;;Total ram usage:        0 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    3
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_setup
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text7
  1667  001102                     __ptext7:
  1668                           	opt callstack 0
  1669  001102                     _init_RFID:
  1670                           	opt callstack 26
  1671                           
  1672                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1673                           
  1674                           ;incstack = 0
  1675  001102  8E94               	bsf	3988,7,c	;volatile
  1676                           
  1677                           ;RFID.c: 19:     SPBRG = 203;
  1678  001104  0ECB               	movlw	203
  1679  001106  6EAF               	movwf	4015,c	;volatile
  1680                           
  1681                           ;RFID.c: 20:     SPBRGH = 0;
  1682  001108  0E00               	movlw	0
  1683  00110A  6EB0               	movwf	4016,c	;volatile
  1684                           
  1685                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1686  00110C  86AA               	bsf	4010,3,c	;volatile
  1687                           
  1688                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1689  00110E  84AC               	bsf	4012,2,c	;volatile
  1690                           
  1691                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1692  001110  88AB               	bsf	4011,4,c	;volatile
  1693                           
  1694                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1695  001112  8EAB               	bsf	4011,7,c	;volatile
  1696                           
  1697                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1698  001114  8AAC               	bsf	4012,5,c	;volatile
  1699                           
  1700                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1701  001116  8A9D               	bsf	3997,5,c	;volatile
  1702                           
  1703                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1704  001118  8A9F               	bsf	3999,5,c	;volatile
  1705  00111A  0012               	return		;funcret
  1706  00111C                     __end_of_init_RFID:
  1707                           	opt callstack 0
  1708                           
  1709 ;; *************** function _init_LCD *****************
  1710 ;; Defined at:
  1711 ;;		line 56 in file "LCDIO.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1725 ;;      Params:         0       0       0       0
  1726 ;;      Locals:         0       0       0       0
  1727 ;;      Temps:          1       0       0       0
  1728 ;;      Totals:         1       0       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    6
  1732 ;; This function calls:
  1733 ;;		_LCDout
  1734 ;;		_SendLCD
  1735 ;; This function is called by:
  1736 ;;		_setup
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text8
  1741  00092E                     __ptext8:
  1742                           	opt callstack 0
  1743  00092E                     _init_LCD:
  1744                           	opt callstack 23
  1745                           
  1746                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1747                           
  1748                           ;incstack = 0
  1749  00092E  9094               	bcf	3988,0,c	;volatile
  1750                           
  1751                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1752  000930  9E92               	bcf	3986,7,c	;volatile
  1753                           
  1754                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1755  000932  9694               	bcf	3988,3,c	;volatile
  1756                           
  1757                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1758  000934  9095               	bcf	3989,0,c	;volatile
  1759                           
  1760                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1761  000936  9295               	bcf	3989,1,c	;volatile
  1762                           
  1763                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1764  000938  9C92               	bcf	3986,6,c	;volatile
  1765                           
  1766                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1767  00093A  908C               	bcf	3980,0,c	;volatile
  1768                           
  1769                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1770  00093C  928C               	bcf	3980,1,c	;volatile
  1771                           
  1772                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1773  00093E  968B               	bcf	3979,3,c	;volatile
  1774                           
  1775                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1776  000940  908B               	bcf	3979,0,c	;volatile
  1777                           
  1778                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1779  000942  9C89               	bcf	3977,6,c	;volatile
  1780                           
  1781                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1782  000944  9E89               	bcf	3977,7,c	;volatile
  1783                           
  1784                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1785  000946  0E27               	movlw	39
  1786  000948  6E0F               	movwf	??_init_LCD& (0+255),c
  1787  00094A  0EF5               	movlw	245
  1788  00094C                     u1897:
  1789  00094C  2EE8               	decfsz	wreg,f,c
  1790  00094E  D7FE               	bra	u1897
  1791  000950  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1792  000952  D7FC               	bra	u1897
  1793  000954  F000               	nop	
  1794                           
  1795                           ;LCDIO.c: 76:  LCDout(0b0011);
  1796  000956  0E03               	movlw	3
  1797  000958  ECC6  F006         	call	_LCDout
  1798                           
  1799                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1800  00095C  0E0D               	movlw	13
  1801  00095E  6E0F               	movwf	??_init_LCD& (0+255),c
  1802  000960  0EFC               	movlw	252
  1803  000962                     u1907:
  1804  000962  2EE8               	decfsz	wreg,f,c
  1805  000964  D7FE               	bra	u1907
  1806  000966  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1807  000968  D7FC               	bra	u1907
  1808                           
  1809                           ;LCDIO.c: 78:  LCDout(0b0011);
  1810  00096A  0E03               	movlw	3
  1811  00096C  ECC6  F006         	call	_LCDout
  1812                           
  1813                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1814  000970  0E85               	movlw	133
  1815  000972                     u1917:
  1816  000972  2EE8               	decfsz	wreg,f,c
  1817  000974  D7FE               	bra	u1917
  1818  000976  F000               	nop	
  1819                           
  1820                           ;LCDIO.c: 80:  LCDout(0b0011);
  1821  000978  0E03               	movlw	3
  1822  00097A  ECC6  F006         	call	_LCDout
  1823                           
  1824                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1825  00097E  0E21               	movlw	33
  1826  000980                     u1927:
  1827  000980  2EE8               	decfsz	wreg,f,c
  1828  000982  D7FE               	bra	u1927
  1829  000984  F000               	nop	
  1830                           
  1831                           ;LCDIO.c: 82:  LCDout(0b0010);
  1832  000986  0E02               	movlw	2
  1833  000988  ECC6  F006         	call	_LCDout
  1834                           
  1835                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1836  00098C  0E21               	movlw	33
  1837  00098E                     u1937:
  1838  00098E  2EE8               	decfsz	wreg,f,c
  1839  000990  D7FE               	bra	u1937
  1840  000992  F000               	nop	
  1841                           
  1842                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1843  000994  0E00               	movlw	0
  1844  000996  6E0D               	movwf	SendLCD@type,c
  1845  000998  0E28               	movlw	40
  1846  00099A  EC2C  F008         	call	_SendLCD
  1847                           
  1848                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1849  00099E  0E21               	movlw	33
  1850  0009A0                     u1947:
  1851  0009A0  2EE8               	decfsz	wreg,f,c
  1852  0009A2  D7FE               	bra	u1947
  1853  0009A4  F000               	nop	
  1854                           
  1855                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1856  0009A6  0E00               	movlw	0
  1857  0009A8  6E0D               	movwf	SendLCD@type,c
  1858  0009AA  0E08               	movlw	8
  1859  0009AC  EC2C  F008         	call	_SendLCD
  1860                           
  1861                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1862  0009B0  0E21               	movlw	33
  1863  0009B2                     u1957:
  1864  0009B2  2EE8               	decfsz	wreg,f,c
  1865  0009B4  D7FE               	bra	u1957
  1866  0009B6  F000               	nop	
  1867                           
  1868                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1869  0009B8  0E00               	movlw	0
  1870  0009BA  6E0D               	movwf	SendLCD@type,c
  1871  0009BC  0E01               	movlw	1
  1872  0009BE  EC2C  F008         	call	_SendLCD
  1873                           
  1874                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1875  0009C2  0E0D               	movlw	13
  1876  0009C4  6E0F               	movwf	??_init_LCD& (0+255),c
  1877  0009C6  0EFC               	movlw	252
  1878  0009C8                     u1967:
  1879  0009C8  2EE8               	decfsz	wreg,f,c
  1880  0009CA  D7FE               	bra	u1967
  1881  0009CC  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1882  0009CE  D7FC               	bra	u1967
  1883                           
  1884                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1885  0009D0  0E00               	movlw	0
  1886  0009D2  6E0D               	movwf	SendLCD@type,c
  1887  0009D4  0E06               	movlw	6
  1888  0009D6  EC2C  F008         	call	_SendLCD
  1889                           
  1890                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1891  0009DA  0E21               	movlw	33
  1892  0009DC                     u1977:
  1893  0009DC  2EE8               	decfsz	wreg,f,c
  1894  0009DE  D7FE               	bra	u1977
  1895  0009E0  F000               	nop	
  1896                           
  1897                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1898  0009E2  0E00               	movlw	0
  1899  0009E4  6E0D               	movwf	SendLCD@type,c
  1900  0009E6  0E0C               	movlw	12
  1901  0009E8  EC2C  F008         	call	_SendLCD
  1902                           
  1903                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1904  0009EC  0E21               	movlw	33
  1905  0009EE                     u1987:
  1906  0009EE  2EE8               	decfsz	wreg,f,c
  1907  0009F0  D7FE               	bra	u1987
  1908  0009F2  F000               	nop	
  1909  0009F4  0012               	return		;funcret
  1910  0009F6                     __end_of_init_LCD:
  1911                           	opt callstack 0
  1912                           
  1913 ;; *************** function _initPWM *****************
  1914 ;; Defined at:
  1915 ;;		line 5 in file "dc_motor.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;  PWMperiod       2   10[COMRAM] int 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1929 ;;      Params:         2       0       0       0
  1930 ;;      Locals:         0       0       0       0
  1931 ;;      Temps:          0       0       0       0
  1932 ;;      Totals:         2       0       0       0
  1933 ;;Total ram usage:        2 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    3
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_setup
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text9
  1944  00111C                     __ptext9:
  1945                           	opt callstack 0
  1946  00111C                     _initPWM:
  1947                           	opt callstack 26
  1948                           
  1949                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1950                           
  1951                           ;incstack = 0
  1952  00111C  0E00               	movlw	0
  1953  00111E  6E7F               	movwf	3967,c	;volatile
  1954                           
  1955                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1956  001120  0E80               	movlw	128
  1957  001122  6E7E               	movwf	3966,c	;volatile
  1958                           
  1959                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1960  001124  0E6F               	movlw	111
  1961  001126  6E6F               	movwf	3951,c	;volatile
  1962                           
  1963                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1964  001128  0E00               	movlw	0
  1965  00112A  6E6E               	movwf	3950,c	;volatile
  1966                           
  1967                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1968  00112C  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1969                           
  1970                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1971  001130  500C               	movf	initPWM@PWMperiod+1,w,c
  1972  001132  6E7A               	movwf	3962,c	;volatile
  1973  001134  0012               	return		;funcret
  1974  001136                     __end_of_initPWM:
  1975                           	opt callstack 0
  1976                           
  1977 ;; *************** function _scanForBeacon *****************
  1978 ;; Defined at:
  1979 ;;		line 18 in file "subroutines.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1982 ;;		 -> main@motorL(9), 
  1983 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1984 ;;		 -> main@motorR(9), 
  1985 ;;  speed           2   46[COMRAM] int 
  1986 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  1987 ;;		 -> movement_time(4), 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  i               2   57[COMRAM] int 
  1990 ;;  raw_data        2   54[COMRAM] unsigned int 
  1991 ;;  beacon_locat    1   56[COMRAM] unsigned char 
  1992 ;;  smoothed_dat    2   59[COMRAM] unsigned int 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      unsigned char 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2002 ;;      Params:         8       0       0       0
  2003 ;;      Locals:         7       0       0       0
  2004 ;;      Temps:          4       0       0       0
  2005 ;;      Totals:        19       0       0       0
  2006 ;;Total ram usage:       19 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    7
  2009 ;; This function calls:
  2010 ;;		_ClearLCD
  2011 ;;		_LCD_String
  2012 ;;		_SetLine
  2013 ;;		_classify_data
  2014 ;;		_stop
  2015 ;;		_turnRight
  2016 ;; This function is called by:
  2017 ;;		_main
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text10
  2022  0004F8                     __ptext10:
  2023                           	opt callstack 0
  2024  0004F8                     _scanForBeacon:
  2025                           	opt callstack 23
  2026                           
  2027                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 19:                             volatile unsigned long *time
      +                          );subroutines.c: 20: {;subroutines.c: 21:     turnRight(mL,mR,speed);
  2028                           
  2029                           ;incstack = 0
  2030  0004F8  C02B  F022         	movff	scanForBeacon@mL,turnRight@mL
  2031  0004FC  C02C  F023         	movff	scanForBeacon@mL+1,turnRight@mL+1
  2032  000500  C02D  F024         	movff	scanForBeacon@mR,turnRight@mR
  2033  000504  C02E  F025         	movff	scanForBeacon@mR+1,turnRight@mR+1
  2034  000508  C02F  F026         	movff	scanForBeacon@speed,turnRight@max_power
  2035  00050C  C030  F027         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  2036  000510  ECC5  F005         	call	_turnRight	;wreg free
  2037                           
  2038                           ;subroutines.c: 22:     ClearLCD();
  2039  000514  EC9B  F008         	call	_ClearLCD	;wreg free
  2040                           
  2041                           ;subroutines.c: 23:     LCD_String("SEARCHING");
  2042  000518  0E9A               	movlw	low STR_4
  2043  00051A  6E0F               	movwf	LCD_String@string,c
  2044  00051C  0E03               	movlw	high STR_4
  2045  00051E  6E10               	movwf	LCD_String@string+1,c
  2046  000520  EC32  F007         	call	_LCD_String	;wreg free
  2047                           
  2048                           ;subroutines.c: 26:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  2049  000524  5068               	movf	3944,w,c	;volatile
  2050  000526  CF69 F033          	movff	3945,??_scanForBeacon	;volatile
  2051  00052A  6A34               	clrf	(??_scanForBeacon+1)& (0+255),c
  2052  00052C  C033  F034         	movff	??_scanForBeacon,??_scanForBeacon+1
  2053  000530  6A33               	clrf	??_scanForBeacon,c
  2054  000532  1033               	iorwf	??_scanForBeacon,w,c
  2055  000534  6E3C               	movwf	scanForBeacon@smoothed_data,c
  2056  000536  5034               	movf	??_scanForBeacon+1,w,c
  2057  000538  6E3D               	movwf	scanForBeacon@smoothed_data+1,c
  2058  00053A                     l2557:
  2059                           
  2060                           ;subroutines.c: 30:     {;subroutines.c: 32:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2061  00053A  5068               	movf	3944,w,c	;volatile
  2062  00053C  CF69 F033          	movff	3945,??_scanForBeacon	;volatile
  2063  000540  6A34               	clrf	(??_scanForBeacon+1)& (0+255),c
  2064  000542  C033  F034         	movff	??_scanForBeacon,??_scanForBeacon+1
  2065  000546  6A33               	clrf	??_scanForBeacon,c
  2066  000548  1033               	iorwf	??_scanForBeacon,w,c
  2067  00054A  6E37               	movwf	scanForBeacon@raw_data,c
  2068  00054C  5034               	movf	??_scanForBeacon+1,w,c
  2069  00054E  6E38               	movwf	scanForBeacon@raw_data+1,c
  2070                           
  2071                           ;subroutines.c: 35:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  2072  000550  C037  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2073  000554  C038  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2074  000558  0E3C               	movlw	low scanForBeacon@smoothed_data
  2075  00055A  6E0D               	movwf	classify_data@smoothed,c
  2076  00055C  0E00               	movlw	high scanForBeacon@smoothed_data
  2077  00055E  6E0E               	movwf	classify_data@smoothed+1,c
  2078  000560  ECFB  F004         	call	_classify_data	;wreg free
  2079  000564  6E39               	movwf	scanForBeacon@beacon_location,c
  2080                           
  2081                           ;subroutines.c: 38:         if(beacon_location == 1)
  2082  000566  0439               	decf	scanForBeacon@beacon_location,w,c
  2083  000568  A4D8               	btfss	status,2,c
  2084  00056A  D00A               	goto	l2571
  2085                           
  2086                           ;subroutines.c: 39:         {;subroutines.c: 40:             *time = 0;
  2087  00056C  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2088  000570  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2089  000574  6ADE               	clrf	postinc2,c
  2090  000576  6ADE               	clrf	postinc2,c
  2091  000578  6ADE               	clrf	postinc2,c
  2092  00057A  6ADD               	clrf	postdec2,c
  2093                           
  2094                           ;subroutines.c: 41:             return 1;
  2095  00057C  0E01               	movlw	1
  2096  00057E  0012               	return	
  2097  000580                     l2571:
  2098  000580  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2099  000584  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2100  000588  0E03               	movlw	3
  2101  00058A  50DB               	movf	plusw2,w,c
  2102  00058C  E109               	bnz	u1760
  2103  00058E  0E02               	movlw	2
  2104  000590  50DB               	movf	plusw2,w,c
  2105  000592  E106               	bnz	u1760
  2106  000594  0E62               	movlw	98
  2107  000596  5CDE               	subwf	postinc2,w,c
  2108  000598  0E02               	movlw	2
  2109  00059A  58DE               	subwfb	postinc2,w,c
  2110  00059C  A0D8               	btfss	status,0,c
  2111  00059E  D7CD               	goto	l2557
  2112  0005A0                     u1760:
  2113                           
  2114                           ;subroutines.c: 45:         {;subroutines.c: 46:             *time = 0;
  2115  0005A0  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2116  0005A4  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2117  0005A8  6ADE               	clrf	postinc2,c
  2118  0005AA  6ADE               	clrf	postinc2,c
  2119  0005AC  6ADE               	clrf	postinc2,c
  2120  0005AE  6ADD               	clrf	postdec2,c
  2121                           
  2122                           ;subroutines.c: 47:             ClearLCD();
  2123  0005B0  EC9B  F008         	call	_ClearLCD	;wreg free
  2124                           
  2125                           ;subroutines.c: 48:             LCD_String("BOMB NOT FOUND");
  2126  0005B4  0E60               	movlw	low STR_5
  2127  0005B6  6E0F               	movwf	LCD_String@string,c
  2128  0005B8  0E03               	movlw	high STR_5
  2129  0005BA  6E10               	movwf	LCD_String@string+1,c
  2130  0005BC  EC32  F007         	call	_LCD_String	;wreg free
  2131                           
  2132                           ;subroutines.c: 49:             SetLine(2);
  2133  0005C0  0E02               	movlw	2
  2134  0005C2  EC44  F008         	call	_SetLine
  2135                           
  2136                           ;subroutines.c: 50:             LCD_String("RESETTING ROBOT");
  2137  0005C6  0E21               	movlw	low STR_6
  2138  0005C8  6E0F               	movwf	LCD_String@string,c
  2139  0005CA  0E03               	movlw	high STR_6
  2140  0005CC  6E10               	movwf	LCD_String@string+1,c
  2141  0005CE  EC32  F007         	call	_LCD_String	;wreg free
  2142                           
  2143                           ;subroutines.c: 51:             stop(mL,mR,speed);
  2144  0005D2  C02B  F022         	movff	scanForBeacon@mL,stop@mL
  2145  0005D6  C02C  F023         	movff	scanForBeacon@mL+1,stop@mL+1
  2146  0005DA  C02D  F024         	movff	scanForBeacon@mR,stop@mR
  2147  0005DE  C02E  F025         	movff	scanForBeacon@mR+1,stop@mR+1
  2148  0005E2  C02F  F026         	movff	scanForBeacon@speed,stop@initial_speed
  2149  0005E6  C030  F027         	movff	scanForBeacon@speed+1,stop@initial_speed+1
  2150  0005EA  EC61  F007         	call	_stop	;wreg free
  2151                           
  2152                           ;subroutines.c: 52:             for(int i=0; i<20;i++)
  2153  0005EE  0E00               	movlw	0
  2154  0005F0  6E3B               	movwf	scanForBeacon@i+1,c
  2155  0005F2  0E00               	movlw	0
  2156  0005F4  6E3A               	movwf	scanForBeacon@i,c
  2157  0005F6                     l2591:
  2158                           
  2159                           ;subroutines.c: 53:             {;subroutines.c: 54:                 _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
  2160  0005F6  0E02               	movlw	2
  2161  0005F8  6E34               	movwf	(??_scanForBeacon+1)& (0+255),c
  2162  0005FA  0E04               	movlw	4
  2163  0005FC  6E33               	movwf	??_scanForBeacon& (0+255),c
  2164  0005FE  0EBA               	movlw	186
  2165  000600                     u1997:
  2166  000600  2EE8               	decfsz	wreg,f,c
  2167  000602  D7FE               	bra	u1997
  2168  000604  2E33               	decfsz	??_scanForBeacon& (0+255),f,c
  2169  000606  D7FC               	bra	u1997
  2170  000608  2E34               	decfsz	(??_scanForBeacon+1)& (0+255),f,c
  2171  00060A  D7FA               	bra	u1997
  2172  00060C  D000               	nop2	
  2173                           
  2174                           ;subroutines.c: 55:             }
  2175  00060E  4A3A               	infsnz	scanForBeacon@i,f,c
  2176  000610  2A3B               	incf	scanForBeacon@i+1,f,c
  2177  000612  BE3B               	btfsc	scanForBeacon@i+1,7,c
  2178  000614  D7F0               	goto	l2591
  2179  000616  503B               	movf	scanForBeacon@i+1,w,c
  2180  000618  E104               	bnz	u1770
  2181  00061A  0E14               	movlw	20
  2182  00061C  5C3A               	subwf	scanForBeacon@i,w,c
  2183  00061E  A0D8               	btfss	status,0,c
  2184  000620  D7EA               	goto	l2591
  2185  000622                     u1770:
  2186  000622  00FF               	reset		;# 
  2187  000624  D78A               	goto	l2557
  2188  000626                     __end_of_scanForBeacon:
  2189                           	opt callstack 0
  2190                           
  2191 ;; *************** function _turnRight *****************
  2192 ;; Defined at:
  2193 ;;		line 53 in file "dc_motor.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2196 ;;		 -> main@motorL(9), 
  2197 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2198 ;;		 -> main@motorR(9), 
  2199 ;;  max_power       2   37[COMRAM] int 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  i               2   40[COMRAM] int 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  1    wreg      void 
  2204 ;; Registers used:
  2205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2211 ;;      Params:         6       0       0       0
  2212 ;;      Locals:         2       0       0       0
  2213 ;;      Temps:          1       0       0       0
  2214 ;;      Totals:         9       0       0       0
  2215 ;;Total ram usage:        9 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    5
  2218 ;; This function calls:
  2219 ;;		_setMotorPWM
  2220 ;; This function is called by:
  2221 ;;		_scanForBeacon
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text11
  2226  000B8A                     __ptext11:
  2227                           	opt callstack 0
  2228  000B8A                     _turnRight:
  2229                           	opt callstack 24
  2230                           
  2231                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 1;
  2232                           
  2233                           ;incstack = 0
  2234  000B8A  EE20 F001          	lfsr	2,1
  2235  000B8E  5022               	movf	turnRight@mL,w,c
  2236  000B90  26D9               	addwf	fsr2l,f,c
  2237  000B92  5023               	movf	turnRight@mL+1,w,c
  2238  000B94  22DA               	addwfc	fsr2h,f,c
  2239  000B96  0E01               	movlw	1
  2240  000B98  6EDF               	movwf	indf2,c
  2241                           
  2242                           ;dc_motor.c: 57:     mR->direction = 0;
  2243  000B9A  EE20 F001          	lfsr	2,1
  2244  000B9E  5024               	movf	turnRight@mR,w,c
  2245  000BA0  26D9               	addwf	fsr2l,f,c
  2246  000BA2  5025               	movf	turnRight@mR+1,w,c
  2247  000BA4  22DA               	addwfc	fsr2h,f,c
  2248  000BA6  0E00               	movlw	0
  2249  000BA8  6EDF               	movwf	indf2,c
  2250                           
  2251                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2252  000BAA  0E00               	movlw	0
  2253  000BAC  6E2A               	movwf	turnRight@i+1,c
  2254  000BAE  0E00               	movlw	0
  2255  000BB0  6E29               	movwf	turnRight@i,c
  2256  000BB2  D021               	goto	l2395
  2257  000BB4                     l2385:
  2258                           
  2259                           ;dc_motor.c: 60:         mL->power = i;
  2260  000BB4  C022  FFD9         	movff	turnRight@mL,fsr2l
  2261  000BB8  C023  FFDA         	movff	turnRight@mL+1,fsr2h
  2262  000BBC  C029  FFDF         	movff	turnRight@i,indf2
  2263                           
  2264                           ;dc_motor.c: 61:         mR->power = i;
  2265  000BC0  C024  FFD9         	movff	turnRight@mR,fsr2l
  2266  000BC4  C025  FFDA         	movff	turnRight@mR+1,fsr2h
  2267  000BC8  C029  FFDF         	movff	turnRight@i,indf2
  2268                           
  2269                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2270  000BCC  C022  F019         	movff	turnRight@mL,setMotorPWM@m
  2271  000BD0  C023  F01A         	movff	turnRight@mL+1,setMotorPWM@m+1
  2272  000BD4  EC13  F003         	call	_setMotorPWM	;wreg free
  2273                           
  2274                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2275  000BD8  C024  F019         	movff	turnRight@mR,setMotorPWM@m
  2276  000BDC  C025  F01A         	movff	turnRight@mR+1,setMotorPWM@m+1
  2277  000BE0  EC13  F003         	call	_setMotorPWM	;wreg free
  2278                           
  2279                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2280  000BE4  0E03               	movlw	3
  2281  000BE6  6E28               	movwf	??_turnRight& (0+255),c
  2282  000BE8  0E98               	movlw	152
  2283  000BEA                     u2007:
  2284  000BEA  2EE8               	decfsz	wreg,f,c
  2285  000BEC  D7FE               	bra	u2007
  2286  000BEE  2E28               	decfsz	??_turnRight& (0+255),f,c
  2287  000BF0  D7FC               	bra	u2007
  2288                           
  2289                           ;dc_motor.c: 66:     }
  2290  000BF2  4A29               	infsnz	turnRight@i,f,c
  2291  000BF4  2A2A               	incf	turnRight@i+1,f,c
  2292  000BF6                     l2395:
  2293  000BF6  5026               	movf	turnRight@max_power,w,c
  2294  000BF8  5C29               	subwf	turnRight@i,w,c
  2295  000BFA  502A               	movf	turnRight@i+1,w,c
  2296  000BFC  0A80               	xorlw	128
  2297  000BFE  6E28               	movwf	??_turnRight& (0+255),c
  2298  000C00  5027               	movf	turnRight@max_power+1,w,c
  2299  000C02  0A80               	xorlw	128
  2300  000C04  5828               	subwfb	??_turnRight& (0+255),w,c
  2301  000C06  B0D8               	btfsc	status,0,c
  2302  000C08  0012               	return	
  2303  000C0A  D7D4               	goto	l2385
  2304  000C0C                     __end_of_turnRight:
  2305                           	opt callstack 0
  2306                           
  2307 ;; *************** function _stop *****************
  2308 ;; Defined at:
  2309 ;;		line 40 in file "dc_motor.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2312 ;;		 -> main@motorL(9), 
  2313 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2314 ;;		 -> main@motorR(9), 
  2315 ;;  initial_spee    2   37[COMRAM] int 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  i               2   40[COMRAM] int 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2327 ;;      Params:         6       0       0       0
  2328 ;;      Locals:         2       0       0       0
  2329 ;;      Temps:          1       0       0       0
  2330 ;;      Totals:         9       0       0       0
  2331 ;;Total ram usage:        9 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    5
  2334 ;; This function calls:
  2335 ;;		_setMotorPWM
  2336 ;; This function is called by:
  2337 ;;		_scanForBeacon
  2338 ;;		_stopAndDisplay
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text12
  2343  000EC2                     __ptext12:
  2344                           	opt callstack 0
  2345  000EC2                     _stop:
  2346                           	opt callstack 24
  2347                           
  2348                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2349                           
  2350                           ;incstack = 0
  2351  000EC2  C026  F029         	movff	stop@initial_speed,stop@i
  2352  000EC6  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  2353  000ECA                     l2365:
  2354  000ECA  BE2A               	btfsc	stop@i+1,7,c
  2355  000ECC  0012               	return	
  2356  000ECE  502A               	movf	stop@i+1,w,c
  2357  000ED0  E103               	bnz	l2369
  2358  000ED2  0429               	decf	stop@i,w,c
  2359  000ED4  A0D8               	btfss	status,0,c
  2360  000ED6  0012               	return	
  2361  000ED8                     l2369:
  2362                           
  2363                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2364  000ED8  C022  FFD9         	movff	stop@mL,fsr2l
  2365  000EDC  C023  FFDA         	movff	stop@mL+1,fsr2h
  2366  000EE0  C029  FFDF         	movff	stop@i,indf2
  2367                           
  2368                           ;dc_motor.c: 45:         mR->power = i;
  2369  000EE4  C024  FFD9         	movff	stop@mR,fsr2l
  2370  000EE8  C025  FFDA         	movff	stop@mR+1,fsr2h
  2371  000EEC  C029  FFDF         	movff	stop@i,indf2
  2372                           
  2373                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2374  000EF0  C022  F019         	movff	stop@mL,setMotorPWM@m
  2375  000EF4  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  2376  000EF8  EC13  F003         	call	_setMotorPWM	;wreg free
  2377                           
  2378                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2379  000EFC  C024  F019         	movff	stop@mR,setMotorPWM@m
  2380  000F00  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  2381  000F04  EC13  F003         	call	_setMotorPWM	;wreg free
  2382                           
  2383                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2384  000F08  0E03               	movlw	3
  2385  000F0A  6E28               	movwf	??_stop& (0+255),c
  2386  000F0C  0E98               	movlw	152
  2387  000F0E                     u2017:
  2388  000F0E  2EE8               	decfsz	wreg,f,c
  2389  000F10  D7FE               	bra	u2017
  2390  000F12  2E28               	decfsz	??_stop& (0+255),f,c
  2391  000F14  D7FC               	bra	u2017
  2392                           
  2393                           ;dc_motor.c: 49:     }
  2394  000F16  0629               	decf	stop@i,f,c
  2395  000F18  A0D8               	btfss	status,0,c
  2396  000F1A  062A               	decf	stop@i+1,f,c
  2397  000F1C  D7D6               	goto	l2365
  2398  000F1E                     __end_of_stop:
  2399                           	opt callstack 0
  2400                           
  2401 ;; *************** function _classify_data *****************
  2402 ;; Defined at:
  2403 ;;		line 36 in file "signal_processing.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  raw_data        2   10[COMRAM] unsigned int 
  2406 ;;  smoothed        2   12[COMRAM] PTR unsigned int 
  2407 ;;		 -> scanForBeacon@smoothed_data(2), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  filtered        2   20[COMRAM] unsigned int 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      unsigned char 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2419 ;;      Params:         4       0       0       0
  2420 ;;      Locals:         2       0       0       0
  2421 ;;      Temps:          6       0       0       0
  2422 ;;      Totals:        12       0       0       0
  2423 ;;Total ram usage:       12 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    3
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_scanForBeacon
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text13
  2434  0009F6                     __ptext13:
  2435                           	opt callstack 0
  2436  0009F6                     _classify_data:
  2437                           	opt callstack 26
  2438                           
  2439                           ;signal_processing.c: 36: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 37: {;signal_processing.c: 40:     *smoothed = *smoothed + ((ra
      +                          w_data - *smoothed) >> 3);
  2440                           
  2441                           ;incstack = 0
  2442  0009F6  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2443  0009FA  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2444  0009FE  CFDE F00F          	movff	postinc2,??_classify_data
  2445  000A02  CFDD F010          	movff	postdec2,??_classify_data+1
  2446  000A06  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2447  000A0A  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2448  000A0E  CFDE F011          	movff	postinc2,??_classify_data+2
  2449  000A12  CFDD F012          	movff	postdec2,??_classify_data+3
  2450  000A16  C00B  F013         	movff	classify_data@raw_data,??_classify_data+4
  2451  000A1A  C00C  F014         	movff	classify_data@raw_data+1,??_classify_data+5
  2452  000A1E  5011               	movf	??_classify_data+2,w,c
  2453  000A20  5E13               	subwf	??_classify_data+4,f,c
  2454  000A22  5012               	movf	??_classify_data+3,w,c
  2455  000A24  5A14               	subwfb	??_classify_data+5,f,c
  2456  000A26  90D8               	bcf	status,0,c
  2457  000A28  3214               	rrcf	??_classify_data+5,f,c
  2458  000A2A  3213               	rrcf	??_classify_data+4,f,c
  2459  000A2C  90D8               	bcf	status,0,c
  2460  000A2E  3214               	rrcf	??_classify_data+5,f,c
  2461  000A30  3213               	rrcf	??_classify_data+4,f,c
  2462  000A32  90D8               	bcf	status,0,c
  2463  000A34  3214               	rrcf	??_classify_data+5,f,c
  2464  000A36  3213               	rrcf	??_classify_data+4,f,c
  2465  000A38  500F               	movf	??_classify_data,w,c
  2466  000A3A  2613               	addwf	??_classify_data+4,f,c
  2467  000A3C  5010               	movf	??_classify_data+1,w,c
  2468  000A3E  2214               	addwfc	??_classify_data+5,f,c
  2469  000A40  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2470  000A44  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2471  000A48  C013  FFDE         	movff	??_classify_data+4,postinc2
  2472  000A4C  C014  FFDD         	movff	??_classify_data+5,postdec2
  2473                           
  2474                           ;signal_processing.c: 41:     unsigned int filtered = raw_data - *smoothed;
  2475  000A50  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2476  000A54  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2477  000A58  CFDE F00F          	movff	postinc2,??_classify_data
  2478  000A5C  CFDD F010          	movff	postdec2,??_classify_data+1
  2479  000A60  500F               	movf	??_classify_data,w,c
  2480  000A62  5C0B               	subwf	classify_data@raw_data,w,c
  2481  000A64  6E15               	movwf	classify_data@filtered,c
  2482  000A66  5010               	movf	??_classify_data+1,w,c
  2483  000A68  580C               	subwfb	classify_data@raw_data+1,w,c
  2484  000A6A  6E16               	movwf	classify_data@filtered+1,c
  2485                           
  2486                           ;signal_processing.c: 44:     if(filtered >= 20)
  2487  000A6C  5016               	movf	classify_data@filtered+1,w,c
  2488  000A6E  E104               	bnz	u1710
  2489  000A70  0E14               	movlw	20
  2490  000A72  5C15               	subwf	classify_data@filtered,w,c
  2491  000A74  A0D8               	btfss	status,0,c
  2492  000A76  D002               	goto	l2485
  2493  000A78                     u1710:
  2494                           
  2495                           ;signal_processing.c: 45:     {;signal_processing.c: 46:         return 1;
  2496  000A78  0E01               	movlw	1
  2497  000A7A  0012               	return	
  2498  000A7C                     l2485:
  2499                           
  2500                           ;signal_processing.c: 49:     {;signal_processing.c: 50:         return 0;
  2501  000A7C  0E00               	movlw	0
  2502  000A7E  0012               	return		;funcret
  2503  000A80                     __end_of_classify_data:
  2504                           	opt callstack 0
  2505                           
  2506 ;; *************** function _SetLine *****************
  2507 ;; Defined at:
  2508 ;;		line 107 in file "LCDIO.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  line            1    wreg     unsigned char 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  line            1   14[COMRAM] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       0       0       0
  2523 ;;      Locals:         1       0       0       0
  2524 ;;      Temps:          0       0       0       0
  2525 ;;      Totals:         1       0       0       0
  2526 ;;Total ram usage:        1 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    6
  2529 ;; This function calls:
  2530 ;;		_SendLCD
  2531 ;; This function is called by:
  2532 ;;		_check_RFID
  2533 ;;		_display_RFID
  2534 ;;		_scanForBeacon
  2535 ;;		_waitForInput
  2536 ;;		_debug
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text14
  2541  001088                     __ptext14:
  2542                           	opt callstack 0
  2543  001088                     _SetLine:
  2544                           	opt callstack 23
  2545                           
  2546                           ;incstack = 0
  2547                           ;SetLine@line stored from wreg
  2548  001088  6E0F               	movwf	SetLine@line,c
  2549                           
  2550                           ;LCDIO.c: 109:     if(line == 1){
  2551  00108A  040F               	decf	SetLine@line,w,c
  2552  00108C  A4D8               	btfss	status,2,c
  2553  00108E  D005               	goto	l2297
  2554                           
  2555                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2556  001090  0E00               	movlw	0
  2557  001092  6E0D               	movwf	SendLCD@type,c
  2558  001094  0E80               	movlw	128
  2559  001096  EC2C  F008         	call	_SendLCD
  2560  00109A                     l2297:
  2561                           
  2562                           ;LCDIO.c: 113:     if(line == 2){
  2563  00109A  0E02               	movlw	2
  2564  00109C  180F               	xorwf	SetLine@line,w,c
  2565  00109E  A4D8               	btfss	status,2,c
  2566  0010A0  D005               	goto	l2301
  2567                           
  2568                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2569  0010A2  0E00               	movlw	0
  2570  0010A4  6E0D               	movwf	SendLCD@type,c
  2571  0010A6  0EC0               	movlw	192
  2572  0010A8  EC2C  F008         	call	_SendLCD
  2573  0010AC                     l2301:
  2574                           
  2575                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2576  0010AC  0E21               	movlw	33
  2577  0010AE                     u2027:
  2578  0010AE  2EE8               	decfsz	wreg,f,c
  2579  0010B0  D7FE               	bra	u2027
  2580  0010B2  F000               	nop	
  2581  0010B4  0012               	return		;funcret
  2582  0010B6                     __end_of_SetLine:
  2583                           	opt callstack 0
  2584                           
  2585 ;; *************** function _returnHome *****************
  2586 ;; Defined at:
  2587 ;;		line 89 in file "subroutines.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2590 ;;		 -> main@motorL(9), 
  2591 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2592 ;;		 -> main@motorR(9), 
  2593 ;;  speed           2   46[COMRAM] int 
  2594 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2595 ;;		 -> movement_time(4), 
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;		None
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      unsigned char 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2607 ;;      Params:         8       0       0       0
  2608 ;;      Locals:         0       0       0       0
  2609 ;;      Temps:          4       0       0       0
  2610 ;;      Totals:        12       0       0       0
  2611 ;;Total ram usage:       12 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    7
  2614 ;; This function calls:
  2615 ;;		_ClearLCD
  2616 ;;		_LCD_String
  2617 ;;		_moveBackward
  2618 ;; This function is called by:
  2619 ;;		_main
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text15
  2624  000F6A                     __ptext15:
  2625                           	opt callstack 0
  2626  000F6A                     _returnHome:
  2627                           	opt callstack 23
  2628                           
  2629                           ;subroutines.c: 89: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 90:                             volatile unsigned long *time);s
      +                          ubroutines.c: 91: {;subroutines.c: 92:     moveBackward(mL,mR,speed);
  2630                           
  2631                           ;incstack = 0
  2632  000F6A  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2633  000F6E  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2634  000F72  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2635  000F76  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2636  000F7A  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2637  000F7E  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2638  000F82  EC06  F006         	call	_moveBackward	;wreg free
  2639                           
  2640                           ;subroutines.c: 94:     ClearLCD();
  2641  000F86  EC9B  F008         	call	_ClearLCD	;wreg free
  2642                           
  2643                           ;subroutines.c: 95:     LCD_String("RETURNING HOME");
  2644  000F8A  0E6F               	movlw	low STR_8
  2645  000F8C  6E0F               	movwf	LCD_String@string,c
  2646  000F8E  0E03               	movlw	high STR_8
  2647  000F90  6E10               	movwf	LCD_String@string+1,c
  2648  000F92  EC32  F007         	call	_LCD_String	;wreg free
  2649  000F96                     l2623:
  2650  000F96  C031  FFD9         	movff	returnHome@time,fsr2l
  2651  000F9A  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2652  000F9E  50DE               	movf	postinc2,w,c
  2653  000FA0  10DE               	iorwf	postinc2,w,c
  2654  000FA2  10DE               	iorwf	postinc2,w,c
  2655  000FA4  10DE               	iorwf	postinc2,w,c
  2656  000FA6  A4D8               	btfss	status,2,c
  2657  000FA8  D7F6               	goto	l2623
  2658                           
  2659                           ;subroutines.c: 97:     return 3;
  2660  000FAA  0E03               	movlw	3
  2661  000FAC  0012               	return		;funcret
  2662  000FAE                     __end_of_returnHome:
  2663                           	opt callstack 0
  2664                           
  2665 ;; *************** function _moveBackward *****************
  2666 ;; Defined at:
  2667 ;;		line 85 in file "dc_motor.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2670 ;;		 -> main@motorL(9), 
  2671 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2672 ;;		 -> main@motorR(9), 
  2673 ;;  max_power       2   37[COMRAM] int 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  i               2   40[COMRAM] int 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2685 ;;      Params:         6       0       0       0
  2686 ;;      Locals:         2       0       0       0
  2687 ;;      Temps:          1       0       0       0
  2688 ;;      Totals:         9       0       0       0
  2689 ;;Total ram usage:        9 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    5
  2692 ;; This function calls:
  2693 ;;		_setMotorPWM
  2694 ;; This function is called by:
  2695 ;;		_returnHome
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text16
  2700  000C0C                     __ptext16:
  2701                           	opt callstack 0
  2702  000C0C                     _moveBackward:
  2703                           	opt callstack 24
  2704                           
  2705                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2706                           
  2707                           ;incstack = 0
  2708  000C0C  EE20 F001          	lfsr	2,1
  2709  000C10  5022               	movf	moveBackward@mL,w,c
  2710  000C12  26D9               	addwf	fsr2l,f,c
  2711  000C14  5023               	movf	moveBackward@mL+1,w,c
  2712  000C16  22DA               	addwfc	fsr2h,f,c
  2713  000C18  0E00               	movlw	0
  2714  000C1A  6EDF               	movwf	indf2,c
  2715                           
  2716                           ;dc_motor.c: 88:     mR->direction = 0;
  2717  000C1C  EE20 F001          	lfsr	2,1
  2718  000C20  5024               	movf	moveBackward@mR,w,c
  2719  000C22  26D9               	addwf	fsr2l,f,c
  2720  000C24  5025               	movf	moveBackward@mR+1,w,c
  2721  000C26  22DA               	addwfc	fsr2h,f,c
  2722  000C28  0E00               	movlw	0
  2723  000C2A  6EDF               	movwf	indf2,c
  2724                           
  2725                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2726  000C2C  0E00               	movlw	0
  2727  000C2E  6E2A               	movwf	moveBackward@i+1,c
  2728  000C30  0E00               	movlw	0
  2729  000C32  6E29               	movwf	moveBackward@i,c
  2730  000C34  D021               	goto	l2427
  2731  000C36                     l2417:
  2732                           
  2733                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2734  000C36  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2735  000C3A  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2736  000C3E  C029  FFDF         	movff	moveBackward@i,indf2
  2737                           
  2738                           ;dc_motor.c: 92:         mR->power = i;
  2739  000C42  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2740  000C46  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2741  000C4A  C029  FFDF         	movff	moveBackward@i,indf2
  2742                           
  2743                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2744  000C4E  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2745  000C52  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2746  000C56  EC13  F003         	call	_setMotorPWM	;wreg free
  2747                           
  2748                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2749  000C5A  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2750  000C5E  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2751  000C62  EC13  F003         	call	_setMotorPWM	;wreg free
  2752                           
  2753                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2754  000C66  0E03               	movlw	3
  2755  000C68  6E28               	movwf	??_moveBackward& (0+255),c
  2756  000C6A  0E98               	movlw	152
  2757  000C6C                     u2037:
  2758  000C6C  2EE8               	decfsz	wreg,f,c
  2759  000C6E  D7FE               	bra	u2037
  2760  000C70  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2761  000C72  D7FC               	bra	u2037
  2762                           
  2763                           ;dc_motor.c: 96:     }
  2764  000C74  4A29               	infsnz	moveBackward@i,f,c
  2765  000C76  2A2A               	incf	moveBackward@i+1,f,c
  2766  000C78                     l2427:
  2767  000C78  5026               	movf	moveBackward@max_power,w,c
  2768  000C7A  5C29               	subwf	moveBackward@i,w,c
  2769  000C7C  502A               	movf	moveBackward@i+1,w,c
  2770  000C7E  0A80               	xorlw	128
  2771  000C80  6E28               	movwf	??_moveBackward& (0+255),c
  2772  000C82  5027               	movf	moveBackward@max_power+1,w,c
  2773  000C84  0A80               	xorlw	128
  2774  000C86  5828               	subwfb	??_moveBackward& (0+255),w,c
  2775  000C88  B0D8               	btfsc	status,0,c
  2776  000C8A  0012               	return	
  2777  000C8C  D7D4               	goto	l2417
  2778  000C8E                     __end_of_moveBackward:
  2779                           	opt callstack 0
  2780                           
  2781 ;; *************** function _moveToBeacon *****************
  2782 ;; Defined at:
  2783 ;;		line 63 in file "subroutines.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2786 ;;		 -> main@motorL(9), 
  2787 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2788 ;;		 -> main@motorR(9), 
  2789 ;;  speed           2   46[COMRAM] int 
  2790 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2791 ;;		 -> movement_time(4), 
  2792 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2793 ;;		 -> NULL(0), RFID_flag(1), 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;		None
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      unsigned char 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2805 ;;      Params:        10       0       0       0
  2806 ;;      Locals:         0       0       0       0
  2807 ;;      Temps:          4       0       0       0
  2808 ;;      Totals:        14       0       0       0
  2809 ;;Total ram usage:       14 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    7
  2812 ;; This function calls:
  2813 ;;		_ClearLCD
  2814 ;;		_LCD_String
  2815 ;;		_moveForward
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text17
  2822  000E04                     __ptext17:
  2823                           	opt callstack 0
  2824  000E04                     _moveToBeacon:
  2825                           	opt callstack 23
  2826                           
  2827                           ;subroutines.c: 63: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 64:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 65: {;subroutines.c: 66:     moveForward(mL,mR,spe
      +                          ed);
  2828                           
  2829                           ;incstack = 0
  2830  000E04  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2831  000E08  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2832  000E0C  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2833  000E10  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2834  000E14  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2835  000E18  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2836  000E1C  EC47  F006         	call	_moveForward	;wreg free
  2837                           
  2838                           ;subroutines.c: 67:     ClearLCD();
  2839  000E20  EC9B  F008         	call	_ClearLCD	;wreg free
  2840                           
  2841                           ;subroutines.c: 68:     LCD_String("MOVING TO BOMB");
  2842  000E24  0E51               	movlw	low STR_7
  2843  000E26  6E0F               	movwf	LCD_String@string,c
  2844  000E28  0E03               	movlw	high STR_7
  2845  000E2A  6E10               	movwf	LCD_String@string+1,c
  2846  000E2C  EC32  F007         	call	_LCD_String	;wreg free
  2847  000E30                     l2601:
  2848                           
  2849                           ;subroutines.c: 72:           {;subroutines.c: 75:               if(*exit_flag == 1)
  2850  000E30  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2851  000E34  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2852  000E38  04DE               	decf	postinc2,w,c
  2853  000E3A  A4D8               	btfss	status,2,c
  2854  000E3C  D002               	goto	l2611
  2855  000E3E                     u1780:
  2856  000E3E                     l2605:
  2857                           
  2858                           ;subroutines.c: 78:                   return 2;
  2859  000E3E  0E02               	movlw	2
  2860  000E40  0012               	return	
  2861  000E42                     l2611:
  2862  000E42  C031  FFD9         	movff	moveToBeacon@time,fsr2l
  2863  000E46  C032  FFDA         	movff	moveToBeacon@time+1,fsr2h
  2864  000E4A  0E03               	movlw	3
  2865  000E4C  50DB               	movf	plusw2,w,c
  2866  000E4E  E1F7               	bnz	l2605
  2867  000E50  0E02               	movlw	2
  2868  000E52  50DB               	movf	plusw2,w,c
  2869  000E54  E1F4               	bnz	l2605
  2870  000E56  0E31               	movlw	49
  2871  000E58  5CDE               	subwf	postinc2,w,c
  2872  000E5A  0E01               	movlw	1
  2873  000E5C  58DE               	subwfb	postinc2,w,c
  2874  000E5E  B0D8               	btfsc	status,0,c
  2875  000E60  D7EE               	goto	u1780
  2876  000E62  D7E6               	goto	l2601
  2877  000E64                     __end_of_moveToBeacon:
  2878                           	opt callstack 0
  2879                           
  2880 ;; *************** function _moveForward *****************
  2881 ;; Defined at:
  2882 ;;		line 70 in file "dc_motor.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2885 ;;		 -> main@motorL(9), 
  2886 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2887 ;;		 -> main@motorR(9), 
  2888 ;;  max_power       2   37[COMRAM] int 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  i               2   40[COMRAM] int 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2900 ;;      Params:         6       0       0       0
  2901 ;;      Locals:         2       0       0       0
  2902 ;;      Temps:          1       0       0       0
  2903 ;;      Totals:         9       0       0       0
  2904 ;;Total ram usage:        9 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    5
  2907 ;; This function calls:
  2908 ;;		_setMotorPWM
  2909 ;; This function is called by:
  2910 ;;		_moveToBeacon
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text18
  2915  000C8E                     __ptext18:
  2916                           	opt callstack 0
  2917  000C8E                     _moveForward:
  2918                           	opt callstack 24
  2919                           
  2920                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2921                           
  2922                           ;incstack = 0
  2923  000C8E  EE20 F001          	lfsr	2,1
  2924  000C92  5022               	movf	moveForward@mL,w,c
  2925  000C94  26D9               	addwf	fsr2l,f,c
  2926  000C96  5023               	movf	moveForward@mL+1,w,c
  2927  000C98  22DA               	addwfc	fsr2h,f,c
  2928  000C9A  0E01               	movlw	1
  2929  000C9C  6EDF               	movwf	indf2,c
  2930                           
  2931                           ;dc_motor.c: 73:     mR->direction = 1;
  2932  000C9E  EE20 F001          	lfsr	2,1
  2933  000CA2  5024               	movf	moveForward@mR,w,c
  2934  000CA4  26D9               	addwf	fsr2l,f,c
  2935  000CA6  5025               	movf	moveForward@mR+1,w,c
  2936  000CA8  22DA               	addwfc	fsr2h,f,c
  2937  000CAA  0E01               	movlw	1
  2938  000CAC  6EDF               	movwf	indf2,c
  2939                           
  2940                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2941  000CAE  0E00               	movlw	0
  2942  000CB0  6E2A               	movwf	moveForward@i+1,c
  2943  000CB2  0E00               	movlw	0
  2944  000CB4  6E29               	movwf	moveForward@i,c
  2945  000CB6  D021               	goto	l2411
  2946  000CB8                     l2401:
  2947                           
  2948                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2949  000CB8  C022  FFD9         	movff	moveForward@mL,fsr2l
  2950  000CBC  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2951  000CC0  C029  FFDF         	movff	moveForward@i,indf2
  2952                           
  2953                           ;dc_motor.c: 77:         mR->power = i;
  2954  000CC4  C024  FFD9         	movff	moveForward@mR,fsr2l
  2955  000CC8  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2956  000CCC  C029  FFDF         	movff	moveForward@i,indf2
  2957                           
  2958                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2959  000CD0  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2960  000CD4  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2961  000CD8  EC13  F003         	call	_setMotorPWM	;wreg free
  2962                           
  2963                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2964  000CDC  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2965  000CE0  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2966  000CE4  EC13  F003         	call	_setMotorPWM	;wreg free
  2967                           
  2968                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2969  000CE8  0E03               	movlw	3
  2970  000CEA  6E28               	movwf	??_moveForward& (0+255),c
  2971  000CEC  0E98               	movlw	152
  2972  000CEE                     u2047:
  2973  000CEE  2EE8               	decfsz	wreg,f,c
  2974  000CF0  D7FE               	bra	u2047
  2975  000CF2  2E28               	decfsz	??_moveForward& (0+255),f,c
  2976  000CF4  D7FC               	bra	u2047
  2977                           
  2978                           ;dc_motor.c: 81:     }
  2979  000CF6  4A29               	infsnz	moveForward@i,f,c
  2980  000CF8  2A2A               	incf	moveForward@i+1,f,c
  2981  000CFA                     l2411:
  2982  000CFA  5026               	movf	moveForward@max_power,w,c
  2983  000CFC  5C29               	subwf	moveForward@i,w,c
  2984  000CFE  502A               	movf	moveForward@i+1,w,c
  2985  000D00  0A80               	xorlw	128
  2986  000D02  6E28               	movwf	??_moveForward& (0+255),c
  2987  000D04  5027               	movf	moveForward@max_power+1,w,c
  2988  000D06  0A80               	xorlw	128
  2989  000D08  5828               	subwfb	??_moveForward& (0+255),w,c
  2990  000D0A  B0D8               	btfsc	status,0,c
  2991  000D0C  0012               	return	
  2992  000D0E  D7D4               	goto	l2401
  2993  000D10                     __end_of_moveForward:
  2994                           	opt callstack 0
  2995                           
  2996 ;; *************** function _LCD_String *****************
  2997 ;; Defined at:
  2998 ;;		line 119 in file "LCDIO.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  string          2   14[COMRAM] PTR unsigned char 
  3001 ;;		 -> STR_14(16), STR_13(16), STR_12(13), debug@buf2(16), 
  3002 ;;		 -> debug@buf(16), STR_9(16), STR_8(15), STR_7(15), 
  3003 ;;		 -> STR_6(16), STR_5(15), STR_4(10), STR_3(16), 
  3004 ;;		 -> STR_2(16), STR_1(15), 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;		None
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3016 ;;      Params:         2       0       0       0
  3017 ;;      Locals:         0       0       0       0
  3018 ;;      Temps:          0       0       0       0
  3019 ;;      Totals:         2       0       0       0
  3020 ;;Total ram usage:        2 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    6
  3023 ;; This function calls:
  3024 ;;		_SendLCD
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;;		_check_RFID
  3028 ;;		_scanForBeacon
  3029 ;;		_moveToBeacon
  3030 ;;		_returnHome
  3031 ;;		_stopAndDisplay
  3032 ;;		_waitForInput
  3033 ;;		_debug
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text19
  3038  000E64                     __ptext19:
  3039                           	opt callstack 0
  3040  000E64                     _LCD_String:
  3041                           	opt callstack 23
  3042                           
  3043                           ;LCDIO.c: 121: while(*string != 0){
  3044                           
  3045                           ;incstack = 0
  3046  000E64  D01A               	goto	l2283
  3047  000E66                     l2277:
  3048                           
  3049                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3050  000E66  0E01               	movlw	1
  3051  000E68  6E0D               	movwf	SendLCD@type,c
  3052  000E6A  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3053  000E6E  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3054  000E72  6AF8               	clrf	tblptru,c
  3055  000E74  0E02               	movlw	(high __ramtop+-1)
  3056  000E76  64F7               	cpfsgt	tblptrh,c
  3057  000E78  D003               	bra	u1377
  3058  000E7A  0008               	tblrd		*
  3059  000E7C  50F5               	movf	tablat,w,c
  3060  000E7E  D005               	bra	u1370
  3061  000E80                     u1377:
  3062  000E80  CFF6 FFE9          	movff	tblptrl,fsr0l
  3063  000E84  CFF7 FFEA          	movff	tblptrh,fsr0h
  3064  000E88  50EF               	movf	indf0,w,c
  3065  000E8A                     u1370:
  3066  000E8A  EC2C  F008         	call	_SendLCD
  3067  000E8E  4A0F               	infsnz	LCD_String@string,f,c
  3068  000E90  2A10               	incf	LCD_String@string+1,f,c
  3069                           
  3070                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3071  000E92  0E21               	movlw	33
  3072  000E94                     u2057:
  3073  000E94  2EE8               	decfsz	wreg,f,c
  3074  000E96  D7FE               	bra	u2057
  3075  000E98  F000               	nop	
  3076  000E9A                     l2283:
  3077                           
  3078                           ;LCDIO.c: 121: while(*string != 0){
  3079  000E9A  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3080  000E9E  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3081  000EA2  6AF8               	clrf	tblptru,c
  3082  000EA4  0E02               	movlw	(high __ramtop+-1)
  3083  000EA6  64F7               	cpfsgt	tblptrh,c
  3084  000EA8  D003               	bra	u1387
  3085  000EAA  0008               	tblrd		*
  3086  000EAC  50F5               	movf	tablat,w,c
  3087  000EAE  D005               	bra	u1380
  3088  000EB0                     u1387:
  3089  000EB0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3090  000EB4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3091  000EB8  50EF               	movf	indf0,w,c
  3092  000EBA                     u1380:
  3093  000EBA  0900               	iorlw	0
  3094  000EBC  B4D8               	btfsc	status,2,c
  3095  000EBE  0012               	return	
  3096  000EC0  D7D2               	goto	l2277
  3097  000EC2                     __end_of_LCD_String:
  3098                           	opt callstack 0
  3099                           
  3100 ;; *************** function _ClearLCD *****************
  3101 ;; Defined at:
  3102 ;;		line 131 in file "LCDIO.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3116 ;;      Params:         0       0       0       0
  3117 ;;      Locals:         0       0       0       0
  3118 ;;      Temps:          1       0       0       0
  3119 ;;      Totals:         1       0       0       0
  3120 ;;Total ram usage:        1 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    6
  3123 ;; This function calls:
  3124 ;;		_SendLCD
  3125 ;; This function is called by:
  3126 ;;		_display_RFID
  3127 ;;		_scanForBeacon
  3128 ;;		_moveToBeacon
  3129 ;;		_returnHome
  3130 ;;		_stopAndDisplay
  3131 ;;		_waitForInput
  3132 ;;		_debug
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text20
  3137  001136                     __ptext20:
  3138                           	opt callstack 0
  3139  001136                     _ClearLCD:
  3140                           	opt callstack 23
  3141                           
  3142                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3143                           
  3144                           ;incstack = 0
  3145  001136  0E00               	movlw	0
  3146  001138  6E0D               	movwf	SendLCD@type,c
  3147  00113A  0E01               	movlw	1
  3148  00113C  EC2C  F008         	call	_SendLCD
  3149                           
  3150                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3151  001140  0E0D               	movlw	13
  3152  001142  6E0F               	movwf	??_ClearLCD& (0+255),c
  3153  001144  0EFC               	movlw	252
  3154  001146                     u2067:
  3155  001146  2EE8               	decfsz	wreg,f,c
  3156  001148  D7FE               	bra	u2067
  3157  00114A  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3158  00114C  D7FC               	bra	u2067
  3159  00114E  0012               	return		;funcret
  3160  001150                     __end_of_ClearLCD:
  3161                           	opt callstack 0
  3162                           
  3163 ;; *************** function _SendLCD *****************
  3164 ;; Defined at:
  3165 ;;		line 44 in file "LCDIO.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  Byte            1    wreg     unsigned char 
  3168 ;;  type            1   12[COMRAM] unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  Byte            1   13[COMRAM] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3180 ;;      Params:         1       0       0       0
  3181 ;;      Locals:         1       0       0       0
  3182 ;;      Temps:          0       0       0       0
  3183 ;;      Totals:         2       0       0       0
  3184 ;;Total ram usage:        2 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		_LCDout
  3189 ;; This function is called by:
  3190 ;;		_init_LCD
  3191 ;;		_SetLine
  3192 ;;		_LCD_String
  3193 ;;		_ClearLCD
  3194 ;;		_display_RFID
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text21
  3199  001058                     __ptext21:
  3200                           	opt callstack 0
  3201  001058                     _SendLCD:
  3202                           	opt callstack 23
  3203                           
  3204                           ;incstack = 0
  3205                           ;SendLCD@Byte stored from wreg
  3206  001058  6E0E               	movwf	SendLCD@Byte,c
  3207                           
  3208                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3209  00105A  B00D               	btfsc	SendLCD@type,0,c
  3210  00105C  D002               	bra	u1305
  3211  00105E  9E89               	bcf	3977,7,c	;volatile
  3212  001060  D001               	bra	u1306
  3213  001062                     u1305:
  3214  001062  8E89               	bsf	3977,7,c	;volatile
  3215  001064                     u1306:
  3216                           
  3217                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3218  001064  380E               	swapf	SendLCD@Byte,w,c
  3219  001066  0B0F               	andlw	15
  3220  001068  0B0F               	andlw	15
  3221  00106A  ECC6  F006         	call	_LCDout
  3222                           
  3223                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3224  00106E  0E06               	movlw	6
  3225  001070                     u2077:
  3226  001070  2EE8               	decfsz	wreg,f,c
  3227  001072  D7FE               	bra	u2077
  3228  001074  D000               	nop2	
  3229                           
  3230                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3231  001076  500E               	movf	SendLCD@Byte,w,c
  3232  001078  0B0F               	andlw	15
  3233  00107A  ECC6  F006         	call	_LCDout
  3234                           
  3235                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3236  00107E  0E21               	movlw	33
  3237  001080                     u2087:
  3238  001080  2EE8               	decfsz	wreg,f,c
  3239  001082  D7FE               	bra	u2087
  3240  001084  F000               	nop	
  3241  001086  0012               	return		;funcret
  3242  001088                     __end_of_SendLCD:
  3243                           	opt callstack 0
  3244                           
  3245 ;; *************** function _LCDout *****************
  3246 ;; Defined at:
  3247 ;;		line 31 in file "LCDIO.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  number          1    wreg     unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  number          1   11[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3261 ;;      Params:         0       0       0       0
  3262 ;;      Locals:         1       0       0       0
  3263 ;;      Temps:          1       0       0       0
  3264 ;;      Totals:         2       0       0       0
  3265 ;;Total ram usage:        2 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    4
  3268 ;; This function calls:
  3269 ;;		_E_TOG
  3270 ;; This function is called by:
  3271 ;;		_SendLCD
  3272 ;;		_init_LCD
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text22
  3277  000D8C                     __ptext22:
  3278                           	opt callstack 0
  3279  000D8C                     _LCDout:
  3280                           	opt callstack 23
  3281                           
  3282                           ;incstack = 0
  3283                           ;LCDout@number stored from wreg
  3284  000D8C  6E0C               	movwf	LCDout@number,c
  3285                           
  3286                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3287  000D8E  C00C  F00B         	movff	LCDout@number,??_LCDout
  3288  000D92  0E01               	movlw	1
  3289  000D94  160B               	andwf	??_LCDout,f,c
  3290  000D96  508B               	movf	3979,w,c	;volatile
  3291  000D98  180B               	xorwf	??_LCDout,w,c
  3292  000D9A  0BFE               	andlw	-2
  3293  000D9C  180B               	xorwf	??_LCDout,w,c
  3294  000D9E  6E8B               	movwf	3979,c	;volatile
  3295                           
  3296                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3297  000DA0  C00C  F00B         	movff	LCDout@number,??_LCDout
  3298  000DA4  90D8               	bcf	status,0,c
  3299  000DA6  320B               	rrcf	??_LCDout,f,c
  3300  000DA8  0E01               	movlw	1
  3301  000DAA  160B               	andwf	??_LCDout,f,c
  3302  000DAC  460B               	rlncf	??_LCDout,f,c
  3303  000DAE  460B               	rlncf	??_LCDout,f,c
  3304  000DB0  460B               	rlncf	??_LCDout,f,c
  3305  000DB2  508B               	movf	3979,w,c	;volatile
  3306  000DB4  180B               	xorwf	??_LCDout,w,c
  3307  000DB6  0BF7               	andlw	-9
  3308  000DB8  180B               	xorwf	??_LCDout,w,c
  3309  000DBA  6E8B               	movwf	3979,c	;volatile
  3310                           
  3311                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3312  000DBC  C00C  F00B         	movff	LCDout@number,??_LCDout
  3313  000DC0  90D8               	bcf	status,0,c
  3314  000DC2  320B               	rrcf	??_LCDout,f,c
  3315  000DC4  90D8               	bcf	status,0,c
  3316  000DC6  320B               	rrcf	??_LCDout,f,c
  3317  000DC8  0E01               	movlw	1
  3318  000DCA  160B               	andwf	??_LCDout,f,c
  3319  000DCC  508C               	movf	3980,w,c	;volatile
  3320  000DCE  180B               	xorwf	??_LCDout,w,c
  3321  000DD0  0BFE               	andlw	-2
  3322  000DD2  180B               	xorwf	??_LCDout,w,c
  3323  000DD4  6E8C               	movwf	3980,c	;volatile
  3324                           
  3325                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3326  000DD6  C00C  F00B         	movff	LCDout@number,??_LCDout
  3327  000DDA  90D8               	bcf	status,0,c
  3328  000DDC  320B               	rrcf	??_LCDout,f,c
  3329  000DDE  90D8               	bcf	status,0,c
  3330  000DE0  320B               	rrcf	??_LCDout,f,c
  3331  000DE2  90D8               	bcf	status,0,c
  3332  000DE4  320B               	rrcf	??_LCDout,f,c
  3333  000DE6  0E01               	movlw	1
  3334  000DE8  160B               	andwf	??_LCDout,f,c
  3335  000DEA  460B               	rlncf	??_LCDout,f,c
  3336  000DEC  508C               	movf	3980,w,c	;volatile
  3337  000DEE  180B               	xorwf	??_LCDout,w,c
  3338  000DF0  0BFD               	andlw	-3
  3339  000DF2  180B               	xorwf	??_LCDout,w,c
  3340  000DF4  6E8C               	movwf	3980,c	;volatile
  3341                           
  3342                           ;LCDIO.c: 39:  E_TOG();
  3343  000DF6  ECB4  F008         	call	_E_TOG	;wreg free
  3344                           
  3345                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3346  000DFA  0E03               	movlw	3
  3347  000DFC                     u2097:
  3348  000DFC  2EE8               	decfsz	wreg,f,c
  3349  000DFE  D7FE               	bra	u2097
  3350  000E00  F000               	nop	
  3351  000E02  0012               	return		;funcret
  3352  000E04                     __end_of_LCDout:
  3353                           	opt callstack 0
  3354                           
  3355 ;; *************** function _E_TOG *****************
  3356 ;; Defined at:
  3357 ;;		line 23 in file "LCDIO.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		wreg
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3371 ;;      Params:         0       0       0       0
  3372 ;;      Locals:         0       0       0       0
  3373 ;;      Temps:          0       0       0       0
  3374 ;;      Totals:         0       0       0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:    3
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_LCDout
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text23
  3386  001168                     __ptext23:
  3387                           	opt callstack 0
  3388  001168                     _E_TOG:
  3389                           	opt callstack 23
  3390                           
  3391                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3392                           
  3393                           ;incstack = 0
  3394  001168  8C89               	bsf	3977,6,c	;volatile
  3395                           
  3396                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3397  00116A  0E03               	movlw	3
  3398  00116C                     u2107:
  3399  00116C  2EE8               	decfsz	wreg,f,c
  3400  00116E  D7FE               	bra	u2107
  3401  001170  F000               	nop	
  3402                           
  3403                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3404  001172  9C89               	bcf	3977,6,c	;volatile
  3405  001174  0012               	return		;funcret
  3406  001176                     __end_of_E_TOG:
  3407                           	opt callstack 0
  3408                           
  3409 ;; *************** function _init_motor_struct *****************
  3410 ;; Defined at:
  3411 ;;		line 99 in file "dc_motor.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3414 ;;		 -> main@motorL(9), 
  3415 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3416 ;;		 -> main@motorR(9), 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3428 ;;      Params:         4       0       0       0
  3429 ;;      Locals:         0       0       0       0
  3430 ;;      Temps:          0       0       0       0
  3431 ;;      Totals:         4       0       0       0
  3432 ;;Total ram usage:        4 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    5
  3435 ;; This function calls:
  3436 ;;		_setMotorPWM
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           	psect	text24
  3443  000844                     __ptext24:
  3444                           	opt callstack 0
  3445  000844                     _init_motor_struct:
  3446                           	opt callstack 25
  3447                           
  3448                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3449                           
  3450                           ;incstack = 0
  3451  000844  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3452  000848  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3453  00084C  0E00               	movlw	0
  3454  00084E  6EDF               	movwf	indf2,c
  3455                           
  3456                           ;dc_motor.c: 103: mL->direction = 1;
  3457  000850  EE20 F001          	lfsr	2,1
  3458  000854  5022               	movf	init_motor_struct@mL,w,c
  3459  000856  26D9               	addwf	fsr2l,f,c
  3460  000858  5023               	movf	init_motor_struct@mL+1,w,c
  3461  00085A  22DA               	addwfc	fsr2h,f,c
  3462  00085C  0E01               	movlw	1
  3463  00085E  6EDF               	movwf	indf2,c
  3464                           
  3465                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3466  000860  EE20 F002          	lfsr	2,2
  3467  000864  5022               	movf	init_motor_struct@mL,w,c
  3468  000866  26D9               	addwf	fsr2l,f,c
  3469  000868  5023               	movf	init_motor_struct@mL+1,w,c
  3470  00086A  22DA               	addwfc	fsr2h,f,c
  3471  00086C  0E79               	movlw	121
  3472  00086E  6EDE               	movwf	postinc2,c
  3473  000870  0E0F               	movlw	15
  3474  000872  6EDD               	movwf	postdec2,c
  3475                           
  3476                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3477  000874  EE20 F004          	lfsr	2,4
  3478  000878  5022               	movf	init_motor_struct@mL,w,c
  3479  00087A  26D9               	addwf	fsr2l,f,c
  3480  00087C  5023               	movf	init_motor_struct@mL+1,w,c
  3481  00087E  22DA               	addwfc	fsr2h,f,c
  3482  000880  0E78               	movlw	120
  3483  000882  6EDE               	movwf	postinc2,c
  3484  000884  0E0F               	movlw	15
  3485  000886  6EDD               	movwf	postdec2,c
  3486                           
  3487                           ;dc_motor.c: 106: mL->dir_pin=0;
  3488  000888  EE20 F006          	lfsr	2,6
  3489  00088C  5022               	movf	init_motor_struct@mL,w,c
  3490  00088E  26D9               	addwf	fsr2l,f,c
  3491  000890  5023               	movf	init_motor_struct@mL+1,w,c
  3492  000892  22DA               	addwfc	fsr2h,f,c
  3493  000894  0E00               	movlw	0
  3494  000896  6EDF               	movwf	indf2,c
  3495                           
  3496                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3497  000898  EE20 F007          	lfsr	2,7
  3498  00089C  5022               	movf	init_motor_struct@mL,w,c
  3499  00089E  26D9               	addwf	fsr2l,f,c
  3500  0008A0  5023               	movf	init_motor_struct@mL+1,w,c
  3501  0008A2  22DA               	addwfc	fsr2h,f,c
  3502  0008A4  0EC7               	movlw	199
  3503  0008A6  6EDE               	movwf	postinc2,c
  3504  0008A8  0E00               	movlw	0
  3505  0008AA  6EDD               	movwf	postdec2,c
  3506                           
  3507                           ;dc_motor.c: 109: mR->power = 0;
  3508  0008AC  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3509  0008B0  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3510  0008B4  0E00               	movlw	0
  3511  0008B6  6EDF               	movwf	indf2,c
  3512                           
  3513                           ;dc_motor.c: 110: mR->direction = 1;
  3514  0008B8  EE20 F001          	lfsr	2,1
  3515  0008BC  5024               	movf	init_motor_struct@mR,w,c
  3516  0008BE  26D9               	addwf	fsr2l,f,c
  3517  0008C0  5025               	movf	init_motor_struct@mR+1,w,c
  3518  0008C2  22DA               	addwfc	fsr2h,f,c
  3519  0008C4  0E01               	movlw	1
  3520  0008C6  6EDF               	movwf	indf2,c
  3521                           
  3522                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3523  0008C8  EE20 F002          	lfsr	2,2
  3524  0008CC  5024               	movf	init_motor_struct@mR,w,c
  3525  0008CE  26D9               	addwf	fsr2l,f,c
  3526  0008D0  5025               	movf	init_motor_struct@mR+1,w,c
  3527  0008D2  22DA               	addwfc	fsr2h,f,c
  3528  0008D4  0E77               	movlw	119
  3529  0008D6  6EDE               	movwf	postinc2,c
  3530  0008D8  0E0F               	movlw	15
  3531  0008DA  6EDD               	movwf	postdec2,c
  3532                           
  3533                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3534  0008DC  EE20 F004          	lfsr	2,4
  3535  0008E0  5024               	movf	init_motor_struct@mR,w,c
  3536  0008E2  26D9               	addwf	fsr2l,f,c
  3537  0008E4  5025               	movf	init_motor_struct@mR+1,w,c
  3538  0008E6  22DA               	addwfc	fsr2h,f,c
  3539  0008E8  0E76               	movlw	118
  3540  0008EA  6EDE               	movwf	postinc2,c
  3541  0008EC  0E0F               	movlw	15
  3542  0008EE  6EDD               	movwf	postdec2,c
  3543                           
  3544                           ;dc_motor.c: 113: mR->dir_pin=2;
  3545  0008F0  EE20 F006          	lfsr	2,6
  3546  0008F4  5024               	movf	init_motor_struct@mR,w,c
  3547  0008F6  26D9               	addwf	fsr2l,f,c
  3548  0008F8  5025               	movf	init_motor_struct@mR+1,w,c
  3549  0008FA  22DA               	addwfc	fsr2h,f,c
  3550  0008FC  0E02               	movlw	2
  3551  0008FE  6EDF               	movwf	indf2,c
  3552                           
  3553                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3554  000900  EE20 F007          	lfsr	2,7
  3555  000904  5024               	movf	init_motor_struct@mR,w,c
  3556  000906  26D9               	addwf	fsr2l,f,c
  3557  000908  5025               	movf	init_motor_struct@mR+1,w,c
  3558  00090A  22DA               	addwfc	fsr2h,f,c
  3559  00090C  0EC7               	movlw	199
  3560  00090E  6EDE               	movwf	postinc2,c
  3561  000910  0E00               	movlw	0
  3562  000912  6EDD               	movwf	postdec2,c
  3563                           
  3564                           ;dc_motor.c: 116: setMotorPWM(mL);
  3565  000914  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3566  000918  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3567  00091C  EC13  F003         	call	_setMotorPWM	;wreg free
  3568                           
  3569                           ;dc_motor.c: 117: setMotorPWM(mR);
  3570  000920  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3571  000924  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3572  000928  EC13  F003         	call	_setMotorPWM	;wreg free
  3573  00092C  0012               	return		;funcret
  3574  00092E                     __end_of_init_motor_struct:
  3575                           	opt callstack 0
  3576                           
  3577 ;; *************** function _setMotorPWM *****************
  3578 ;; Defined at:
  3579 ;;		line 18 in file "dc_motor.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3582 ;;		 -> main@motorR(9), main@motorL(9), 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  PWMduty         2   31[COMRAM] int 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3594 ;;      Params:         2       0       0       0
  3595 ;;      Locals:         2       0       0       0
  3596 ;;      Temps:          5       0       0       0
  3597 ;;      Totals:         9       0       0       0
  3598 ;;Total ram usage:        9 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    4
  3601 ;; This function calls:
  3602 ;;		___awdiv
  3603 ;;		___wmul
  3604 ;; This function is called by:
  3605 ;;		_stop
  3606 ;;		_turnRight
  3607 ;;		_moveForward
  3608 ;;		_moveBackward
  3609 ;;		_init_motor_struct
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text25
  3614  000626                     __ptext25:
  3615                           	opt callstack 0
  3616  000626                     _setMotorPWM:
  3617                           	opt callstack 24
  3618                           
  3619                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3620                           
  3621                           ;incstack = 0
  3622  000626  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3623  00062A  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3624  00062E  50DF               	movf	indf2,w,c
  3625  000630  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3626  000632  501B               	movf	??_setMotorPWM,w,c
  3627  000634  6E0B               	movwf	___wmul@multiplier,c
  3628  000636  6A0C               	clrf	___wmul@multiplier+1,c
  3629  000638  EE20 F007          	lfsr	2,7
  3630  00063C  5019               	movf	setMotorPWM@m,w,c
  3631  00063E  26D9               	addwf	fsr2l,f,c
  3632  000640  501A               	movf	setMotorPWM@m+1,w,c
  3633  000642  22DA               	addwfc	fsr2h,f,c
  3634  000644  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3635  000648  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3636  00064C  EC6E  F008         	call	___wmul	;wreg free
  3637  000650  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3638  000654  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3639  000658  0E00               	movlw	0
  3640  00065A  6E14               	movwf	___awdiv@divisor+1,c
  3641  00065C  0E64               	movlw	100
  3642  00065E  6E13               	movwf	___awdiv@divisor,c
  3643  000660  EC83  F005         	call	___awdiv	;wreg free
  3644  000664  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3645  000668  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3646                           
  3647                           ;dc_motor.c: 24:     if (m->direction)
  3648  00066C  EE20 F001          	lfsr	2,1
  3649  000670  5019               	movf	setMotorPWM@m,w,c
  3650  000672  26D9               	addwf	fsr2l,f,c
  3651  000674  501A               	movf	setMotorPWM@m+1,w,c
  3652  000676  22DA               	addwfc	fsr2h,f,c
  3653  000678  50DF               	movf	indf2,w,c
  3654  00067A  B4D8               	btfsc	status,2,c
  3655  00067C  D024               	goto	l2291
  3656                           
  3657                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3658  00067E  EE20 F006          	lfsr	2,6
  3659  000682  5019               	movf	setMotorPWM@m,w,c
  3660  000684  26D9               	addwf	fsr2l,f,c
  3661  000686  501A               	movf	setMotorPWM@m+1,w,c
  3662  000688  22DA               	addwfc	fsr2h,f,c
  3663  00068A  50DF               	movf	indf2,w,c
  3664  00068C  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3665  00068E  0E01               	movlw	1
  3666  000690  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3667  000692  2A1B               	incf	??_setMotorPWM,f,c
  3668  000694  D002               	goto	u1414
  3669  000696                     u1415:
  3670  000696  90D8               	bcf	status,0,c
  3671  000698  361C               	rlcf	??_setMotorPWM+1,f,c
  3672  00069A                     u1414:
  3673  00069A  2E1B               	decfsz	??_setMotorPWM,f,c
  3674  00069C  D7FC               	goto	u1415
  3675  00069E  501C               	movf	??_setMotorPWM+1,w,c
  3676  0006A0  108A               	iorwf	3978,w,c	;volatile
  3677  0006A2  6E8A               	movwf	3978,c	;volatile
  3678                           
  3679                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3680  0006A4  EE20 F007          	lfsr	2,7
  3681  0006A8  5019               	movf	setMotorPWM@m,w,c
  3682  0006AA  26D9               	addwf	fsr2l,f,c
  3683  0006AC  501A               	movf	setMotorPWM@m+1,w,c
  3684  0006AE  22DA               	addwfc	fsr2h,f,c
  3685  0006B0  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3686  0006B4  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3687  0006B8  5020               	movf	setMotorPWM@PWMduty,w,c
  3688  0006BA  5C1B               	subwf	??_setMotorPWM,w,c
  3689  0006BC  6E20               	movwf	setMotorPWM@PWMduty,c
  3690  0006BE  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3691  0006C0  581C               	subwfb	??_setMotorPWM+1,w,c
  3692  0006C2  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3693                           
  3694                           ;dc_motor.c: 28:     }
  3695  0006C4  D014               	goto	l123
  3696  0006C6                     l2291:
  3697                           
  3698                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3699  0006C6  EE20 F006          	lfsr	2,6
  3700  0006CA  5019               	movf	setMotorPWM@m,w,c
  3701  0006CC  26D9               	addwf	fsr2l,f,c
  3702  0006CE  501A               	movf	setMotorPWM@m+1,w,c
  3703  0006D0  22DA               	addwfc	fsr2h,f,c
  3704  0006D2  50DF               	movf	indf2,w,c
  3705  0006D4  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3706  0006D6  0E01               	movlw	1
  3707  0006D8  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3708  0006DA  2A1B               	incf	??_setMotorPWM,f,c
  3709  0006DC  D002               	goto	u1424
  3710  0006DE                     u1425:
  3711  0006DE  90D8               	bcf	status,0,c
  3712  0006E0  361C               	rlcf	??_setMotorPWM+1,f,c
  3713  0006E2                     u1424:
  3714  0006E2  2E1B               	decfsz	??_setMotorPWM,f,c
  3715  0006E4  D7FC               	goto	u1425
  3716  0006E6  501C               	movf	??_setMotorPWM+1,w,c
  3717  0006E8  0AFF               	xorlw	255
  3718  0006EA  148A               	andwf	3978,w,c	;volatile
  3719  0006EC  6E8A               	movwf	3978,c	;volatile
  3720  0006EE                     l123:
  3721                           
  3722                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3723  0006EE  EE20 F002          	lfsr	2,2
  3724  0006F2  5019               	movf	setMotorPWM@m,w,c
  3725  0006F4  26D9               	addwf	fsr2l,f,c
  3726  0006F6  501A               	movf	setMotorPWM@m+1,w,c
  3727  0006F8  22DA               	addwfc	fsr2h,f,c
  3728  0006FA  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3729  0006FE  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3730  000702  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3731  000706  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3732  00070A  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3733  00070C  46E8               	rlncf	wreg,f,c
  3734  00070E  0BFC               	andlw	252
  3735  000710  6EDF               	movwf	indf2,c
  3736                           
  3737                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3738  000712  EE20 F004          	lfsr	2,4
  3739  000716  5019               	movf	setMotorPWM@m,w,c
  3740  000718  26D9               	addwf	fsr2l,f,c
  3741  00071A  501A               	movf	setMotorPWM@m+1,w,c
  3742  00071C  22DA               	addwfc	fsr2h,f,c
  3743  00071E  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3744  000722  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3745  000726  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3746  00072A  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3747  00072E  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3748  000732  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3749  000736  0E06               	movlw	6
  3750  000738  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3751  00073A                     u1435:
  3752  00073A  341E               	rlcf	??_setMotorPWM+3,w,c
  3753  00073C  321E               	rrcf	??_setMotorPWM+3,f,c
  3754  00073E  321D               	rrcf	??_setMotorPWM+2,f,c
  3755  000740  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3756  000742  D7FB               	goto	u1435
  3757  000744  501D               	movf	??_setMotorPWM+2,w,c
  3758  000746  6EDF               	movwf	indf2,c
  3759  000748  0012               	return		;funcret
  3760  00074A                     __end_of_setMotorPWM:
  3761                           	opt callstack 0
  3762                           
  3763 ;; *************** function ___wmul *****************
  3764 ;; Defined at:
  3765 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  multiplier      2   10[COMRAM] unsigned int 
  3768 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  product         2   14[COMRAM] unsigned int 
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  2   10[COMRAM] unsigned int 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0, prodl, prodh
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3780 ;;      Params:         4       0       0       0
  3781 ;;      Locals:         2       0       0       0
  3782 ;;      Temps:          0       0       0       0
  3783 ;;      Totals:         6       0       0       0
  3784 ;;Total ram usage:        6 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    3
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_setMotorPWM
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text26
  3795  0010DC                     __ptext26:
  3796                           	opt callstack 0
  3797  0010DC                     ___wmul:
  3798                           	opt callstack 24
  3799                           
  3800                           ;incstack = 0
  3801  0010DC  500B               	movf	___wmul@multiplier,w,c
  3802  0010DE  020D               	mulwf	___wmul@multiplicand,c
  3803  0010E0  CFF3 F00F          	movff	prodl,___wmul@product
  3804  0010E4  CFF4 F010          	movff	prodh,___wmul@product+1
  3805  0010E8  500B               	movf	___wmul@multiplier,w,c
  3806  0010EA  020E               	mulwf	___wmul@multiplicand+1,c
  3807  0010EC  50F3               	movf	prodl,w,c
  3808  0010EE  2610               	addwf	___wmul@product+1,f,c
  3809  0010F0  500C               	movf	___wmul@multiplier+1,w,c
  3810  0010F2  020D               	mulwf	___wmul@multiplicand,c
  3811  0010F4  50F3               	movf	prodl,w,c
  3812  0010F6  2610               	addwf	___wmul@product+1,f,c
  3813  0010F8  C00F  F00B         	movff	___wmul@product,?___wmul
  3814  0010FC  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3815  001100  0012               	return		;funcret
  3816  001102                     __end_of___wmul:
  3817                           	opt callstack 0
  3818                           
  3819 ;; *************** function ___awdiv *****************
  3820 ;; Defined at:
  3821 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  dividend        2   16[COMRAM] int 
  3824 ;;  divisor         2   18[COMRAM] int 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  quotient        2   22[COMRAM] int 
  3827 ;;  sign            1   21[COMRAM] unsigned char 
  3828 ;;  counter         1   20[COMRAM] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  2   16[COMRAM] int 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3838 ;;      Params:         4       0       0       0
  3839 ;;      Locals:         4       0       0       0
  3840 ;;      Temps:          0       0       0       0
  3841 ;;      Totals:         8       0       0       0
  3842 ;;Total ram usage:        8 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    3
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_setMotorPWM
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text27
  3853  000B06                     __ptext27:
  3854                           	opt callstack 0
  3855  000B06                     ___awdiv:
  3856                           	opt callstack 24
  3857                           
  3858                           ;incstack = 0
  3859  000B06  0E00               	movlw	0
  3860  000B08  6E16               	movwf	___awdiv@sign,c
  3861  000B0A  AE14               	btfss	___awdiv@divisor+1,7,c
  3862  000B0C  D006               	goto	l2239
  3863  000B0E  6C13               	negf	___awdiv@divisor,c
  3864  000B10  1E14               	comf	___awdiv@divisor+1,f,c
  3865  000B12  B0D8               	btfsc	status,0,c
  3866  000B14  2A14               	incf	___awdiv@divisor+1,f,c
  3867  000B16  0E01               	movlw	1
  3868  000B18  6E16               	movwf	___awdiv@sign,c
  3869  000B1A                     l2239:
  3870  000B1A  AE12               	btfss	___awdiv@dividend+1,7,c
  3871  000B1C  D006               	goto	l2245
  3872  000B1E  6C11               	negf	___awdiv@dividend,c
  3873  000B20  1E12               	comf	___awdiv@dividend+1,f,c
  3874  000B22  B0D8               	btfsc	status,0,c
  3875  000B24  2A12               	incf	___awdiv@dividend+1,f,c
  3876  000B26  0E01               	movlw	1
  3877  000B28  1A16               	xorwf	___awdiv@sign,f,c
  3878  000B2A                     l2245:
  3879  000B2A  0E00               	movlw	0
  3880  000B2C  6E18               	movwf	___awdiv@quotient+1,c
  3881  000B2E  0E00               	movlw	0
  3882  000B30  6E17               	movwf	___awdiv@quotient,c
  3883  000B32  5013               	movf	___awdiv@divisor,w,c
  3884  000B34  1014               	iorwf	___awdiv@divisor+1,w,c
  3885  000B36  B4D8               	btfsc	status,2,c
  3886  000B38  D01C               	goto	l2267
  3887  000B3A  0E01               	movlw	1
  3888  000B3C  6E15               	movwf	___awdiv@counter,c
  3889  000B3E  D004               	goto	l2253
  3890  000B40                     l2251:
  3891  000B40  90D8               	bcf	status,0,c
  3892  000B42  3613               	rlcf	___awdiv@divisor,f,c
  3893  000B44  3614               	rlcf	___awdiv@divisor+1,f,c
  3894  000B46  2A15               	incf	___awdiv@counter,f,c
  3895  000B48                     l2253:
  3896  000B48  AE14               	btfss	___awdiv@divisor+1,7,c
  3897  000B4A  D7FA               	goto	l2251
  3898  000B4C                     u1340:
  3899  000B4C  90D8               	bcf	status,0,c
  3900  000B4E  3617               	rlcf	___awdiv@quotient,f,c
  3901  000B50  3618               	rlcf	___awdiv@quotient+1,f,c
  3902  000B52  5013               	movf	___awdiv@divisor,w,c
  3903  000B54  5C11               	subwf	___awdiv@dividend,w,c
  3904  000B56  5014               	movf	___awdiv@divisor+1,w,c
  3905  000B58  5812               	subwfb	___awdiv@dividend+1,w,c
  3906  000B5A  A0D8               	btfss	status,0,c
  3907  000B5C  D005               	goto	l2263
  3908  000B5E  5013               	movf	___awdiv@divisor,w,c
  3909  000B60  5E11               	subwf	___awdiv@dividend,f,c
  3910  000B62  5014               	movf	___awdiv@divisor+1,w,c
  3911  000B64  5A12               	subwfb	___awdiv@dividend+1,f,c
  3912  000B66  8017               	bsf	___awdiv@quotient,0,c
  3913  000B68                     l2263:
  3914  000B68  90D8               	bcf	status,0,c
  3915  000B6A  3214               	rrcf	___awdiv@divisor+1,f,c
  3916  000B6C  3213               	rrcf	___awdiv@divisor,f,c
  3917  000B6E  2E15               	decfsz	___awdiv@counter,f,c
  3918  000B70  D7ED               	goto	u1340
  3919  000B72                     l2267:
  3920  000B72  5016               	movf	___awdiv@sign,w,c
  3921  000B74  B4D8               	btfsc	status,2,c
  3922  000B76  D004               	goto	l2271
  3923  000B78  6C17               	negf	___awdiv@quotient,c
  3924  000B7A  1E18               	comf	___awdiv@quotient+1,f,c
  3925  000B7C  B0D8               	btfsc	status,0,c
  3926  000B7E  2A18               	incf	___awdiv@quotient+1,f,c
  3927  000B80                     l2271:
  3928  000B80  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3929  000B84  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3930  000B88  0012               	return		;funcret
  3931  000B8A                     __end_of___awdiv:
  3932                           	opt callstack 0
  3933                           
  3934 ;; *************** function _InterruptHandlerLow *****************
  3935 ;; Defined at:
  3936 ;;		line 93 in file "main.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3950 ;;      Params:         0       0       0       0
  3951 ;;      Locals:         0       0       0       0
  3952 ;;      Temps:          3       0       0       0
  3953 ;;      Totals:         3       0       0       0
  3954 ;;Total ram usage:        3 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    2
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		Interrupt level 1
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	intcodelo
  3965  000018                     __pintcodelo:
  3966                           	opt callstack 0
  3967  000018                     _InterruptHandlerLow:
  3968                           	opt callstack 22
  3969                           
  3970                           ;incstack = 0
  3971  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3972  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3973  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3974  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3975                           
  3976                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1 || robot_mode == 0))
  3977  000026  A4F2               	btfss	4082,2,c	;volatile
  3978  000028  D00D               	goto	i1l70
  3979  00002A  0443               	decf	_robot_mode,w,c	;volatile
  3980  00002C  B4D8               	btfsc	status,2,c
  3981  00002E  D003               	goto	i1u61_20
  3982  000030  5043               	movf	_robot_mode,w,c	;volatile
  3983  000032  A4D8               	btfss	status,2,c
  3984  000034  D007               	goto	i1l70
  3985  000036                     i1u61_20:
  3986                           
  3987                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3988  000036  0E01               	movlw	1
  3989  000038  2644               	addwf	_movement_time,f,c	;volatile
  3990  00003A  0E00               	movlw	0
  3991  00003C  2245               	addwfc	_movement_time+1,f,c	;volatile
  3992  00003E  2246               	addwfc	_movement_time+2,f,c	;volatile
  3993  000040  2247               	addwfc	_movement_time+3,f,c	;volatile
  3994  000042  D00B               	goto	i1l1621
  3995  000044                     i1l70:
  3996  000044  A4F2               	btfss	4082,2,c	;volatile
  3997  000046  D009               	goto	i1l1621
  3998  000048  0E02               	movlw	2
  3999  00004A  1843               	xorwf	_robot_mode,w,c	;volatile
  4000  00004C  A4D8               	btfss	status,2,c
  4001  00004E  D005               	goto	i1l1621
  4002                           
  4003                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  4004  000050  0644               	decf	_movement_time,f,c	;volatile
  4005  000052  0E00               	movlw	0
  4006  000054  5A45               	subwfb	_movement_time+1,f,c	;volatile
  4007  000056  5A46               	subwfb	_movement_time+2,f,c	;volatile
  4008  000058  5A47               	subwfb	_movement_time+3,f,c	;volatile
  4009  00005A                     i1l1621:
  4010                           
  4011                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  4012                           
  4013                           ;main.c: 108:     else
  4014                           
  4015                           ;main.c: 106:     }
  4016                           
  4017                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  4018  00005A  94F2               	bcf	4082,2,c	;volatile
  4019  00005C  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4020  000060  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4021  000064  C008  FFD8         	movff	??_InterruptHandlerLow,status
  4022  000068  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4023  00006A  0010               	retfie	
  4024  00006C                     __end_of_InterruptHandlerLow:
  4025                           	opt callstack 0
  4026                           
  4027 ;; *************** function _InterruptHandlerHigh *****************
  4028 ;; Defined at:
  4029 ;;		line 75 in file "main.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  throwaway       1    0        unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4043 ;;      Params:         0       0       0       0
  4044 ;;      Locals:         1       0       0       0
  4045 ;;      Temps:          2       0       0       0
  4046 ;;      Totals:         3       0       0       0
  4047 ;;Total ram usage:        3 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    1
  4050 ;; This function calls:
  4051 ;;		_processRFID
  4052 ;; This function is called by:
  4053 ;;		Interrupt level 2
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	intcode
  4058  000008                     __pintcode:
  4059                           	opt callstack 0
  4060  000008                     _InterruptHandlerHigh:
  4061                           	opt callstack 22
  4062                           
  4063                           ;incstack = 0
  4064  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4065  00000A  EF12  F008         	goto	int_func
  4066                           
  4067                           	psect	intcode_body
  4068  001024                     __pintcode_body:
  4069                           	opt callstack 22
  4070  001024                     int_func:
  4071                           	opt callstack 22
  4072  001024  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4073  001028  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4074                           
  4075                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4076  00102C  AA9E               	btfss	3998,5,c	;volatile
  4077  00102E  D00D               	goto	i2l63
  4078  001030  0443               	decf	_robot_mode,w,c	;volatile
  4079  001032  A4D8               	btfss	status,2,c
  4080  001034  D00A               	goto	i2l63
  4081                           
  4082                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4083  001036  0E86               	movlw	low _RFIDbuf
  4084  001038  6E01               	movwf	processRFID@RFIDbuf,c
  4085  00103A  0E00               	movlw	high _RFIDbuf
  4086  00103C  6E02               	movwf	processRFID@RFIDbuf+1,c
  4087  00103E  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4088  001042  EC8F  F007         	call	_processRFID	;wreg free
  4089  001046  6E48               	movwf	_RFID_flag,c	;volatile
  4090                           
  4091                           ;main.c: 83:     }
  4092  001048  D001               	goto	i2l65
  4093  00104A                     i2l63:
  4094  00104A  50AE               	movf	4014,w,c	;volatile
  4095  00104C                     i2l65:
  4096  00104C  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4097  001050  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4098  001054  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4099  001056  0011               	retfie		f
  4100  001058                     __end_of_InterruptHandlerHigh:
  4101                           	opt callstack 0
  4102                           
  4103 ;; *************** function _processRFID *****************
  4104 ;; Defined at:
  4105 ;;		line 34 in file "RFID.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4108 ;;		 -> RFIDbuf(12), 
  4109 ;;  latestChar      1    2[COMRAM] unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  i               1    3[COMRAM] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      unsigned char 
  4114 ;; Registers used:
  4115 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4121 ;;      Params:         3       0       0       0
  4122 ;;      Locals:         1       0       0       0
  4123 ;;      Temps:          0       0       0       0
  4124 ;;      Totals:         4       0       0       0
  4125 ;;Total ram usage:        4 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_InterruptHandlerHigh
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text30
  4135  000F1E                     __ptext30:
  4136                           	opt callstack 0
  4137  000F1E                     _processRFID:
  4138                           	opt callstack 22
  4139                           
  4140                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4141                           
  4142                           ;incstack = 0
  4143  000F1E  0E03               	movlw	3
  4144  000F20  1803               	xorwf	processRFID@latestChar,w,c
  4145  000F22  A4D8               	btfss	status,2,c
  4146  000F24  D002               	goto	i2l1981
  4147                           
  4148                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4149  000F26  0E01               	movlw	1
  4150  000F28  0012               	return	
  4151  000F2A                     i2l1981:
  4152                           
  4153                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4154  000F2A  0E02               	movlw	2
  4155  000F2C  1803               	xorwf	processRFID@latestChar,w,c
  4156  000F2E  A4D8               	btfss	status,2,c
  4157  000F30  D012               	goto	i2l2001
  4158                           
  4159                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4160  000F32  0E00               	movlw	0
  4161  000F34  6E42               	movwf	processRFID@position_in_buf,c
  4162                           
  4163                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4164  000F36  0E00               	movlw	0
  4165  000F38  6E04               	movwf	processRFID@i,c
  4166  000F3A                     i2l1989:
  4167                           
  4168                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4169  000F3A  5004               	movf	processRFID@i,w,c
  4170  000F3C  2401               	addwf	processRFID@RFIDbuf,w,c
  4171  000F3E  6ED9               	movwf	fsr2l,c
  4172  000F40  0E00               	movlw	0
  4173  000F42  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4174  000F44  6EDA               	movwf	fsr2h,c
  4175  000F46  0E00               	movlw	0
  4176  000F48  6EDF               	movwf	indf2,c
  4177                           
  4178                           ;RFID.c: 56:            }
  4179  000F4A  2A04               	incf	processRFID@i,f,c
  4180  000F4C  0E0B               	movlw	11
  4181  000F4E  6404               	cpfsgt	processRFID@i,c
  4182  000F50  D7F4               	goto	i2l1989
  4183  000F52                     i2u113_40:
  4184                           
  4185                           ;RFID.c: 57:            return 0;
  4186  000F52  0E00               	movlw	0
  4187  000F54  0012               	return	
  4188  000F56                     i2l2001:
  4189                           
  4190                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4191  000F56  5042               	movf	processRFID@position_in_buf,w,c
  4192  000F58  2401               	addwf	processRFID@RFIDbuf,w,c
  4193  000F5A  6ED9               	movwf	fsr2l,c
  4194  000F5C  0E00               	movlw	0
  4195  000F5E  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4196  000F60  6EDA               	movwf	fsr2h,c
  4197  000F62  C003  FFDF         	movff	processRFID@latestChar,indf2
  4198                           
  4199                           ;RFID.c: 63:             position_in_buf++;
  4200  000F66  2A42               	incf	processRFID@position_in_buf,f,c
  4201  000F68  D7F4               	goto	i2u113_40
  4202  000F6A                     __end_of_processRFID:
  4203                           	opt callstack 0
  4204                           
  4205                           	psect	rparam
  4206  0000                     
  4207                           	psect	temp
  4208  000049                     btemp:
  4209                           	opt callstack 0
  4210  000049                     	ds	1
  4211  0000                     int$flags	set	btemp
  4212  0000                     wtemp8	set	btemp+1
  4213  0000                     ttemp5	set	btemp+1
  4214  0000                     ttemp6	set	btemp+4
  4215  0000                     ttemp7	set	btemp+8
  4216                           tosu	equ	0xFFF
  4217                           tosh	equ	0xFFE
  4218                           tosl	equ	0xFFD
  4219                           stkptr	equ	0xFFC
  4220                           pclatu	equ	0xFFB
  4221                           pclath	equ	0xFFA
  4222                           pcl	equ	0xFF9
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           indf0	equ	0xFEF
  4230                           postinc0	equ	0xFEE
  4231                           postdec0	equ	0xFED
  4232                           preinc0	equ	0xFEC
  4233                           plusw0	equ	0xFEB
  4234                           fsr0h	equ	0xFEA
  4235                           fsr0l	equ	0xFE9
  4236                           wreg	equ	0xFE8
  4237                           indf1	equ	0xFE7
  4238                           postinc1	equ	0xFE6
  4239                           postdec1	equ	0xFE5
  4240                           preinc1	equ	0xFE4
  4241                           plusw1	equ	0xFE3
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           bsr	equ	0xFE0
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           preinc2	equ	0xFDC
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8


Data Sizes:
    Strings     166
    Constant    0
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      72
    BANK0           160     22      72
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1864_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_9(CODE[16]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[16]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_scanForBeacon
    _waitForInput->_LCD_String
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_stop
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _SetLine->_SendLCD
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   53437
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4806
                                             16 COMRAM     4     4      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15710
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4896
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       19    11      8   11801
                                             42 COMRAM    19    11      8
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    3039
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       12     8      4     400
                                             10 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6843
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        14     4     10    6967
                                             42 COMRAM    14     4     10
                           _ClearLCD
                         _LCD_String
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90       3        0.0%
DATA                 0      0      90      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 08 17:22:53 2020

                           l55 0FF2                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l123 06EE                            l343 0D38            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0086  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2301 10AC                           l2401 0CB8                           l2251 0B40  
                         l2411 0CFA                           l2253 0B48                           l2245 0B2A  
                         l2271 0B80                           l2263 0B68                           l2239 0B1A  
                         l2601 0E30                           l2417 0C36                           l2441 03F2  
                         l2267 0B72                           l2291 06C6                           l2283 0E9A  
                         l2611 0E42                           l2427 0C78                           l2435 03B0  
                         l2277 0E66                           l2605 0E3E                           l2365 0ECA  
                         l2623 0F96                           l2447 0434                           l2543 0D5A  
                         l2297 109A                           l2369 0ED8                           l2385 0BB4  
                         l2457 04E4                           l2395 0BF6                           l2571 0580  
                         l2635 0AB6                           l2651 0B00                           l2485 0A7C  
                         l2557 053A                           l2469 0FC0                           l2645 0ACE  
                         l2591 05F6                           l2671 07D8                           l2663 0778  
                         l2675 0806                           l2667 07A4                           l2679 0836  
                         STR_1 037E                           STR_2 0341                           STR_3 0331  
                         STR_4 039A                           STR_5 0360                           STR_6 0321  
                         STR_7 0351                           STR_8 036F                           STR_9 0321  
                         u2007 0BEA                           u1305 1062                           u2017 0F0E  
                         u1306 1064                           u2107 116C                           u2027 10AE  
                         u1340 0B4C                           u2037 0C6C                           u1414 069A  
                         _LATB 000F8A                           u1415 0696                           u2047 0CEE  
                         u1424 06E2                           u1600 0474                           u1425 06DE  
                         u2057 0E94                           u1370 0E8A                           u1610 0482  
                         u1435 073A                           u2067 1146                           u1380 0EBA  
                         u1620 0484                           u1540 0448                           u1700 0FEC  
                         u2077 1070                           u1710 0A78                           u1630 0492  
                         u1550 0452                           u2087 1080                           u1640 0494  
                         u1560 0454                           u2097 0DFC                           u1377 0E80  
                         u1650 04A2                           u1570 0462                           u1810 0AFA  
                         u1387 0EB0                           u1660 04A4                           u1580 0464  
                         u1740 0D86                           u1670 04C0                           u1590 0472  
                         u1760 05A0                           u1680 04C2                           u1770 0622  
                         u1907 0962                           u1780 0E3E                           u1917 0972  
                         u1927 0980                           u1937 098E                           u1947 09A0  
                         u1957 09B2                           u1877 0D64                           u1967 09C8  
                         u1887 0AD8                           u1977 09DC                           u1897 094C  
                         u1987 09EE                           u1997 0600                           i1l70 0044  
                         i2l63 104A                           i2l65 104C                           _dbuf 0066  
                         _main 074A                           _prec 0064                           _nout 0060  
                         fsr0h 000FEA                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0049  
                         _stop 0EC2                           prodh 000FF4                           prodl 000FF3  
                         start 006C                   ___param_bank 000000                __end_of_SendLCD 1088  
              __end_of_SetLine 10B6                 ??_display_RFID 0012                          ?_main 0001  
          main@searching_speed 0092                __end_of___awdiv 0B8A                          STR_10 03A4  
                        STR_12 038D                          STR_13 0311                          STR_14 0301  
                        ?_stop 0022                          _T0CON 000FD5                ___awdiv@divisor 0013  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0015  
                        _RCREG 000FAE                          _E_TOG 1168                          _SPBRG 000FAF  
                 ?_init_sensor 0001                __end_of_initPWM 1136                          _flags 003E  
                        _setup 0FEE                          _width 0062               moveToBeacon@time 0031  
                        tablat 000FF5                          plusw2 000FDB             processRFID@RFIDbuf 0001  
                        ttemp5 004A                          ttemp6 004D                          ttemp7 0051  
                        stop@i 0029                          status 000FD8                          wtemp8 004A  
          __size_of_LCD_String 005E               __end_of_ClearLCD 1150           moveForward@max_power 0026  
               __CFG_MCLRE$OFF 000000                __initialization 10B6                   __end_of_main 0844  
                 __end_of_stop 0F1E                 __CFG_OSC$IRCIO 000000               LCD_String@string 000F  
                       ??_main 003E                         ??_stop 0028                  __activetblptr 000002  
                       ?_E_TOG 0001                   ?_setMotorPWM 0019                   ?_moveForward 0022  
 scanForBeacon@beacon_location 0039               ___awdiv@dividend 0011                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         i1l1621 005A  
                       i2l2001 0F56                         i2l1981 0F2A                         i2l1989 0F3A  
                       _LCDout 0D8C                    SendLCD@Byte 000E                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 000D  
                    ??_SendLCD 000E                      ??_SetLine 000F                  display_RFID@i 0012  
                       ___wmul 10DC                      ??___awdiv 0015               __end_of_init_LCD 09F6  
          init_motor_struct@mL 0022            init_motor_struct@mR 0024                         clear_0 10BC  
                       clear_1 10C8               ___awdiv@quotient 0017         __size_of_scanForBeacon 012E  
            moveToBeacon@speed 002F                      ??_initPWM 000D                 _stopAndDisplay 0A80  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 0022                         stop@mR 0024  
                 ?_processRFID 0001              _init_motor_struct 0844           __end_of_display_RFID 0FEE  
           ?_init_motor_struct 0022                     __accesstop 0060        __end_of__initialization 10CE  
                ___rparam_used 000001                    SetLine@line 000F                  __end_of_E_TOG 1176  
          ??_init_motor_struct 0026                 __pcstackCOMRAM 0001                  __end_of_setup 1024  
                 ??_LCD_String 0011         __end_of_stopAndDisplay 0B06                        ??_E_TOG 000B  
__size_of_InterruptHandlerHigh 1050                      ?_ClearLCD 0001    __end_of_InterruptHandlerLow 006C  
    __end_of_init_motor_struct 092E          __end_of_classify_data 0A80                     _check_RFID 03A8  
         __size_of_init_sensor 0018                        ??_setup 0010                  ?_moveBackward 0022  
                   __pbssBANK0 0060                        ?_LCDout 0001                  _scanForBeacon 04F8  
           __size_of_init_RFID 001A             __end_of_LCD_String 0EC2                        ?___wmul 000B  
                ?_moveToBeacon 002B                        _CAP1CON 000F63                ?_stopAndDisplay 002B  
                   ??_ClearLCD 000F                        _RFIDbuf 0086                        i1u61_20 0036  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0028  
               ?_scanForBeacon 002B           __size_of_setMotorPWM 0124           __size_of_moveForward 0082  
    stopAndDisplay@RFID_buffer 0031                      ?_init_LCD 0001                __size_of_LCDout 0078  
                moveBackward@i 0029                  ?_waitForInput 0001             __size_of_turnRight 0082  
                      _SendLCD 1058                        __Hparam 0000                        _SetLine 1088  
                      __Lparam 0000                 ??_moveToBeacon 0035          processRFID@latestChar 0003  
                      ___awdiv 0B06                __size_of___wmul 0026                   __psmallconst 0300  
             initPWM@PWMperiod 000B                        __pcinit 10B6                        __ramtop 0300  
                      __ptext0 074A                        __ptext1 0D10                        __ptext2 0A80  
                      __ptext3 0FAE                        __ptext4 03A8                        __ptext5 0FEE  
                      __ptext6 1150                        __ptext7 1102                        __ptext8 092E  
                      __ptext9 111C              __end_of_init_RFID 111C               check_RFID@hexBuf 0015  
                      _initPWM 111C                   LCDout@number 000C              scanForBeacon@time 0031  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040              stop@initial_speed 0026  
                  ?_check_RFID 0011                 __pintcode_body 1024           end_of_initialization 10CE  
           setMotorPWM@PWMduty 0020                     ??_init_LCD 000F           __size_of_processRFID 004C  
               ??_waitForInput 0011                  __Lmediumconst 0000                        int_func 1024  
                    _RFID_flag 0048                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE          moveToBeacon@exit_flag 0033  
                   _robot_mode 0043                     _returnHome 0F6A                   _display_RFID 0FAE  
                    _PORTDbits 000F83              __end_of_turnRight 0C0C                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
              ??_scanForBeacon 0033             debug@smoothed_data 0040                  moveForward@mL 0022  
                moveForward@mR 0024                 __end_of_LCDout 0E04                      _TXSTAbits 000FAC  
                   main@motorL 0096                     main@motorR 009F           __end_of_moveBackward 0C8E  
          __size_of_check_RFID 0150                 __end_of___wmul 1102                    _BAUDCONbits 000FAA  
        classify_data@filtered 0015            start_initialization 10B6              __size_of_ClearLCD 001A  
         __end_of_moveToBeacon 0E64          classify_data@raw_data 000B                       ??_LCDout 000B  
        moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 1058          classify_data@smoothed 000D  
             ??_stopAndDisplay 0033                       ??___wmul 000F                scanForBeacon@mL 002B  
              scanForBeacon@mR 002D             turnRight@max_power 0026                    ?_returnHome 002B  
         __end_of_waitForInput 0D8C                    __pbssCOMRAM 003E                  ??_init_sensor 000B  
                __pcstackBANK0 0092   __size_of_InterruptHandlerLow 0054              __size_of_init_LCD 00C8  
                     ?_SendLCD 000D                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 0011         __size_of_classify_data 008A             check_RFID@checksum 0026  
                  __pintcodelo 0018                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 000B                    __smallconst 0300                 __size_of_E_TOG 000E  
                waitForInput@i 0013                      _init_RFID 1102            stopAndDisplay@speed 002F  
                ??_setMotorPWM 001B                  ??_moveForward 0028                   ??_check_RFID 0013  
               __size_of_setup 0036                check_RFID@byte1 0021                check_RFID@byte2 0022  
              check_RFID@byte3 0023                check_RFID@byte4 0024                check_RFID@byte5 0025  
          __end_of_init_sensor 1168                 ___wmul@product 000F            __size_of_returnHome 0044  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       i2u113_40 0F52  
        __size_of_moveBackward 0082                    turnRight@mL 0022                    turnRight@mR 0024  
                     _PIR1bits 000F9E                       _RCONbits 000FD0             __end_of_check_RFID 04F8  
            ___wmul@multiplier 000B                   setMotorPWM@m 0019                   moveForward@i 0029  
             main@moving_speed 0094          __size_of_moveToBeacon 0060           _InterruptHandlerHigh 0008  
                     _ClearLCD 1136                  _movement_time 0044                     ?_init_RFID 0001  
                    _turnRight 0B8A                  ??_processRFID 0004                  _classify_data 09F6  
                  _INTCON2bits 000FF1                 moveBackward@mL 0022                 moveBackward@mR 0024  
                 _moveBackward 0C0C            __end_of_setMotorPWM 074A            __end_of_moveForward 0D10  
                  check_RFID@i 0027                       __Hrparam 0000               __size_of_SendLCD 0030  
                     __Lrparam 0000               __size_of_SetLine 002E                 scanForBeacon@i 003A  
        __size_of_waitForInput 007C                   _moveToBeacon 0E04               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 1150  
               ?_classify_data 000B              check_RFID@dataBuf 0011                     ?_turnRight 0022  
                     __ptext10 04F8                       __ptext11 0B8A                       __ptext20 1136  
                     __ptext12 0EC2                       __ptext21 1058                       __ptext13 09F6  
                     __ptext30 0F1E                       __ptext22 0D8C                       __ptext14 1088  
                     __ptext23 1168                       __ptext15 0F6A                       __ptext24 0844  
                     __ptext16 0C0C                       __ptext25 0626                       __ptext17 0E04  
                     __ptext26 10DC                       __ptext18 0C8E                       __ptext27 0B06  
                     __ptext19 0E64          __end_of_scanForBeacon 0626                       _init_LCD 092E  
                __size_of_main 00FA                  __size_of_stop 005C            __end_of_processRFID 0F6A  
                 _waitForInput 0D10             scanForBeacon@speed 002F                     turnRight@i 0029  
                     int$flags 0049                   ??_returnHome 0033            _InterruptHandlerLow 0018  
                   _LCD_String 0E64          scanForBeacon@raw_data 0037                     _INTCONbits 000FF2  
                  ??_init_RFID 000B                    _setMotorPWM 0626                    _moveForward 0C8E  
                     intlevel1 0000                       intlevel2 0000     scanForBeacon@smoothed_data 003C  
         ?_InterruptHandlerLow 0001             __end_of_returnHome 0FAE                     _OSCCONbits 000FD3  
   processRFID@position_in_buf 0042         ??_InterruptHandlerHigh 0005                ??_classify_data 000F  
             stopAndDisplay@mL 002B               stopAndDisplay@mR 002D                returnHome@speed 002F  
                  ??_turnRight 0028                    _processRFID 0F1E          ??_InterruptHandlerLow 0008  
              stopAndDisplay@i 0035                 returnHome@time 0031                   returnHome@mL 002B  
                 returnHome@mR 002D  
