

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 05 21:44:26 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 2.05
    45                           ; Generated 20/12/2018 GMT
    46                           ; 
    47                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4331 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     _PORTDbits	set	3971
    79  0000                     _CAP1BUFL	set	3944
    80  0000                     _CAP1BUFH	set	3945
    81  0000                     _CAP1CON	set	3939
    82  0000                     _DFLTCON	set	3936
    83  0000                     _ANSEL1	set	4025
    84  0000                     _ANSEL0	set	4024
    85  0000                     _T5CON	set	4023
    86  0000                     _IPR1bits	set	3999
    87  0000                     _PIE1bits	set	3997
    88  0000                     _RCSTAbits	set	4011
    89  0000                     _TXSTAbits	set	4012
    90  0000                     _BAUDCONbits	set	4010
    91  0000                     _SPBRGH	set	4016
    92  0000                     _SPBRG	set	4015
    93  0000                     _TRISAbits	set	3986
    94  0000                     _TRISCbits	set	3988
    95  0000                     _LATDbits	set	3980
    96  0000                     _LATCbits	set	3979
    97  0000                     _LATAbits	set	3977
    98  0000                     _LATB	set	3978
    99  0000                     _PTPERH	set	3962
   100  0000                     _PTPERL	set	3963
   101  0000                     _PWMCON1	set	3950
   102  0000                     _PWMCON0	set	3951
   103  0000                     _PTCON1	set	3966
   104  0000                     _PTCON0	set	3967
   105  0000                     _RCREG	set	4014
   106  0000                     _PIR1bits	set	3998
   107  0000                     _TRISDbits	set	3989
   108  0000                     _TRISBbits	set	3987
   109  0000                     _RCONbits	set	4048
   110  0000                     _INTCONbits	set	4082
   111  0000                     _OSCCONbits	set	4051
   112  0000                     _OSCCON	set	4051
   113  0000                     _PDC1H	set	3958
   114  0000                     _PDC1L	set	3959
   115  0000                     _PDC0H	set	3960
   116  0000                     _PDC0L	set	3961
   117                           
   118                           	psect	smallconst
   119  000300                     __psmallconst:
   120                           	opt callstack 0
   121  000300  00                 	db	0
   122  000301                     STR_4:
   123  000301  52                 	db	82	;'R'
   124  000302  45                 	db	69	;'E'
   125  000303  53                 	db	83	;'S'
   126  000304  45                 	db	69	;'E'
   127  000305  54                 	db	84	;'T'
   128  000306  54                 	db	84	;'T'
   129  000307  49                 	db	73	;'I'
   130  000308  4E                 	db	78	;'N'
   131  000309  47                 	db	71	;'G'
   132  00030A  20                 	db	32
   133  00030B  52                 	db	82	;'R'
   134  00030C  4F                 	db	79	;'O'
   135  00030D  42                 	db	66	;'B'
   136  00030E  4F                 	db	79	;'O'
   137  00030F  54                 	db	84	;'T'
   138  000310  00                 	db	0
   139  000311                     STR_3:
   140  000311  43                 	db	67	;'C'
   141  000312  48                 	db	72	;'H'
   142  000313  45                 	db	69	;'E'
   143  000314  43                 	db	67	;'C'
   144  000315  4B                 	db	75	;'K'
   145  000316  53                 	db	83	;'S'
   146  000317  55                 	db	85	;'U'
   147  000318  4D                 	db	77	;'M'
   148  000319  20                 	db	32
   149  00031A  46                 	db	70	;'F'
   150  00031B  41                 	db	65	;'A'
   151  00031C  49                 	db	73	;'I'
   152  00031D  4C                 	db	76	;'L'
   153  00031E  45                 	db	69	;'E'
   154  00031F  44                 	db	68	;'D'
   155  000320  00                 	db	0
   156  000321                     STR_2:
   157  000321  43                 	db	67	;'C'
   158  000322  48                 	db	72	;'H'
   159  000323  45                 	db	69	;'E'
   160  000324  43                 	db	67	;'C'
   161  000325  4B                 	db	75	;'K'
   162  000326  53                 	db	83	;'S'
   163  000327  55                 	db	85	;'U'
   164  000328  4D                 	db	77	;'M'
   165  000329  20                 	db	32
   166  00032A  50                 	db	80	;'P'
   167  00032B  41                 	db	65	;'A'
   168  00032C  53                 	db	83	;'S'
   169  00032D  53                 	db	83	;'S'
   170  00032E  45                 	db	69	;'E'
   171  00032F  44                 	db	68	;'D'
   172  000330  00                 	db	0
   173  000331                     STR_1:
   174  000331  43                 	db	67	;'C'
   175  000332  72                 	db	114	;'r'
   176  000333  69                 	db	105	;'i'
   177  000334  74                 	db	116	;'t'
   178  000335  69                 	db	105	;'i'
   179  000336  63                 	db	99	;'c'
   180  000337  61                 	db	97	;'a'
   181  000338  6C                 	db	108	;'l'
   182  000339  20                 	db	32
   183  00033A  45                 	db	69	;'E'
   184  00033B  72                 	db	114	;'r'
   185  00033C  72                 	db	114	;'r'
   186  00033D  6F                 	db	111	;'o'
   187  00033E  72                 	db	114	;'r'
   188  00033F  00                 	db	0
   189  000340                     STR_5:
   190  000340  25                 	db	37
   191  000341  75                 	db	117	;'u'
   192  000342  00                 	db	0
   193  0000                     
   194                           ; #config settings
   195  000343  00                 	db	0	; dummy byte at the end
   196  0000                     
   197                           	psect	cinit
   198  000ED6                     __pcinit:
   199                           	opt callstack 0
   200  000ED6                     start_initialization:
   201                           	opt callstack 0
   202  000ED6                     __initialization:
   203                           	opt callstack 0
   204                           
   205                           ; Clear objects allocated to BANK0 (44 bytes)
   206  000ED6  EE00  F060         	lfsr	0,__pbssBANK0
   207  000EDA  0E2C               	movlw	44
   208  000EDC                     clear_0:
   209  000EDC  6AEE               	clrf	postinc0,c
   210  000EDE  06E8               	decf	wreg,f,c
   211  000EE0  E1FD               	bnz	clear_0
   212                           
   213                           ; Clear objects allocated to COMRAM (13 bytes)
   214  000EE2  EE00  F038         	lfsr	0,__pbssCOMRAM
   215  000EE6  0E0D               	movlw	13
   216  000EE8                     clear_1:
   217  000EE8  6AEE               	clrf	postinc0,c
   218  000EEA  06E8               	decf	wreg,f,c
   219  000EEC  E1FD               	bnz	clear_1
   220  000EEE                     end_of_initialization:
   221                           	opt callstack 0
   222  000EEE                     __end_of__initialization:
   223                           	opt callstack 0
   224  000EEE  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   225  000EF0  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   226  000EF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   227  000EF4  6EF8               	movwf	tblptru,c
   228  000EF6  0100               	movlb	0
   229  000EF8  EFDC  F002         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232  000038                     __pbssCOMRAM:
   233                           	opt callstack 0
   234  000038                     	ds	2
   235  00003A                     	ds	2
   236  00003C                     	ds	2
   237  00003E                     	ds	2
   238  000040                     debug@smoothed_data:
   239                           	opt callstack 0
   240  000040                     	ds	2
   241  000042                     processRFID@position_in_buf:
   242                           	opt callstack 0
   243  000042                     	ds	1
   244  000043                     _robot_mode:
   245                           	opt callstack 0
   246  000043                     	ds	1
   247  000044                     _RFID_flag:
   248                           	opt callstack 0
   249  000044                     	ds	1
   250                           
   251                           	psect	bssBANK0
   252  000060                     __pbssBANK0:
   253                           	opt callstack 0
   254  000060                     	ds	32
   255  000080                     _RFIDbuf:
   256                           	opt callstack 0
   257  000080                     	ds	12
   258                           
   259                           	psect	cstackBANK0
   260  00008C                     __pcstackBANK0:
   261                           	opt callstack 0
   262  00008C                     main@searching_speed:
   263                           	opt callstack 0
   264                           
   265                           ; 2 bytes @ 0x0
   266  00008C                     	ds	2
   267  00008E                     main@movementMicros:
   268                           	opt callstack 0
   269                           
   270                           ; 4 bytes @ 0x2
   271  00008E                     	ds	4
   272  000092                     main@moving_speed:
   273                           	opt callstack 0
   274                           
   275                           ; 2 bytes @ 0x6
   276  000092                     	ds	2
   277  000094                     main@motorL:
   278                           	opt callstack 0
   279                           
   280                           ; 9 bytes @ 0x8
   281  000094                     	ds	9
   282  00009D                     main@motorR:
   283                           	opt callstack 0
   284                           
   285                           ; 9 bytes @ 0x11
   286  00009D                     	ds	9
   287                           
   288                           	psect	cstackCOMRAM
   289  000001                     __pcstackCOMRAM:
   290                           	opt callstack 0
   291  000001                     processRFID@RFIDbuf:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  000001                     	ds	2
   296  000003                     processRFID@latestChar:
   297                           	opt callstack 0
   298                           
   299                           ; 1 bytes @ 0x2
   300  000003                     	ds	1
   301  000004                     processRFID@i:
   302                           	opt callstack 0
   303                           
   304                           ; 1 bytes @ 0x3
   305  000004                     	ds	1
   306  000005                     ??_InterruptHandlerHigh:
   307                           
   308                           ; 1 bytes @ 0x4
   309  000005                     	ds	3
   310  000008                     ??_LCDout:
   311  000008                     ?___wmul:
   312                           	opt callstack 0
   313  000008                     initPWM@PWMperiod:
   314                           	opt callstack 0
   315  000008                     classify_data@raw_data:
   316                           	opt callstack 0
   317  000008                     ___wmul@multiplier:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x7
   321  000008                     	ds	1
   322  000009                     LCDout@number:
   323                           	opt callstack 0
   324                           
   325                           ; 1 bytes @ 0x8
   326  000009                     	ds	1
   327  00000A                     SendLCD@type:
   328                           	opt callstack 0
   329  00000A                     classify_data@smoothed:
   330                           	opt callstack 0
   331  00000A                     ___wmul@multiplicand:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0x9
   335  00000A                     	ds	1
   336  00000B                     SendLCD@Byte:
   337                           	opt callstack 0
   338                           
   339                           ; 1 bytes @ 0xA
   340  00000B                     	ds	1
   341  00000C                     ??_init_LCD:
   342  00000C                     ??_ClearLCD:
   343  00000C                     ??_classify_data:
   344  00000C                     SetLine@line:
   345                           	opt callstack 0
   346  00000C                     LCD_String@string:
   347                           	opt callstack 0
   348  00000C                     ___wmul@product:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0xB
   352  00000C                     	ds	1
   353  00000D                     display_RFID@dataBuf:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0xC
   357  00000D                     	ds	1
   358  00000E                     ?___awdiv:
   359                           	opt callstack 0
   360  00000E                     check_RFID@dataBuf:
   361                           	opt callstack 0
   362  00000E                     ___awdiv@dividend:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0xD
   366  00000E                     	ds	1
   367  00000F                     display_RFID@i:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0xE
   371  00000F                     	ds	1
   372  000010                     ??_check_RFID:
   373  000010                     ___awdiv@divisor:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0xF
   377  000010                     	ds	2
   378  000012                     ___awdiv@counter:
   379                           	opt callstack 0
   380  000012                     check_RFID@hexBuf:
   381                           	opt callstack 0
   382                           
   383                           ; 12 bytes @ 0x11
   384  000012                     	ds	1
   385  000013                     ___awdiv@sign:
   386                           	opt callstack 0
   387                           
   388                           ; 1 bytes @ 0x12
   389  000013                     	ds	1
   390  000014                     classify_data@previous:
   391                           	opt callstack 0
   392  000014                     ___awdiv@quotient:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x13
   396  000014                     	ds	2
   397  000016                     setMotorPWM@m:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x15
   401  000016                     	ds	2
   402  000018                     ??_setMotorPWM:
   403                           
   404                           ; 1 bytes @ 0x17
   405  000018                     	ds	5
   406  00001D                     setMotorPWM@PWMduty:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x1C
   410  00001D                     	ds	1
   411  00001E                     check_RFID@byte1:
   412                           	opt callstack 0
   413                           
   414                           ; 1 bytes @ 0x1D
   415  00001E                     	ds	1
   416  00001F                     check_RFID@byte2:
   417                           	opt callstack 0
   418  00001F                     stop@mL:
   419                           	opt callstack 0
   420  00001F                     turnRight@mL:
   421                           	opt callstack 0
   422  00001F                     moveForward@mL:
   423                           	opt callstack 0
   424  00001F                     moveBackward@mL:
   425                           	opt callstack 0
   426  00001F                     init_motor_struct@mL:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x1E
   430  00001F                     	ds	1
   431  000020                     check_RFID@byte3:
   432                           	opt callstack 0
   433                           
   434                           ; 1 bytes @ 0x1F
   435  000020                     	ds	1
   436  000021                     check_RFID@byte4:
   437                           	opt callstack 0
   438  000021                     stop@mR:
   439                           	opt callstack 0
   440  000021                     turnRight@mR:
   441                           	opt callstack 0
   442  000021                     moveForward@mR:
   443                           	opt callstack 0
   444  000021                     moveBackward@mR:
   445                           	opt callstack 0
   446  000021                     init_motor_struct@mR:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x20
   450  000021                     	ds	1
   451  000022                     check_RFID@byte5:
   452                           	opt callstack 0
   453                           
   454                           ; 1 bytes @ 0x21
   455  000022                     	ds	1
   456  000023                     check_RFID@checksum:
   457                           	opt callstack 0
   458  000023                     stop@initial_speed:
   459                           	opt callstack 0
   460  000023                     turnRight@max_power:
   461                           	opt callstack 0
   462  000023                     moveForward@max_power:
   463                           	opt callstack 0
   464  000023                     moveBackward@max_power:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x22
   468  000023                     	ds	1
   469  000024                     check_RFID@i:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x23
   473  000024                     	ds	1
   474  000025                     ??_stop:
   475  000025                     ??_turnRight:
   476  000025                     ??_moveForward:
   477  000025                     ??_moveBackward:
   478                           
   479                           ; 1 bytes @ 0x24
   480  000025                     	ds	1
   481  000026                     stop@i:
   482                           	opt callstack 0
   483  000026                     turnRight@i:
   484                           	opt callstack 0
   485  000026                     moveForward@i:
   486                           	opt callstack 0
   487  000026                     moveBackward@i:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x25
   491  000026                     	ds	2
   492  000028                     scanForBeacon@mL:
   493                           	opt callstack 0
   494  000028                     moveToBeacon@mL:
   495                           	opt callstack 0
   496  000028                     returnHome@mL:
   497                           	opt callstack 0
   498  000028                     stopAndDisplay@mL:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x27
   502  000028                     	ds	2
   503  00002A                     scanForBeacon@mR:
   504                           	opt callstack 0
   505  00002A                     moveToBeacon@mR:
   506                           	opt callstack 0
   507  00002A                     returnHome@mR:
   508                           	opt callstack 0
   509  00002A                     stopAndDisplay@mR:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  00002A                     	ds	2
   514  00002C                     scanForBeacon@speed:
   515                           	opt callstack 0
   516  00002C                     moveToBeacon@speed:
   517                           	opt callstack 0
   518  00002C                     returnHome@speed:
   519                           	opt callstack 0
   520  00002C                     stopAndDisplay@speed:
   521                           	opt callstack 0
   522                           
   523                           ; 2 bytes @ 0x2B
   524  00002C                     	ds	2
   525  00002E                     ??_scanForBeacon:
   526  00002E                     ??_stopAndDisplay:
   527  00002E                     moveToBeacon@micros:
   528                           	opt callstack 0
   529  00002E                     returnHome@micros:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x2D
   533  00002E                     	ds	2
   534  000030                     scanForBeacon@raw_data:
   535                           	opt callstack 0
   536  000030                     moveToBeacon@RFID_buffer:
   537                           	opt callstack 0
   538  000030                     stopAndDisplay@i:
   539                           	opt callstack 0
   540                           
   541                           ; 2 bytes @ 0x2F
   542  000030                     	ds	2
   543  000032                     scanForBeacon@beacon_location:
   544                           	opt callstack 0
   545  000032                     moveToBeacon@exit_flag:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x31
   549  000032                     	ds	1
   550  000033                     scanForBeacon@smoothed_data:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x32
   554  000033                     	ds	1
   555  000034                     returnHome@i:
   556                           	opt callstack 0
   557                           
   558                           ; 4 bytes @ 0x33
   559  000034                     	ds	4
   560  000038                     
   561                           ; 1 bytes @ 0x37
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 78 in file "main.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  motorR          9   17[BANK0 ] struct DC_motor
   572 ;;  motorL          9    8[BANK0 ] struct DC_motor
   573 ;;  movementMicr    4    2[BANK0 ] unsigned long 
   574 ;;  moving_speed    2    6[BANK0 ] int 
   575 ;;  searching_sp    2    0[BANK0 ] int 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   585 ;;      Params:         0       0       0       0
   586 ;;      Locals:         0      26       0       0
   587 ;;      Temps:          0       0       0       0
   588 ;;      Totals:         0      26       0       0
   589 ;;Total ram usage:       26 bytes
   590 ;; Hardware stack levels required when called:    8
   591 ;; This function calls:
   592 ;;		_LCD_String
   593 ;;		_init_motor_struct
   594 ;;		_moveToBeacon
   595 ;;		_returnHome
   596 ;;		_scanForBeacon
   597 ;;		_setup
   598 ;;		_stopAndDisplay
   599 ;; This function is called by:
   600 ;;		Startup code after reset
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text0
   605  0005B8                     __ptext0:
   606                           	opt callstack 0
   607  0005B8                     _main:
   608                           	opt callstack 23
   609                           
   610                           ;main.c: 81:   setup();
   611                           
   612                           ;incstack = 0
   613  0005B8  EC3D  F007         	call	_setup	;wreg free
   614                           
   615                           ;main.c: 84:   struct DC_motor motorL, motorR;;main.c: 85:   init_motor_struct(&motorL, 
      +                          &motorR);
   616  0005BC  0E94               	movlw	low main@motorL
   617  0005BE  6E1F               	movwf	init_motor_struct@mL,c
   618  0005C0  0E00               	movlw	high main@motorL
   619  0005C2  6E20               	movwf	init_motor_struct@mL+1,c
   620  0005C4  0E9D               	movlw	low main@motorR
   621  0005C6  6E21               	movwf	init_motor_struct@mR,c
   622  0005C8  0E00               	movlw	high main@motorR
   623  0005CA  6E22               	movwf	init_motor_struct@mR+1,c
   624  0005CC  EC5B  F003         	call	_init_motor_struct	;wreg free
   625                           
   626                           ;main.c: 88:   int searching_speed = 75;
   627  0005D0  0E00               	movlw	0
   628  0005D2  0100               	movlb	0	; () banked
   629  0005D4  6F8D               	movwf	(main@searching_speed+1)& (0+255),b
   630  0005D6  0E4B               	movlw	75
   631  0005D8  6F8C               	movwf	main@searching_speed& (0+255),b
   632                           
   633                           ; BSR set to: 0
   634                           ;main.c: 89:   int moving_speed = 75;
   635  0005DA  0E00               	movlw	0
   636  0005DC  6F93               	movwf	(main@moving_speed+1)& (0+255),b
   637  0005DE  0E4B               	movlw	75
   638  0005E0  6F92               	movwf	main@moving_speed& (0+255),b
   639                           
   640                           ; BSR set to: 0
   641                           ;main.c: 91:   unsigned long movementMicros=0;
   642  0005E2  0E00               	movlw	0
   643  0005E4  6F8E               	movwf	main@movementMicros& (0+255),b
   644  0005E6  0E00               	movlw	0
   645  0005E8  6F8F               	movwf	(main@movementMicros+1)& (0+255),b
   646  0005EA  0E00               	movlw	0
   647  0005EC  6F90               	movwf	(main@movementMicros+2)& (0+255),b
   648  0005EE  0E00               	movlw	0
   649  0005F0  6F91               	movwf	(main@movementMicros+3)& (0+255),b
   650  0005F2                     l2418:
   651                           
   652                           ;main.c: 95:   {;main.c: 97:       if(robot_mode == 0)
   653  0005F2  5043               	movf	_robot_mode,w,c	;volatile
   654  0005F4  A4D8               	btfss	status,2,c
   655  0005F6  D00F               	goto	l2422
   656                           
   657                           ;main.c: 98:       {;main.c: 99:           robot_mode = scanForBeacon(&motorL, &motorR, 
      +                          searching_speed);
   658  0005F8  0E94               	movlw	low main@motorL
   659  0005FA  6E28               	movwf	scanForBeacon@mL,c
   660  0005FC  0E00               	movlw	high main@motorL
   661  0005FE  6E29               	movwf	scanForBeacon@mL+1,c
   662  000600  0E9D               	movlw	low main@motorR
   663  000602  6E2A               	movwf	scanForBeacon@mR,c
   664  000604  0E00               	movlw	high main@motorR
   665  000606  6E2B               	movwf	scanForBeacon@mR+1,c
   666  000608  C08C  F02C         	movff	main@searching_speed,scanForBeacon@speed
   667  00060C  C08D  F02D         	movff	main@searching_speed+1,scanForBeacon@speed+1
   668  000610  ECF3  F005         	call	_scanForBeacon	;wreg free
   669  000614  D047               	goto	L3
   670  000616                     l2422:
   671  000616  0443               	decf	_robot_mode,w,c	;volatile
   672  000618  A4D8               	btfss	status,2,c
   673  00061A  D01B               	goto	l2426
   674                           
   675                           ;main.c: 105:       {;main.c: 106:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   676  00061C  0E94               	movlw	low main@motorL
   677  00061E  6E28               	movwf	moveToBeacon@mL,c
   678  000620  0E00               	movlw	high main@motorL
   679  000622  6E29               	movwf	moveToBeacon@mL+1,c
   680  000624  0E9D               	movlw	low main@motorR
   681  000626  6E2A               	movwf	moveToBeacon@mR,c
   682  000628  0E00               	movlw	high main@motorR
   683  00062A  6E2B               	movwf	moveToBeacon@mR+1,c
   684  00062C  C092  F02C         	movff	main@moving_speed,moveToBeacon@speed
   685  000630  C093  F02D         	movff	main@moving_speed+1,moveToBeacon@speed+1
   686  000634  0E8E               	movlw	low main@movementMicros
   687  000636  6E2E               	movwf	moveToBeacon@micros,c
   688  000638  0E00               	movlw	high main@movementMicros
   689  00063A  6E2F               	movwf	moveToBeacon@micros+1,c
   690  00063C  0E80               	movlw	low _RFIDbuf
   691  00063E  6E30               	movwf	moveToBeacon@RFID_buffer,c
   692  000640  0E00               	movlw	high _RFIDbuf
   693  000642  6E31               	movwf	moveToBeacon@RFID_buffer+1,c
   694  000644  0E44               	movlw	low _RFID_flag
   695  000646  6E32               	movwf	moveToBeacon@exit_flag,c
   696  000648  0E00               	movlw	high _RFID_flag
   697  00064A  6E33               	movwf	moveToBeacon@exit_flag+1,c
   698  00064C  ECB2  F006         	call	_moveToBeacon	;wreg free
   699  000650  D029               	goto	L3
   700  000652                     l2426:
   701  000652  0E02               	movlw	2
   702  000654  1843               	xorwf	_robot_mode,w,c	;volatile
   703  000656  A4D8               	btfss	status,2,c
   704  000658  D013               	goto	l2430
   705                           
   706                           ;main.c: 112:       {;main.c: 113:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   707  00065A  0E94               	movlw	low main@motorL
   708  00065C  6E28               	movwf	returnHome@mL,c
   709  00065E  0E00               	movlw	high main@motorL
   710  000660  6E29               	movwf	returnHome@mL+1,c
   711  000662  0E9D               	movlw	low main@motorR
   712  000664  6E2A               	movwf	returnHome@mR,c
   713  000666  0E00               	movlw	high main@motorR
   714  000668  6E2B               	movwf	returnHome@mR+1,c
   715  00066A  C092  F02C         	movff	main@moving_speed,returnHome@speed
   716  00066E  C093  F02D         	movff	main@moving_speed+1,returnHome@speed+1
   717  000672  0E8E               	movlw	low main@movementMicros
   718  000674  6E2E               	movwf	returnHome@micros,c
   719  000676  0E00               	movlw	high main@movementMicros
   720  000678  6E2F               	movwf	returnHome@micros+1,c
   721  00067A  EC84  F006         	call	_returnHome	;wreg free
   722  00067E  D012               	goto	L3
   723  000680                     l2430:
   724  000680  0E03               	movlw	3
   725  000682  1843               	xorwf	_robot_mode,w,c	;volatile
   726  000684  A4D8               	btfss	status,2,c
   727  000686  D010               	goto	l2434
   728                           
   729                           ;main.c: 119:       {;main.c: 120:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed);
   730  000688  0E94               	movlw	low main@motorL
   731  00068A  6E28               	movwf	stopAndDisplay@mL,c
   732  00068C  0E00               	movlw	high main@motorL
   733  00068E  6E29               	movwf	stopAndDisplay@mL+1,c
   734  000690  0E9D               	movlw	low main@motorR
   735  000692  6E2A               	movwf	stopAndDisplay@mR,c
   736  000694  0E00               	movlw	high main@motorR
   737  000696  6E2B               	movwf	stopAndDisplay@mR+1,c
   738  000698  C092  F02C         	movff	main@moving_speed,stopAndDisplay@speed
   739  00069C  C093  F02D         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   740  0006A0  ECBC  F005         	call	_stopAndDisplay	;wreg free
   741  0006A4                     L3:
   742  0006A4  6E43               	movwf	_robot_mode,c	;volatile
   743                           
   744                           ;main.c: 121:       }
   745  0006A6  D7A5               	goto	l2418
   746  0006A8                     l2434:
   747                           
   748                           ;main.c: 124:       {;main.c: 125:           LCD_String("Critical Error");
   749  0006A8  0E31               	movlw	low STR_1
   750  0006AA  6E0C               	movwf	LCD_String@string,c
   751  0006AC  0E03               	movlw	high STR_1
   752  0006AE  6E0D               	movwf	LCD_String@string+1,c
   753  0006B0  EC27  F006         	call	_LCD_String	;wreg free
   754  0006B4  D79E               	goto	l2418
   755  0006B6                     __end_of_main:
   756                           	opt callstack 0
   757                           
   758 ;; *************** function _stopAndDisplay *****************
   759 ;; Defined at:
   760 ;;		line 73 in file "subroutines.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;  mL              2   39[COMRAM] PTR struct DC_motor
   763 ;;		 -> main@motorL(9), 
   764 ;;  mR              2   41[COMRAM] PTR struct DC_motor
   765 ;;		 -> main@motorR(9), 
   766 ;;  speed           2   43[COMRAM] int 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  i               2   47[COMRAM] int 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      unsigned char 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   778 ;;      Params:         6       0       0       0
   779 ;;      Locals:         2       0       0       0
   780 ;;      Temps:          2       0       0       0
   781 ;;      Totals:        10       0       0       0
   782 ;;Total ram usage:       10 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    6
   785 ;; This function calls:
   786 ;;		_ClearLCD
   787 ;;		_LCD_String
   788 ;;		_stop
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text1
   795  000B78                     __ptext1:
   796                           	opt callstack 0
   797  000B78                     _stopAndDisplay:
   798                           	opt callstack 24
   799                           
   800                           ;subroutines.c: 73: volatile char stopAndDisplay(struct DC_motor *mL, struct DC_motor *m
      +                          R, int speed);subroutines.c: 74: {;subroutines.c: 75:     stop(mL, mR,speed);
   801                           
   802                           ;incstack = 0
   803  000B78  C028  F01F         	movff	stopAndDisplay@mL,stop@mL
   804  000B7C  C029  F020         	movff	stopAndDisplay@mL+1,stop@mL+1
   805  000B80  C02A  F021         	movff	stopAndDisplay@mR,stop@mR
   806  000B84  C02B  F022         	movff	stopAndDisplay@mR+1,stop@mR+1
   807  000B88  C02C  F023         	movff	stopAndDisplay@speed,stop@initial_speed
   808  000B8C  C02D  F024         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
   809  000B90  EC56  F006         	call	_stop	;wreg free
   810  000B94  D025               	goto	l2406
   811  000B96                     l2390:
   812                           
   813                           ;subroutines.c: 80:             {;subroutines.c: 81:                 ClearLCD();
   814  000B96  ECB9  F007         	call	_ClearLCD	;wreg free
   815                           
   816                           ;subroutines.c: 82:                 LCD_String("RESETTING ROBOT");
   817  000B9A  0E01               	movlw	low STR_4
   818  000B9C  6E0C               	movwf	LCD_String@string,c
   819  000B9E  0E03               	movlw	high STR_4
   820  000BA0  6E0D               	movwf	LCD_String@string+1,c
   821  000BA2  EC27  F006         	call	_LCD_String	;wreg free
   822                           
   823                           ;subroutines.c: 83:                 for(int i=0; i<10;i++)
   824  000BA6  0E00               	movlw	0
   825  000BA8  6E31               	movwf	stopAndDisplay@i+1,c
   826  000BAA  0E00               	movlw	0
   827  000BAC  6E30               	movwf	stopAndDisplay@i,c
   828  000BAE                     l2400:
   829                           
   830                           ;subroutines.c: 84:                 {;subroutines.c: 85:                     _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
   831  000BAE  0E02               	movlw	2
   832  000BB0  6E2F               	movwf	(??_stopAndDisplay+1)& (0+255),c
   833  000BB2  0E04               	movlw	4
   834  000BB4  6E2E               	movwf	??_stopAndDisplay& (0+255),c
   835  000BB6  0EBA               	movlw	186
   836  000BB8                     u1677:
   837  000BB8  2EE8               	decfsz	wreg,f,c
   838  000BBA  D7FE               	bra	u1677
   839  000BBC  2E2E               	decfsz	??_stopAndDisplay& (0+255),f,c
   840  000BBE  D7FC               	bra	u1677
   841  000BC0  2E2F               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
   842  000BC2  D7FA               	bra	u1677
   843  000BC4  D000               	nop2	
   844                           
   845                           ;subroutines.c: 86:                 }
   846  000BC6  4A30               	infsnz	stopAndDisplay@i,f,c
   847  000BC8  2A31               	incf	stopAndDisplay@i+1,f,c
   848  000BCA  BE31               	btfsc	stopAndDisplay@i+1,7,c
   849  000BCC  D7F0               	goto	l2400
   850  000BCE  5031               	movf	stopAndDisplay@i+1,w,c
   851  000BD0  E104               	bnz	u1610
   852  000BD2  0E0A               	movlw	10
   853  000BD4  5C30               	subwf	stopAndDisplay@i,w,c
   854  000BD6  A0D8               	btfss	status,0,c
   855  000BD8  D7EA               	goto	l2400
   856  000BDA                     u1610:
   857                           
   858                           ;subroutines.c: 87:                 ClearLCD();
   859  000BDA  ECB9  F007         	call	_ClearLCD	;wreg free
   860  000BDE  00FF               	reset		;# 
   861  000BE0                     l2406:
   862                           
   863                           ;subroutines.c: 79:             while(PORTDbits.RD2 == 1)
   864  000BE0  A483               	btfss	3971,2,c	;volatile
   865  000BE2  D7FE               	goto	l2406
   866  000BE4  D7D8               	goto	l2390
   867  000BE6                     __end_of_stopAndDisplay:
   868                           	opt callstack 0
   869                           
   870 ;; *************** function _stop *****************
   871 ;; Defined at:
   872 ;;		line 40 in file "dc_motor.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   875 ;;		 -> main@motorL(9), 
   876 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   877 ;;		 -> main@motorR(9), 
   878 ;;  initial_spee    2   34[COMRAM] int 
   879 ;; Auto vars:     Size  Location     Type
   880 ;;  i               2   37[COMRAM] int 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   890 ;;      Params:         6       0       0       0
   891 ;;      Locals:         2       0       0       0
   892 ;;      Temps:          1       0       0       0
   893 ;;      Totals:         9       0       0       0
   894 ;;Total ram usage:        9 bytes
   895 ;; Hardware stack levels used:    1
   896 ;; Hardware stack levels required when called:    4
   897 ;; This function calls:
   898 ;;		_setMotorPWM
   899 ;; This function is called by:
   900 ;;		_stopAndDisplay
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text2
   905  000CAC                     __ptext2:
   906                           	opt callstack 0
   907  000CAC                     _stop:
   908                           	opt callstack 25
   909                           
   910                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
   911                           
   912                           ;incstack = 0
   913  000CAC  C023  F026         	movff	stop@initial_speed,stop@i
   914  000CB0  C024  F027         	movff	stop@initial_speed+1,stop@i+1
   915  000CB4                     l2186:
   916  000CB4  BE27               	btfsc	stop@i+1,7,c
   917  000CB6  0012               	return	
   918  000CB8  5027               	movf	stop@i+1,w,c
   919  000CBA  E103               	bnz	l2190
   920  000CBC  0426               	decf	stop@i,w,c
   921  000CBE  A0D8               	btfss	status,0,c
   922  000CC0  0012               	return	
   923  000CC2                     l2190:
   924                           
   925                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
   926  000CC2  C01F  FFD9         	movff	stop@mL,fsr2l
   927  000CC6  C020  FFDA         	movff	stop@mL+1,fsr2h
   928  000CCA  C026  FFDF         	movff	stop@i,indf2
   929                           
   930                           ;dc_motor.c: 45:         mR->power = i;
   931  000CCE  C021  FFD9         	movff	stop@mR,fsr2l
   932  000CD2  C022  FFDA         	movff	stop@mR+1,fsr2h
   933  000CD6  C026  FFDF         	movff	stop@i,indf2
   934                           
   935                           ;dc_motor.c: 46:         setMotorPWM(mL);
   936  000CDA  C01F  F016         	movff	stop@mL,setMotorPWM@m
   937  000CDE  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
   938  000CE2  EC4A  F002         	call	_setMotorPWM	;wreg free
   939                           
   940                           ;dc_motor.c: 47:         setMotorPWM(mR);
   941  000CE6  C021  F016         	movff	stop@mR,setMotorPWM@m
   942  000CEA  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
   943  000CEE  EC4A  F002         	call	_setMotorPWM	;wreg free
   944                           
   945                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
   946  000CF2  0E03               	movlw	3
   947  000CF4  6E25               	movwf	??_stop& (0+255),c
   948  000CF6  0E98               	movlw	152
   949  000CF8                     u1687:
   950  000CF8  2EE8               	decfsz	wreg,f,c
   951  000CFA  D7FE               	bra	u1687
   952  000CFC  2E25               	decfsz	??_stop& (0+255),f,c
   953  000CFE  D7FC               	bra	u1687
   954                           
   955                           ;dc_motor.c: 49:     }
   956  000D00  0626               	decf	stop@i,f,c
   957  000D02  A0D8               	btfss	status,0,c
   958  000D04  0627               	decf	stop@i+1,f,c
   959  000D06  D7D6               	goto	l2186
   960  000D08                     __end_of_stop:
   961                           	opt callstack 0
   962                           
   963 ;; *************** function _setup *****************
   964 ;; Defined at:
   965 ;;		line 39 in file "main.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, status,2, status,0, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   979 ;;      Params:         0       0       0       0
   980 ;;      Locals:         0       0       0       0
   981 ;;      Temps:          0       0       0       0
   982 ;;      Totals:         0       0       0       0
   983 ;;Total ram usage:        0 bytes
   984 ;; Hardware stack levels used:    1
   985 ;; Hardware stack levels required when called:    6
   986 ;; This function calls:
   987 ;;		_initPWM
   988 ;;		_init_LCD
   989 ;;		_init_RFID
   990 ;;		_init_sensor
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text3
   997  000E7A                     __ptext3:
   998                           	opt callstack 0
   999  000E7A                     _setup:
  1000                           	opt callstack 24
  1001                           
  1002                           ;main.c: 42:     OSCCON = 0x72;
  1003                           
  1004                           ;incstack = 0
  1005  000E7A  0E72               	movlw	114
  1006  000E7C  6ED3               	movwf	4051,c	;volatile
  1007  000E7E                     l47:
  1008  000E7E  A4D3               	btfss	4051,2,c	;volatile
  1009  000E80  D7FE               	goto	l47
  1010                           
  1011                           ;main.c: 44:     INTCONbits.GIEH = 1;
  1012  000E82  8EF2               	bsf	4082,7,c	;volatile
  1013                           
  1014                           ;main.c: 45:     INTCONbits.GIEL = 1;
  1015  000E84  8CF2               	bsf	4082,6,c	;volatile
  1016                           
  1017                           ;main.c: 46:     RCONbits.IPEN=1;
  1018  000E86  8ED0               	bsf	4048,7,c	;volatile
  1019                           
  1020                           ;main.c: 49:     init_LCD();
  1021  000E88  ECD0  F003         	call	_init_LCD	;wreg free
  1022                           
  1023                           ;main.c: 50:     init_RFID();
  1024  000E8C  EC9F  F007         	call	_init_RFID	;wreg free
  1025                           
  1026                           ;main.c: 51:     init_sensor();
  1027  000E90  EC91  F007         	call	_init_sensor	;wreg free
  1028                           
  1029                           ;main.c: 52:     initPWM(199);
  1030  000E94  0E00               	movlw	0
  1031  000E96  6E09               	movwf	initPWM@PWMperiod+1,c
  1032  000E98  0EC7               	movlw	199
  1033  000E9A  6E08               	movwf	initPWM@PWMperiod,c
  1034  000E9C  ECAC  F007         	call	_initPWM	;wreg free
  1035                           
  1036                           ;main.c: 54:     TRISBbits.RB0 = 0;
  1037  000EA0  9093               	bcf	3987,0,c	;volatile
  1038                           
  1039                           ;main.c: 55:     TRISBbits.RB2 = 0;
  1040  000EA2  9493               	bcf	3987,2,c	;volatile
  1041                           
  1042                           ;main.c: 56:     TRISDbits.RD2 = 1;
  1043  000EA4  8495               	bsf	3989,2,c	;volatile
  1044  000EA6  0012               	return		;funcret
  1045  000EA8                     __end_of_setup:
  1046                           	opt callstack 0
  1047                           
  1048 ;; *************** function _init_sensor *****************
  1049 ;; Defined at:
  1050 ;;		line 14 in file "signal_processing.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;  throwaway       2    0        unsigned int 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1064 ;;      Params:         0       0       0       0
  1065 ;;      Locals:         2       0       0       0
  1066 ;;      Temps:          0       0       0       0
  1067 ;;      Totals:         2       0       0       0
  1068 ;;Total ram usage:        2 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    2
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_setup
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text4
  1079  000F22                     __ptext4:
  1080                           	opt callstack 0
  1081  000F22                     _init_sensor:
  1082                           	opt callstack 27
  1083                           
  1084                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1085                           
  1086                           ;incstack = 0
  1087  000F22  0E01               	movlw	1
  1088  000F24  6EB7               	movwf	4023,c	;volatile
  1089                           
  1090                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1091  000F26  8492               	bsf	3986,2,c	;volatile
  1092                           
  1093                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1094  000F28  0E00               	movlw	0
  1095  000F2A  6EB8               	movwf	4024,c	;volatile
  1096                           
  1097                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1098  000F2C  0E00               	movlw	0
  1099  000F2E  6EB9               	movwf	4025,c	;volatile
  1100                           
  1101                           ;signal_processing.c: 23:     DFLTCON = 0b00001000;
  1102  000F30  0E08               	movlw	8
  1103  000F32  6E60               	movwf	3936,c	;volatile
  1104                           
  1105                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1106  000F34  0E47               	movlw	71
  1107  000F36  6E63               	movwf	3939,c	;volatile
  1108  000F38  5069               	movf	3945,w,c	;volatile
  1109  000F3A  5068               	movf	3944,w,c	;volatile
  1110  000F3C  0012               	return		;funcret
  1111  000F3E                     __end_of_init_sensor:
  1112                           	opt callstack 0
  1113                           
  1114 ;; *************** function _init_RFID *****************
  1115 ;; Defined at:
  1116 ;;		line 13 in file "RFID.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1130 ;;      Params:         0       0       0       0
  1131 ;;      Locals:         0       0       0       0
  1132 ;;      Temps:          0       0       0       0
  1133 ;;      Totals:         0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    2
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_setup
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text5
  1145  000F3E                     __ptext5:
  1146                           	opt callstack 0
  1147  000F3E                     _init_RFID:
  1148                           	opt callstack 27
  1149                           
  1150                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1151                           
  1152                           ;incstack = 0
  1153  000F3E  8E94               	bsf	3988,7,c	;volatile
  1154                           
  1155                           ;RFID.c: 19:     SPBRG = 203;
  1156  000F40  0ECB               	movlw	203
  1157  000F42  6EAF               	movwf	4015,c	;volatile
  1158                           
  1159                           ;RFID.c: 20:     SPBRGH = 0;
  1160  000F44  0E00               	movlw	0
  1161  000F46  6EB0               	movwf	4016,c	;volatile
  1162                           
  1163                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1164  000F48  86AA               	bsf	4010,3,c	;volatile
  1165                           
  1166                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1167  000F4A  84AC               	bsf	4012,2,c	;volatile
  1168                           
  1169                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1170  000F4C  88AB               	bsf	4011,4,c	;volatile
  1171                           
  1172                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1173  000F4E  8EAB               	bsf	4011,7,c	;volatile
  1174                           
  1175                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1176  000F50  8AAC               	bsf	4012,5,c	;volatile
  1177                           
  1178                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1179  000F52  8A9D               	bsf	3997,5,c	;volatile
  1180                           
  1181                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1182  000F54  8A9F               	bsf	3999,5,c	;volatile
  1183  000F56  0012               	return		;funcret
  1184  000F58                     __end_of_init_RFID:
  1185                           	opt callstack 0
  1186                           
  1187 ;; *************** function _init_LCD *****************
  1188 ;; Defined at:
  1189 ;;		line 56 in file "LCDIO.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2, status,0, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1203 ;;      Params:         0       0       0       0
  1204 ;;      Locals:         0       0       0       0
  1205 ;;      Temps:          1       0       0       0
  1206 ;;      Totals:         1       0       0       0
  1207 ;;Total ram usage:        1 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    5
  1210 ;; This function calls:
  1211 ;;		_LCDout
  1212 ;;		_SendLCD
  1213 ;; This function is called by:
  1214 ;;		_setup
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text6
  1219  0007A0                     __ptext6:
  1220                           	opt callstack 0
  1221  0007A0                     _init_LCD:
  1222                           	opt callstack 24
  1223                           
  1224                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1225                           
  1226                           ;incstack = 0
  1227  0007A0  9094               	bcf	3988,0,c	;volatile
  1228                           
  1229                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1230  0007A2  9E92               	bcf	3986,7,c	;volatile
  1231                           
  1232                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1233  0007A4  9694               	bcf	3988,3,c	;volatile
  1234                           
  1235                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1236  0007A6  9095               	bcf	3989,0,c	;volatile
  1237                           
  1238                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1239  0007A8  9295               	bcf	3989,1,c	;volatile
  1240                           
  1241                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1242  0007AA  9C92               	bcf	3986,6,c	;volatile
  1243                           
  1244                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1245  0007AC  908C               	bcf	3980,0,c	;volatile
  1246                           
  1247                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1248  0007AE  928C               	bcf	3980,1,c	;volatile
  1249                           
  1250                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1251  0007B0  968B               	bcf	3979,3,c	;volatile
  1252                           
  1253                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1254  0007B2  908B               	bcf	3979,0,c	;volatile
  1255                           
  1256                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1257  0007B4  9C89               	bcf	3977,6,c	;volatile
  1258                           
  1259                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1260  0007B6  9E89               	bcf	3977,7,c	;volatile
  1261                           
  1262                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1263  0007B8  0E27               	movlw	39
  1264  0007BA  6E0C               	movwf	??_init_LCD& (0+255),c
  1265  0007BC  0EF5               	movlw	245
  1266  0007BE                     u1697:
  1267  0007BE  2EE8               	decfsz	wreg,f,c
  1268  0007C0  D7FE               	bra	u1697
  1269  0007C2  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1270  0007C4  D7FC               	bra	u1697
  1271  0007C6  F000               	nop	
  1272                           
  1273                           ;LCDIO.c: 76:  LCDout(0b0011);
  1274  0007C8  0E03               	movlw	3
  1275  0007CA  EC80  F005         	call	_LCDout
  1276                           
  1277                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1278  0007CE  0E0D               	movlw	13
  1279  0007D0  6E0C               	movwf	??_init_LCD& (0+255),c
  1280  0007D2  0EFC               	movlw	252
  1281  0007D4                     u1707:
  1282  0007D4  2EE8               	decfsz	wreg,f,c
  1283  0007D6  D7FE               	bra	u1707
  1284  0007D8  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1285  0007DA  D7FC               	bra	u1707
  1286                           
  1287                           ;LCDIO.c: 78:  LCDout(0b0011);
  1288  0007DC  0E03               	movlw	3
  1289  0007DE  EC80  F005         	call	_LCDout
  1290                           
  1291                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1292  0007E2  0E85               	movlw	133
  1293  0007E4                     u1717:
  1294  0007E4  2EE8               	decfsz	wreg,f,c
  1295  0007E6  D7FE               	bra	u1717
  1296  0007E8  F000               	nop	
  1297                           
  1298                           ;LCDIO.c: 80:  LCDout(0b0011);
  1299  0007EA  0E03               	movlw	3
  1300  0007EC  EC80  F005         	call	_LCDout
  1301                           
  1302                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1303  0007F0  0E21               	movlw	33
  1304  0007F2                     u1727:
  1305  0007F2  2EE8               	decfsz	wreg,f,c
  1306  0007F4  D7FE               	bra	u1727
  1307  0007F6  F000               	nop	
  1308                           
  1309                           ;LCDIO.c: 82:  LCDout(0b0010);
  1310  0007F8  0E02               	movlw	2
  1311  0007FA  EC80  F005         	call	_LCDout
  1312                           
  1313                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1314  0007FE  0E21               	movlw	33
  1315  000800                     u1737:
  1316  000800  2EE8               	decfsz	wreg,f,c
  1317  000802  D7FE               	bra	u1737
  1318  000804  F000               	nop	
  1319                           
  1320                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1321  000806  0E00               	movlw	0
  1322  000808  6E0A               	movwf	SendLCD@type,c
  1323  00080A  0E28               	movlw	40
  1324  00080C  EC25  F007         	call	_SendLCD
  1325                           
  1326                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1327  000810  0E21               	movlw	33
  1328  000812                     u1747:
  1329  000812  2EE8               	decfsz	wreg,f,c
  1330  000814  D7FE               	bra	u1747
  1331  000816  F000               	nop	
  1332                           
  1333                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1334  000818  0E00               	movlw	0
  1335  00081A  6E0A               	movwf	SendLCD@type,c
  1336  00081C  0E08               	movlw	8
  1337  00081E  EC25  F007         	call	_SendLCD
  1338                           
  1339                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1340  000822  0E21               	movlw	33
  1341  000824                     u1757:
  1342  000824  2EE8               	decfsz	wreg,f,c
  1343  000826  D7FE               	bra	u1757
  1344  000828  F000               	nop	
  1345                           
  1346                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1347  00082A  0E00               	movlw	0
  1348  00082C  6E0A               	movwf	SendLCD@type,c
  1349  00082E  0E01               	movlw	1
  1350  000830  EC25  F007         	call	_SendLCD
  1351                           
  1352                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1353  000834  0E0D               	movlw	13
  1354  000836  6E0C               	movwf	??_init_LCD& (0+255),c
  1355  000838  0EFC               	movlw	252
  1356  00083A                     u1767:
  1357  00083A  2EE8               	decfsz	wreg,f,c
  1358  00083C  D7FE               	bra	u1767
  1359  00083E  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1360  000840  D7FC               	bra	u1767
  1361                           
  1362                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1363  000842  0E00               	movlw	0
  1364  000844  6E0A               	movwf	SendLCD@type,c
  1365  000846  0E06               	movlw	6
  1366  000848  EC25  F007         	call	_SendLCD
  1367                           
  1368                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1369  00084C  0E21               	movlw	33
  1370  00084E                     u1777:
  1371  00084E  2EE8               	decfsz	wreg,f,c
  1372  000850  D7FE               	bra	u1777
  1373  000852  F000               	nop	
  1374                           
  1375                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1376  000854  0E00               	movlw	0
  1377  000856  6E0A               	movwf	SendLCD@type,c
  1378  000858  0E0C               	movlw	12
  1379  00085A  EC25  F007         	call	_SendLCD
  1380                           
  1381                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1382  00085E  0E21               	movlw	33
  1383  000860                     u1787:
  1384  000860  2EE8               	decfsz	wreg,f,c
  1385  000862  D7FE               	bra	u1787
  1386  000864  F000               	nop	
  1387  000866  0012               	return		;funcret
  1388  000868                     __end_of_init_LCD:
  1389                           	opt callstack 0
  1390                           
  1391 ;; *************** function _initPWM *****************
  1392 ;; Defined at:
  1393 ;;		line 5 in file "dc_motor.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  PWMperiod       2    7[COMRAM] int 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;		None
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1407 ;;      Params:         2       0       0       0
  1408 ;;      Locals:         0       0       0       0
  1409 ;;      Temps:          0       0       0       0
  1410 ;;      Totals:         2       0       0       0
  1411 ;;Total ram usage:        2 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    2
  1414 ;; This function calls:
  1415 ;;		Nothing
  1416 ;; This function is called by:
  1417 ;;		_setup
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           	psect	text7
  1422  000F58                     __ptext7:
  1423                           	opt callstack 0
  1424  000F58                     _initPWM:
  1425                           	opt callstack 27
  1426                           
  1427                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1428                           
  1429                           ;incstack = 0
  1430  000F58  0E00               	movlw	0
  1431  000F5A  6E7F               	movwf	3967,c	;volatile
  1432                           
  1433                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1434  000F5C  0E80               	movlw	128
  1435  000F5E  6E7E               	movwf	3966,c	;volatile
  1436                           
  1437                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1438  000F60  0E6F               	movlw	111
  1439  000F62  6E6F               	movwf	3951,c	;volatile
  1440                           
  1441                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1442  000F64  0E00               	movlw	0
  1443  000F66  6E6E               	movwf	3950,c	;volatile
  1444                           
  1445                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1446  000F68  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1447                           
  1448                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1449  000F6C  5009               	movf	initPWM@PWMperiod+1,w,c
  1450  000F6E  6E7A               	movwf	3962,c	;volatile
  1451  000F70  0012               	return		;funcret
  1452  000F72                     __end_of_initPWM:
  1453                           	opt callstack 0
  1454                           
  1455 ;; *************** function _scanForBeacon *****************
  1456 ;; Defined at:
  1457 ;;		line 17 in file "subroutines.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1460 ;;		 -> main@motorL(9), 
  1461 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1462 ;;		 -> main@motorR(9), 
  1463 ;;  speed           2   43[COMRAM] int 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  raw_data        2   47[COMRAM] unsigned int 
  1466 ;;  beacon_locat    1   49[COMRAM] unsigned char 
  1467 ;;  smoothed_dat    2   50[COMRAM] unsigned int 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      unsigned char 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1477 ;;      Params:         6       0       0       0
  1478 ;;      Locals:         5       0       0       0
  1479 ;;      Temps:          2       0       0       0
  1480 ;;      Totals:        13       0       0       0
  1481 ;;Total ram usage:       13 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    5
  1484 ;; This function calls:
  1485 ;;		_classify_data
  1486 ;;		_turnRight
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text8
  1493  000BE6                     __ptext8:
  1494                           	opt callstack 0
  1495  000BE6                     _scanForBeacon:
  1496                           	opt callstack 25
  1497                           
  1498                           ;subroutines.c: 17: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 18: {;subroutines.c: 19:     turnRight(mL,mR,speed);
  1499                           
  1500                           ;incstack = 0
  1501  000BE6  C028  F01F         	movff	scanForBeacon@mL,turnRight@mL
  1502  000BEA  C029  F020         	movff	scanForBeacon@mL+1,turnRight@mL+1
  1503  000BEE  C02A  F021         	movff	scanForBeacon@mR,turnRight@mR
  1504  000BF2  C02B  F022         	movff	scanForBeacon@mR+1,turnRight@mR+1
  1505  000BF6  C02C  F023         	movff	scanForBeacon@speed,turnRight@max_power
  1506  000BFA  C02D  F024         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  1507  000BFE  ECBD  F004         	call	_turnRight	;wreg free
  1508                           
  1509                           ;subroutines.c: 20:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  1510  000C02  5068               	movf	3944,w,c	;volatile
  1511  000C04  CF69 F02E          	movff	3945,??_scanForBeacon	;volatile
  1512  000C08  6A2F               	clrf	(??_scanForBeacon+1)& (0+255),c
  1513  000C0A  C02E  F02F         	movff	??_scanForBeacon,??_scanForBeacon+1
  1514  000C0E  6A2E               	clrf	??_scanForBeacon,c
  1515  000C10  102E               	iorwf	??_scanForBeacon,w,c
  1516  000C12  6E33               	movwf	scanForBeacon@smoothed_data,c
  1517  000C14  502F               	movf	??_scanForBeacon+1,w,c
  1518  000C16  6E34               	movwf	scanForBeacon@smoothed_data+1,c
  1519  000C18                     l2348:
  1520                           
  1521                           ;subroutines.c: 23:     {;subroutines.c: 25:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  1522  000C18  5068               	movf	3944,w,c	;volatile
  1523  000C1A  CF69 F02E          	movff	3945,??_scanForBeacon	;volatile
  1524  000C1E  6A2F               	clrf	(??_scanForBeacon+1)& (0+255),c
  1525  000C20  C02E  F02F         	movff	??_scanForBeacon,??_scanForBeacon+1
  1526  000C24  6A2E               	clrf	??_scanForBeacon,c
  1527  000C26  102E               	iorwf	??_scanForBeacon,w,c
  1528  000C28  6E30               	movwf	scanForBeacon@raw_data,c
  1529  000C2A  502F               	movf	??_scanForBeacon+1,w,c
  1530  000C2C  6E31               	movwf	scanForBeacon@raw_data+1,c
  1531                           
  1532                           ;subroutines.c: 28:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  1533  000C2E  C030  F008         	movff	scanForBeacon@raw_data,classify_data@raw_data
  1534  000C32  C031  F009         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  1535  000C36  0E33               	movlw	low scanForBeacon@smoothed_data
  1536  000C38  6E0A               	movwf	classify_data@smoothed,c
  1537  000C3A  0E00               	movlw	high scanForBeacon@smoothed_data
  1538  000C3C  6E0B               	movwf	classify_data@smoothed+1,c
  1539  000C3E  EC34  F004         	call	_classify_data	;wreg free
  1540  000C42  6E32               	movwf	scanForBeacon@beacon_location,c
  1541                           
  1542                           ;subroutines.c: 31:         if(beacon_location == 1)
  1543  000C44  0432               	decf	scanForBeacon@beacon_location,w,c
  1544  000C46  A4D8               	btfss	status,2,c
  1545  000C48  D7E7               	goto	l2348
  1546                           
  1547                           ;subroutines.c: 32:         {;subroutines.c: 33:             return 1;
  1548  000C4A  0E01               	movlw	1
  1549  000C4C  0012               	return		;funcret
  1550  000C4E                     __end_of_scanForBeacon:
  1551                           	opt callstack 0
  1552                           
  1553 ;; *************** function _turnRight *****************
  1554 ;; Defined at:
  1555 ;;		line 53 in file "dc_motor.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1558 ;;		 -> main@motorL(9), 
  1559 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1560 ;;		 -> main@motorR(9), 
  1561 ;;  max_power       2   34[COMRAM] int 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  i               2   37[COMRAM] int 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1573 ;;      Params:         6       0       0       0
  1574 ;;      Locals:         2       0       0       0
  1575 ;;      Temps:          1       0       0       0
  1576 ;;      Totals:         9       0       0       0
  1577 ;;Total ram usage:        9 bytes
  1578 ;; Hardware stack levels used:    1
  1579 ;; Hardware stack levels required when called:    4
  1580 ;; This function calls:
  1581 ;;		_setMotorPWM
  1582 ;; This function is called by:
  1583 ;;		_scanForBeacon
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text9
  1588  00097A                     __ptext9:
  1589                           	opt callstack 0
  1590  00097A                     _turnRight:
  1591                           	opt callstack 25
  1592                           
  1593                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 1;
  1594                           
  1595                           ;incstack = 0
  1596  00097A  EE20 F001          	lfsr	2,1
  1597  00097E  501F               	movf	turnRight@mL,w,c
  1598  000980  26D9               	addwf	fsr2l,f,c
  1599  000982  5020               	movf	turnRight@mL+1,w,c
  1600  000984  22DA               	addwfc	fsr2h,f,c
  1601  000986  0E01               	movlw	1
  1602  000988  6EDF               	movwf	indf2,c
  1603                           
  1604                           ;dc_motor.c: 57:     mR->direction = 0;
  1605  00098A  EE20 F001          	lfsr	2,1
  1606  00098E  5021               	movf	turnRight@mR,w,c
  1607  000990  26D9               	addwf	fsr2l,f,c
  1608  000992  5022               	movf	turnRight@mR+1,w,c
  1609  000994  22DA               	addwfc	fsr2h,f,c
  1610  000996  0E00               	movlw	0
  1611  000998  6EDF               	movwf	indf2,c
  1612                           
  1613                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  1614  00099A  0E00               	movlw	0
  1615  00099C  6E27               	movwf	turnRight@i+1,c
  1616  00099E  0E00               	movlw	0
  1617  0009A0  6E26               	movwf	turnRight@i,c
  1618  0009A2  D021               	goto	l2216
  1619  0009A4                     l2206:
  1620                           
  1621                           ;dc_motor.c: 60:         mL->power = i;
  1622  0009A4  C01F  FFD9         	movff	turnRight@mL,fsr2l
  1623  0009A8  C020  FFDA         	movff	turnRight@mL+1,fsr2h
  1624  0009AC  C026  FFDF         	movff	turnRight@i,indf2
  1625                           
  1626                           ;dc_motor.c: 61:         mR->power = i;
  1627  0009B0  C021  FFD9         	movff	turnRight@mR,fsr2l
  1628  0009B4  C022  FFDA         	movff	turnRight@mR+1,fsr2h
  1629  0009B8  C026  FFDF         	movff	turnRight@i,indf2
  1630                           
  1631                           ;dc_motor.c: 63:         setMotorPWM(mL);
  1632  0009BC  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
  1633  0009C0  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  1634  0009C4  EC4A  F002         	call	_setMotorPWM	;wreg free
  1635                           
  1636                           ;dc_motor.c: 64:         setMotorPWM(mR);
  1637  0009C8  C021  F016         	movff	turnRight@mR,setMotorPWM@m
  1638  0009CC  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  1639  0009D0  EC4A  F002         	call	_setMotorPWM	;wreg free
  1640                           
  1641                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1642  0009D4  0E03               	movlw	3
  1643  0009D6  6E25               	movwf	??_turnRight& (0+255),c
  1644  0009D8  0E98               	movlw	152
  1645  0009DA                     u1797:
  1646  0009DA  2EE8               	decfsz	wreg,f,c
  1647  0009DC  D7FE               	bra	u1797
  1648  0009DE  2E25               	decfsz	??_turnRight& (0+255),f,c
  1649  0009E0  D7FC               	bra	u1797
  1650                           
  1651                           ;dc_motor.c: 66:     }
  1652  0009E2  4A26               	infsnz	turnRight@i,f,c
  1653  0009E4  2A27               	incf	turnRight@i+1,f,c
  1654  0009E6                     l2216:
  1655  0009E6  5023               	movf	turnRight@max_power,w,c
  1656  0009E8  5C26               	subwf	turnRight@i,w,c
  1657  0009EA  5027               	movf	turnRight@i+1,w,c
  1658  0009EC  0A80               	xorlw	128
  1659  0009EE  6E25               	movwf	??_turnRight& (0+255),c
  1660  0009F0  5024               	movf	turnRight@max_power+1,w,c
  1661  0009F2  0A80               	xorlw	128
  1662  0009F4  5825               	subwfb	??_turnRight& (0+255),w,c
  1663  0009F6  B0D8               	btfsc	status,0,c
  1664  0009F8  0012               	return	
  1665  0009FA  D7D4               	goto	l2206
  1666  0009FC                     __end_of_turnRight:
  1667                           	opt callstack 0
  1668                           
  1669 ;; *************** function _classify_data *****************
  1670 ;; Defined at:
  1671 ;;		line 32 in file "signal_processing.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  raw_data        2    7[COMRAM] unsigned int 
  1674 ;;  smoothed        2    9[COMRAM] PTR unsigned int 
  1675 ;;		 -> scanForBeacon@smoothed_data(2), 
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;  previous        2   19[COMRAM] unsigned int 
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      unsigned char 
  1680 ;; Registers used:
  1681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1687 ;;      Params:         4       0       0       0
  1688 ;;      Locals:         2       0       0       0
  1689 ;;      Temps:          8       0       0       0
  1690 ;;      Totals:        14       0       0       0
  1691 ;;Total ram usage:       14 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    2
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_scanForBeacon
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text10
  1702  000868                     __ptext10:
  1703                           	opt callstack 0
  1704  000868                     _classify_data:
  1705                           	opt callstack 27
  1706                           
  1707                           ;signal_processing.c: 32: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 33: {;signal_processing.c: 35:     unsigned int previous = *smo
      +                          othed;
  1708                           
  1709                           ;incstack = 0
  1710  000868  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1711  00086C  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1712  000870  CFDE F014          	movff	postinc2,classify_data@previous
  1713  000874  CFDD F015          	movff	postdec2,classify_data@previous+1
  1714                           
  1715                           ;signal_processing.c: 36:     *smoothed = *smoothed + ((raw_data - *smoothed) >> 1);
  1716  000878  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1717  00087C  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1718  000880  CFDE F00C          	movff	postinc2,??_classify_data
  1719  000884  CFDD F00D          	movff	postdec2,??_classify_data+1
  1720  000888  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1721  00088C  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1722  000890  CFDE F00E          	movff	postinc2,??_classify_data+2
  1723  000894  CFDD F00F          	movff	postdec2,??_classify_data+3
  1724  000898  C008  F010         	movff	classify_data@raw_data,??_classify_data+4
  1725  00089C  C009  F011         	movff	classify_data@raw_data+1,??_classify_data+5
  1726  0008A0  500E               	movf	??_classify_data+2,w,c
  1727  0008A2  5E10               	subwf	??_classify_data+4,f,c
  1728  0008A4  500F               	movf	??_classify_data+3,w,c
  1729  0008A6  5A11               	subwfb	??_classify_data+5,f,c
  1730  0008A8  90D8               	bcf	status,0,c
  1731  0008AA  3011               	rrcf	??_classify_data+5,w,c
  1732  0008AC  6E13               	movwf	(??_classify_data+7)& (0+255),c
  1733  0008AE  3010               	rrcf	??_classify_data+4,w,c
  1734  0008B0  6E12               	movwf	(??_classify_data+6)& (0+255),c
  1735  0008B2  500C               	movf	??_classify_data,w,c
  1736  0008B4  2612               	addwf	??_classify_data+6,f,c
  1737  0008B6  500D               	movf	??_classify_data+1,w,c
  1738  0008B8  2213               	addwfc	??_classify_data+7,f,c
  1739  0008BA  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1740  0008BE  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1741  0008C2  C012  FFDE         	movff	??_classify_data+6,postinc2
  1742  0008C6  C013  FFDD         	movff	??_classify_data+7,postdec2
  1743                           
  1744                           ;signal_processing.c: 38:     if(*smoothed - previous >= 2000)
  1745  0008CA  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1746  0008CE  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1747  0008D2  CFDE F00C          	movff	postinc2,??_classify_data
  1748  0008D6  CFDD F00D          	movff	postdec2,??_classify_data+1
  1749  0008DA  5014               	movf	classify_data@previous,w,c
  1750  0008DC  5E0C               	subwf	??_classify_data,f,c
  1751  0008DE  5015               	movf	classify_data@previous+1,w,c
  1752  0008E0  5A0D               	subwfb	??_classify_data+1,f,c
  1753  0008E2  0ED0               	movlw	208
  1754  0008E4  5C0C               	subwf	??_classify_data,w,c
  1755  0008E6  0E07               	movlw	7
  1756  0008E8  580D               	subwfb	??_classify_data+1,w,c
  1757  0008EA  A0D8               	btfss	status,0,c
  1758  0008EC  D002               	goto	l2308
  1759                           
  1760                           ;signal_processing.c: 39:     {;signal_processing.c: 40:         return 1;
  1761  0008EE  0E01               	movlw	1
  1762  0008F0  0012               	return	
  1763  0008F2                     l2308:
  1764                           
  1765                           ;signal_processing.c: 43:     {;signal_processing.c: 44:         return 0;
  1766  0008F2  0E00               	movlw	0
  1767  0008F4  0012               	return		;funcret
  1768  0008F6                     __end_of_classify_data:
  1769                           	opt callstack 0
  1770                           
  1771 ;; *************** function _returnHome *****************
  1772 ;; Defined at:
  1773 ;;		line 61 in file "subroutines.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1776 ;;		 -> main@motorL(9), 
  1777 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1778 ;;		 -> main@motorR(9), 
  1779 ;;  speed           2   43[COMRAM] int 
  1780 ;;  micros          2   45[COMRAM] PTR unsigned long 
  1781 ;;		 -> main@movementMicros(4), 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  i               4   51[COMRAM] unsigned long 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      unsigned char 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1793 ;;      Params:         8       0       0       0
  1794 ;;      Locals:         4       0       0       0
  1795 ;;      Temps:          4       0       0       0
  1796 ;;      Totals:        16       0       0       0
  1797 ;;Total ram usage:       16 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    5
  1800 ;; This function calls:
  1801 ;;		_moveBackward
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text11
  1808  000D08                     __ptext11:
  1809                           	opt callstack 0
  1810  000D08                     _returnHome:
  1811                           	opt callstack 25
  1812                           
  1813                           ;subroutines.c: 61: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 62:                         unsigned long *micros);subroutines.
      +                          c: 63: {;subroutines.c: 64:     moveBackward(mL,mR,speed);
  1814                           
  1815                           ;incstack = 0
  1816  000D08  C028  F01F         	movff	returnHome@mL,moveBackward@mL
  1817  000D0C  C029  F020         	movff	returnHome@mL+1,moveBackward@mL+1
  1818  000D10  C02A  F021         	movff	returnHome@mR,moveBackward@mR
  1819  000D14  C02B  F022         	movff	returnHome@mR+1,moveBackward@mR+1
  1820  000D18  C02C  F023         	movff	returnHome@speed,moveBackward@max_power
  1821  000D1C  C02D  F024         	movff	returnHome@speed+1,moveBackward@max_power+1
  1822  000D20  ECFE  F004         	call	_moveBackward	;wreg free
  1823                           
  1824                           ;subroutines.c: 66:     for(unsigned long i=0; i<*micros;i++)
  1825  000D24  0E00               	movlw	0
  1826  000D26  6E34               	movwf	returnHome@i,c
  1827  000D28  0E00               	movlw	0
  1828  000D2A  6E35               	movwf	returnHome@i+1,c
  1829  000D2C  0E00               	movlw	0
  1830  000D2E  6E36               	movwf	returnHome@i+2,c
  1831  000D30  0E00               	movlw	0
  1832  000D32  6E37               	movwf	returnHome@i+3,c
  1833  000D34  D007               	goto	l2382
  1834  000D36                     l296:
  1835                           
  1836                           ;subroutines.c: 67:     {;subroutines.c: 68:         _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
  1837  000D36  D000               	nop2		;2 cycle nop
  1838                           
  1839                           ;subroutines.c: 69:     }
  1840  000D38  0E01               	movlw	1
  1841  000D3A  2634               	addwf	returnHome@i,f,c
  1842  000D3C  0E00               	movlw	0
  1843  000D3E  2235               	addwfc	returnHome@i+1,f,c
  1844  000D40  2236               	addwfc	returnHome@i+2,f,c
  1845  000D42  2237               	addwfc	returnHome@i+3,f,c
  1846  000D44                     l2382:
  1847  000D44  C02E  FFD9         	movff	returnHome@micros,fsr2l
  1848  000D48  C02F  FFDA         	movff	returnHome@micros+1,fsr2h
  1849  000D4C  50DE               	movf	postinc2,w,c
  1850  000D4E  5C34               	subwf	returnHome@i,w,c
  1851  000D50  50DE               	movf	postinc2,w,c
  1852  000D52  5835               	subwfb	returnHome@i+1,w,c
  1853  000D54  50DE               	movf	postinc2,w,c
  1854  000D56  5836               	subwfb	returnHome@i+2,w,c
  1855  000D58  50DE               	movf	postinc2,w,c
  1856  000D5A  5837               	subwfb	returnHome@i+3,w,c
  1857  000D5C  A0D8               	btfss	status,0,c
  1858  000D5E  D7EB               	goto	l296
  1859                           
  1860                           ;subroutines.c: 70:     return 3;
  1861  000D60  0E03               	movlw	3
  1862  000D62  0012               	return		;funcret
  1863  000D64                     __end_of_returnHome:
  1864                           	opt callstack 0
  1865                           
  1866 ;; *************** function _moveBackward *****************
  1867 ;; Defined at:
  1868 ;;		line 85 in file "dc_motor.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1871 ;;		 -> main@motorL(9), 
  1872 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1873 ;;		 -> main@motorR(9), 
  1874 ;;  max_power       2   34[COMRAM] int 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  i               2   37[COMRAM] int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1886 ;;      Params:         6       0       0       0
  1887 ;;      Locals:         2       0       0       0
  1888 ;;      Temps:          1       0       0       0
  1889 ;;      Totals:         9       0       0       0
  1890 ;;Total ram usage:        9 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    4
  1893 ;; This function calls:
  1894 ;;		_setMotorPWM
  1895 ;; This function is called by:
  1896 ;;		_returnHome
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text12
  1901  0009FC                     __ptext12:
  1902                           	opt callstack 0
  1903  0009FC                     _moveBackward:
  1904                           	opt callstack 25
  1905                           
  1906                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  1907                           
  1908                           ;incstack = 0
  1909  0009FC  EE20 F001          	lfsr	2,1
  1910  000A00  501F               	movf	moveBackward@mL,w,c
  1911  000A02  26D9               	addwf	fsr2l,f,c
  1912  000A04  5020               	movf	moveBackward@mL+1,w,c
  1913  000A06  22DA               	addwfc	fsr2h,f,c
  1914  000A08  0E00               	movlw	0
  1915  000A0A  6EDF               	movwf	indf2,c
  1916                           
  1917                           ;dc_motor.c: 88:     mR->direction = 0;
  1918  000A0C  EE20 F001          	lfsr	2,1
  1919  000A10  5021               	movf	moveBackward@mR,w,c
  1920  000A12  26D9               	addwf	fsr2l,f,c
  1921  000A14  5022               	movf	moveBackward@mR+1,w,c
  1922  000A16  22DA               	addwfc	fsr2h,f,c
  1923  000A18  0E00               	movlw	0
  1924  000A1A  6EDF               	movwf	indf2,c
  1925                           
  1926                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  1927  000A1C  0E00               	movlw	0
  1928  000A1E  6E27               	movwf	moveBackward@i+1,c
  1929  000A20  0E00               	movlw	0
  1930  000A22  6E26               	movwf	moveBackward@i,c
  1931  000A24  D021               	goto	l2248
  1932  000A26                     l2238:
  1933                           
  1934                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  1935  000A26  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  1936  000A2A  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  1937  000A2E  C026  FFDF         	movff	moveBackward@i,indf2
  1938                           
  1939                           ;dc_motor.c: 92:         mR->power = i;
  1940  000A32  C021  FFD9         	movff	moveBackward@mR,fsr2l
  1941  000A36  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  1942  000A3A  C026  FFDF         	movff	moveBackward@i,indf2
  1943                           
  1944                           ;dc_motor.c: 93:         setMotorPWM(mL);
  1945  000A3E  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  1946  000A42  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  1947  000A46  EC4A  F002         	call	_setMotorPWM	;wreg free
  1948                           
  1949                           ;dc_motor.c: 94:         setMotorPWM(mR);
  1950  000A4A  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  1951  000A4E  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  1952  000A52  EC4A  F002         	call	_setMotorPWM	;wreg free
  1953                           
  1954                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1955  000A56  0E03               	movlw	3
  1956  000A58  6E25               	movwf	??_moveBackward& (0+255),c
  1957  000A5A  0E98               	movlw	152
  1958  000A5C                     u1807:
  1959  000A5C  2EE8               	decfsz	wreg,f,c
  1960  000A5E  D7FE               	bra	u1807
  1961  000A60  2E25               	decfsz	??_moveBackward& (0+255),f,c
  1962  000A62  D7FC               	bra	u1807
  1963                           
  1964                           ;dc_motor.c: 96:     }
  1965  000A64  4A26               	infsnz	moveBackward@i,f,c
  1966  000A66  2A27               	incf	moveBackward@i+1,f,c
  1967  000A68                     l2248:
  1968  000A68  5023               	movf	moveBackward@max_power,w,c
  1969  000A6A  5C26               	subwf	moveBackward@i,w,c
  1970  000A6C  5027               	movf	moveBackward@i+1,w,c
  1971  000A6E  0A80               	xorlw	128
  1972  000A70  6E25               	movwf	??_moveBackward& (0+255),c
  1973  000A72  5024               	movf	moveBackward@max_power+1,w,c
  1974  000A74  0A80               	xorlw	128
  1975  000A76  5825               	subwfb	??_moveBackward& (0+255),w,c
  1976  000A78  B0D8               	btfsc	status,0,c
  1977  000A7A  0012               	return	
  1978  000A7C  D7D4               	goto	l2238
  1979  000A7E                     __end_of_moveBackward:
  1980                           	opt callstack 0
  1981                           
  1982 ;; *************** function _moveToBeacon *****************
  1983 ;; Defined at:
  1984 ;;		line 38 in file "subroutines.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1987 ;;		 -> main@motorL(9), 
  1988 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1989 ;;		 -> main@motorR(9), 
  1990 ;;  speed           2   43[COMRAM] int 
  1991 ;;  micros          2   45[COMRAM] PTR unsigned long 
  1992 ;;		 -> main@movementMicros(4), 
  1993 ;;  RFID_buffer     2   47[COMRAM] PTR volatile unsigned ch
  1994 ;;		 -> RFIDbuf(12), 
  1995 ;;  exit_flag       2   49[COMRAM] PTR volatile unsigned ch
  1996 ;;		 -> NULL(0), RFID_flag(1), 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      unsigned char 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2008 ;;      Params:        12       0       0       0
  2009 ;;      Locals:         0       0       0       0
  2010 ;;      Temps:          1       0       0       0
  2011 ;;      Totals:        13       0       0       0
  2012 ;;Total ram usage:       13 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    7
  2015 ;; This function calls:
  2016 ;;		_check_RFID
  2017 ;;		_display_RFID
  2018 ;;		_moveForward
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text13
  2025  000D64                     __ptext13:
  2026                           	opt callstack 0
  2027  000D64                     _moveToBeacon:
  2028                           	opt callstack 23
  2029                           
  2030                           ;subroutines.c: 38: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 39: unsigned long *micros, volatile char RFID_buffer[], volat
      +                          ile char *exit_flag);subroutines.c: 40: {;subroutines.c: 41:     moveForward(mL,mR,speed
      +                          );
  2031                           
  2032                           ;incstack = 0
  2033  000D64  C028  F01F         	movff	moveToBeacon@mL,moveForward@mL
  2034  000D68  C029  F020         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2035  000D6C  C02A  F021         	movff	moveToBeacon@mR,moveForward@mR
  2036  000D70  C02B  F022         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2037  000D74  C02C  F023         	movff	moveToBeacon@speed,moveForward@max_power
  2038  000D78  C02D  F024         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2039  000D7C  EC3F  F005         	call	_moveForward	;wreg free
  2040  000D80                     l2360:
  2041                           
  2042                           ;subroutines.c: 45:           {;subroutines.c: 46:               _delay((unsigned long)(
      +                          (1)*(8000000/4000000.0)));
  2043  000D80  D000               	nop2		;2 cycle nop
  2044                           
  2045                           ;subroutines.c: 47:               *micros += 1;
  2046  000D82  C02E  FFD9         	movff	moveToBeacon@micros,fsr2l
  2047  000D86  C02F  FFDA         	movff	moveToBeacon@micros+1,fsr2h
  2048  000D8A  2ADE               	incf	postinc2,f,c
  2049  000D8C  0E00               	movlw	0
  2050  000D8E  22DE               	addwfc	postinc2,f,c
  2051  000D90  22DE               	addwfc	postinc2,f,c
  2052  000D92  22DE               	addwfc	postinc2,f,c
  2053                           
  2054                           ;subroutines.c: 51:               if(*exit_flag == 1)
  2055  000D94  C032  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2056  000D98  C033  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2057  000D9C  04DE               	decf	postinc2,w,c
  2058  000D9E  A4D8               	btfss	status,2,c
  2059  000DA0  D7EF               	goto	l2360
  2060                           
  2061                           ;subroutines.c: 52:               {;subroutines.c: 53:                   display_RFID(RF
      +                          ID_buffer);
  2062  000DA2  C030  F00D         	movff	moveToBeacon@RFID_buffer,display_RFID@dataBuf
  2063  000DA6  C031  F00E         	movff	moveToBeacon@RFID_buffer+1,display_RFID@dataBuf+1
  2064  000DAA  EC05  F007         	call	_display_RFID	;wreg free
  2065                           
  2066                           ;subroutines.c: 54:                   check_RFID(RFID_buffer);
  2067  000DAE  C030  F00E         	movff	moveToBeacon@RFID_buffer,check_RFID@dataBuf
  2068  000DB2  C031  F00F         	movff	moveToBeacon@RFID_buffer+1,check_RFID@dataBuf+1
  2069  000DB6  ECA2  F001         	call	_check_RFID	;wreg free
  2070                           
  2071                           ;subroutines.c: 56:                   return 2;
  2072  000DBA  0E02               	movlw	2
  2073  000DBC  0012               	return		;funcret
  2074  000DBE                     __end_of_moveToBeacon:
  2075                           	opt callstack 0
  2076                           
  2077 ;; *************** function _moveForward *****************
  2078 ;; Defined at:
  2079 ;;		line 70 in file "dc_motor.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2082 ;;		 -> main@motorL(9), 
  2083 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2084 ;;		 -> main@motorR(9), 
  2085 ;;  max_power       2   34[COMRAM] int 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  i               2   37[COMRAM] int 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2097 ;;      Params:         6       0       0       0
  2098 ;;      Locals:         2       0       0       0
  2099 ;;      Temps:          1       0       0       0
  2100 ;;      Totals:         9       0       0       0
  2101 ;;Total ram usage:        9 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    4
  2104 ;; This function calls:
  2105 ;;		_setMotorPWM
  2106 ;; This function is called by:
  2107 ;;		_moveToBeacon
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text14
  2112  000A7E                     __ptext14:
  2113                           	opt callstack 0
  2114  000A7E                     _moveForward:
  2115                           	opt callstack 25
  2116                           
  2117                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2118                           
  2119                           ;incstack = 0
  2120  000A7E  EE20 F001          	lfsr	2,1
  2121  000A82  501F               	movf	moveForward@mL,w,c
  2122  000A84  26D9               	addwf	fsr2l,f,c
  2123  000A86  5020               	movf	moveForward@mL+1,w,c
  2124  000A88  22DA               	addwfc	fsr2h,f,c
  2125  000A8A  0E01               	movlw	1
  2126  000A8C  6EDF               	movwf	indf2,c
  2127                           
  2128                           ;dc_motor.c: 73:     mR->direction = 1;
  2129  000A8E  EE20 F001          	lfsr	2,1
  2130  000A92  5021               	movf	moveForward@mR,w,c
  2131  000A94  26D9               	addwf	fsr2l,f,c
  2132  000A96  5022               	movf	moveForward@mR+1,w,c
  2133  000A98  22DA               	addwfc	fsr2h,f,c
  2134  000A9A  0E01               	movlw	1
  2135  000A9C  6EDF               	movwf	indf2,c
  2136                           
  2137                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2138  000A9E  0E00               	movlw	0
  2139  000AA0  6E27               	movwf	moveForward@i+1,c
  2140  000AA2  0E00               	movlw	0
  2141  000AA4  6E26               	movwf	moveForward@i,c
  2142  000AA6  D021               	goto	l2232
  2143  000AA8                     l2222:
  2144                           
  2145                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2146  000AA8  C01F  FFD9         	movff	moveForward@mL,fsr2l
  2147  000AAC  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  2148  000AB0  C026  FFDF         	movff	moveForward@i,indf2
  2149                           
  2150                           ;dc_motor.c: 77:         mR->power = i;
  2151  000AB4  C021  FFD9         	movff	moveForward@mR,fsr2l
  2152  000AB8  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  2153  000ABC  C026  FFDF         	movff	moveForward@i,indf2
  2154                           
  2155                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2156  000AC0  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  2157  000AC4  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  2158  000AC8  EC4A  F002         	call	_setMotorPWM	;wreg free
  2159                           
  2160                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2161  000ACC  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  2162  000AD0  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  2163  000AD4  EC4A  F002         	call	_setMotorPWM	;wreg free
  2164                           
  2165                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2166  000AD8  0E03               	movlw	3
  2167  000ADA  6E25               	movwf	??_moveForward& (0+255),c
  2168  000ADC  0E98               	movlw	152
  2169  000ADE                     u1817:
  2170  000ADE  2EE8               	decfsz	wreg,f,c
  2171  000AE0  D7FE               	bra	u1817
  2172  000AE2  2E25               	decfsz	??_moveForward& (0+255),f,c
  2173  000AE4  D7FC               	bra	u1817
  2174                           
  2175                           ;dc_motor.c: 81:     }
  2176  000AE6  4A26               	infsnz	moveForward@i,f,c
  2177  000AE8  2A27               	incf	moveForward@i+1,f,c
  2178  000AEA                     l2232:
  2179  000AEA  5023               	movf	moveForward@max_power,w,c
  2180  000AEC  5C26               	subwf	moveForward@i,w,c
  2181  000AEE  5027               	movf	moveForward@i+1,w,c
  2182  000AF0  0A80               	xorlw	128
  2183  000AF2  6E25               	movwf	??_moveForward& (0+255),c
  2184  000AF4  5024               	movf	moveForward@max_power+1,w,c
  2185  000AF6  0A80               	xorlw	128
  2186  000AF8  5825               	subwfb	??_moveForward& (0+255),w,c
  2187  000AFA  B0D8               	btfsc	status,0,c
  2188  000AFC  0012               	return	
  2189  000AFE  D7D4               	goto	l2222
  2190  000B00                     __end_of_moveForward:
  2191                           	opt callstack 0
  2192                           
  2193 ;; *************** function _display_RFID *****************
  2194 ;; Defined at:
  2195 ;;		line 109 in file "RFID.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  dataBuf         2   12[COMRAM] PTR volatile unsigned ch
  2198 ;;		 -> RFIDbuf(12), 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  i               2   14[COMRAM] int 
  2201 ;; Return value:  Size  Location     Type
  2202 ;;                  1    wreg      void 
  2203 ;; Registers used:
  2204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2205 ;; Tracked objects:
  2206 ;;		On entry : 0/0
  2207 ;;		On exit  : 0/0
  2208 ;;		Unchanged: 0/0
  2209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2210 ;;      Params:         2       0       0       0
  2211 ;;      Locals:         2       0       0       0
  2212 ;;      Temps:          0       0       0       0
  2213 ;;      Totals:         4       0       0       0
  2214 ;;Total ram usage:        4 bytes
  2215 ;; Hardware stack levels used:    1
  2216 ;; Hardware stack levels required when called:    6
  2217 ;; This function calls:
  2218 ;;		_ClearLCD
  2219 ;;		_SendLCD
  2220 ;;		_SetLine
  2221 ;; This function is called by:
  2222 ;;		_moveToBeacon
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text15
  2227  000E0A                     __ptext15:
  2228                           	opt callstack 0
  2229  000E0A                     _display_RFID:
  2230                           	opt callstack 23
  2231                           
  2232                           ;RFID.c: 109: void display_RFID(volatile char dataBuf[]);RFID.c: 110: {;RFID.c: 111:    
      +                           ClearLCD();
  2233                           
  2234                           ;incstack = 0
  2235  000E0A  ECB9  F007         	call	_ClearLCD	;wreg free
  2236                           
  2237                           ;RFID.c: 112:     SetLine(1);
  2238  000E0E  0E01               	movlw	1
  2239  000E10  EC54  F007         	call	_SetLine
  2240                           
  2241                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  2242  000E14  0E00               	movlw	0
  2243  000E16  6E10               	movwf	display_RFID@i+1,c
  2244  000E18  0E00               	movlw	0
  2245  000E1A  6E0F               	movwf	display_RFID@i,c
  2246  000E1C                     l2290:
  2247                           
  2248                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  2249  000E1C  0E01               	movlw	1
  2250  000E1E  6E0A               	movwf	SendLCD@type,c
  2251  000E20  500F               	movf	display_RFID@i,w,c
  2252  000E22  240D               	addwf	display_RFID@dataBuf,w,c
  2253  000E24  6ED9               	movwf	fsr2l,c
  2254  000E26  5010               	movf	display_RFID@i+1,w,c
  2255  000E28  200E               	addwfc	display_RFID@dataBuf+1,w,c
  2256  000E2A  6EDA               	movwf	fsr2h,c
  2257  000E2C  50DF               	movf	indf2,w,c
  2258  000E2E  EC25  F007         	call	_SendLCD
  2259                           
  2260                           ;RFID.c: 116:     }
  2261  000E32  4A0F               	infsnz	display_RFID@i,f,c
  2262  000E34  2A10               	incf	display_RFID@i+1,f,c
  2263  000E36  BE10               	btfsc	display_RFID@i+1,7,c
  2264  000E38  D7F1               	goto	l2290
  2265  000E3A  5010               	movf	display_RFID@i+1,w,c
  2266  000E3C  E105               	bnz	u1550
  2267  000E3E  0E0A               	movlw	10
  2268  000E40  5C0F               	subwf	display_RFID@i,w,c
  2269  000E42  B0D8               	btfsc	status,0,c
  2270  000E44  0012               	return	
  2271  000E46  D7EA               	goto	l2290
  2272  000E48                     u1550:
  2273  000E48  0012               	return		;funcret
  2274  000E4A                     __end_of_display_RFID:
  2275                           	opt callstack 0
  2276                           
  2277 ;; *************** function _ClearLCD *****************
  2278 ;; Defined at:
  2279 ;;		line 131 in file "LCDIO.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2293 ;;      Params:         0       0       0       0
  2294 ;;      Locals:         0       0       0       0
  2295 ;;      Temps:          1       0       0       0
  2296 ;;      Totals:         1       0       0       0
  2297 ;;Total ram usage:        1 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    5
  2300 ;; This function calls:
  2301 ;;		_SendLCD
  2302 ;; This function is called by:
  2303 ;;		_display_RFID
  2304 ;;		_stopAndDisplay
  2305 ;;		_debug
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text16
  2310  000F72                     __ptext16:
  2311                           	opt callstack 0
  2312  000F72                     _ClearLCD:
  2313                           	opt callstack 24
  2314                           
  2315                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  2316                           
  2317                           ;incstack = 0
  2318  000F72  0E00               	movlw	0
  2319  000F74  6E0A               	movwf	SendLCD@type,c
  2320  000F76  0E01               	movlw	1
  2321  000F78  EC25  F007         	call	_SendLCD
  2322                           
  2323                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2324  000F7C  0E0D               	movlw	13
  2325  000F7E  6E0C               	movwf	??_ClearLCD& (0+255),c
  2326  000F80  0EFC               	movlw	252
  2327  000F82                     u1827:
  2328  000F82  2EE8               	decfsz	wreg,f,c
  2329  000F84  D7FE               	bra	u1827
  2330  000F86  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  2331  000F88  D7FC               	bra	u1827
  2332  000F8A  0012               	return		;funcret
  2333  000F8C                     __end_of_ClearLCD:
  2334                           	opt callstack 0
  2335                           
  2336 ;; *************** function _check_RFID *****************
  2337 ;; Defined at:
  2338 ;;		line 72 in file "RFID.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  dataBuf         2   13[COMRAM] PTR volatile unsigned ch
  2341 ;;		 -> RFIDbuf(12), 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  i               2   35[COMRAM] int 
  2344 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  2345 ;;  checksum        1   34[COMRAM] unsigned char 
  2346 ;;  byte5           1   33[COMRAM] unsigned char 
  2347 ;;  byte4           1   32[COMRAM] unsigned char 
  2348 ;;  byte3           1   31[COMRAM] unsigned char 
  2349 ;;  byte2           1   30[COMRAM] unsigned char 
  2350 ;;  byte1           1   29[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2360 ;;      Params:         2       0       0       0
  2361 ;;      Locals:        20       0       0       0
  2362 ;;      Temps:          2       0       0       0
  2363 ;;      Totals:        24       0       0       0
  2364 ;;Total ram usage:       24 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    6
  2367 ;; This function calls:
  2368 ;;		_LCD_String
  2369 ;;		_SetLine
  2370 ;; This function is called by:
  2371 ;;		_moveToBeacon
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text17
  2376  000344                     __ptext17:
  2377                           	opt callstack 0
  2378  000344                     _check_RFID:
  2379                           	opt callstack 23
  2380                           
  2381                           ;RFID.c: 72: void check_RFID(volatile char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char
      +                           hexBuf[12];;RFID.c: 77:     for(int i=0; i<12;i++)
  2382                           
  2383                           ;incstack = 0
  2384  000344  0E00               	movlw	0
  2385  000346  6E25               	movwf	check_RFID@i+1,c
  2386  000348  0E00               	movlw	0
  2387  00034A  6E24               	movwf	check_RFID@i,c
  2388  00034C                     l2256:
  2389                           
  2390                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2391  00034C  5024               	movf	check_RFID@i,w,c
  2392  00034E  240E               	addwf	check_RFID@dataBuf,w,c
  2393  000350  6ED9               	movwf	fsr2l,c
  2394  000352  5025               	movf	check_RFID@i+1,w,c
  2395  000354  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2396  000356  6EDA               	movwf	fsr2h,c
  2397  000358  0E2F               	movlw	47
  2398  00035A  64DF               	cpfsgt	indf2,c
  2399  00035C  D018               	goto	l2262
  2400  00035E  5024               	movf	check_RFID@i,w,c
  2401  000360  240E               	addwf	check_RFID@dataBuf,w,c
  2402  000362  6ED9               	movwf	fsr2l,c
  2403  000364  5025               	movf	check_RFID@i+1,w,c
  2404  000366  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2405  000368  6EDA               	movwf	fsr2h,c
  2406  00036A  0E3A               	movlw	58
  2407  00036C  60DF               	cpfslt	indf2,c
  2408  00036E  D00F               	goto	l2262
  2409                           
  2410                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  2411  000370  0E12               	movlw	low check_RFID@hexBuf
  2412  000372  2424               	addwf	check_RFID@i,w,c
  2413  000374  6ED9               	movwf	fsr2l,c
  2414  000376  0E00               	movlw	high check_RFID@hexBuf
  2415  000378  2025               	addwfc	check_RFID@i+1,w,c
  2416  00037A  6EDA               	movwf	fsr2h,c
  2417  00037C  5024               	movf	check_RFID@i,w,c
  2418  00037E  240E               	addwf	check_RFID@dataBuf,w,c
  2419  000380  6EE1               	movwf	fsr1l,c
  2420  000382  5025               	movf	check_RFID@i+1,w,c
  2421  000384  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2422  000386  6EE2               	movwf	fsr1h,c
  2423  000388  50E7               	movf	indf1,w,c
  2424  00038A  0FD0               	addlw	208
  2425  00038C  D020               	goto	L4
  2426  00038E                     l2262:
  2427  00038E  5024               	movf	check_RFID@i,w,c
  2428  000390  240E               	addwf	check_RFID@dataBuf,w,c
  2429  000392  6ED9               	movwf	fsr2l,c
  2430  000394  5025               	movf	check_RFID@i+1,w,c
  2431  000396  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2432  000398  6EDA               	movwf	fsr2h,c
  2433  00039A  0E40               	movlw	64
  2434  00039C  64DF               	cpfsgt	indf2,c
  2435  00039E  D018               	goto	l2268
  2436  0003A0  5024               	movf	check_RFID@i,w,c
  2437  0003A2  240E               	addwf	check_RFID@dataBuf,w,c
  2438  0003A4  6ED9               	movwf	fsr2l,c
  2439  0003A6  5025               	movf	check_RFID@i+1,w,c
  2440  0003A8  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2441  0003AA  6EDA               	movwf	fsr2h,c
  2442  0003AC  0E47               	movlw	71
  2443  0003AE  60DF               	cpfslt	indf2,c
  2444  0003B0  D00F               	goto	l2268
  2445                           
  2446                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2447  0003B2  0E12               	movlw	low check_RFID@hexBuf
  2448  0003B4  2424               	addwf	check_RFID@i,w,c
  2449  0003B6  6ED9               	movwf	fsr2l,c
  2450  0003B8  0E00               	movlw	high check_RFID@hexBuf
  2451  0003BA  2025               	addwfc	check_RFID@i+1,w,c
  2452  0003BC  6EDA               	movwf	fsr2h,c
  2453  0003BE  5024               	movf	check_RFID@i,w,c
  2454  0003C0  240E               	addwf	check_RFID@dataBuf,w,c
  2455  0003C2  6EE1               	movwf	fsr1l,c
  2456  0003C4  5025               	movf	check_RFID@i+1,w,c
  2457  0003C6  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2458  0003C8  6EE2               	movwf	fsr1h,c
  2459  0003CA  50E7               	movf	indf1,w,c
  2460  0003CC  0FC9               	addlw	201
  2461  0003CE                     L4:
  2462  0003CE  6EDF               	movwf	indf2,c
  2463  0003D0                     l2268:
  2464                           
  2465                           ;RFID.c: 86:     }
  2466  0003D0  4A24               	infsnz	check_RFID@i,f,c
  2467  0003D2  2A25               	incf	check_RFID@i+1,f,c
  2468  0003D4  BE25               	btfsc	check_RFID@i+1,7,c
  2469  0003D6  D7BA               	goto	l2256
  2470  0003D8  5025               	movf	check_RFID@i+1,w,c
  2471  0003DA  E104               	bnz	u1390
  2472  0003DC  0E0C               	movlw	12
  2473  0003DE  5C24               	subwf	check_RFID@i,w,c
  2474  0003E0  A0D8               	btfss	status,0,c
  2475  0003E2  D7B4               	goto	l2256
  2476  0003E4                     u1390:
  2477                           
  2478                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2479  0003E4  5012               	movf	check_RFID@hexBuf,w,c
  2480  0003E6  A4D8               	btfss	status,2,c
  2481  0003E8  D002               	goto	u1400
  2482  0003EA  0E01               	movlw	1
  2483  0003EC  D001               	goto	u1410
  2484  0003EE                     u1400:
  2485  0003EE  0E00               	movlw	0
  2486  0003F0                     u1410:
  2487  0003F0  1013               	iorwf	check_RFID@hexBuf+1,w,c
  2488  0003F2  6E1E               	movwf	check_RFID@byte1,c
  2489                           
  2490                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2491  0003F4  5014               	movf	check_RFID@hexBuf+2,w,c
  2492  0003F6  A4D8               	btfss	status,2,c
  2493  0003F8  D002               	goto	u1420
  2494  0003FA  0E01               	movlw	1
  2495  0003FC  D001               	goto	u1430
  2496  0003FE                     u1420:
  2497  0003FE  0E00               	movlw	0
  2498  000400                     u1430:
  2499  000400  1015               	iorwf	check_RFID@hexBuf+3,w,c
  2500  000402  6E1F               	movwf	check_RFID@byte2,c
  2501                           
  2502                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2503  000404  5016               	movf	check_RFID@hexBuf+4,w,c
  2504  000406  A4D8               	btfss	status,2,c
  2505  000408  D002               	goto	u1440
  2506  00040A  0E01               	movlw	1
  2507  00040C  D001               	goto	u1450
  2508  00040E                     u1440:
  2509  00040E  0E00               	movlw	0
  2510  000410                     u1450:
  2511  000410  1017               	iorwf	check_RFID@hexBuf+5,w,c
  2512  000412  6E20               	movwf	check_RFID@byte3,c
  2513                           
  2514                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2515  000414  5018               	movf	check_RFID@hexBuf+6,w,c
  2516  000416  A4D8               	btfss	status,2,c
  2517  000418  D002               	goto	u1460
  2518  00041A  0E01               	movlw	1
  2519  00041C  D001               	goto	u1470
  2520  00041E                     u1460:
  2521  00041E  0E00               	movlw	0
  2522  000420                     u1470:
  2523  000420  1019               	iorwf	check_RFID@hexBuf+7,w,c
  2524  000422  6E21               	movwf	check_RFID@byte4,c
  2525                           
  2526                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2527  000424  501A               	movf	check_RFID@hexBuf+8,w,c
  2528  000426  A4D8               	btfss	status,2,c
  2529  000428  D002               	goto	u1480
  2530  00042A  0E01               	movlw	1
  2531  00042C  D001               	goto	u1490
  2532  00042E                     u1480:
  2533  00042E  0E00               	movlw	0
  2534  000430                     u1490:
  2535  000430  101B               	iorwf	check_RFID@hexBuf+9,w,c
  2536  000432  6E22               	movwf	check_RFID@byte5,c
  2537                           
  2538                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2539  000434  501C               	movf	check_RFID@hexBuf+10,w,c
  2540  000436  A4D8               	btfss	status,2,c
  2541  000438  D002               	goto	u1500
  2542  00043A  0E01               	movlw	1
  2543  00043C  D001               	goto	u1510
  2544  00043E                     u1500:
  2545  00043E  0E00               	movlw	0
  2546  000440                     u1510:
  2547  000440  101D               	iorwf	check_RFID@hexBuf+11,w,c
  2548  000442  6E23               	movwf	check_RFID@checksum,c
  2549                           
  2550                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2551  000444  501E               	movf	check_RFID@byte1,w,c
  2552  000446  181F               	xorwf	check_RFID@byte2,w,c
  2553  000448  1820               	xorwf	check_RFID@byte3,w,c
  2554  00044A  1821               	xorwf	check_RFID@byte4,w,c
  2555  00044C  6E10               	movwf	??_check_RFID& (0+255),c
  2556  00044E  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  2557  000450  5023               	movf	check_RFID@checksum,w,c
  2558  000452  1822               	xorwf	check_RFID@byte5,w,c
  2559  000454  A4D8               	btfss	status,2,c
  2560  000456  D002               	goto	u1520
  2561  000458  0E01               	movlw	1
  2562  00045A  D001               	goto	u1530
  2563  00045C                     u1520:
  2564  00045C  0E00               	movlw	0
  2565  00045E                     u1530:
  2566  00045E  1A10               	xorwf	??_check_RFID,f,c
  2567  000460  0E00               	movlw	0
  2568  000462  1A11               	xorwf	??_check_RFID+1,f,c
  2569  000464  5010               	movf	??_check_RFID,w,c
  2570  000466  1011               	iorwf	??_check_RFID+1,w,c
  2571  000468  B4D8               	btfsc	status,2,c
  2572  00046A  D00A               	goto	l2278
  2573                           
  2574                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  2575  00046C  0E02               	movlw	2
  2576  00046E  EC54  F007         	call	_SetLine
  2577                           
  2578                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  2579  000472  0E21               	movlw	low STR_2
  2580  000474  6E0C               	movwf	LCD_String@string,c
  2581  000476  0E03               	movlw	high STR_2
  2582  000478  6E0D               	movwf	LCD_String@string+1,c
  2583  00047A  EC27  F006         	call	_LCD_String	;wreg free
  2584                           
  2585                           ;RFID.c: 101:     }
  2586  00047E  0012               	return	
  2587  000480                     l2278:
  2588                           
  2589                           ;RFID.c: 104:         SetLine(2);
  2590  000480  0E02               	movlw	2
  2591  000482  EC54  F007         	call	_SetLine
  2592                           
  2593                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  2594  000486  0E11               	movlw	low STR_3
  2595  000488  6E0C               	movwf	LCD_String@string,c
  2596  00048A  0E03               	movlw	high STR_3
  2597  00048C  6E0D               	movwf	LCD_String@string+1,c
  2598  00048E  EC27  F006         	call	_LCD_String	;wreg free
  2599  000492  0012               	return		;funcret
  2600  000494                     __end_of_check_RFID:
  2601                           	opt callstack 0
  2602                           
  2603 ;; *************** function _SetLine *****************
  2604 ;; Defined at:
  2605 ;;		line 107 in file "LCDIO.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  line            1    wreg     unsigned char 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  line            1   11[COMRAM] unsigned char 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2, status,0, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2619 ;;      Params:         0       0       0       0
  2620 ;;      Locals:         1       0       0       0
  2621 ;;      Temps:          0       0       0       0
  2622 ;;      Totals:         1       0       0       0
  2623 ;;Total ram usage:        1 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    5
  2626 ;; This function calls:
  2627 ;;		_SendLCD
  2628 ;; This function is called by:
  2629 ;;		_check_RFID
  2630 ;;		_display_RFID
  2631 ;;		_debug
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text18
  2636  000EA8                     __ptext18:
  2637                           	opt callstack 0
  2638  000EA8                     _SetLine:
  2639                           	opt callstack 23
  2640                           
  2641                           ;incstack = 0
  2642                           ;SetLine@line stored from wreg
  2643  000EA8  6E0C               	movwf	SetLine@line,c
  2644                           
  2645                           ;LCDIO.c: 109:     if(line == 1){
  2646  000EAA  040C               	decf	SetLine@line,w,c
  2647  000EAC  A4D8               	btfss	status,2,c
  2648  000EAE  D005               	goto	l2118
  2649                           
  2650                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2651  000EB0  0E00               	movlw	0
  2652  000EB2  6E0A               	movwf	SendLCD@type,c
  2653  000EB4  0E80               	movlw	128
  2654  000EB6  EC25  F007         	call	_SendLCD
  2655  000EBA                     l2118:
  2656                           
  2657                           ;LCDIO.c: 113:     if(line == 2){
  2658  000EBA  0E02               	movlw	2
  2659  000EBC  180C               	xorwf	SetLine@line,w,c
  2660  000EBE  A4D8               	btfss	status,2,c
  2661  000EC0  D005               	goto	l2122
  2662                           
  2663                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2664  000EC2  0E00               	movlw	0
  2665  000EC4  6E0A               	movwf	SendLCD@type,c
  2666  000EC6  0EC0               	movlw	192
  2667  000EC8  EC25  F007         	call	_SendLCD
  2668  000ECC                     l2122:
  2669                           
  2670                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2671  000ECC  0E21               	movlw	33
  2672  000ECE                     u1837:
  2673  000ECE  2EE8               	decfsz	wreg,f,c
  2674  000ED0  D7FE               	bra	u1837
  2675  000ED2  F000               	nop	
  2676  000ED4  0012               	return		;funcret
  2677  000ED6                     __end_of_SetLine:
  2678                           	opt callstack 0
  2679                           
  2680 ;; *************** function _LCD_String *****************
  2681 ;; Defined at:
  2682 ;;		line 119 in file "LCDIO.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  string          2   11[COMRAM] PTR unsigned char 
  2685 ;;		 -> debug@buf2(16), debug@buf(16), STR_4(16), STR_3(16), 
  2686 ;;		 -> STR_2(16), STR_1(15), 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2698 ;;      Params:         2       0       0       0
  2699 ;;      Locals:         0       0       0       0
  2700 ;;      Temps:          0       0       0       0
  2701 ;;      Totals:         2       0       0       0
  2702 ;;Total ram usage:        2 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    5
  2705 ;; This function calls:
  2706 ;;		_SendLCD
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;;		_check_RFID
  2710 ;;		_stopAndDisplay
  2711 ;;		_debug
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text19
  2716  000C4E                     __ptext19:
  2717                           	opt callstack 0
  2718  000C4E                     _LCD_String:
  2719                           	opt callstack 24
  2720                           
  2721                           ;LCDIO.c: 121: while(*string != 0){
  2722                           
  2723                           ;incstack = 0
  2724  000C4E  D01A               	goto	l2104
  2725  000C50                     l2098:
  2726                           
  2727                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2728  000C50  0E01               	movlw	1
  2729  000C52  6E0A               	movwf	SendLCD@type,c
  2730  000C54  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2731  000C58  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2732  000C5C  6AF8               	clrf	tblptru,c
  2733  000C5E  0E02               	movlw	(high __ramtop+-1)
  2734  000C60  64F7               	cpfsgt	tblptrh,c
  2735  000C62  D003               	bra	u1227
  2736  000C64  0008               	tblrd		*
  2737  000C66  50F5               	movf	tablat,w,c
  2738  000C68  D005               	bra	u1220
  2739  000C6A                     u1227:
  2740  000C6A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2741  000C6E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2742  000C72  50EF               	movf	indf0,w,c
  2743  000C74                     u1220:
  2744  000C74  EC25  F007         	call	_SendLCD
  2745  000C78  4A0C               	infsnz	LCD_String@string,f,c
  2746  000C7A  2A0D               	incf	LCD_String@string+1,f,c
  2747                           
  2748                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2749  000C7C  0E21               	movlw	33
  2750  000C7E                     u1847:
  2751  000C7E  2EE8               	decfsz	wreg,f,c
  2752  000C80  D7FE               	bra	u1847
  2753  000C82  F000               	nop	
  2754  000C84                     l2104:
  2755                           
  2756                           ;LCDIO.c: 121: while(*string != 0){
  2757  000C84  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2758  000C88  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2759  000C8C  6AF8               	clrf	tblptru,c
  2760  000C8E  0E02               	movlw	(high __ramtop+-1)
  2761  000C90  64F7               	cpfsgt	tblptrh,c
  2762  000C92  D003               	bra	u1237
  2763  000C94  0008               	tblrd		*
  2764  000C96  50F5               	movf	tablat,w,c
  2765  000C98  D005               	bra	u1230
  2766  000C9A                     u1237:
  2767  000C9A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2768  000C9E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2769  000CA2  50EF               	movf	indf0,w,c
  2770  000CA4                     u1230:
  2771  000CA4  0900               	iorlw	0
  2772  000CA6  B4D8               	btfsc	status,2,c
  2773  000CA8  0012               	return	
  2774  000CAA  D7D2               	goto	l2098
  2775  000CAC                     __end_of_LCD_String:
  2776                           	opt callstack 0
  2777                           
  2778 ;; *************** function _SendLCD *****************
  2779 ;; Defined at:
  2780 ;;		line 44 in file "LCDIO.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  Byte            1    wreg     unsigned char 
  2783 ;;  type            1    9[COMRAM] unsigned char 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  Byte            1   10[COMRAM] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2795 ;;      Params:         1       0       0       0
  2796 ;;      Locals:         1       0       0       0
  2797 ;;      Temps:          0       0       0       0
  2798 ;;      Totals:         2       0       0       0
  2799 ;;Total ram usage:        2 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    4
  2802 ;; This function calls:
  2803 ;;		_LCDout
  2804 ;; This function is called by:
  2805 ;;		_init_LCD
  2806 ;;		_SetLine
  2807 ;;		_LCD_String
  2808 ;;		_ClearLCD
  2809 ;;		_display_RFID
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text20
  2814  000E4A                     __ptext20:
  2815                           	opt callstack 0
  2816  000E4A                     _SendLCD:
  2817                           	opt callstack 24
  2818                           
  2819                           ;incstack = 0
  2820                           ;SendLCD@Byte stored from wreg
  2821  000E4A  6E0B               	movwf	SendLCD@Byte,c
  2822                           
  2823                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2824  000E4C  B00A               	btfsc	SendLCD@type,0,c
  2825  000E4E  D002               	bra	u1155
  2826  000E50  9E89               	bcf	3977,7,c	;volatile
  2827  000E52  D001               	bra	u1156
  2828  000E54                     u1155:
  2829  000E54  8E89               	bsf	3977,7,c	;volatile
  2830  000E56                     u1156:
  2831                           
  2832                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2833  000E56  380B               	swapf	SendLCD@Byte,w,c
  2834  000E58  0B0F               	andlw	15
  2835  000E5A  0B0F               	andlw	15
  2836  000E5C  EC80  F005         	call	_LCDout
  2837                           
  2838                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  2839  000E60  0E06               	movlw	6
  2840  000E62                     u1857:
  2841  000E62  2EE8               	decfsz	wreg,f,c
  2842  000E64  D7FE               	bra	u1857
  2843  000E66  D000               	nop2	
  2844                           
  2845                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  2846  000E68  500B               	movf	SendLCD@Byte,w,c
  2847  000E6A  0B0F               	andlw	15
  2848  000E6C  EC80  F005         	call	_LCDout
  2849                           
  2850                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2851  000E70  0E21               	movlw	33
  2852  000E72                     u1867:
  2853  000E72  2EE8               	decfsz	wreg,f,c
  2854  000E74  D7FE               	bra	u1867
  2855  000E76  F000               	nop	
  2856  000E78  0012               	return		;funcret
  2857  000E7A                     __end_of_SendLCD:
  2858                           	opt callstack 0
  2859                           
  2860 ;; *************** function _LCDout *****************
  2861 ;; Defined at:
  2862 ;;		line 31 in file "LCDIO.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  number          1    wreg     unsigned char 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  number          1    8[COMRAM] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2876 ;;      Params:         0       0       0       0
  2877 ;;      Locals:         1       0       0       0
  2878 ;;      Temps:          1       0       0       0
  2879 ;;      Totals:         2       0       0       0
  2880 ;;Total ram usage:        2 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    3
  2883 ;; This function calls:
  2884 ;;		_E_TOG
  2885 ;; This function is called by:
  2886 ;;		_SendLCD
  2887 ;;		_init_LCD
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text21
  2892  000B00                     __ptext21:
  2893                           	opt callstack 0
  2894  000B00                     _LCDout:
  2895                           	opt callstack 24
  2896                           
  2897                           ;incstack = 0
  2898                           ;LCDout@number stored from wreg
  2899  000B00  6E09               	movwf	LCDout@number,c
  2900                           
  2901                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  2902  000B02  C009  F008         	movff	LCDout@number,??_LCDout
  2903  000B06  0E01               	movlw	1
  2904  000B08  1608               	andwf	??_LCDout,f,c
  2905  000B0A  508B               	movf	3979,w,c	;volatile
  2906  000B0C  1808               	xorwf	??_LCDout,w,c
  2907  000B0E  0BFE               	andlw	-2
  2908  000B10  1808               	xorwf	??_LCDout,w,c
  2909  000B12  6E8B               	movwf	3979,c	;volatile
  2910                           
  2911                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  2912  000B14  C009  F008         	movff	LCDout@number,??_LCDout
  2913  000B18  90D8               	bcf	status,0,c
  2914  000B1A  3208               	rrcf	??_LCDout,f,c
  2915  000B1C  0E01               	movlw	1
  2916  000B1E  1608               	andwf	??_LCDout,f,c
  2917  000B20  4608               	rlncf	??_LCDout,f,c
  2918  000B22  4608               	rlncf	??_LCDout,f,c
  2919  000B24  4608               	rlncf	??_LCDout,f,c
  2920  000B26  508B               	movf	3979,w,c	;volatile
  2921  000B28  1808               	xorwf	??_LCDout,w,c
  2922  000B2A  0BF7               	andlw	-9
  2923  000B2C  1808               	xorwf	??_LCDout,w,c
  2924  000B2E  6E8B               	movwf	3979,c	;volatile
  2925                           
  2926                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  2927  000B30  C009  F008         	movff	LCDout@number,??_LCDout
  2928  000B34  90D8               	bcf	status,0,c
  2929  000B36  3208               	rrcf	??_LCDout,f,c
  2930  000B38  90D8               	bcf	status,0,c
  2931  000B3A  3208               	rrcf	??_LCDout,f,c
  2932  000B3C  0E01               	movlw	1
  2933  000B3E  1608               	andwf	??_LCDout,f,c
  2934  000B40  508C               	movf	3980,w,c	;volatile
  2935  000B42  1808               	xorwf	??_LCDout,w,c
  2936  000B44  0BFE               	andlw	-2
  2937  000B46  1808               	xorwf	??_LCDout,w,c
  2938  000B48  6E8C               	movwf	3980,c	;volatile
  2939                           
  2940                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  2941  000B4A  C009  F008         	movff	LCDout@number,??_LCDout
  2942  000B4E  90D8               	bcf	status,0,c
  2943  000B50  3208               	rrcf	??_LCDout,f,c
  2944  000B52  90D8               	bcf	status,0,c
  2945  000B54  3208               	rrcf	??_LCDout,f,c
  2946  000B56  90D8               	bcf	status,0,c
  2947  000B58  3208               	rrcf	??_LCDout,f,c
  2948  000B5A  0E01               	movlw	1
  2949  000B5C  1608               	andwf	??_LCDout,f,c
  2950  000B5E  4608               	rlncf	??_LCDout,f,c
  2951  000B60  508C               	movf	3980,w,c	;volatile
  2952  000B62  1808               	xorwf	??_LCDout,w,c
  2953  000B64  0BFD               	andlw	-3
  2954  000B66  1808               	xorwf	??_LCDout,w,c
  2955  000B68  6E8C               	movwf	3980,c	;volatile
  2956                           
  2957                           ;LCDIO.c: 39:  E_TOG();
  2958  000B6A  ECC6  F007         	call	_E_TOG	;wreg free
  2959                           
  2960                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2961  000B6E  0E03               	movlw	3
  2962  000B70                     u1877:
  2963  000B70  2EE8               	decfsz	wreg,f,c
  2964  000B72  D7FE               	bra	u1877
  2965  000B74  F000               	nop	
  2966  000B76  0012               	return		;funcret
  2967  000B78                     __end_of_LCDout:
  2968                           	opt callstack 0
  2969                           
  2970 ;; *************** function _E_TOG *****************
  2971 ;; Defined at:
  2972 ;;		line 23 in file "LCDIO.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2986 ;;      Params:         0       0       0       0
  2987 ;;      Locals:         0       0       0       0
  2988 ;;      Temps:          0       0       0       0
  2989 ;;      Totals:         0       0       0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    2
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_LCDout
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text22
  3001  000F8C                     __ptext22:
  3002                           	opt callstack 0
  3003  000F8C                     _E_TOG:
  3004                           	opt callstack 24
  3005                           
  3006                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3007                           
  3008                           ;incstack = 0
  3009  000F8C  8C89               	bsf	3977,6,c	;volatile
  3010                           
  3011                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3012  000F8E  0E03               	movlw	3
  3013  000F90                     u1887:
  3014  000F90  2EE8               	decfsz	wreg,f,c
  3015  000F92  D7FE               	bra	u1887
  3016  000F94  F000               	nop	
  3017                           
  3018                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3019  000F96  9C89               	bcf	3977,6,c	;volatile
  3020  000F98  0012               	return		;funcret
  3021  000F9A                     __end_of_E_TOG:
  3022                           	opt callstack 0
  3023                           
  3024 ;; *************** function _init_motor_struct *****************
  3025 ;; Defined at:
  3026 ;;		line 99 in file "dc_motor.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3029 ;;		 -> main@motorL(9), 
  3030 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3031 ;;		 -> main@motorR(9), 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3043 ;;      Params:         4       0       0       0
  3044 ;;      Locals:         0       0       0       0
  3045 ;;      Temps:          0       0       0       0
  3046 ;;      Totals:         4       0       0       0
  3047 ;;Total ram usage:        4 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    4
  3050 ;; This function calls:
  3051 ;;		_setMotorPWM
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text23
  3058  0006B6                     __ptext23:
  3059                           	opt callstack 0
  3060  0006B6                     _init_motor_struct:
  3061                           	opt callstack 26
  3062                           
  3063                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3064                           
  3065                           ;incstack = 0
  3066  0006B6  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  3067  0006BA  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3068  0006BE  0E00               	movlw	0
  3069  0006C0  6EDF               	movwf	indf2,c
  3070                           
  3071                           ;dc_motor.c: 103: mL->direction = 1;
  3072  0006C2  EE20 F001          	lfsr	2,1
  3073  0006C6  501F               	movf	init_motor_struct@mL,w,c
  3074  0006C8  26D9               	addwf	fsr2l,f,c
  3075  0006CA  5020               	movf	init_motor_struct@mL+1,w,c
  3076  0006CC  22DA               	addwfc	fsr2h,f,c
  3077  0006CE  0E01               	movlw	1
  3078  0006D0  6EDF               	movwf	indf2,c
  3079                           
  3080                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3081  0006D2  EE20 F002          	lfsr	2,2
  3082  0006D6  501F               	movf	init_motor_struct@mL,w,c
  3083  0006D8  26D9               	addwf	fsr2l,f,c
  3084  0006DA  5020               	movf	init_motor_struct@mL+1,w,c
  3085  0006DC  22DA               	addwfc	fsr2h,f,c
  3086  0006DE  0E79               	movlw	121
  3087  0006E0  6EDE               	movwf	postinc2,c
  3088  0006E2  0E0F               	movlw	15
  3089  0006E4  6EDD               	movwf	postdec2,c
  3090                           
  3091                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3092  0006E6  EE20 F004          	lfsr	2,4
  3093  0006EA  501F               	movf	init_motor_struct@mL,w,c
  3094  0006EC  26D9               	addwf	fsr2l,f,c
  3095  0006EE  5020               	movf	init_motor_struct@mL+1,w,c
  3096  0006F0  22DA               	addwfc	fsr2h,f,c
  3097  0006F2  0E78               	movlw	120
  3098  0006F4  6EDE               	movwf	postinc2,c
  3099  0006F6  0E0F               	movlw	15
  3100  0006F8  6EDD               	movwf	postdec2,c
  3101                           
  3102                           ;dc_motor.c: 106: mL->dir_pin=0;
  3103  0006FA  EE20 F006          	lfsr	2,6
  3104  0006FE  501F               	movf	init_motor_struct@mL,w,c
  3105  000700  26D9               	addwf	fsr2l,f,c
  3106  000702  5020               	movf	init_motor_struct@mL+1,w,c
  3107  000704  22DA               	addwfc	fsr2h,f,c
  3108  000706  0E00               	movlw	0
  3109  000708  6EDF               	movwf	indf2,c
  3110                           
  3111                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3112  00070A  EE20 F007          	lfsr	2,7
  3113  00070E  501F               	movf	init_motor_struct@mL,w,c
  3114  000710  26D9               	addwf	fsr2l,f,c
  3115  000712  5020               	movf	init_motor_struct@mL+1,w,c
  3116  000714  22DA               	addwfc	fsr2h,f,c
  3117  000716  0EC7               	movlw	199
  3118  000718  6EDE               	movwf	postinc2,c
  3119  00071A  0E00               	movlw	0
  3120  00071C  6EDD               	movwf	postdec2,c
  3121                           
  3122                           ;dc_motor.c: 109: mR->power = 0;
  3123  00071E  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  3124  000722  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3125  000726  0E00               	movlw	0
  3126  000728  6EDF               	movwf	indf2,c
  3127                           
  3128                           ;dc_motor.c: 110: mR->direction = 1;
  3129  00072A  EE20 F001          	lfsr	2,1
  3130  00072E  5021               	movf	init_motor_struct@mR,w,c
  3131  000730  26D9               	addwf	fsr2l,f,c
  3132  000732  5022               	movf	init_motor_struct@mR+1,w,c
  3133  000734  22DA               	addwfc	fsr2h,f,c
  3134  000736  0E01               	movlw	1
  3135  000738  6EDF               	movwf	indf2,c
  3136                           
  3137                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3138  00073A  EE20 F002          	lfsr	2,2
  3139  00073E  5021               	movf	init_motor_struct@mR,w,c
  3140  000740  26D9               	addwf	fsr2l,f,c
  3141  000742  5022               	movf	init_motor_struct@mR+1,w,c
  3142  000744  22DA               	addwfc	fsr2h,f,c
  3143  000746  0E77               	movlw	119
  3144  000748  6EDE               	movwf	postinc2,c
  3145  00074A  0E0F               	movlw	15
  3146  00074C  6EDD               	movwf	postdec2,c
  3147                           
  3148                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3149  00074E  EE20 F004          	lfsr	2,4
  3150  000752  5021               	movf	init_motor_struct@mR,w,c
  3151  000754  26D9               	addwf	fsr2l,f,c
  3152  000756  5022               	movf	init_motor_struct@mR+1,w,c
  3153  000758  22DA               	addwfc	fsr2h,f,c
  3154  00075A  0E76               	movlw	118
  3155  00075C  6EDE               	movwf	postinc2,c
  3156  00075E  0E0F               	movlw	15
  3157  000760  6EDD               	movwf	postdec2,c
  3158                           
  3159                           ;dc_motor.c: 113: mR->dir_pin=2;
  3160  000762  EE20 F006          	lfsr	2,6
  3161  000766  5021               	movf	init_motor_struct@mR,w,c
  3162  000768  26D9               	addwf	fsr2l,f,c
  3163  00076A  5022               	movf	init_motor_struct@mR+1,w,c
  3164  00076C  22DA               	addwfc	fsr2h,f,c
  3165  00076E  0E02               	movlw	2
  3166  000770  6EDF               	movwf	indf2,c
  3167                           
  3168                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3169  000772  EE20 F007          	lfsr	2,7
  3170  000776  5021               	movf	init_motor_struct@mR,w,c
  3171  000778  26D9               	addwf	fsr2l,f,c
  3172  00077A  5022               	movf	init_motor_struct@mR+1,w,c
  3173  00077C  22DA               	addwfc	fsr2h,f,c
  3174  00077E  0EC7               	movlw	199
  3175  000780  6EDE               	movwf	postinc2,c
  3176  000782  0E00               	movlw	0
  3177  000784  6EDD               	movwf	postdec2,c
  3178                           
  3179                           ;dc_motor.c: 116: setMotorPWM(mL);
  3180  000786  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  3181  00078A  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3182  00078E  EC4A  F002         	call	_setMotorPWM	;wreg free
  3183                           
  3184                           ;dc_motor.c: 117: setMotorPWM(mR);
  3185  000792  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  3186  000796  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3187  00079A  EC4A  F002         	call	_setMotorPWM	;wreg free
  3188  00079E  0012               	return		;funcret
  3189  0007A0                     __end_of_init_motor_struct:
  3190                           	opt callstack 0
  3191                           
  3192 ;; *************** function _setMotorPWM *****************
  3193 ;; Defined at:
  3194 ;;		line 18 in file "dc_motor.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3197 ;;		 -> main@motorR(9), main@motorL(9), 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  PWMduty         2   28[COMRAM] int 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  1    wreg      void 
  3202 ;; Registers used:
  3203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3209 ;;      Params:         2       0       0       0
  3210 ;;      Locals:         2       0       0       0
  3211 ;;      Temps:          5       0       0       0
  3212 ;;      Totals:         9       0       0       0
  3213 ;;Total ram usage:        9 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:    3
  3216 ;; This function calls:
  3217 ;;		___awdiv
  3218 ;;		___wmul
  3219 ;; This function is called by:
  3220 ;;		_stop
  3221 ;;		_turnRight
  3222 ;;		_moveForward
  3223 ;;		_moveBackward
  3224 ;;		_init_motor_struct
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text24
  3229  000494                     __ptext24:
  3230                           	opt callstack 0
  3231  000494                     _setMotorPWM:
  3232                           	opt callstack 25
  3233                           
  3234                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3235                           
  3236                           ;incstack = 0
  3237  000494  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3238  000498  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3239  00049C  50DF               	movf	indf2,w,c
  3240  00049E  6E18               	movwf	??_setMotorPWM& (0+255),c
  3241  0004A0  5018               	movf	??_setMotorPWM,w,c
  3242  0004A2  6E08               	movwf	___wmul@multiplier,c
  3243  0004A4  6A09               	clrf	___wmul@multiplier+1,c
  3244  0004A6  EE20 F007          	lfsr	2,7
  3245  0004AA  5016               	movf	setMotorPWM@m,w,c
  3246  0004AC  26D9               	addwf	fsr2l,f,c
  3247  0004AE  5017               	movf	setMotorPWM@m+1,w,c
  3248  0004B0  22DA               	addwfc	fsr2h,f,c
  3249  0004B2  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  3250  0004B6  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  3251  0004BA  EC7E  F007         	call	___wmul	;wreg free
  3252  0004BE  C008  F00E         	movff	?___wmul,___awdiv@dividend
  3253  0004C2  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  3254  0004C6  0E00               	movlw	0
  3255  0004C8  6E11               	movwf	___awdiv@divisor+1,c
  3256  0004CA  0E64               	movlw	100
  3257  0004CC  6E10               	movwf	___awdiv@divisor,c
  3258  0004CE  EC7B  F004         	call	___awdiv	;wreg free
  3259  0004D2  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  3260  0004D6  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3261                           
  3262                           ;dc_motor.c: 24:     if (m->direction)
  3263  0004DA  EE20 F001          	lfsr	2,1
  3264  0004DE  5016               	movf	setMotorPWM@m,w,c
  3265  0004E0  26D9               	addwf	fsr2l,f,c
  3266  0004E2  5017               	movf	setMotorPWM@m+1,w,c
  3267  0004E4  22DA               	addwfc	fsr2h,f,c
  3268  0004E6  50DF               	movf	indf2,w,c
  3269  0004E8  B4D8               	btfsc	status,2,c
  3270  0004EA  D024               	goto	l2112
  3271                           
  3272                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3273  0004EC  EE20 F006          	lfsr	2,6
  3274  0004F0  5016               	movf	setMotorPWM@m,w,c
  3275  0004F2  26D9               	addwf	fsr2l,f,c
  3276  0004F4  5017               	movf	setMotorPWM@m+1,w,c
  3277  0004F6  22DA               	addwfc	fsr2h,f,c
  3278  0004F8  50DF               	movf	indf2,w,c
  3279  0004FA  6E18               	movwf	??_setMotorPWM& (0+255),c
  3280  0004FC  0E01               	movlw	1
  3281  0004FE  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3282  000500  2A18               	incf	??_setMotorPWM,f,c
  3283  000502  D002               	goto	u1264
  3284  000504                     u1265:
  3285  000504  90D8               	bcf	status,0,c
  3286  000506  3619               	rlcf	??_setMotorPWM+1,f,c
  3287  000508                     u1264:
  3288  000508  2E18               	decfsz	??_setMotorPWM,f,c
  3289  00050A  D7FC               	goto	u1265
  3290  00050C  5019               	movf	??_setMotorPWM+1,w,c
  3291  00050E  108A               	iorwf	3978,w,c	;volatile
  3292  000510  6E8A               	movwf	3978,c	;volatile
  3293                           
  3294                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3295  000512  EE20 F007          	lfsr	2,7
  3296  000516  5016               	movf	setMotorPWM@m,w,c
  3297  000518  26D9               	addwf	fsr2l,f,c
  3298  00051A  5017               	movf	setMotorPWM@m+1,w,c
  3299  00051C  22DA               	addwfc	fsr2h,f,c
  3300  00051E  CFDE F018          	movff	postinc2,??_setMotorPWM
  3301  000522  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3302  000526  501D               	movf	setMotorPWM@PWMduty,w,c
  3303  000528  5C18               	subwf	??_setMotorPWM,w,c
  3304  00052A  6E1D               	movwf	setMotorPWM@PWMduty,c
  3305  00052C  501E               	movf	setMotorPWM@PWMduty+1,w,c
  3306  00052E  5819               	subwfb	??_setMotorPWM+1,w,c
  3307  000530  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  3308                           
  3309                           ;dc_motor.c: 28:     }
  3310  000532  D014               	goto	l104
  3311  000534                     l2112:
  3312                           
  3313                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3314  000534  EE20 F006          	lfsr	2,6
  3315  000538  5016               	movf	setMotorPWM@m,w,c
  3316  00053A  26D9               	addwf	fsr2l,f,c
  3317  00053C  5017               	movf	setMotorPWM@m+1,w,c
  3318  00053E  22DA               	addwfc	fsr2h,f,c
  3319  000540  50DF               	movf	indf2,w,c
  3320  000542  6E18               	movwf	??_setMotorPWM& (0+255),c
  3321  000544  0E01               	movlw	1
  3322  000546  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3323  000548  2A18               	incf	??_setMotorPWM,f,c
  3324  00054A  D002               	goto	u1274
  3325  00054C                     u1275:
  3326  00054C  90D8               	bcf	status,0,c
  3327  00054E  3619               	rlcf	??_setMotorPWM+1,f,c
  3328  000550                     u1274:
  3329  000550  2E18               	decfsz	??_setMotorPWM,f,c
  3330  000552  D7FC               	goto	u1275
  3331  000554  5019               	movf	??_setMotorPWM+1,w,c
  3332  000556  0AFF               	xorlw	255
  3333  000558  148A               	andwf	3978,w,c	;volatile
  3334  00055A  6E8A               	movwf	3978,c	;volatile
  3335  00055C                     l104:
  3336                           
  3337                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3338  00055C  EE20 F002          	lfsr	2,2
  3339  000560  5016               	movf	setMotorPWM@m,w,c
  3340  000562  26D9               	addwf	fsr2l,f,c
  3341  000564  5017               	movf	setMotorPWM@m+1,w,c
  3342  000566  22DA               	addwfc	fsr2h,f,c
  3343  000568  CFDE F018          	movff	postinc2,??_setMotorPWM
  3344  00056C  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3345  000570  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3346  000574  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3347  000578  441D               	rlncf	setMotorPWM@PWMduty,w,c
  3348  00057A  46E8               	rlncf	wreg,f,c
  3349  00057C  0BFC               	andlw	252
  3350  00057E  6EDF               	movwf	indf2,c
  3351                           
  3352                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3353  000580  EE20 F004          	lfsr	2,4
  3354  000584  5016               	movf	setMotorPWM@m,w,c
  3355  000586  26D9               	addwf	fsr2l,f,c
  3356  000588  5017               	movf	setMotorPWM@m+1,w,c
  3357  00058A  22DA               	addwfc	fsr2h,f,c
  3358  00058C  CFDE F018          	movff	postinc2,??_setMotorPWM
  3359  000590  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3360  000594  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3361  000598  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3362  00059C  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3363  0005A0  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3364  0005A4  0E06               	movlw	6
  3365  0005A6  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  3366  0005A8                     u1285:
  3367  0005A8  341B               	rlcf	??_setMotorPWM+3,w,c
  3368  0005AA  321B               	rrcf	??_setMotorPWM+3,f,c
  3369  0005AC  321A               	rrcf	??_setMotorPWM+2,f,c
  3370  0005AE  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3371  0005B0  D7FB               	goto	u1285
  3372  0005B2  501A               	movf	??_setMotorPWM+2,w,c
  3373  0005B4  6EDF               	movwf	indf2,c
  3374  0005B6  0012               	return		;funcret
  3375  0005B8                     __end_of_setMotorPWM:
  3376                           	opt callstack 0
  3377                           
  3378 ;; *************** function ___wmul *****************
  3379 ;; Defined at:
  3380 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  multiplier      2    7[COMRAM] unsigned int 
  3383 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  product         2   11[COMRAM] unsigned int 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  2    7[COMRAM] unsigned int 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0, prodl, prodh
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3395 ;;      Params:         4       0       0       0
  3396 ;;      Locals:         2       0       0       0
  3397 ;;      Temps:          0       0       0       0
  3398 ;;      Totals:         6       0       0       0
  3399 ;;Total ram usage:        6 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    2
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_setMotorPWM
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text25
  3410  000EFC                     __ptext25:
  3411                           	opt callstack 0
  3412  000EFC                     ___wmul:
  3413                           	opt callstack 25
  3414                           
  3415                           ;incstack = 0
  3416  000EFC  5008               	movf	___wmul@multiplier,w,c
  3417  000EFE  020A               	mulwf	___wmul@multiplicand,c
  3418  000F00  CFF3 F00C          	movff	prodl,___wmul@product
  3419  000F04  CFF4 F00D          	movff	prodh,___wmul@product+1
  3420  000F08  5008               	movf	___wmul@multiplier,w,c
  3421  000F0A  020B               	mulwf	___wmul@multiplicand+1,c
  3422  000F0C  50F3               	movf	prodl,w,c
  3423  000F0E  260D               	addwf	___wmul@product+1,f,c
  3424  000F10  5009               	movf	___wmul@multiplier+1,w,c
  3425  000F12  020A               	mulwf	___wmul@multiplicand,c
  3426  000F14  50F3               	movf	prodl,w,c
  3427  000F16  260D               	addwf	___wmul@product+1,f,c
  3428  000F18  C00C  F008         	movff	___wmul@product,?___wmul
  3429  000F1C  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3430  000F20  0012               	return		;funcret
  3431  000F22                     __end_of___wmul:
  3432                           	opt callstack 0
  3433                           
  3434 ;; *************** function ___awdiv *****************
  3435 ;; Defined at:
  3436 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  dividend        2   13[COMRAM] int 
  3439 ;;  divisor         2   15[COMRAM] int 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  quotient        2   19[COMRAM] int 
  3442 ;;  sign            1   18[COMRAM] unsigned char 
  3443 ;;  counter         1   17[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2   13[COMRAM] int 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3453 ;;      Params:         4       0       0       0
  3454 ;;      Locals:         4       0       0       0
  3455 ;;      Temps:          0       0       0       0
  3456 ;;      Totals:         8       0       0       0
  3457 ;;Total ram usage:        8 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    2
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_setMotorPWM
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text26
  3468  0008F6                     __ptext26:
  3469                           	opt callstack 0
  3470  0008F6                     ___awdiv:
  3471                           	opt callstack 25
  3472                           
  3473                           ;incstack = 0
  3474  0008F6  0E00               	movlw	0
  3475  0008F8  6E13               	movwf	___awdiv@sign,c
  3476  0008FA  AE11               	btfss	___awdiv@divisor+1,7,c
  3477  0008FC  D006               	goto	l2060
  3478  0008FE  6C10               	negf	___awdiv@divisor,c
  3479  000900  1E11               	comf	___awdiv@divisor+1,f,c
  3480  000902  B0D8               	btfsc	status,0,c
  3481  000904  2A11               	incf	___awdiv@divisor+1,f,c
  3482  000906  0E01               	movlw	1
  3483  000908  6E13               	movwf	___awdiv@sign,c
  3484  00090A                     l2060:
  3485  00090A  AE0F               	btfss	___awdiv@dividend+1,7,c
  3486  00090C  D006               	goto	l2066
  3487  00090E  6C0E               	negf	___awdiv@dividend,c
  3488  000910  1E0F               	comf	___awdiv@dividend+1,f,c
  3489  000912  B0D8               	btfsc	status,0,c
  3490  000914  2A0F               	incf	___awdiv@dividend+1,f,c
  3491  000916  0E01               	movlw	1
  3492  000918  1A13               	xorwf	___awdiv@sign,f,c
  3493  00091A                     l2066:
  3494  00091A  0E00               	movlw	0
  3495  00091C  6E15               	movwf	___awdiv@quotient+1,c
  3496  00091E  0E00               	movlw	0
  3497  000920  6E14               	movwf	___awdiv@quotient,c
  3498  000922  5010               	movf	___awdiv@divisor,w,c
  3499  000924  1011               	iorwf	___awdiv@divisor+1,w,c
  3500  000926  B4D8               	btfsc	status,2,c
  3501  000928  D01C               	goto	l2088
  3502  00092A  0E01               	movlw	1
  3503  00092C  6E12               	movwf	___awdiv@counter,c
  3504  00092E  D004               	goto	l2074
  3505  000930                     l2072:
  3506  000930  90D8               	bcf	status,0,c
  3507  000932  3610               	rlcf	___awdiv@divisor,f,c
  3508  000934  3611               	rlcf	___awdiv@divisor+1,f,c
  3509  000936  2A12               	incf	___awdiv@counter,f,c
  3510  000938                     l2074:
  3511  000938  AE11               	btfss	___awdiv@divisor+1,7,c
  3512  00093A  D7FA               	goto	l2072
  3513  00093C                     u1190:
  3514  00093C  90D8               	bcf	status,0,c
  3515  00093E  3614               	rlcf	___awdiv@quotient,f,c
  3516  000940  3615               	rlcf	___awdiv@quotient+1,f,c
  3517  000942  5010               	movf	___awdiv@divisor,w,c
  3518  000944  5C0E               	subwf	___awdiv@dividend,w,c
  3519  000946  5011               	movf	___awdiv@divisor+1,w,c
  3520  000948  580F               	subwfb	___awdiv@dividend+1,w,c
  3521  00094A  A0D8               	btfss	status,0,c
  3522  00094C  D005               	goto	l2084
  3523  00094E  5010               	movf	___awdiv@divisor,w,c
  3524  000950  5E0E               	subwf	___awdiv@dividend,f,c
  3525  000952  5011               	movf	___awdiv@divisor+1,w,c
  3526  000954  5A0F               	subwfb	___awdiv@dividend+1,f,c
  3527  000956  8014               	bsf	___awdiv@quotient,0,c
  3528  000958                     l2084:
  3529  000958  90D8               	bcf	status,0,c
  3530  00095A  3211               	rrcf	___awdiv@divisor+1,f,c
  3531  00095C  3210               	rrcf	___awdiv@divisor,f,c
  3532  00095E  2E12               	decfsz	___awdiv@counter,f,c
  3533  000960  D7ED               	goto	u1190
  3534  000962                     l2088:
  3535  000962  5013               	movf	___awdiv@sign,w,c
  3536  000964  B4D8               	btfsc	status,2,c
  3537  000966  D004               	goto	l2092
  3538  000968  6C14               	negf	___awdiv@quotient,c
  3539  00096A  1E15               	comf	___awdiv@quotient+1,f,c
  3540  00096C  B0D8               	btfsc	status,0,c
  3541  00096E  2A15               	incf	___awdiv@quotient+1,f,c
  3542  000970                     l2092:
  3543  000970  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  3544  000974  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  3545  000978  0012               	return		;funcret
  3546  00097A                     __end_of___awdiv:
  3547                           	opt callstack 0
  3548                           
  3549 ;; *************** function _InterruptHandlerHigh *****************
  3550 ;; Defined at:
  3551 ;;		line 60 in file "main.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  throwaway       1    0        unsigned char 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  1    wreg      void 
  3558 ;; Registers used:
  3559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3565 ;;      Params:         0       0       0       0
  3566 ;;      Locals:         1       0       0       0
  3567 ;;      Temps:          2       0       0       0
  3568 ;;      Totals:         3       0       0       0
  3569 ;;Total ram usage:        3 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    1
  3572 ;; This function calls:
  3573 ;;		_processRFID
  3574 ;; This function is called by:
  3575 ;;		Interrupt level 2
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	intcode
  3580  000008                     __pintcode:
  3581                           	opt callstack 0
  3582  000008                     _InterruptHandlerHigh:
  3583                           	opt callstack 23
  3584                           
  3585                           ;incstack = 0
  3586  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3587  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3588  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3589                           
  3590                           ;main.c: 64:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3591  000012  AA9E               	btfss	3998,5,c	;volatile
  3592  000014  D00D               	goto	i2l55
  3593  000016  0443               	decf	_robot_mode,w,c	;volatile
  3594  000018  A4D8               	btfss	status,2,c
  3595  00001A  D00A               	goto	i2l55
  3596                           
  3597                           ;main.c: 65:     {;main.c: 67:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3598  00001C  0E80               	movlw	low _RFIDbuf
  3599  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  3600  000020  0E00               	movlw	high _RFIDbuf
  3601  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  3602  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3603  000028  ECDF  F006         	call	_processRFID	;wreg free
  3604  00002C  6E44               	movwf	_RFID_flag,c	;volatile
  3605                           
  3606                           ;main.c: 68:     }
  3607  00002E  D001               	goto	i2l57
  3608  000030                     i2l55:
  3609  000030  50AE               	movf	4014,w,c	;volatile
  3610  000032                     i2l57:
  3611  000032  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3612  000036  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3613  00003A  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3614  00003C  0011               	retfie		f
  3615  00003E                     __end_of_InterruptHandlerHigh:
  3616                           	opt callstack 0
  3617                           
  3618 ;; *************** function _processRFID *****************
  3619 ;; Defined at:
  3620 ;;		line 34 in file "RFID.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3623 ;;		 -> RFIDbuf(12), 
  3624 ;;  latestChar      1    2[COMRAM] unsigned char 
  3625 ;; Auto vars:     Size  Location     Type
  3626 ;;  i               1    3[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  1    wreg      unsigned char 
  3629 ;; Registers used:
  3630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3636 ;;      Params:         3       0       0       0
  3637 ;;      Locals:         1       0       0       0
  3638 ;;      Temps:          0       0       0       0
  3639 ;;      Totals:         4       0       0       0
  3640 ;;Total ram usage:        4 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_InterruptHandlerHigh
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text28
  3650  000DBE                     __ptext28:
  3651                           	opt callstack 0
  3652  000DBE                     _processRFID:
  3653                           	opt callstack 23
  3654                           
  3655                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3656                           
  3657                           ;incstack = 0
  3658  000DBE  0E03               	movlw	3
  3659  000DC0  1803               	xorwf	processRFID@latestChar,w,c
  3660  000DC2  A4D8               	btfss	status,2,c
  3661  000DC4  D002               	goto	i2l1864
  3662                           
  3663                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3664  000DC6  0E01               	movlw	1
  3665  000DC8  0012               	return	
  3666  000DCA                     i2l1864:
  3667                           
  3668                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3669  000DCA  0E02               	movlw	2
  3670  000DCC  1803               	xorwf	processRFID@latestChar,w,c
  3671  000DCE  A4D8               	btfss	status,2,c
  3672  000DD0  D012               	goto	i2l1884
  3673                           
  3674                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3675  000DD2  0E00               	movlw	0
  3676  000DD4  6E42               	movwf	processRFID@position_in_buf,c
  3677                           
  3678                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3679  000DD6  0E00               	movlw	0
  3680  000DD8  6E04               	movwf	processRFID@i,c
  3681  000DDA                     i2l1872:
  3682                           
  3683                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3684  000DDA  5004               	movf	processRFID@i,w,c
  3685  000DDC  2401               	addwf	processRFID@RFIDbuf,w,c
  3686  000DDE  6ED9               	movwf	fsr2l,c
  3687  000DE0  0E00               	movlw	0
  3688  000DE2  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3689  000DE4  6EDA               	movwf	fsr2h,c
  3690  000DE6  0E00               	movlw	0
  3691  000DE8  6EDF               	movwf	indf2,c
  3692                           
  3693                           ;RFID.c: 56:            }
  3694  000DEA  2A04               	incf	processRFID@i,f,c
  3695  000DEC  0E0B               	movlw	11
  3696  000DEE  6404               	cpfsgt	processRFID@i,c
  3697  000DF0  D7F4               	goto	i2l1872
  3698  000DF2                     i2u103_40:
  3699                           
  3700                           ;RFID.c: 58:            return 0;
  3701  000DF2  0E00               	movlw	0
  3702  000DF4  0012               	return	
  3703  000DF6                     i2l1884:
  3704                           
  3705                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  3706  000DF6  5042               	movf	processRFID@position_in_buf,w,c
  3707  000DF8  2401               	addwf	processRFID@RFIDbuf,w,c
  3708  000DFA  6ED9               	movwf	fsr2l,c
  3709  000DFC  0E00               	movlw	0
  3710  000DFE  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3711  000E00  6EDA               	movwf	fsr2h,c
  3712  000E02  C003  FFDF         	movff	processRFID@latestChar,indf2
  3713                           
  3714                           ;RFID.c: 64:             position_in_buf++;
  3715  000E06  2A42               	incf	processRFID@position_in_buf,f,c
  3716  000E08  D7F4               	goto	i2u103_40
  3717  000E0A                     __end_of_processRFID:
  3718                           	opt callstack 0
  3719                           
  3720                           	psect	rparam
  3721  0000                     
  3722                           	psect	temp
  3723  000045                     btemp:
  3724                           	opt callstack 0
  3725  000045                     	ds	1
  3726  0000                     int$flags	set	btemp
  3727  0000                     wtemp8	set	btemp+1
  3728  0000                     ttemp5	set	btemp+1
  3729  0000                     ttemp6	set	btemp+4
  3730  0000                     ttemp7	set	btemp+8
  3731                           tosu	equ	0xFFF
  3732                           tosh	equ	0xFFE
  3733                           tosl	equ	0xFFD
  3734                           stkptr	equ	0xFFC
  3735                           pclatu	equ	0xFFB
  3736                           pclath	equ	0xFFA
  3737                           pcl	equ	0xFF9
  3738                           tblptru	equ	0xFF8
  3739                           tblptrh	equ	0xFF7
  3740                           tblptrl	equ	0xFF6
  3741                           tablat	equ	0xFF5
  3742                           prodh	equ	0xFF4
  3743                           prodl	equ	0xFF3
  3744                           indf0	equ	0xFEF
  3745                           postinc0	equ	0xFEE
  3746                           postdec0	equ	0xFED
  3747                           preinc0	equ	0xFEC
  3748                           plusw0	equ	0xFEB
  3749                           fsr0h	equ	0xFEA
  3750                           fsr0l	equ	0xFE9
  3751                           wreg	equ	0xFE8
  3752                           indf1	equ	0xFE7
  3753                           postinc1	equ	0xFE6
  3754                           postdec1	equ	0xFE5
  3755                           preinc1	equ	0xFE4
  3756                           plusw1	equ	0xFE3
  3757                           fsr1h	equ	0xFE2
  3758                           fsr1l	equ	0xFE1
  3759                           bsr	equ	0xFE0
  3760                           indf2	equ	0xFDF
  3761                           postinc2	equ	0xFDE
  3762                           postdec2	equ	0xFDD
  3763                           preinc2	equ	0xFDC
  3764                           plusw2	equ	0xFDB
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    0
    Data        0
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      68
    BANK0           160     26      70
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1787_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), STR_4(CODE[16]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   31076
                                              0 BANK0     26    26      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      10     4      6    6039
                                             39 COMRAM    10     4      6
                           _ClearLCD
                         _LCD_String
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     7      6    3683
                                             39 COMRAM    13     7      6
                      _classify_data
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       14    10      4     400
                                              7 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          16     8      8    3321
                                             39 COMRAM    16     8      8
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     1     12   11369
                                             39 COMRAM    13     1     12
                         _check_RFID
                       _display_RFID
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4176
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (3) _SetLine                                              1     1      0    1179
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1722
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (8) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _classify_data
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      46       5       43.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      44       1       72.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A       3        0.0%
DATA                 0      0      8A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 05 21:44:26 2020

                           l47 0E7E                   ___awdiv@sign 0013            ___wmul@multiplicand 000A  
                ?_display_RFID 000D                    ?_LCD_String 000C                            l104 055C  
                          l296 0D36            display_RFID@dataBuf 000D                 moveToBeacon@mL 0028  
               moveToBeacon@mR 002A        __size_of_stopAndDisplay 006E                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l2112 0534  
                         l2104 0C84                           l2122 0ECC                           l2060 090A  
                         l2118 0EBA                           l2222 0AA8                           l2206 09A4  
                         l2072 0930                           l2232 0AEA                           l2216 09E6  
                         l2400 0BAE                           l2074 0938                           l2066 091A  
                         l2092 0970                           l2084 0958                           l2308 08F2  
                         l2262 038E                           l2238 0A26                           l2190 0CC2  
                         l2406 0BE0                           l2430 0680                           l2422 0616  
                         l2088 0962                           l2256 034C                           l2360 0D80  
                         l2248 0A68                           l2098 0C50                           l2290 0E1C  
                         l2186 0CB4                           l2434 06A8                           l2426 0652  
                         l2418 05F2                           l2268 03D0                           l2348 0C18  
                         l2278 0480                           l2382 0D44                           l2390 0B96  
                         STR_1 0331                           STR_2 0321                           STR_3 0311  
                         STR_4 0301                           STR_5 0340                           u1220 0C74  
                         u1230 0CA4                           u1400 03EE                           u1410 03F0  
                         u1155 0E54                           u1227 0C6A                           u1156 0E56  
                         u1500 043E                           u1420 03FE                           u1237 0C9A  
                         u1190 093C                           u1510 0440                           u1430 0400  
                         _LATB 000F8A                           u1264 0508                           u1520 045C  
                         u1440 040E                           u1265 0504                           u1274 0550  
                         u1530 045E                           u1450 0410                           u1610 0BDA  
                         u1275 054C                           u1460 041E                           u1285 05A8  
                         u1470 0420                           u1390 03E4                           u1550 0E48  
                         u1480 042E                           u1490 0430                           u1707 07D4  
                         u1717 07E4                           u1807 0A5C                           u1727 07F2  
                         u1817 0ADE                           u1737 0800                           u1827 0F82  
                         u1747 0812                           u1837 0ECE                           u1757 0824  
                         u1677 0BB8                           u1847 0C7E                           u1767 083A  
                         u1687 0CF8                           u1857 0E62                           u1777 084E  
                         u1697 07BE                           u1867 0E72                           u1787 0860  
                         u1877 0B70                           u1797 09DA                           u1887 0F90  
                         i2l55 0030                           i2l57 0032                           _dbuf 0060  
                         _main 05B8                           _prec 003C                           _nout 0038  
                         fsr0h 000FEA                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0045  
                         _stop 0CAC                           prodh 000FF4                           prodl 000FF3  
                         start 003E                   ___param_bank 000000                __end_of_SendLCD 0E7A  
              __end_of_SetLine 0ED6                 ??_display_RFID 000F                          ?_main 0001  
          main@searching_speed 008C                __end_of___awdiv 097A                          ?_stop 001F  
              ___awdiv@divisor 0010                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0012                          _RCREG 000FAE                          _E_TOG 0F8C  
                        _SPBRG 000FAF                   ?_init_sensor 0001                __end_of_initPWM 0F72  
                        _flags 003E                          _setup 0E7A                          _width 003A  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0046  
                        ttemp6 0049                          ttemp7 004D                          stop@i 0026  
                        status 000FD8                          wtemp8 0046            __size_of_LCD_String 005E  
             __end_of_ClearLCD 0F8C           moveForward@max_power 0023                 __CFG_MCLRE$OFF 000000  
              __initialization 0ED6                   __end_of_main 06B6                   __end_of_stop 0D08  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000C                         ??_main 0038  
                       ??_stop 0025                  __activetblptr 000002                         ?_E_TOG 0001  
                 ?_setMotorPWM 0016                   ?_moveForward 001F   scanForBeacon@beacon_location 0032  
             ___awdiv@dividend 000E                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i2l1872 0DDA                         i2l1864 0DCA  
                       i2l1884 0DF6                         _LCDout 0B00                    SendLCD@Byte 000B  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000A                      ??_SendLCD 000B                      ??_SetLine 000C  
                display_RFID@i 000F                         ___wmul 0EFC                      ??___awdiv 0012  
             __end_of_init_LCD 0868            init_motor_struct@mL 001F            init_motor_struct@mR 0021  
                       clear_0 0EDC                         clear_1 0EE8               ___awdiv@quotient 0014  
       __size_of_scanForBeacon 0068              moveToBeacon@speed 002C                      ??_initPWM 000A  
               _stopAndDisplay 0B78                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 001F  
                       stop@mR 0021                   ?_processRFID 0001              _init_motor_struct 06B6  
         __end_of_display_RFID 0E4A             ?_init_motor_struct 001F                     __accesstop 0060  
      __end_of__initialization 0EEE                  ___rparam_used 000001                    SetLine@line 000C  
                __end_of_E_TOG 0F9A            ??_init_motor_struct 0023                 __pcstackCOMRAM 0001  
                __end_of_setup 0EA8                   ??_LCD_String 000E         __end_of_stopAndDisplay 0BE6  
                      ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0036                      ?_ClearLCD 0001  
    __end_of_init_motor_struct 07A0          __end_of_classify_data 08F6                     _check_RFID 0344  
         __size_of_init_sensor 001C                        ??_setup 000D                  ?_moveBackward 001F  
                   __pbssBANK0 0060                        ?_LCDout 0001                  _scanForBeacon 0BE6  
           __size_of_init_RFID 001A             __end_of_LCD_String 0CAC                        ?___wmul 0008  
                ?_moveToBeacon 0028                        _CAP1CON 000F63                        _DFLTCON 000F60  
              ?_stopAndDisplay 0028                     ??_ClearLCD 000C                        _RFIDbuf 0080  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0025  
               ?_scanForBeacon 0028           __size_of_setMotorPWM 0124           __size_of_moveForward 0082  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 0026  
           __size_of_turnRight 0082                        _SendLCD 0E4A                        __Hparam 0000  
                      _SetLine 0EA8                        __Lparam 0000                 ??_moveToBeacon 0034  
        processRFID@latestChar 0003                        ___awdiv 08F6                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 0008                        __pcinit 0ED6  
                      __ramtop 0300                        __ptext0 05B8                        __ptext1 0B78  
                      __ptext2 0CAC                        __ptext3 0E7A                        __ptext4 0F22  
                      __ptext5 0F3E                        __ptext6 07A0                        __ptext7 0F58  
                      __ptext8 0BE6                        __ptext9 097A              __end_of_init_RFID 0F58  
             check_RFID@hexBuf 0012                        _initPWM 0F58                   LCDout@number 0009  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040             moveToBeacon@micros 002E  
            stop@initial_speed 0023                    ?_check_RFID 000E           end_of_initialization 0EEE  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                __Lmediumconst 0000                      _RFID_flag 0044                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0032                     _robot_mode 0043                     _returnHome 0D08  
                 _display_RFID 0E0A                      _PORTDbits 000F83              __end_of_turnRight 09FC  
                  returnHome@i 0034                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                ??_scanForBeacon 002E  
           debug@smoothed_data 0040                  moveForward@mL 001F                  moveForward@mR 0021  
               __end_of_LCDout 0B78                      _TXSTAbits 000FAC                     main@motorL 0094  
                   main@motorR 009D           __end_of_moveBackward 0A7E            __size_of_check_RFID 0150  
               __end_of___wmul 0F22                    _BAUDCONbits 000FAA            start_initialization 0ED6  
            __size_of_ClearLCD 001A           __end_of_moveToBeacon 0DBE          classify_data@raw_data 0008  
                     ??_LCDout 0008          moveBackward@max_power 0023   __end_of_InterruptHandlerHigh 003E  
        classify_data@previous 0014          classify_data@smoothed 000A               ??_stopAndDisplay 002E  
                     ??___wmul 000C                scanForBeacon@mL 0028                scanForBeacon@mR 002A  
           turnRight@max_power 0023                    ?_returnHome 0028                    __pbssCOMRAM 0038  
                ??_init_sensor 0008                  __pcstackBANK0 008C              __size_of_init_LCD 00C8  
                     ?_SendLCD 000A                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 000E         __size_of_classify_data 008E             check_RFID@checksum 0023  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       ?_initPWM 0008  
                  __smallconst 0300                 __size_of_E_TOG 000E                      _init_RFID 0F3E  
          stopAndDisplay@speed 002C                  ??_setMotorPWM 0018                  ??_moveForward 0025  
                 ??_check_RFID 0010                 __size_of_setup 002E                check_RFID@byte1 001E  
              check_RFID@byte2 001F                check_RFID@byte3 0020                check_RFID@byte4 0021  
              check_RFID@byte5 0022            __end_of_init_sensor 0F3E                 ___wmul@product 000C  
          __size_of_returnHome 005C                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u103_40 0DF2          __size_of_moveBackward 0082                    turnRight@mL 001F  
                  turnRight@mR 0021                       _PIR1bits 000F9E                       _RCONbits 000FD0  
           __end_of_check_RFID 0494              ___wmul@multiplier 0008                   setMotorPWM@m 0016  
                 moveForward@i 0026               main@moving_speed 0092          __size_of_moveToBeacon 005A  
         _InterruptHandlerHigh 0008                       _ClearLCD 0F72                     ?_init_RFID 0001  
                    _turnRight 097A                  ??_processRFID 0004                  _classify_data 0868  
               moveBackward@mL 001F                 moveBackward@mR 0021                   _moveBackward 09FC  
          __end_of_setMotorPWM 05B8            __end_of_moveForward 0B00                    check_RFID@i 0024  
                     __Hrparam 0000               __size_of_SendLCD 0030                       __Lrparam 0000  
             __size_of_SetLine 002E                   _moveToBeacon 0D64               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 0F22  
               ?_classify_data 0008              check_RFID@dataBuf 000E                     ?_turnRight 001F  
                     __ptext10 0868                       __ptext11 0D08                       __ptext20 0E4A  
                     __ptext12 09FC                       __ptext21 0B00                       __ptext13 0D64  
                     __ptext22 0F8C                       __ptext14 0A7E                       __ptext23 06B6  
                     __ptext15 0E0A                       __ptext24 0494                       __ptext16 0F72  
                     __ptext25 0EFC                       __ptext17 0344                       __ptext26 08F6  
                     __ptext18 0EA8                       __ptext19 0C4E                       __ptext28 0DBE  
        __end_of_scanForBeacon 0C4E                       _init_LCD 07A0                  __size_of_main 00FE  
                __size_of_stop 005C            __end_of_processRFID 0E0A             scanForBeacon@speed 002C  
                   turnRight@i 0026                       int$flags 0045                   ??_returnHome 0030  
                   _LCD_String 0C4E          scanForBeacon@raw_data 0030                     _INTCONbits 000FF2  
                  ??_init_RFID 0008                    _setMotorPWM 0494                    _moveForward 0A7E  
                     intlevel2 0000     scanForBeacon@smoothed_data 0033             __end_of_returnHome 0D64  
                   _OSCCONbits 000FD3               returnHome@micros 002E        moveToBeacon@RFID_buffer 0030  
   processRFID@position_in_buf 0042         ??_InterruptHandlerHigh 0005                ??_classify_data 000C  
             stopAndDisplay@mL 0028               stopAndDisplay@mR 002A                returnHome@speed 002C  
                  ??_turnRight 0025                    _processRFID 0DBE             main@movementMicros 008E  
              stopAndDisplay@i 0030                   returnHome@mL 0028                   returnHome@mR 002A  
