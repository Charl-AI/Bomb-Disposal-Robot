

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 21:27:26 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4331 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     _PORTDbits	set	3971
    83  0000                     _CAP1BUFL	set	3944
    84  0000                     _CAP1BUFH	set	3945
    85  0000                     _CAP1CON	set	3939
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _INTCON2bits	set	4081
   111  0000                     _T0CON	set	4053
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TRISBbits	set	3987
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCONbits	set	4082
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _PDC1H	set	3958
   119  0000                     _PDC1L	set	3959
   120  0000                     _PDC0H	set	3960
   121  0000                     _PDC0L	set	3961
   122                           
   123                           	psect	smallconst
   124  000300                     __psmallconst:
   125                           	opt callstack 0
   126  000300  00                 	db	0
   127  000301                     STR_12:
   128  000301  53                 	db	83	;'S'
   129  000302  54                 	db	84	;'T'
   130  000303  41                 	db	65	;'A'
   131  000304  52                 	db	82	;'R'
   132  000305  54                 	db	84	;'T'
   133  000306  49                 	db	73	;'I'
   134  000307  4E                 	db	78	;'N'
   135  000308  47                 	db	71	;'G'
   136  000309  20                 	db	32
   137  00030A  53                 	db	83	;'S'
   138  00030B  45                 	db	69	;'E'
   139  00030C  41                 	db	65	;'A'
   140  00030D  52                 	db	82	;'R'
   141  00030E  43                 	db	67	;'C'
   142  00030F  48                 	db	72	;'H'
   143  000310  00                 	db	0
   144  000311                     STR_11:
   145  000311  54                 	db	84	;'T'
   146  000312  4F                 	db	79	;'O'
   147  000313  20                 	db	32
   148  000314  53                 	db	83	;'S'
   149  000315  54                 	db	84	;'T'
   150  000316  41                 	db	65	;'A'
   151  000317  52                 	db	82	;'R'
   152  000318  54                 	db	84	;'T'
   153  000319  20                 	db	32
   154  00031A  53                 	db	83	;'S'
   155  00031B  45                 	db	69	;'E'
   156  00031C  41                 	db	65	;'A'
   157  00031D  52                 	db	82	;'R'
   158  00031E  43                 	db	67	;'C'
   159  00031F  48                 	db	72	;'H'
   160  000320  00                 	db	0
   161  000321                     STR_7:
   162  000321  52                 	db	82	;'R'
   163  000322  45                 	db	69	;'E'
   164  000323  53                 	db	83	;'S'
   165  000324  45                 	db	69	;'E'
   166  000325  54                 	db	84	;'T'
   167  000326  54                 	db	84	;'T'
   168  000327  49                 	db	73	;'I'
   169  000328  4E                 	db	78	;'N'
   170  000329  47                 	db	71	;'G'
   171  00032A  20                 	db	32
   172  00032B  52                 	db	82	;'R'
   173  00032C  4F                 	db	79	;'O'
   174  00032D  42                 	db	66	;'B'
   175  00032E  4F                 	db	79	;'O'
   176  00032F  54                 	db	84	;'T'
   177  000330  00                 	db	0
   178  000331                     STR_3:
   179  000331  43                 	db	67	;'C'
   180  000332  48                 	db	72	;'H'
   181  000333  45                 	db	69	;'E'
   182  000334  43                 	db	67	;'C'
   183  000335  4B                 	db	75	;'K'
   184  000336  53                 	db	83	;'S'
   185  000337  55                 	db	85	;'U'
   186  000338  4D                 	db	77	;'M'
   187  000339  20                 	db	32
   188  00033A  46                 	db	70	;'F'
   189  00033B  41                 	db	65	;'A'
   190  00033C  49                 	db	73	;'I'
   191  00033D  4C                 	db	76	;'L'
   192  00033E  45                 	db	69	;'E'
   193  00033F  44                 	db	68	;'D'
   194  000340  00                 	db	0
   195  000341                     STR_2:
   196  000341  43                 	db	67	;'C'
   197  000342  48                 	db	72	;'H'
   198  000343  45                 	db	69	;'E'
   199  000344  43                 	db	67	;'C'
   200  000345  4B                 	db	75	;'K'
   201  000346  53                 	db	83	;'S'
   202  000347  55                 	db	85	;'U'
   203  000348  4D                 	db	77	;'M'
   204  000349  20                 	db	32
   205  00034A  50                 	db	80	;'P'
   206  00034B  41                 	db	65	;'A'
   207  00034C  53                 	db	83	;'S'
   208  00034D  53                 	db	83	;'S'
   209  00034E  45                 	db	69	;'E'
   210  00034F  44                 	db	68	;'D'
   211  000350  00                 	db	0
   212  000351                     STR_5:
   213  000351  4D                 	db	77	;'M'
   214  000352  4F                 	db	79	;'O'
   215  000353  56                 	db	86	;'V'
   216  000354  49                 	db	73	;'I'
   217  000355  4E                 	db	78	;'N'
   218  000356  47                 	db	71	;'G'
   219  000357  20                 	db	32
   220  000358  54                 	db	84	;'T'
   221  000359  4F                 	db	79	;'O'
   222  00035A  20                 	db	32
   223  00035B  42                 	db	66	;'B'
   224  00035C  4F                 	db	79	;'O'
   225  00035D  4D                 	db	77	;'M'
   226  00035E  42                 	db	66	;'B'
   227  00035F  00                 	db	0
   228  000360                     STR_6:
   229  000360  52                 	db	82	;'R'
   230  000361  45                 	db	69	;'E'
   231  000362  54                 	db	84	;'T'
   232  000363  55                 	db	85	;'U'
   233  000364  52                 	db	82	;'R'
   234  000365  4E                 	db	78	;'N'
   235  000366  49                 	db	73	;'I'
   236  000367  4E                 	db	78	;'N'
   237  000368  47                 	db	71	;'G'
   238  000369  20                 	db	32
   239  00036A  48                 	db	72	;'H'
   240  00036B  4F                 	db	79	;'O'
   241  00036C  4D                 	db	77	;'M'
   242  00036D  45                 	db	69	;'E'
   243  00036E  00                 	db	0
   244  00036F                     STR_1:
   245  00036F  43                 	db	67	;'C'
   246  000370  72                 	db	114	;'r'
   247  000371  69                 	db	105	;'i'
   248  000372  74                 	db	116	;'t'
   249  000373  69                 	db	105	;'i'
   250  000374  63                 	db	99	;'c'
   251  000375  61                 	db	97	;'a'
   252  000376  6C                 	db	108	;'l'
   253  000377  20                 	db	32
   254  000378  45                 	db	69	;'E'
   255  000379  72                 	db	114	;'r'
   256  00037A  72                 	db	114	;'r'
   257  00037B  6F                 	db	111	;'o'
   258  00037C  72                 	db	114	;'r'
   259  00037D  00                 	db	0
   260  00037E                     STR_10:
   261  00037E  50                 	db	80	;'P'
   262  00037F  52                 	db	82	;'R'
   263  000380  45                 	db	69	;'E'
   264  000381  53                 	db	83	;'S'
   265  000382  53                 	db	83	;'S'
   266  000383  20                 	db	32
   267  000384  42                 	db	66	;'B'
   268  000385  55                 	db	85	;'U'
   269  000386  54                 	db	84	;'T'
   270  000387  54                 	db	84	;'T'
   271  000388  4F                 	db	79	;'O'
   272  000389  4E                 	db	78	;'N'
   273  00038A  00                 	db	0
   274  00038B                     STR_4:
   275  00038B  53                 	db	83	;'S'
   276  00038C  45                 	db	69	;'E'
   277  00038D  41                 	db	65	;'A'
   278  00038E  52                 	db	82	;'R'
   279  00038F  43                 	db	67	;'C'
   280  000390  48                 	db	72	;'H'
   281  000391  49                 	db	73	;'I'
   282  000392  4E                 	db	78	;'N'
   283  000393  47                 	db	71	;'G'
   284  000394  00                 	db	0
   285  000395                     STR_8:
   286  000395  25                 	db	37
   287  000396  75                 	db	117	;'u'
   288  000397  00                 	db	0
   289  0000                     
   290                           ; #config settings
   291  000398  00                 	db	0	; dummy byte at the end
   292  0000                     
   293                           	psect	cinit
   294  001222                     __pcinit:
   295                           	opt callstack 0
   296  001222                     start_initialization:
   297                           	opt callstack 0
   298  001222                     __initialization:
   299                           	opt callstack 0
   300                           
   301                           ; Clear objects allocated to BANK0 (94 bytes)
   302  001222  EE00  F060         	lfsr	0,__pbssBANK0
   303  001226  0E5E               	movlw	94
   304  001228                     clear_0:
   305  001228  6AEE               	clrf	postinc0,c
   306  00122A  06E8               	decf	wreg,f,c
   307  00122C  E1FD               	bnz	clear_0
   308                           
   309                           ; Clear objects allocated to COMRAM (26 bytes)
   310  00122E  EE00  F037         	lfsr	0,__pbssCOMRAM
   311  001232  0E1A               	movlw	26
   312  001234                     clear_1:
   313  001234  6AEE               	clrf	postinc0,c
   314  001236  06E8               	decf	wreg,f,c
   315  001238  E1FD               	bnz	clear_1
   316  00123A                     end_of_initialization:
   317                           	opt callstack 0
   318  00123A                     __end_of__initialization:
   319                           	opt callstack 0
   320  00123A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321  00123C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322  00123E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   323  001240  6EF8               	movwf	tblptru,c
   324  001242  0100               	movlb	0
   325  001244  EFB4  F003         	goto	_main	;jump to C main() function
   326                           
   327                           	psect	bssCOMRAM
   328  000037                     __pbssCOMRAM:
   329                           	opt callstack 0
   330  000037                     	ds	2
   331  000039                     	ds	2
   332  00003B                     	ds	2
   333  00003D                     	ds	2
   334  00003F                     debug@smoothed_data:
   335                           	opt callstack 0
   336  00003F                     	ds	2
   337  000041                     classify_data@smoothed:
   338                           	opt callstack 0
   339  000041                     	ds	2
   340  000043                     processRFID@position_in_buf:
   341                           	opt callstack 0
   342  000043                     	ds	1
   343  000044                     _robot_mode:
   344                           	opt callstack 0
   345  000044                     	ds	1
   346  000045                     _RFIDbuf:
   347                           	opt callstack 0
   348  000045                     	ds	12
   349                           
   350                           	psect	bssBANK0
   351  000060                     __pbssBANK0:
   352                           	opt callstack 0
   353  000060                     _travel_moves:
   354                           	opt callstack 0
   355  000060                     	ds	61
   356  00009D                     	ds	32
   357  0000BD                     _RFID_flag:
   358                           	opt callstack 0
   359  0000BD                     	ds	1
   360                           
   361                           	psect	cstackBANK0
   362  0000BE                     __pcstackBANK0:
   363                           	opt callstack 0
   364  0000BE                     ??_scanForBeacon:
   365  0000BE                     ??_stopAndDisplay:
   366  0000BE                     moveToBeacon@mL:
   367                           	opt callstack 0
   368  0000BE                     returnHome@mL:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x0
   372  0000BE                     	ds	2
   373  0000C0                     scanForBeacon@raw_data:
   374                           	opt callstack 0
   375  0000C0                     moveToBeacon@mR:
   376                           	opt callstack 0
   377  0000C0                     returnHome@mR:
   378                           	opt callstack 0
   379  0000C0                     stopAndDisplay@i:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x2
   383  0000C0                     	ds	2
   384  0000C2                     scanForBeacon@beacon_location:
   385                           	opt callstack 0
   386  0000C2                     moveToBeacon@speed:
   387                           	opt callstack 0
   388  0000C2                     returnHome@move_speed:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x4
   392  0000C2                     	ds	2
   393  0000C4                     moveToBeacon@move:
   394                           	opt callstack 0
   395  0000C4                     returnHome@search_speed:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x6
   399  0000C4                     	ds	2
   400  0000C6                     moveToBeacon@exit_flag:
   401                           	opt callstack 0
   402  0000C6                     returnHome@move:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x8
   406  0000C6                     	ds	2
   407  0000C8                     main@searching_speed:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0xA
   411  0000C8                     	ds	2
   412  0000CA                     main@moving_speed:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0xC
   416  0000CA                     	ds	2
   417  0000CC                     main@motorL:
   418                           	opt callstack 0
   419                           
   420                           ; 9 bytes @ 0xE
   421  0000CC                     	ds	9
   422  0000D5                     main@motorR:
   423                           	opt callstack 0
   424                           
   425                           ; 9 bytes @ 0x17
   426  0000D5                     	ds	9
   427                           
   428                           	psect	cstackCOMRAM
   429  000001                     __pcstackCOMRAM:
   430                           	opt callstack 0
   431  000001                     processRFID@RFIDbuf:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x0
   435  000001                     	ds	2
   436  000003                     processRFID@latestChar:
   437                           	opt callstack 0
   438                           
   439                           ; 1 bytes @ 0x2
   440  000003                     	ds	1
   441  000004                     processRFID@i:
   442                           	opt callstack 0
   443                           
   444                           ; 1 bytes @ 0x3
   445  000004                     	ds	1
   446  000005                     ??_InterruptHandlerHigh:
   447                           
   448                           ; 1 bytes @ 0x4
   449  000005                     	ds	3
   450  000008                     ??_InterruptHandlerLow:
   451                           
   452                           ; 1 bytes @ 0x7
   453  000008                     	ds	7
   454  00000F                     ??_LCDout:
   455  00000F                     ?___wmul:
   456                           	opt callstack 0
   457  00000F                     initPWM@PWMperiod:
   458                           	opt callstack 0
   459  00000F                     classify_data@raw_data:
   460                           	opt callstack 0
   461  00000F                     ___wmul@multiplier:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0xE
   465  00000F                     	ds	1
   466  000010                     LCDout@number:
   467                           	opt callstack 0
   468                           
   469                           ; 1 bytes @ 0xF
   470  000010                     	ds	1
   471  000011                     ??_classify_data:
   472  000011                     SendLCD@type:
   473                           	opt callstack 0
   474  000011                     ___wmul@multiplicand:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x10
   478  000011                     	ds	1
   479  000012                     SendLCD@Byte:
   480                           	opt callstack 0
   481                           
   482                           ; 1 bytes @ 0x11
   483  000012                     	ds	1
   484  000013                     ??_init_LCD:
   485  000013                     ??_ClearLCD:
   486  000013                     SetLine@line:
   487                           	opt callstack 0
   488  000013                     LCD_String@string:
   489                           	opt callstack 0
   490  000013                     classify_data@filtered:
   491                           	opt callstack 0
   492  000013                     ___wmul@product:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x12
   496  000013                     	ds	1
   497  000014                     display_RFID@dataBuf:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x13
   501  000014                     	ds	1
   502  000015                     ??_waitForInput:
   503  000015                     ?___awdiv:
   504                           	opt callstack 0
   505  000015                     check_RFID@dataBuf:
   506                           	opt callstack 0
   507  000015                     ___awdiv@dividend:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x14
   511  000015                     	ds	1
   512  000016                     display_RFID@i:
   513                           	opt callstack 0
   514                           
   515                           ; 2 bytes @ 0x15
   516  000016                     	ds	1
   517  000017                     ??_check_RFID:
   518  000017                     ___awdiv@divisor:
   519                           	opt callstack 0
   520                           
   521                           ; 2 bytes @ 0x16
   522  000017                     	ds	1
   523  000018                     waitForInput@raw_data:
   524                           	opt callstack 0
   525                           
   526                           ; 2 bytes @ 0x17
   527  000018                     	ds	1
   528  000019                     ___awdiv@counter:
   529                           	opt callstack 0
   530  000019                     check_RFID@hexBuf:
   531                           	opt callstack 0
   532                           
   533                           ; 12 bytes @ 0x18
   534  000019                     	ds	1
   535  00001A                     ___awdiv@sign:
   536                           	opt callstack 0
   537  00001A                     waitForInput@i:
   538                           	opt callstack 0
   539                           
   540                           ; 2 bytes @ 0x19
   541  00001A                     	ds	1
   542  00001B                     ___awdiv@quotient:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x1A
   546  00001B                     	ds	1
   547  00001C                     waitForInput@i_1408:
   548                           	opt callstack 0
   549                           
   550                           ; 2 bytes @ 0x1B
   551  00001C                     	ds	1
   552  00001D                     setMotorPWM@m:
   553                           	opt callstack 0
   554                           
   555                           ; 2 bytes @ 0x1C
   556  00001D                     	ds	2
   557  00001F                     ??_setMotorPWM:
   558                           
   559                           ; 1 bytes @ 0x1E
   560  00001F                     	ds	5
   561  000024                     setMotorPWM@PWMduty:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x23
   565  000024                     	ds	1
   566  000025                     check_RFID@byte1:
   567                           	opt callstack 0
   568                           
   569                           ; 1 bytes @ 0x24
   570  000025                     	ds	1
   571  000026                     check_RFID@byte2:
   572                           	opt callstack 0
   573  000026                     stop@mL:
   574                           	opt callstack 0
   575  000026                     turnLeft@mL:
   576                           	opt callstack 0
   577  000026                     turnRight@mL:
   578                           	opt callstack 0
   579  000026                     moveForward@mL:
   580                           	opt callstack 0
   581  000026                     moveBackward@mL:
   582                           	opt callstack 0
   583  000026                     init_motor_struct@mL:
   584                           	opt callstack 0
   585                           
   586                           ; 2 bytes @ 0x25
   587  000026                     	ds	1
   588  000027                     check_RFID@byte3:
   589                           	opt callstack 0
   590                           
   591                           ; 1 bytes @ 0x26
   592  000027                     	ds	1
   593  000028                     check_RFID@byte4:
   594                           	opt callstack 0
   595  000028                     stop@mR:
   596                           	opt callstack 0
   597  000028                     turnLeft@mR:
   598                           	opt callstack 0
   599  000028                     turnRight@mR:
   600                           	opt callstack 0
   601  000028                     moveForward@mR:
   602                           	opt callstack 0
   603  000028                     moveBackward@mR:
   604                           	opt callstack 0
   605  000028                     init_motor_struct@mR:
   606                           	opt callstack 0
   607                           
   608                           ; 2 bytes @ 0x27
   609  000028                     	ds	1
   610  000029                     check_RFID@byte5:
   611                           	opt callstack 0
   612                           
   613                           ; 1 bytes @ 0x28
   614  000029                     	ds	1
   615  00002A                     check_RFID@checksum:
   616                           	opt callstack 0
   617  00002A                     stop@initial_speed:
   618                           	opt callstack 0
   619  00002A                     turnLeft@max_power:
   620                           	opt callstack 0
   621  00002A                     turnRight@max_power:
   622                           	opt callstack 0
   623  00002A                     moveForward@max_power:
   624                           	opt callstack 0
   625  00002A                     moveBackward@max_power:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x29
   629  00002A                     	ds	1
   630  00002B                     check_RFID@i:
   631                           	opt callstack 0
   632                           
   633                           ; 2 bytes @ 0x2A
   634  00002B                     	ds	1
   635  00002C                     ??_stop:
   636  00002C                     ??_turnLeft:
   637  00002C                     ??_turnRight:
   638  00002C                     ??_moveForward:
   639  00002C                     ??_moveBackward:
   640                           
   641                           ; 1 bytes @ 0x2B
   642  00002C                     	ds	1
   643  00002D                     stop@i:
   644                           	opt callstack 0
   645  00002D                     turnLeft@i:
   646                           	opt callstack 0
   647  00002D                     turnRight@i:
   648                           	opt callstack 0
   649  00002D                     moveForward@i:
   650                           	opt callstack 0
   651  00002D                     moveBackward@i:
   652                           	opt callstack 0
   653                           
   654                           ; 2 bytes @ 0x2C
   655  00002D                     	ds	2
   656  00002F                     ??_moveToBeacon:
   657  00002F                     ??_returnHome:
   658  00002F                     scanForBeacon@mL:
   659                           	opt callstack 0
   660  00002F                     stopAndDisplay@mL:
   661                           	opt callstack 0
   662                           
   663                           ; 2 bytes @ 0x2E
   664  00002F                     	ds	2
   665  000031                     scanForBeacon@mR:
   666                           	opt callstack 0
   667  000031                     moveToBeacon@raw_data:
   668                           	opt callstack 0
   669  000031                     stopAndDisplay@mR:
   670                           	opt callstack 0
   671                           
   672                           ; 2 bytes @ 0x30
   673  000031                     	ds	2
   674  000033                     moveToBeacon@beacon_location:
   675                           	opt callstack 0
   676  000033                     scanForBeacon@speed:
   677                           	opt callstack 0
   678  000033                     stopAndDisplay@speed:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0x32
   682  000033                     	ds	1
   683  000034                     moveToBeacon@count:
   684                           	opt callstack 0
   685                           
   686                           ; 2 bytes @ 0x33
   687  000034                     	ds	1
   688  000035                     scanForBeacon@move:
   689                           	opt callstack 0
   690  000035                     stopAndDisplay@RFID_buffer:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x34
   694  000035                     	ds	2
   695  000037                     
   696                           ; 1 bytes @ 0x36
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 117 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  motorR          9   23[BANK0 ] struct DC_motor
   707 ;;  motorL          9   14[BANK0 ] struct DC_motor
   708 ;;  moving_speed    2   12[BANK0 ] int 
   709 ;;  searching_sp    2   10[BANK0 ] int 
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   719 ;;      Params:         0       0       0       0
   720 ;;      Locals:         0      22       0       0
   721 ;;      Temps:          0       0       0       0
   722 ;;      Totals:         0      22       0       0
   723 ;;Total ram usage:       22 bytes
   724 ;; Hardware stack levels required when called:    9
   725 ;; This function calls:
   726 ;;		_LCD_String
   727 ;;		_init_motor_struct
   728 ;;		_moveToBeacon
   729 ;;		_returnHome
   730 ;;		_scanForBeacon
   731 ;;		_setup
   732 ;;		_stopAndDisplay
   733 ;;		_waitForInput
   734 ;; This function is called by:
   735 ;;		Startup code after reset
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text0
   740  000768                     __ptext0:
   741                           	opt callstack 0
   742  000768                     _main:
   743                           	opt callstack 22
   744                           
   745                           ;main.c: 120:   setup();
   746                           
   747                           ;incstack = 0
   748  000768  ECAC  F008         	call	_setup	;wreg free
   749                           
   750                           ;main.c: 123:   struct DC_motor motorL, motorR;;main.c: 124:   init_motor_struct(&motorL
      +                          , &motorR);
   751  00076C  0ECC               	movlw	low main@motorL
   752  00076E  6E26               	movwf	init_motor_struct@mL,c
   753  000770  0E00               	movlw	high main@motorL
   754  000772  6E27               	movwf	init_motor_struct@mL+1,c
   755  000774  0ED5               	movlw	low main@motorR
   756  000776  6E28               	movwf	init_motor_struct@mR,c
   757  000778  0E00               	movlw	high main@motorR
   758  00077A  6E29               	movwf	init_motor_struct@mR+1,c
   759  00077C  EC37  F004         	call	_init_motor_struct	;wreg free
   760                           
   761                           ;main.c: 127:   int searching_speed = 55;
   762  000780  0E00               	movlw	0
   763  000782  0100               	movlb	0	; () banked
   764  000784  6FC9               	movwf	(main@searching_speed+1)& (0+255),b
   765  000786  0E37               	movlw	55
   766  000788  6FC8               	movwf	main@searching_speed& (0+255),b
   767                           
   768                           ; BSR set to: 0
   769                           ;main.c: 128:   int moving_speed = 95;
   770  00078A  0E00               	movlw	0
   771  00078C  6FCB               	movwf	(main@moving_speed+1)& (0+255),b
   772  00078E  0E5F               	movlw	95
   773  000790  6FCA               	movwf	main@moving_speed& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 130:   waitForInput();
   777  000792  EC72  F005         	call	_waitForInput	;wreg free
   778  000796                     l2786:
   779                           
   780                           ;main.c: 134:   {;main.c: 136:       if(robot_mode == 0)
   781  000796  5044               	movf	_robot_mode,w,c	;volatile
   782  000798  A4D8               	btfss	status,2,c
   783  00079A  D013               	goto	l2790
   784                           
   785                           ;main.c: 137:       {;main.c: 138:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed, &travel_moves);
   786  00079C  0ECC               	movlw	low main@motorL
   787  00079E  6E2F               	movwf	scanForBeacon@mL,c
   788  0007A0  0E00               	movlw	high main@motorL
   789  0007A2  6E30               	movwf	scanForBeacon@mL+1,c
   790  0007A4  0ED5               	movlw	low main@motorR
   791  0007A6  6E31               	movwf	scanForBeacon@mR,c
   792  0007A8  0E00               	movlw	high main@motorR
   793  0007AA  6E32               	movwf	scanForBeacon@mR+1,c
   794  0007AC  C0C8  F033         	movff	main@searching_speed,scanForBeacon@speed
   795  0007B0  C0C9  F034         	movff	main@searching_speed+1,scanForBeacon@speed+1
   796  0007B4  0E60               	movlw	low _travel_moves
   797  0007B6  6E35               	movwf	scanForBeacon@move,c
   798  0007B8  0E00               	movlw	high _travel_moves
   799  0007BA  6E36               	movwf	scanForBeacon@move+1,c
   800  0007BC  EC1E  F006         	call	_scanForBeacon	;wreg free
   801  0007C0  D04D               	goto	L3
   802  0007C2                     l2790:
   803  0007C2  0444               	decf	_robot_mode,w,c	;volatile
   804  0007C4  A4D8               	btfss	status,2,c
   805  0007C6  D018               	goto	l2794
   806                           
   807                           ;main.c: 144:       {;main.c: 145:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   808  0007C8  0ECC               	movlw	low main@motorL
   809  0007CA  0100               	movlb	0	; () banked
   810  0007CC  6FBE               	movwf	moveToBeacon@mL& (0+255),b
   811  0007CE  0E00               	movlw	high main@motorL
   812  0007D0  6FBF               	movwf	(moveToBeacon@mL+1)& (0+255),b
   813  0007D2  0ED5               	movlw	low main@motorR
   814  0007D4  6FC0               	movwf	moveToBeacon@mR& (0+255),b
   815  0007D6  0E00               	movlw	high main@motorR
   816  0007D8  6FC1               	movwf	(moveToBeacon@mR+1)& (0+255),b
   817  0007DA  C0CA  F0C2         	movff	main@moving_speed,moveToBeacon@speed
   818  0007DE  C0CB  F0C3         	movff	main@moving_speed+1,moveToBeacon@speed+1
   819  0007E2  0E60               	movlw	low _travel_moves
   820  0007E4  6FC4               	movwf	moveToBeacon@move& (0+255),b
   821  0007E6  0E00               	movlw	high _travel_moves
   822  0007E8  6FC5               	movwf	(moveToBeacon@move+1)& (0+255),b
   823  0007EA  0EBD               	movlw	low _RFID_flag
   824  0007EC  6FC6               	movwf	moveToBeacon@exit_flag& (0+255),b
   825  0007EE  0E00               	movlw	high _RFID_flag
   826  0007F0  6FC7               	movwf	(moveToBeacon@exit_flag+1)& (0+255),b
   827  0007F2  EC10  F005         	call	_moveToBeacon	;wreg free
   828  0007F6  D032               	goto	L3
   829  0007F8                     l2794:
   830  0007F8  0E02               	movlw	2
   831  0007FA  1844               	xorwf	_robot_mode,w,c	;volatile
   832  0007FC  A4D8               	btfss	status,2,c
   833  0007FE  D018               	goto	l2798
   834                           
   835                           ;main.c: 151:       {;main.c: 152:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   836  000800  0ECC               	movlw	low main@motorL
   837  000802  0100               	movlb	0	; () banked
   838  000804  6FBE               	movwf	returnHome@mL& (0+255),b
   839  000806  0E00               	movlw	high main@motorL
   840  000808  6FBF               	movwf	(returnHome@mL+1)& (0+255),b
   841  00080A  0ED5               	movlw	low main@motorR
   842  00080C  6FC0               	movwf	returnHome@mR& (0+255),b
   843  00080E  0E00               	movlw	high main@motorR
   844  000810  6FC1               	movwf	(returnHome@mR+1)& (0+255),b
   845  000812  C0CA  F0C2         	movff	main@moving_speed,returnHome@move_speed
   846  000816  C0CB  F0C3         	movff	main@moving_speed+1,returnHome@move_speed+1
   847  00081A  C0C8  F0C4         	movff	main@searching_speed,returnHome@search_speed
   848  00081E  C0C9  F0C5         	movff	main@searching_speed+1,returnHome@search_speed+1
   849  000822  0E60               	movlw	low _travel_moves
   850  000824  6FC6               	movwf	returnHome@move& (0+255),b
   851  000826  0E00               	movlw	high _travel_moves
   852  000828  6FC7               	movwf	(returnHome@move+1)& (0+255),b
   853  00082A  ECCD  F001         	call	_returnHome	;wreg free
   854  00082E  D016               	goto	L3
   855  000830                     l2798:
   856  000830  0E03               	movlw	3
   857  000832  1844               	xorwf	_robot_mode,w,c	;volatile
   858  000834  A4D8               	btfss	status,2,c
   859  000836  D014               	goto	l2802
   860                           
   861                           ;main.c: 158:       {;main.c: 159:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   862  000838  0ECC               	movlw	low main@motorL
   863  00083A  6E2F               	movwf	stopAndDisplay@mL,c
   864  00083C  0E00               	movlw	high main@motorL
   865  00083E  6E30               	movwf	stopAndDisplay@mL+1,c
   866  000840  0ED5               	movlw	low main@motorR
   867  000842  6E31               	movwf	stopAndDisplay@mR,c
   868  000844  0E00               	movlw	high main@motorR
   869  000846  6E32               	movwf	stopAndDisplay@mR+1,c
   870  000848  C0CA  F033         	movff	main@moving_speed,stopAndDisplay@speed
   871  00084C  C0CB  F034         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   872  000850  0E45               	movlw	low _RFIDbuf
   873  000852  6E35               	movwf	stopAndDisplay@RFID_buffer,c
   874  000854  0E00               	movlw	high _RFIDbuf
   875  000856  6E36               	movwf	stopAndDisplay@RFID_buffer+1,c
   876  000858  ECCF  F005         	call	_stopAndDisplay	;wreg free
   877  00085C                     L3:
   878  00085C  6E44               	movwf	_robot_mode,c	;volatile
   879                           
   880                           ;main.c: 160:       }
   881  00085E  D79B               	goto	l2786
   882  000860                     l2802:
   883                           
   884                           ;main.c: 164:       {;main.c: 165:           LCD_String("Critical Error");
   885  000860  0E6F               	movlw	low STR_1
   886  000862  6E13               	movwf	LCD_String@string,c
   887  000864  0E03               	movlw	high STR_1
   888  000866  6E14               	movwf	LCD_String@string+1,c
   889  000868  ECE7  F007         	call	_LCD_String	;wreg free
   890  00086C  D794               	goto	l2786
   891  00086E                     __end_of_main:
   892                           	opt callstack 0
   893                           
   894 ;; *************** function _waitForInput *****************
   895 ;; Defined at:
   896 ;;		line 174 in file "subroutines.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  raw_data        2   23[COMRAM] unsigned int 
   901 ;;  throwaway       1    0        unsigned char 
   902 ;;  i               2   27[COMRAM] int 
   903 ;;  i               2   25[COMRAM] int 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   913 ;;      Params:         0       0       0       0
   914 ;;      Locals:         7       0       0       0
   915 ;;      Temps:          2       0       0       0
   916 ;;      Totals:         9       0       0       0
   917 ;;Total ram usage:        9 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    7
   920 ;; This function calls:
   921 ;;		_ClearLCD
   922 ;;		_LCD_String
   923 ;;		_SetLine
   924 ;;		_classify_data
   925 ;; This function is called by:
   926 ;;		_main
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text1
   931  000AE4                     __ptext1:
   932                           	opt callstack 0
   933  000AE4                     _waitForInput:
   934                           	opt callstack 23
   935                           
   936                           ;subroutines.c: 177:     for(int i =0;i<500;i++)
   937                           
   938                           ;incstack = 0
   939  000AE4  0E00               	movlw	0
   940  000AE6  6E1B               	movwf	waitForInput@i+1,c
   941  000AE8  0E00               	movlw	0
   942  000AEA  6E1A               	movwf	waitForInput@i,c
   943  000AEC                     l2632:
   944                           
   945                           ;subroutines.c: 178:     {;subroutines.c: 179:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   946  000AEC  5068               	movf	3944,w,c	;volatile
   947  000AEE  CF69 F015          	movff	3945,??_waitForInput	;volatile
   948  000AF2  6A16               	clrf	(??_waitForInput+1)& (0+255),c
   949  000AF4  C015  F016         	movff	??_waitForInput,??_waitForInput+1
   950  000AF8  6A15               	clrf	??_waitForInput,c
   951  000AFA  1015               	iorwf	??_waitForInput,w,c
   952  000AFC  6E18               	movwf	waitForInput@raw_data,c
   953  000AFE  5016               	movf	??_waitForInput+1,w,c
   954  000B00  6E19               	movwf	waitForInput@raw_data+1,c
   955  000B02  C018  F00F         	movff	waitForInput@raw_data,classify_data@raw_data
   956  000B06  C019  F010         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   957  000B0A  EC6A  F008         	call	_classify_data	;wreg free
   958                           
   959                           ;subroutines.c: 181:     }
   960  000B0E  4A1A               	infsnz	waitForInput@i,f,c
   961  000B10  2A1B               	incf	waitForInput@i+1,f,c
   962  000B12  BE1B               	btfsc	waitForInput@i+1,7,c
   963  000B14  D7EB               	goto	l2632
   964  000B16  0EF4               	movlw	244
   965  000B18  5C1A               	subwf	waitForInput@i,w,c
   966  000B1A  0E01               	movlw	1
   967  000B1C  581B               	subwfb	waitForInput@i+1,w,c
   968  000B1E  A0D8               	btfss	status,0,c
   969  000B20  D7E5               	goto	l2632
   970                           
   971                           ;subroutines.c: 184:     ClearLCD();
   972  000B22  EC51  F009         	call	_ClearLCD	;wreg free
   973                           
   974                           ;subroutines.c: 185:     SetLine(1);
   975  000B26  0E01               	movlw	1
   976  000B28  ECFA  F008         	call	_SetLine
   977                           
   978                           ;subroutines.c: 186:     LCD_String("PRESS BUTTON");
   979  000B2C  0E7E               	movlw	low STR_10
   980  000B2E  6E13               	movwf	LCD_String@string,c
   981  000B30  0E03               	movlw	high STR_10
   982  000B32  6E14               	movwf	LCD_String@string+1,c
   983  000B34  ECE7  F007         	call	_LCD_String	;wreg free
   984                           
   985                           ;subroutines.c: 187:     SetLine(2);
   986  000B38  0E02               	movlw	2
   987  000B3A  ECFA  F008         	call	_SetLine
   988                           
   989                           ;subroutines.c: 188:     LCD_String("TO START SEARCH");
   990  000B3E  0E11               	movlw	low STR_11
   991  000B40  6E13               	movwf	LCD_String@string,c
   992  000B42  0E03               	movlw	high STR_11
   993  000B44  6E14               	movwf	LCD_String@string+1,c
   994  000B46  ECE7  F007         	call	_LCD_String	;wreg free
   995  000B4A                     l364:
   996  000B4A  A483               	btfss	3971,2,c	;volatile
   997  000B4C  D7FE               	goto	l364
   998                           
   999                           ;subroutines.c: 194:     ClearLCD();
  1000  000B4E  EC51  F009         	call	_ClearLCD	;wreg free
  1001                           
  1002                           ;subroutines.c: 195:     SetLine(1);
  1003  000B52  0E01               	movlw	1
  1004  000B54  ECFA  F008         	call	_SetLine
  1005                           
  1006                           ;subroutines.c: 196:     LCD_String("STARTING SEARCH");
  1007  000B58  0E01               	movlw	low STR_12
  1008  000B5A  6E13               	movwf	LCD_String@string,c
  1009  000B5C  0E03               	movlw	high STR_12
  1010  000B5E  6E14               	movwf	LCD_String@string+1,c
  1011  000B60  ECE7  F007         	call	_LCD_String	;wreg free
  1012                           
  1013                           ;subroutines.c: 197:     for(int i=0; i<10;i++)
  1014  000B64  0E00               	movlw	0
  1015  000B66  6E1D               	movwf	waitForInput@i_1408+1,c
  1016  000B68  0E00               	movlw	0
  1017  000B6A  6E1C               	movwf	waitForInput@i_1408,c
  1018  000B6C                     l2656:
  1019                           
  1020                           ;subroutines.c: 198:     {;subroutines.c: 199:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
  1021  000B6C  0E02               	movlw	2
  1022  000B6E  6E16               	movwf	(??_waitForInput+1)& (0+255),c
  1023  000B70  0E04               	movlw	4
  1024  000B72  6E15               	movwf	??_waitForInput& (0+255),c
  1025  000B74  0EBA               	movlw	186
  1026  000B76                     u2107:
  1027  000B76  2EE8               	decfsz	wreg,f,c
  1028  000B78  D7FE               	bra	u2107
  1029  000B7A  2E15               	decfsz	??_waitForInput& (0+255),f,c
  1030  000B7C  D7FC               	bra	u2107
  1031  000B7E  2E16               	decfsz	(??_waitForInput+1)& (0+255),f,c
  1032  000B80  D7FA               	bra	u2107
  1033  000B82  D000               	nop2	
  1034                           
  1035                           ;subroutines.c: 200:     }
  1036  000B84  4A1C               	infsnz	waitForInput@i_1408,f,c
  1037  000B86  2A1D               	incf	waitForInput@i_1408+1,f,c
  1038  000B88  BE1D               	btfsc	waitForInput@i_1408+1,7,c
  1039  000B8A  D7F0               	goto	l2656
  1040  000B8C  501D               	movf	waitForInput@i_1408+1,w,c
  1041  000B8E  E104               	bnz	u1930
  1042  000B90  0E0A               	movlw	10
  1043  000B92  5C1C               	subwf	waitForInput@i_1408,w,c
  1044  000B94  A0D8               	btfss	status,0,c
  1045  000B96  D7EA               	goto	l2656
  1046  000B98                     u1930:
  1047                           
  1048                           ;subroutines.c: 201:     ClearLCD();
  1049  000B98  EC51  F009         	call	_ClearLCD	;wreg free
  1050  000B9C  0012               	return		;funcret
  1051  000B9E                     __end_of_waitForInput:
  1052                           	opt callstack 0
  1053                           
  1054 ;; *************** function _stopAndDisplay *****************
  1055 ;; Defined at:
  1056 ;;		line 112 in file "subroutines.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1059 ;;		 -> main@motorL(9), 
  1060 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1061 ;;		 -> main@motorR(9), 
  1062 ;;  speed           2   50[COMRAM] int 
  1063 ;;  RFID_buffer     2   52[COMRAM] PTR volatile unsigned ch
  1064 ;;		 -> RFIDbuf(12), 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  i               2    2[BANK0 ] int 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      unsigned char 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1076 ;;      Params:         8       0       0       0
  1077 ;;      Locals:         0       2       0       0
  1078 ;;      Temps:          0       2       0       0
  1079 ;;      Totals:         8       4       0       0
  1080 ;;Total ram usage:       12 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    8
  1083 ;; This function calls:
  1084 ;;		_ClearLCD
  1085 ;;		_LCD_String
  1086 ;;		_check_RFID
  1087 ;;		_display_RFID
  1088 ;;		_stop
  1089 ;; This function is called by:
  1090 ;;		_main
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text2
  1095  000B9E                     __ptext2:
  1096                           	opt callstack 0
  1097  000B9E                     _stopAndDisplay:
  1098                           	opt callstack 22
  1099                           
  1100                           ;subroutines.c: 112: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *m
      +                          R, int speed,;subroutines.c: 113:                                 volatile char RFID_buf
      +                          fer[]);subroutines.c: 114: {;subroutines.c: 115:     stop(mL, mR,speed);
  1101                           
  1102                           ;incstack = 0
  1103  000B9E  C02F  F026         	movff	stopAndDisplay@mL,stop@mL
  1104  000BA2  C030  F027         	movff	stopAndDisplay@mL+1,stop@mL+1
  1105  000BA6  C031  F028         	movff	stopAndDisplay@mR,stop@mR
  1106  000BAA  C032  F029         	movff	stopAndDisplay@mR+1,stop@mR+1
  1107  000BAE  C033  F02A         	movff	stopAndDisplay@speed,stop@initial_speed
  1108  000BB2  C034  F02B         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1109  000BB6  EC16  F008         	call	_stop	;wreg free
  1110                           
  1111                           ;subroutines.c: 117:     display_RFID(RFID_buffer);
  1112  000BBA  C035  F014         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1113  000BBE  C036  F015         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1114  000BC2  EC8C  F008         	call	_display_RFID	;wreg free
  1115                           
  1116                           ;subroutines.c: 118:     check_RFID(RFID_buffer);
  1117  000BC6  C035  F015         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1118  000BCA  C036  F016         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1119  000BCE  EC7A  F002         	call	_check_RFID	;wreg free
  1120                           
  1121                           ;subroutines.c: 120:     if(RFID_buffer[0] != 0)
  1122  000BD2  C035  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1123  000BD6  C036  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1124  000BDA  50DF               	movf	indf2,w,c
  1125  000BDC  A4D8               	btfss	status,2,c
  1126  000BDE  D029               	goto	l2770
  1127  000BE0  D02B               	goto	l2772
  1128  000BE2                     l2754:
  1129                           
  1130                           ;subroutines.c: 125:             {;subroutines.c: 126:                 ClearLCD();
  1131  000BE2  EC51  F009         	call	_ClearLCD	;wreg free
  1132                           
  1133                           ;subroutines.c: 127:                 LCD_String("RESETTING ROBOT");
  1134  000BE6  0E21               	movlw	low STR_7
  1135  000BE8  6E13               	movwf	LCD_String@string,c
  1136  000BEA  0E03               	movlw	high STR_7
  1137  000BEC  6E14               	movwf	LCD_String@string+1,c
  1138  000BEE  ECE7  F007         	call	_LCD_String	;wreg free
  1139                           
  1140                           ;subroutines.c: 128:                 for(int i=0; i<10;i++)
  1141  000BF2  0E00               	movlw	0
  1142  000BF4  0100               	movlb	0	; () banked
  1143  000BF6  6FC1               	movwf	(stopAndDisplay@i+1)& (0+255),b
  1144  000BF8  0E00               	movlw	0
  1145  000BFA  6FC0               	movwf	stopAndDisplay@i& (0+255),b
  1146  000BFC                     l2764:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;subroutines.c: 129:                 {;subroutines.c: 130:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1150  000BFC  0E02               	movlw	2
  1151  000BFE  0100               	movlb	0	; () banked
  1152  000C00  6FBF               	movwf	(??_stopAndDisplay+1)& (0+255),b
  1153  000C02  0E04               	movlw	4
  1154  000C04  6FBE               	movwf	??_stopAndDisplay& (0+255),b
  1155  000C06  0EBA               	movlw	186
  1156  000C08                     u2117:
  1157  000C08  2EE8               	decfsz	wreg,f,c
  1158  000C0A  D7FE               	bra	u2117
  1159  000C0C  2FBE               	decfsz	??_stopAndDisplay& (0+255),f,b
  1160  000C0E  D7FC               	bra	u2117
  1161  000C10  2FBF               	decfsz	(??_stopAndDisplay+1)& (0+255),f,b
  1162  000C12  D7FA               	bra	u2117
  1163  000C14  F000               	nop	
  1164                           
  1165                           ;subroutines.c: 131:                 }
  1166  000C16  0100               	movlb	0	; () banked
  1167  000C18  4BC0               	infsnz	stopAndDisplay@i& (0+255),f,b
  1168  000C1A  2BC1               	incf	(stopAndDisplay@i+1)& (0+255),f,b
  1169  000C1C  BFC1               	btfsc	(stopAndDisplay@i+1)& (0+255),7,b
  1170  000C1E  D7EE               	goto	l2764
  1171  000C20  51C1               	movf	(stopAndDisplay@i+1)& (0+255),w,b
  1172  000C22  E104               	bnz	u2040
  1173  000C24  0E0A               	movlw	10
  1174  000C26  5DC0               	subwf	stopAndDisplay@i& (0+255),w,b
  1175  000C28  A0D8               	btfss	status,0,c
  1176  000C2A  D7E8               	goto	l2764
  1177  000C2C                     u2040:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;subroutines.c: 132:                 ClearLCD();
  1181  000C2C  EC51  F009         	call	_ClearLCD	;wreg free
  1182  000C30  00FF               	reset		;# 
  1183  000C32                     l2770:
  1184                           
  1185                           ;subroutines.c: 124:             while(PORTDbits.RD2 == 1)
  1186  000C32  A483               	btfss	3971,2,c	;volatile
  1187  000C34  D7FE               	goto	l2770
  1188  000C36  D7D5               	goto	l2754
  1189  000C38                     l2772:
  1190                           
  1191                           ;subroutines.c: 138:     {;subroutines.c: 139:         return 0;
  1192  000C38  0E00               	movlw	0
  1193  000C3A  0012               	return		;funcret
  1194  000C3C                     __end_of_stopAndDisplay:
  1195                           	opt callstack 0
  1196                           
  1197 ;; *************** function _display_RFID *****************
  1198 ;; Defined at:
  1199 ;;		line 107 in file "RFID.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  dataBuf         2   19[COMRAM] PTR volatile unsigned ch
  1202 ;;		 -> RFIDbuf(12), 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  i               2   21[COMRAM] int 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1214 ;;      Params:         2       0       0       0
  1215 ;;      Locals:         2       0       0       0
  1216 ;;      Temps:          0       0       0       0
  1217 ;;      Totals:         4       0       0       0
  1218 ;;Total ram usage:        4 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    7
  1221 ;; This function calls:
  1222 ;;		_ClearLCD
  1223 ;;		_SendLCD
  1224 ;;		_SetLine
  1225 ;; This function is called by:
  1226 ;;		_stopAndDisplay
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text3
  1231  001118                     __ptext3:
  1232                           	opt callstack 0
  1233  001118                     _display_RFID:
  1234                           	opt callstack 22
  1235                           
  1236                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1237                           
  1238                           ;incstack = 0
  1239  001118  EC51  F009         	call	_ClearLCD	;wreg free
  1240                           
  1241                           ;RFID.c: 110:     SetLine(1);
  1242  00111C  0E01               	movlw	1
  1243  00111E  ECFA  F008         	call	_SetLine
  1244                           
  1245                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1246  001122  0E00               	movlw	0
  1247  001124  6E17               	movwf	display_RFID@i+1,c
  1248  001126  0E00               	movlw	0
  1249  001128  6E16               	movwf	display_RFID@i,c
  1250  00112A                     l2570:
  1251                           
  1252                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1253  00112A  0E01               	movlw	1
  1254  00112C  6E11               	movwf	SendLCD@type,c
  1255  00112E  5016               	movf	display_RFID@i,w,c
  1256  001130  2414               	addwf	display_RFID@dataBuf,w,c
  1257  001132  6ED9               	movwf	fsr2l,c
  1258  001134  5017               	movf	display_RFID@i+1,w,c
  1259  001136  2015               	addwfc	display_RFID@dataBuf+1,w,c
  1260  001138  6EDA               	movwf	fsr2h,c
  1261  00113A  50DF               	movf	indf2,w,c
  1262  00113C  ECE2  F008         	call	_SendLCD
  1263                           
  1264                           ;RFID.c: 114:     }
  1265  001140  4A16               	infsnz	display_RFID@i,f,c
  1266  001142  2A17               	incf	display_RFID@i+1,f,c
  1267  001144  BE17               	btfsc	display_RFID@i+1,7,c
  1268  001146  D7F1               	goto	l2570
  1269  001148  5017               	movf	display_RFID@i+1,w,c
  1270  00114A  E105               	bnz	u1880
  1271  00114C  0E0A               	movlw	10
  1272  00114E  5C16               	subwf	display_RFID@i,w,c
  1273  001150  B0D8               	btfsc	status,0,c
  1274  001152  0012               	return	
  1275  001154  D7EA               	goto	l2570
  1276  001156                     u1880:
  1277  001156  0012               	return		;funcret
  1278  001158                     __end_of_display_RFID:
  1279                           	opt callstack 0
  1280                           
  1281 ;; *************** function _check_RFID *****************
  1282 ;; Defined at:
  1283 ;;		line 70 in file "RFID.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  dataBuf         2   20[COMRAM] PTR volatile unsigned ch
  1286 ;;		 -> RFIDbuf(12), 
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;  i               2   42[COMRAM] int 
  1289 ;;  hexBuf         12   24[COMRAM] unsigned char [12]
  1290 ;;  checksum        1   41[COMRAM] unsigned char 
  1291 ;;  byte5           1   40[COMRAM] unsigned char 
  1292 ;;  byte4           1   39[COMRAM] unsigned char 
  1293 ;;  byte3           1   38[COMRAM] unsigned char 
  1294 ;;  byte2           1   37[COMRAM] unsigned char 
  1295 ;;  byte1           1   36[COMRAM] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1305 ;;      Params:         2       0       0       0
  1306 ;;      Locals:        20       0       0       0
  1307 ;;      Temps:          2       0       0       0
  1308 ;;      Totals:        24       0       0       0
  1309 ;;Total ram usage:       24 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    7
  1312 ;; This function calls:
  1313 ;;		_LCD_String
  1314 ;;		_SetLine
  1315 ;; This function is called by:
  1316 ;;		_stopAndDisplay
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text4
  1321  0004F4                     __ptext4:
  1322                           	opt callstack 0
  1323  0004F4                     _check_RFID:
  1324                           	opt callstack 22
  1325                           
  1326                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1327                           
  1328                           ;incstack = 0
  1329  0004F4  0E00               	movlw	0
  1330  0004F6  6E2C               	movwf	check_RFID@i+1,c
  1331  0004F8  0E00               	movlw	0
  1332  0004FA  6E2B               	movwf	check_RFID@i,c
  1333  0004FC                     l2536:
  1334                           
  1335                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1336  0004FC  502B               	movf	check_RFID@i,w,c
  1337  0004FE  2415               	addwf	check_RFID@dataBuf,w,c
  1338  000500  6ED9               	movwf	fsr2l,c
  1339  000502  502C               	movf	check_RFID@i+1,w,c
  1340  000504  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1341  000506  6EDA               	movwf	fsr2h,c
  1342  000508  0E2F               	movlw	47
  1343  00050A  64DF               	cpfsgt	indf2,c
  1344  00050C  D018               	goto	l2542
  1345  00050E  502B               	movf	check_RFID@i,w,c
  1346  000510  2415               	addwf	check_RFID@dataBuf,w,c
  1347  000512  6ED9               	movwf	fsr2l,c
  1348  000514  502C               	movf	check_RFID@i+1,w,c
  1349  000516  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1350  000518  6EDA               	movwf	fsr2h,c
  1351  00051A  0E3A               	movlw	58
  1352  00051C  60DF               	cpfslt	indf2,c
  1353  00051E  D00F               	goto	l2542
  1354                           
  1355                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1356  000520  0E19               	movlw	low check_RFID@hexBuf
  1357  000522  242B               	addwf	check_RFID@i,w,c
  1358  000524  6ED9               	movwf	fsr2l,c
  1359  000526  0E00               	movlw	high check_RFID@hexBuf
  1360  000528  202C               	addwfc	check_RFID@i+1,w,c
  1361  00052A  6EDA               	movwf	fsr2h,c
  1362  00052C  502B               	movf	check_RFID@i,w,c
  1363  00052E  2415               	addwf	check_RFID@dataBuf,w,c
  1364  000530  6EE1               	movwf	fsr1l,c
  1365  000532  502C               	movf	check_RFID@i+1,w,c
  1366  000534  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1367  000536  6EE2               	movwf	fsr1h,c
  1368  000538  50E7               	movf	indf1,w,c
  1369  00053A  0FD0               	addlw	208
  1370  00053C  D020               	goto	L4
  1371  00053E                     l2542:
  1372  00053E  502B               	movf	check_RFID@i,w,c
  1373  000540  2415               	addwf	check_RFID@dataBuf,w,c
  1374  000542  6ED9               	movwf	fsr2l,c
  1375  000544  502C               	movf	check_RFID@i+1,w,c
  1376  000546  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1377  000548  6EDA               	movwf	fsr2h,c
  1378  00054A  0E40               	movlw	64
  1379  00054C  64DF               	cpfsgt	indf2,c
  1380  00054E  D018               	goto	l2548
  1381  000550  502B               	movf	check_RFID@i,w,c
  1382  000552  2415               	addwf	check_RFID@dataBuf,w,c
  1383  000554  6ED9               	movwf	fsr2l,c
  1384  000556  502C               	movf	check_RFID@i+1,w,c
  1385  000558  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1386  00055A  6EDA               	movwf	fsr2h,c
  1387  00055C  0E47               	movlw	71
  1388  00055E  60DF               	cpfslt	indf2,c
  1389  000560  D00F               	goto	l2548
  1390                           
  1391                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1392  000562  0E19               	movlw	low check_RFID@hexBuf
  1393  000564  242B               	addwf	check_RFID@i,w,c
  1394  000566  6ED9               	movwf	fsr2l,c
  1395  000568  0E00               	movlw	high check_RFID@hexBuf
  1396  00056A  202C               	addwfc	check_RFID@i+1,w,c
  1397  00056C  6EDA               	movwf	fsr2h,c
  1398  00056E  502B               	movf	check_RFID@i,w,c
  1399  000570  2415               	addwf	check_RFID@dataBuf,w,c
  1400  000572  6EE1               	movwf	fsr1l,c
  1401  000574  502C               	movf	check_RFID@i+1,w,c
  1402  000576  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1403  000578  6EE2               	movwf	fsr1h,c
  1404  00057A  50E7               	movf	indf1,w,c
  1405  00057C  0FC9               	addlw	201
  1406  00057E                     L4:
  1407  00057E  6EDF               	movwf	indf2,c
  1408  000580                     l2548:
  1409                           
  1410                           ;RFID.c: 84:     }
  1411  000580  4A2B               	infsnz	check_RFID@i,f,c
  1412  000582  2A2C               	incf	check_RFID@i+1,f,c
  1413  000584  BE2C               	btfsc	check_RFID@i+1,7,c
  1414  000586  D7BA               	goto	l2536
  1415  000588  502C               	movf	check_RFID@i+1,w,c
  1416  00058A  E104               	bnz	u1720
  1417  00058C  0E0C               	movlw	12
  1418  00058E  5C2B               	subwf	check_RFID@i,w,c
  1419  000590  A0D8               	btfss	status,0,c
  1420  000592  D7B4               	goto	l2536
  1421  000594                     u1720:
  1422                           
  1423                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1424  000594  5019               	movf	check_RFID@hexBuf,w,c
  1425  000596  A4D8               	btfss	status,2,c
  1426  000598  D002               	goto	u1730
  1427  00059A  0E01               	movlw	1
  1428  00059C  D001               	goto	u1740
  1429  00059E                     u1730:
  1430  00059E  0E00               	movlw	0
  1431  0005A0                     u1740:
  1432  0005A0  101A               	iorwf	check_RFID@hexBuf+1,w,c
  1433  0005A2  6E25               	movwf	check_RFID@byte1,c
  1434                           
  1435                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1436  0005A4  501B               	movf	check_RFID@hexBuf+2,w,c
  1437  0005A6  A4D8               	btfss	status,2,c
  1438  0005A8  D002               	goto	u1750
  1439  0005AA  0E01               	movlw	1
  1440  0005AC  D001               	goto	u1760
  1441  0005AE                     u1750:
  1442  0005AE  0E00               	movlw	0
  1443  0005B0                     u1760:
  1444  0005B0  101C               	iorwf	check_RFID@hexBuf+3,w,c
  1445  0005B2  6E26               	movwf	check_RFID@byte2,c
  1446                           
  1447                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1448  0005B4  501D               	movf	check_RFID@hexBuf+4,w,c
  1449  0005B6  A4D8               	btfss	status,2,c
  1450  0005B8  D002               	goto	u1770
  1451  0005BA  0E01               	movlw	1
  1452  0005BC  D001               	goto	u1780
  1453  0005BE                     u1770:
  1454  0005BE  0E00               	movlw	0
  1455  0005C0                     u1780:
  1456  0005C0  101E               	iorwf	check_RFID@hexBuf+5,w,c
  1457  0005C2  6E27               	movwf	check_RFID@byte3,c
  1458                           
  1459                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1460  0005C4  501F               	movf	check_RFID@hexBuf+6,w,c
  1461  0005C6  A4D8               	btfss	status,2,c
  1462  0005C8  D002               	goto	u1790
  1463  0005CA  0E01               	movlw	1
  1464  0005CC  D001               	goto	u1800
  1465  0005CE                     u1790:
  1466  0005CE  0E00               	movlw	0
  1467  0005D0                     u1800:
  1468  0005D0  1020               	iorwf	check_RFID@hexBuf+7,w,c
  1469  0005D2  6E28               	movwf	check_RFID@byte4,c
  1470                           
  1471                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1472  0005D4  5021               	movf	check_RFID@hexBuf+8,w,c
  1473  0005D6  A4D8               	btfss	status,2,c
  1474  0005D8  D002               	goto	u1810
  1475  0005DA  0E01               	movlw	1
  1476  0005DC  D001               	goto	u1820
  1477  0005DE                     u1810:
  1478  0005DE  0E00               	movlw	0
  1479  0005E0                     u1820:
  1480  0005E0  1022               	iorwf	check_RFID@hexBuf+9,w,c
  1481  0005E2  6E29               	movwf	check_RFID@byte5,c
  1482                           
  1483                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1484  0005E4  5023               	movf	check_RFID@hexBuf+10,w,c
  1485  0005E6  A4D8               	btfss	status,2,c
  1486  0005E8  D002               	goto	u1830
  1487  0005EA  0E01               	movlw	1
  1488  0005EC  D001               	goto	u1840
  1489  0005EE                     u1830:
  1490  0005EE  0E00               	movlw	0
  1491  0005F0                     u1840:
  1492  0005F0  1024               	iorwf	check_RFID@hexBuf+11,w,c
  1493  0005F2  6E2A               	movwf	check_RFID@checksum,c
  1494                           
  1495                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1496  0005F4  5025               	movf	check_RFID@byte1,w,c
  1497  0005F6  1826               	xorwf	check_RFID@byte2,w,c
  1498  0005F8  1827               	xorwf	check_RFID@byte3,w,c
  1499  0005FA  1828               	xorwf	check_RFID@byte4,w,c
  1500  0005FC  6E17               	movwf	??_check_RFID& (0+255),c
  1501  0005FE  6A18               	clrf	(??_check_RFID+1)& (0+255),c
  1502  000600  502A               	movf	check_RFID@checksum,w,c
  1503  000602  1829               	xorwf	check_RFID@byte5,w,c
  1504  000604  A4D8               	btfss	status,2,c
  1505  000606  D002               	goto	u1850
  1506  000608  0E01               	movlw	1
  1507  00060A  D001               	goto	u1860
  1508  00060C                     u1850:
  1509  00060C  0E00               	movlw	0
  1510  00060E                     u1860:
  1511  00060E  1A17               	xorwf	??_check_RFID,f,c
  1512  000610  0E00               	movlw	0
  1513  000612  1A18               	xorwf	??_check_RFID+1,f,c
  1514  000614  5017               	movf	??_check_RFID,w,c
  1515  000616  1018               	iorwf	??_check_RFID+1,w,c
  1516  000618  B4D8               	btfsc	status,2,c
  1517  00061A  D00A               	goto	l2558
  1518                           
  1519                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1520  00061C  0E02               	movlw	2
  1521  00061E  ECFA  F008         	call	_SetLine
  1522                           
  1523                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1524  000622  0E41               	movlw	low STR_2
  1525  000624  6E13               	movwf	LCD_String@string,c
  1526  000626  0E03               	movlw	high STR_2
  1527  000628  6E14               	movwf	LCD_String@string+1,c
  1528  00062A  ECE7  F007         	call	_LCD_String	;wreg free
  1529                           
  1530                           ;RFID.c: 99:     }
  1531  00062E  0012               	return	
  1532  000630                     l2558:
  1533                           
  1534                           ;RFID.c: 102:         SetLine(2);
  1535  000630  0E02               	movlw	2
  1536  000632  ECFA  F008         	call	_SetLine
  1537                           
  1538                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1539  000636  0E31               	movlw	low STR_3
  1540  000638  6E13               	movwf	LCD_String@string,c
  1541  00063A  0E03               	movlw	high STR_3
  1542  00063C  6E14               	movwf	LCD_String@string+1,c
  1543  00063E  ECE7  F007         	call	_LCD_String	;wreg free
  1544  000642  0012               	return		;funcret
  1545  000644                     __end_of_check_RFID:
  1546                           	opt callstack 0
  1547                           
  1548 ;; *************** function _SetLine *****************
  1549 ;; Defined at:
  1550 ;;		line 107 in file "LCDIO.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  line            1    wreg     unsigned char 
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;  line            1   18[COMRAM] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      void 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1564 ;;      Params:         0       0       0       0
  1565 ;;      Locals:         1       0       0       0
  1566 ;;      Temps:          0       0       0       0
  1567 ;;      Totals:         1       0       0       0
  1568 ;;Total ram usage:        1 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    6
  1571 ;; This function calls:
  1572 ;;		_SendLCD
  1573 ;; This function is called by:
  1574 ;;		_check_RFID
  1575 ;;		_display_RFID
  1576 ;;		_waitForInput
  1577 ;;		_debug
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text5
  1582  0011F4                     __ptext5:
  1583                           	opt callstack 0
  1584  0011F4                     _SetLine:
  1585                           	opt callstack 23
  1586                           
  1587                           ;incstack = 0
  1588                           ;SetLine@line stored from wreg
  1589  0011F4  6E13               	movwf	SetLine@line,c
  1590                           
  1591                           ;LCDIO.c: 109:     if(line == 1){
  1592  0011F6  0413               	decf	SetLine@line,w,c
  1593  0011F8  A4D8               	btfss	status,2,c
  1594  0011FA  D005               	goto	l2410
  1595                           
  1596                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1597  0011FC  0E00               	movlw	0
  1598  0011FE  6E11               	movwf	SendLCD@type,c
  1599  001200  0E80               	movlw	128
  1600  001202  ECE2  F008         	call	_SendLCD
  1601  001206                     l2410:
  1602                           
  1603                           ;LCDIO.c: 113:     if(line == 2){
  1604  001206  0E02               	movlw	2
  1605  001208  1813               	xorwf	SetLine@line,w,c
  1606  00120A  A4D8               	btfss	status,2,c
  1607  00120C  D005               	goto	l2414
  1608                           
  1609                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1610  00120E  0E00               	movlw	0
  1611  001210  6E11               	movwf	SendLCD@type,c
  1612  001212  0EC0               	movlw	192
  1613  001214  ECE2  F008         	call	_SendLCD
  1614  001218                     l2414:
  1615                           
  1616                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1617  001218  0E21               	movlw	33
  1618  00121A                     u2127:
  1619  00121A  2EE8               	decfsz	wreg,f,c
  1620  00121C  D7FE               	bra	u2127
  1621  00121E  F000               	nop	
  1622  001220  0012               	return		;funcret
  1623  001222                     __end_of_SetLine:
  1624                           	opt callstack 0
  1625                           
  1626 ;; *************** function _setup *****************
  1627 ;; Defined at:
  1628 ;;		line 46 in file "main.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1642 ;;      Params:         0       0       0       0
  1643 ;;      Locals:         0       0       0       0
  1644 ;;      Temps:          0       0       0       0
  1645 ;;      Totals:         0       0       0       0
  1646 ;;Total ram usage:        0 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    7
  1649 ;; This function calls:
  1650 ;;		_initPWM
  1651 ;;		_init_LCD
  1652 ;;		_init_RFID
  1653 ;;		_init_sensor
  1654 ;; This function is called by:
  1655 ;;		_main
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text6
  1660  001158                     __ptext6:
  1661                           	opt callstack 0
  1662  001158                     _setup:
  1663                           	opt callstack 23
  1664                           
  1665                           ;main.c: 49:     OSCCON = 0x72;
  1666                           
  1667                           ;incstack = 0
  1668  001158  0E72               	movlw	114
  1669  00115A  6ED3               	movwf	4051,c	;volatile
  1670  00115C                     l55:
  1671  00115C  A4D3               	btfss	4051,2,c	;volatile
  1672  00115E  D7FE               	goto	l55
  1673                           
  1674                           ;main.c: 51:     INTCONbits.GIEH = 1;
  1675  001160  8EF2               	bsf	4082,7,c	;volatile
  1676                           
  1677                           ;main.c: 52:     INTCONbits.GIEL = 1;
  1678  001162  8CF2               	bsf	4082,6,c	;volatile
  1679                           
  1680                           ;main.c: 53:     RCONbits.IPEN=1;
  1681  001164  8ED0               	bsf	4048,7,c	;volatile
  1682                           
  1683                           ;main.c: 56:     init_LCD();
  1684  001166  ECAC  F004         	call	_init_LCD	;wreg free
  1685                           
  1686                           ;main.c: 57:     init_RFID();
  1687  00116A  EC37  F009         	call	_init_RFID	;wreg free
  1688                           
  1689                           ;main.c: 58:     init_sensor();
  1690  00116E  EC5E  F009         	call	_init_sensor	;wreg free
  1691                           
  1692                           ;main.c: 59:     initPWM(199);
  1693  001172  0E00               	movlw	0
  1694  001174  6E10               	movwf	initPWM@PWMperiod+1,c
  1695  001176  0EC7               	movlw	199
  1696  001178  6E0F               	movwf	initPWM@PWMperiod,c
  1697  00117A  EC44  F009         	call	_initPWM	;wreg free
  1698                           
  1699                           ;main.c: 62:     TRISBbits.RB0 = 0;
  1700  00117E  9093               	bcf	3987,0,c	;volatile
  1701                           
  1702                           ;main.c: 63:     TRISBbits.RB2 = 0;
  1703  001180  9493               	bcf	3987,2,c	;volatile
  1704                           
  1705                           ;main.c: 65:     TRISDbits.RD2 = 1;
  1706  001182  8495               	bsf	3989,2,c	;volatile
  1707                           
  1708                           ;main.c: 68:     T0CON = 0b11000111;
  1709  001184  0EC7               	movlw	199
  1710  001186  6ED5               	movwf	4053,c	;volatile
  1711                           
  1712                           ;main.c: 71:     INTCONbits.TMR0IE=1;
  1713  001188  8AF2               	bsf	4082,5,c	;volatile
  1714                           
  1715                           ;main.c: 72:     INTCON2bits.TMR0IP=0;
  1716  00118A  94F1               	bcf	4081,2,c	;volatile
  1717  00118C  0012               	return		;funcret
  1718  00118E                     __end_of_setup:
  1719                           	opt callstack 0
  1720                           
  1721 ;; *************** function _init_sensor *****************
  1722 ;; Defined at:
  1723 ;;		line 17 in file "signal_processing.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  throwaway       2    0        unsigned int 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1737 ;;      Params:         0       0       0       0
  1738 ;;      Locals:         2       0       0       0
  1739 ;;      Temps:          0       0       0       0
  1740 ;;      Totals:         2       0       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    3
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_setup
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text7
  1752  0012BC                     __ptext7:
  1753                           	opt callstack 0
  1754  0012BC                     _init_sensor:
  1755                           	opt callstack 26
  1756                           
  1757                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1758                           
  1759                           ;incstack = 0
  1760  0012BC  0E01               	movlw	1
  1761  0012BE  6EB7               	movwf	4023,c	;volatile
  1762                           
  1763                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1764  0012C0  8492               	bsf	3986,2,c	;volatile
  1765                           
  1766                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1767  0012C2  0E00               	movlw	0
  1768  0012C4  6EB8               	movwf	4024,c	;volatile
  1769                           
  1770                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1771  0012C6  0E00               	movlw	0
  1772  0012C8  6EB9               	movwf	4025,c	;volatile
  1773                           
  1774                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1775  0012CA  0E47               	movlw	71
  1776  0012CC  6E63               	movwf	3939,c	;volatile
  1777  0012CE  5069               	movf	3945,w,c	;volatile
  1778  0012D0  5068               	movf	3944,w,c	;volatile
  1779  0012D2  0012               	return		;funcret
  1780  0012D4                     __end_of_init_sensor:
  1781                           	opt callstack 0
  1782                           
  1783 ;; *************** function _init_RFID *****************
  1784 ;; Defined at:
  1785 ;;		line 13 in file "RFID.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1799 ;;      Params:         0       0       0       0
  1800 ;;      Locals:         0       0       0       0
  1801 ;;      Temps:          0       0       0       0
  1802 ;;      Totals:         0       0       0       0
  1803 ;;Total ram usage:        0 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    3
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_setup
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text8
  1814  00126E                     __ptext8:
  1815                           	opt callstack 0
  1816  00126E                     _init_RFID:
  1817                           	opt callstack 26
  1818                           
  1819                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1820                           
  1821                           ;incstack = 0
  1822  00126E  8E94               	bsf	3988,7,c	;volatile
  1823                           
  1824                           ;RFID.c: 19:     SPBRG = 203;
  1825  001270  0ECB               	movlw	203
  1826  001272  6EAF               	movwf	4015,c	;volatile
  1827                           
  1828                           ;RFID.c: 20:     SPBRGH = 0;
  1829  001274  0E00               	movlw	0
  1830  001276  6EB0               	movwf	4016,c	;volatile
  1831                           
  1832                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1833  001278  86AA               	bsf	4010,3,c	;volatile
  1834                           
  1835                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1836  00127A  84AC               	bsf	4012,2,c	;volatile
  1837                           
  1838                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1839  00127C  88AB               	bsf	4011,4,c	;volatile
  1840                           
  1841                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1842  00127E  8EAB               	bsf	4011,7,c	;volatile
  1843                           
  1844                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1845  001280  8AAC               	bsf	4012,5,c	;volatile
  1846                           
  1847                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1848  001282  8A9D               	bsf	3997,5,c	;volatile
  1849                           
  1850                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1851  001284  8A9F               	bsf	3999,5,c	;volatile
  1852  001286  0012               	return		;funcret
  1853  001288                     __end_of_init_RFID:
  1854                           	opt callstack 0
  1855                           
  1856 ;; *************** function _init_LCD *****************
  1857 ;; Defined at:
  1858 ;;		line 56 in file "LCDIO.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2, status,0, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1872 ;;      Params:         0       0       0       0
  1873 ;;      Locals:         0       0       0       0
  1874 ;;      Temps:          1       0       0       0
  1875 ;;      Totals:         1       0       0       0
  1876 ;;Total ram usage:        1 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    6
  1879 ;; This function calls:
  1880 ;;		_LCDout
  1881 ;;		_SendLCD
  1882 ;; This function is called by:
  1883 ;;		_setup
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text9
  1888  000958                     __ptext9:
  1889                           	opt callstack 0
  1890  000958                     _init_LCD:
  1891                           	opt callstack 23
  1892                           
  1893                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1894                           
  1895                           ;incstack = 0
  1896  000958  9094               	bcf	3988,0,c	;volatile
  1897                           
  1898                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1899  00095A  9E92               	bcf	3986,7,c	;volatile
  1900                           
  1901                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1902  00095C  9694               	bcf	3988,3,c	;volatile
  1903                           
  1904                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1905  00095E  9095               	bcf	3989,0,c	;volatile
  1906                           
  1907                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1908  000960  9295               	bcf	3989,1,c	;volatile
  1909                           
  1910                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1911  000962  9C92               	bcf	3986,6,c	;volatile
  1912                           
  1913                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1914  000964  908C               	bcf	3980,0,c	;volatile
  1915                           
  1916                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1917  000966  928C               	bcf	3980,1,c	;volatile
  1918                           
  1919                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1920  000968  968B               	bcf	3979,3,c	;volatile
  1921                           
  1922                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1923  00096A  908B               	bcf	3979,0,c	;volatile
  1924                           
  1925                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1926  00096C  9C89               	bcf	3977,6,c	;volatile
  1927                           
  1928                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1929  00096E  9E89               	bcf	3977,7,c	;volatile
  1930                           
  1931                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1932  000970  0E27               	movlw	39
  1933  000972  6E13               	movwf	??_init_LCD& (0+255),c
  1934  000974  0EF5               	movlw	245
  1935  000976                     u2137:
  1936  000976  2EE8               	decfsz	wreg,f,c
  1937  000978  D7FE               	bra	u2137
  1938  00097A  2E13               	decfsz	??_init_LCD& (0+255),f,c
  1939  00097C  D7FC               	bra	u2137
  1940  00097E  F000               	nop	
  1941                           
  1942                           ;LCDIO.c: 76:  LCDout(0b0011);
  1943  000980  0E03               	movlw	3
  1944  000982  ECAB  F007         	call	_LCDout
  1945                           
  1946                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1947  000986  0E0D               	movlw	13
  1948  000988  6E13               	movwf	??_init_LCD& (0+255),c
  1949  00098A  0EFC               	movlw	252
  1950  00098C                     u2147:
  1951  00098C  2EE8               	decfsz	wreg,f,c
  1952  00098E  D7FE               	bra	u2147
  1953  000990  2E13               	decfsz	??_init_LCD& (0+255),f,c
  1954  000992  D7FC               	bra	u2147
  1955                           
  1956                           ;LCDIO.c: 78:  LCDout(0b0011);
  1957  000994  0E03               	movlw	3
  1958  000996  ECAB  F007         	call	_LCDout
  1959                           
  1960                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1961  00099A  0E85               	movlw	133
  1962  00099C                     u2157:
  1963  00099C  2EE8               	decfsz	wreg,f,c
  1964  00099E  D7FE               	bra	u2157
  1965  0009A0  F000               	nop	
  1966                           
  1967                           ;LCDIO.c: 80:  LCDout(0b0011);
  1968  0009A2  0E03               	movlw	3
  1969  0009A4  ECAB  F007         	call	_LCDout
  1970                           
  1971                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1972  0009A8  0E21               	movlw	33
  1973  0009AA                     u2167:
  1974  0009AA  2EE8               	decfsz	wreg,f,c
  1975  0009AC  D7FE               	bra	u2167
  1976  0009AE  F000               	nop	
  1977                           
  1978                           ;LCDIO.c: 82:  LCDout(0b0010);
  1979  0009B0  0E02               	movlw	2
  1980  0009B2  ECAB  F007         	call	_LCDout
  1981                           
  1982                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1983  0009B6  0E21               	movlw	33
  1984  0009B8                     u2177:
  1985  0009B8  2EE8               	decfsz	wreg,f,c
  1986  0009BA  D7FE               	bra	u2177
  1987  0009BC  F000               	nop	
  1988                           
  1989                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1990  0009BE  0E00               	movlw	0
  1991  0009C0  6E11               	movwf	SendLCD@type,c
  1992  0009C2  0E28               	movlw	40
  1993  0009C4  ECE2  F008         	call	_SendLCD
  1994                           
  1995                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1996  0009C8  0E21               	movlw	33
  1997  0009CA                     u2187:
  1998  0009CA  2EE8               	decfsz	wreg,f,c
  1999  0009CC  D7FE               	bra	u2187
  2000  0009CE  F000               	nop	
  2001                           
  2002                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2003  0009D0  0E00               	movlw	0
  2004  0009D2  6E11               	movwf	SendLCD@type,c
  2005  0009D4  0E08               	movlw	8
  2006  0009D6  ECE2  F008         	call	_SendLCD
  2007                           
  2008                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2009  0009DA  0E21               	movlw	33
  2010  0009DC                     u2197:
  2011  0009DC  2EE8               	decfsz	wreg,f,c
  2012  0009DE  D7FE               	bra	u2197
  2013  0009E0  F000               	nop	
  2014                           
  2015                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2016  0009E2  0E00               	movlw	0
  2017  0009E4  6E11               	movwf	SendLCD@type,c
  2018  0009E6  0E01               	movlw	1
  2019  0009E8  ECE2  F008         	call	_SendLCD
  2020                           
  2021                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2022  0009EC  0E0D               	movlw	13
  2023  0009EE  6E13               	movwf	??_init_LCD& (0+255),c
  2024  0009F0  0EFC               	movlw	252
  2025  0009F2                     u2207:
  2026  0009F2  2EE8               	decfsz	wreg,f,c
  2027  0009F4  D7FE               	bra	u2207
  2028  0009F6  2E13               	decfsz	??_init_LCD& (0+255),f,c
  2029  0009F8  D7FC               	bra	u2207
  2030                           
  2031                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2032  0009FA  0E00               	movlw	0
  2033  0009FC  6E11               	movwf	SendLCD@type,c
  2034  0009FE  0E06               	movlw	6
  2035  000A00  ECE2  F008         	call	_SendLCD
  2036                           
  2037                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2038  000A04  0E21               	movlw	33
  2039  000A06                     u2217:
  2040  000A06  2EE8               	decfsz	wreg,f,c
  2041  000A08  D7FE               	bra	u2217
  2042  000A0A  F000               	nop	
  2043                           
  2044                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2045  000A0C  0E00               	movlw	0
  2046  000A0E  6E11               	movwf	SendLCD@type,c
  2047  000A10  0E0C               	movlw	12
  2048  000A12  ECE2  F008         	call	_SendLCD
  2049                           
  2050                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2051  000A16  0E21               	movlw	33
  2052  000A18                     u2227:
  2053  000A18  2EE8               	decfsz	wreg,f,c
  2054  000A1A  D7FE               	bra	u2227
  2055  000A1C  F000               	nop	
  2056  000A1E  0012               	return		;funcret
  2057  000A20                     __end_of_init_LCD:
  2058                           	opt callstack 0
  2059                           
  2060 ;; *************** function _initPWM *****************
  2061 ;; Defined at:
  2062 ;;		line 5 in file "dc_motor.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  PWMperiod       2   14[COMRAM] int 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      void 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2076 ;;      Params:         2       0       0       0
  2077 ;;      Locals:         0       0       0       0
  2078 ;;      Temps:          0       0       0       0
  2079 ;;      Totals:         2       0       0       0
  2080 ;;Total ram usage:        2 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    3
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_setup
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text10
  2091  001288                     __ptext10:
  2092                           	opt callstack 0
  2093  001288                     _initPWM:
  2094                           	opt callstack 26
  2095                           
  2096                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2097                           
  2098                           ;incstack = 0
  2099  001288  0E00               	movlw	0
  2100  00128A  6E7F               	movwf	3967,c	;volatile
  2101                           
  2102                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2103  00128C  0E80               	movlw	128
  2104  00128E  6E7E               	movwf	3966,c	;volatile
  2105                           
  2106                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2107  001290  0E6F               	movlw	111
  2108  001292  6E6F               	movwf	3951,c	;volatile
  2109                           
  2110                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2111  001294  0E00               	movlw	0
  2112  001296  6E6E               	movwf	3950,c	;volatile
  2113                           
  2114                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2115  001298  C00F  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2116                           
  2117                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2118  00129C  5010               	movf	initPWM@PWMperiod+1,w,c
  2119  00129E  6E7A               	movwf	3962,c	;volatile
  2120  0012A0  0012               	return		;funcret
  2121  0012A2                     __end_of_initPWM:
  2122                           	opt callstack 0
  2123                           
  2124 ;; *************** function _scanForBeacon *****************
  2125 ;; Defined at:
  2126 ;;		line 18 in file "subroutines.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2129 ;;		 -> main@motorL(9), 
  2130 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2131 ;;		 -> main@motorR(9), 
  2132 ;;  speed           2   50[COMRAM] int 
  2133 ;;  move            2   52[COMRAM] PTR struct Movements
  2134 ;;		 -> travel_moves(61), 
  2135 ;; Auto vars:     Size  Location     Type
  2136 ;;  raw_data        2    2[BANK0 ] unsigned int 
  2137 ;;  beacon_locat    1    4[BANK0 ] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      unsigned char 
  2140 ;; Registers used:
  2141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2147 ;;      Params:         8       0       0       0
  2148 ;;      Locals:         0       3       0       0
  2149 ;;      Temps:          0       2       0       0
  2150 ;;      Totals:         8       5       0       0
  2151 ;;Total ram usage:       13 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    7
  2154 ;; This function calls:
  2155 ;;		_ClearLCD
  2156 ;;		_LCD_String
  2157 ;;		_classify_data
  2158 ;;		_turnLeft
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text11
  2165  000C3C                     __ptext11:
  2166                           	opt callstack 0
  2167  000C3C                     _scanForBeacon:
  2168                           	opt callstack 23
  2169                           
  2170                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 19:                             struct Movements *move);subr
      +                          outines.c: 20: {;subroutines.c: 21:     move-> move_type[move->move_number] = 1;
  2171                           
  2172                           ;incstack = 0
  2173  000C3C  EE20 F03C          	lfsr	2,60
  2174  000C40  5035               	movf	scanForBeacon@move,w,c
  2175  000C42  26D9               	addwf	fsr2l,f,c
  2176  000C44  5036               	movf	scanForBeacon@move+1,w,c
  2177  000C46  22DA               	addwfc	fsr2h,f,c
  2178  000C48  50DF               	movf	indf2,w,c
  2179  000C4A  0100               	movlb	0	; () banked
  2180  000C4C  6FBE               	movwf	??_scanForBeacon& (0+255),b
  2181  000C4E  51BE               	movf	??_scanForBeacon& (0+255),w,b
  2182  000C50  2435               	addwf	scanForBeacon@move,w,c
  2183  000C52  6ED9               	movwf	fsr2l,c
  2184  000C54  0E00               	movlw	0
  2185  000C56  2036               	addwfc	scanForBeacon@move+1,w,c
  2186  000C58  6EDA               	movwf	fsr2h,c
  2187  000C5A  0E01               	movlw	1
  2188  000C5C  6EDF               	movwf	indf2,c
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;subroutines.c: 22:     turnLeft(mL,mR,speed);
  2192  000C5E  C02F  F026         	movff	scanForBeacon@mL,turnLeft@mL
  2193  000C62  C030  F027         	movff	scanForBeacon@mL+1,turnLeft@mL+1
  2194  000C66  C031  F028         	movff	scanForBeacon@mR,turnLeft@mR
  2195  000C6A  C032  F029         	movff	scanForBeacon@mR+1,turnLeft@mR+1
  2196  000C6E  C033  F02A         	movff	scanForBeacon@speed,turnLeft@max_power
  2197  000C72  C034  F02B         	movff	scanForBeacon@speed+1,turnLeft@max_power+1
  2198  000C76  ECA7  F006         	call	_turnLeft	;wreg free
  2199                           
  2200                           ;subroutines.c: 23:     ClearLCD();
  2201  000C7A  EC51  F009         	call	_ClearLCD	;wreg free
  2202                           
  2203                           ;subroutines.c: 24:     LCD_String("SEARCHING");
  2204  000C7E  0E8B               	movlw	low STR_4
  2205  000C80  6E13               	movwf	LCD_String@string,c
  2206  000C82  0E03               	movlw	high STR_4
  2207  000C84  6E14               	movwf	LCD_String@string+1,c
  2208  000C86  ECE7  F007         	call	_LCD_String	;wreg free
  2209  000C8A                     l2670:
  2210                           
  2211                           ;subroutines.c: 28:     {;subroutines.c: 30:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2212  000C8A  5068               	movf	3944,w,c	;volatile
  2213  000C8C  CF69 F0BE          	movff	3945,??_scanForBeacon	;volatile
  2214  000C90  0100               	movlb	0	; () banked
  2215  000C92  6BBF               	clrf	(??_scanForBeacon+1)& (0+255),b
  2216  000C94  C0BE  F0BF         	movff	??_scanForBeacon,??_scanForBeacon+1
  2217  000C98  6BBE               	clrf	??_scanForBeacon& (0+255),b
  2218  000C9A  11BE               	iorwf	??_scanForBeacon& (0+255),w,b
  2219  000C9C  6FC0               	movwf	scanForBeacon@raw_data& (0+255),b
  2220  000C9E  51BF               	movf	(??_scanForBeacon+1)& (0+255),w,b
  2221  000CA0  6FC1               	movwf	(scanForBeacon@raw_data+1)& (0+255),b
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;subroutines.c: 33:         char beacon_location = classify_data(raw_data);
  2225  000CA2  C0C0  F00F         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2226  000CA6  C0C1  F010         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2227  000CAA  EC6A  F008         	call	_classify_data	;wreg free
  2228  000CAE  0100               	movlb	0	; () banked
  2229  000CB0  6FC2               	movwf	scanForBeacon@beacon_location& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;subroutines.c: 36:         if(beacon_location == 1)
  2233  000CB2  05C2               	decf	scanForBeacon@beacon_location& (0+255),w,b
  2234  000CB4  A4D8               	btfss	status,2,c
  2235  000CB6  D7E9               	goto	l2670
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;subroutines.c: 37:         {;subroutines.c: 38:             move-> move_number += 1;
  2239  000CB8  EE20 F03C          	lfsr	2,60
  2240  000CBC  5035               	movf	scanForBeacon@move,w,c
  2241  000CBE  26D9               	addwf	fsr2l,f,c
  2242  000CC0  5036               	movf	scanForBeacon@move+1,w,c
  2243  000CC2  22DA               	addwfc	fsr2h,f,c
  2244  000CC4  2ADF               	incf	indf2,f,c
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;subroutines.c: 39:             return 1;
  2248  000CC6  0E01               	movlw	1
  2249                           
  2250                           ; BSR set to: 0
  2251  000CC8  0012               	return		;funcret
  2252  000CCA                     __end_of_scanForBeacon:
  2253                           	opt callstack 0
  2254                           
  2255 ;; *************** function _turnLeft *****************
  2256 ;; Defined at:
  2257 ;;		line 53 in file "dc_motor.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2260 ;;		 -> main@motorL(9), 
  2261 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2262 ;;		 -> main@motorR(9), 
  2263 ;;  max_power       2   41[COMRAM] int 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  i               2   44[COMRAM] int 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2275 ;;      Params:         6       0       0       0
  2276 ;;      Locals:         2       0       0       0
  2277 ;;      Temps:          1       0       0       0
  2278 ;;      Totals:         9       0       0       0
  2279 ;;Total ram usage:        9 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    5
  2282 ;; This function calls:
  2283 ;;		_setMotorPWM
  2284 ;; This function is called by:
  2285 ;;		_scanForBeacon
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text12
  2290  000D4E                     __ptext12:
  2291                           	opt callstack 0
  2292  000D4E                     _turnLeft:
  2293                           	opt callstack 24
  2294                           
  2295                           ;dc_motor.c: 53: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, int max_power);
      +                          dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;incstack = 0
  2299  000D4E  EE20 F001          	lfsr	2,1
  2300  000D52  5026               	movf	turnLeft@mL,w,c
  2301  000D54  26D9               	addwf	fsr2l,f,c
  2302  000D56  5027               	movf	turnLeft@mL+1,w,c
  2303  000D58  22DA               	addwfc	fsr2h,f,c
  2304  000D5A  0E00               	movlw	0
  2305  000D5C  6EDF               	movwf	indf2,c
  2306                           
  2307                           ;dc_motor.c: 57:     mR->direction = 1;
  2308  000D5E  EE20 F001          	lfsr	2,1
  2309  000D62  5028               	movf	turnLeft@mR,w,c
  2310  000D64  26D9               	addwf	fsr2l,f,c
  2311  000D66  5029               	movf	turnLeft@mR+1,w,c
  2312  000D68  22DA               	addwfc	fsr2h,f,c
  2313  000D6A  0E01               	movlw	1
  2314  000D6C  6EDF               	movwf	indf2,c
  2315                           
  2316                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2317  000D6E  0E00               	movlw	0
  2318  000D70  6E2E               	movwf	turnLeft@i+1,c
  2319  000D72  0E00               	movlw	0
  2320  000D74  6E2D               	movwf	turnLeft@i,c
  2321  000D76  D021               	goto	l2480
  2322  000D78                     l2470:
  2323                           
  2324                           ;dc_motor.c: 60:         mL->power = i;
  2325  000D78  C026  FFD9         	movff	turnLeft@mL,fsr2l
  2326  000D7C  C027  FFDA         	movff	turnLeft@mL+1,fsr2h
  2327  000D80  C02D  FFDF         	movff	turnLeft@i,indf2
  2328                           
  2329                           ;dc_motor.c: 61:         mR->power = i;
  2330  000D84  C028  FFD9         	movff	turnLeft@mR,fsr2l
  2331  000D88  C029  FFDA         	movff	turnLeft@mR+1,fsr2h
  2332  000D8C  C02D  FFDF         	movff	turnLeft@i,indf2
  2333                           
  2334                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2335  000D90  C026  F01D         	movff	turnLeft@mL,setMotorPWM@m
  2336  000D94  C027  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2337  000D98  EC22  F003         	call	_setMotorPWM	;wreg free
  2338                           
  2339                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2340  000D9C  C028  F01D         	movff	turnLeft@mR,setMotorPWM@m
  2341  000DA0  C029  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2342  000DA4  EC22  F003         	call	_setMotorPWM	;wreg free
  2343                           
  2344                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2345  000DA8  0E03               	movlw	3
  2346  000DAA  6E2C               	movwf	??_turnLeft& (0+255),c
  2347  000DAC  0E98               	movlw	152
  2348  000DAE                     u2237:
  2349  000DAE  2EE8               	decfsz	wreg,f,c
  2350  000DB0  D7FE               	bra	u2237
  2351  000DB2  2E2C               	decfsz	??_turnLeft& (0+255),f,c
  2352  000DB4  D7FC               	bra	u2237
  2353                           
  2354                           ;dc_motor.c: 66:     }
  2355  000DB6  4A2D               	infsnz	turnLeft@i,f,c
  2356  000DB8  2A2E               	incf	turnLeft@i+1,f,c
  2357  000DBA                     l2480:
  2358  000DBA  502A               	movf	turnLeft@max_power,w,c
  2359  000DBC  5C2D               	subwf	turnLeft@i,w,c
  2360  000DBE  502E               	movf	turnLeft@i+1,w,c
  2361  000DC0  0A80               	xorlw	128
  2362  000DC2  6E2C               	movwf	??_turnLeft& (0+255),c
  2363  000DC4  502B               	movf	turnLeft@max_power+1,w,c
  2364  000DC6  0A80               	xorlw	128
  2365  000DC8  582C               	subwfb	??_turnLeft& (0+255),w,c
  2366  000DCA  B0D8               	btfsc	status,0,c
  2367  000DCC  0012               	return	
  2368  000DCE  D7D4               	goto	l2470
  2369  000DD0                     __end_of_turnLeft:
  2370                           	opt callstack 0
  2371                           
  2372 ;; *************** function _returnHome *****************
  2373 ;; Defined at:
  2374 ;;		line 87 in file "subroutines.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2377 ;;		 -> main@motorL(9), 
  2378 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2379 ;;		 -> main@motorR(9), 
  2380 ;;  move_speed      2    4[BANK0 ] int 
  2381 ;;  search_speed    2    6[BANK0 ] int 
  2382 ;;  move            2    8[BANK0 ] PTR struct Movements
  2383 ;;		 -> travel_moves(61), 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  i               2    0        int 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      unsigned char 
  2388 ;; Registers used:
  2389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2395 ;;      Params:         0      10       0       0
  2396 ;;      Locals:         2       0       0       0
  2397 ;;      Temps:          5       0       0       0
  2398 ;;      Totals:         7      10       0       0
  2399 ;;Total ram usage:       17 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    7
  2402 ;; This function calls:
  2403 ;;		_ClearLCD
  2404 ;;		_LCD_String
  2405 ;;		_moveBackward
  2406 ;;		_stop
  2407 ;;		_turnRight
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text13
  2414  00039A                     __ptext13:
  2415                           	opt callstack 0
  2416  00039A                     _returnHome:
  2417                           	opt callstack 23
  2418                           
  2419                           ;subroutines.c: 87: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt move_speed,;subroutines.c: 88:                             int search_speed, struct M
      +                          ovements *move);subroutines.c: 89: {;subroutines.c: 90:     stop(mL,mR,move_speed);
  2420                           
  2421                           ;incstack = 0
  2422  00039A  C0BE  F026         	movff	returnHome@mL,stop@mL
  2423  00039E  C0BF  F027         	movff	returnHome@mL+1,stop@mL+1
  2424  0003A2  C0C0  F028         	movff	returnHome@mR,stop@mR
  2425  0003A6  C0C1  F029         	movff	returnHome@mR+1,stop@mR+1
  2426  0003AA  C0C2  F02A         	movff	returnHome@move_speed,stop@initial_speed
  2427  0003AE  C0C3  F02B         	movff	returnHome@move_speed+1,stop@initial_speed+1
  2428  0003B2  EC16  F008         	call	_stop	;wreg free
  2429                           
  2430                           ;subroutines.c: 91:     ClearLCD();
  2431  0003B6  EC51  F009         	call	_ClearLCD	;wreg free
  2432                           
  2433                           ;subroutines.c: 92:     LCD_String("RETURNING HOME");
  2434  0003BA  0E60               	movlw	low STR_6
  2435  0003BC  6E13               	movwf	LCD_String@string,c
  2436  0003BE  0E03               	movlw	high STR_6
  2437  0003C0  6E14               	movwf	LCD_String@string+1,c
  2438  0003C2  ECE7  F007         	call	_LCD_String	;wreg free
  2439  0003C6  D08A               	goto	l326
  2440  0003C8                     l2728:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;subroutines.c: 95:     {;subroutines.c: 96:         if(move->move_type[move->move_numbe
      +                          r] == 0)
  2444  0003C8  EE20 F03C          	lfsr	2,60
  2445  0003CC  51C6               	movf	returnHome@move& (0+255),w,b
  2446  0003CE  26D9               	addwf	fsr2l,f,c
  2447  0003D0  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2448  0003D2  22DA               	addwfc	fsr2h,f,c
  2449  0003D4  50DF               	movf	indf2,w,c
  2450  0003D6  6E2F               	movwf	??_returnHome& (0+255),c
  2451  0003D8  502F               	movf	??_returnHome,w,c
  2452  0003DA  25C6               	addwf	returnHome@move& (0+255),w,b
  2453  0003DC  6ED9               	movwf	fsr2l,c
  2454  0003DE  0E00               	movlw	0
  2455  0003E0  21C7               	addwfc	(returnHome@move+1)& (0+255),w,b
  2456  0003E2  6EDA               	movwf	fsr2h,c
  2457  0003E4  50DF               	movf	indf2,w,c
  2458  0003E6  A4D8               	btfss	status,2,c
  2459  0003E8  D031               	goto	l2734
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;subroutines.c: 97:         {;subroutines.c: 98:             moveBackward(mL,mR,move_spe
      +                          ed);
  2463  0003EA  C0BE  F026         	movff	returnHome@mL,moveBackward@mL
  2464  0003EE  C0BF  F027         	movff	returnHome@mL+1,moveBackward@mL+1
  2465  0003F2  C0C0  F028         	movff	returnHome@mR,moveBackward@mR
  2466  0003F6  C0C1  F029         	movff	returnHome@mR+1,moveBackward@mR+1
  2467  0003FA  C0C2  F02A         	movff	returnHome@move_speed,moveBackward@max_power
  2468  0003FE  C0C3  F02B         	movff	returnHome@move_speed+1,moveBackward@max_power+1
  2469  000402  EC29  F007         	call	_moveBackward	;wreg free
  2470  000406                     l2732:
  2471  000406  0100               	movlb	0	; () banked
  2472  000408  EE20 F03C          	lfsr	2,60
  2473  00040C  51C6               	movf	returnHome@move& (0+255),w,b
  2474  00040E  26D9               	addwf	fsr2l,f,c
  2475  000410  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2476  000412  22DA               	addwfc	fsr2h,f,c
  2477  000414  50DF               	movf	indf2,w,c
  2478  000416  6E2F               	movwf	??_returnHome& (0+255),c
  2479  000418  502F               	movf	??_returnHome,w,c
  2480  00041A  0D02               	mullw	2
  2481  00041C  C0C6  F030         	movff	returnHome@move,??_returnHome+1
  2482  000420  C0C7  F031         	movff	returnHome@move+1,??_returnHome+2
  2483  000424  50F3               	movf	prodl,w,c
  2484  000426  2630               	addwf	??_returnHome+1,f,c
  2485  000428  50F4               	movf	prodh,w,c
  2486  00042A  2231               	addwfc	??_returnHome+2,f,c
  2487  00042C  0E14               	movlw	20
  2488  00042E  2430               	addwf	??_returnHome+1,w,c
  2489  000430  6ED9               	movwf	fsr2l,c
  2490  000432  0E00               	movlw	0
  2491  000434  2031               	addwfc	??_returnHome+2,w,c
  2492  000436  6EDA               	movwf	fsr2h,c
  2493  000438  0E01               	movlw	1
  2494  00043A  BEDB               	btfsc	plusw2,7,c
  2495  00043C  D048               	goto	u2010
  2496  00043E  0E01               	movlw	1
  2497  000440  50DB               	movf	plusw2,w,c
  2498  000442  E1E1               	bnz	l2732
  2499  000444  04DE               	decf	postinc2,w,c
  2500  000446  A0D8               	btfss	status,0,c
  2501  000448  D042               	goto	u2010
  2502  00044A  D7DD               	goto	l2732
  2503  00044C                     l2734:
  2504                           
  2505                           ; BSR set to: 0
  2506  00044C  EE20 F03C          	lfsr	2,60
  2507  000450  51C6               	movf	returnHome@move& (0+255),w,b
  2508  000452  26D9               	addwf	fsr2l,f,c
  2509  000454  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2510  000456  22DA               	addwfc	fsr2h,f,c
  2511  000458  50DF               	movf	indf2,w,c
  2512  00045A  6E2F               	movwf	??_returnHome& (0+255),c
  2513  00045C  502F               	movf	??_returnHome,w,c
  2514  00045E  25C6               	addwf	returnHome@move& (0+255),w,b
  2515  000460  6ED9               	movwf	fsr2l,c
  2516  000462  0E00               	movlw	0
  2517  000464  21C7               	addwfc	(returnHome@move+1)& (0+255),w,b
  2518  000466  6EDA               	movwf	fsr2h,c
  2519  000468  04DE               	decf	postinc2,w,c
  2520  00046A  A4D8               	btfss	status,2,c
  2521  00046C  D030               	goto	u2010
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;subroutines.c: 102:         {;subroutines.c: 103:             turnRight(mL,mR,search_sp
      +                          eed);
  2525  00046E  C0BE  F026         	movff	returnHome@mL,turnRight@mL
  2526  000472  C0BF  F027         	movff	returnHome@mL+1,turnRight@mL+1
  2527  000476  C0C0  F028         	movff	returnHome@mR,turnRight@mR
  2528  00047A  C0C1  F029         	movff	returnHome@mR+1,turnRight@mR+1
  2529  00047E  C0C4  F02A         	movff	returnHome@search_speed,turnRight@max_power
  2530  000482  C0C5  F02B         	movff	returnHome@search_speed+1,turnRight@max_power+1
  2531  000486  ECE8  F006         	call	_turnRight	;wreg free
  2532  00048A                     l2738:
  2533  00048A  0100               	movlb	0	; () banked
  2534  00048C  EE20 F03C          	lfsr	2,60
  2535  000490  51C6               	movf	returnHome@move& (0+255),w,b
  2536  000492  26D9               	addwf	fsr2l,f,c
  2537  000494  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2538  000496  22DA               	addwfc	fsr2h,f,c
  2539  000498  50DF               	movf	indf2,w,c
  2540  00049A  6E2F               	movwf	??_returnHome& (0+255),c
  2541  00049C  502F               	movf	??_returnHome,w,c
  2542  00049E  0D02               	mullw	2
  2543  0004A0  C0C6  F030         	movff	returnHome@move,??_returnHome+1
  2544  0004A4  C0C7  F031         	movff	returnHome@move+1,??_returnHome+2
  2545  0004A8  50F3               	movf	prodl,w,c
  2546  0004AA  2630               	addwf	??_returnHome+1,f,c
  2547  0004AC  50F4               	movf	prodh,w,c
  2548  0004AE  2231               	addwfc	??_returnHome+2,f,c
  2549  0004B0  0E14               	movlw	20
  2550  0004B2  2430               	addwf	??_returnHome+1,w,c
  2551  0004B4  6ED9               	movwf	fsr2l,c
  2552  0004B6  0E00               	movlw	0
  2553  0004B8  2031               	addwfc	??_returnHome+2,w,c
  2554  0004BA  6EDA               	movwf	fsr2h,c
  2555  0004BC  0E01               	movlw	1
  2556  0004BE  BEDB               	btfsc	plusw2,7,c
  2557  0004C0  D006               	goto	u2010
  2558  0004C2  0E01               	movlw	1
  2559  0004C4  50DB               	movf	plusw2,w,c
  2560  0004C6  E1E1               	bnz	l2738
  2561  0004C8  04DE               	decf	postinc2,w,c
  2562  0004CA  B0D8               	btfsc	status,0,c
  2563  0004CC  D7DE               	goto	l2738
  2564  0004CE                     u2010:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;subroutines.c: 106:     }
  2568  0004CE  EE20 F03C          	lfsr	2,60
  2569  0004D2  51C6               	movf	returnHome@move& (0+255),w,b
  2570  0004D4  26D9               	addwf	fsr2l,f,c
  2571  0004D6  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2572  0004D8  22DA               	addwfc	fsr2h,f,c
  2573  0004DA  06DF               	decf	indf2,f,c
  2574  0004DC                     l326:
  2575  0004DC  0100               	movlb	0	; () banked
  2576  0004DE  EE20 F03C          	lfsr	2,60
  2577  0004E2  51C6               	movf	returnHome@move& (0+255),w,b
  2578  0004E4  26D9               	addwf	fsr2l,f,c
  2579  0004E6  51C7               	movf	(returnHome@move+1)& (0+255),w,b
  2580  0004E8  22DA               	addwfc	fsr2h,f,c
  2581  0004EA  50DF               	movf	indf2,w,c
  2582  0004EC  A4D8               	btfss	status,2,c
  2583  0004EE  D76C               	goto	l2728
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;subroutines.c: 108:     return 3;
  2587  0004F0  0E03               	movlw	3
  2588                           
  2589                           ; BSR set to: 0
  2590  0004F2  0012               	return		;funcret
  2591  0004F4                     __end_of_returnHome:
  2592                           	opt callstack 0
  2593                           
  2594 ;; *************** function _turnRight *****************
  2595 ;; Defined at:
  2596 ;;		line 69 in file "dc_motor.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2599 ;;		 -> main@motorL(9), 
  2600 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2601 ;;		 -> main@motorR(9), 
  2602 ;;  max_power       2   41[COMRAM] int 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  i               2   44[COMRAM] int 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2614 ;;      Params:         6       0       0       0
  2615 ;;      Locals:         2       0       0       0
  2616 ;;      Temps:          1       0       0       0
  2617 ;;      Totals:         9       0       0       0
  2618 ;;Total ram usage:        9 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    5
  2621 ;; This function calls:
  2622 ;;		_setMotorPWM
  2623 ;; This function is called by:
  2624 ;;		_returnHome
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text14
  2629  000DD0                     __ptext14:
  2630                           	opt callstack 0
  2631  000DD0                     _turnRight:
  2632                           	opt callstack 24
  2633                           
  2634                           ;dc_motor.c: 69: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 70: {;dc_motor.c: 72:     mL->direction = 1;
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;incstack = 0
  2638  000DD0  EE20 F001          	lfsr	2,1
  2639  000DD4  5026               	movf	turnRight@mL,w,c
  2640  000DD6  26D9               	addwf	fsr2l,f,c
  2641  000DD8  5027               	movf	turnRight@mL+1,w,c
  2642  000DDA  22DA               	addwfc	fsr2h,f,c
  2643  000DDC  0E01               	movlw	1
  2644  000DDE  6EDF               	movwf	indf2,c
  2645                           
  2646                           ;dc_motor.c: 73:     mR->direction = 0;
  2647  000DE0  EE20 F001          	lfsr	2,1
  2648  000DE4  5028               	movf	turnRight@mR,w,c
  2649  000DE6  26D9               	addwf	fsr2l,f,c
  2650  000DE8  5029               	movf	turnRight@mR+1,w,c
  2651  000DEA  22DA               	addwfc	fsr2h,f,c
  2652  000DEC  0E00               	movlw	0
  2653  000DEE  6EDF               	movwf	indf2,c
  2654                           
  2655                           ;dc_motor.c: 75:     for(int i = 0; i<max_power;i++){
  2656  000DF0  0E00               	movlw	0
  2657  000DF2  6E2E               	movwf	turnRight@i+1,c
  2658  000DF4  0E00               	movlw	0
  2659  000DF6  6E2D               	movwf	turnRight@i,c
  2660  000DF8  D021               	goto	l2496
  2661  000DFA                     l2486:
  2662                           
  2663                           ;dc_motor.c: 76:         mL->power = i;
  2664  000DFA  C026  FFD9         	movff	turnRight@mL,fsr2l
  2665  000DFE  C027  FFDA         	movff	turnRight@mL+1,fsr2h
  2666  000E02  C02D  FFDF         	movff	turnRight@i,indf2
  2667                           
  2668                           ;dc_motor.c: 77:         mR->power = i;
  2669  000E06  C028  FFD9         	movff	turnRight@mR,fsr2l
  2670  000E0A  C029  FFDA         	movff	turnRight@mR+1,fsr2h
  2671  000E0E  C02D  FFDF         	movff	turnRight@i,indf2
  2672                           
  2673                           ;dc_motor.c: 79:         setMotorPWM(mL);
  2674  000E12  C026  F01D         	movff	turnRight@mL,setMotorPWM@m
  2675  000E16  C027  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  2676  000E1A  EC22  F003         	call	_setMotorPWM	;wreg free
  2677                           
  2678                           ;dc_motor.c: 80:         setMotorPWM(mR);
  2679  000E1E  C028  F01D         	movff	turnRight@mR,setMotorPWM@m
  2680  000E22  C029  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  2681  000E26  EC22  F003         	call	_setMotorPWM	;wreg free
  2682                           
  2683                           ;dc_motor.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2684  000E2A  0E03               	movlw	3
  2685  000E2C  6E2C               	movwf	??_turnRight& (0+255),c
  2686  000E2E  0E98               	movlw	152
  2687  000E30                     u2247:
  2688  000E30  2EE8               	decfsz	wreg,f,c
  2689  000E32  D7FE               	bra	u2247
  2690  000E34  2E2C               	decfsz	??_turnRight& (0+255),f,c
  2691  000E36  D7FC               	bra	u2247
  2692                           
  2693                           ;dc_motor.c: 82:     }
  2694  000E38  4A2D               	infsnz	turnRight@i,f,c
  2695  000E3A  2A2E               	incf	turnRight@i+1,f,c
  2696  000E3C                     l2496:
  2697  000E3C  502A               	movf	turnRight@max_power,w,c
  2698  000E3E  5C2D               	subwf	turnRight@i,w,c
  2699  000E40  502E               	movf	turnRight@i+1,w,c
  2700  000E42  0A80               	xorlw	128
  2701  000E44  6E2C               	movwf	??_turnRight& (0+255),c
  2702  000E46  502B               	movf	turnRight@max_power+1,w,c
  2703  000E48  0A80               	xorlw	128
  2704  000E4A  582C               	subwfb	??_turnRight& (0+255),w,c
  2705  000E4C  B0D8               	btfsc	status,0,c
  2706  000E4E  0012               	return	
  2707  000E50  D7D4               	goto	l2486
  2708  000E52                     __end_of_turnRight:
  2709                           	opt callstack 0
  2710                           
  2711 ;; *************** function _stop *****************
  2712 ;; Defined at:
  2713 ;;		line 40 in file "dc_motor.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2716 ;;		 -> main@motorL(9), 
  2717 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2718 ;;		 -> main@motorR(9), 
  2719 ;;  initial_spee    2   41[COMRAM] int 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  i               2   44[COMRAM] int 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2731 ;;      Params:         6       0       0       0
  2732 ;;      Locals:         2       0       0       0
  2733 ;;      Temps:          1       0       0       0
  2734 ;;      Totals:         9       0       0       0
  2735 ;;Total ram usage:        9 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    5
  2738 ;; This function calls:
  2739 ;;		_setMotorPWM
  2740 ;; This function is called by:
  2741 ;;		_returnHome
  2742 ;;		_stopAndDisplay
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text15
  2747  00102C                     __ptext15:
  2748                           	opt callstack 0
  2749  00102C                     _stop:
  2750                           	opt callstack 24
  2751                           
  2752                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2753                           
  2754                           ;incstack = 0
  2755  00102C  C02A  F02D         	movff	stop@initial_speed,stop@i
  2756  001030  C02B  F02E         	movff	stop@initial_speed+1,stop@i+1
  2757  001034                     l2450:
  2758  001034  BE2E               	btfsc	stop@i+1,7,c
  2759  001036  0012               	return	
  2760  001038  502E               	movf	stop@i+1,w,c
  2761  00103A  E103               	bnz	l2454
  2762  00103C  042D               	decf	stop@i,w,c
  2763  00103E  A0D8               	btfss	status,0,c
  2764  001040  0012               	return	
  2765  001042                     l2454:
  2766                           
  2767                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2768  001042  C026  FFD9         	movff	stop@mL,fsr2l
  2769  001046  C027  FFDA         	movff	stop@mL+1,fsr2h
  2770  00104A  C02D  FFDF         	movff	stop@i,indf2
  2771                           
  2772                           ;dc_motor.c: 45:         mR->power = i;
  2773  00104E  C028  FFD9         	movff	stop@mR,fsr2l
  2774  001052  C029  FFDA         	movff	stop@mR+1,fsr2h
  2775  001056  C02D  FFDF         	movff	stop@i,indf2
  2776                           
  2777                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2778  00105A  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2779  00105E  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2780  001062  EC22  F003         	call	_setMotorPWM	;wreg free
  2781                           
  2782                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2783  001066  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2784  00106A  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2785  00106E  EC22  F003         	call	_setMotorPWM	;wreg free
  2786                           
  2787                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2788  001072  0E03               	movlw	3
  2789  001074  6E2C               	movwf	??_stop& (0+255),c
  2790  001076  0E98               	movlw	152
  2791  001078                     u2257:
  2792  001078  2EE8               	decfsz	wreg,f,c
  2793  00107A  D7FE               	bra	u2257
  2794  00107C  2E2C               	decfsz	??_stop& (0+255),f,c
  2795  00107E  D7FC               	bra	u2257
  2796                           
  2797                           ;dc_motor.c: 49:     }
  2798  001080  062D               	decf	stop@i,f,c
  2799  001082  A0D8               	btfss	status,0,c
  2800  001084  062E               	decf	stop@i+1,f,c
  2801  001086  D7D6               	goto	l2450
  2802  001088                     __end_of_stop:
  2803                           	opt callstack 0
  2804                           
  2805 ;; *************** function _moveBackward *****************
  2806 ;; Defined at:
  2807 ;;		line 101 in file "dc_motor.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2810 ;;		 -> main@motorL(9), 
  2811 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2812 ;;		 -> main@motorR(9), 
  2813 ;;  max_power       2   41[COMRAM] int 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  i               2   44[COMRAM] int 
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2825 ;;      Params:         6       0       0       0
  2826 ;;      Locals:         2       0       0       0
  2827 ;;      Temps:          1       0       0       0
  2828 ;;      Totals:         9       0       0       0
  2829 ;;Total ram usage:        9 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    5
  2832 ;; This function calls:
  2833 ;;		_setMotorPWM
  2834 ;; This function is called by:
  2835 ;;		_returnHome
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text16
  2840  000E52                     __ptext16:
  2841                           	opt callstack 0
  2842  000E52                     _moveBackward:
  2843                           	opt callstack 24
  2844                           
  2845                           ;dc_motor.c: 101: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_po
      +                          wer);dc_motor.c: 102: {;dc_motor.c: 103:     mL->direction = 0;
  2846                           
  2847                           ;incstack = 0
  2848  000E52  EE20 F001          	lfsr	2,1
  2849  000E56  5026               	movf	moveBackward@mL,w,c
  2850  000E58  26D9               	addwf	fsr2l,f,c
  2851  000E5A  5027               	movf	moveBackward@mL+1,w,c
  2852  000E5C  22DA               	addwfc	fsr2h,f,c
  2853  000E5E  0E00               	movlw	0
  2854  000E60  6EDF               	movwf	indf2,c
  2855                           
  2856                           ;dc_motor.c: 104:     mR->direction = 0;
  2857  000E62  EE20 F001          	lfsr	2,1
  2858  000E66  5028               	movf	moveBackward@mR,w,c
  2859  000E68  26D9               	addwf	fsr2l,f,c
  2860  000E6A  5029               	movf	moveBackward@mR+1,w,c
  2861  000E6C  22DA               	addwfc	fsr2h,f,c
  2862  000E6E  0E00               	movlw	0
  2863  000E70  6EDF               	movwf	indf2,c
  2864                           
  2865                           ;dc_motor.c: 105:     for(int i = 0; i < max_power; i++)
  2866  000E72  0E00               	movlw	0
  2867  000E74  6E2E               	movwf	moveBackward@i+1,c
  2868  000E76  0E00               	movlw	0
  2869  000E78  6E2D               	movwf	moveBackward@i,c
  2870  000E7A  D021               	goto	l2528
  2871  000E7C                     l2518:
  2872                           
  2873                           ;dc_motor.c: 106:     {;dc_motor.c: 107:         mL->power = i;
  2874  000E7C  C026  FFD9         	movff	moveBackward@mL,fsr2l
  2875  000E80  C027  FFDA         	movff	moveBackward@mL+1,fsr2h
  2876  000E84  C02D  FFDF         	movff	moveBackward@i,indf2
  2877                           
  2878                           ;dc_motor.c: 108:         mR->power = i;
  2879  000E88  C028  FFD9         	movff	moveBackward@mR,fsr2l
  2880  000E8C  C029  FFDA         	movff	moveBackward@mR+1,fsr2h
  2881  000E90  C02D  FFDF         	movff	moveBackward@i,indf2
  2882                           
  2883                           ;dc_motor.c: 109:         setMotorPWM(mL);
  2884  000E94  C026  F01D         	movff	moveBackward@mL,setMotorPWM@m
  2885  000E98  C027  F01E         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2886  000E9C  EC22  F003         	call	_setMotorPWM	;wreg free
  2887                           
  2888                           ;dc_motor.c: 110:         setMotorPWM(mR);
  2889  000EA0  C028  F01D         	movff	moveBackward@mR,setMotorPWM@m
  2890  000EA4  C029  F01E         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2891  000EA8  EC22  F003         	call	_setMotorPWM	;wreg free
  2892                           
  2893                           ;dc_motor.c: 111:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2894  000EAC  0E03               	movlw	3
  2895  000EAE  6E2C               	movwf	??_moveBackward& (0+255),c
  2896  000EB0  0E98               	movlw	152
  2897  000EB2                     u2267:
  2898  000EB2  2EE8               	decfsz	wreg,f,c
  2899  000EB4  D7FE               	bra	u2267
  2900  000EB6  2E2C               	decfsz	??_moveBackward& (0+255),f,c
  2901  000EB8  D7FC               	bra	u2267
  2902                           
  2903                           ;dc_motor.c: 112:     }
  2904  000EBA  4A2D               	infsnz	moveBackward@i,f,c
  2905  000EBC  2A2E               	incf	moveBackward@i+1,f,c
  2906  000EBE                     l2528:
  2907  000EBE  502A               	movf	moveBackward@max_power,w,c
  2908  000EC0  5C2D               	subwf	moveBackward@i,w,c
  2909  000EC2  502E               	movf	moveBackward@i+1,w,c
  2910  000EC4  0A80               	xorlw	128
  2911  000EC6  6E2C               	movwf	??_moveBackward& (0+255),c
  2912  000EC8  502B               	movf	moveBackward@max_power+1,w,c
  2913  000ECA  0A80               	xorlw	128
  2914  000ECC  582C               	subwfb	??_moveBackward& (0+255),w,c
  2915  000ECE  B0D8               	btfsc	status,0,c
  2916  000ED0  0012               	return	
  2917  000ED2  D7D4               	goto	l2518
  2918  000ED4                     __end_of_moveBackward:
  2919                           	opt callstack 0
  2920                           
  2921 ;; *************** function _moveToBeacon *****************
  2922 ;; Defined at:
  2923 ;;		line 46 in file "subroutines.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  2926 ;;		 -> main@motorL(9), 
  2927 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  2928 ;;		 -> main@motorR(9), 
  2929 ;;  speed           2    4[BANK0 ] int 
  2930 ;;  move            2    6[BANK0 ] PTR struct Movements
  2931 ;;		 -> travel_moves(61), 
  2932 ;;  exit_flag       2    8[BANK0 ] PTR volatile unsigned ch
  2933 ;;		 -> NULL(0), RFID_flag(1), 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  raw_data        2   48[COMRAM] unsigned int 
  2936 ;;  beacon_locat    1   50[COMRAM] unsigned char 
  2937 ;;  count           2   51[COMRAM] int 
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      unsigned char 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2947 ;;      Params:         0      10       0       0
  2948 ;;      Locals:         5       0       0       0
  2949 ;;      Temps:          2       0       0       0
  2950 ;;      Totals:         7      10       0       0
  2951 ;;Total ram usage:       17 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    7
  2954 ;; This function calls:
  2955 ;;		_ClearLCD
  2956 ;;		_LCD_String
  2957 ;;		_classify_data
  2958 ;;		_moveForward
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text17
  2965  000A20                     __ptext17:
  2966                           	opt callstack 0
  2967  000A20                     _moveToBeacon:
  2968                           	opt callstack 23
  2969                           
  2970                           ;subroutines.c: 46: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 47:                         struct Movements *move, volatile 
      +                          char *exit_flag);subroutines.c: 48: {;subroutines.c: 49:     move->move_type[move->move_
      +                          number] = 0;
  2971                           
  2972                           ;incstack = 0
  2973  000A20  0100               	movlb	0	; () banked
  2974  000A22  EE20 F03C          	lfsr	2,60
  2975  000A26  51C4               	movf	moveToBeacon@move& (0+255),w,b
  2976  000A28  26D9               	addwf	fsr2l,f,c
  2977  000A2A  51C5               	movf	(moveToBeacon@move+1)& (0+255),w,b
  2978  000A2C  22DA               	addwfc	fsr2h,f,c
  2979  000A2E  50DF               	movf	indf2,w,c
  2980  000A30  6E2F               	movwf	??_moveToBeacon& (0+255),c
  2981  000A32  502F               	movf	??_moveToBeacon,w,c
  2982  000A34  25C4               	addwf	moveToBeacon@move& (0+255),w,b
  2983  000A36  6ED9               	movwf	fsr2l,c
  2984  000A38  0E00               	movlw	0
  2985  000A3A  21C5               	addwfc	(moveToBeacon@move+1)& (0+255),w,b
  2986  000A3C  6EDA               	movwf	fsr2h,c
  2987  000A3E  0E00               	movlw	0
  2988  000A40  6EDF               	movwf	indf2,c
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;subroutines.c: 50:     moveForward(mL,mR,speed);
  2992  000A42  C0BE  F026         	movff	moveToBeacon@mL,moveForward@mL
  2993  000A46  C0BF  F027         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2994  000A4A  C0C0  F028         	movff	moveToBeacon@mR,moveForward@mR
  2995  000A4E  C0C1  F029         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2996  000A52  C0C2  F02A         	movff	moveToBeacon@speed,moveForward@max_power
  2997  000A56  C0C3  F02B         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2998  000A5A  EC6A  F007         	call	_moveForward	;wreg free
  2999                           
  3000                           ;subroutines.c: 51:     ClearLCD();
  3001  000A5E  EC51  F009         	call	_ClearLCD	;wreg free
  3002                           
  3003                           ;subroutines.c: 52:     LCD_String("MOVING TO BOMB");
  3004  000A62  0E51               	movlw	low STR_5
  3005  000A64  6E13               	movwf	LCD_String@string,c
  3006  000A66  0E03               	movlw	high STR_5
  3007  000A68  6E14               	movwf	LCD_String@string+1,c
  3008  000A6A  ECE7  F007         	call	_LCD_String	;wreg free
  3009                           
  3010                           ;subroutines.c: 53:     int count = 0;
  3011  000A6E  0E00               	movlw	0
  3012  000A70  6E35               	movwf	moveToBeacon@count+1,c
  3013  000A72  0E00               	movlw	0
  3014  000A74  6E34               	movwf	moveToBeacon@count,c
  3015  000A76                     l2692:
  3016                           
  3017                           ;subroutines.c: 56:     {;subroutines.c: 58:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  3018  000A76  5068               	movf	3944,w,c	;volatile
  3019  000A78  CF69 F02F          	movff	3945,??_moveToBeacon	;volatile
  3020  000A7C  6A30               	clrf	(??_moveToBeacon+1)& (0+255),c
  3021  000A7E  C02F  F030         	movff	??_moveToBeacon,??_moveToBeacon+1
  3022  000A82  6A2F               	clrf	??_moveToBeacon,c
  3023  000A84  102F               	iorwf	??_moveToBeacon,w,c
  3024  000A86  6E31               	movwf	moveToBeacon@raw_data,c
  3025  000A88  5030               	movf	??_moveToBeacon+1,w,c
  3026  000A8A  6E32               	movwf	moveToBeacon@raw_data+1,c
  3027                           
  3028                           ;subroutines.c: 61:         char beacon_location = classify_data(raw_data);
  3029  000A8C  C031  F00F         	movff	moveToBeacon@raw_data,classify_data@raw_data
  3030  000A90  C032  F010         	movff	moveToBeacon@raw_data+1,classify_data@raw_data+1
  3031  000A94  EC6A  F008         	call	_classify_data	;wreg free
  3032  000A98  6E33               	movwf	moveToBeacon@beacon_location,c
  3033                           
  3034                           ;subroutines.c: 63:         if(*exit_flag == 1)
  3035  000A9A  C0C6  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  3036  000A9E  C0C7  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  3037  000AA2  04DE               	decf	postinc2,w,c
  3038  000AA4  A4D8               	btfss	status,2,c
  3039  000AA6  D002               	goto	l2706
  3040                           
  3041                           ;subroutines.c: 66:             return 2;
  3042  000AA8  0E02               	movlw	2
  3043  000AAA  0012               	return	
  3044  000AAC                     l2706:
  3045  000AAC  5033               	movf	moveToBeacon@beacon_location,w,c
  3046  000AAE  A4D8               	btfss	status,2,c
  3047  000AB0  D003               	goto	l2710
  3048                           
  3049                           ;subroutines.c: 70:         {;subroutines.c: 71:             count += 1;
  3050  000AB2  4A34               	infsnz	moveToBeacon@count,f,c
  3051  000AB4  2A35               	incf	moveToBeacon@count+1,f,c
  3052                           
  3053                           ;subroutines.c: 72:         }
  3054  000AB6  D004               	goto	l2712
  3055  000AB8                     l2710:
  3056                           
  3057                           ;subroutines.c: 74:         {;subroutines.c: 75:             count = 0;
  3058  000AB8  0E00               	movlw	0
  3059  000ABA  6E35               	movwf	moveToBeacon@count+1,c
  3060  000ABC  0E00               	movlw	0
  3061  000ABE  6E34               	movwf	moveToBeacon@count,c
  3062  000AC0                     l2712:
  3063                           
  3064                           ;subroutines.c: 78:         if(count >=18000)
  3065  000AC0  BE35               	btfsc	moveToBeacon@count+1,7,c
  3066  000AC2  D7D9               	goto	l2692
  3067  000AC4  0E50               	movlw	80
  3068  000AC6  5C34               	subwf	moveToBeacon@count,w,c
  3069  000AC8  0E46               	movlw	70
  3070  000ACA  5835               	subwfb	moveToBeacon@count+1,w,c
  3071  000ACC  A0D8               	btfss	status,0,c
  3072  000ACE  D7D3               	goto	l2692
  3073                           
  3074                           ;subroutines.c: 79:         {;subroutines.c: 80:             move-> move_number += 1;
  3075  000AD0  0100               	movlb	0	; () banked
  3076  000AD2  EE20 F03C          	lfsr	2,60
  3077  000AD6  51C4               	movf	moveToBeacon@move& (0+255),w,b
  3078  000AD8  26D9               	addwf	fsr2l,f,c
  3079  000ADA  51C5               	movf	(moveToBeacon@move+1)& (0+255),w,b
  3080  000ADC  22DA               	addwfc	fsr2h,f,c
  3081  000ADE  2ADF               	incf	indf2,f,c
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;subroutines.c: 81:             return 0;
  3085  000AE0  0E00               	movlw	0
  3086  000AE2  0012               	return		;funcret
  3087  000AE4                     __end_of_moveToBeacon:
  3088                           	opt callstack 0
  3089                           
  3090 ;; *************** function _moveForward *****************
  3091 ;; Defined at:
  3092 ;;		line 86 in file "dc_motor.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3095 ;;		 -> main@motorL(9), 
  3096 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3097 ;;		 -> main@motorR(9), 
  3098 ;;  max_power       2   41[COMRAM] int 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;  i               2   44[COMRAM] int 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3110 ;;      Params:         6       0       0       0
  3111 ;;      Locals:         2       0       0       0
  3112 ;;      Temps:          1       0       0       0
  3113 ;;      Totals:         9       0       0       0
  3114 ;;Total ram usage:        9 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    5
  3117 ;; This function calls:
  3118 ;;		_setMotorPWM
  3119 ;; This function is called by:
  3120 ;;		_moveToBeacon
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text18
  3125  000ED4                     __ptext18:
  3126                           	opt callstack 0
  3127  000ED4                     _moveForward:
  3128                           	opt callstack 24
  3129                           
  3130                           ;dc_motor.c: 86: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 87: {;dc_motor.c: 88:     mL->direction = 1;
  3131                           
  3132                           ;incstack = 0
  3133  000ED4  EE20 F001          	lfsr	2,1
  3134  000ED8  5026               	movf	moveForward@mL,w,c
  3135  000EDA  26D9               	addwf	fsr2l,f,c
  3136  000EDC  5027               	movf	moveForward@mL+1,w,c
  3137  000EDE  22DA               	addwfc	fsr2h,f,c
  3138  000EE0  0E01               	movlw	1
  3139  000EE2  6EDF               	movwf	indf2,c
  3140                           
  3141                           ;dc_motor.c: 89:     mR->direction = 1;
  3142  000EE4  EE20 F001          	lfsr	2,1
  3143  000EE8  5028               	movf	moveForward@mR,w,c
  3144  000EEA  26D9               	addwf	fsr2l,f,c
  3145  000EEC  5029               	movf	moveForward@mR+1,w,c
  3146  000EEE  22DA               	addwfc	fsr2h,f,c
  3147  000EF0  0E01               	movlw	1
  3148  000EF2  6EDF               	movwf	indf2,c
  3149                           
  3150                           ;dc_motor.c: 90:     for(int i = 0; i < max_power; i++)
  3151  000EF4  0E00               	movlw	0
  3152  000EF6  6E2E               	movwf	moveForward@i+1,c
  3153  000EF8  0E00               	movlw	0
  3154  000EFA  6E2D               	movwf	moveForward@i,c
  3155  000EFC  D021               	goto	l2512
  3156  000EFE                     l2502:
  3157                           
  3158                           ;dc_motor.c: 91:     {;dc_motor.c: 92:         mL->power = i;
  3159  000EFE  C026  FFD9         	movff	moveForward@mL,fsr2l
  3160  000F02  C027  FFDA         	movff	moveForward@mL+1,fsr2h
  3161  000F06  C02D  FFDF         	movff	moveForward@i,indf2
  3162                           
  3163                           ;dc_motor.c: 93:         mR->power = i;
  3164  000F0A  C028  FFD9         	movff	moveForward@mR,fsr2l
  3165  000F0E  C029  FFDA         	movff	moveForward@mR+1,fsr2h
  3166  000F12  C02D  FFDF         	movff	moveForward@i,indf2
  3167                           
  3168                           ;dc_motor.c: 94:         setMotorPWM(mL);
  3169  000F16  C026  F01D         	movff	moveForward@mL,setMotorPWM@m
  3170  000F1A  C027  F01E         	movff	moveForward@mL+1,setMotorPWM@m+1
  3171  000F1E  EC22  F003         	call	_setMotorPWM	;wreg free
  3172                           
  3173                           ;dc_motor.c: 95:         setMotorPWM(mR);
  3174  000F22  C028  F01D         	movff	moveForward@mR,setMotorPWM@m
  3175  000F26  C029  F01E         	movff	moveForward@mR+1,setMotorPWM@m+1
  3176  000F2A  EC22  F003         	call	_setMotorPWM	;wreg free
  3177                           
  3178                           ;dc_motor.c: 96:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3179  000F2E  0E03               	movlw	3
  3180  000F30  6E2C               	movwf	??_moveForward& (0+255),c
  3181  000F32  0E98               	movlw	152
  3182  000F34                     u2277:
  3183  000F34  2EE8               	decfsz	wreg,f,c
  3184  000F36  D7FE               	bra	u2277
  3185  000F38  2E2C               	decfsz	??_moveForward& (0+255),f,c
  3186  000F3A  D7FC               	bra	u2277
  3187                           
  3188                           ;dc_motor.c: 97:     }
  3189  000F3C  4A2D               	infsnz	moveForward@i,f,c
  3190  000F3E  2A2E               	incf	moveForward@i+1,f,c
  3191  000F40                     l2512:
  3192  000F40  502A               	movf	moveForward@max_power,w,c
  3193  000F42  5C2D               	subwf	moveForward@i,w,c
  3194  000F44  502E               	movf	moveForward@i+1,w,c
  3195  000F46  0A80               	xorlw	128
  3196  000F48  6E2C               	movwf	??_moveForward& (0+255),c
  3197  000F4A  502B               	movf	moveForward@max_power+1,w,c
  3198  000F4C  0A80               	xorlw	128
  3199  000F4E  582C               	subwfb	??_moveForward& (0+255),w,c
  3200  000F50  B0D8               	btfsc	status,0,c
  3201  000F52  0012               	return	
  3202  000F54  D7D4               	goto	l2502
  3203  000F56                     __end_of_moveForward:
  3204                           	opt callstack 0
  3205                           
  3206 ;; *************** function _classify_data *****************
  3207 ;; Defined at:
  3208 ;;		line 35 in file "signal_processing.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  raw_data        2   14[COMRAM] unsigned int 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  filtered        2   18[COMRAM] unsigned int 
  3213 ;; Return value:  Size  Location     Type
  3214 ;;                  1    wreg      unsigned char 
  3215 ;; Registers used:
  3216 ;;		wreg, status,2, status,0
  3217 ;; Tracked objects:
  3218 ;;		On entry : 0/0
  3219 ;;		On exit  : 0/0
  3220 ;;		Unchanged: 0/0
  3221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3222 ;;      Params:         2       0       0       0
  3223 ;;      Locals:         2       0       0       0
  3224 ;;      Temps:          2       0       0       0
  3225 ;;      Totals:         6       0       0       0
  3226 ;;Total ram usage:        6 bytes
  3227 ;; Hardware stack levels used:    1
  3228 ;; Hardware stack levels required when called:    3
  3229 ;; This function calls:
  3230 ;;		Nothing
  3231 ;; This function is called by:
  3232 ;;		_scanForBeacon
  3233 ;;		_moveToBeacon
  3234 ;;		_waitForInput
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text19
  3239  0010D4                     __ptext19:
  3240                           	opt callstack 0
  3241  0010D4                     _classify_data:
  3242                           	opt callstack 26
  3243                           
  3244                           ;signal_processing.c: 35: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           36: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 3
      +                          9:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  3245                           
  3246                           ;incstack = 0
  3247  0010D4  5041               	movf	classify_data@smoothed,w,c
  3248  0010D6  5C0F               	subwf	classify_data@raw_data,w,c
  3249  0010D8  6E11               	movwf	??_classify_data& (0+255),c
  3250  0010DA  5042               	movf	classify_data@smoothed+1,w,c
  3251  0010DC  5810               	subwfb	classify_data@raw_data+1,w,c
  3252  0010DE  6E12               	movwf	(??_classify_data+1)& (0+255),c
  3253  0010E0  90D8               	bcf	status,0,c
  3254  0010E2  3212               	rrcf	??_classify_data+1,f,c
  3255  0010E4  3211               	rrcf	??_classify_data,f,c
  3256  0010E6  90D8               	bcf	status,0,c
  3257  0010E8  3212               	rrcf	??_classify_data+1,f,c
  3258  0010EA  3211               	rrcf	??_classify_data,f,c
  3259  0010EC  5041               	movf	classify_data@smoothed,w,c
  3260  0010EE  2411               	addwf	??_classify_data,w,c
  3261  0010F0  6E41               	movwf	classify_data@smoothed,c
  3262  0010F2  5042               	movf	classify_data@smoothed+1,w,c
  3263  0010F4  2012               	addwfc	??_classify_data+1,w,c
  3264  0010F6  6E42               	movwf	classify_data@smoothed+1,c
  3265                           
  3266                           ;signal_processing.c: 40:     unsigned int filtered = raw_data - smoothed;
  3267  0010F8  5041               	movf	classify_data@smoothed,w,c
  3268  0010FA  5C0F               	subwf	classify_data@raw_data,w,c
  3269  0010FC  6E13               	movwf	classify_data@filtered,c
  3270  0010FE  5042               	movf	classify_data@smoothed+1,w,c
  3271  001100  5810               	subwfb	classify_data@raw_data+1,w,c
  3272  001102  6E14               	movwf	classify_data@filtered+1,c
  3273                           
  3274                           ;signal_processing.c: 43:     if(filtered >= 100)
  3275  001104  5014               	movf	classify_data@filtered+1,w,c
  3276  001106  E104               	bnz	u1890
  3277  001108  0E64               	movlw	100
  3278  00110A  5C13               	subwf	classify_data@filtered,w,c
  3279  00110C  A0D8               	btfss	status,0,c
  3280  00110E  D002               	goto	l2584
  3281  001110                     u1890:
  3282                           
  3283                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  3284  001110  0E01               	movlw	1
  3285  001112  0012               	return	
  3286  001114                     l2584:
  3287                           
  3288                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  3289  001114  0E00               	movlw	0
  3290  001116  0012               	return		;funcret
  3291  001118                     __end_of_classify_data:
  3292                           	opt callstack 0
  3293                           
  3294 ;; *************** function _LCD_String *****************
  3295 ;; Defined at:
  3296 ;;		line 119 in file "LCDIO.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  string          2   18[COMRAM] PTR unsigned char 
  3299 ;;		 -> STR_12(16), STR_11(16), STR_10(13), debug@buf2(16), 
  3300 ;;		 -> debug@buf(16), STR_7(16), STR_6(15), STR_5(15), 
  3301 ;;		 -> STR_4(10), STR_3(16), STR_2(16), STR_1(15), 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3313 ;;      Params:         2       0       0       0
  3314 ;;      Locals:         0       0       0       0
  3315 ;;      Temps:          0       0       0       0
  3316 ;;      Totals:         2       0       0       0
  3317 ;;Total ram usage:        2 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    6
  3320 ;; This function calls:
  3321 ;;		_SendLCD
  3322 ;; This function is called by:
  3323 ;;		_main
  3324 ;;		_check_RFID
  3325 ;;		_scanForBeacon
  3326 ;;		_moveToBeacon
  3327 ;;		_returnHome
  3328 ;;		_stopAndDisplay
  3329 ;;		_waitForInput
  3330 ;;		_debug
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text20
  3335  000FCE                     __ptext20:
  3336                           	opt callstack 0
  3337  000FCE                     _LCD_String:
  3338                           	opt callstack 23
  3339                           
  3340                           ;LCDIO.c: 121: while(*string != 0){
  3341                           
  3342                           ;incstack = 0
  3343  000FCE  D01A               	goto	l2396
  3344  000FD0                     l2390:
  3345                           
  3346                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3347  000FD0  0E01               	movlw	1
  3348  000FD2  6E11               	movwf	SendLCD@type,c
  3349  000FD4  C013  FFF6         	movff	LCD_String@string,tblptrl
  3350  000FD8  C014  FFF7         	movff	LCD_String@string+1,tblptrh
  3351  000FDC  6AF8               	clrf	tblptru,c
  3352  000FDE  0E02               	movlw	(high __ramtop+-1)
  3353  000FE0  64F7               	cpfsgt	tblptrh,c
  3354  000FE2  D003               	bra	u1547
  3355  000FE4  0008               	tblrd		*
  3356  000FE6  50F5               	movf	tablat,w,c
  3357  000FE8  D005               	bra	u1540
  3358  000FEA                     u1547:
  3359  000FEA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3360  000FEE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3361  000FF2  50EF               	movf	indf0,w,c
  3362  000FF4                     u1540:
  3363  000FF4  ECE2  F008         	call	_SendLCD
  3364  000FF8  4A13               	infsnz	LCD_String@string,f,c
  3365  000FFA  2A14               	incf	LCD_String@string+1,f,c
  3366                           
  3367                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3368  000FFC  0E21               	movlw	33
  3369  000FFE                     u2287:
  3370  000FFE  2EE8               	decfsz	wreg,f,c
  3371  001000  D7FE               	bra	u2287
  3372  001002  F000               	nop	
  3373  001004                     l2396:
  3374                           
  3375                           ;LCDIO.c: 121: while(*string != 0){
  3376  001004  C013  FFF6         	movff	LCD_String@string,tblptrl
  3377  001008  C014  FFF7         	movff	LCD_String@string+1,tblptrh
  3378  00100C  6AF8               	clrf	tblptru,c
  3379  00100E  0E02               	movlw	(high __ramtop+-1)
  3380  001010  64F7               	cpfsgt	tblptrh,c
  3381  001012  D003               	bra	u1557
  3382  001014  0008               	tblrd		*
  3383  001016  50F5               	movf	tablat,w,c
  3384  001018  D005               	bra	u1550
  3385  00101A                     u1557:
  3386  00101A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3387  00101E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3388  001022  50EF               	movf	indf0,w,c
  3389  001024                     u1550:
  3390  001024  0900               	iorlw	0
  3391  001026  B4D8               	btfsc	status,2,c
  3392  001028  0012               	return	
  3393  00102A  D7D2               	goto	l2390
  3394  00102C                     __end_of_LCD_String:
  3395                           	opt callstack 0
  3396                           
  3397 ;; *************** function _ClearLCD *****************
  3398 ;; Defined at:
  3399 ;;		line 131 in file "LCDIO.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3413 ;;      Params:         0       0       0       0
  3414 ;;      Locals:         0       0       0       0
  3415 ;;      Temps:          1       0       0       0
  3416 ;;      Totals:         1       0       0       0
  3417 ;;Total ram usage:        1 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    6
  3420 ;; This function calls:
  3421 ;;		_SendLCD
  3422 ;; This function is called by:
  3423 ;;		_display_RFID
  3424 ;;		_scanForBeacon
  3425 ;;		_moveToBeacon
  3426 ;;		_returnHome
  3427 ;;		_stopAndDisplay
  3428 ;;		_waitForInput
  3429 ;;		_debug
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text21
  3434  0012A2                     __ptext21:
  3435                           	opt callstack 0
  3436  0012A2                     _ClearLCD:
  3437                           	opt callstack 23
  3438                           
  3439                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3440                           
  3441                           ;incstack = 0
  3442  0012A2  0E00               	movlw	0
  3443  0012A4  6E11               	movwf	SendLCD@type,c
  3444  0012A6  0E01               	movlw	1
  3445  0012A8  ECE2  F008         	call	_SendLCD
  3446                           
  3447                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3448  0012AC  0E0D               	movlw	13
  3449  0012AE  6E13               	movwf	??_ClearLCD& (0+255),c
  3450  0012B0  0EFC               	movlw	252
  3451  0012B2                     u2297:
  3452  0012B2  2EE8               	decfsz	wreg,f,c
  3453  0012B4  D7FE               	bra	u2297
  3454  0012B6  2E13               	decfsz	??_ClearLCD& (0+255),f,c
  3455  0012B8  D7FC               	bra	u2297
  3456  0012BA  0012               	return		;funcret
  3457  0012BC                     __end_of_ClearLCD:
  3458                           	opt callstack 0
  3459                           
  3460 ;; *************** function _SendLCD *****************
  3461 ;; Defined at:
  3462 ;;		line 44 in file "LCDIO.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  Byte            1    wreg     unsigned char 
  3465 ;;  type            1   16[COMRAM] unsigned char 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  Byte            1   17[COMRAM] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3477 ;;      Params:         1       0       0       0
  3478 ;;      Locals:         1       0       0       0
  3479 ;;      Temps:          0       0       0       0
  3480 ;;      Totals:         2       0       0       0
  3481 ;;Total ram usage:        2 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    5
  3484 ;; This function calls:
  3485 ;;		_LCDout
  3486 ;; This function is called by:
  3487 ;;		_init_LCD
  3488 ;;		_SetLine
  3489 ;;		_LCD_String
  3490 ;;		_ClearLCD
  3491 ;;		_display_RFID
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495                           	psect	text22
  3496  0011C4                     __ptext22:
  3497                           	opt callstack 0
  3498  0011C4                     _SendLCD:
  3499                           	opt callstack 23
  3500                           
  3501                           ;incstack = 0
  3502                           ;SendLCD@Byte stored from wreg
  3503  0011C4  6E12               	movwf	SendLCD@Byte,c
  3504                           
  3505                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3506  0011C6  B011               	btfsc	SendLCD@type,0,c
  3507  0011C8  D002               	bra	u1475
  3508  0011CA  9E89               	bcf	3977,7,c	;volatile
  3509  0011CC  D001               	bra	u1476
  3510  0011CE                     u1475:
  3511  0011CE  8E89               	bsf	3977,7,c	;volatile
  3512  0011D0                     u1476:
  3513                           
  3514                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3515  0011D0  3812               	swapf	SendLCD@Byte,w,c
  3516  0011D2  0B0F               	andlw	15
  3517  0011D4  0B0F               	andlw	15
  3518  0011D6  ECAB  F007         	call	_LCDout
  3519                           
  3520                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3521  0011DA  0E06               	movlw	6
  3522  0011DC                     u2307:
  3523  0011DC  2EE8               	decfsz	wreg,f,c
  3524  0011DE  D7FE               	bra	u2307
  3525  0011E0  D000               	nop2	
  3526                           
  3527                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3528  0011E2  5012               	movf	SendLCD@Byte,w,c
  3529  0011E4  0B0F               	andlw	15
  3530  0011E6  ECAB  F007         	call	_LCDout
  3531                           
  3532                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3533  0011EA  0E21               	movlw	33
  3534  0011EC                     u2317:
  3535  0011EC  2EE8               	decfsz	wreg,f,c
  3536  0011EE  D7FE               	bra	u2317
  3537  0011F0  F000               	nop	
  3538  0011F2  0012               	return		;funcret
  3539  0011F4                     __end_of_SendLCD:
  3540                           	opt callstack 0
  3541                           
  3542 ;; *************** function _LCDout *****************
  3543 ;; Defined at:
  3544 ;;		line 31 in file "LCDIO.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  number          1    wreg     unsigned char 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  number          1   15[COMRAM] unsigned char 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3558 ;;      Params:         0       0       0       0
  3559 ;;      Locals:         1       0       0       0
  3560 ;;      Temps:          1       0       0       0
  3561 ;;      Totals:         2       0       0       0
  3562 ;;Total ram usage:        2 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    4
  3565 ;; This function calls:
  3566 ;;		_E_TOG
  3567 ;; This function is called by:
  3568 ;;		_SendLCD
  3569 ;;		_init_LCD
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text23
  3574  000F56                     __ptext23:
  3575                           	opt callstack 0
  3576  000F56                     _LCDout:
  3577                           	opt callstack 23
  3578                           
  3579                           ;incstack = 0
  3580                           ;LCDout@number stored from wreg
  3581  000F56  6E10               	movwf	LCDout@number,c
  3582                           
  3583                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3584  000F58  C010  F00F         	movff	LCDout@number,??_LCDout
  3585  000F5C  0E01               	movlw	1
  3586  000F5E  160F               	andwf	??_LCDout,f,c
  3587  000F60  508B               	movf	3979,w,c	;volatile
  3588  000F62  180F               	xorwf	??_LCDout,w,c
  3589  000F64  0BFE               	andlw	-2
  3590  000F66  180F               	xorwf	??_LCDout,w,c
  3591  000F68  6E8B               	movwf	3979,c	;volatile
  3592                           
  3593                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3594  000F6A  C010  F00F         	movff	LCDout@number,??_LCDout
  3595  000F6E  90D8               	bcf	status,0,c
  3596  000F70  320F               	rrcf	??_LCDout,f,c
  3597  000F72  0E01               	movlw	1
  3598  000F74  160F               	andwf	??_LCDout,f,c
  3599  000F76  460F               	rlncf	??_LCDout,f,c
  3600  000F78  460F               	rlncf	??_LCDout,f,c
  3601  000F7A  460F               	rlncf	??_LCDout,f,c
  3602  000F7C  508B               	movf	3979,w,c	;volatile
  3603  000F7E  180F               	xorwf	??_LCDout,w,c
  3604  000F80  0BF7               	andlw	-9
  3605  000F82  180F               	xorwf	??_LCDout,w,c
  3606  000F84  6E8B               	movwf	3979,c	;volatile
  3607                           
  3608                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3609  000F86  C010  F00F         	movff	LCDout@number,??_LCDout
  3610  000F8A  90D8               	bcf	status,0,c
  3611  000F8C  320F               	rrcf	??_LCDout,f,c
  3612  000F8E  90D8               	bcf	status,0,c
  3613  000F90  320F               	rrcf	??_LCDout,f,c
  3614  000F92  0E01               	movlw	1
  3615  000F94  160F               	andwf	??_LCDout,f,c
  3616  000F96  508C               	movf	3980,w,c	;volatile
  3617  000F98  180F               	xorwf	??_LCDout,w,c
  3618  000F9A  0BFE               	andlw	-2
  3619  000F9C  180F               	xorwf	??_LCDout,w,c
  3620  000F9E  6E8C               	movwf	3980,c	;volatile
  3621                           
  3622                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3623  000FA0  C010  F00F         	movff	LCDout@number,??_LCDout
  3624  000FA4  90D8               	bcf	status,0,c
  3625  000FA6  320F               	rrcf	??_LCDout,f,c
  3626  000FA8  90D8               	bcf	status,0,c
  3627  000FAA  320F               	rrcf	??_LCDout,f,c
  3628  000FAC  90D8               	bcf	status,0,c
  3629  000FAE  320F               	rrcf	??_LCDout,f,c
  3630  000FB0  0E01               	movlw	1
  3631  000FB2  160F               	andwf	??_LCDout,f,c
  3632  000FB4  460F               	rlncf	??_LCDout,f,c
  3633  000FB6  508C               	movf	3980,w,c	;volatile
  3634  000FB8  180F               	xorwf	??_LCDout,w,c
  3635  000FBA  0BFD               	andlw	-3
  3636  000FBC  180F               	xorwf	??_LCDout,w,c
  3637  000FBE  6E8C               	movwf	3980,c	;volatile
  3638                           
  3639                           ;LCDIO.c: 39:  E_TOG();
  3640  000FC0  EC6A  F009         	call	_E_TOG	;wreg free
  3641                           
  3642                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3643  000FC4  0E03               	movlw	3
  3644  000FC6                     u2327:
  3645  000FC6  2EE8               	decfsz	wreg,f,c
  3646  000FC8  D7FE               	bra	u2327
  3647  000FCA  F000               	nop	
  3648  000FCC  0012               	return		;funcret
  3649  000FCE                     __end_of_LCDout:
  3650                           	opt callstack 0
  3651                           
  3652 ;; *************** function _E_TOG *****************
  3653 ;; Defined at:
  3654 ;;		line 23 in file "LCDIO.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3668 ;;      Params:         0       0       0       0
  3669 ;;      Locals:         0       0       0       0
  3670 ;;      Temps:          0       0       0       0
  3671 ;;      Totals:         0       0       0       0
  3672 ;;Total ram usage:        0 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    3
  3675 ;; This function calls:
  3676 ;;		Nothing
  3677 ;; This function is called by:
  3678 ;;		_LCDout
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text24
  3683  0012D4                     __ptext24:
  3684                           	opt callstack 0
  3685  0012D4                     _E_TOG:
  3686                           	opt callstack 23
  3687                           
  3688                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3689                           
  3690                           ;incstack = 0
  3691  0012D4  8C89               	bsf	3977,6,c	;volatile
  3692                           
  3693                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3694  0012D6  0E03               	movlw	3
  3695  0012D8                     u2337:
  3696  0012D8  2EE8               	decfsz	wreg,f,c
  3697  0012DA  D7FE               	bra	u2337
  3698  0012DC  F000               	nop	
  3699                           
  3700                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3701  0012DE  9C89               	bcf	3977,6,c	;volatile
  3702  0012E0  0012               	return		;funcret
  3703  0012E2                     __end_of_E_TOG:
  3704                           	opt callstack 0
  3705                           
  3706 ;; *************** function _init_motor_struct *****************
  3707 ;; Defined at:
  3708 ;;		line 115 in file "dc_motor.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3711 ;;		 -> main@motorL(9), 
  3712 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3713 ;;		 -> main@motorR(9), 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3725 ;;      Params:         4       0       0       0
  3726 ;;      Locals:         0       0       0       0
  3727 ;;      Temps:          0       0       0       0
  3728 ;;      Totals:         4       0       0       0
  3729 ;;Total ram usage:        4 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    5
  3732 ;; This function calls:
  3733 ;;		_setMotorPWM
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text25
  3740  00086E                     __ptext25:
  3741                           	opt callstack 0
  3742  00086E                     _init_motor_struct:
  3743                           	opt callstack 25
  3744                           
  3745                           ;dc_motor.c: 115: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 116: {;dc_motor.c: 118: mL->power = 0;
  3746                           
  3747                           ;incstack = 0
  3748  00086E  C026  FFD9         	movff	init_motor_struct@mL,fsr2l
  3749  000872  C027  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3750  000876  0E00               	movlw	0
  3751  000878  6EDF               	movwf	indf2,c
  3752                           
  3753                           ;dc_motor.c: 119: mL->direction = 1;
  3754  00087A  EE20 F001          	lfsr	2,1
  3755  00087E  5026               	movf	init_motor_struct@mL,w,c
  3756  000880  26D9               	addwf	fsr2l,f,c
  3757  000882  5027               	movf	init_motor_struct@mL+1,w,c
  3758  000884  22DA               	addwfc	fsr2h,f,c
  3759  000886  0E01               	movlw	1
  3760  000888  6EDF               	movwf	indf2,c
  3761                           
  3762                           ;dc_motor.c: 120: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3763  00088A  EE20 F002          	lfsr	2,2
  3764  00088E  5026               	movf	init_motor_struct@mL,w,c
  3765  000890  26D9               	addwf	fsr2l,f,c
  3766  000892  5027               	movf	init_motor_struct@mL+1,w,c
  3767  000894  22DA               	addwfc	fsr2h,f,c
  3768  000896  0E79               	movlw	121
  3769  000898  6EDE               	movwf	postinc2,c
  3770  00089A  0E0F               	movlw	15
  3771  00089C  6EDD               	movwf	postdec2,c
  3772                           
  3773                           ;dc_motor.c: 121: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3774  00089E  EE20 F004          	lfsr	2,4
  3775  0008A2  5026               	movf	init_motor_struct@mL,w,c
  3776  0008A4  26D9               	addwf	fsr2l,f,c
  3777  0008A6  5027               	movf	init_motor_struct@mL+1,w,c
  3778  0008A8  22DA               	addwfc	fsr2h,f,c
  3779  0008AA  0E78               	movlw	120
  3780  0008AC  6EDE               	movwf	postinc2,c
  3781  0008AE  0E0F               	movlw	15
  3782  0008B0  6EDD               	movwf	postdec2,c
  3783                           
  3784                           ;dc_motor.c: 122: mL->dir_pin=0;
  3785  0008B2  EE20 F006          	lfsr	2,6
  3786  0008B6  5026               	movf	init_motor_struct@mL,w,c
  3787  0008B8  26D9               	addwf	fsr2l,f,c
  3788  0008BA  5027               	movf	init_motor_struct@mL+1,w,c
  3789  0008BC  22DA               	addwfc	fsr2h,f,c
  3790  0008BE  0E00               	movlw	0
  3791  0008C0  6EDF               	movwf	indf2,c
  3792                           
  3793                           ;dc_motor.c: 123: mL->PWMperiod=199;
  3794  0008C2  EE20 F007          	lfsr	2,7
  3795  0008C6  5026               	movf	init_motor_struct@mL,w,c
  3796  0008C8  26D9               	addwf	fsr2l,f,c
  3797  0008CA  5027               	movf	init_motor_struct@mL+1,w,c
  3798  0008CC  22DA               	addwfc	fsr2h,f,c
  3799  0008CE  0EC7               	movlw	199
  3800  0008D0  6EDE               	movwf	postinc2,c
  3801  0008D2  0E00               	movlw	0
  3802  0008D4  6EDD               	movwf	postdec2,c
  3803                           
  3804                           ;dc_motor.c: 125: mR->power = 0;
  3805  0008D6  C028  FFD9         	movff	init_motor_struct@mR,fsr2l
  3806  0008DA  C029  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3807  0008DE  0E00               	movlw	0
  3808  0008E0  6EDF               	movwf	indf2,c
  3809                           
  3810                           ;dc_motor.c: 126: mR->direction = 1;
  3811  0008E2  EE20 F001          	lfsr	2,1
  3812  0008E6  5028               	movf	init_motor_struct@mR,w,c
  3813  0008E8  26D9               	addwf	fsr2l,f,c
  3814  0008EA  5029               	movf	init_motor_struct@mR+1,w,c
  3815  0008EC  22DA               	addwfc	fsr2h,f,c
  3816  0008EE  0E01               	movlw	1
  3817  0008F0  6EDF               	movwf	indf2,c
  3818                           
  3819                           ;dc_motor.c: 127: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3820  0008F2  EE20 F002          	lfsr	2,2
  3821  0008F6  5028               	movf	init_motor_struct@mR,w,c
  3822  0008F8  26D9               	addwf	fsr2l,f,c
  3823  0008FA  5029               	movf	init_motor_struct@mR+1,w,c
  3824  0008FC  22DA               	addwfc	fsr2h,f,c
  3825  0008FE  0E77               	movlw	119
  3826  000900  6EDE               	movwf	postinc2,c
  3827  000902  0E0F               	movlw	15
  3828  000904  6EDD               	movwf	postdec2,c
  3829                           
  3830                           ;dc_motor.c: 128: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3831  000906  EE20 F004          	lfsr	2,4
  3832  00090A  5028               	movf	init_motor_struct@mR,w,c
  3833  00090C  26D9               	addwf	fsr2l,f,c
  3834  00090E  5029               	movf	init_motor_struct@mR+1,w,c
  3835  000910  22DA               	addwfc	fsr2h,f,c
  3836  000912  0E76               	movlw	118
  3837  000914  6EDE               	movwf	postinc2,c
  3838  000916  0E0F               	movlw	15
  3839  000918  6EDD               	movwf	postdec2,c
  3840                           
  3841                           ;dc_motor.c: 129: mR->dir_pin=2;
  3842  00091A  EE20 F006          	lfsr	2,6
  3843  00091E  5028               	movf	init_motor_struct@mR,w,c
  3844  000920  26D9               	addwf	fsr2l,f,c
  3845  000922  5029               	movf	init_motor_struct@mR+1,w,c
  3846  000924  22DA               	addwfc	fsr2h,f,c
  3847  000926  0E02               	movlw	2
  3848  000928  6EDF               	movwf	indf2,c
  3849                           
  3850                           ;dc_motor.c: 130: mR->PWMperiod=199;
  3851  00092A  EE20 F007          	lfsr	2,7
  3852  00092E  5028               	movf	init_motor_struct@mR,w,c
  3853  000930  26D9               	addwf	fsr2l,f,c
  3854  000932  5029               	movf	init_motor_struct@mR+1,w,c
  3855  000934  22DA               	addwfc	fsr2h,f,c
  3856  000936  0EC7               	movlw	199
  3857  000938  6EDE               	movwf	postinc2,c
  3858  00093A  0E00               	movlw	0
  3859  00093C  6EDD               	movwf	postdec2,c
  3860                           
  3861                           ;dc_motor.c: 132: setMotorPWM(mL);
  3862  00093E  C026  F01D         	movff	init_motor_struct@mL,setMotorPWM@m
  3863  000942  C027  F01E         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3864  000946  EC22  F003         	call	_setMotorPWM	;wreg free
  3865                           
  3866                           ;dc_motor.c: 133: setMotorPWM(mR);
  3867  00094A  C028  F01D         	movff	init_motor_struct@mR,setMotorPWM@m
  3868  00094E  C029  F01E         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3869  000952  EC22  F003         	call	_setMotorPWM	;wreg free
  3870  000956  0012               	return		;funcret
  3871  000958                     __end_of_init_motor_struct:
  3872                           	opt callstack 0
  3873                           
  3874 ;; *************** function _setMotorPWM *****************
  3875 ;; Defined at:
  3876 ;;		line 18 in file "dc_motor.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  m               2   28[COMRAM] PTR struct DC_motor
  3879 ;;		 -> main@motorR(9), main@motorL(9), 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  PWMduty         2   35[COMRAM] int 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3891 ;;      Params:         2       0       0       0
  3892 ;;      Locals:         2       0       0       0
  3893 ;;      Temps:          5       0       0       0
  3894 ;;      Totals:         9       0       0       0
  3895 ;;Total ram usage:        9 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    4
  3898 ;; This function calls:
  3899 ;;		___awdiv
  3900 ;;		___wmul
  3901 ;; This function is called by:
  3902 ;;		_stop
  3903 ;;		_turnLeft
  3904 ;;		_turnRight
  3905 ;;		_moveForward
  3906 ;;		_moveBackward
  3907 ;;		_init_motor_struct
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text26
  3912  000644                     __ptext26:
  3913                           	opt callstack 0
  3914  000644                     _setMotorPWM:
  3915                           	opt callstack 24
  3916                           
  3917                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3918                           
  3919                           ;incstack = 0
  3920  000644  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  3921  000648  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3922  00064C  50DF               	movf	indf2,w,c
  3923  00064E  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3924  000650  501F               	movf	??_setMotorPWM,w,c
  3925  000652  6E0F               	movwf	___wmul@multiplier,c
  3926  000654  6A10               	clrf	___wmul@multiplier+1,c
  3927  000656  EE20 F007          	lfsr	2,7
  3928  00065A  501D               	movf	setMotorPWM@m,w,c
  3929  00065C  26D9               	addwf	fsr2l,f,c
  3930  00065E  501E               	movf	setMotorPWM@m+1,w,c
  3931  000660  22DA               	addwfc	fsr2h,f,c
  3932  000662  CFDE F011          	movff	postinc2,___wmul@multiplicand
  3933  000666  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  3934  00066A  EC24  F009         	call	___wmul	;wreg free
  3935  00066E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  3936  000672  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  3937  000676  0E00               	movlw	0
  3938  000678  6E18               	movwf	___awdiv@divisor+1,c
  3939  00067A  0E64               	movlw	100
  3940  00067C  6E17               	movwf	___awdiv@divisor,c
  3941  00067E  EC65  F006         	call	___awdiv	;wreg free
  3942  000682  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  3943  000686  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3944                           
  3945                           ;dc_motor.c: 24:     if (m->direction)
  3946  00068A  EE20 F001          	lfsr	2,1
  3947  00068E  501D               	movf	setMotorPWM@m,w,c
  3948  000690  26D9               	addwf	fsr2l,f,c
  3949  000692  501E               	movf	setMotorPWM@m+1,w,c
  3950  000694  22DA               	addwfc	fsr2h,f,c
  3951  000696  50DF               	movf	indf2,w,c
  3952  000698  B4D8               	btfsc	status,2,c
  3953  00069A  D024               	goto	l2404
  3954                           
  3955                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3956  00069C  EE20 F006          	lfsr	2,6
  3957  0006A0  501D               	movf	setMotorPWM@m,w,c
  3958  0006A2  26D9               	addwf	fsr2l,f,c
  3959  0006A4  501E               	movf	setMotorPWM@m+1,w,c
  3960  0006A6  22DA               	addwfc	fsr2h,f,c
  3961  0006A8  50DF               	movf	indf2,w,c
  3962  0006AA  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3963  0006AC  0E01               	movlw	1
  3964  0006AE  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3965  0006B0  2A1F               	incf	??_setMotorPWM,f,c
  3966  0006B2  D002               	goto	u1584
  3967  0006B4                     u1585:
  3968  0006B4  90D8               	bcf	status,0,c
  3969  0006B6  3620               	rlcf	??_setMotorPWM+1,f,c
  3970  0006B8                     u1584:
  3971  0006B8  2E1F               	decfsz	??_setMotorPWM,f,c
  3972  0006BA  D7FC               	goto	u1585
  3973  0006BC  5020               	movf	??_setMotorPWM+1,w,c
  3974  0006BE  108A               	iorwf	3978,w,c	;volatile
  3975  0006C0  6E8A               	movwf	3978,c	;volatile
  3976                           
  3977                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3978  0006C2  EE20 F007          	lfsr	2,7
  3979  0006C6  501D               	movf	setMotorPWM@m,w,c
  3980  0006C8  26D9               	addwf	fsr2l,f,c
  3981  0006CA  501E               	movf	setMotorPWM@m+1,w,c
  3982  0006CC  22DA               	addwfc	fsr2h,f,c
  3983  0006CE  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3984  0006D2  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3985  0006D6  5024               	movf	setMotorPWM@PWMduty,w,c
  3986  0006D8  5C1F               	subwf	??_setMotorPWM,w,c
  3987  0006DA  6E24               	movwf	setMotorPWM@PWMduty,c
  3988  0006DC  5025               	movf	setMotorPWM@PWMduty+1,w,c
  3989  0006DE  5820               	subwfb	??_setMotorPWM+1,w,c
  3990  0006E0  6E25               	movwf	setMotorPWM@PWMduty+1,c
  3991                           
  3992                           ;dc_motor.c: 28:     }
  3993  0006E2  D014               	goto	l123
  3994  0006E4                     l2404:
  3995                           
  3996                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3997  0006E4  EE20 F006          	lfsr	2,6
  3998  0006E8  501D               	movf	setMotorPWM@m,w,c
  3999  0006EA  26D9               	addwf	fsr2l,f,c
  4000  0006EC  501E               	movf	setMotorPWM@m+1,w,c
  4001  0006EE  22DA               	addwfc	fsr2h,f,c
  4002  0006F0  50DF               	movf	indf2,w,c
  4003  0006F2  6E1F               	movwf	??_setMotorPWM& (0+255),c
  4004  0006F4  0E01               	movlw	1
  4005  0006F6  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  4006  0006F8  2A1F               	incf	??_setMotorPWM,f,c
  4007  0006FA  D002               	goto	u1594
  4008  0006FC                     u1595:
  4009  0006FC  90D8               	bcf	status,0,c
  4010  0006FE  3620               	rlcf	??_setMotorPWM+1,f,c
  4011  000700                     u1594:
  4012  000700  2E1F               	decfsz	??_setMotorPWM,f,c
  4013  000702  D7FC               	goto	u1595
  4014  000704  5020               	movf	??_setMotorPWM+1,w,c
  4015  000706  0AFF               	xorlw	255
  4016  000708  148A               	andwf	3978,w,c	;volatile
  4017  00070A  6E8A               	movwf	3978,c	;volatile
  4018  00070C                     l123:
  4019                           
  4020                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  4021  00070C  EE20 F002          	lfsr	2,2
  4022  000710  501D               	movf	setMotorPWM@m,w,c
  4023  000712  26D9               	addwf	fsr2l,f,c
  4024  000714  501E               	movf	setMotorPWM@m+1,w,c
  4025  000716  22DA               	addwfc	fsr2h,f,c
  4026  000718  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4027  00071C  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4028  000720  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4029  000724  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4030  000728  4424               	rlncf	setMotorPWM@PWMduty,w,c
  4031  00072A  46E8               	rlncf	wreg,f,c
  4032  00072C  0BFC               	andlw	252
  4033  00072E  6EDF               	movwf	indf2,c
  4034                           
  4035                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  4036  000730  EE20 F004          	lfsr	2,4
  4037  000734  501D               	movf	setMotorPWM@m,w,c
  4038  000736  26D9               	addwf	fsr2l,f,c
  4039  000738  501E               	movf	setMotorPWM@m+1,w,c
  4040  00073A  22DA               	addwfc	fsr2h,f,c
  4041  00073C  CFDE F01F          	movff	postinc2,??_setMotorPWM
  4042  000740  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  4043  000744  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  4044  000748  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4045  00074C  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4046  000750  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4047  000754  0E06               	movlw	6
  4048  000756  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  4049  000758                     u1605:
  4050  000758  3422               	rlcf	??_setMotorPWM+3,w,c
  4051  00075A  3222               	rrcf	??_setMotorPWM+3,f,c
  4052  00075C  3221               	rrcf	??_setMotorPWM+2,f,c
  4053  00075E  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4054  000760  D7FB               	goto	u1605
  4055  000762  5021               	movf	??_setMotorPWM+2,w,c
  4056  000764  6EDF               	movwf	indf2,c
  4057  000766  0012               	return		;funcret
  4058  000768                     __end_of_setMotorPWM:
  4059                           	opt callstack 0
  4060                           
  4061 ;; *************** function ___wmul *****************
  4062 ;; Defined at:
  4063 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;  multiplier      2   14[COMRAM] unsigned int 
  4066 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  product         2   18[COMRAM] unsigned int 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  2   14[COMRAM] unsigned int 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0, prodl, prodh
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4078 ;;      Params:         4       0       0       0
  4079 ;;      Locals:         2       0       0       0
  4080 ;;      Temps:          0       0       0       0
  4081 ;;      Totals:         6       0       0       0
  4082 ;;Total ram usage:        6 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    3
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_setMotorPWM
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text27
  4093  001248                     __ptext27:
  4094                           	opt callstack 0
  4095  001248                     ___wmul:
  4096                           	opt callstack 24
  4097                           
  4098                           ;incstack = 0
  4099  001248  500F               	movf	___wmul@multiplier,w,c
  4100  00124A  0211               	mulwf	___wmul@multiplicand,c
  4101  00124C  CFF3 F013          	movff	prodl,___wmul@product
  4102  001250  CFF4 F014          	movff	prodh,___wmul@product+1
  4103  001254  500F               	movf	___wmul@multiplier,w,c
  4104  001256  0212               	mulwf	___wmul@multiplicand+1,c
  4105  001258  50F3               	movf	prodl,w,c
  4106  00125A  2614               	addwf	___wmul@product+1,f,c
  4107  00125C  5010               	movf	___wmul@multiplier+1,w,c
  4108  00125E  0211               	mulwf	___wmul@multiplicand,c
  4109  001260  50F3               	movf	prodl,w,c
  4110  001262  2614               	addwf	___wmul@product+1,f,c
  4111  001264  C013  F00F         	movff	___wmul@product,?___wmul
  4112  001268  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4113  00126C  0012               	return		;funcret
  4114  00126E                     __end_of___wmul:
  4115                           	opt callstack 0
  4116                           
  4117 ;; *************** function ___awdiv *****************
  4118 ;; Defined at:
  4119 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  dividend        2   20[COMRAM] int 
  4122 ;;  divisor         2   22[COMRAM] int 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  quotient        2   26[COMRAM] int 
  4125 ;;  sign            1   25[COMRAM] unsigned char 
  4126 ;;  counter         1   24[COMRAM] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  2   20[COMRAM] int 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4136 ;;      Params:         4       0       0       0
  4137 ;;      Locals:         4       0       0       0
  4138 ;;      Temps:          0       0       0       0
  4139 ;;      Totals:         8       0       0       0
  4140 ;;Total ram usage:        8 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    3
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_setMotorPWM
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text28
  4151  000CCA                     __ptext28:
  4152                           	opt callstack 0
  4153  000CCA                     ___awdiv:
  4154                           	opt callstack 24
  4155                           
  4156                           ;incstack = 0
  4157  000CCA  0E00               	movlw	0
  4158  000CCC  6E1A               	movwf	___awdiv@sign,c
  4159  000CCE  AE18               	btfss	___awdiv@divisor+1,7,c
  4160  000CD0  D006               	goto	l2352
  4161  000CD2  6C17               	negf	___awdiv@divisor,c
  4162  000CD4  1E18               	comf	___awdiv@divisor+1,f,c
  4163  000CD6  B0D8               	btfsc	status,0,c
  4164  000CD8  2A18               	incf	___awdiv@divisor+1,f,c
  4165  000CDA  0E01               	movlw	1
  4166  000CDC  6E1A               	movwf	___awdiv@sign,c
  4167  000CDE                     l2352:
  4168  000CDE  AE16               	btfss	___awdiv@dividend+1,7,c
  4169  000CE0  D006               	goto	l2358
  4170  000CE2  6C15               	negf	___awdiv@dividend,c
  4171  000CE4  1E16               	comf	___awdiv@dividend+1,f,c
  4172  000CE6  B0D8               	btfsc	status,0,c
  4173  000CE8  2A16               	incf	___awdiv@dividend+1,f,c
  4174  000CEA  0E01               	movlw	1
  4175  000CEC  1A1A               	xorwf	___awdiv@sign,f,c
  4176  000CEE                     l2358:
  4177  000CEE  0E00               	movlw	0
  4178  000CF0  6E1C               	movwf	___awdiv@quotient+1,c
  4179  000CF2  0E00               	movlw	0
  4180  000CF4  6E1B               	movwf	___awdiv@quotient,c
  4181  000CF6  5017               	movf	___awdiv@divisor,w,c
  4182  000CF8  1018               	iorwf	___awdiv@divisor+1,w,c
  4183  000CFA  B4D8               	btfsc	status,2,c
  4184  000CFC  D01C               	goto	l2380
  4185  000CFE  0E01               	movlw	1
  4186  000D00  6E19               	movwf	___awdiv@counter,c
  4187  000D02  D004               	goto	l2366
  4188  000D04                     l2364:
  4189  000D04  90D8               	bcf	status,0,c
  4190  000D06  3617               	rlcf	___awdiv@divisor,f,c
  4191  000D08  3618               	rlcf	___awdiv@divisor+1,f,c
  4192  000D0A  2A19               	incf	___awdiv@counter,f,c
  4193  000D0C                     l2366:
  4194  000D0C  AE18               	btfss	___awdiv@divisor+1,7,c
  4195  000D0E  D7FA               	goto	l2364
  4196  000D10                     u1510:
  4197  000D10  90D8               	bcf	status,0,c
  4198  000D12  361B               	rlcf	___awdiv@quotient,f,c
  4199  000D14  361C               	rlcf	___awdiv@quotient+1,f,c
  4200  000D16  5017               	movf	___awdiv@divisor,w,c
  4201  000D18  5C15               	subwf	___awdiv@dividend,w,c
  4202  000D1A  5018               	movf	___awdiv@divisor+1,w,c
  4203  000D1C  5816               	subwfb	___awdiv@dividend+1,w,c
  4204  000D1E  A0D8               	btfss	status,0,c
  4205  000D20  D005               	goto	l2376
  4206  000D22  5017               	movf	___awdiv@divisor,w,c
  4207  000D24  5E15               	subwf	___awdiv@dividend,f,c
  4208  000D26  5018               	movf	___awdiv@divisor+1,w,c
  4209  000D28  5A16               	subwfb	___awdiv@dividend+1,f,c
  4210  000D2A  801B               	bsf	___awdiv@quotient,0,c
  4211  000D2C                     l2376:
  4212  000D2C  90D8               	bcf	status,0,c
  4213  000D2E  3218               	rrcf	___awdiv@divisor+1,f,c
  4214  000D30  3217               	rrcf	___awdiv@divisor,f,c
  4215  000D32  2E19               	decfsz	___awdiv@counter,f,c
  4216  000D34  D7ED               	goto	u1510
  4217  000D36                     l2380:
  4218  000D36  501A               	movf	___awdiv@sign,w,c
  4219  000D38  B4D8               	btfsc	status,2,c
  4220  000D3A  D004               	goto	l2384
  4221  000D3C  6C1B               	negf	___awdiv@quotient,c
  4222  000D3E  1E1C               	comf	___awdiv@quotient+1,f,c
  4223  000D40  B0D8               	btfsc	status,0,c
  4224  000D42  2A1C               	incf	___awdiv@quotient+1,f,c
  4225  000D44                     l2384:
  4226  000D44  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4227  000D48  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4228  000D4C  0012               	return		;funcret
  4229  000D4E                     __end_of___awdiv:
  4230                           	opt callstack 0
  4231                           
  4232 ;; *************** function _InterruptHandlerLow *****************
  4233 ;; Defined at:
  4234 ;;		line 94 in file "main.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4248 ;;      Params:         0       0       0       0
  4249 ;;      Locals:         0       0       0       0
  4250 ;;      Temps:          7       0       0       0
  4251 ;;      Totals:         7       0       0       0
  4252 ;;Total ram usage:        7 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    2
  4255 ;; This function calls:
  4256 ;;		Nothing
  4257 ;; This function is called by:
  4258 ;;		Interrupt level 1
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	intcodelo
  4263  000018                     __pintcodelo:
  4264                           	opt callstack 0
  4265  000018                     _InterruptHandlerLow:
  4266                           	opt callstack 22
  4267                           
  4268                           ;incstack = 0
  4269  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4270  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  4271  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  4272  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  4273  000026  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerLow+3
  4274  00002A  CFDA F00C          	movff	fsr2h,??_InterruptHandlerLow+4
  4275  00002E  CFF3 F00D          	movff	prodl,??_InterruptHandlerLow+5
  4276  000032  CFF4 F00E          	movff	prodh,??_InterruptHandlerLow+6
  4277                           
  4278                           ;main.c: 97:     if((INTCONbits.TMR0IF) && ((robot_mode == 1) || (robot_mode == 0)))
  4279  000036  A4F2               	btfss	4082,2,c	;volatile
  4280  000038  D013               	goto	i1l70
  4281  00003A  0444               	decf	_robot_mode,w,c	;volatile
  4282  00003C  B4D8               	btfsc	status,2,c
  4283  00003E  D003               	goto	i1u140_20
  4284  000040  5044               	movf	_robot_mode,w,c	;volatile
  4285  000042  A4D8               	btfss	status,2,c
  4286  000044  D00D               	goto	i1l70
  4287  000046                     i1u140_20:
  4288                           
  4289                           ;main.c: 98:     {;main.c: 100:         travel_moves.time_taken[travel_moves.move_number
      +                          ] += 1;
  4290  000046  0100               	movlb	0	; () banked
  4291  000048  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4292  00004A  0D02               	mullw	2
  4293  00004C  0E74               	movlw	low (_travel_moves+20)
  4294  00004E  24F3               	addwf	prodl,w,c
  4295  000050  6ED9               	movwf	fsr2l,c
  4296  000052  0E00               	movlw	high (_travel_moves+20)
  4297  000054  20F4               	addwfc	prodh,w,c
  4298  000056  6EDA               	movwf	fsr2h,c
  4299  000058  2ADE               	incf	postinc2,f,c
  4300  00005A  0E00               	movlw	0
  4301  00005C  22DD               	addwfc	postdec2,f,c
  4302  00005E  D012               	goto	i1l2270
  4303  000060                     i1l70:
  4304  000060  A4F2               	btfss	4082,2,c	;volatile
  4305  000062  D010               	goto	i1l2270
  4306  000064  0E02               	movlw	2
  4307  000066  1844               	xorwf	_robot_mode,w,c	;volatile
  4308  000068  A4D8               	btfss	status,2,c
  4309  00006A  D00C               	goto	i1l2270
  4310                           
  4311                           ;main.c: 105:     {;main.c: 106:         travel_moves.time_taken[travel_moves.move_numbe
      +                          r] -= 1;
  4312  00006C  0100               	movlb	0	; () banked
  4313  00006E  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4314  000070  0D02               	mullw	2
  4315  000072  0E74               	movlw	low (_travel_moves+20)
  4316  000074  24F3               	addwf	prodl,w,c
  4317  000076  6ED9               	movwf	fsr2l,c
  4318  000078  0E00               	movlw	high (_travel_moves+20)
  4319  00007A  20F4               	addwfc	prodh,w,c
  4320  00007C  6EDA               	movwf	fsr2h,c
  4321  00007E  06DE               	decf	postinc2,f,c
  4322  000080  0E00               	movlw	0
  4323  000082  5ADD               	subwfb	postdec2,f,c
  4324  000084                     i1l2270:
  4325                           
  4326                           ;main.c: 111:     {;main.c: 112:         INTCONbits.TMR0IF = 0;
  4327                           
  4328                           ;main.c: 110:     else
  4329                           
  4330                           ;main.c: 108:     }
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;main.c: 107:         INTCONbits.TMR0IF = 0;
  4334  000084  94F2               	bcf	4082,2,c	;volatile
  4335  000086  C00E  FFF4         	movff	??_InterruptHandlerLow+6,prodh
  4336  00008A  C00D  FFF3         	movff	??_InterruptHandlerLow+5,prodl
  4337  00008E  C00C  FFDA         	movff	??_InterruptHandlerLow+4,fsr2h
  4338  000092  C00B  FFD9         	movff	??_InterruptHandlerLow+3,fsr2l
  4339  000096  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4340  00009A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4341  00009E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  4342  0000A2  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4343  0000A4  0010               	retfie	
  4344  0000A6                     __end_of_InterruptHandlerLow:
  4345                           	opt callstack 0
  4346                           
  4347 ;; *************** function _InterruptHandlerHigh *****************
  4348 ;; Defined at:
  4349 ;;		line 76 in file "main.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  throwaway       1    0        unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4363 ;;      Params:         0       0       0       0
  4364 ;;      Locals:         1       0       0       0
  4365 ;;      Temps:          2       0       0       0
  4366 ;;      Totals:         3       0       0       0
  4367 ;;Total ram usage:        3 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    1
  4370 ;; This function calls:
  4371 ;;		_processRFID
  4372 ;; This function is called by:
  4373 ;;		Interrupt level 2
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	intcode
  4378  000008                     __pintcode:
  4379                           	opt callstack 0
  4380  000008                     _InterruptHandlerHigh:
  4381                           	opt callstack 22
  4382                           
  4383                           ;incstack = 0
  4384  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4385  00000A  EFC7  F008         	goto	int_func
  4386                           
  4387                           	psect	intcode_body
  4388  00118E                     __pintcode_body:
  4389                           	opt callstack 22
  4390  00118E                     int_func:
  4391                           	opt callstack 22
  4392  00118E  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4393  001192  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4394                           
  4395                           ;main.c: 80:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4396  001196  AA9E               	btfss	3998,5,c	;volatile
  4397  001198  D00E               	goto	i2l63
  4398  00119A  0444               	decf	_robot_mode,w,c	;volatile
  4399  00119C  A4D8               	btfss	status,2,c
  4400  00119E  D00B               	goto	i2l63
  4401                           
  4402                           ;main.c: 81:     {;main.c: 83:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4403  0011A0  0E45               	movlw	low _RFIDbuf
  4404  0011A2  6E01               	movwf	processRFID@RFIDbuf,c
  4405  0011A4  0E00               	movlw	high _RFIDbuf
  4406  0011A6  6E02               	movwf	processRFID@RFIDbuf+1,c
  4407  0011A8  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4408  0011AC  EC44  F008         	call	_processRFID	;wreg free
  4409  0011B0  0100               	movlb	0	; () banked
  4410  0011B2  6FBD               	movwf	_RFID_flag& (0+255),b	;volatile
  4411                           
  4412                           ;main.c: 84:     }
  4413  0011B4  D001               	goto	i2l65
  4414  0011B6                     i2l63:
  4415  0011B6  50AE               	movf	4014,w,c	;volatile
  4416  0011B8                     i2l65:
  4417  0011B8  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4418  0011BC  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4419  0011C0  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4420  0011C2  0011               	retfie		f
  4421  0011C4                     __end_of_InterruptHandlerHigh:
  4422                           	opt callstack 0
  4423                           
  4424 ;; *************** function _processRFID *****************
  4425 ;; Defined at:
  4426 ;;		line 34 in file "RFID.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4429 ;;		 -> RFIDbuf(12), 
  4430 ;;  latestChar      1    2[COMRAM] unsigned char 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  i               1    3[COMRAM] unsigned char 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      unsigned char 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4442 ;;      Params:         3       0       0       0
  4443 ;;      Locals:         1       0       0       0
  4444 ;;      Temps:          0       0       0       0
  4445 ;;      Totals:         4       0       0       0
  4446 ;;Total ram usage:        4 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; This function calls:
  4449 ;;		Nothing
  4450 ;; This function is called by:
  4451 ;;		_InterruptHandlerHigh
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text31
  4456  001088                     __ptext31:
  4457                           	opt callstack 0
  4458  001088                     _processRFID:
  4459                           	opt callstack 22
  4460                           
  4461                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4462                           
  4463                           ;incstack = 0
  4464  001088  0E03               	movlw	3
  4465  00108A  1803               	xorwf	processRFID@latestChar,w,c
  4466  00108C  A4D8               	btfss	status,2,c
  4467  00108E  D002               	goto	i2l2054
  4468                           
  4469                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4470  001090  0E01               	movlw	1
  4471  001092  0012               	return	
  4472  001094                     i2l2054:
  4473                           
  4474                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4475  001094  0E02               	movlw	2
  4476  001096  1803               	xorwf	processRFID@latestChar,w,c
  4477  001098  A4D8               	btfss	status,2,c
  4478  00109A  D012               	goto	i2l2074
  4479                           
  4480                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4481  00109C  0E00               	movlw	0
  4482  00109E  6E43               	movwf	processRFID@position_in_buf,c
  4483                           
  4484                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4485  0010A0  0E00               	movlw	0
  4486  0010A2  6E04               	movwf	processRFID@i,c
  4487  0010A4                     i2l2062:
  4488                           
  4489                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4490  0010A4  5004               	movf	processRFID@i,w,c
  4491  0010A6  2401               	addwf	processRFID@RFIDbuf,w,c
  4492  0010A8  6ED9               	movwf	fsr2l,c
  4493  0010AA  0E00               	movlw	0
  4494  0010AC  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4495  0010AE  6EDA               	movwf	fsr2h,c
  4496  0010B0  0E00               	movlw	0
  4497  0010B2  6EDF               	movwf	indf2,c
  4498                           
  4499                           ;RFID.c: 56:            }
  4500  0010B4  2A04               	incf	processRFID@i,f,c
  4501  0010B6  0E0B               	movlw	11
  4502  0010B8  6404               	cpfsgt	processRFID@i,c
  4503  0010BA  D7F4               	goto	i2l2062
  4504  0010BC                     i2u120_40:
  4505                           
  4506                           ;RFID.c: 57:            return 0;
  4507  0010BC  0E00               	movlw	0
  4508  0010BE  0012               	return	
  4509  0010C0                     i2l2074:
  4510                           
  4511                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4512  0010C0  5043               	movf	processRFID@position_in_buf,w,c
  4513  0010C2  2401               	addwf	processRFID@RFIDbuf,w,c
  4514  0010C4  6ED9               	movwf	fsr2l,c
  4515  0010C6  0E00               	movlw	0
  4516  0010C8  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4517  0010CA  6EDA               	movwf	fsr2h,c
  4518  0010CC  C003  FFDF         	movff	processRFID@latestChar,indf2
  4519                           
  4520                           ;RFID.c: 63:             position_in_buf++;
  4521  0010D0  2A43               	incf	processRFID@position_in_buf,f,c
  4522  0010D2  D7F4               	goto	i2u120_40
  4523  0010D4                     __end_of_processRFID:
  4524                           	opt callstack 0
  4525                           
  4526                           	psect	rparam
  4527  0000                     
  4528                           	psect	temp
  4529  000051                     btemp:
  4530                           	opt callstack 0
  4531  000051                     	ds	1
  4532  0000                     int$flags	set	btemp
  4533  0000                     wtemp8	set	btemp+1
  4534  0000                     ttemp5	set	btemp+1
  4535  0000                     ttemp6	set	btemp+4
  4536  0000                     ttemp7	set	btemp+8
  4537                           tosu	equ	0xFFF
  4538                           tosh	equ	0xFFE
  4539                           tosl	equ	0xFFD
  4540                           stkptr	equ	0xFFC
  4541                           pclatu	equ	0xFFB
  4542                           pclath	equ	0xFFA
  4543                           pcl	equ	0xFF9
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           indf0	equ	0xFEF
  4551                           postinc0	equ	0xFEE
  4552                           postdec0	equ	0xFED
  4553                           preinc0	equ	0xFEC
  4554                           plusw0	equ	0xFEB
  4555                           fsr0h	equ	0xFEA
  4556                           fsr0l	equ	0xFE9
  4557                           wreg	equ	0xFE8
  4558                           indf1	equ	0xFE7
  4559                           postinc1	equ	0xFE6
  4560                           postdec1	equ	0xFE5
  4561                           preinc1	equ	0xFE4
  4562                           plusw1	equ	0xFE3
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           bsr	equ	0xFE0
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           preinc2	equ	0xFDC
  4570                           plusw2	equ	0xFDB
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8


Data Sizes:
    Strings     151
    Constant    0
    Data        0
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      80
    BANK0           160     32     126
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1908_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(BANK0[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_7(CODE[16]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[10]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S370DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S370DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_scanForBeacon
    _main->_stopAndDisplay
    _waitForInput->_LCD_String
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnLeft
    _turnLeft->_setMotorPWM
    _returnHome->_moveBackward
    _returnHome->_stop
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_moveToBeacon
    _main->_returnHome

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   56462
                                             10 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    5097
                                             20 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15561
                                             46 COMRAM     8     0      8
                                              0 BANK0      4     4      0
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             19 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4716
                                             20 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             18 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1362
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       1
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             18 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     5      8    7339
                                             46 COMRAM     8     0      8
                                              0 BANK0      5     5      0
                           _ClearLCD
                         _LCD_String
                      _classify_data
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             9     3      6    2980
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          17     7     10   13631
                                             46 COMRAM     7     7      0
                                              0 BANK0     10     0     10
                           _ClearLCD
                         _LCD_String
                       _moveBackward
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2980
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    3219
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2980
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        17     7     10    7503
                                             46 COMRAM     7     7      0
                                              0 BANK0     10     0     10
                           _ClearLCD
                         _LCD_String
                      _classify_data
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2980
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     366
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2262
                                             18 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             18 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             16 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             14 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    3008
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2394
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  7     7      0       0
                                              7 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      7E       5       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CE       3        0.0%
DATA                 0      0      CE      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 21:27:26 2020

                           l55 115C                   ___awdiv@sign 001A                             bsr 000FE0  
          ___wmul@multiplicand 0011                  ?_display_RFID 0014                    ?_LCD_String 0013  
                          l123 070C                            l326 04DC                            l364 0B4A  
          display_RFID@dataBuf 0014                 moveToBeacon@mL 00BE                 moveToBeacon@mR 00C0  
      __size_of_stopAndDisplay 009E                            prod 000FF3                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l2410 1206  
                         l2404 06E4                           l2502 0EFE                           l2414 1218  
                         l2352 0CDE                           l2512 0F40                           l2450 1034  
                         l2364 0D04                           l2380 0D36                           l2366 0D0C  
                         l2358 0CEE                           l2390 0FD0                           l2710 0AB8  
                         l2518 0E7C                           l2454 1042                           l2470 0D78  
                         l2542 053E                           l2384 0D44                           l2376 0D2C  
                         l2712 0AC0                           l2528 0EBE                           l2480 0DBA  
                         l2536 04FC                           l2632 0AEC                           l2706 0AAC  
                         l2570 112A                           l2802 0860                           l2396 1004  
                         l2732 0406                           l2548 0580                           l2486 0DFA  
                         l2734 044C                           l2670 0C8A                           l2558 0630  
                         l2584 1114                           l2496 0E3C                           l2728 03C8  
                         l2656 0B6C                           l2738 048A                           l2754 0BE2  
                         l2770 0C32                           l2692 0A76                           l2764 0BFC  
                         l2772 0C38                           l2790 07C2                           l2794 07F8  
                         l2786 0796                           l2798 0830                           STR_1 036F  
                         STR_2 0341                           STR_3 0331                           STR_4 038B  
                         STR_5 0351                           STR_6 0360                           STR_7 0321  
                         STR_8 0395                           u2010 04CE                           u2040 0C2C  
                         u2107 0B76                           u2117 0C08                           u1510 0D10  
                         _LATB 000F8A                           u2207 09F2                           u2127 121A  
                         u2217 0A06                           u2137 0976                           u2307 11DC  
                         u2227 0A18                           u2147 098C                           u1540 0FF4  
                         u1605 0758                           u2317 11EC                           u2237 0DAE  
                         u2157 099C                           u1550 1024                           u2327 0FC6  
                         u2247 0E30                           u2167 09AA                           u1800 05D0  
                         u1720 0594                           u2337 12D8                           u2257 1078  
                         u2177 09B8                           u1810 05DE                           u1730 059E  
                         u1475 11CE                           u1547 0FEA                           u2267 0EB2  
                         u2187 09CA                           u1476 11D0                           u1820 05E0  
                         u1740 05A0                           u1557 101A                           u2277 0F34  
                         u2197 09DC                           u1830 05EE                           u1750 05AE  
                         u2287 0FFE                           u1584 06B8                           u1840 05F0  
                         u1760 05B0                           u1585 06B4                           u2297 12B2  
                         u1594 0700                           u1850 060C                           u1770 05BE  
                         u1930 0B98                           u1595 06FC                           u1860 060E  
                         u1780 05C0                           u1790 05CE                           u1880 1156  
                         u1890 1110                           i1l70 0060                           i2l63 11B6  
                         i2l65 11B8                   _travel_moves 0060                           _dbuf 009D  
                         _main 0768                           _prec 003B                           _nout 0037  
                         fsr0h 000FEA                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0051  
                         _stop 102C                           prodh 000FF4                           prodl 000FF3  
                         start 00A6                   ___param_bank 000000                __end_of_SendLCD 11F4  
              __end_of_SetLine 1222                 ??_display_RFID 0016                          ?_main 0001  
          main@searching_speed 00C8                __end_of___awdiv 0D4E                          STR_10 037E  
                        STR_11 0311                          STR_12 0301                          ?_stop 0026  
                        _T0CON 000FD5                ___awdiv@divisor 0017                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                ___awdiv@counter 0019                          _RCREG 000FAE  
                        _E_TOG 12D4                          _SPBRG 000FAF                   ?_init_sensor 0001  
              __end_of_initPWM 12A2                          _flags 003D                          _setup 1158  
                        _width 0039               moveToBeacon@move 00C4                          tablat 000FF5  
                        plusw2 000FDB             processRFID@RFIDbuf 0001                          ttemp5 0052  
                        ttemp6 0055                          ttemp7 0059                          stop@i 002D  
                        status 000FD8                          wtemp8 0052            __size_of_LCD_String 005E  
             __end_of_ClearLCD 12BC           moveForward@max_power 002A                 __CFG_MCLRE$OFF 000000  
              __initialization 1222                   __end_of_main 086E                   __end_of_stop 1088  
               __CFG_OSC$IRCIO 000000               LCD_String@string 0013                         ??_main 0037  
  moveToBeacon@beacon_location 0033                         ??_stop 002C                  __activetblptr 000002  
                       ?_E_TOG 0001                   ?_setMotorPWM 001D                   ?_moveForward 0026  
 scanForBeacon@beacon_location 00C2               ___awdiv@dividend 0015                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         i1l2270 0084  
                       i2l2062 10A4                         i2l2054 1094                         i2l2074 10C0  
                       _LCDout 0F56                    SendLCD@Byte 0012                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 0011  
                    ??_SendLCD 0012                      ??_SetLine 0013                  display_RFID@i 0016  
                       ___wmul 1248                      ??___awdiv 0019               __end_of_init_LCD 0A20  
          init_motor_struct@mL 0026            init_motor_struct@mR 0028                         clear_0 1228  
                       clear_1 1234               ___awdiv@quotient 001B              moveToBeacon@count 0034  
       __size_of_scanForBeacon 008E              moveToBeacon@speed 00C2                      ??_initPWM 0011  
               _stopAndDisplay 0B9E                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0026  
                       stop@mR 0028                   ?_processRFID 0001              _init_motor_struct 086E  
             __end_of_turnLeft 0DD0           __end_of_display_RFID 1158             ?_init_motor_struct 0026  
                   __accesstop 0060        __end_of__initialization 123A                  ___rparam_used 000001  
                  SetLine@line 0013                  __end_of_E_TOG 12E2            ??_init_motor_struct 002A  
               __pcstackCOMRAM 0001                  __end_of_setup 118E                   ??_LCD_String 0015  
       __end_of_stopAndDisplay 0C3C                        ??_E_TOG 000F  __size_of_InterruptHandlerHigh 11BC  
                    ?_ClearLCD 0001    __end_of_InterruptHandlerLow 00A6      __end_of_init_motor_struct 0958  
        __end_of_classify_data 1118                     _check_RFID 04F4           __size_of_init_sensor 0018  
                      ??_setup 0014                  ?_moveBackward 0026                     __pbssBANK0 0060  
                      ?_LCDout 0001                  _scanForBeacon 0C3C             __size_of_init_RFID 001A  
           __end_of_LCD_String 102C             waitForInput@i_1408 001C                        ?___wmul 000F  
                ?_moveToBeacon 00BE                        _CAP1CON 000F63                ?_stopAndDisplay 002F  
                   ??_ClearLCD 0013                        _RFIDbuf 0045                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                 ??_moveBackward 002C                 ?_scanForBeacon 002F  
         __size_of_setMotorPWM 0124           __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0035  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 002D  
                ?_waitForInput 0001             __size_of_turnRight 0082                        _SendLCD 11C4  
                      __Hparam 0000                        _SetLine 11F4                        __Lparam 0000  
               ??_moveToBeacon 002F          processRFID@latestChar 0003                        ___awdiv 0CCA  
              __size_of___wmul 0026                   __psmallconst 0300               initPWM@PWMperiod 000F  
                      __pcinit 1222                        __ramtop 0300                      ?_turnLeft 0026  
                      __ptext0 0768                        __ptext1 0AE4                        __ptext2 0B9E  
                      __ptext3 1118                        __ptext4 04F4                        __ptext5 11F4  
                      __ptext6 1158                        __ptext7 12BC                        __ptext8 126E  
                      __ptext9 0958              __end_of_init_RFID 1288               check_RFID@hexBuf 0019  
                      _initPWM 1288           waitForInput@raw_data 0018                   LCDout@number 0010  
            scanForBeacon@move 0035     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
            stop@initial_speed 002A                    ?_check_RFID 0015                 __pintcode_body 118E  
         end_of_initialization 123A             setMotorPWM@PWMduty 0024                     ??_init_LCD 0013  
         __size_of_processRFID 004C                 ??_waitForInput 0015                  __Lmediumconst 0000  
                      int_func 118E                      _RFID_flag 00BD                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 00C6                     _robot_mode 0044                     _returnHome 039A  
                 _display_RFID 1118                     ??_turnLeft 002C                      _PORTDbits 000F83  
            __end_of_turnRight 0E52                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                ??_scanForBeacon 00BE  
           debug@smoothed_data 003F                  moveForward@mL 0026                  moveForward@mR 0028  
               __end_of_LCDout 0FCE                      _TXSTAbits 000FAC                     main@motorL 00CC  
                   main@motorR 00D5           __end_of_moveBackward 0ED4            __size_of_check_RFID 0150  
               __end_of___wmul 126E                    _BAUDCONbits 000FAA          classify_data@filtered 0013  
          start_initialization 1222              __size_of_ClearLCD 001A           __end_of_moveToBeacon 0AE4  
        classify_data@raw_data 000F                       ??_LCDout 000F          moveBackward@max_power 002A  
 __end_of_InterruptHandlerHigh 11C4          classify_data@smoothed 0041               ??_stopAndDisplay 00BE  
                     ??___wmul 0013                scanForBeacon@mL 002F                scanForBeacon@mR 0031  
           turnRight@max_power 002A                    ?_returnHome 00BE           __end_of_waitForInput 0B9E  
                  __pbssCOMRAM 0037                  ??_init_sensor 000F              turnLeft@max_power 002A  
                __pcstackBANK0 00BE   __size_of_InterruptHandlerLow 008E              __size_of_init_LCD 00C8  
                     ?_SendLCD 0011                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 0015         __size_of_classify_data 0044             check_RFID@checksum 002A  
                  __pintcodelo 0018                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 000F                    __smallconst 0300                 __size_of_E_TOG 000E  
            __size_of_turnLeft 0082                  waitForInput@i 001A                      _init_RFID 126E  
          stopAndDisplay@speed 0033                  ??_setMotorPWM 001F                  ??_moveForward 002C  
                 ??_check_RFID 0017                 __size_of_setup 0036                check_RFID@byte1 0025  
              check_RFID@byte2 0026                check_RFID@byte3 0027                check_RFID@byte4 0028  
              check_RFID@byte5 0029            __end_of_init_sensor 12D4                 ___wmul@product 0013  
          __size_of_returnHome 015A                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i1u140_20 0046                       i2u120_40 10BC          __size_of_moveBackward 0082  
                  turnRight@mL 0026                    turnRight@mR 0028                       _PIR1bits 000F9E  
                     _RCONbits 000FD0           moveToBeacon@raw_data 0031             __end_of_check_RFID 0644  
            ___wmul@multiplier 000F                   setMotorPWM@m 001D                   moveForward@i 002D  
             main@moving_speed 00CA          __size_of_moveToBeacon 00C4           _InterruptHandlerHigh 0008  
                     _ClearLCD 12A2                     ?_init_RFID 0001                      _turnRight 0DD0  
                ??_processRFID 0004                  _classify_data 10D4         returnHome@search_speed 00C4  
                  _INTCON2bits 000FF1                 moveBackward@mL 0026                 moveBackward@mR 0028  
                 _moveBackward 0E52            __end_of_setMotorPWM 0768            __end_of_moveForward 0F56  
                  check_RFID@i 002B                       __Hrparam 0000               __size_of_SendLCD 0030  
                     __Lrparam 0000               __size_of_SetLine 002E          __size_of_waitForInput 00BA  
                 _moveToBeacon 0A20               __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001  
             __size_of_initPWM 001A                    _init_sensor 12BC                 ?_classify_data 000F  
            check_RFID@dataBuf 0015                     ?_turnRight 0026                       __ptext10 1288  
                     __ptext11 0C3C                       __ptext20 0FCE                       __ptext12 0D4E  
                     __ptext21 12A2                       __ptext13 039A                       __ptext22 11C4  
                     __ptext14 0DD0                       __ptext31 1088                       __ptext23 0F56  
                     __ptext15 102C                       __ptext24 12D4                       __ptext16 0E52  
                     __ptext25 086E                       __ptext17 0A20                       __ptext26 0644  
                     __ptext18 0ED4                       __ptext27 1248                       __ptext19 10D4  
                     __ptext28 0CCA          __end_of_scanForBeacon 0CCA                       _init_LCD 0958  
                __size_of_main 0106                  __size_of_stop 005C                     turnLeft@mL 0026  
                   turnLeft@mR 0028            __end_of_processRFID 10D4                   _waitForInput 0AE4  
           scanForBeacon@speed 0033                     turnRight@i 002D                       int$flags 0051  
                 ??_returnHome 002F            _InterruptHandlerLow 0018                     _LCD_String 0FCE  
                     _turnLeft 0D4E          scanForBeacon@raw_data 00C0                     _INTCONbits 000FF2  
                  ??_init_RFID 000F                    _setMotorPWM 0644                    _moveForward 0ED4  
                     intlevel1 0000                       intlevel2 0000           ?_InterruptHandlerLow 0001  
           __end_of_returnHome 04F4                      turnLeft@i 002D                     _OSCCONbits 000FD3  
   processRFID@position_in_buf 0043         ??_InterruptHandlerHigh 0005                ??_classify_data 0011  
             stopAndDisplay@mL 002F               stopAndDisplay@mR 0031           returnHome@move_speed 00C2  
                  ??_turnRight 002C                    _processRFID 1088          ??_InterruptHandlerLow 0008  
              stopAndDisplay@i 00C0                 returnHome@move 00C6                   returnHome@mL 00BE  
                 returnHome@mR 00C0  
