

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb 21 19:35:35 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4331 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     _T1CONbits	set	4045
    90  0000                     _CCP2CON	set	4026
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _PORTDbits	set	3971
   109  0000                     _PIE1bits	set	3997
   110  0000                     _CCPR1L	set	4030
   111  0000                     _CCPR1H	set	4031
   112  0000                     _CCP1CON	set	4029
   113  0000                     _RCREG	set	4014
   114  0000                     _PIR1bits	set	3998
   115  0000                     _TRISDbits	set	3989
   116  0000                     _RCONbits	set	4048
   117  0000                     _INTCONbits	set	4082
   118  0000                     _OSCCONbits	set	4051
   119  0000                     _OSCCON	set	4051
   120                           
   121                           	psect	smallconst
   122  000300                     __psmallconst:
   123                           	opt callstack 0
   124  000300  00                 	db	0
   125  000301                     STR_6:
   126  000301  43                 	db	67	;'C'
   127  000302  48                 	db	72	;'H'
   128  000303  45                 	db	69	;'E'
   129  000304  43                 	db	67	;'C'
   130  000305  4B                 	db	75	;'K'
   131  000306  53                 	db	83	;'S'
   132  000307  55                 	db	85	;'U'
   133  000308  4D                 	db	77	;'M'
   134  000309  20                 	db	32
   135  00030A  46                 	db	70	;'F'
   136  00030B  41                 	db	65	;'A'
   137  00030C  49                 	db	73	;'I'
   138  00030D  4C                 	db	76	;'L'
   139  00030E  45                 	db	69	;'E'
   140  00030F  44                 	db	68	;'D'
   141  000310  00                 	db	0
   142  000311                     STR_5:
   143  000311  43                 	db	67	;'C'
   144  000312  48                 	db	72	;'H'
   145  000313  45                 	db	69	;'E'
   146  000314  43                 	db	67	;'C'
   147  000315  4B                 	db	75	;'K'
   148  000316  53                 	db	83	;'S'
   149  000317  55                 	db	85	;'U'
   150  000318  4D                 	db	77	;'M'
   151  000319  20                 	db	32
   152  00031A  50                 	db	80	;'P'
   153  00031B  41                 	db	65	;'A'
   154  00031C  53                 	db	83	;'S'
   155  00031D  53                 	db	83	;'S'
   156  00031E  45                 	db	69	;'E'
   157  00031F  44                 	db	68	;'D'
   158  000320  00                 	db	0
   159  000321                     STR_4:
   160  000321  52                 	db	82	;'R'
   161  000322  45                 	db	69	;'E'
   162  000323  53                 	db	83	;'S'
   163  000324  45                 	db	69	;'E'
   164  000325  54                 	db	84	;'T'
   165  000326  54                 	db	84	;'T'
   166  000327  49                 	db	73	;'I'
   167  000328  4E                 	db	78	;'N'
   168  000329  47                 	db	71	;'G'
   169  00032A  20                 	db	32
   170  00032B  52                 	db	82	;'R'
   171  00032C  4F                 	db	79	;'O'
   172  00032D  42                 	db	66	;'B'
   173  00032E  4F                 	db	79	;'O'
   174  00032F  54                 	db	84	;'T'
   175  000330  00                 	db	0
   176  000331                     STR_2:
   177  000331  72                 	db	114	;'r'
   178  000332  61                 	db	97	;'a'
   179  000333  77                 	db	119	;'w'
   180  000334  20                 	db	32
   181  000335  64                 	db	100	;'d'
   182  000336  75                 	db	117	;'u'
   183  000337  74                 	db	116	;'t'
   184  000338  79                 	db	121	;'y'
   185  000339  20                 	db	32
   186  00033A  63                 	db	99	;'c'
   187  00033B  79                 	db	121	;'y'
   188  00033C  63                 	db	99	;'c'
   189  00033D  6C                 	db	108	;'l'
   190  00033E  65                 	db	101	;'e'
   191  00033F  00                 	db	0
   192  000340                     STR_1:
   193  000340  54                 	db	84	;'T'
   194  000341  45                 	db	69	;'E'
   195  000342  53                 	db	83	;'S'
   196  000343  54                 	db	84	;'T'
   197  000344  00                 	db	0
   198  000345                     STR_3:
   199  000345  25                 	db	37
   200  000346  64                 	db	100	;'d'
   201  000347  00                 	db	0
   202                           
   203                           ; #config settings
   204  000348  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  0011E0                     __pcinit:
   208                           	opt callstack 0
   209  0011E0                     start_initialization:
   210                           	opt callstack 0
   211  0011E0                     __initialization:
   212                           	opt callstack 0
   213                           
   214                           ; Clear objects allocated to BANK1 (32 bytes)
   215  0011E0  EE01  F000         	lfsr	0,__pbssBANK1
   216  0011E4  0E20               	movlw	32
   217  0011E6                     clear_0:
   218  0011E6  6AEE               	clrf	postinc0,c
   219  0011E8  06E8               	decf	wreg,f,c
   220  0011EA  E1FD               	bnz	clear_0
   221                           
   222                           ; Clear objects allocated to BANK0 (10 bytes)
   223  0011EC  EE00  F0DA         	lfsr	0,__pbssBANK0
   224  0011F0  0E0A               	movlw	10
   225  0011F2                     clear_1:
   226  0011F2  6AEE               	clrf	postinc0,c
   227  0011F4  06E8               	decf	wreg,f,c
   228  0011F6  E1FD               	bnz	clear_1
   229                           
   230                           ; Clear objects allocated to COMRAM (16 bytes)
   231  0011F8  EE00  F029         	lfsr	0,__pbssCOMRAM
   232  0011FC  0E10               	movlw	16
   233  0011FE                     clear_2:
   234  0011FE  6AEE               	clrf	postinc0,c
   235  001200  06E8               	decf	wreg,f,c
   236  001202  E1FD               	bnz	clear_2
   237  001204                     end_of_initialization:
   238                           	opt callstack 0
   239  001204                     __end_of__initialization:
   240                           	opt callstack 0
   241  001204  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   242  001206  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   243  001208  0E00               	movlw	low (__Lsmallconst shr (0+16))
   244  00120A  6EF8               	movwf	tblptru,c
   245  00120C  0E03               	movlw	high __Lsmallconst
   246  00120E  6EF7               	movwf	tblptrh,c
   247  001210  0100               	movlb	0
   248  001212  EFD9  F005         	goto	_main	;jump to C main() function
   249                           
   250                           	psect	bssCOMRAM
   251  000029                     __pbssCOMRAM:
   252                           	opt callstack 0
   253  000029                     InterruptHandlerLow@falling_edge:
   254                           	opt callstack 0
   255  000029                     	ds	2
   256  00002B                     processRFID@position_in_buf:
   257                           	opt callstack 0
   258  00002B                     	ds	1
   259  00002C                     _robot_mode:
   260                           	opt callstack 0
   261  00002C                     	ds	1
   262  00002D                     InterruptHandlerHigh@RFIDbuf:
   263                           	opt callstack 0
   264  00002D                     	ds	12
   265                           
   266                           	psect	bssBANK0
   267  0000DA                     __pbssBANK0:
   268                           	opt callstack 0
   269  0000DA                     _nout:
   270                           	opt callstack 0
   271  0000DA                     	ds	2
   272  0000DC                     _width:
   273                           	opt callstack 0
   274  0000DC                     	ds	2
   275  0000DE                     _prec:
   276                           	opt callstack 0
   277  0000DE                     	ds	2
   278  0000E0                     _flags:
   279                           	opt callstack 0
   280  0000E0                     	ds	2
   281  0000E2                     _raw_data:
   282                           	opt callstack 0
   283  0000E2                     	ds	2
   284                           
   285                           	psect	bssBANK1
   286  000100                     __pbssBANK1:
   287                           	opt callstack 0
   288  000100                     _dbuf:
   289                           	opt callstack 0
   290  000100                     	ds	32
   291                           
   292                           	psect	cstackBANK1
   293  000120                     __pcstackBANK1:
   294                           	opt callstack 0
   295  000120                     main@temp:
   296                           	opt callstack 0
   297                           
   298                           ; 16 bytes @ 0x0
   299  000120                     	ds	16
   300  000130                     main@i:
   301                           	opt callstack 0
   302                           
   303                           ; 2 bytes @ 0x10
   304  000130                     	ds	2
   305                           
   306                           	psect	cstackBANK0
   307  000060                     __pcstackBANK0:
   308                           	opt callstack 0
   309  000060                     ??i1_LCDout:
   310                           
   311                           ; 1 bytes @ 0x0
   312  000060                     	ds	1
   313  000061                     i1LCDout@number:
   314                           	opt callstack 0
   315                           
   316                           ; 1 bytes @ 0x1
   317  000061                     	ds	1
   318  000062                     i1SendLCD@type:
   319                           	opt callstack 0
   320                           
   321                           ; 1 bytes @ 0x2
   322  000062                     	ds	1
   323  000063                     i1SendLCD@Byte:
   324                           	opt callstack 0
   325                           
   326                           ; 1 bytes @ 0x3
   327  000063                     	ds	1
   328  000064                     i1LCD_String@string:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0x4
   332  000064                     	ds	2
   333  000066                     ??_InterruptHandlerLow:
   334  000066                     
   335                           ; 1 bytes @ 0x6
   336  000066                     	ds	11
   337  000071                     ??_LCDout:
   338  000071                     ?_strlen:
   339                           	opt callstack 0
   340  000071                     ?___aodiv:
   341                           	opt callstack 0
   342  000071                     ?___aomod:
   343                           	opt callstack 0
   344  000071                     fputc@c:
   345                           	opt callstack 0
   346  000071                     strlen@s:
   347                           	opt callstack 0
   348  000071                     ___aodiv@dividend:
   349                           	opt callstack 0
   350  000071                     ___aomod@dividend:
   351                           	opt callstack 0
   352                           
   353                           ; 8 bytes @ 0x11
   354  000071                     	ds	1
   355  000072                     LCDout@number:
   356                           	opt callstack 0
   357                           
   358                           ; 1 bytes @ 0x12
   359  000072                     	ds	1
   360  000073                     SendLCD@type:
   361                           	opt callstack 0
   362  000073                     fputc@fp:
   363                           	opt callstack 0
   364  000073                     strlen@a:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x13
   368  000073                     	ds	1
   369  000074                     SendLCD@Byte:
   370                           	opt callstack 0
   371                           
   372                           ; 1 bytes @ 0x14
   373  000074                     	ds	1
   374  000075                     ??_init_LCD:
   375  000075                     ??_ClearLCD:
   376  000075                     ??_fputc:
   377  000075                     SetLine@line:
   378                           	opt callstack 0
   379  000075                     LCD_String@string:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x15
   383  000075                     	ds	1
   384  000076                     
   385                           ; 1 bytes @ 0x16
   386  000076                     	ds	1
   387  000077                     
   388                           ; 1 bytes @ 0x17
   389  000077                     	ds	2
   390  000079                     ___aodiv@divisor:
   391                           	opt callstack 0
   392  000079                     ___aomod@divisor:
   393                           	opt callstack 0
   394                           
   395                           ; 8 bytes @ 0x19
   396  000079                     	ds	1
   397  00007A                     fputs@s:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x1A
   401  00007A                     	ds	2
   402  00007C                     fputs@fp:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x1C
   406  00007C                     	ds	2
   407  00007E                     fputs@c:
   408                           	opt callstack 0
   409                           
   410                           ; 1 bytes @ 0x1E
   411  00007E                     	ds	1
   412  00007F                     fputs@i:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x1F
   416  00007F                     	ds	2
   417  000081                     ?_pad:
   418                           	opt callstack 0
   419  000081                     ___aodiv@counter:
   420                           	opt callstack 0
   421  000081                     ___aomod@counter:
   422                           	opt callstack 0
   423  000081                     pad@fp:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x21
   427  000081                     	ds	1
   428  000082                     ___aodiv@sign:
   429                           	opt callstack 0
   430  000082                     ___aomod@sign:
   431                           	opt callstack 0
   432                           
   433                           ; 1 bytes @ 0x22
   434  000082                     	ds	1
   435  000083                     ?_abs:
   436                           	opt callstack 0
   437  000083                     pad@buf:
   438                           	opt callstack 0
   439  000083                     abs@a:
   440                           	opt callstack 0
   441  000083                     ___aodiv@quotient:
   442                           	opt callstack 0
   443                           
   444                           ; 8 bytes @ 0x23
   445  000083                     	ds	2
   446  000085                     ??_abs:
   447  000085                     pad@p:
   448                           	opt callstack 0
   449                           
   450                           ; 2 bytes @ 0x25
   451  000085                     	ds	2
   452  000087                     ??_pad:
   453                           
   454                           ; 1 bytes @ 0x27
   455  000087                     	ds	1
   456  000088                     pad@i:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x28
   460  000088                     	ds	2
   461  00008A                     pad@w:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x2A
   465  00008A                     	ds	2
   466  00008C                     ?_dtoa:
   467                           	opt callstack 0
   468  00008C                     dtoa@fp:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x2C
   472  00008C                     	ds	2
   473  00008E                     dtoa@d:
   474                           	opt callstack 0
   475                           
   476                           ; 8 bytes @ 0x2E
   477  00008E                     	ds	8
   478  000096                     ??_dtoa:
   479                           
   480                           ; 1 bytes @ 0x36
   481  000096                     	ds	8
   482  00009E                     _dtoa$1211:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x3E
   486  00009E                     	ds	2
   487  0000A0                     dtoa@p:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x40
   491  0000A0                     	ds	2
   492  0000A2                     dtoa@w:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x42
   496  0000A2                     	ds	2
   497  0000A4                     dtoa@s:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x44
   501  0000A4                     	ds	2
   502  0000A6                     dtoa@n:
   503                           	opt callstack 0
   504                           
   505                           ; 8 bytes @ 0x46
   506  0000A6                     	ds	8
   507  0000AE                     dtoa@i:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x4E
   511  0000AE                     	ds	2
   512  0000B0                     ?_vfpfcnvrt:
   513                           	opt callstack 0
   514  0000B0                     vfpfcnvrt@fp:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x50
   518  0000B0                     	ds	2
   519  0000B2                     vfpfcnvrt@fmt:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x52
   523  0000B2                     	ds	2
   524  0000B4                     vfpfcnvrt@ap:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x54
   528  0000B4                     	ds	2
   529  0000B6                     ??_vfpfcnvrt:
   530                           
   531                           ; 1 bytes @ 0x56
   532  0000B6                     	ds	2
   533  0000B8                     vfpfcnvrt@ll:
   534                           	opt callstack 0
   535                           
   536                           ; 8 bytes @ 0x58
   537  0000B8                     	ds	8
   538  0000C0                     ?_vfprintf:
   539                           	opt callstack 0
   540  0000C0                     vfprintf@fp:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x60
   544  0000C0                     	ds	2
   545  0000C2                     vfprintf@fmt:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x62
   549  0000C2                     	ds	2
   550  0000C4                     vfprintf@ap:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x64
   554  0000C4                     	ds	2
   555  0000C6                     vfprintf@cfmt:
   556                           	opt callstack 0
   557                           
   558                           ; 2 bytes @ 0x66
   559  0000C6                     	ds	2
   560  0000C8                     ?_sprintf:
   561                           	opt callstack 0
   562  0000C8                     sprintf@s:
   563                           	opt callstack 0
   564                           
   565                           ; 2 bytes @ 0x68
   566  0000C8                     	ds	2
   567  0000CA                     sprintf@fmt:
   568                           	opt callstack 0
   569                           
   570                           ; 2 bytes @ 0x6A
   571  0000CA                     	ds	4
   572  0000CE                     
   573                           ; 1 bytes @ 0x6E
   574  0000CE                     	ds	2
   575  0000D0                     sprintf@ap:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x70
   579  0000D0                     	ds	2
   580  0000D2                     sprintf@f:
   581                           	opt callstack 0
   582                           
   583                           ; 6 bytes @ 0x72
   584  0000D2                     	ds	6
   585  0000D8                     ??_main:
   586                           
   587                           ; 1 bytes @ 0x78
   588  0000D8                     	ds	2
   589                           
   590                           	psect	cstackCOMRAM
   591  000001                     __pcstackCOMRAM:
   592                           	opt callstack 0
   593  000001                     ??i2_LCDout:
   594  000001                     
   595                           ; 1 bytes @ 0x0
   596  000001                     	ds	1
   597  000002                     i2LCDout@number:
   598                           	opt callstack 0
   599                           
   600                           ; 1 bytes @ 0x1
   601  000002                     	ds	1
   602  000003                     i2SendLCD@type:
   603                           	opt callstack 0
   604                           
   605                           ; 1 bytes @ 0x2
   606  000003                     	ds	1
   607  000004                     i2SendLCD@Byte:
   608                           	opt callstack 0
   609                           
   610                           ; 1 bytes @ 0x3
   611  000004                     	ds	1
   612  000005                     ??i2_ClearLCD:
   613  000005                     i2SetLine@line:
   614                           	opt callstack 0
   615  000005                     i2LCD_String@string:
   616                           	opt callstack 0
   617                           
   618                           ; 2 bytes @ 0x4
   619  000005                     	ds	1
   620  000006                     processRFID@RFIDbuf:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x5
   624  000006                     	ds	1
   625  000007                     check_RFID@dataBuf:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x6
   629  000007                     	ds	1
   630  000008                     processRFID@latestChar:
   631                           	opt callstack 0
   632                           
   633                           ; 1 bytes @ 0x7
   634  000008                     	ds	1
   635  000009                     ??_check_RFID:
   636  000009                     processRFID@i:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x8
   640  000009                     	ds	2
   641  00000B                     processRFID@i_1062:
   642                           	opt callstack 0
   643  00000B                     check_RFID@hexBuf:
   644                           	opt callstack 0
   645                           
   646                           ; 12 bytes @ 0xA
   647  00000B                     	ds	12
   648  000017                     check_RFID@byte1:
   649                           	opt callstack 0
   650                           
   651                           ; 1 bytes @ 0x16
   652  000017                     	ds	1
   653  000018                     check_RFID@byte2:
   654                           	opt callstack 0
   655                           
   656                           ; 1 bytes @ 0x17
   657  000018                     	ds	1
   658  000019                     check_RFID@byte3:
   659                           	opt callstack 0
   660                           
   661                           ; 1 bytes @ 0x18
   662  000019                     	ds	1
   663  00001A                     check_RFID@byte4:
   664                           	opt callstack 0
   665                           
   666                           ; 1 bytes @ 0x19
   667  00001A                     	ds	1
   668  00001B                     check_RFID@byte5:
   669                           	opt callstack 0
   670                           
   671                           ; 1 bytes @ 0x1A
   672  00001B                     	ds	1
   673  00001C                     check_RFID@checksum:
   674                           	opt callstack 0
   675                           
   676                           ; 1 bytes @ 0x1B
   677  00001C                     	ds	1
   678  00001D                     check_RFID@i:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0x1C
   682  00001D                     	ds	2
   683  00001F                     ??_InterruptHandlerHigh:
   684                           
   685                           ; 1 bytes @ 0x1E
   686  00001F                     	ds	9
   687  000028                     InterruptHandlerHigh@RFID_flag:
   688                           	opt callstack 0
   689                           
   690                           ; 1 bytes @ 0x27
   691  000028                     	ds	1
   692                           
   693 ;;
   694 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   695 ;;
   696 ;; *************** function _main *****************
   697 ;; Defined at:
   698 ;;		line 120 in file "main.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  i               2   16[BANK1 ] int 
   703 ;;  temp           16    0[BANK1 ] unsigned char [16]
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   713 ;;      Params:         0       0       0       0
   714 ;;      Locals:         0       0      18       0
   715 ;;      Temps:          0       2       0       0
   716 ;;      Totals:         0       2      18       0
   717 ;;Total ram usage:       20 bytes
   718 ;; Hardware stack levels required when called:   19
   719 ;; This function calls:
   720 ;;		_ClearLCD
   721 ;;		_LCD_String
   722 ;;		_SetLine
   723 ;;		_setup
   724 ;;		_sprintf
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text0
   731  000BB2                     __ptext0:
   732                           	opt callstack 0
   733  000BB2                     _main:
   734                           	opt callstack 12
   735                           
   736                           ;main.c: 123:   setup();
   737                           
   738                           ;incstack = 0
   739  000BB2  ECB0  F009         	call	_setup	;wreg free
   740  000BB6  D01C               	goto	l2748
   741  000BB8                     l2740:
   742                           
   743                           ;main.c: 131:       {;main.c: 132:           SetLine(1);
   744  000BB8  0E01               	movlw	1
   745  000BBA  EC40  F009         	call	_SetLine
   746                           
   747                           ;main.c: 133:           LCD_String("raw duty cycle");
   748  000BBE  0E31               	movlw	low STR_2
   749  000BC0  0100               	movlb	0	; () banked
   750  000BC2  6F75               	movwf	LCD_String@string& (0+255),b
   751  000BC4  0E03               	movlw	high STR_2
   752  000BC6  6F76               	movwf	(LCD_String@string+1)& (0+255),b
   753  000BC8  EC7E  F008         	call	_LCD_String	;wreg free
   754                           
   755                           ;main.c: 134:           SetLine(2);
   756  000BCC  0E02               	movlw	2
   757  000BCE  EC40  F009         	call	_SetLine
   758                           
   759                           ;main.c: 135:           char temp[16];;main.c: 136:           sprintf(temp,"%d",raw_data
      +                          );
   760  000BD2  0E20               	movlw	low main@temp
   761  000BD4  0100               	movlb	0	; () banked
   762  000BD6  6FC8               	movwf	sprintf@s& (0+255),b
   763  000BD8  0E01               	movlw	high main@temp
   764  000BDA  6FC9               	movwf	(sprintf@s+1)& (0+255),b
   765  000BDC  0E45               	movlw	low STR_3
   766  000BDE  6FCA               	movwf	sprintf@fmt& (0+255),b
   767  000BE0  0E03               	movlw	high STR_3
   768  000BE2  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
   769  000BE4  C0E2  F0CC         	movff	_raw_data,?_sprintf+4	;volatile
   770  000BE8  C0E3  F0CD         	movff	_raw_data+1,?_sprintf+5	;volatile
   771  000BEC  EC37  F008         	call	_sprintf	;wreg free
   772  000BF0                     l2748:
   773                           
   774                           ;main.c: 130:       while(robot_mode == 0)
   775  000BF0  502C               	movf	_robot_mode,w,c	;volatile
   776  000BF2  A4D8               	btfss	status,2,c
   777  000BF4  D003               	goto	l2752
   778  000BF6  D7E0               	goto	l2740
   779  000BF8                     l2750:
   780                           
   781                           ;main.c: 141:       {;main.c: 143:           robot_mode = 2;
   782  000BF8  0E02               	movlw	2
   783  000BFA  6E2C               	movwf	_robot_mode,c	;volatile
   784  000BFC                     l2752:
   785                           
   786                           ;main.c: 140:       while(robot_mode == 1)
   787  000BFC  042C               	decf	_robot_mode,w,c	;volatile
   788  000BFE  A4D8               	btfss	status,2,c
   789  000C00  D02D               	goto	u2480
   790  000C02  D7FA               	goto	l2750
   791  000C04                     l2754:
   792                           
   793                           ;main.c: 150:           {;main.c: 151:               ClearLCD();
   794  000C04  ECA0  F009         	call	_ClearLCD	;wreg free
   795                           
   796                           ;main.c: 152:               LCD_String("RESETTING ROBOT");
   797  000C08  0E21               	movlw	low STR_4
   798  000C0A  0100               	movlb	0	; () banked
   799  000C0C  6F75               	movwf	LCD_String@string& (0+255),b
   800  000C0E  0E03               	movlw	high STR_4
   801  000C10  6F76               	movwf	(LCD_String@string+1)& (0+255),b
   802  000C12  EC7E  F008         	call	_LCD_String	;wreg free
   803                           
   804                           ;main.c: 153:               for(int i=0; i<10;i++)
   805  000C16  0E00               	movlw	0
   806  000C18  0101               	movlb	1	; () banked
   807  000C1A  6F31               	movwf	(main@i+1)& (0+255),b
   808  000C1C  0E00               	movlw	0
   809  000C1E  6F30               	movwf	main@i& (0+255),b
   810  000C20                     l2764:
   811                           
   812                           ; BSR set to: 1
   813                           ;main.c: 154:               {;main.c: 155:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   814  000C20  0E02               	movlw	2
   815  000C22  0100               	movlb	0	; () banked
   816  000C24  6FD9               	movwf	(??_main+1)& (0+255),b
   817  000C26  0E04               	movlw	4
   818  000C28  6FD8               	movwf	??_main& (0+255),b
   819  000C2A  0EBA               	movlw	186
   820  000C2C                     u2507:
   821  000C2C  2EE8               	decfsz	wreg,f,c
   822  000C2E  D7FE               	bra	u2507
   823  000C30  2FD8               	decfsz	??_main& (0+255),f,b
   824  000C32  D7FC               	bra	u2507
   825  000C34  2FD9               	decfsz	(??_main+1)& (0+255),f,b
   826  000C36  D7FA               	bra	u2507
   827  000C38  F000               	nop	
   828                           
   829                           ;main.c: 156:               }
   830  000C3A  0101               	movlb	1	; () banked
   831  000C3C  4B30               	infsnz	main@i& (0+255),f,b
   832  000C3E  2B31               	incf	(main@i+1)& (0+255),f,b
   833  000C40  BF31               	btfsc	(main@i+1)& (0+255),7,b
   834  000C42  D7EE               	goto	l2764
   835  000C44  5131               	movf	(main@i+1)& (0+255),w,b
   836  000C46  E104               	bnz	u2470
   837  000C48  0E0A               	movlw	10
   838  000C4A  5D30               	subwf	main@i& (0+255),w,b
   839  000C4C  A0D8               	btfss	status,0,c
   840  000C4E  D7E8               	goto	l2764
   841  000C50                     u2470:
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 157:               ClearLCD();
   845  000C50  ECA0  F009         	call	_ClearLCD	;wreg free
   846                           
   847                           ;main.c: 158:               robot_mode = 0;
   848  000C54  0E00               	movlw	0
   849  000C56  6E2C               	movwf	_robot_mode,c	;volatile
   850  000C58                     l2772:
   851                           
   852                           ;main.c: 149:           while(PORTDbits.RD2 == 1)
   853  000C58  B483               	btfsc	3971,2,c	;volatile
   854  000C5A  D7D4               	goto	l2754
   855  000C5C                     u2480:
   856                           
   857                           ;main.c: 147:       while(robot_mode == 2)
   858  000C5C  0E02               	movlw	2
   859  000C5E  182C               	xorwf	_robot_mode,w,c	;volatile
   860  000C60  A4D8               	btfss	status,2,c
   861  000C62  D7C6               	goto	l2748
   862  000C64  D7F9               	goto	l2772
   863  000C66                     __end_of_main:
   864                           	opt callstack 0
   865                           
   866 ;; *************** function _sprintf *****************
   867 ;; Defined at:
   868 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  s               2  104[BANK0 ] PTR unsigned char 
   871 ;;		 -> main@temp(16), 
   872 ;;  fmt             2  106[BANK0 ] PTR const unsigned char 
   873 ;;		 -> STR_3(3), 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  f               6  114[BANK0 ] struct _IO_FILE
   876 ;;  ap              2  112[BANK0 ] PTR void [1]
   877 ;;		 -> ?_sprintf(2), 
   878 ;;  ret             2    0        int 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  2  104[BANK0 ] int 
   881 ;; Registers used:
   882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   888 ;;      Params:         0       6       0       0
   889 ;;      Locals:         0      10       0       0
   890 ;;      Temps:          0       0       0       0
   891 ;;      Totals:         0      16       0       0
   892 ;;Total ram usage:       16 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; Hardware stack levels required when called:   18
   895 ;; This function calls:
   896 ;;		_vfprintf
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text1
   903  00106E                     __ptext1:
   904                           	opt callstack 0
   905  00106E                     _sprintf:
   906                           	opt callstack 12
   907                           
   908                           ;incstack = 0
   909  00106E  0ECC               	movlw	low (?_sprintf+4)
   910  001070  0100               	movlb	0	; () banked
   911  001072  6FD0               	movwf	sprintf@ap& (0+255),b
   912  001074  0E00               	movlw	high (?_sprintf+4)
   913  001076  6FD1               	movwf	(sprintf@ap+1)& (0+255),b
   914  001078  C0C8  F0D2         	movff	sprintf@s,sprintf@f
   915  00107C  C0C9  F0D3         	movff	sprintf@s+1,sprintf@f+1
   916                           
   917                           ; BSR set to: 0
   918  001080  0E00               	movlw	0
   919  001082  6FD5               	movwf	(sprintf@f+3)& (0+255),b
   920  001084  0E00               	movlw	0
   921  001086  6FD4               	movwf	(sprintf@f+2)& (0+255),b
   922                           
   923                           ; BSR set to: 0
   924  001088  0E00               	movlw	0
   925  00108A  6FD7               	movwf	(sprintf@f+5)& (0+255),b
   926  00108C  0E00               	movlw	0
   927  00108E  6FD6               	movwf	(sprintf@f+4)& (0+255),b
   928                           
   929                           ; BSR set to: 0
   930  001090  0ED2               	movlw	low sprintf@f
   931  001092  6FC0               	movwf	vfprintf@fp& (0+255),b
   932  001094  0E00               	movlw	high sprintf@f
   933  001096  6FC1               	movwf	(vfprintf@fp+1)& (0+255),b
   934  001098  C0CA  F0C2         	movff	sprintf@fmt,vfprintf@fmt
   935  00109C  C0CB  F0C3         	movff	sprintf@fmt+1,vfprintf@fmt+1
   936  0010A0  0ED0               	movlw	low sprintf@ap
   937  0010A2  6FC4               	movwf	vfprintf@ap& (0+255),b
   938  0010A4  0E00               	movlw	high sprintf@ap
   939  0010A6  6FC5               	movwf	(vfprintf@ap+1)& (0+255),b
   940  0010A8  EC0C  F008         	call	_vfprintf	;wreg free
   941  0010AC  0100               	movlb	0	; () banked
   942  0010AE  51D4               	movf	(sprintf@f+2)& (0+255),w,b
   943  0010B0  25C8               	addwf	sprintf@s& (0+255),w,b
   944  0010B2  6ED9               	movwf	fsr2l,c
   945  0010B4  51D5               	movf	(sprintf@f+3)& (0+255),w,b
   946  0010B6  21C9               	addwfc	(sprintf@s+1)& (0+255),w,b
   947  0010B8  6EDA               	movwf	fsr2h,c
   948  0010BA  0E00               	movlw	0
   949  0010BC  6EDF               	movwf	indf2,c
   950                           
   951                           ; BSR set to: 0
   952  0010BE  0012               	return		;funcret
   953  0010C0                     __end_of_sprintf:
   954                           	opt callstack 0
   955                           
   956 ;; *************** function _vfprintf *****************
   957 ;; Defined at:
   958 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  fp              2   96[BANK0 ] PTR struct _IO_FILE
   961 ;;		 -> sprintf@f(6), 
   962 ;;  fmt             2   98[BANK0 ] PTR const unsigned char 
   963 ;;		 -> STR_3(3), 
   964 ;;  ap              2  100[BANK0 ] PTR PTR void 
   965 ;;		 -> sprintf@ap(2), 
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  cfmt            2  102[BANK0 ] PTR unsigned char 
   968 ;;		 -> STR_3(3), 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  2   96[BANK0 ] int 
   971 ;; Registers used:
   972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   978 ;;      Params:         0       6       0       0
   979 ;;      Locals:         0       2       0       0
   980 ;;      Temps:          0       0       0       0
   981 ;;      Totals:         0       8       0       0
   982 ;;Total ram usage:        8 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:   17
   985 ;; This function calls:
   986 ;;		_vfpfcnvrt
   987 ;; This function is called by:
   988 ;;		_sprintf
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text2
   993  001018                     __ptext2:
   994                           	opt callstack 0
   995  001018                     _vfprintf:
   996                           	opt callstack 12
   997                           
   998                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   999                           
  1000                           ; BSR set to: 0
  1001                           ;incstack = 0
  1002  001018  C0C2  F0C6         	movff	vfprintf@fmt,vfprintf@cfmt
  1003  00101C  C0C3  F0C7         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1004                           
  1005                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1006  001020  0E00               	movlw	0
  1007  001022  0100               	movlb	0	; () banked
  1008  001024  6FDB               	movwf	(_nout+1)& (0+255),b
  1009  001026  0E00               	movlw	0
  1010  001028  6FDA               	movwf	_nout& (0+255),b
  1011                           
  1012                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1013  00102A  D013               	goto	l2644
  1014  00102C                     l2642:
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1018  00102C  C0C0  F0B0         	movff	vfprintf@fp,vfpfcnvrt@fp
  1019  001030  C0C1  F0B1         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1020  001034  0EC6               	movlw	low vfprintf@cfmt
  1021  001036  6FB2               	movwf	vfpfcnvrt@fmt& (0+255),b
  1022  001038  0E00               	movlw	high vfprintf@cfmt
  1023  00103A  6FB3               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  1024  00103C  C0C4  F0B4         	movff	vfprintf@ap,vfpfcnvrt@ap
  1025  001040  C0C5  F0B5         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1026  001044  ECC9  F002         	call	_vfpfcnvrt	;wreg free
  1027  001048  0100               	movlb	0	; () banked
  1028  00104A  51B0               	movf	?_vfpfcnvrt& (0+255),w,b
  1029  00104C  27DA               	addwf	_nout& (0+255),f,b
  1030  00104E  51B1               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  1031  001050  23DB               	addwfc	(_nout+1)& (0+255),f,b
  1032  001052                     l2644:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1036  001052  C0C6  FFF6         	movff	vfprintf@cfmt,tblptrl
  1037  001056  C0C7  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1038  00105A                     	if	0	;tblptru may be non-zero
  1039  00105A                     	endif
  1040  00105A                     	if	0	;tblptru may be non-zero
  1041  00105A                     	endif
  1042  00105A  0008               	tblrd		*
  1043  00105C  50F5               	movf	tablat,w,c
  1044  00105E  0900               	iorlw	0
  1045  001060  A4D8               	btfss	status,2,c
  1046  001062  D7E4               	goto	l2642
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1050  001064  C0DA  F0C0         	movff	_nout,?_vfprintf
  1051  001068  C0DB  F0C1         	movff	_nout+1,?_vfprintf+1
  1052                           
  1053                           ; BSR set to: 0
  1054  00106C  0012               	return		;funcret
  1055  00106E                     __end_of_vfprintf:
  1056                           	opt callstack 0
  1057                           
  1058 ;; *************** function _vfpfcnvrt *****************
  1059 ;; Defined at:
  1060 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  fp              2   80[BANK0 ] PTR struct _IO_FILE
  1063 ;;		 -> sprintf@f(6), 
  1064 ;;  fmt             2   82[BANK0 ] PTR PTR unsigned char 
  1065 ;;		 -> vfprintf@cfmt(2), 
  1066 ;;  ap              2   84[BANK0 ] PTR PTR void 
  1067 ;;		 -> sprintf@ap(2), 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  ll              8   88[BANK0 ] long long 
  1070 ;;  llu             8    0        unsigned long long 
  1071 ;;  f               4    0        unsigned long long 
  1072 ;;  vp              3    0        PTR void 
  1073 ;;  ct              3    0        unsigned char [3]
  1074 ;;  cp              3    0        PTR unsigned char 
  1075 ;;  i               2    0        int 
  1076 ;;  done            2    0        int 
  1077 ;;  c               1    0        unsigned char 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;                  2   80[BANK0 ] int 
  1080 ;; Registers used:
  1081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1087 ;;      Params:         0       6       0       0
  1088 ;;      Locals:         0       8       0       0
  1089 ;;      Temps:          0       2       0       0
  1090 ;;      Totals:         0      16       0       0
  1091 ;;Total ram usage:       16 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:   16
  1094 ;; This function calls:
  1095 ;;		_dtoa
  1096 ;;		_fputc
  1097 ;; This function is called by:
  1098 ;;		_vfprintf
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text3
  1103  000592                     __ptext3:
  1104                           	opt callstack 0
  1105  000592                     _vfpfcnvrt:
  1106                           	opt callstack 12
  1107                           
  1108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;incstack = 0
  1112  000592  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1113  000596  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1114  00059A  CFDE FFF6          	movff	postinc2,tblptrl
  1115  00059E  CFDD FFF7          	movff	postdec2,tblptrh
  1116  0005A2                     	if	0	;tblptru may be non-zero
  1117  0005A2                     	endif
  1118  0005A2                     	if	0	;tblptru may be non-zero
  1119  0005A2                     	endif
  1120  0005A2  0008               	tblrd		*
  1121  0005A4  50F5               	movf	tablat,w,c
  1122  0005A6  0A25               	xorlw	37
  1123  0005A8  A4D8               	btfss	status,2,c
  1124  0005AA  D09B               	goto	l2574
  1125                           
  1126                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1127  0005AC  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1128  0005B0  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1129  0005B4  2ADE               	incf	postinc2,f,c
  1130  0005B6  0E00               	movlw	0
  1131  0005B8  22DD               	addwfc	postdec2,f,c
  1132                           
  1133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1134  0005BA  0E00               	movlw	0
  1135  0005BC  0100               	movlb	0	; () banked
  1136  0005BE  6FDD               	movwf	(_width+1)& (0+255),b
  1137  0005C0  0E00               	movlw	0
  1138  0005C2  6FDC               	movwf	_width& (0+255),b
  1139  0005C4  C0DC  F0E0         	movff	_width,_flags
  1140  0005C8  C0DD  F0E1         	movff	_width+1,_flags+1
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1144  0005CC  69DE               	setf	_prec& (0+255),b
  1145  0005CE  69DF               	setf	(_prec+1)& (0+255),b
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1149  0005D0  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1150  0005D4  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1151  0005D8  CFDE FFF6          	movff	postinc2,tblptrl
  1152  0005DC  CFDD FFF7          	movff	postdec2,tblptrh
  1153  0005E0                     	if	0	;tblptru may be non-zero
  1154  0005E0                     	endif
  1155  0005E0                     	if	0	;tblptru may be non-zero
  1156  0005E0                     	endif
  1157  0005E0  0008               	tblrd		*
  1158  0005E2  50F5               	movf	tablat,w,c
  1159  0005E4  0A64               	xorlw	100
  1160  0005E6  B4D8               	btfsc	status,2,c
  1161  0005E8  D00D               	goto	u2320
  1162                           
  1163                           ; BSR set to: 0
  1164  0005EA  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1165  0005EE  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1166  0005F2  CFDE FFF6          	movff	postinc2,tblptrl
  1167  0005F6  CFDD FFF7          	movff	postdec2,tblptrh
  1168  0005FA                     	if	0	;tblptru may be non-zero
  1169  0005FA                     	endif
  1170  0005FA                     	if	0	;tblptru may be non-zero
  1171  0005FA                     	endif
  1172  0005FA  0008               	tblrd		*
  1173  0005FC  50F5               	movf	tablat,w,c
  1174  0005FE  0A69               	xorlw	105
  1175  000600  A4D8               	btfss	status,2,c
  1176  000602  D03F               	goto	l2558
  1177  000604                     u2320:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1181  000604  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1182  000608  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1183  00060C  2ADE               	incf	postinc2,f,c
  1184  00060E  0E00               	movlw	0
  1185  000610  22DD               	addwfc	postdec2,f,c
  1186                           
  1187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1188  000612  C0B4  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1189  000616  C0B5  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1190  00061A  CFDF F0B6          	movff	indf2,??_vfpfcnvrt
  1191  00061E  0E02               	movlw	2
  1192  000620  26DE               	addwf	postinc2,f,c
  1193  000622  CFDF F0B7          	movff	indf2,??_vfpfcnvrt+1
  1194  000626  0E00               	movlw	0
  1195  000628  22DD               	addwfc	postdec2,f,c
  1196  00062A  C0B6  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1197  00062E  C0B7  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1198  000632  CFDE F0B8          	movff	postinc2,vfpfcnvrt@ll
  1199  000636  CFDD F0B9          	movff	postdec2,vfpfcnvrt@ll+1
  1200  00063A  0E00               	movlw	0
  1201  00063C  BFB9               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  1202  00063E  0EFF               	movlw	-1
  1203  000640  6FBA               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  1204  000642  6FBB               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  1205  000644  6FBC               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  1206  000646  6FBD               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  1207  000648  6FBE               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  1208  00064A  6FBF               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1212  00064C  C0B0  F08C         	movff	vfpfcnvrt@fp,dtoa@fp
  1213  000650  C0B1  F08D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1214  000654  C0B8  F08E         	movff	vfpfcnvrt@ll,dtoa@d
  1215  000658  C0B9  F08F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1216  00065C  C0BA  F090         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1217  000660  C0BB  F091         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1218  000664  C0BC  F092         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1219  000668  C0BD  F093         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1220  00066C  C0BE  F094         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1221  000670  C0BF  F095         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1222  000674  ECA5  F001         	call	_dtoa	;wreg free
  1223  000678  C08C  F0B0         	movff	?_dtoa,?_vfpfcnvrt
  1224  00067C  C08D  F0B1         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1225  000680  0012               	return	
  1226  000682                     l2558:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1230  000682  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1231  000686  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1232  00068A  CFDE FFF6          	movff	postinc2,tblptrl
  1233  00068E  CFDD FFF7          	movff	postdec2,tblptrh
  1234  000692                     	if	0	;tblptru may be non-zero
  1235  000692                     	endif
  1236  000692                     	if	0	;tblptru may be non-zero
  1237  000692                     	endif
  1238  000692  0008               	tblrd		*
  1239  000694  50F5               	movf	tablat,w,c
  1240  000696  0A25               	xorlw	37
  1241  000698  A4D8               	btfss	status,2,c
  1242  00069A  D017               	goto	l2568
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1246  00069C  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1247  0006A0  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1248  0006A4  2ADE               	incf	postinc2,f,c
  1249  0006A6  0E00               	movlw	0
  1250  0006A8  22DD               	addwfc	postdec2,f,c
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1254  0006AA  0E00               	movlw	0
  1255  0006AC  6F72               	movwf	(fputc@c+1)& (0+255),b
  1256  0006AE  0E25               	movlw	37
  1257  0006B0  6F71               	movwf	fputc@c& (0+255),b
  1258  0006B2  C0B0  F073         	movff	vfpfcnvrt@fp,fputc@fp
  1259  0006B6  C0B1  F074         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1260  0006BA  EC33  F006         	call	_fputc	;wreg free
  1261  0006BE                     l2564:
  1262                           
  1263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1264  0006BE  0E00               	movlw	0
  1265  0006C0  0100               	movlb	0	; () banked
  1266  0006C2  6FB1               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  1267  0006C4  0E01               	movlw	1
  1268  0006C6  6FB0               	movwf	?_vfpfcnvrt& (0+255),b
  1269  0006C8  0012               	return	
  1270  0006CA                     l2568:
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1274  0006CA  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1275  0006CE  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1276  0006D2  2ADE               	incf	postinc2,f,c
  1277  0006D4  0E00               	movlw	0
  1278  0006D6  22DD               	addwfc	postdec2,f,c
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1282  0006D8  0E00               	movlw	0
  1283  0006DA  6FB1               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  1284  0006DC  0E00               	movlw	0
  1285  0006DE  6FB0               	movwf	?_vfpfcnvrt& (0+255),b
  1286  0006E0  0012               	return	
  1287  0006E2                     l2574:
  1288                           
  1289                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1290  0006E2  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1291  0006E6  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1292  0006EA  CFDE FFF6          	movff	postinc2,tblptrl
  1293  0006EE  CFDD FFF7          	movff	postdec2,tblptrh
  1294  0006F2                     	if	0	;tblptru may be non-zero
  1295  0006F2                     	endif
  1296  0006F2                     	if	0	;tblptru may be non-zero
  1297  0006F2                     	endif
  1298  0006F2  0008               	tblrd		*
  1299  0006F4  50F5               	movf	tablat,w,c
  1300  0006F6  0100               	movlb	0	; () banked
  1301  0006F8  6F71               	movwf	fputc@c& (0+255),b
  1302  0006FA  6B72               	clrf	(fputc@c+1)& (0+255),b
  1303  0006FC  C0B0  F073         	movff	vfpfcnvrt@fp,fputc@fp
  1304  000700  C0B1  F074         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1305  000704  EC33  F006         	call	_fputc	;wreg free
  1306                           
  1307                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1308  000708  C0B2  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1309  00070C  C0B3  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1310  000710  2ADE               	incf	postinc2,f,c
  1311  000712  0E00               	movlw	0
  1312  000714  22DD               	addwfc	postdec2,f,c
  1313  000716  D7D3               	goto	l2564
  1314  000718                     __end_of_vfpfcnvrt:
  1315                           	opt callstack 0
  1316                           
  1317 ;; *************** function _dtoa *****************
  1318 ;; Defined at:
  1319 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  fp              2   44[BANK0 ] PTR struct _IO_FILE
  1322 ;;		 -> sprintf@f(6), 
  1323 ;;  d               8   46[BANK0 ] long long 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  n               8   70[BANK0 ] long long 
  1326 ;;  i               2   78[BANK0 ] int 
  1327 ;;  s               2   68[BANK0 ] int 
  1328 ;;  w               2   66[BANK0 ] int 
  1329 ;;  p               2   64[BANK0 ] int 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2   44[BANK0 ] int 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1339 ;;      Params:         0      10       0       0
  1340 ;;      Locals:         0      18       0       0
  1341 ;;      Temps:          0       8       0       0
  1342 ;;      Totals:         0      36       0       0
  1343 ;;Total ram usage:       36 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:   15
  1346 ;; This function calls:
  1347 ;;		___aodiv
  1348 ;;		___aomod
  1349 ;;		_abs
  1350 ;;		_pad
  1351 ;; This function is called by:
  1352 ;;		_vfpfcnvrt
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text4
  1357  00034A                     __ptext4:
  1358                           	opt callstack 0
  1359  00034A                     _dtoa:
  1360                           	opt callstack 12
  1361                           
  1362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1363                           
  1364                           ;incstack = 0
  1365  00034A  C08E  F0A6         	movff	dtoa@d,dtoa@n
  1366  00034E  C08F  F0A7         	movff	dtoa@d+1,dtoa@n+1
  1367  000352  C090  F0A8         	movff	dtoa@d+2,dtoa@n+2
  1368  000356  C091  F0A9         	movff	dtoa@d+3,dtoa@n+3
  1369  00035A  C092  F0AA         	movff	dtoa@d+4,dtoa@n+4
  1370  00035E  C093  F0AB         	movff	dtoa@d+5,dtoa@n+5
  1371  000362  C094  F0AC         	movff	dtoa@d+6,dtoa@n+6
  1372  000366  C095  F0AD         	movff	dtoa@d+7,dtoa@n+7
  1373                           
  1374                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1375  00036A  0100               	movlb	0	; () banked
  1376  00036C  AFAD               	btfss	(dtoa@n+7)& (0+255),7,b
  1377  00036E  D002               	goto	u2140
  1378  000370  0E01               	movlw	1
  1379  000372  D001               	goto	u2150
  1380  000374                     u2140:
  1381  000374  0E00               	movlw	0
  1382  000376                     u2150:
  1383  000376  6FA4               	movwf	dtoa@s& (0+255),b
  1384  000378  6BA5               	clrf	(dtoa@s+1)& (0+255),b
  1385                           
  1386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1387  00037A  51A4               	movf	dtoa@s& (0+255),w,b
  1388  00037C  11A5               	iorwf	(dtoa@s+1)& (0+255),w,b
  1389  00037E  B4D8               	btfsc	status,2,c
  1390  000380  D010               	goto	l2470
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1394  000382  1FAD               	comf	(dtoa@n+7)& (0+255),f,b
  1395  000384  1FAC               	comf	(dtoa@n+6)& (0+255),f,b
  1396  000386  1FAB               	comf	(dtoa@n+5)& (0+255),f,b
  1397  000388  1FAA               	comf	(dtoa@n+4)& (0+255),f,b
  1398  00038A  1FA9               	comf	(dtoa@n+3)& (0+255),f,b
  1399  00038C  1FA8               	comf	(dtoa@n+2)& (0+255),f,b
  1400  00038E  1FA7               	comf	(dtoa@n+1)& (0+255),f,b
  1401  000390  6DA6               	negf	dtoa@n& (0+255),b
  1402  000392  0E00               	movlw	0
  1403  000394  23A7               	addwfc	(dtoa@n+1)& (0+255),f,b
  1404  000396  23A8               	addwfc	(dtoa@n+2)& (0+255),f,b
  1405  000398  23A9               	addwfc	(dtoa@n+3)& (0+255),f,b
  1406  00039A  23AA               	addwfc	(dtoa@n+4)& (0+255),f,b
  1407  00039C  23AB               	addwfc	(dtoa@n+5)& (0+255),f,b
  1408  00039E  23AC               	addwfc	(dtoa@n+6)& (0+255),f,b
  1409  0003A0  23AD               	addwfc	(dtoa@n+7)& (0+255),f,b
  1410  0003A2                     l2470:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1414  0003A2  AFDF               	btfss	(_prec+1)& (0+255),7,b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1418  0003A4  93E0               	bcf	_flags& (0+255),1,b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1422  0003A6  BFDF               	btfsc	(_prec+1)& (0+255),7,b
  1423  0003A8  D005               	goto	u2180
  1424  0003AA  51DF               	movf	(_prec+1)& (0+255),w,b
  1425  0003AC  E108               	bnz	l293
  1426  0003AE  05DE               	decf	_prec& (0+255),w,b
  1427  0003B0  B0D8               	btfsc	status,0,c
  1428  0003B2  D005               	goto	l293
  1429  0003B4                     u2180:
  1430                           
  1431                           ; BSR set to: 0
  1432  0003B4  0E00               	movlw	0
  1433  0003B6  6FA1               	movwf	(dtoa@p+1)& (0+255),b
  1434  0003B8  0E01               	movlw	1
  1435  0003BA  6FA0               	movwf	dtoa@p& (0+255),b
  1436  0003BC  D004               	goto	l295
  1437  0003BE                     l293:
  1438                           
  1439                           ; BSR set to: 0
  1440  0003BE  C0DE  F0A0         	movff	_prec,dtoa@p
  1441  0003C2  C0DF  F0A1         	movff	_prec+1,dtoa@p+1
  1442  0003C6                     l295:
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1446  0003C6  C0DC  F0A2         	movff	_width,dtoa@w
  1447  0003CA  C0DD  F0A3         	movff	_width+1,dtoa@w+1
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1451  0003CE  51A4               	movf	dtoa@s& (0+255),w,b
  1452  0003D0  11A5               	iorwf	(dtoa@s+1)& (0+255),w,b
  1453  0003D2  A4D8               	btfss	status,2,c
  1454  0003D4  D002               	goto	u2200
  1455                           
  1456                           ; BSR set to: 0
  1457  0003D6  A5E0               	btfss	_flags& (0+255),2,b
  1458  0003D8  D003               	goto	l2484
  1459  0003DA                     u2200:
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1463  0003DA  07A2               	decf	dtoa@w& (0+255),f,b
  1464  0003DC  A0D8               	btfss	status,0,c
  1465  0003DE  07A3               	decf	(dtoa@w+1)& (0+255),f,b
  1466  0003E0                     l2484:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1470  0003E0  0E00               	movlw	0
  1471  0003E2  6FAF               	movwf	(dtoa@i+1)& (0+255),b
  1472  0003E4  0E1F               	movlw	31
  1473  0003E6  6FAE               	movwf	dtoa@i& (0+255),b
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1477  0003E8  0E00               	movlw	0
  1478  0003EA  0101               	movlb	1	; () banked
  1479  0003EC  6F1F               	movwf	(_dbuf+31)& (0+255),b
  1480                           
  1481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1482  0003EE  D07D               	goto	l2498
  1483  0003F0                     l2488:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1487  0003F0  07AE               	decf	dtoa@i& (0+255),f,b
  1488  0003F2  A0D8               	btfss	status,0,c
  1489  0003F4  07AF               	decf	(dtoa@i+1)& (0+255),f,b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1493  0003F6  0E00               	movlw	low _dbuf
  1494  0003F8  25AE               	addwf	dtoa@i& (0+255),w,b
  1495  0003FA  6ED9               	movwf	fsr2l,c
  1496  0003FC  0E01               	movlw	high _dbuf
  1497  0003FE  21AF               	addwfc	(dtoa@i+1)& (0+255),w,b
  1498  000400  6EDA               	movwf	fsr2h,c
  1499  000402  C0A6  F071         	movff	dtoa@n,___aomod@dividend
  1500  000406  C0A7  F072         	movff	dtoa@n+1,___aomod@dividend+1
  1501  00040A  C0A8  F073         	movff	dtoa@n+2,___aomod@dividend+2
  1502  00040E  C0A9  F074         	movff	dtoa@n+3,___aomod@dividend+3
  1503  000412  C0AA  F075         	movff	dtoa@n+4,___aomod@dividend+4
  1504  000416  C0AB  F076         	movff	dtoa@n+5,___aomod@dividend+5
  1505  00041A  C0AC  F077         	movff	dtoa@n+6,___aomod@dividend+6
  1506  00041E  C0AD  F078         	movff	dtoa@n+7,___aomod@dividend+7
  1507  000422  0E0A               	movlw	10
  1508  000424  6F79               	movwf	___aomod@divisor& (0+255),b
  1509  000426  0E00               	movlw	0
  1510  000428  6F7A               	movwf	(___aomod@divisor+1)& (0+255),b
  1511  00042A  0E00               	movlw	0
  1512  00042C  6F7B               	movwf	(___aomod@divisor+2)& (0+255),b
  1513  00042E  0E00               	movlw	0
  1514  000430  6F7C               	movwf	(___aomod@divisor+3)& (0+255),b
  1515  000432  0E00               	movlw	0
  1516  000434  6F7D               	movwf	(___aomod@divisor+4)& (0+255),b
  1517  000436  0E00               	movlw	0
  1518  000438  6F7E               	movwf	(___aomod@divisor+5)& (0+255),b
  1519  00043A  0E00               	movlw	0
  1520  00043C  6F7F               	movwf	(___aomod@divisor+6)& (0+255),b
  1521  00043E  0E00               	movlw	0
  1522  000440  6F80               	movwf	(___aomod@divisor+7)& (0+255),b
  1523  000442  ECD9  F004         	call	___aomod	;wreg free
  1524  000446  C071  F096         	movff	?___aomod,??_dtoa
  1525  00044A  C072  F097         	movff	?___aomod+1,??_dtoa+1
  1526  00044E  C073  F098         	movff	?___aomod+2,??_dtoa+2
  1527  000452  C074  F099         	movff	?___aomod+3,??_dtoa+3
  1528  000456  C075  F09A         	movff	?___aomod+4,??_dtoa+4
  1529  00045A  C076  F09B         	movff	?___aomod+5,??_dtoa+5
  1530  00045E  C077  F09C         	movff	?___aomod+6,??_dtoa+6
  1531  000462  C078  F09D         	movff	?___aomod+7,??_dtoa+7
  1532  000466  C096  F083         	movff	??_dtoa,abs@a
  1533  00046A  C098  F084         	movff	??_dtoa+2,abs@a+1
  1534  00046E  EC26  F009         	call	_abs	;wreg free
  1535  000472  0100               	movlb	0	; () banked
  1536  000474  5183               	movf	?_abs& (0+255),w,b
  1537  000476  0F30               	addlw	48
  1538  000478  6EDF               	movwf	indf2,c
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1542  00047A  07A0               	decf	dtoa@p& (0+255),f,b
  1543  00047C  A0D8               	btfss	status,0,c
  1544  00047E  07A1               	decf	(dtoa@p+1)& (0+255),f,b
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1548  000480  07A2               	decf	dtoa@w& (0+255),f,b
  1549  000482  A0D8               	btfss	status,0,c
  1550  000484  07A3               	decf	(dtoa@w+1)& (0+255),f,b
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1554  000486  C0A6  F071         	movff	dtoa@n,___aodiv@dividend
  1555  00048A  C0A7  F072         	movff	dtoa@n+1,___aodiv@dividend+1
  1556  00048E  C0A8  F073         	movff	dtoa@n+2,___aodiv@dividend+2
  1557  000492  C0A9  F074         	movff	dtoa@n+3,___aodiv@dividend+3
  1558  000496  C0AA  F075         	movff	dtoa@n+4,___aodiv@dividend+4
  1559  00049A  C0AB  F076         	movff	dtoa@n+5,___aodiv@dividend+5
  1560  00049E  C0AC  F077         	movff	dtoa@n+6,___aodiv@dividend+6
  1561  0004A2  C0AD  F078         	movff	dtoa@n+7,___aodiv@dividend+7
  1562  0004A6  0E0A               	movlw	10
  1563  0004A8  6F79               	movwf	___aodiv@divisor& (0+255),b
  1564  0004AA  0E00               	movlw	0
  1565  0004AC  6F7A               	movwf	(___aodiv@divisor+1)& (0+255),b
  1566  0004AE  0E00               	movlw	0
  1567  0004B0  6F7B               	movwf	(___aodiv@divisor+2)& (0+255),b
  1568  0004B2  0E00               	movlw	0
  1569  0004B4  6F7C               	movwf	(___aodiv@divisor+3)& (0+255),b
  1570  0004B6  0E00               	movlw	0
  1571  0004B8  6F7D               	movwf	(___aodiv@divisor+4)& (0+255),b
  1572  0004BA  0E00               	movlw	0
  1573  0004BC  6F7E               	movwf	(___aodiv@divisor+5)& (0+255),b
  1574  0004BE  0E00               	movlw	0
  1575  0004C0  6F7F               	movwf	(___aodiv@divisor+6)& (0+255),b
  1576  0004C2  0E00               	movlw	0
  1577  0004C4  6F80               	movwf	(___aodiv@divisor+7)& (0+255),b
  1578  0004C6  EC34  F004         	call	___aodiv	;wreg free
  1579  0004CA  C071  F0A6         	movff	?___aodiv,dtoa@n
  1580  0004CE  C072  F0A7         	movff	?___aodiv+1,dtoa@n+1
  1581  0004D2  C073  F0A8         	movff	?___aodiv+2,dtoa@n+2
  1582  0004D6  C074  F0A9         	movff	?___aodiv+3,dtoa@n+3
  1583  0004DA  C075  F0AA         	movff	?___aodiv+4,dtoa@n+4
  1584  0004DE  C076  F0AB         	movff	?___aodiv+5,dtoa@n+5
  1585  0004E2  C077  F0AC         	movff	?___aodiv+6,dtoa@n+6
  1586  0004E6  C078  F0AD         	movff	?___aodiv+7,dtoa@n+7
  1587  0004EA                     l2498:
  1588                           
  1589                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1590  0004EA  0100               	movlb	0	; () banked
  1591  0004EC  BFAF               	btfsc	(dtoa@i+1)& (0+255),7,b
  1592  0004EE  D01F               	goto	u2250
  1593  0004F0  51AF               	movf	(dtoa@i+1)& (0+255),w,b
  1594  0004F2  E103               	bnz	u2210
  1595  0004F4  05AE               	decf	dtoa@i& (0+255),w,b
  1596  0004F6  A0D8               	btfss	status,0,c
  1597  0004F8  D01A               	goto	u2250
  1598  0004FA                     u2210:
  1599                           
  1600                           ; BSR set to: 0
  1601  0004FA  51A6               	movf	dtoa@n& (0+255),w,b
  1602  0004FC  11A7               	iorwf	(dtoa@n+1)& (0+255),w,b
  1603  0004FE  11A8               	iorwf	(dtoa@n+2)& (0+255),w,b
  1604  000500  11A9               	iorwf	(dtoa@n+3)& (0+255),w,b
  1605  000502  11AA               	iorwf	(dtoa@n+4)& (0+255),w,b
  1606  000504  11AB               	iorwf	(dtoa@n+5)& (0+255),w,b
  1607  000506  11AC               	iorwf	(dtoa@n+6)& (0+255),w,b
  1608  000508  11AD               	iorwf	(dtoa@n+7)& (0+255),w,b
  1609  00050A  A4D8               	btfss	status,2,c
  1610  00050C  D771               	goto	l2488
  1611                           
  1612                           ; BSR set to: 0
  1613  00050E  BFA1               	btfsc	(dtoa@p+1)& (0+255),7,b
  1614  000510  D005               	goto	u2230
  1615  000512  51A1               	movf	(dtoa@p+1)& (0+255),w,b
  1616  000514  E102               	bnz	u2231
  1617  000516  05A0               	decf	dtoa@p& (0+255),w,b
  1618  000518  B0D8               	btfsc	status,0,c
  1619  00051A                     u2231:
  1620  00051A  D76A               	goto	l2488
  1621  00051C                     u2230:
  1622                           
  1623                           ; BSR set to: 0
  1624  00051C  BFA3               	btfsc	(dtoa@w+1)& (0+255),7,b
  1625  00051E  D007               	goto	u2250
  1626  000520  51A3               	movf	(dtoa@w+1)& (0+255),w,b
  1627  000522  E103               	bnz	u2240
  1628  000524  05A2               	decf	dtoa@w& (0+255),w,b
  1629  000526  A0D8               	btfss	status,0,c
  1630  000528  D002               	goto	u2250
  1631  00052A                     u2240:
  1632                           
  1633                           ; BSR set to: 0
  1634  00052A  B3E0               	btfsc	_flags& (0+255),1,b
  1635  00052C  D761               	goto	l2488
  1636  00052E                     u2250:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1640  00052E  51A4               	movf	dtoa@s& (0+255),w,b
  1641  000530  11A5               	iorwf	(dtoa@s+1)& (0+255),w,b
  1642  000532  A4D8               	btfss	status,2,c
  1643  000534  D002               	goto	u2270
  1644                           
  1645                           ; BSR set to: 0
  1646  000536  A5E0               	btfss	_flags& (0+255),2,b
  1647  000538  D017               	goto	l2522
  1648  00053A                     u2270:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1652  00053A  07AE               	decf	dtoa@i& (0+255),f,b
  1653  00053C  A0D8               	btfss	status,0,c
  1654  00053E  07AF               	decf	(dtoa@i+1)& (0+255),f,b
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1658  000540  51A4               	movf	dtoa@s& (0+255),w,b
  1659  000542  11A5               	iorwf	(dtoa@s+1)& (0+255),w,b
  1660  000544  A4D8               	btfss	status,2,c
  1661  000546  D004               	goto	l2518
  1662                           
  1663                           ; BSR set to: 0
  1664  000548  0E00               	movlw	0
  1665  00054A  6F9F               	movwf	(_dtoa$1211+1)& (0+255),b
  1666  00054C  0E2B               	movlw	43
  1667  00054E  D003               	goto	L1
  1668  000550                     l2518:
  1669                           
  1670                           ; BSR set to: 0
  1671  000550  0E00               	movlw	0
  1672  000552  6F9F               	movwf	(_dtoa$1211+1)& (0+255),b
  1673  000554  0E2D               	movlw	45
  1674  000556                     L1:
  1675  000556  6F9E               	movwf	_dtoa$1211& (0+255),b
  1676                           
  1677                           ; BSR set to: 0
  1678  000558  0E00               	movlw	low _dbuf
  1679  00055A  25AE               	addwf	dtoa@i& (0+255),w,b
  1680  00055C  6ED9               	movwf	fsr2l,c
  1681  00055E  0E01               	movlw	high _dbuf
  1682  000560  21AF               	addwfc	(dtoa@i+1)& (0+255),w,b
  1683  000562  6EDA               	movwf	fsr2h,c
  1684  000564  C09E  FFDF         	movff	_dtoa$1211,indf2
  1685  000568                     l2522:
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1689  000568  C08C  F081         	movff	dtoa@fp,pad@fp
  1690  00056C  C08D  F082         	movff	dtoa@fp+1,pad@fp+1
  1691  000570  0E00               	movlw	low _dbuf
  1692  000572  25AE               	addwf	dtoa@i& (0+255),w,b
  1693  000574  6F83               	movwf	pad@buf& (0+255),b
  1694  000576  0E01               	movlw	high _dbuf
  1695  000578  21AF               	addwfc	(dtoa@i+1)& (0+255),w,b
  1696  00057A  6F84               	movwf	(pad@buf+1)& (0+255),b
  1697  00057C  C0A2  F085         	movff	dtoa@w,pad@p
  1698  000580  C0A3  F086         	movff	dtoa@w+1,pad@p+1
  1699  000584  EC84  F006         	call	_pad	;wreg free
  1700  000588  C081  F08C         	movff	?_pad,?_dtoa
  1701  00058C  C082  F08D         	movff	?_pad+1,?_dtoa+1
  1702  000590  0012               	return		;funcret
  1703  000592                     __end_of_dtoa:
  1704                           	opt callstack 0
  1705                           
  1706 ;; *************** function _pad *****************
  1707 ;; Defined at:
  1708 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  fp              2   33[BANK0 ] PTR struct _IO_FILE
  1711 ;;		 -> sprintf@f(6), 
  1712 ;;  buf             2   35[BANK0 ] PTR unsigned char 
  1713 ;;		 -> dbuf(32), 
  1714 ;;  p               2   37[BANK0 ] int 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  w               2   42[BANK0 ] int 
  1717 ;;  i               2   40[BANK0 ] int 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  2   33[BANK0 ] int 
  1720 ;; Registers used:
  1721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1727 ;;      Params:         0       6       0       0
  1728 ;;      Locals:         0       4       0       0
  1729 ;;      Temps:          0       1       0       0
  1730 ;;      Totals:         0      11       0       0
  1731 ;;Total ram usage:       11 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:   14
  1734 ;; This function calls:
  1735 ;;		_fputc
  1736 ;;		_fputs
  1737 ;;		_strlen
  1738 ;; This function is called by:
  1739 ;;		_dtoa
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text5
  1744  000D08                     __ptext5:
  1745                           	opt callstack 0
  1746  000D08                     _pad:
  1747                           	opt callstack 12
  1748                           
  1749                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1750                           
  1751                           ;incstack = 0
  1752  000D08  0100               	movlb	0	; () banked
  1753  000D0A  A1E0               	btfss	_flags& (0+255),0,b
  1754  000D0C  D00A               	goto	l2356
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1758  000D0E  C083  F07A         	movff	pad@buf,fputs@s
  1759  000D12  C084  F07B         	movff	pad@buf+1,fputs@s+1
  1760  000D16  C081  F07C         	movff	pad@fp,fputs@fp
  1761  000D1A  C082  F07D         	movff	pad@fp+1,fputs@fp+1
  1762  000D1E  EC60  F008         	call	_fputs	;wreg free
  1763  000D22                     l2356:
  1764                           
  1765                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1766  000D22  0100               	movlb	0	; () banked
  1767  000D24  BF86               	btfsc	(pad@p+1)& (0+255),7,b
  1768  000D26  D005               	goto	l2360
  1769                           
  1770                           ; BSR set to: 0
  1771  000D28  C085  F08A         	movff	pad@p,pad@w
  1772  000D2C  C086  F08B         	movff	pad@p+1,pad@w+1
  1773  000D30  D004               	goto	l282
  1774  000D32                     l2360:
  1775                           
  1776                           ; BSR set to: 0
  1777  000D32  0E00               	movlw	0
  1778  000D34  6F8B               	movwf	(pad@w+1)& (0+255),b
  1779  000D36  0E00               	movlw	0
  1780  000D38  6F8A               	movwf	pad@w& (0+255),b
  1781  000D3A                     l282:
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1785  000D3A  0E00               	movlw	0
  1786  000D3C  6F89               	movwf	(pad@i+1)& (0+255),b
  1787  000D3E  0E00               	movlw	0
  1788  000D40  6F88               	movwf	pad@i& (0+255),b
  1789                           
  1790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1791  000D42  D00D               	goto	l2366
  1792  000D44                     l2362:
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1796  000D44  0E00               	movlw	0
  1797  000D46  6F72               	movwf	(fputc@c+1)& (0+255),b
  1798  000D48  0E20               	movlw	32
  1799  000D4A  6F71               	movwf	fputc@c& (0+255),b
  1800  000D4C  C081  F073         	movff	pad@fp,fputc@fp
  1801  000D50  C082  F074         	movff	pad@fp+1,fputc@fp+1
  1802  000D54  EC33  F006         	call	_fputc	;wreg free
  1803                           
  1804                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1805  000D58  0100               	movlb	0	; () banked
  1806  000D5A  4B88               	infsnz	pad@i& (0+255),f,b
  1807  000D5C  2B89               	incf	(pad@i+1)& (0+255),f,b
  1808  000D5E                     l2366:
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1812  000D5E  518A               	movf	pad@w& (0+255),w,b
  1813  000D60  5D88               	subwf	pad@i& (0+255),w,b
  1814  000D62  5189               	movf	(pad@i+1)& (0+255),w,b
  1815  000D64  0A80               	xorlw	128
  1816  000D66  6F87               	movwf	??_pad& (0+255),b
  1817  000D68  518B               	movf	(pad@w+1)& (0+255),w,b
  1818  000D6A  0A80               	xorlw	128
  1819  000D6C  5987               	subwfb	??_pad& (0+255),w,b
  1820  000D6E  A0D8               	btfss	status,0,c
  1821  000D70  D7E9               	goto	l2362
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1825  000D72  B1E0               	btfsc	_flags& (0+255),0,b
  1826  000D74  D00A               	goto	l2370
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1830  000D76  C083  F07A         	movff	pad@buf,fputs@s
  1831  000D7A  C084  F07B         	movff	pad@buf+1,fputs@s+1
  1832  000D7E  C081  F07C         	movff	pad@fp,fputs@fp
  1833  000D82  C082  F07D         	movff	pad@fp+1,fputs@fp+1
  1834  000D86  EC60  F008         	call	_fputs	;wreg free
  1835  000D8A                     l2370:
  1836                           
  1837                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1838  000D8A  C083  F071         	movff	pad@buf,strlen@s
  1839  000D8E  C084  F072         	movff	pad@buf+1,strlen@s+1
  1840  000D92  EC72  F009         	call	_strlen	;wreg free
  1841  000D96  0100               	movlb	0	; () banked
  1842  000D98  518A               	movf	pad@w& (0+255),w,b
  1843  000D9A  2571               	addwf	?_strlen& (0+255),w,b
  1844  000D9C  6F81               	movwf	?_pad& (0+255),b
  1845  000D9E  518B               	movf	(pad@w+1)& (0+255),w,b
  1846  000DA0  2172               	addwfc	(?_strlen+1)& (0+255),w,b
  1847  000DA2  6F82               	movwf	(?_pad+1)& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850  000DA4  0012               	return		;funcret
  1851  000DA6                     __end_of_pad:
  1852                           	opt callstack 0
  1853                           
  1854 ;; *************** function _strlen *****************
  1855 ;; Defined at:
  1856 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;  s               2   17[BANK0 ] PTR const unsigned char 
  1859 ;;		 -> dbuf(32), 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  a               2   19[BANK0 ] PTR const unsigned char 
  1862 ;;		 -> dbuf(32), 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  2   17[BANK0 ] unsigned int 
  1865 ;; Registers used:
  1866 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1872 ;;      Params:         0       2       0       0
  1873 ;;      Locals:         0       2       0       0
  1874 ;;      Temps:          0       0       0       0
  1875 ;;      Totals:         0       4       0       0
  1876 ;;Total ram usage:        4 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:   11
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_pad
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text6
  1887  0012E4                     __ptext6:
  1888                           	opt callstack 0
  1889  0012E4                     _strlen:
  1890                           	opt callstack 14
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;incstack = 0
  1894  0012E4  C071  F073         	movff	strlen@s,strlen@a
  1895  0012E8  C072  F074         	movff	strlen@s+1,strlen@a+1
  1896  0012EC  D003               	goto	l2340
  1897  0012EE                     l2338:
  1898  0012EE  0100               	movlb	0	; () banked
  1899  0012F0  4B71               	infsnz	strlen@s& (0+255),f,b
  1900  0012F2  2B72               	incf	(strlen@s+1)& (0+255),f,b
  1901  0012F4                     l2340:
  1902  0012F4  C071  FFD9         	movff	strlen@s,fsr2l
  1903  0012F8  C072  FFDA         	movff	strlen@s+1,fsr2h
  1904  0012FC  50DF               	movf	indf2,w,c
  1905  0012FE  A4D8               	btfss	status,2,c
  1906  001300  D7F6               	goto	l2338
  1907  001302  0100               	movlb	0	; () banked
  1908  001304  5173               	movf	strlen@a& (0+255),w,b
  1909  001306  5D71               	subwf	strlen@s& (0+255),w,b
  1910  001308  6F71               	movwf	?_strlen& (0+255),b
  1911  00130A  5174               	movf	(strlen@a+1)& (0+255),w,b
  1912  00130C  5972               	subwfb	(strlen@s+1)& (0+255),w,b
  1913  00130E  6F72               	movwf	(?_strlen+1)& (0+255),b
  1914                           
  1915                           ; BSR set to: 0
  1916  001310  0012               	return		;funcret
  1917  001312                     __end_of_strlen:
  1918                           	opt callstack 0
  1919                           
  1920 ;; *************** function _fputs *****************
  1921 ;; Defined at:
  1922 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  s               2   26[BANK0 ] PTR const unsigned char 
  1925 ;;		 -> dbuf(32), 
  1926 ;;  fp              2   28[BANK0 ] PTR struct _IO_FILE
  1927 ;;		 -> sprintf@f(6), 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  i               2   31[BANK0 ] int 
  1930 ;;  c               1   30[BANK0 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  2   26[BANK0 ] int 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1940 ;;      Params:         0       4       0       0
  1941 ;;      Locals:         0       3       0       0
  1942 ;;      Temps:          0       0       0       0
  1943 ;;      Totals:         0       7       0       0
  1944 ;;Total ram usage:        7 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:   13
  1947 ;; This function calls:
  1948 ;;		_fputc
  1949 ;; This function is called by:
  1950 ;;		_pad
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text7
  1955  0010C0                     __ptext7:
  1956                           	opt callstack 0
  1957  0010C0                     _fputs:
  1958                           	opt callstack 12
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;incstack = 0
  1962  0010C0  0E00               	movlw	0
  1963  0010C2  0100               	movlb	0	; () banked
  1964  0010C4  6F80               	movwf	(fputs@i+1)& (0+255),b
  1965  0010C6  0E00               	movlw	0
  1966  0010C8  6F7F               	movwf	fputs@i& (0+255),b
  1967  0010CA  D00C               	goto	l2334
  1968  0010CC                     l2330:
  1969                           
  1970                           ; BSR set to: 0
  1971  0010CC  C07E  F071         	movff	fputs@c,fputc@c
  1972  0010D0  6B72               	clrf	(fputc@c+1)& (0+255),b
  1973  0010D2  C07C  F073         	movff	fputs@fp,fputc@fp
  1974  0010D6  C07D  F074         	movff	fputs@fp+1,fputc@fp+1
  1975  0010DA  EC33  F006         	call	_fputc	;wreg free
  1976  0010DE  0100               	movlb	0	; () banked
  1977  0010E0  4B7F               	infsnz	fputs@i& (0+255),f,b
  1978  0010E2  2B80               	incf	(fputs@i+1)& (0+255),f,b
  1979  0010E4                     l2334:
  1980                           
  1981                           ; BSR set to: 0
  1982  0010E4  517F               	movf	fputs@i& (0+255),w,b
  1983  0010E6  257A               	addwf	fputs@s& (0+255),w,b
  1984  0010E8  6ED9               	movwf	fsr2l,c
  1985  0010EA  5180               	movf	(fputs@i+1)& (0+255),w,b
  1986  0010EC  217B               	addwfc	(fputs@s+1)& (0+255),w,b
  1987  0010EE  6EDA               	movwf	fsr2h,c
  1988  0010F0  50DF               	movf	indf2,w,c
  1989  0010F2  6F7E               	movwf	fputs@c& (0+255),b
  1990  0010F4  517E               	movf	fputs@c& (0+255),w,b
  1991  0010F6  B4D8               	btfsc	status,2,c
  1992  0010F8  0012               	return	
  1993  0010FA  D7E8               	goto	l2330
  1994  0010FC                     __end_of_fputs:
  1995                           	opt callstack 0
  1996                           
  1997 ;; *************** function _fputc *****************
  1998 ;; Defined at:
  1999 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  c               2   17[BANK0 ] int 
  2002 ;;  fp              2   19[BANK0 ] PTR struct _IO_FILE
  2003 ;;		 -> sprintf@f(6), 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;		None
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  2   17[BANK0 ] int 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2015 ;;      Params:         0       4       0       0
  2016 ;;      Locals:         0       0       0       0
  2017 ;;      Temps:          0       5       0       0
  2018 ;;      Totals:         0       9       0       0
  2019 ;;Total ram usage:        9 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:   12
  2022 ;; This function calls:
  2023 ;;		_putch
  2024 ;; This function is called by:
  2025 ;;		_pad
  2026 ;;		_vfpfcnvrt
  2027 ;;		_fputs
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text8
  2032  000C66                     __ptext8:
  2033                           	opt callstack 0
  2034  000C66                     _fputc:
  2035                           	opt callstack 15
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;incstack = 0
  2039  000C66  0100               	movlb	0	; () banked
  2040  000C68  5173               	movf	fputc@fp& (0+255),w,b
  2041  000C6A  1174               	iorwf	(fputc@fp+1)& (0+255),w,b
  2042  000C6C  B4D8               	btfsc	status,2,c
  2043  000C6E  D004               	goto	u1910
  2044                           
  2045                           ; BSR set to: 0
  2046  000C70  5173               	movf	fputc@fp& (0+255),w,b
  2047  000C72  1174               	iorwf	(fputc@fp+1)& (0+255),w,b
  2048  000C74  A4D8               	btfss	status,2,c
  2049  000C76  D004               	goto	l2320
  2050  000C78                     u1910:
  2051                           
  2052                           ; BSR set to: 0
  2053  000C78  5171               	movf	fputc@c& (0+255),w,b
  2054  000C7A  ECF5  F009         	call	_putch
  2055  000C7E  0012               	return	
  2056  000C80                     l2320:
  2057                           
  2058                           ; BSR set to: 0
  2059  000C80  EE20 F004          	lfsr	2,4
  2060  000C84  5173               	movf	fputc@fp& (0+255),w,b
  2061  000C86  26D9               	addwf	fsr2l,f,c
  2062  000C88  5174               	movf	(fputc@fp+1)& (0+255),w,b
  2063  000C8A  22DA               	addwfc	fsr2h,f,c
  2064  000C8C  50DE               	movf	postinc2,w,c
  2065  000C8E  10DE               	iorwf	postinc2,w,c
  2066  000C90  B4D8               	btfsc	status,2,c
  2067  000C92  D016               	goto	u1930
  2068                           
  2069                           ; BSR set to: 0
  2070  000C94  EE20 F004          	lfsr	2,4
  2071  000C98  5173               	movf	fputc@fp& (0+255),w,b
  2072  000C9A  26D9               	addwf	fsr2l,f,c
  2073  000C9C  5174               	movf	(fputc@fp+1)& (0+255),w,b
  2074  000C9E  22DA               	addwfc	fsr2h,f,c
  2075  000CA0  EE10 F002          	lfsr	1,2
  2076  000CA4  5173               	movf	fputc@fp& (0+255),w,b
  2077  000CA6  26E1               	addwf	fsr1l,f,c
  2078  000CA8  5174               	movf	(fputc@fp+1)& (0+255),w,b
  2079  000CAA  22E2               	addwfc	fsr1h,f,c
  2080  000CAC  50DE               	movf	postinc2,w,c
  2081  000CAE  5CE6               	subwf	postinc1,w,c
  2082  000CB0  50E6               	movf	postinc1,w,c
  2083  000CB2  0A80               	xorlw	128
  2084  000CB4  6F79               	movwf	(??_fputc+4)& (0+255),b
  2085  000CB6  50DE               	movf	postinc2,w,c
  2086  000CB8  0A80               	xorlw	128
  2087  000CBA  5979               	subwfb	(??_fputc+4)& (0+255),w,b
  2088  000CBC  B0D8               	btfsc	status,0,c
  2089  000CBE  0012               	return	
  2090  000CC0                     u1930:
  2091                           
  2092                           ; BSR set to: 0
  2093  000CC0  EE20 F002          	lfsr	2,2
  2094  000CC4  5173               	movf	fputc@fp& (0+255),w,b
  2095  000CC6  26D9               	addwf	fsr2l,f,c
  2096  000CC8  5174               	movf	(fputc@fp+1)& (0+255),w,b
  2097  000CCA  22DA               	addwfc	fsr2h,f,c
  2098  000CCC  CFDE F075          	movff	postinc2,??_fputc
  2099  000CD0  CFDD F076          	movff	postdec2,??_fputc+1
  2100  000CD4  C073  FFD9         	movff	fputc@fp,fsr2l
  2101  000CD8  C074  FFDA         	movff	fputc@fp+1,fsr2h
  2102  000CDC  CFDE F077          	movff	postinc2,??_fputc+2
  2103  000CE0  CFDD F078          	movff	postdec2,??_fputc+3
  2104  000CE4  5175               	movf	??_fputc& (0+255),w,b
  2105  000CE6  2577               	addwf	(??_fputc+2)& (0+255),w,b
  2106  000CE8  6ED9               	movwf	fsr2l,c
  2107  000CEA  5176               	movf	(??_fputc+1)& (0+255),w,b
  2108  000CEC  2178               	addwfc	(??_fputc+3)& (0+255),w,b
  2109  000CEE  6EDA               	movwf	fsr2h,c
  2110  000CF0  C071  FFDF         	movff	fputc@c,indf2
  2111  000CF4  EE20 F002          	lfsr	2,2
  2112  000CF8  5173               	movf	fputc@fp& (0+255),w,b
  2113  000CFA  26D9               	addwf	fsr2l,f,c
  2114  000CFC  5174               	movf	(fputc@fp+1)& (0+255),w,b
  2115  000CFE  22DA               	addwfc	fsr2h,f,c
  2116  000D00  2ADE               	incf	postinc2,f,c
  2117  000D02  0E00               	movlw	0
  2118  000D04  22DD               	addwfc	postdec2,f,c
  2119  000D06  0012               	return		;funcret
  2120  000D08                     __end_of_fputc:
  2121                           	opt callstack 0
  2122                           
  2123 ;; *************** function _putch *****************
  2124 ;; Defined at:
  2125 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  c               1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  c               1    0[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2139 ;;      Params:         0       0       0       0
  2140 ;;      Locals:         0       0       0       0
  2141 ;;      Temps:          0       0       0       0
  2142 ;;      Totals:         0       0       0       0
  2143 ;;Total ram usage:        0 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:   11
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_fputc
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text9
  2154  0013EA                     __ptext9:
  2155                           	opt callstack 0
  2156  0013EA                     _putch:
  2157                           	opt callstack 15
  2158                           
  2159                           ;incstack = 0
  2160  0013EA  0012               	return		;funcret
  2161  0013EC                     __end_of_putch:
  2162                           	opt callstack 0
  2163                           
  2164 ;; *************** function _abs *****************
  2165 ;; Defined at:
  2166 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  a               2   35[BANK0 ] int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  2   35[BANK0 ] int 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:         0       2       0       0
  2181 ;;      Locals:         0       0       0       0
  2182 ;;      Temps:          0       2       0       0
  2183 ;;      Totals:         0       4       0       0
  2184 ;;Total ram usage:        4 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:   11
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_dtoa
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text10
  2195  00124C                     __ptext10:
  2196                           	opt callstack 0
  2197  00124C                     _abs:
  2198                           	opt callstack 15
  2199                           
  2200                           ;incstack = 0
  2201  00124C  0100               	movlb	0	; () banked
  2202  00124E  BF84               	btfsc	(abs@a+1)& (0+255),7,b
  2203  001250  D005               	goto	u2000
  2204  001252  5184               	movf	(abs@a+1)& (0+255),w,b
  2205  001254  E110               	bnz	l1005
  2206  001256  0583               	decf	abs@a& (0+255),w,b
  2207  001258  B0D8               	btfsc	status,0,c
  2208  00125A  D00D               	goto	l1005
  2209  00125C                     u2000:
  2210                           
  2211                           ; BSR set to: 0
  2212  00125C  C083  F085         	movff	abs@a,??_abs
  2213  001260  C084  F086         	movff	abs@a+1,??_abs+1
  2214  001264  1F85               	comf	??_abs& (0+255),f,b
  2215  001266  1F86               	comf	(??_abs+1)& (0+255),f,b
  2216  001268  4B85               	infsnz	??_abs& (0+255),f,b
  2217  00126A  2B86               	incf	(??_abs+1)& (0+255),f,b
  2218  00126C  C085  F083         	movff	??_abs,?_abs
  2219  001270  C086  F084         	movff	??_abs+1,?_abs+1
  2220  001274  0012               	return	
  2221  001276                     l1005:
  2222                           
  2223                           ; BSR set to: 0
  2224  001276  C083  F083         	movff	abs@a,?_abs
  2225  00127A  C084  F084         	movff	abs@a+1,?_abs+1
  2226                           
  2227                           ; BSR set to: 0
  2228  00127E  0012               	return		;funcret
  2229  001280                     __end_of_abs:
  2230                           	opt callstack 0
  2231                           
  2232 ;; *************** function ___aomod *****************
  2233 ;; Defined at:
  2234 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  dividend        8   17[BANK0 ] long long 
  2237 ;;  divisor         8   25[BANK0 ] long long 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  sign            1   34[BANK0 ] unsigned char 
  2240 ;;  counter         1   33[BANK0 ] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  8   17[BANK0 ] long long 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2250 ;;      Params:         0      16       0       0
  2251 ;;      Locals:         0       2       0       0
  2252 ;;      Temps:          0       0       0       0
  2253 ;;      Totals:         0      18       0       0
  2254 ;;Total ram usage:       18 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:   11
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_dtoa
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text11
  2265  0009B2                     __ptext11:
  2266                           	opt callstack 0
  2267  0009B2                     ___aomod:
  2268                           	opt callstack 15
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;incstack = 0
  2272  0009B2  0E00               	movlw	0
  2273  0009B4  0100               	movlb	0	; () banked
  2274  0009B6  6F82               	movwf	___aomod@sign& (0+255),b
  2275                           
  2276                           ; BSR set to: 0
  2277  0009B8  AF78               	btfss	(___aomod@dividend+7)& (0+255),7,b
  2278  0009BA  D012               	goto	l2430
  2279                           
  2280                           ; BSR set to: 0
  2281  0009BC  1F78               	comf	(___aomod@dividend+7)& (0+255),f,b
  2282  0009BE  1F77               	comf	(___aomod@dividend+6)& (0+255),f,b
  2283  0009C0  1F76               	comf	(___aomod@dividend+5)& (0+255),f,b
  2284  0009C2  1F75               	comf	(___aomod@dividend+4)& (0+255),f,b
  2285  0009C4  1F74               	comf	(___aomod@dividend+3)& (0+255),f,b
  2286  0009C6  1F73               	comf	(___aomod@dividend+2)& (0+255),f,b
  2287  0009C8  1F72               	comf	(___aomod@dividend+1)& (0+255),f,b
  2288  0009CA  6D71               	negf	___aomod@dividend& (0+255),b
  2289  0009CC  0E00               	movlw	0
  2290  0009CE  2372               	addwfc	(___aomod@dividend+1)& (0+255),f,b
  2291  0009D0  2373               	addwfc	(___aomod@dividend+2)& (0+255),f,b
  2292  0009D2  2374               	addwfc	(___aomod@dividend+3)& (0+255),f,b
  2293  0009D4  2375               	addwfc	(___aomod@dividend+4)& (0+255),f,b
  2294  0009D6  2376               	addwfc	(___aomod@dividend+5)& (0+255),f,b
  2295  0009D8  2377               	addwfc	(___aomod@dividend+6)& (0+255),f,b
  2296  0009DA  2378               	addwfc	(___aomod@dividend+7)& (0+255),f,b
  2297                           
  2298                           ; BSR set to: 0
  2299  0009DC  0E01               	movlw	1
  2300  0009DE  6F82               	movwf	___aomod@sign& (0+255),b
  2301  0009E0                     l2430:
  2302                           
  2303                           ; BSR set to: 0
  2304  0009E0  AF80               	btfss	(___aomod@divisor+7)& (0+255),7,b
  2305  0009E2  D010               	goto	l2434
  2306                           
  2307                           ; BSR set to: 0
  2308  0009E4  1F80               	comf	(___aomod@divisor+7)& (0+255),f,b
  2309  0009E6  1F7F               	comf	(___aomod@divisor+6)& (0+255),f,b
  2310  0009E8  1F7E               	comf	(___aomod@divisor+5)& (0+255),f,b
  2311  0009EA  1F7D               	comf	(___aomod@divisor+4)& (0+255),f,b
  2312  0009EC  1F7C               	comf	(___aomod@divisor+3)& (0+255),f,b
  2313  0009EE  1F7B               	comf	(___aomod@divisor+2)& (0+255),f,b
  2314  0009F0  1F7A               	comf	(___aomod@divisor+1)& (0+255),f,b
  2315  0009F2  6D79               	negf	___aomod@divisor& (0+255),b
  2316  0009F4  0E00               	movlw	0
  2317  0009F6  237A               	addwfc	(___aomod@divisor+1)& (0+255),f,b
  2318  0009F8  237B               	addwfc	(___aomod@divisor+2)& (0+255),f,b
  2319  0009FA  237C               	addwfc	(___aomod@divisor+3)& (0+255),f,b
  2320  0009FC  237D               	addwfc	(___aomod@divisor+4)& (0+255),f,b
  2321  0009FE  237E               	addwfc	(___aomod@divisor+5)& (0+255),f,b
  2322  000A00  237F               	addwfc	(___aomod@divisor+6)& (0+255),f,b
  2323  000A02  2380               	addwfc	(___aomod@divisor+7)& (0+255),f,b
  2324  000A04                     l2434:
  2325                           
  2326                           ; BSR set to: 0
  2327  000A04  5179               	movf	___aomod@divisor& (0+255),w,b
  2328  000A06  117A               	iorwf	(___aomod@divisor+1)& (0+255),w,b
  2329  000A08  117B               	iorwf	(___aomod@divisor+2)& (0+255),w,b
  2330  000A0A  117C               	iorwf	(___aomod@divisor+3)& (0+255),w,b
  2331  000A0C  117D               	iorwf	(___aomod@divisor+4)& (0+255),w,b
  2332  000A0E  117E               	iorwf	(___aomod@divisor+5)& (0+255),w,b
  2333  000A10  117F               	iorwf	(___aomod@divisor+6)& (0+255),w,b
  2334  000A12  1180               	iorwf	(___aomod@divisor+7)& (0+255),w,b
  2335  000A14  B4D8               	btfsc	status,2,c
  2336  000A16  D03C               	goto	l2450
  2337                           
  2338                           ; BSR set to: 0
  2339  000A18  0E01               	movlw	1
  2340  000A1A  6F81               	movwf	___aomod@counter& (0+255),b
  2341  000A1C  D00A               	goto	l2440
  2342  000A1E                     l2438:
  2343                           
  2344                           ; BSR set to: 0
  2345  000A1E  90D8               	bcf	status,0,c
  2346  000A20  3779               	rlcf	___aomod@divisor& (0+255),f,b
  2347  000A22  377A               	rlcf	(___aomod@divisor+1)& (0+255),f,b
  2348  000A24  377B               	rlcf	(___aomod@divisor+2)& (0+255),f,b
  2349  000A26  377C               	rlcf	(___aomod@divisor+3)& (0+255),f,b
  2350  000A28  377D               	rlcf	(___aomod@divisor+4)& (0+255),f,b
  2351  000A2A  377E               	rlcf	(___aomod@divisor+5)& (0+255),f,b
  2352  000A2C  377F               	rlcf	(___aomod@divisor+6)& (0+255),f,b
  2353  000A2E  3780               	rlcf	(___aomod@divisor+7)& (0+255),f,b
  2354  000A30  2B81               	incf	___aomod@counter& (0+255),f,b
  2355  000A32                     l2440:
  2356                           
  2357                           ; BSR set to: 0
  2358  000A32  AF80               	btfss	(___aomod@divisor+7)& (0+255),7,b
  2359  000A34  D7F4               	goto	l2438
  2360  000A36                     u2110:
  2361                           
  2362                           ; BSR set to: 0
  2363  000A36  5179               	movf	___aomod@divisor& (0+255),w,b
  2364  000A38  5D71               	subwf	___aomod@dividend& (0+255),w,b
  2365  000A3A  517A               	movf	(___aomod@divisor+1)& (0+255),w,b
  2366  000A3C  5972               	subwfb	(___aomod@dividend+1)& (0+255),w,b
  2367  000A3E  517B               	movf	(___aomod@divisor+2)& (0+255),w,b
  2368  000A40  5973               	subwfb	(___aomod@dividend+2)& (0+255),w,b
  2369  000A42  517C               	movf	(___aomod@divisor+3)& (0+255),w,b
  2370  000A44  5974               	subwfb	(___aomod@dividend+3)& (0+255),w,b
  2371  000A46  517D               	movf	(___aomod@divisor+4)& (0+255),w,b
  2372  000A48  5975               	subwfb	(___aomod@dividend+4)& (0+255),w,b
  2373  000A4A  517E               	movf	(___aomod@divisor+5)& (0+255),w,b
  2374  000A4C  5976               	subwfb	(___aomod@dividend+5)& (0+255),w,b
  2375  000A4E  517F               	movf	(___aomod@divisor+6)& (0+255),w,b
  2376  000A50  5977               	subwfb	(___aomod@dividend+6)& (0+255),w,b
  2377  000A52  5180               	movf	(___aomod@divisor+7)& (0+255),w,b
  2378  000A54  5978               	subwfb	(___aomod@dividend+7)& (0+255),w,b
  2379  000A56  A0D8               	btfss	status,0,c
  2380  000A58  D010               	goto	l2446
  2381                           
  2382                           ; BSR set to: 0
  2383  000A5A  5179               	movf	___aomod@divisor& (0+255),w,b
  2384  000A5C  5F71               	subwf	___aomod@dividend& (0+255),f,b
  2385  000A5E  517A               	movf	(___aomod@divisor+1)& (0+255),w,b
  2386  000A60  5B72               	subwfb	(___aomod@dividend+1)& (0+255),f,b
  2387  000A62  517B               	movf	(___aomod@divisor+2)& (0+255),w,b
  2388  000A64  5B73               	subwfb	(___aomod@dividend+2)& (0+255),f,b
  2389  000A66  517C               	movf	(___aomod@divisor+3)& (0+255),w,b
  2390  000A68  5B74               	subwfb	(___aomod@dividend+3)& (0+255),f,b
  2391  000A6A  517D               	movf	(___aomod@divisor+4)& (0+255),w,b
  2392  000A6C  5B75               	subwfb	(___aomod@dividend+4)& (0+255),f,b
  2393  000A6E  517E               	movf	(___aomod@divisor+5)& (0+255),w,b
  2394  000A70  5B76               	subwfb	(___aomod@dividend+5)& (0+255),f,b
  2395  000A72  517F               	movf	(___aomod@divisor+6)& (0+255),w,b
  2396  000A74  5B77               	subwfb	(___aomod@dividend+6)& (0+255),f,b
  2397  000A76  5180               	movf	(___aomod@divisor+7)& (0+255),w,b
  2398  000A78  5B78               	subwfb	(___aomod@dividend+7)& (0+255),f,b
  2399  000A7A                     l2446:
  2400                           
  2401                           ; BSR set to: 0
  2402  000A7A  90D8               	bcf	status,0,c
  2403  000A7C  3380               	rrcf	(___aomod@divisor+7)& (0+255),f,b
  2404  000A7E  337F               	rrcf	(___aomod@divisor+6)& (0+255),f,b
  2405  000A80  337E               	rrcf	(___aomod@divisor+5)& (0+255),f,b
  2406  000A82  337D               	rrcf	(___aomod@divisor+4)& (0+255),f,b
  2407  000A84  337C               	rrcf	(___aomod@divisor+3)& (0+255),f,b
  2408  000A86  337B               	rrcf	(___aomod@divisor+2)& (0+255),f,b
  2409  000A88  337A               	rrcf	(___aomod@divisor+1)& (0+255),f,b
  2410  000A8A  3379               	rrcf	___aomod@divisor& (0+255),f,b
  2411                           
  2412                           ; BSR set to: 0
  2413  000A8C  2F81               	decfsz	___aomod@counter& (0+255),f,b
  2414  000A8E  D7D3               	goto	u2110
  2415  000A90                     l2450:
  2416                           
  2417                           ; BSR set to: 0
  2418  000A90  5182               	movf	___aomod@sign& (0+255),w,b
  2419  000A92  B4D8               	btfsc	status,2,c
  2420  000A94  D010               	goto	l2454
  2421                           
  2422                           ; BSR set to: 0
  2423  000A96  1F78               	comf	(___aomod@dividend+7)& (0+255),f,b
  2424  000A98  1F77               	comf	(___aomod@dividend+6)& (0+255),f,b
  2425  000A9A  1F76               	comf	(___aomod@dividend+5)& (0+255),f,b
  2426  000A9C  1F75               	comf	(___aomod@dividend+4)& (0+255),f,b
  2427  000A9E  1F74               	comf	(___aomod@dividend+3)& (0+255),f,b
  2428  000AA0  1F73               	comf	(___aomod@dividend+2)& (0+255),f,b
  2429  000AA2  1F72               	comf	(___aomod@dividend+1)& (0+255),f,b
  2430  000AA4  6D71               	negf	___aomod@dividend& (0+255),b
  2431  000AA6  0E00               	movlw	0
  2432  000AA8  2372               	addwfc	(___aomod@dividend+1)& (0+255),f,b
  2433  000AAA  2373               	addwfc	(___aomod@dividend+2)& (0+255),f,b
  2434  000AAC  2374               	addwfc	(___aomod@dividend+3)& (0+255),f,b
  2435  000AAE  2375               	addwfc	(___aomod@dividend+4)& (0+255),f,b
  2436  000AB0  2376               	addwfc	(___aomod@dividend+5)& (0+255),f,b
  2437  000AB2  2377               	addwfc	(___aomod@dividend+6)& (0+255),f,b
  2438  000AB4  2378               	addwfc	(___aomod@dividend+7)& (0+255),f,b
  2439  000AB6                     l2454:
  2440                           
  2441                           ; BSR set to: 0
  2442  000AB6  C071  F071         	movff	___aomod@dividend,?___aomod
  2443  000ABA  C072  F072         	movff	___aomod@dividend+1,?___aomod+1
  2444  000ABE  C073  F073         	movff	___aomod@dividend+2,?___aomod+2
  2445  000AC2  C074  F074         	movff	___aomod@dividend+3,?___aomod+3
  2446  000AC6  C075  F075         	movff	___aomod@dividend+4,?___aomod+4
  2447  000ACA  C076  F076         	movff	___aomod@dividend+5,?___aomod+5
  2448  000ACE  C077  F077         	movff	___aomod@dividend+6,?___aomod+6
  2449  000AD2  C078  F078         	movff	___aomod@dividend+7,?___aomod+7
  2450                           
  2451                           ; BSR set to: 0
  2452  000AD6  0012               	return		;funcret
  2453  000AD8                     __end_of___aomod:
  2454                           	opt callstack 0
  2455                           
  2456 ;; *************** function ___aodiv *****************
  2457 ;; Defined at:
  2458 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  dividend        8   17[BANK0 ] long long 
  2461 ;;  divisor         8   25[BANK0 ] long long 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  quotient        8   35[BANK0 ] long long 
  2464 ;;  sign            1   34[BANK0 ] unsigned char 
  2465 ;;  counter         1   33[BANK0 ] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  8   17[BANK0 ] long long 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2475 ;;      Params:         0      16       0       0
  2476 ;;      Locals:         0      10       0       0
  2477 ;;      Temps:          0       0       0       0
  2478 ;;      Totals:         0      26       0       0
  2479 ;;Total ram usage:       26 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:   11
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_dtoa
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text12
  2490  000868                     __ptext12:
  2491                           	opt callstack 0
  2492  000868                     ___aodiv:
  2493                           	opt callstack 15
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;incstack = 0
  2497  000868  0E00               	movlw	0
  2498  00086A  0100               	movlb	0	; () banked
  2499  00086C  6F82               	movwf	___aodiv@sign& (0+255),b
  2500                           
  2501                           ; BSR set to: 0
  2502  00086E  AF80               	btfss	(___aodiv@divisor+7)& (0+255),7,b
  2503  000870  D012               	goto	l2386
  2504                           
  2505                           ; BSR set to: 0
  2506  000872  1F80               	comf	(___aodiv@divisor+7)& (0+255),f,b
  2507  000874  1F7F               	comf	(___aodiv@divisor+6)& (0+255),f,b
  2508  000876  1F7E               	comf	(___aodiv@divisor+5)& (0+255),f,b
  2509  000878  1F7D               	comf	(___aodiv@divisor+4)& (0+255),f,b
  2510  00087A  1F7C               	comf	(___aodiv@divisor+3)& (0+255),f,b
  2511  00087C  1F7B               	comf	(___aodiv@divisor+2)& (0+255),f,b
  2512  00087E  1F7A               	comf	(___aodiv@divisor+1)& (0+255),f,b
  2513  000880  6D79               	negf	___aodiv@divisor& (0+255),b
  2514  000882  0E00               	movlw	0
  2515  000884  237A               	addwfc	(___aodiv@divisor+1)& (0+255),f,b
  2516  000886  237B               	addwfc	(___aodiv@divisor+2)& (0+255),f,b
  2517  000888  237C               	addwfc	(___aodiv@divisor+3)& (0+255),f,b
  2518  00088A  237D               	addwfc	(___aodiv@divisor+4)& (0+255),f,b
  2519  00088C  237E               	addwfc	(___aodiv@divisor+5)& (0+255),f,b
  2520  00088E  237F               	addwfc	(___aodiv@divisor+6)& (0+255),f,b
  2521  000890  2380               	addwfc	(___aodiv@divisor+7)& (0+255),f,b
  2522                           
  2523                           ; BSR set to: 0
  2524  000892  0E01               	movlw	1
  2525  000894  6F82               	movwf	___aodiv@sign& (0+255),b
  2526  000896                     l2386:
  2527                           
  2528                           ; BSR set to: 0
  2529  000896  AF78               	btfss	(___aodiv@dividend+7)& (0+255),7,b
  2530  000898  D012               	goto	l2392
  2531                           
  2532                           ; BSR set to: 0
  2533  00089A  1F78               	comf	(___aodiv@dividend+7)& (0+255),f,b
  2534  00089C  1F77               	comf	(___aodiv@dividend+6)& (0+255),f,b
  2535  00089E  1F76               	comf	(___aodiv@dividend+5)& (0+255),f,b
  2536  0008A0  1F75               	comf	(___aodiv@dividend+4)& (0+255),f,b
  2537  0008A2  1F74               	comf	(___aodiv@dividend+3)& (0+255),f,b
  2538  0008A4  1F73               	comf	(___aodiv@dividend+2)& (0+255),f,b
  2539  0008A6  1F72               	comf	(___aodiv@dividend+1)& (0+255),f,b
  2540  0008A8  6D71               	negf	___aodiv@dividend& (0+255),b
  2541  0008AA  0E00               	movlw	0
  2542  0008AC  2372               	addwfc	(___aodiv@dividend+1)& (0+255),f,b
  2543  0008AE  2373               	addwfc	(___aodiv@dividend+2)& (0+255),f,b
  2544  0008B0  2374               	addwfc	(___aodiv@dividend+3)& (0+255),f,b
  2545  0008B2  2375               	addwfc	(___aodiv@dividend+4)& (0+255),f,b
  2546  0008B4  2376               	addwfc	(___aodiv@dividend+5)& (0+255),f,b
  2547  0008B6  2377               	addwfc	(___aodiv@dividend+6)& (0+255),f,b
  2548  0008B8  2378               	addwfc	(___aodiv@dividend+7)& (0+255),f,b
  2549                           
  2550                           ; BSR set to: 0
  2551  0008BA  0E01               	movlw	1
  2552  0008BC  1B82               	xorwf	___aodiv@sign& (0+255),f,b
  2553  0008BE                     l2392:
  2554                           
  2555                           ; BSR set to: 0
  2556  0008BE  EE20  F083         	lfsr	2,___aodiv@quotient
  2557  0008C2  0E07               	movlw	7
  2558  0008C4                     u2031:
  2559  0008C4  6ADE               	clrf	postinc2,c
  2560  0008C6  06E8               	decf	wreg,f,c
  2561  0008C8  E2FD               	bc	u2031
  2562                           
  2563                           ; BSR set to: 0
  2564  0008CA  5179               	movf	___aodiv@divisor& (0+255),w,b
  2565  0008CC  117A               	iorwf	(___aodiv@divisor+1)& (0+255),w,b
  2566  0008CE  117B               	iorwf	(___aodiv@divisor+2)& (0+255),w,b
  2567  0008D0  117C               	iorwf	(___aodiv@divisor+3)& (0+255),w,b
  2568  0008D2  117D               	iorwf	(___aodiv@divisor+4)& (0+255),w,b
  2569  0008D4  117E               	iorwf	(___aodiv@divisor+5)& (0+255),w,b
  2570  0008D6  117F               	iorwf	(___aodiv@divisor+6)& (0+255),w,b
  2571  0008D8  1180               	iorwf	(___aodiv@divisor+7)& (0+255),w,b
  2572  0008DA  B4D8               	btfsc	status,2,c
  2573  0008DC  D046               	goto	l2414
  2574                           
  2575                           ; BSR set to: 0
  2576  0008DE  0E01               	movlw	1
  2577  0008E0  6F81               	movwf	___aodiv@counter& (0+255),b
  2578  0008E2  D00A               	goto	l2400
  2579  0008E4                     l2398:
  2580                           
  2581                           ; BSR set to: 0
  2582  0008E4  90D8               	bcf	status,0,c
  2583  0008E6  3779               	rlcf	___aodiv@divisor& (0+255),f,b
  2584  0008E8  377A               	rlcf	(___aodiv@divisor+1)& (0+255),f,b
  2585  0008EA  377B               	rlcf	(___aodiv@divisor+2)& (0+255),f,b
  2586  0008EC  377C               	rlcf	(___aodiv@divisor+3)& (0+255),f,b
  2587  0008EE  377D               	rlcf	(___aodiv@divisor+4)& (0+255),f,b
  2588  0008F0  377E               	rlcf	(___aodiv@divisor+5)& (0+255),f,b
  2589  0008F2  377F               	rlcf	(___aodiv@divisor+6)& (0+255),f,b
  2590  0008F4  3780               	rlcf	(___aodiv@divisor+7)& (0+255),f,b
  2591  0008F6  2B81               	incf	___aodiv@counter& (0+255),f,b
  2592  0008F8                     l2400:
  2593                           
  2594                           ; BSR set to: 0
  2595  0008F8  AF80               	btfss	(___aodiv@divisor+7)& (0+255),7,b
  2596  0008FA  D7F4               	goto	l2398
  2597  0008FC                     u2050:
  2598                           
  2599                           ; BSR set to: 0
  2600  0008FC  90D8               	bcf	status,0,c
  2601  0008FE  3783               	rlcf	___aodiv@quotient& (0+255),f,b
  2602  000900  3784               	rlcf	(___aodiv@quotient+1)& (0+255),f,b
  2603  000902  3785               	rlcf	(___aodiv@quotient+2)& (0+255),f,b
  2604  000904  3786               	rlcf	(___aodiv@quotient+3)& (0+255),f,b
  2605  000906  3787               	rlcf	(___aodiv@quotient+4)& (0+255),f,b
  2606  000908  3788               	rlcf	(___aodiv@quotient+5)& (0+255),f,b
  2607  00090A  3789               	rlcf	(___aodiv@quotient+6)& (0+255),f,b
  2608  00090C  378A               	rlcf	(___aodiv@quotient+7)& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611  00090E  5179               	movf	___aodiv@divisor& (0+255),w,b
  2612  000910  5D71               	subwf	___aodiv@dividend& (0+255),w,b
  2613  000912  517A               	movf	(___aodiv@divisor+1)& (0+255),w,b
  2614  000914  5972               	subwfb	(___aodiv@dividend+1)& (0+255),w,b
  2615  000916  517B               	movf	(___aodiv@divisor+2)& (0+255),w,b
  2616  000918  5973               	subwfb	(___aodiv@dividend+2)& (0+255),w,b
  2617  00091A  517C               	movf	(___aodiv@divisor+3)& (0+255),w,b
  2618  00091C  5974               	subwfb	(___aodiv@dividend+3)& (0+255),w,b
  2619  00091E  517D               	movf	(___aodiv@divisor+4)& (0+255),w,b
  2620  000920  5975               	subwfb	(___aodiv@dividend+4)& (0+255),w,b
  2621  000922  517E               	movf	(___aodiv@divisor+5)& (0+255),w,b
  2622  000924  5976               	subwfb	(___aodiv@dividend+5)& (0+255),w,b
  2623  000926  517F               	movf	(___aodiv@divisor+6)& (0+255),w,b
  2624  000928  5977               	subwfb	(___aodiv@dividend+6)& (0+255),w,b
  2625  00092A  5180               	movf	(___aodiv@divisor+7)& (0+255),w,b
  2626  00092C  5978               	subwfb	(___aodiv@dividend+7)& (0+255),w,b
  2627  00092E  A0D8               	btfss	status,0,c
  2628  000930  D011               	goto	l2410
  2629                           
  2630                           ; BSR set to: 0
  2631  000932  5179               	movf	___aodiv@divisor& (0+255),w,b
  2632  000934  5F71               	subwf	___aodiv@dividend& (0+255),f,b
  2633  000936  517A               	movf	(___aodiv@divisor+1)& (0+255),w,b
  2634  000938  5B72               	subwfb	(___aodiv@dividend+1)& (0+255),f,b
  2635  00093A  517B               	movf	(___aodiv@divisor+2)& (0+255),w,b
  2636  00093C  5B73               	subwfb	(___aodiv@dividend+2)& (0+255),f,b
  2637  00093E  517C               	movf	(___aodiv@divisor+3)& (0+255),w,b
  2638  000940  5B74               	subwfb	(___aodiv@dividend+3)& (0+255),f,b
  2639  000942  517D               	movf	(___aodiv@divisor+4)& (0+255),w,b
  2640  000944  5B75               	subwfb	(___aodiv@dividend+4)& (0+255),f,b
  2641  000946  517E               	movf	(___aodiv@divisor+5)& (0+255),w,b
  2642  000948  5B76               	subwfb	(___aodiv@dividend+5)& (0+255),f,b
  2643  00094A  517F               	movf	(___aodiv@divisor+6)& (0+255),w,b
  2644  00094C  5B77               	subwfb	(___aodiv@dividend+6)& (0+255),f,b
  2645  00094E  5180               	movf	(___aodiv@divisor+7)& (0+255),w,b
  2646  000950  5B78               	subwfb	(___aodiv@dividend+7)& (0+255),f,b
  2647                           
  2648                           ; BSR set to: 0
  2649  000952  8183               	bsf	___aodiv@quotient& (0+255),0,b
  2650  000954                     l2410:
  2651                           
  2652                           ; BSR set to: 0
  2653  000954  90D8               	bcf	status,0,c
  2654  000956  3380               	rrcf	(___aodiv@divisor+7)& (0+255),f,b
  2655  000958  337F               	rrcf	(___aodiv@divisor+6)& (0+255),f,b
  2656  00095A  337E               	rrcf	(___aodiv@divisor+5)& (0+255),f,b
  2657  00095C  337D               	rrcf	(___aodiv@divisor+4)& (0+255),f,b
  2658  00095E  337C               	rrcf	(___aodiv@divisor+3)& (0+255),f,b
  2659  000960  337B               	rrcf	(___aodiv@divisor+2)& (0+255),f,b
  2660  000962  337A               	rrcf	(___aodiv@divisor+1)& (0+255),f,b
  2661  000964  3379               	rrcf	___aodiv@divisor& (0+255),f,b
  2662                           
  2663                           ; BSR set to: 0
  2664  000966  2F81               	decfsz	___aodiv@counter& (0+255),f,b
  2665  000968  D7C9               	goto	u2050
  2666  00096A                     l2414:
  2667                           
  2668                           ; BSR set to: 0
  2669  00096A  5182               	movf	___aodiv@sign& (0+255),w,b
  2670  00096C  B4D8               	btfsc	status,2,c
  2671  00096E  D010               	goto	l2418
  2672                           
  2673                           ; BSR set to: 0
  2674  000970  1F8A               	comf	(___aodiv@quotient+7)& (0+255),f,b
  2675  000972  1F89               	comf	(___aodiv@quotient+6)& (0+255),f,b
  2676  000974  1F88               	comf	(___aodiv@quotient+5)& (0+255),f,b
  2677  000976  1F87               	comf	(___aodiv@quotient+4)& (0+255),f,b
  2678  000978  1F86               	comf	(___aodiv@quotient+3)& (0+255),f,b
  2679  00097A  1F85               	comf	(___aodiv@quotient+2)& (0+255),f,b
  2680  00097C  1F84               	comf	(___aodiv@quotient+1)& (0+255),f,b
  2681  00097E  6D83               	negf	___aodiv@quotient& (0+255),b
  2682  000980  0E00               	movlw	0
  2683  000982  2384               	addwfc	(___aodiv@quotient+1)& (0+255),f,b
  2684  000984  2385               	addwfc	(___aodiv@quotient+2)& (0+255),f,b
  2685  000986  2386               	addwfc	(___aodiv@quotient+3)& (0+255),f,b
  2686  000988  2387               	addwfc	(___aodiv@quotient+4)& (0+255),f,b
  2687  00098A  2388               	addwfc	(___aodiv@quotient+5)& (0+255),f,b
  2688  00098C  2389               	addwfc	(___aodiv@quotient+6)& (0+255),f,b
  2689  00098E  238A               	addwfc	(___aodiv@quotient+7)& (0+255),f,b
  2690  000990                     l2418:
  2691                           
  2692                           ; BSR set to: 0
  2693  000990  C083  F071         	movff	___aodiv@quotient,?___aodiv
  2694  000994  C084  F072         	movff	___aodiv@quotient+1,?___aodiv+1
  2695  000998  C085  F073         	movff	___aodiv@quotient+2,?___aodiv+2
  2696  00099C  C086  F074         	movff	___aodiv@quotient+3,?___aodiv+3
  2697  0009A0  C087  F075         	movff	___aodiv@quotient+4,?___aodiv+4
  2698  0009A4  C088  F076         	movff	___aodiv@quotient+5,?___aodiv+5
  2699  0009A8  C089  F077         	movff	___aodiv@quotient+6,?___aodiv+6
  2700  0009AC  C08A  F078         	movff	___aodiv@quotient+7,?___aodiv+7
  2701                           
  2702                           ; BSR set to: 0
  2703  0009B0  0012               	return		;funcret
  2704  0009B2                     __end_of___aodiv:
  2705                           	opt callstack 0
  2706                           
  2707 ;; *************** function _setup *****************
  2708 ;; Defined at:
  2709 ;;		line 35 in file "main.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       0       0       0
  2724 ;;      Locals:         0       0       0       0
  2725 ;;      Temps:          0       0       0       0
  2726 ;;      Totals:         0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:   15
  2730 ;; This function calls:
  2731 ;;		_init_LCD
  2732 ;;		_init_RFID
  2733 ;;		_init_sensors
  2734 ;; This function is called by:
  2735 ;;		_main
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text13
  2740  001360                     __ptext13:
  2741                           	opt callstack 0
  2742  001360                     _setup:
  2743                           	opt callstack 15
  2744                           
  2745                           ;main.c: 38:     OSCCON = 0x72;
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;incstack = 0
  2749  001360  0E72               	movlw	114
  2750  001362  6ED3               	movwf	4051,c	;volatile
  2751  001364                     l51:
  2752  001364  A4D3               	btfss	4051,2,c	;volatile
  2753  001366  D7FE               	goto	l51
  2754                           
  2755                           ;main.c: 40:     INTCONbits.GIEH = 1;
  2756  001368  8EF2               	bsf	4082,7,c	;volatile
  2757                           
  2758                           ;main.c: 41:     INTCONbits.GIEL = 1;
  2759  00136A  8CF2               	bsf	4082,6,c	;volatile
  2760                           
  2761                           ;main.c: 42:     RCONbits.IPEN=1;
  2762  00136C  8ED0               	bsf	4048,7,c	;volatile
  2763                           
  2764                           ;main.c: 45:     init_LCD();
  2765  00136E  EC6C  F005         	call	_init_LCD	;wreg free
  2766                           
  2767                           ;main.c: 46:     init_RFID();
  2768  001372  ECCC  F009         	call	_init_RFID	;wreg free
  2769                           
  2770                           ;main.c: 47:     init_sensors();
  2771  001376  ECD8  F009         	call	_init_sensors	;wreg free
  2772                           
  2773                           ;main.c: 49:     TRISDbits.RD2 = 1;
  2774  00137A  8495               	bsf	3989,2,c	;volatile
  2775  00137C  0012               	return		;funcret
  2776  00137E                     __end_of_setup:
  2777                           	opt callstack 0
  2778                           
  2779 ;; *************** function _init_sensors *****************
  2780 ;; Defined at:
  2781 ;;		line 13 in file "signal_processing.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2795 ;;      Params:         0       0       0       0
  2796 ;;      Locals:         0       0       0       0
  2797 ;;      Temps:          0       0       0       0
  2798 ;;      Totals:         0       0       0       0
  2799 ;;Total ram usage:        0 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:   11
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_setup
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text14
  2810  0013B0                     __ptext14:
  2811                           	opt callstack 0
  2812  0013B0                     _init_sensors:
  2813                           	opt callstack 18
  2814                           
  2815                           ;signal_processing.c: 16:     TRISCbits.RC1 = 1;
  2816                           
  2817                           ;incstack = 0
  2818  0013B0  8294               	bsf	3988,1,c	;volatile
  2819                           
  2820                           ;signal_processing.c: 17:     TRISCbits.RC2 = 1;
  2821  0013B2  8494               	bsf	3988,2,c	;volatile
  2822                           
  2823                           ;signal_processing.c: 20:     CCP1CON = 00000100;
  2824  0013B4  0E40               	movlw	64
  2825  0013B6  6EBD               	movwf	4029,c	;volatile
  2826                           
  2827                           ;signal_processing.c: 21:     CCP2CON = 00000100;
  2828  0013B8  0E40               	movlw	64
  2829  0013BA  6EBA               	movwf	4026,c	;volatile
  2830                           
  2831                           ;signal_processing.c: 23:     T1CONbits.TMR1ON = 1;
  2832  0013BC  80CD               	bsf	4045,0,c	;volatile
  2833  0013BE  0012               	return		;funcret
  2834  0013C0                     __end_of_init_sensors:
  2835                           	opt callstack 0
  2836                           
  2837 ;; *************** function _init_RFID *****************
  2838 ;; Defined at:
  2839 ;;		line 13 in file "RFID.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;		None
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;		None
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg, status,2
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2853 ;;      Params:         0       0       0       0
  2854 ;;      Locals:         0       0       0       0
  2855 ;;      Temps:          0       0       0       0
  2856 ;;      Totals:         0       0       0       0
  2857 ;;Total ram usage:        0 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:   11
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_setup
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text15
  2868  001398                     __ptext15:
  2869                           	opt callstack 0
  2870  001398                     _init_RFID:
  2871                           	opt callstack 18
  2872                           
  2873                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2874                           
  2875                           ;incstack = 0
  2876  001398  8E94               	bsf	3988,7,c	;volatile
  2877                           
  2878                           ;RFID.c: 19:     SPBRG = 203;
  2879  00139A  0ECB               	movlw	203
  2880  00139C  6EAF               	movwf	4015,c	;volatile
  2881                           
  2882                           ;RFID.c: 20:     SPBRGH = 0;
  2883  00139E  0E00               	movlw	0
  2884  0013A0  6EB0               	movwf	4016,c	;volatile
  2885                           
  2886                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2887  0013A2  86AA               	bsf	4010,3,c	;volatile
  2888                           
  2889                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2890  0013A4  84AC               	bsf	4012,2,c	;volatile
  2891                           
  2892                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2893  0013A6  88AB               	bsf	4011,4,c	;volatile
  2894                           
  2895                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2896  0013A8  8EAB               	bsf	4011,7,c	;volatile
  2897                           
  2898                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2899  0013AA  8AAC               	bsf	4012,5,c	;volatile
  2900                           
  2901                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2902  0013AC  8A9D               	bsf	3997,5,c	;volatile
  2903  0013AE  0012               	return		;funcret
  2904  0013B0                     __end_of_init_RFID:
  2905                           	opt callstack 0
  2906                           
  2907 ;; *************** function _init_LCD *****************
  2908 ;; Defined at:
  2909 ;;		line 56 in file "LCDIO.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2923 ;;      Params:         0       0       0       0
  2924 ;;      Locals:         0       0       0       0
  2925 ;;      Temps:          0       1       0       0
  2926 ;;      Totals:         0       1       0       0
  2927 ;;Total ram usage:        1 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:   14
  2930 ;; This function calls:
  2931 ;;		_LCDout
  2932 ;;		_SendLCD
  2933 ;; This function is called by:
  2934 ;;		_setup
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text16
  2939  000AD8                     __ptext16:
  2940                           	opt callstack 0
  2941  000AD8                     _init_LCD:
  2942                           	opt callstack 15
  2943                           
  2944                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2945                           
  2946                           ;incstack = 0
  2947  000AD8  9094               	bcf	3988,0,c	;volatile
  2948                           
  2949                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2950  000ADA  9E92               	bcf	3986,7,c	;volatile
  2951                           
  2952                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2953  000ADC  9694               	bcf	3988,3,c	;volatile
  2954                           
  2955                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2956  000ADE  9095               	bcf	3989,0,c	;volatile
  2957                           
  2958                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2959  000AE0  9295               	bcf	3989,1,c	;volatile
  2960                           
  2961                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2962  000AE2  9C92               	bcf	3986,6,c	;volatile
  2963                           
  2964                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2965  000AE4  908C               	bcf	3980,0,c	;volatile
  2966                           
  2967                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2968  000AE6  928C               	bcf	3980,1,c	;volatile
  2969                           
  2970                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2971  000AE8  968B               	bcf	3979,3,c	;volatile
  2972                           
  2973                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2974  000AEA  908B               	bcf	3979,0,c	;volatile
  2975                           
  2976                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2977  000AEC  9C89               	bcf	3977,6,c	;volatile
  2978                           
  2979                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2980  000AEE  9E89               	bcf	3977,7,c	;volatile
  2981                           
  2982                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2983  000AF0  0E27               	movlw	39
  2984  000AF2  0100               	movlb	0	; () banked
  2985  000AF4  6F75               	movwf	??_init_LCD& (0+255),b
  2986  000AF6  0EF5               	movlw	245
  2987  000AF8                     u2517:
  2988  000AF8  2EE8               	decfsz	wreg,f,c
  2989  000AFA  D7FE               	bra	u2517
  2990  000AFC  2F75               	decfsz	??_init_LCD& (0+255),f,b
  2991  000AFE  D7FC               	bra	u2517
  2992                           
  2993                           ;LCDIO.c: 76:  LCDout(0b0011);
  2994  000B00  0E03               	movlw	3
  2995  000B02  EC17  F007         	call	_LCDout
  2996                           
  2997                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2998  000B06  0E0D               	movlw	13
  2999  000B08  0100               	movlb	0	; () banked
  3000  000B0A  6F75               	movwf	??_init_LCD& (0+255),b
  3001  000B0C  0EFB               	movlw	251
  3002  000B0E                     u2527:
  3003  000B0E  2EE8               	decfsz	wreg,f,c
  3004  000B10  D7FE               	bra	u2527
  3005  000B12  2F75               	decfsz	??_init_LCD& (0+255),f,b
  3006  000B14  D7FC               	bra	u2527
  3007  000B16  D000               	nop2	
  3008                           
  3009                           ;LCDIO.c: 78:  LCDout(0b0011);
  3010  000B18  0E03               	movlw	3
  3011  000B1A  EC17  F007         	call	_LCDout
  3012                           
  3013                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  3014  000B1E  0E85               	movlw	133
  3015  000B20                     u2537:
  3016  000B20  2EE8               	decfsz	wreg,f,c
  3017  000B22  D7FE               	bra	u2537
  3018  000B24  F000               	nop	
  3019                           
  3020                           ;LCDIO.c: 80:  LCDout(0b0011);
  3021  000B26  0E03               	movlw	3
  3022  000B28  EC17  F007         	call	_LCDout
  3023                           
  3024                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3025  000B2C  0E21               	movlw	33
  3026  000B2E                     u2547:
  3027  000B2E  2EE8               	decfsz	wreg,f,c
  3028  000B30  D7FE               	bra	u2547
  3029  000B32  F000               	nop	
  3030                           
  3031                           ;LCDIO.c: 82:  LCDout(0b0010);
  3032  000B34  0E02               	movlw	2
  3033  000B36  EC17  F007         	call	_LCDout
  3034                           
  3035                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3036  000B3A  0E21               	movlw	33
  3037  000B3C                     u2557:
  3038  000B3C  2EE8               	decfsz	wreg,f,c
  3039  000B3E  D7FE               	bra	u2557
  3040  000B40  F000               	nop	
  3041                           
  3042                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  3043  000B42  0E00               	movlw	0
  3044  000B44  0100               	movlb	0	; () banked
  3045  000B46  6F73               	movwf	SendLCD@type& (0+255),b
  3046  000B48  0E28               	movlw	40
  3047  000B4A  ECB8  F008         	call	_SendLCD
  3048                           
  3049                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3050  000B4E  0E21               	movlw	33
  3051  000B50                     u2567:
  3052  000B50  2EE8               	decfsz	wreg,f,c
  3053  000B52  D7FE               	bra	u2567
  3054  000B54  F000               	nop	
  3055                           
  3056                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  3057  000B56  0E00               	movlw	0
  3058  000B58  0100               	movlb	0	; () banked
  3059  000B5A  6F73               	movwf	SendLCD@type& (0+255),b
  3060  000B5C  0E08               	movlw	8
  3061  000B5E  ECB8  F008         	call	_SendLCD
  3062                           
  3063                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3064  000B62  0E21               	movlw	33
  3065  000B64                     u2577:
  3066  000B64  2EE8               	decfsz	wreg,f,c
  3067  000B66  D7FE               	bra	u2577
  3068  000B68  F000               	nop	
  3069                           
  3070                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  3071  000B6A  0E00               	movlw	0
  3072  000B6C  0100               	movlb	0	; () banked
  3073  000B6E  6F73               	movwf	SendLCD@type& (0+255),b
  3074  000B70  0E01               	movlw	1
  3075  000B72  ECB8  F008         	call	_SendLCD
  3076                           
  3077                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3078  000B76  0E0D               	movlw	13
  3079  000B78  0100               	movlb	0	; () banked
  3080  000B7A  6F75               	movwf	??_init_LCD& (0+255),b
  3081  000B7C  0EFB               	movlw	251
  3082  000B7E                     u2587:
  3083  000B7E  2EE8               	decfsz	wreg,f,c
  3084  000B80  D7FE               	bra	u2587
  3085  000B82  2F75               	decfsz	??_init_LCD& (0+255),f,b
  3086  000B84  D7FC               	bra	u2587
  3087  000B86  D000               	nop2	
  3088                           
  3089                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  3090  000B88  0E00               	movlw	0
  3091  000B8A  0100               	movlb	0	; () banked
  3092  000B8C  6F73               	movwf	SendLCD@type& (0+255),b
  3093  000B8E  0E06               	movlw	6
  3094  000B90  ECB8  F008         	call	_SendLCD
  3095                           
  3096                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3097  000B94  0E21               	movlw	33
  3098  000B96                     u2597:
  3099  000B96  2EE8               	decfsz	wreg,f,c
  3100  000B98  D7FE               	bra	u2597
  3101  000B9A  F000               	nop	
  3102                           
  3103                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  3104  000B9C  0E00               	movlw	0
  3105  000B9E  0100               	movlb	0	; () banked
  3106  000BA0  6F73               	movwf	SendLCD@type& (0+255),b
  3107  000BA2  0E0C               	movlw	12
  3108  000BA4  ECB8  F008         	call	_SendLCD
  3109                           
  3110                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3111  000BA8  0E21               	movlw	33
  3112  000BAA                     u2607:
  3113  000BAA  2EE8               	decfsz	wreg,f,c
  3114  000BAC  D7FE               	bra	u2607
  3115  000BAE  F000               	nop	
  3116  000BB0  0012               	return		;funcret
  3117  000BB2                     __end_of_init_LCD:
  3118                           	opt callstack 0
  3119                           
  3120 ;; *************** function _SetLine *****************
  3121 ;; Defined at:
  3122 ;;		line 107 in file "LCDIO.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  line            1    wreg     unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  line            1   21[BANK0 ] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3136 ;;      Params:         0       0       0       0
  3137 ;;      Locals:         0       1       0       0
  3138 ;;      Temps:          0       0       0       0
  3139 ;;      Totals:         0       1       0       0
  3140 ;;Total ram usage:        1 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:   14
  3143 ;; This function calls:
  3144 ;;		_SendLCD
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text17
  3151  001280                     __ptext17:
  3152                           	opt callstack 0
  3153  001280                     _SetLine:
  3154                           	opt callstack 16
  3155                           
  3156                           ;incstack = 0
  3157                           ;SetLine@line stored from wreg
  3158  001280  0100               	movlb	0	; () banked
  3159  001282  6F75               	movwf	SetLine@line& (0+255),b
  3160                           
  3161                           ;LCDIO.c: 109:     if(line == 1){
  3162  001284  0100               	movlb	0	; () banked
  3163  001286  0575               	decf	SetLine@line& (0+255),w,b
  3164  001288  A4D8               	btfss	status,2,c
  3165  00128A  D005               	goto	l2678
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  3169  00128C  0E00               	movlw	0
  3170  00128E  6F73               	movwf	SendLCD@type& (0+255),b
  3171  001290  0E80               	movlw	128
  3172  001292  ECB8  F008         	call	_SendLCD
  3173  001296                     l2678:
  3174                           
  3175                           ;LCDIO.c: 113:     if(line == 2){
  3176  001296  0E02               	movlw	2
  3177  001298  0100               	movlb	0	; () banked
  3178  00129A  1975               	xorwf	SetLine@line& (0+255),w,b
  3179  00129C  A4D8               	btfss	status,2,c
  3180  00129E  D005               	goto	l2682
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  3184  0012A0  0E00               	movlw	0
  3185  0012A2  6F73               	movwf	SendLCD@type& (0+255),b
  3186  0012A4  0EC0               	movlw	192
  3187  0012A6  ECB8  F008         	call	_SendLCD
  3188  0012AA                     l2682:
  3189                           
  3190                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3191  0012AA  0E21               	movlw	33
  3192  0012AC                     u2617:
  3193  0012AC  2EE8               	decfsz	wreg,f,c
  3194  0012AE  D7FE               	bra	u2617
  3195  0012B0  F000               	nop	
  3196  0012B2  0012               	return		;funcret
  3197  0012B4                     __end_of_SetLine:
  3198                           	opt callstack 0
  3199                           
  3200 ;; *************** function _LCD_String *****************
  3201 ;; Defined at:
  3202 ;;		line 119 in file "LCDIO.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  string          2   21[BANK0 ] PTR unsigned char 
  3205 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_2(15), 
  3206 ;;		 -> STR_1(5), 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3218 ;;      Params:         0       2       0       0
  3219 ;;      Locals:         0       0       0       0
  3220 ;;      Temps:          0       0       0       0
  3221 ;;      Totals:         0       2       0       0
  3222 ;;Total ram usage:        2 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:   14
  3225 ;; This function calls:
  3226 ;;		_SendLCD
  3227 ;; This function is called by:
  3228 ;;		_main
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text18
  3233  0010FC                     __ptext18:
  3234                           	opt callstack 0
  3235  0010FC                     _LCD_String:
  3236                           	opt callstack 16
  3237                           
  3238                           ;LCDIO.c: 121: while(*string != 0){
  3239                           
  3240                           ;incstack = 0
  3241  0010FC  D012               	goto	l2672
  3242  0010FE                     l2666:
  3243                           
  3244                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3245  0010FE  0E01               	movlw	1
  3246  001100  0100               	movlb	0	; () banked
  3247  001102  6F73               	movwf	SendLCD@type& (0+255),b
  3248  001104  C075  FFF6         	movff	LCD_String@string,tblptrl
  3249  001108  C076  FFF7         	movff	LCD_String@string+1,tblptrh
  3250  00110C                     	if	0	;tblptru may be non-zero
  3251  00110C                     	endif
  3252  00110C                     	if	0	;tblptru may be non-zero
  3253  00110C                     	endif
  3254  00110C  0008               	tblrd		*
  3255  00110E  50F5               	movf	tablat,w,c
  3256  001110  ECB8  F008         	call	_SendLCD
  3257  001114  0100               	movlb	0	; () banked
  3258  001116  4B75               	infsnz	LCD_String@string& (0+255),f,b
  3259  001118  2B76               	incf	(LCD_String@string+1)& (0+255),f,b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3263  00111A  0E21               	movlw	33
  3264  00111C                     u2627:
  3265  00111C  2EE8               	decfsz	wreg,f,c
  3266  00111E  D7FE               	bra	u2627
  3267  001120  F000               	nop	
  3268  001122                     l2672:
  3269                           
  3270                           ;LCDIO.c: 121: while(*string != 0){
  3271  001122  C075  FFF6         	movff	LCD_String@string,tblptrl
  3272  001126  C076  FFF7         	movff	LCD_String@string+1,tblptrh
  3273  00112A                     	if	0	;tblptru may be non-zero
  3274  00112A                     	endif
  3275  00112A                     	if	0	;tblptru may be non-zero
  3276  00112A                     	endif
  3277  00112A  0008               	tblrd		*
  3278  00112C  50F5               	movf	tablat,w,c
  3279  00112E  0900               	iorlw	0
  3280  001130  B4D8               	btfsc	status,2,c
  3281  001132  0012               	return	
  3282  001134  D7E4               	goto	l2666
  3283  001136                     __end_of_LCD_String:
  3284                           	opt callstack 0
  3285                           
  3286 ;; *************** function _ClearLCD *****************
  3287 ;; Defined at:
  3288 ;;		line 137 in file "LCDIO.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3302 ;;      Params:         0       0       0       0
  3303 ;;      Locals:         0       0       0       0
  3304 ;;      Temps:          0       1       0       0
  3305 ;;      Totals:         0       1       0       0
  3306 ;;Total ram usage:        1 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:   14
  3309 ;; This function calls:
  3310 ;;		_SendLCD
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text19
  3317  001340                     __ptext19:
  3318                           	opt callstack 0
  3319  001340                     _ClearLCD:
  3320                           	opt callstack 16
  3321                           
  3322                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  3323                           
  3324                           ;incstack = 0
  3325  001340  0E00               	movlw	0
  3326  001342  0100               	movlb	0	; () banked
  3327  001344  6F73               	movwf	SendLCD@type& (0+255),b
  3328  001346  0E01               	movlw	1
  3329  001348  ECB8  F008         	call	_SendLCD
  3330                           
  3331                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3332  00134C  0E0D               	movlw	13
  3333  00134E  0100               	movlb	0	; () banked
  3334  001350  6F75               	movwf	??_ClearLCD& (0+255),b
  3335  001352  0EFB               	movlw	251
  3336  001354                     u2637:
  3337  001354  2EE8               	decfsz	wreg,f,c
  3338  001356  D7FE               	bra	u2637
  3339  001358  2F75               	decfsz	??_ClearLCD& (0+255),f,b
  3340  00135A  D7FC               	bra	u2637
  3341  00135C  D000               	nop2	
  3342  00135E  0012               	return		;funcret
  3343  001360                     __end_of_ClearLCD:
  3344                           	opt callstack 0
  3345                           
  3346 ;; *************** function _SendLCD *****************
  3347 ;; Defined at:
  3348 ;;		line 44 in file "LCDIO.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  Byte            1    wreg     unsigned char 
  3351 ;;  type            1   19[BANK0 ] unsigned char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  Byte            1   20[BANK0 ] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3363 ;;      Params:         0       1       0       0
  3364 ;;      Locals:         0       1       0       0
  3365 ;;      Temps:          0       0       0       0
  3366 ;;      Totals:         0       2       0       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:   13
  3370 ;; This function calls:
  3371 ;;		_LCDout
  3372 ;; This function is called by:
  3373 ;;		_init_LCD
  3374 ;;		_SetLine
  3375 ;;		_LCD_String
  3376 ;;		_ClearLCD
  3377 ;;		_ShiftLeft
  3378 ;;		_ShiftRight
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text20
  3383  001170                     __ptext20:
  3384                           	opt callstack 0
  3385  001170                     _SendLCD:
  3386                           	opt callstack 15
  3387                           
  3388                           ;incstack = 0
  3389                           ;SendLCD@Byte stored from wreg
  3390  001170  0100               	movlb	0	; () banked
  3391  001172  6F74               	movwf	SendLCD@Byte& (0+255),b
  3392                           
  3393                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3394  001174  0100               	movlb	0	; () banked
  3395  001176  B173               	btfsc	SendLCD@type& (0+255),0,b
  3396  001178  D002               	bra	u2295
  3397  00117A  9E89               	bcf	3977,7,c	;volatile
  3398  00117C  D001               	bra	u2296
  3399  00117E                     u2295:
  3400  00117E  8E89               	bsf	3977,7,c	;volatile
  3401  001180                     u2296:
  3402                           
  3403                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3404  001180  0100               	movlb	0	; () banked
  3405  001182  3974               	swapf	SendLCD@Byte& (0+255),w,b
  3406  001184  0B0F               	andlw	15
  3407  001186  0B0F               	andlw	15
  3408  001188  EC17  F007         	call	_LCDout
  3409                           
  3410                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3411  00118C  0E06               	movlw	6
  3412  00118E                     u2647:
  3413  00118E  2EE8               	decfsz	wreg,f,c
  3414  001190  D7FE               	bra	u2647
  3415  001192  D000               	nop2	
  3416                           
  3417                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3418  001194  0100               	movlb	0	; () banked
  3419  001196  5174               	movf	SendLCD@Byte& (0+255),w,b
  3420  001198  0B0F               	andlw	15
  3421  00119A  EC17  F007         	call	_LCDout
  3422                           
  3423                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3424  00119E  0E21               	movlw	33
  3425  0011A0                     u2657:
  3426  0011A0  2EE8               	decfsz	wreg,f,c
  3427  0011A2  D7FE               	bra	u2657
  3428  0011A4  F000               	nop	
  3429  0011A6  0012               	return		;funcret
  3430  0011A8                     __end_of_SendLCD:
  3431                           	opt callstack 0
  3432                           
  3433 ;; *************** function _LCDout *****************
  3434 ;; Defined at:
  3435 ;;		line 31 in file "LCDIO.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  number          1    wreg     unsigned char 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  number          1   18[BANK0 ] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3449 ;;      Params:         0       0       0       0
  3450 ;;      Locals:         0       1       0       0
  3451 ;;      Temps:          0       1       0       0
  3452 ;;      Totals:         0       2       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:   12
  3456 ;; This function calls:
  3457 ;;		_E_TOG
  3458 ;; This function is called by:
  3459 ;;		_SendLCD
  3460 ;;		_init_LCD
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text21
  3465  000E2E                     __ptext21:
  3466                           	opt callstack 0
  3467  000E2E                     _LCDout:
  3468                           	opt callstack 15
  3469                           
  3470                           ;incstack = 0
  3471                           ;LCDout@number stored from wreg
  3472  000E2E  0100               	movlb	0	; () banked
  3473  000E30  6F72               	movwf	LCDout@number& (0+255),b
  3474                           
  3475                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3476  000E32  C072  F071         	movff	LCDout@number,??_LCDout
  3477  000E36  0E01               	movlw	1
  3478  000E38  0100               	movlb	0	; () banked
  3479  000E3A  1771               	andwf	??_LCDout& (0+255),f,b
  3480  000E3C  508B               	movf	3979,w,c	;volatile
  3481  000E3E  1971               	xorwf	??_LCDout& (0+255),w,b
  3482  000E40  0BFE               	andlw	-2
  3483  000E42  1971               	xorwf	??_LCDout& (0+255),w,b
  3484  000E44  6E8B               	movwf	3979,c	;volatile
  3485                           
  3486                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3487  000E46  C072  F071         	movff	LCDout@number,??_LCDout
  3488  000E4A  90D8               	bcf	status,0,c
  3489  000E4C  3371               	rrcf	??_LCDout& (0+255),f,b
  3490  000E4E  0E01               	movlw	1
  3491  000E50  1771               	andwf	??_LCDout& (0+255),f,b
  3492  000E52  4771               	rlncf	??_LCDout& (0+255),f,b
  3493  000E54  4771               	rlncf	??_LCDout& (0+255),f,b
  3494  000E56  4771               	rlncf	??_LCDout& (0+255),f,b
  3495  000E58  508B               	movf	3979,w,c	;volatile
  3496  000E5A  1971               	xorwf	??_LCDout& (0+255),w,b
  3497  000E5C  0BF7               	andlw	-9
  3498  000E5E  1971               	xorwf	??_LCDout& (0+255),w,b
  3499  000E60  6E8B               	movwf	3979,c	;volatile
  3500                           
  3501                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3502  000E62  C072  F071         	movff	LCDout@number,??_LCDout
  3503  000E66  90D8               	bcf	status,0,c
  3504  000E68  3371               	rrcf	??_LCDout& (0+255),f,b
  3505  000E6A  90D8               	bcf	status,0,c
  3506  000E6C  3371               	rrcf	??_LCDout& (0+255),f,b
  3507  000E6E  0E01               	movlw	1
  3508  000E70  1771               	andwf	??_LCDout& (0+255),f,b
  3509  000E72  508C               	movf	3980,w,c	;volatile
  3510  000E74  1971               	xorwf	??_LCDout& (0+255),w,b
  3511  000E76  0BFE               	andlw	-2
  3512  000E78  1971               	xorwf	??_LCDout& (0+255),w,b
  3513  000E7A  6E8C               	movwf	3980,c	;volatile
  3514                           
  3515                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3516  000E7C  C072  F071         	movff	LCDout@number,??_LCDout
  3517  000E80  90D8               	bcf	status,0,c
  3518  000E82  3371               	rrcf	??_LCDout& (0+255),f,b
  3519  000E84  90D8               	bcf	status,0,c
  3520  000E86  3371               	rrcf	??_LCDout& (0+255),f,b
  3521  000E88  90D8               	bcf	status,0,c
  3522  000E8A  3371               	rrcf	??_LCDout& (0+255),f,b
  3523  000E8C  0E01               	movlw	1
  3524  000E8E  1771               	andwf	??_LCDout& (0+255),f,b
  3525  000E90  4771               	rlncf	??_LCDout& (0+255),f,b
  3526  000E92  508C               	movf	3980,w,c	;volatile
  3527  000E94  1971               	xorwf	??_LCDout& (0+255),w,b
  3528  000E96  0BFD               	andlw	-3
  3529  000E98  1971               	xorwf	??_LCDout& (0+255),w,b
  3530  000E9A  6E8C               	movwf	3980,c	;volatile
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;LCDIO.c: 39:  E_TOG();
  3534  000E9C  ECE0  F009         	call	_E_TOG	;wreg free
  3535                           
  3536                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3537  000EA0  0E03               	movlw	3
  3538  000EA2                     u2667:
  3539  000EA2  2EE8               	decfsz	wreg,f,c
  3540  000EA4  D7FE               	bra	u2667
  3541  000EA6  F000               	nop	
  3542  000EA8  0012               	return		;funcret
  3543  000EAA                     __end_of_LCDout:
  3544                           	opt callstack 0
  3545                           
  3546 ;; *************** function _E_TOG *****************
  3547 ;; Defined at:
  3548 ;;		line 23 in file "LCDIO.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3562 ;;      Params:         0       0       0       0
  3563 ;;      Locals:         0       0       0       0
  3564 ;;      Temps:          0       0       0       0
  3565 ;;      Totals:         0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:   11
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_LCDout
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text22
  3577  0013C0                     __ptext22:
  3578                           	opt callstack 0
  3579  0013C0                     _E_TOG:
  3580                           	opt callstack 15
  3581                           
  3582                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3583                           
  3584                           ;incstack = 0
  3585  0013C0  8C89               	bsf	3977,6,c	;volatile
  3586                           
  3587                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3588  0013C2  0E03               	movlw	3
  3589  0013C4                     u2677:
  3590  0013C4  2EE8               	decfsz	wreg,f,c
  3591  0013C6  D7FE               	bra	u2677
  3592  0013C8  F000               	nop	
  3593                           
  3594                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3595  0013CA  9C89               	bcf	3977,6,c	;volatile
  3596  0013CC  0012               	return		;funcret
  3597  0013CE                     __end_of_E_TOG:
  3598                           	opt callstack 0
  3599                           
  3600 ;; *************** function _InterruptHandlerLow *****************
  3601 ;; Defined at:
  3602 ;;		line 85 in file "main.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3616 ;;      Params:         0       0       0       0
  3617 ;;      Locals:         0       0       0       0
  3618 ;;      Temps:          0      11       0       0
  3619 ;;      Totals:         0      11       0       0
  3620 ;;Total ram usage:       11 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:   10
  3623 ;; This function calls:
  3624 ;;		i1_LCD_String
  3625 ;; This function is called by:
  3626 ;;		Interrupt level 1
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	intcodelo
  3631  000018                     __pintcodelo:
  3632                           	opt callstack 0
  3633  000018                     _InterruptHandlerLow:
  3634                           	opt callstack 12
  3635                           
  3636                           ;incstack = 0
  3637  000018  8039               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3638  00001A  CFD8 F06A          	movff	status,??_InterruptHandlerLow+4
  3639  00001E  CFE8 F06B          	movff	wreg,??_InterruptHandlerLow+5
  3640  000022  CFE0 F06C          	movff	bsr,??_InterruptHandlerLow+6
  3641  000026  CFF6 F06D          	movff	tblptrl,??_InterruptHandlerLow+7
  3642  00002A  CFF7 F06E          	movff	tblptrh,??_InterruptHandlerLow+8
  3643  00002E  CFF8 F06F          	movff	tblptru,??_InterruptHandlerLow+9
  3644  000032  CFF5 F070          	movff	tablat,??_InterruptHandlerLow+10
  3645                           
  3646                           ;main.c: 88:     if((PIR1bits.CCP1IF) && robot_mode == 0)
  3647  000036  A49E               	btfss	3998,2,c	;volatile
  3648  000038  D041               	goto	i1l2736
  3649  00003A  502C               	movf	_robot_mode,w,c	;volatile
  3650  00003C  A4D8               	btfss	status,2,c
  3651  00003E  D03E               	goto	i1l2736
  3652                           
  3653                           ;main.c: 89:     {;main.c: 91:         static int falling_edge;;main.c: 93:         LCD_
      +                          String("TEST");
  3654  000040  0E40               	movlw	low STR_1
  3655  000042  0100               	movlb	0	; () banked
  3656  000044  6F64               	movwf	i1LCD_String@string& (0+255),b
  3657  000046  0E03               	movlw	high STR_1
  3658  000048  6F65               	movwf	(i1LCD_String@string+1)& (0+255),b
  3659  00004A  EC9B  F008         	call	i1_LCD_String	;wreg free
  3660                           
  3661                           ;main.c: 94:         _delay((unsigned long)((100)*(8000000/4000.0)));
  3662  00004E  0E02               	movlw	2
  3663  000050  0100               	movlb	0	; () banked
  3664  000052  6F67               	movwf	(??_InterruptHandlerLow+1)& (0+255),b
  3665  000054  0E04               	movlw	4
  3666  000056  6F66               	movwf	??_InterruptHandlerLow& (0+255),b
  3667  000058  0EBA               	movlw	186
  3668  00005A                     i1u268_27:
  3669  00005A  2EE8               	decfsz	wreg,f,c
  3670  00005C  D7FE               	bra	i1u268_27
  3671  00005E  2F66               	decfsz	??_InterruptHandlerLow& (0+255),f,b
  3672  000060  D7FC               	bra	i1u268_27
  3673  000062  2F67               	decfsz	(??_InterruptHandlerLow+1)& (0+255),f,b
  3674  000064  D7FA               	bra	i1u268_27
  3675  000066  F000               	nop	
  3676                           
  3677                           ;main.c: 96:         if(CCP1CON == 00000100)
  3678  000068  0E40               	movlw	64
  3679  00006A  18BD               	xorwf	4029,w,c	;volatile
  3680  00006C  A4D8               	btfss	status,2,c
  3681  00006E  D00E               	goto	i1l2728
  3682                           
  3683                           ;main.c: 97:         {;main.c: 98:             falling_edge = (CCPR1H << 8) | CCPR1L;
  3684  000070  50BE               	movf	4030,w,c	;volatile
  3685  000072  CFBF F066          	movff	4031,??_InterruptHandlerLow	;volatile
  3686  000076  0100               	movlb	0	; () banked
  3687  000078  6B67               	clrf	(??_InterruptHandlerLow+1)& (0+255),b
  3688  00007A  C066  F067         	movff	??_InterruptHandlerLow,??_InterruptHandlerLow+1
  3689  00007E  6B66               	clrf	??_InterruptHandlerLow& (0+255),b
  3690  000080  1166               	iorwf	??_InterruptHandlerLow& (0+255),w,b
  3691  000082  6E29               	movwf	InterruptHandlerLow@falling_edge,c
  3692  000084  5167               	movf	(??_InterruptHandlerLow+1)& (0+255),w,b
  3693  000086  6E2A               	movwf	InterruptHandlerLow@falling_edge+1,c
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;main.c: 99:             CCP1CON = 00000101;
  3697  000088  0E41               	movlw	65
  3698  00008A  D016               	goto	L2
  3699  00008C                     i1l2728:
  3700  00008C  0E41               	movlw	65
  3701  00008E  18BD               	xorwf	4029,w,c	;volatile
  3702  000090  A4D8               	btfss	status,2,c
  3703  000092  D015               	goto	i1l76
  3704                           
  3705                           ;main.c: 105:         {;main.c: 106:             raw_data = (CCPR1H << 8) | CCPR1L - fal
      +                          ling_edge;
  3706  000094  50BE               	movf	4030,w,c	;volatile
  3707  000096  0100               	movlb	0	; () banked
  3708  000098  6F66               	movwf	??_InterruptHandlerLow& (0+255),b
  3709  00009A  6B67               	clrf	(??_InterruptHandlerLow+1)& (0+255),b
  3710  00009C  5029               	movf	InterruptHandlerLow@falling_edge,w,c
  3711  00009E  5F66               	subwf	??_InterruptHandlerLow& (0+255),f,b
  3712  0000A0  502A               	movf	InterruptHandlerLow@falling_edge+1,w,c
  3713  0000A2  5B67               	subwfb	(??_InterruptHandlerLow+1)& (0+255),f,b
  3714  0000A4  50BF               	movf	4031,w,c	;volatile
  3715  0000A6  6F69               	movwf	(??_InterruptHandlerLow+3)& (0+255),b
  3716  0000A8  6B68               	clrf	(??_InterruptHandlerLow+2)& (0+255),b
  3717  0000AA  5166               	movf	??_InterruptHandlerLow& (0+255),w,b
  3718  0000AC  1168               	iorwf	(??_InterruptHandlerLow+2)& (0+255),w,b
  3719  0000AE  6FE2               	movwf	_raw_data& (0+255),b	;volatile
  3720  0000B0  5167               	movf	(??_InterruptHandlerLow+1)& (0+255),w,b
  3721  0000B2  1169               	iorwf	(??_InterruptHandlerLow+3)& (0+255),w,b
  3722  0000B4  6FE3               	movwf	(_raw_data+1)& (0+255),b	;volatile
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;main.c: 107:             CCP1CON = 00000100;
  3726  0000B6  0E40               	movlw	64
  3727  0000B8                     L2:
  3728  0000B8  6EBD               	movwf	4029,c	;volatile
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;main.c: 108:             PIE1bits.CCP1IE = 0;
  3732  0000BA  949D               	bcf	3997,2,c	;volatile
  3733  0000BC                     i1l2736:
  3734                           
  3735                           ;main.c: 114:     {;main.c: 115:         PIR1bits.CCP1IF = 0;
  3736                           
  3737                           ;main.c: 113:     else
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;main.c: 109:             PIR1bits.CCP1IF = 0;
  3741  0000BC  949E               	bcf	3998,2,c	;volatile
  3742  0000BE                     i1l76:
  3743  0000BE  C070  FFF5         	movff	??_InterruptHandlerLow+10,tablat
  3744  0000C2  C06F  FFF8         	movff	??_InterruptHandlerLow+9,tblptru
  3745  0000C6  C06E  FFF7         	movff	??_InterruptHandlerLow+8,tblptrh
  3746  0000CA  C06D  FFF6         	movff	??_InterruptHandlerLow+7,tblptrl
  3747  0000CE  C06C  FFE0         	movff	??_InterruptHandlerLow+6,bsr
  3748  0000D2  C06B  FFE8         	movff	??_InterruptHandlerLow+5,wreg
  3749  0000D6  C06A  FFD8         	movff	??_InterruptHandlerLow+4,status
  3750  0000DA  9039               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3751  0000DC  0010               	retfie	
  3752  0000DE                     __end_of_InterruptHandlerLow:
  3753                           	opt callstack 0
  3754                           
  3755 ;; *************** function i1_LCD_String *****************
  3756 ;; Defined at:
  3757 ;;		line 119 in file "LCDIO.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  string          2    4[BANK0 ] PTR unsigned char 
  3760 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_2(15), 
  3761 ;;		 -> STR_1(5), 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3773 ;;      Params:         0       2       0       0
  3774 ;;      Locals:         0       0       0       0
  3775 ;;      Temps:          0       0       0       0
  3776 ;;      Totals:         0       2       0       0
  3777 ;;Total ram usage:        2 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    9
  3780 ;; This function calls:
  3781 ;;		i1_SendLCD
  3782 ;; This function is called by:
  3783 ;;		_InterruptHandlerLow
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text24
  3788  001136                     __ptext24:
  3789                           	opt callstack 0
  3790  001136                     i1_LCD_String:
  3791                           	opt callstack 12
  3792                           
  3793                           ;LCDIO.c: 121: while(*string != 0){
  3794                           
  3795                           ;incstack = 0
  3796  001136  D012               	goto	i1l2708
  3797  001138                     i1l2702:
  3798                           
  3799                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3800  001138  0E01               	movlw	1
  3801  00113A  0100               	movlb	0	; () banked
  3802  00113C  6F62               	movwf	i1SendLCD@type& (0+255),b
  3803  00113E  C064  FFF6         	movff	i1LCD_String@string,tblptrl
  3804  001142  C065  FFF7         	movff	i1LCD_String@string+1,tblptrh
  3805  001146                     	if	0	;tblptru may be non-zero
  3806  001146                     	endif
  3807  001146                     	if	0	;tblptru may be non-zero
  3808  001146                     	endif
  3809  001146  0008               	tblrd		*
  3810  001148  50F5               	movf	tablat,w,c
  3811  00114A  ECD4  F008         	call	i1_SendLCD
  3812  00114E  0100               	movlb	0	; () banked
  3813  001150  4B64               	infsnz	i1LCD_String@string& (0+255),f,b
  3814  001152  2B65               	incf	(i1LCD_String@string+1)& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3818  001154  0E21               	movlw	33
  3819  001156                     i1u269_27:
  3820  001156  2EE8               	decfsz	wreg,f,c
  3821  001158  D7FE               	bra	i1u269_27
  3822  00115A  F000               	nop	
  3823  00115C                     i1l2708:
  3824                           
  3825                           ;LCDIO.c: 121: while(*string != 0){
  3826  00115C  C064  FFF6         	movff	i1LCD_String@string,tblptrl
  3827  001160  C065  FFF7         	movff	i1LCD_String@string+1,tblptrh
  3828  001164                     	if	0	;tblptru may be non-zero
  3829  001164                     	endif
  3830  001164                     	if	0	;tblptru may be non-zero
  3831  001164                     	endif
  3832  001164  0008               	tblrd		*
  3833  001166  50F5               	movf	tablat,w,c
  3834  001168  0900               	iorlw	0
  3835  00116A  B4D8               	btfsc	status,2,c
  3836  00116C  0012               	return	
  3837  00116E  D7E4               	goto	i1l2702
  3838  001170                     __end_ofi1_LCD_String:
  3839                           	opt callstack 0
  3840                           
  3841 ;; *************** function i1_SendLCD *****************
  3842 ;; Defined at:
  3843 ;;		line 44 in file "LCDIO.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  Byte            1    wreg     unsigned char 
  3846 ;;  type            1    2[BANK0 ] unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  Byte            1    3[BANK0 ] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3858 ;;      Params:         0       1       0       0
  3859 ;;      Locals:         0       1       0       0
  3860 ;;      Temps:          0       0       0       0
  3861 ;;      Totals:         0       2       0       0
  3862 ;;Total ram usage:        2 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    8
  3865 ;; This function calls:
  3866 ;;		i1_LCDout
  3867 ;; This function is called by:
  3868 ;;		i1_LCD_String
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text25
  3873  0011A8                     __ptext25:
  3874                           	opt callstack 0
  3875  0011A8                     i1_SendLCD:
  3876                           	opt callstack 12
  3877                           
  3878                           ;incstack = 0
  3879                           ;i1SendLCD@Byte stored from wreg
  3880  0011A8  0100               	movlb	0	; () banked
  3881  0011AA  6F63               	movwf	i1SendLCD@Byte& (0+255),b
  3882                           
  3883                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3884  0011AC  0100               	movlb	0	; () banked
  3885  0011AE  B162               	btfsc	i1SendLCD@type& (0+255),0,b
  3886  0011B0  D002               	bra	i1u235_25
  3887  0011B2  9E89               	bcf	3977,7,c	;volatile
  3888  0011B4  D001               	bra	i1u235_26
  3889  0011B6                     i1u235_25:
  3890  0011B6  8E89               	bsf	3977,7,c	;volatile
  3891  0011B8                     i1u235_26:
  3892                           
  3893                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3894  0011B8  0100               	movlb	0	; () banked
  3895  0011BA  3963               	swapf	i1SendLCD@Byte& (0+255),w,b
  3896  0011BC  0B0F               	andlw	15
  3897  0011BE  0B0F               	andlw	15
  3898  0011C0  EC55  F007         	call	i1_LCDout
  3899                           
  3900                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3901  0011C4  0E06               	movlw	6
  3902  0011C6                     i1u270_27:
  3903  0011C6  2EE8               	decfsz	wreg,f,c
  3904  0011C8  D7FE               	bra	i1u270_27
  3905  0011CA  D000               	nop2	
  3906                           
  3907                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3908  0011CC  0100               	movlb	0	; () banked
  3909  0011CE  5163               	movf	i1SendLCD@Byte& (0+255),w,b
  3910  0011D0  0B0F               	andlw	15
  3911  0011D2  EC55  F007         	call	i1_LCDout
  3912                           
  3913                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3914  0011D6  0E21               	movlw	33
  3915  0011D8                     i1u271_27:
  3916  0011D8  2EE8               	decfsz	wreg,f,c
  3917  0011DA  D7FE               	bra	i1u271_27
  3918  0011DC  F000               	nop	
  3919  0011DE  0012               	return		;funcret
  3920  0011E0                     __end_ofi1_SendLCD:
  3921                           	opt callstack 0
  3922                           
  3923 ;; *************** function i1_LCDout *****************
  3924 ;; Defined at:
  3925 ;;		line 31 in file "LCDIO.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  number          1    wreg     unsigned char 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  number          1    1[BANK0 ] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3939 ;;      Params:         0       0       0       0
  3940 ;;      Locals:         0       1       0       0
  3941 ;;      Temps:          0       1       0       0
  3942 ;;      Totals:         0       2       0       0
  3943 ;;Total ram usage:        2 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    7
  3946 ;; This function calls:
  3947 ;;		i1_E_TOG
  3948 ;; This function is called by:
  3949 ;;		i1_SendLCD
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text26
  3954  000EAA                     __ptext26:
  3955                           	opt callstack 0
  3956  000EAA                     i1_LCDout:
  3957                           	opt callstack 12
  3958                           
  3959                           ;incstack = 0
  3960                           ;i1LCDout@number stored from wreg
  3961  000EAA  0100               	movlb	0	; () banked
  3962  000EAC  6F61               	movwf	i1LCDout@number& (0+255),b
  3963                           
  3964                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3965  000EAE  C061  F060         	movff	i1LCDout@number,??i1_LCDout
  3966  000EB2  0E01               	movlw	1
  3967  000EB4  0100               	movlb	0	; () banked
  3968  000EB6  1760               	andwf	??i1_LCDout& (0+255),f,b
  3969  000EB8  508B               	movf	3979,w,c	;volatile
  3970  000EBA  1960               	xorwf	??i1_LCDout& (0+255),w,b
  3971  000EBC  0BFE               	andlw	-2
  3972  000EBE  1960               	xorwf	??i1_LCDout& (0+255),w,b
  3973  000EC0  6E8B               	movwf	3979,c	;volatile
  3974                           
  3975                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3976  000EC2  C061  F060         	movff	i1LCDout@number,??i1_LCDout
  3977  000EC6  90D8               	bcf	status,0,c
  3978  000EC8  3360               	rrcf	??i1_LCDout& (0+255),f,b
  3979  000ECA  0E01               	movlw	1
  3980  000ECC  1760               	andwf	??i1_LCDout& (0+255),f,b
  3981  000ECE  4760               	rlncf	??i1_LCDout& (0+255),f,b
  3982  000ED0  4760               	rlncf	??i1_LCDout& (0+255),f,b
  3983  000ED2  4760               	rlncf	??i1_LCDout& (0+255),f,b
  3984  000ED4  508B               	movf	3979,w,c	;volatile
  3985  000ED6  1960               	xorwf	??i1_LCDout& (0+255),w,b
  3986  000ED8  0BF7               	andlw	-9
  3987  000EDA  1960               	xorwf	??i1_LCDout& (0+255),w,b
  3988  000EDC  6E8B               	movwf	3979,c	;volatile
  3989                           
  3990                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3991  000EDE  C061  F060         	movff	i1LCDout@number,??i1_LCDout
  3992  000EE2  90D8               	bcf	status,0,c
  3993  000EE4  3360               	rrcf	??i1_LCDout& (0+255),f,b
  3994  000EE6  90D8               	bcf	status,0,c
  3995  000EE8  3360               	rrcf	??i1_LCDout& (0+255),f,b
  3996  000EEA  0E01               	movlw	1
  3997  000EEC  1760               	andwf	??i1_LCDout& (0+255),f,b
  3998  000EEE  508C               	movf	3980,w,c	;volatile
  3999  000EF0  1960               	xorwf	??i1_LCDout& (0+255),w,b
  4000  000EF2  0BFE               	andlw	-2
  4001  000EF4  1960               	xorwf	??i1_LCDout& (0+255),w,b
  4002  000EF6  6E8C               	movwf	3980,c	;volatile
  4003                           
  4004                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4005  000EF8  C061  F060         	movff	i1LCDout@number,??i1_LCDout
  4006  000EFC  90D8               	bcf	status,0,c
  4007  000EFE  3360               	rrcf	??i1_LCDout& (0+255),f,b
  4008  000F00  90D8               	bcf	status,0,c
  4009  000F02  3360               	rrcf	??i1_LCDout& (0+255),f,b
  4010  000F04  90D8               	bcf	status,0,c
  4011  000F06  3360               	rrcf	??i1_LCDout& (0+255),f,b
  4012  000F08  0E01               	movlw	1
  4013  000F0A  1760               	andwf	??i1_LCDout& (0+255),f,b
  4014  000F0C  4760               	rlncf	??i1_LCDout& (0+255),f,b
  4015  000F0E  508C               	movf	3980,w,c	;volatile
  4016  000F10  1960               	xorwf	??i1_LCDout& (0+255),w,b
  4017  000F12  0BFD               	andlw	-3
  4018  000F14  1960               	xorwf	??i1_LCDout& (0+255),w,b
  4019  000F16  6E8C               	movwf	3980,c	;volatile
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;LCDIO.c: 39:  E_TOG();
  4023  000F18  ECE7  F009         	call	i1_E_TOG	;wreg free
  4024                           
  4025                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4026  000F1C  0E03               	movlw	3
  4027  000F1E                     i1u272_27:
  4028  000F1E  2EE8               	decfsz	wreg,f,c
  4029  000F20  D7FE               	bra	i1u272_27
  4030  000F22  F000               	nop	
  4031  000F24  0012               	return		;funcret
  4032  000F26                     __end_ofi1_LCDout:
  4033                           	opt callstack 0
  4034                           
  4035 ;; *************** function i1_E_TOG *****************
  4036 ;; Defined at:
  4037 ;;		line 23 in file "LCDIO.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4051 ;;      Params:         0       0       0       0
  4052 ;;      Locals:         0       0       0       0
  4053 ;;      Temps:          0       0       0       0
  4054 ;;      Totals:         0       0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    6
  4058 ;; This function calls:
  4059 ;;		Nothing
  4060 ;; This function is called by:
  4061 ;;		i1_LCDout
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text27
  4066  0013CE                     __ptext27:
  4067                           	opt callstack 0
  4068  0013CE                     i1_E_TOG:
  4069                           	opt callstack 12
  4070                           
  4071                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4072                           
  4073                           ;incstack = 0
  4074  0013CE  8C89               	bsf	3977,6,c	;volatile
  4075                           
  4076                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4077  0013D0  0E03               	movlw	3
  4078  0013D2                     i1u273_27:
  4079  0013D2  2EE8               	decfsz	wreg,f,c
  4080  0013D4  D7FE               	bra	i1u273_27
  4081  0013D6  F000               	nop	
  4082                           
  4083                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4084  0013D8  9C89               	bcf	3977,6,c	;volatile
  4085  0013DA  0012               	return		;funcret
  4086  0013DC                     __end_ofi1_E_TOG:
  4087                           	opt callstack 0
  4088                           
  4089 ;; *************** function _InterruptHandlerHigh *****************
  4090 ;; Defined at:
  4091 ;;		line 53 in file "main.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  throwaway       1    0        unsigned char 
  4096 ;;  RFID_flag       1   39[COMRAM] unsigned char 
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4106 ;;      Params:         0       0       0       0
  4107 ;;      Locals:         2       0       0       0
  4108 ;;      Temps:          8       0       0       0
  4109 ;;      Totals:        10       0       0       0
  4110 ;;Total ram usage:       10 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    5
  4113 ;; This function calls:
  4114 ;;		_check_RFID
  4115 ;;		_processRFID
  4116 ;; This function is called by:
  4117 ;;		Interrupt level 2
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	intcode
  4122  000008                     __pintcode:
  4123                           	opt callstack 0
  4124  000008                     _InterruptHandlerHigh:
  4125                           	opt callstack 12
  4126                           
  4127                           ;incstack = 0
  4128  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4129  00000A  EF93  F007         	goto	int_func
  4130                           
  4131                           	psect	intcode_body
  4132  000F26                     __pintcode_body:
  4133                           	opt callstack 12
  4134  000F26                     int_func:
  4135                           	opt callstack 12
  4136  000F26  CFE1 F01F          	movff	fsr1l,??_InterruptHandlerHigh
  4137  000F2A  CFE2 F020          	movff	fsr1h,??_InterruptHandlerHigh+1
  4138  000F2E  CFD9 F021          	movff	fsr2l,??_InterruptHandlerHigh+2
  4139  000F32  CFDA F022          	movff	fsr2h,??_InterruptHandlerHigh+3
  4140  000F36  CFF6 F023          	movff	tblptrl,??_InterruptHandlerHigh+4
  4141  000F3A  CFF7 F024          	movff	tblptrh,??_InterruptHandlerHigh+5
  4142  000F3E  CFF8 F025          	movff	tblptru,??_InterruptHandlerHigh+6
  4143  000F42  CFF5 F026          	movff	tablat,??_InterruptHandlerHigh+7
  4144                           
  4145                           ;main.c: 57:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4146  000F46  AA9E               	btfss	3998,5,c	;volatile
  4147  000F48  D018               	goto	i2l59
  4148  000F4A  502C               	movf	_robot_mode,w,c	;volatile
  4149  000F4C  A4D8               	btfss	status,2,c
  4150  000F4E  D015               	goto	i2l59
  4151                           
  4152                           ;main.c: 58:     {;main.c: 62:         static char RFIDbuf[12];;main.c: 66:         char
      +                           RFID_flag = processRFID(RFIDbuf, RCREG);
  4153  000F50  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  4154  000F52  6E06               	movwf	processRFID@RFIDbuf,c
  4155  000F54  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  4156  000F56  6E07               	movwf	processRFID@RFIDbuf+1,c
  4157  000F58  CFAE F008          	movff	4014,processRFID@latestChar	;volatile
  4158  000F5C  ECD3  F006         	call	_processRFID	;wreg free
  4159  000F60  6E28               	movwf	InterruptHandlerHigh@RFID_flag,c
  4160                           
  4161                           ;main.c: 70:         if(RFID_flag == 1)
  4162  000F62  0428               	decf	InterruptHandlerHigh@RFID_flag,w,c
  4163  000F64  A4D8               	btfss	status,2,c
  4164  000F66  D00A               	goto	i2l64
  4165                           
  4166                           ;main.c: 71:         {;main.c: 72:             check_RFID(RFIDbuf);
  4167  000F68  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  4168  000F6A  6E07               	movwf	check_RFID@dataBuf,c
  4169  000F6C  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  4170  000F6E  6E08               	movwf	check_RFID@dataBuf+1,c
  4171  000F70  EC8C  F003         	call	_check_RFID	;wreg free
  4172                           
  4173                           ;main.c: 73:             robot_mode = 1;
  4174  000F74  0E01               	movlw	1
  4175  000F76  6E2C               	movwf	_robot_mode,c	;volatile
  4176  000F78  D001               	goto	i2l64
  4177  000F7A                     i2l59:
  4178  000F7A  50AE               	movf	4014,w,c	;volatile
  4179  000F7C                     i2l64:
  4180  000F7C  C026  FFF5         	movff	??_InterruptHandlerHigh+7,tablat
  4181  000F80  C025  FFF8         	movff	??_InterruptHandlerHigh+6,tblptru
  4182  000F84  C024  FFF7         	movff	??_InterruptHandlerHigh+5,tblptrh
  4183  000F88  C023  FFF6         	movff	??_InterruptHandlerHigh+4,tblptrl
  4184  000F8C  C022  FFDA         	movff	??_InterruptHandlerHigh+3,fsr2h
  4185  000F90  C021  FFD9         	movff	??_InterruptHandlerHigh+2,fsr2l
  4186  000F94  C020  FFE2         	movff	??_InterruptHandlerHigh+1,fsr1h
  4187  000F98  C01F  FFE1         	movff	??_InterruptHandlerHigh,fsr1l
  4188  000F9C  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4189  000F9E  0011               	retfie		f
  4190  000FA0                     __end_of_InterruptHandlerHigh:
  4191                           	opt callstack 0
  4192                           
  4193 ;; *************** function _processRFID *****************
  4194 ;; Defined at:
  4195 ;;		line 33 in file "RFID.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  RFIDbuf         2    5[COMRAM] PTR unsigned char 
  4198 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  4199 ;;  latestChar      1    7[COMRAM] unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  i               1   10[COMRAM] unsigned char 
  4202 ;;  i               2    8[COMRAM] int 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      unsigned char 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4212 ;;      Params:         3       0       0       0
  4213 ;;      Locals:         3       0       0       0
  4214 ;;      Temps:          0       0       0       0
  4215 ;;      Totals:         6       0       0       0
  4216 ;;Total ram usage:        6 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    4
  4219 ;; This function calls:
  4220 ;;		i2_ClearLCD
  4221 ;;		i2_SendLCD
  4222 ;;		i2_SetLine
  4223 ;; This function is called by:
  4224 ;;		_InterruptHandlerHigh
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text29
  4229  000DA6                     __ptext29:
  4230                           	opt callstack 0
  4231  000DA6                     _processRFID:
  4232                           	opt callstack 12
  4233                           
  4234                           ;RFID.c: 33: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 34: {;RFID.c: 38:
      +                               static char position_in_buf;;RFID.c: 41:     if(latestChar == 0x03)
  4235                           
  4236                           ;incstack = 0
  4237  000DA6  0E03               	movlw	3
  4238  000DA8  1808               	xorwf	processRFID@latestChar,w,c
  4239  000DAA  A4D8               	btfss	status,2,c
  4240  000DAC  D020               	goto	i2l2126
  4241                           
  4242                           ;RFID.c: 42:     {;RFID.c: 43:         ClearLCD();
  4243  000DAE  ECBF  F009         	call	i2_ClearLCD	;wreg free
  4244                           
  4245                           ;RFID.c: 44:         SetLine(1);
  4246  000DB2  0E01               	movlw	1
  4247  000DB4  EC89  F009         	call	i2_SetLine
  4248                           
  4249                           ;RFID.c: 45:         for(int i=0;i<10;i++)
  4250  000DB8  0E00               	movlw	0
  4251  000DBA  6E0A               	movwf	processRFID@i+1,c
  4252  000DBC  0E00               	movlw	0
  4253  000DBE  6E09               	movwf	processRFID@i,c
  4254  000DC0                     i2l2114:
  4255                           
  4256                           ;RFID.c: 46:         {;RFID.c: 47:             SendLCD(RFIDbuf[i],1);
  4257  000DC0  0E01               	movlw	1
  4258  000DC2  6E03               	movwf	i2SendLCD@type,c
  4259  000DC4  5009               	movf	processRFID@i,w,c
  4260  000DC6  2406               	addwf	processRFID@RFIDbuf,w,c
  4261  000DC8  6ED9               	movwf	fsr2l,c
  4262  000DCA  500A               	movf	processRFID@i+1,w,c
  4263  000DCC  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  4264  000DCE  6EDA               	movwf	fsr2h,c
  4265  000DD0  50DF               	movf	indf2,w,c
  4266  000DD2  EC5A  F009         	call	i2_SendLCD
  4267                           
  4268                           ;RFID.c: 48:         }
  4269  000DD6  4A09               	infsnz	processRFID@i,f,c
  4270  000DD8  2A0A               	incf	processRFID@i+1,f,c
  4271  000DDA  BE0A               	btfsc	processRFID@i+1,7,c
  4272  000DDC  D7F1               	goto	i2l2114
  4273  000DDE  500A               	movf	processRFID@i+1,w,c
  4274  000DE0  E104               	bnz	i2u151_40
  4275  000DE2  0E0A               	movlw	10
  4276  000DE4  5C09               	subwf	processRFID@i,w,c
  4277  000DE6  A0D8               	btfss	status,0,c
  4278  000DE8  D7EB               	goto	i2l2114
  4279  000DEA                     i2u151_40:
  4280                           
  4281                           ;RFID.c: 50:         return 1;
  4282  000DEA  0E01               	movlw	1
  4283  000DEC  0012               	return	
  4284  000DEE                     i2l2126:
  4285                           
  4286                           ;RFID.c: 53:     {;RFID.c: 56:        if(latestChar == 0x02)
  4287  000DEE  0E02               	movlw	2
  4288  000DF0  1808               	xorwf	processRFID@latestChar,w,c
  4289  000DF2  A4D8               	btfss	status,2,c
  4290  000DF4  D012               	goto	i2l2146
  4291                           
  4292                           ;RFID.c: 57:         {;RFID.c: 58:            position_in_buf = 0;
  4293  000DF6  0E00               	movlw	0
  4294  000DF8  6E2B               	movwf	processRFID@position_in_buf,c
  4295                           
  4296                           ;RFID.c: 59:            for(char i=0 ;i<12 ;i++)
  4297  000DFA  0E00               	movlw	0
  4298  000DFC  6E0B               	movwf	processRFID@i_1062,c
  4299  000DFE                     i2l2134:
  4300                           
  4301                           ;RFID.c: 60:            {;RFID.c: 61:                RFIDbuf[i] = 0;
  4302  000DFE  500B               	movf	processRFID@i_1062,w,c
  4303  000E00  2406               	addwf	processRFID@RFIDbuf,w,c
  4304  000E02  6ED9               	movwf	fsr2l,c
  4305  000E04  0E00               	movlw	0
  4306  000E06  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  4307  000E08  6EDA               	movwf	fsr2h,c
  4308  000E0A  0E00               	movlw	0
  4309  000E0C  6EDF               	movwf	indf2,c
  4310                           
  4311                           ;RFID.c: 62:            }
  4312  000E0E  2A0B               	incf	processRFID@i_1062,f,c
  4313  000E10  0E0B               	movlw	11
  4314  000E12  640B               	cpfsgt	processRFID@i_1062,c
  4315  000E14  D7F4               	goto	i2l2134
  4316  000E16                     i2u153_40:
  4317                           
  4318                           ;RFID.c: 64:            return 0;
  4319  000E16  0E00               	movlw	0
  4320  000E18  0012               	return	
  4321  000E1A                     i2l2146:
  4322                           
  4323                           ;RFID.c: 68:         {;RFID.c: 69:             RFIDbuf[position_in_buf] = latestChar;
  4324  000E1A  502B               	movf	processRFID@position_in_buf,w,c
  4325  000E1C  2406               	addwf	processRFID@RFIDbuf,w,c
  4326  000E1E  6ED9               	movwf	fsr2l,c
  4327  000E20  0E00               	movlw	0
  4328  000E22  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  4329  000E24  6EDA               	movwf	fsr2h,c
  4330  000E26  C008  FFDF         	movff	processRFID@latestChar,indf2
  4331                           
  4332                           ;RFID.c: 70:             position_in_buf++;
  4333  000E2A  2A2B               	incf	processRFID@position_in_buf,f,c
  4334  000E2C  D7F4               	goto	i2u153_40
  4335  000E2E                     __end_of_processRFID:
  4336                           	opt callstack 0
  4337                           
  4338 ;; *************** function i2_ClearLCD *****************
  4339 ;; Defined at:
  4340 ;;		line 137 in file "LCDIO.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4354 ;;      Params:         0       0       0       0
  4355 ;;      Locals:         0       0       0       0
  4356 ;;      Temps:          1       0       0       0
  4357 ;;      Totals:         1       0       0       0
  4358 ;;Total ram usage:        1 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    3
  4361 ;; This function calls:
  4362 ;;		i2_SendLCD
  4363 ;; This function is called by:
  4364 ;;		_processRFID
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text30
  4369  00137E                     __ptext30:
  4370                           	opt callstack 0
  4371  00137E                     i2_ClearLCD:
  4372                           	opt callstack 12
  4373                           
  4374                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  4375                           
  4376                           ;incstack = 0
  4377  00137E  0E00               	movlw	0
  4378  001380  6E03               	movwf	i2SendLCD@type,c
  4379  001382  0E01               	movlw	1
  4380  001384  EC5A  F009         	call	i2_SendLCD
  4381                           
  4382                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  4383  001388  0E0D               	movlw	13
  4384  00138A  6E05               	movwf	??i2_ClearLCD& (0+255),c
  4385  00138C  0EFC               	movlw	252
  4386  00138E                     i2u274_47:
  4387  00138E  2EE8               	decfsz	wreg,f,c
  4388  001390  D7FE               	bra	i2u274_47
  4389  001392  2E05               	decfsz	??i2_ClearLCD& (0+255),f,c
  4390  001394  D7FC               	bra	i2u274_47
  4391  001396  0012               	return		;funcret
  4392  001398                     __end_ofi2_ClearLCD:
  4393                           	opt callstack 0
  4394                           
  4395 ;; *************** function _check_RFID *****************
  4396 ;; Defined at:
  4397 ;;		line 78 in file "RFID.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  dataBuf         2    6[COMRAM] PTR unsigned char 
  4400 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  i               2   28[COMRAM] int 
  4403 ;;  hexBuf         12   10[COMRAM] unsigned char [12]
  4404 ;;  checksum        1   27[COMRAM] unsigned char 
  4405 ;;  byte5           1   26[COMRAM] unsigned char 
  4406 ;;  byte4           1   25[COMRAM] unsigned char 
  4407 ;;  byte3           1   24[COMRAM] unsigned char 
  4408 ;;  byte2           1   23[COMRAM] unsigned char 
  4409 ;;  byte1           1   22[COMRAM] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4419 ;;      Params:         2       0       0       0
  4420 ;;      Locals:        20       0       0       0
  4421 ;;      Temps:          2       0       0       0
  4422 ;;      Totals:        24       0       0       0
  4423 ;;Total ram usage:       24 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    4
  4426 ;; This function calls:
  4427 ;;		i2_LCD_String
  4428 ;;		i2_SetLine
  4429 ;; This function is called by:
  4430 ;;		_InterruptHandlerHigh
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text31
  4435  000718                     __ptext31:
  4436                           	opt callstack 0
  4437  000718                     _check_RFID:
  4438                           	opt callstack 12
  4439                           
  4440                           ;RFID.c: 78: void check_RFID(char dataBuf[]);RFID.c: 79: {;RFID.c: 81:     char hexBuf[1
      +                          2];;RFID.c: 83:     for(int i=0; i<12;i++)
  4441                           
  4442                           ;incstack = 0
  4443  000718  0E00               	movlw	0
  4444  00071A  6E1E               	movwf	check_RFID@i+1,c
  4445  00071C  0E00               	movlw	0
  4446  00071E  6E1D               	movwf	check_RFID@i,c
  4447  000720                     i2l2160:
  4448                           
  4449                           ;RFID.c: 84:     {;RFID.c: 85:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  4450  000720  501D               	movf	check_RFID@i,w,c
  4451  000722  2407               	addwf	check_RFID@dataBuf,w,c
  4452  000724  6ED9               	movwf	fsr2l,c
  4453  000726  501E               	movf	check_RFID@i+1,w,c
  4454  000728  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4455  00072A  6EDA               	movwf	fsr2h,c
  4456  00072C  0E2F               	movlw	47
  4457  00072E  64DF               	cpfsgt	indf2,c
  4458  000730  D018               	goto	i2l2166
  4459  000732  501D               	movf	check_RFID@i,w,c
  4460  000734  2407               	addwf	check_RFID@dataBuf,w,c
  4461  000736  6ED9               	movwf	fsr2l,c
  4462  000738  501E               	movf	check_RFID@i+1,w,c
  4463  00073A  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4464  00073C  6EDA               	movwf	fsr2h,c
  4465  00073E  0E3A               	movlw	58
  4466  000740  60DF               	cpfslt	indf2,c
  4467  000742  D00F               	goto	i2l2166
  4468                           
  4469                           ;RFID.c: 86:         {;RFID.c: 87:             hexBuf[i] = dataBuf[i] - '0';
  4470  000744  0E0B               	movlw	low check_RFID@hexBuf
  4471  000746  241D               	addwf	check_RFID@i,w,c
  4472  000748  6ED9               	movwf	fsr2l,c
  4473  00074A  0E00               	movlw	high check_RFID@hexBuf
  4474  00074C  201E               	addwfc	check_RFID@i+1,w,c
  4475  00074E  6EDA               	movwf	fsr2h,c
  4476  000750  501D               	movf	check_RFID@i,w,c
  4477  000752  2407               	addwf	check_RFID@dataBuf,w,c
  4478  000754  6EE1               	movwf	fsr1l,c
  4479  000756  501E               	movf	check_RFID@i+1,w,c
  4480  000758  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4481  00075A  6EE2               	movwf	fsr1h,c
  4482  00075C  50E7               	movf	indf1,w,c
  4483  00075E  0FD0               	addlw	208
  4484  000760  D020               	goto	L3
  4485  000762                     i2l2166:
  4486  000762  501D               	movf	check_RFID@i,w,c
  4487  000764  2407               	addwf	check_RFID@dataBuf,w,c
  4488  000766  6ED9               	movwf	fsr2l,c
  4489  000768  501E               	movf	check_RFID@i+1,w,c
  4490  00076A  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4491  00076C  6EDA               	movwf	fsr2h,c
  4492  00076E  0E40               	movlw	64
  4493  000770  64DF               	cpfsgt	indf2,c
  4494  000772  D018               	goto	i2l2172
  4495  000774  501D               	movf	check_RFID@i,w,c
  4496  000776  2407               	addwf	check_RFID@dataBuf,w,c
  4497  000778  6ED9               	movwf	fsr2l,c
  4498  00077A  501E               	movf	check_RFID@i+1,w,c
  4499  00077C  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4500  00077E  6EDA               	movwf	fsr2h,c
  4501  000780  0E47               	movlw	71
  4502  000782  60DF               	cpfslt	indf2,c
  4503  000784  D00F               	goto	i2l2172
  4504                           
  4505                           ;RFID.c: 89:         {;RFID.c: 90:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  4506  000786  0E0B               	movlw	low check_RFID@hexBuf
  4507  000788  241D               	addwf	check_RFID@i,w,c
  4508  00078A  6ED9               	movwf	fsr2l,c
  4509  00078C  0E00               	movlw	high check_RFID@hexBuf
  4510  00078E  201E               	addwfc	check_RFID@i+1,w,c
  4511  000790  6EDA               	movwf	fsr2h,c
  4512  000792  501D               	movf	check_RFID@i,w,c
  4513  000794  2407               	addwf	check_RFID@dataBuf,w,c
  4514  000796  6EE1               	movwf	fsr1l,c
  4515  000798  501E               	movf	check_RFID@i+1,w,c
  4516  00079A  2008               	addwfc	check_RFID@dataBuf+1,w,c
  4517  00079C  6EE2               	movwf	fsr1h,c
  4518  00079E  50E7               	movf	indf1,w,c
  4519  0007A0  0FC9               	addlw	201
  4520  0007A2                     L3:
  4521  0007A2  6EDF               	movwf	indf2,c
  4522  0007A4                     i2l2172:
  4523                           
  4524                           ;RFID.c: 92:     }
  4525  0007A4  4A1D               	infsnz	check_RFID@i,f,c
  4526  0007A6  2A1E               	incf	check_RFID@i+1,f,c
  4527  0007A8  BE1E               	btfsc	check_RFID@i+1,7,c
  4528  0007AA  D7BA               	goto	i2l2160
  4529  0007AC  501E               	movf	check_RFID@i+1,w,c
  4530  0007AE  E104               	bnz	i2u158_40
  4531  0007B0  0E0C               	movlw	12
  4532  0007B2  5C1D               	subwf	check_RFID@i,w,c
  4533  0007B4  A0D8               	btfss	status,0,c
  4534  0007B6  D7B4               	goto	i2l2160
  4535  0007B8                     i2u158_40:
  4536                           
  4537                           ;RFID.c: 94:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  4538  0007B8  500B               	movf	check_RFID@hexBuf,w,c
  4539  0007BA  A4D8               	btfss	status,2,c
  4540  0007BC  D002               	goto	i2u159_40
  4541  0007BE  0E01               	movlw	1
  4542  0007C0  D001               	goto	i2u160_40
  4543  0007C2                     i2u159_40:
  4544  0007C2  0E00               	movlw	0
  4545  0007C4                     i2u160_40:
  4546  0007C4  100C               	iorwf	check_RFID@hexBuf+1,w,c
  4547  0007C6  6E17               	movwf	check_RFID@byte1,c
  4548                           
  4549                           ;RFID.c: 95:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  4550  0007C8  500D               	movf	check_RFID@hexBuf+2,w,c
  4551  0007CA  A4D8               	btfss	status,2,c
  4552  0007CC  D002               	goto	i2u161_40
  4553  0007CE  0E01               	movlw	1
  4554  0007D0  D001               	goto	i2u162_40
  4555  0007D2                     i2u161_40:
  4556  0007D2  0E00               	movlw	0
  4557  0007D4                     i2u162_40:
  4558  0007D4  100E               	iorwf	check_RFID@hexBuf+3,w,c
  4559  0007D6  6E18               	movwf	check_RFID@byte2,c
  4560                           
  4561                           ;RFID.c: 96:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  4562  0007D8  500F               	movf	check_RFID@hexBuf+4,w,c
  4563  0007DA  A4D8               	btfss	status,2,c
  4564  0007DC  D002               	goto	i2u163_40
  4565  0007DE  0E01               	movlw	1
  4566  0007E0  D001               	goto	i2u164_40
  4567  0007E2                     i2u163_40:
  4568  0007E2  0E00               	movlw	0
  4569  0007E4                     i2u164_40:
  4570  0007E4  1010               	iorwf	check_RFID@hexBuf+5,w,c
  4571  0007E6  6E19               	movwf	check_RFID@byte3,c
  4572                           
  4573                           ;RFID.c: 97:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  4574  0007E8  5011               	movf	check_RFID@hexBuf+6,w,c
  4575  0007EA  A4D8               	btfss	status,2,c
  4576  0007EC  D002               	goto	i2u165_40
  4577  0007EE  0E01               	movlw	1
  4578  0007F0  D001               	goto	i2u166_40
  4579  0007F2                     i2u165_40:
  4580  0007F2  0E00               	movlw	0
  4581  0007F4                     i2u166_40:
  4582  0007F4  1012               	iorwf	check_RFID@hexBuf+7,w,c
  4583  0007F6  6E1A               	movwf	check_RFID@byte4,c
  4584                           
  4585                           ;RFID.c: 98:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  4586  0007F8  5013               	movf	check_RFID@hexBuf+8,w,c
  4587  0007FA  A4D8               	btfss	status,2,c
  4588  0007FC  D002               	goto	i2u167_40
  4589  0007FE  0E01               	movlw	1
  4590  000800  D001               	goto	i2u168_40
  4591  000802                     i2u167_40:
  4592  000802  0E00               	movlw	0
  4593  000804                     i2u168_40:
  4594  000804  1014               	iorwf	check_RFID@hexBuf+9,w,c
  4595  000806  6E1B               	movwf	check_RFID@byte5,c
  4596                           
  4597                           ;RFID.c: 99:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  4598  000808  5015               	movf	check_RFID@hexBuf+10,w,c
  4599  00080A  A4D8               	btfss	status,2,c
  4600  00080C  D002               	goto	i2u169_40
  4601  00080E  0E01               	movlw	1
  4602  000810  D001               	goto	i2u170_40
  4603  000812                     i2u169_40:
  4604  000812  0E00               	movlw	0
  4605  000814                     i2u170_40:
  4606  000814  1016               	iorwf	check_RFID@hexBuf+11,w,c
  4607  000816  6E1C               	movwf	check_RFID@checksum,c
  4608                           
  4609                           ;RFID.c: 102:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  4610  000818  5017               	movf	check_RFID@byte1,w,c
  4611  00081A  1818               	xorwf	check_RFID@byte2,w,c
  4612  00081C  1819               	xorwf	check_RFID@byte3,w,c
  4613  00081E  181A               	xorwf	check_RFID@byte4,w,c
  4614  000820  6E09               	movwf	??_check_RFID& (0+255),c
  4615  000822  6A0A               	clrf	(??_check_RFID+1)& (0+255),c
  4616  000824  501C               	movf	check_RFID@checksum,w,c
  4617  000826  181B               	xorwf	check_RFID@byte5,w,c
  4618  000828  A4D8               	btfss	status,2,c
  4619  00082A  D002               	goto	i2u171_40
  4620  00082C  0E01               	movlw	1
  4621  00082E  D001               	goto	i2u172_40
  4622  000830                     i2u171_40:
  4623  000830  0E00               	movlw	0
  4624  000832                     i2u172_40:
  4625  000832  1A09               	xorwf	??_check_RFID,f,c
  4626  000834  0E00               	movlw	0
  4627  000836  1A0A               	xorwf	??_check_RFID+1,f,c
  4628  000838  5009               	movf	??_check_RFID,w,c
  4629  00083A  100A               	iorwf	??_check_RFID+1,w,c
  4630  00083C  B4D8               	btfsc	status,2,c
  4631  00083E  D00A               	goto	i2l2182
  4632                           
  4633                           ;RFID.c: 103:     {;RFID.c: 105:         SetLine(2);
  4634  000840  0E02               	movlw	2
  4635  000842  EC89  F009         	call	i2_SetLine
  4636                           
  4637                           ;RFID.c: 106:         LCD_String("CHECKSUM PASSED");
  4638  000846  0E11               	movlw	low STR_5
  4639  000848  6E05               	movwf	i2LCD_String@string,c
  4640  00084A  0E03               	movlw	high STR_5
  4641  00084C  6E06               	movwf	i2LCD_String@string+1,c
  4642  00084E  EC0B  F009         	call	i2_LCD_String	;wreg free
  4643                           
  4644                           ;RFID.c: 107:     }
  4645  000852  0012               	return	
  4646  000854                     i2l2182:
  4647                           
  4648                           ;RFID.c: 110:         SetLine(2);
  4649  000854  0E02               	movlw	2
  4650  000856  EC89  F009         	call	i2_SetLine
  4651                           
  4652                           ;RFID.c: 111:         LCD_String("CHECKSUM FAILED");
  4653  00085A  0E01               	movlw	low STR_6
  4654  00085C  6E05               	movwf	i2LCD_String@string,c
  4655  00085E  0E03               	movlw	high STR_6
  4656  000860  6E06               	movwf	i2LCD_String@string+1,c
  4657  000862  EC0B  F009         	call	i2_LCD_String	;wreg free
  4658  000866  0012               	return		;funcret
  4659  000868                     __end_of_check_RFID:
  4660                           	opt callstack 0
  4661                           
  4662 ;; *************** function i2_SetLine *****************
  4663 ;; Defined at:
  4664 ;;		line 107 in file "LCDIO.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  line            1    wreg     unsigned char 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  line            1    4[COMRAM] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4678 ;;      Params:         0       0       0       0
  4679 ;;      Locals:         1       0       0       0
  4680 ;;      Temps:          0       0       0       0
  4681 ;;      Totals:         1       0       0       0
  4682 ;;Total ram usage:        1 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    3
  4685 ;; This function calls:
  4686 ;;		i2_SendLCD
  4687 ;; This function is called by:
  4688 ;;		_processRFID
  4689 ;;		_check_RFID
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text32
  4694  001312                     __ptext32:
  4695                           	opt callstack 0
  4696  001312                     i2_SetLine:
  4697                           	opt callstack 12
  4698                           
  4699                           ;incstack = 0
  4700                           ;i2SetLine@line stored from wreg
  4701  001312  6E05               	movwf	i2SetLine@line,c
  4702                           
  4703                           ;LCDIO.c: 109:     if(line == 1){
  4704  001314  0405               	decf	i2SetLine@line,w,c
  4705  001316  A4D8               	btfss	status,2,c
  4706  001318  D005               	goto	i2l2074
  4707                           
  4708                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4709  00131A  0E00               	movlw	0
  4710  00131C  6E03               	movwf	i2SendLCD@type,c
  4711  00131E  0E80               	movlw	128
  4712  001320  EC5A  F009         	call	i2_SendLCD
  4713  001324                     i2l2074:
  4714                           
  4715                           ;LCDIO.c: 113:     if(line == 2){
  4716  001324  0E02               	movlw	2
  4717  001326  1805               	xorwf	i2SetLine@line,w,c
  4718  001328  A4D8               	btfss	status,2,c
  4719  00132A  D005               	goto	i2l2078
  4720                           
  4721                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4722  00132C  0E00               	movlw	0
  4723  00132E  6E03               	movwf	i2SendLCD@type,c
  4724  001330  0EC0               	movlw	192
  4725  001332  EC5A  F009         	call	i2_SendLCD
  4726  001336                     i2l2078:
  4727                           
  4728                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4729  001336  0E21               	movlw	33
  4730  001338                     i2u275_47:
  4731  001338  2EE8               	decfsz	wreg,f,c
  4732  00133A  D7FE               	bra	i2u275_47
  4733  00133C  F000               	nop	
  4734  00133E  0012               	return		;funcret
  4735  001340                     __end_ofi2_SetLine:
  4736                           	opt callstack 0
  4737                           
  4738 ;; *************** function i2_LCD_String *****************
  4739 ;; Defined at:
  4740 ;;		line 119 in file "LCDIO.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  string          2    4[COMRAM] PTR unsigned char 
  4743 ;;		 -> STR_6(16), STR_5(16), STR_4(16), STR_2(15), 
  4744 ;;		 -> STR_1(5), 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4756 ;;      Params:         2       0       0       0
  4757 ;;      Locals:         0       0       0       0
  4758 ;;      Temps:          0       0       0       0
  4759 ;;      Totals:         2       0       0       0
  4760 ;;Total ram usage:        2 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    3
  4763 ;; This function calls:
  4764 ;;		i2_SendLCD
  4765 ;; This function is called by:
  4766 ;;		_check_RFID
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text33
  4771  001216                     __ptext33:
  4772                           	opt callstack 0
  4773  001216                     i2_LCD_String:
  4774                           	opt callstack 12
  4775                           
  4776                           ;LCDIO.c: 121: while(*string != 0){
  4777                           
  4778                           ;incstack = 0
  4779  001216  D010               	goto	i2l2088
  4780  001218                     i2l2082:
  4781                           
  4782                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4783  001218  0E01               	movlw	1
  4784  00121A  6E03               	movwf	i2SendLCD@type,c
  4785  00121C  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  4786  001220  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  4787  001224                     	if	0	;tblptru may be non-zero
  4788  001224                     	endif
  4789  001224                     	if	0	;tblptru may be non-zero
  4790  001224                     	endif
  4791  001224  0008               	tblrd		*
  4792  001226  50F5               	movf	tablat,w,c
  4793  001228  EC5A  F009         	call	i2_SendLCD
  4794  00122C  4A05               	infsnz	i2LCD_String@string,f,c
  4795  00122E  2A06               	incf	i2LCD_String@string+1,f,c
  4796                           
  4797                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4798  001230  0E21               	movlw	33
  4799  001232                     i2u276_47:
  4800  001232  2EE8               	decfsz	wreg,f,c
  4801  001234  D7FE               	bra	i2u276_47
  4802  001236  F000               	nop	
  4803  001238                     i2l2088:
  4804                           
  4805                           ;LCDIO.c: 121: while(*string != 0){
  4806  001238  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  4807  00123C  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  4808  001240                     	if	0	;tblptru may be non-zero
  4809  001240                     	endif
  4810  001240                     	if	0	;tblptru may be non-zero
  4811  001240                     	endif
  4812  001240  0008               	tblrd		*
  4813  001242  50F5               	movf	tablat,w,c
  4814  001244  0900               	iorlw	0
  4815  001246  B4D8               	btfsc	status,2,c
  4816  001248  0012               	return	
  4817  00124A  D7E6               	goto	i2l2082
  4818  00124C                     __end_ofi2_LCD_String:
  4819                           	opt callstack 0
  4820                           
  4821 ;; *************** function i2_SendLCD *****************
  4822 ;; Defined at:
  4823 ;;		line 44 in file "LCDIO.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  Byte            1    wreg     unsigned char 
  4826 ;;  type            1    2[COMRAM] unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  Byte            1    3[COMRAM] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4838 ;;      Params:         1       0       0       0
  4839 ;;      Locals:         1       0       0       0
  4840 ;;      Temps:          0       0       0       0
  4841 ;;      Totals:         2       0       0       0
  4842 ;;Total ram usage:        2 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    2
  4845 ;; This function calls:
  4846 ;;		i2_LCDout
  4847 ;; This function is called by:
  4848 ;;		_processRFID
  4849 ;;		i2_SetLine
  4850 ;;		i2_LCD_String
  4851 ;;		i2_ClearLCD
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text34
  4856  0012B4                     __ptext34:
  4857                           	opt callstack 0
  4858  0012B4                     i2_SendLCD:
  4859                           	opt callstack 12
  4860                           
  4861                           ;incstack = 0
  4862                           ;i2SendLCD@Byte stored from wreg
  4863  0012B4  6E04               	movwf	i2SendLCD@Byte,c
  4864                           
  4865                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4866  0012B6  B003               	btfsc	i2SendLCD@type,0,c
  4867  0012B8  D002               	bra	i2u143_45
  4868  0012BA  9E89               	bcf	3977,7,c	;volatile
  4869  0012BC  D001               	bra	i2u143_46
  4870  0012BE                     i2u143_45:
  4871  0012BE  8E89               	bsf	3977,7,c	;volatile
  4872  0012C0                     i2u143_46:
  4873                           
  4874                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4875  0012C0  3804               	swapf	i2SendLCD@Byte,w,c
  4876  0012C2  0B0F               	andlw	15
  4877  0012C4  0B0F               	andlw	15
  4878  0012C6  ECD0  F007         	call	i2_LCDout
  4879                           
  4880                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4881  0012CA  0E06               	movlw	6
  4882  0012CC                     i2u277_47:
  4883  0012CC  2EE8               	decfsz	wreg,f,c
  4884  0012CE  D7FE               	bra	i2u277_47
  4885  0012D0  D000               	nop2	
  4886                           
  4887                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4888  0012D2  5004               	movf	i2SendLCD@Byte,w,c
  4889  0012D4  0B0F               	andlw	15
  4890  0012D6  ECD0  F007         	call	i2_LCDout
  4891                           
  4892                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4893  0012DA  0E21               	movlw	33
  4894  0012DC                     i2u278_47:
  4895  0012DC  2EE8               	decfsz	wreg,f,c
  4896  0012DE  D7FE               	bra	i2u278_47
  4897  0012E0  F000               	nop	
  4898  0012E2  0012               	return		;funcret
  4899  0012E4                     __end_ofi2_SendLCD:
  4900                           	opt callstack 0
  4901                           
  4902 ;; *************** function i2_LCDout *****************
  4903 ;; Defined at:
  4904 ;;		line 31 in file "LCDIO.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  number          1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  number          1    1[COMRAM] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, status,2, status,0, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4918 ;;      Params:         0       0       0       0
  4919 ;;      Locals:         1       0       0       0
  4920 ;;      Temps:          1       0       0       0
  4921 ;;      Totals:         2       0       0       0
  4922 ;;Total ram usage:        2 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    1
  4925 ;; This function calls:
  4926 ;;		i2_E_TOG
  4927 ;; This function is called by:
  4928 ;;		i2_SendLCD
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text35
  4933  000FA0                     __ptext35:
  4934                           	opt callstack 0
  4935  000FA0                     i2_LCDout:
  4936                           	opt callstack 12
  4937                           
  4938                           ;incstack = 0
  4939                           ;i2LCDout@number stored from wreg
  4940  000FA0  6E02               	movwf	i2LCDout@number,c
  4941                           
  4942                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4943  000FA2  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4944  000FA6  0E01               	movlw	1
  4945  000FA8  1601               	andwf	??i2_LCDout,f,c
  4946  000FAA  508B               	movf	3979,w,c	;volatile
  4947  000FAC  1801               	xorwf	??i2_LCDout,w,c
  4948  000FAE  0BFE               	andlw	-2
  4949  000FB0  1801               	xorwf	??i2_LCDout,w,c
  4950  000FB2  6E8B               	movwf	3979,c	;volatile
  4951                           
  4952                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4953  000FB4  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4954  000FB8  90D8               	bcf	status,0,c
  4955  000FBA  3201               	rrcf	??i2_LCDout,f,c
  4956  000FBC  0E01               	movlw	1
  4957  000FBE  1601               	andwf	??i2_LCDout,f,c
  4958  000FC0  4601               	rlncf	??i2_LCDout,f,c
  4959  000FC2  4601               	rlncf	??i2_LCDout,f,c
  4960  000FC4  4601               	rlncf	??i2_LCDout,f,c
  4961  000FC6  508B               	movf	3979,w,c	;volatile
  4962  000FC8  1801               	xorwf	??i2_LCDout,w,c
  4963  000FCA  0BF7               	andlw	-9
  4964  000FCC  1801               	xorwf	??i2_LCDout,w,c
  4965  000FCE  6E8B               	movwf	3979,c	;volatile
  4966                           
  4967                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4968  000FD0  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4969  000FD4  90D8               	bcf	status,0,c
  4970  000FD6  3201               	rrcf	??i2_LCDout,f,c
  4971  000FD8  90D8               	bcf	status,0,c
  4972  000FDA  3201               	rrcf	??i2_LCDout,f,c
  4973  000FDC  0E01               	movlw	1
  4974  000FDE  1601               	andwf	??i2_LCDout,f,c
  4975  000FE0  508C               	movf	3980,w,c	;volatile
  4976  000FE2  1801               	xorwf	??i2_LCDout,w,c
  4977  000FE4  0BFE               	andlw	-2
  4978  000FE6  1801               	xorwf	??i2_LCDout,w,c
  4979  000FE8  6E8C               	movwf	3980,c	;volatile
  4980                           
  4981                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4982  000FEA  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  4983  000FEE  90D8               	bcf	status,0,c
  4984  000FF0  3201               	rrcf	??i2_LCDout,f,c
  4985  000FF2  90D8               	bcf	status,0,c
  4986  000FF4  3201               	rrcf	??i2_LCDout,f,c
  4987  000FF6  90D8               	bcf	status,0,c
  4988  000FF8  3201               	rrcf	??i2_LCDout,f,c
  4989  000FFA  0E01               	movlw	1
  4990  000FFC  1601               	andwf	??i2_LCDout,f,c
  4991  000FFE  4601               	rlncf	??i2_LCDout,f,c
  4992  001000  508C               	movf	3980,w,c	;volatile
  4993  001002  1801               	xorwf	??i2_LCDout,w,c
  4994  001004  0BFD               	andlw	-3
  4995  001006  1801               	xorwf	??i2_LCDout,w,c
  4996  001008  6E8C               	movwf	3980,c	;volatile
  4997                           
  4998                           ;LCDIO.c: 39:  E_TOG();
  4999  00100A  ECEE  F009         	call	i2_E_TOG	;wreg free
  5000                           
  5001                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5002  00100E  0E03               	movlw	3
  5003  001010                     i2u279_47:
  5004  001010  2EE8               	decfsz	wreg,f,c
  5005  001012  D7FE               	bra	i2u279_47
  5006  001014  F000               	nop	
  5007  001016  0012               	return		;funcret
  5008  001018                     __end_ofi2_LCDout:
  5009                           	opt callstack 0
  5010                           
  5011 ;; *************** function i2_E_TOG *****************
  5012 ;; Defined at:
  5013 ;;		line 23 in file "LCDIO.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5027 ;;      Params:         0       0       0       0
  5028 ;;      Locals:         0       0       0       0
  5029 ;;      Temps:          0       0       0       0
  5030 ;;      Totals:         0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		i2_LCDout
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text36
  5041  0013DC                     __ptext36:
  5042                           	opt callstack 0
  5043  0013DC                     i2_E_TOG:
  5044                           	opt callstack 12
  5045                           
  5046                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  5047                           
  5048                           ;incstack = 0
  5049  0013DC  8C89               	bsf	3977,6,c	;volatile
  5050                           
  5051                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5052  0013DE  0E03               	movlw	3
  5053  0013E0                     i2u280_47:
  5054  0013E0  2EE8               	decfsz	wreg,f,c
  5055  0013E2  D7FE               	bra	i2u280_47
  5056  0013E4  F000               	nop	
  5057                           
  5058                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  5059  0013E6  9C89               	bcf	3977,6,c	;volatile
  5060  0013E8  0012               	return		;funcret
  5061  0013EA                     __end_ofi2_E_TOG:
  5062                           	opt callstack 0
  5063                           
  5064                           	psect	rparam
  5065  0000                     
  5066                           	psect	temp
  5067  000039                     btemp:
  5068                           	opt callstack 0
  5069  000039                     	ds	1
  5070  0000                     int$flags	set	btemp
  5071  0000                     wtemp8	set	btemp+1
  5072  0000                     ttemp5	set	btemp+1
  5073  0000                     ttemp6	set	btemp+4
  5074  0000                     ttemp7	set	btemp+8
  5075                           tosu	equ	0xFFF
  5076                           tosh	equ	0xFFE
  5077                           tosl	equ	0xFFD
  5078                           stkptr	equ	0xFFC
  5079                           pclatu	equ	0xFFB
  5080                           pclath	equ	0xFFA
  5081                           pcl	equ	0xFF9
  5082                           tblptru	equ	0xFF8
  5083                           tblptrh	equ	0xFF7
  5084                           tblptrl	equ	0xFF6
  5085                           tablat	equ	0xFF5
  5086                           prodh	equ	0xFF4
  5087                           prodl	equ	0xFF3
  5088                           indf0	equ	0xFEF
  5089                           postinc0	equ	0xFEE
  5090                           postdec0	equ	0xFED
  5091                           preinc0	equ	0xFEC
  5092                           plusw0	equ	0xFEB
  5093                           fsr0h	equ	0xFEA
  5094                           fsr0l	equ	0xFE9
  5095                           wreg	equ	0xFE8
  5096                           indf1	equ	0xFE7
  5097                           postinc1	equ	0xFE6
  5098                           postdec1	equ	0xFE5
  5099                           preinc1	equ	0xFE4
  5100                           plusw1	equ	0xFE3
  5101                           fsr1h	equ	0xFE2
  5102                           fsr1l	equ	0xFE1
  5103                           bsr	equ	0xFE0
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           preinc2	equ	0xFDC
  5108                           plusw2	equ	0xFDB
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      56
    BANK0           160    122     132
    BANK1           256     18      50
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp(BANK1[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1672_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp(BANK1[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp(BANK1[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[16]), STR_2(CODE[15]), 
		 -> STR_1(CODE[5]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    S458DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    S458DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_check_RFID
    _processRFID->i2_ClearLCD
    _processRFID->i2_SetLine
    i2_ClearLCD->i2_SendLCD
    _check_RFID->i2_LCD_String
    i2_SetLine->i2_SendLCD
    i2_LCD_String->i2_SendLCD
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in BANK0

    _InterruptHandlerLow->i1_LCD_String
    i1_LCD_String->i1_SendLCD
    i1_SendLCD->i1_LCDout

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   14172
                                            120 BANK0      2     2      0
                                              0 BANK1     18    18      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8417
                                            104 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7931
                                             96 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7458
                                             80 BANK0     16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             44 BANK0     36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             33 BANK0     11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             17 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             26 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                             17 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             35 BANK0      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             17 BANK0     18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             17 BANK0     26    10     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1386
                           _init_LCD
                          _init_RFID
                       _init_sensors
 ---------------------------------------------------------------------------------
 (2) _init_sensors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1386
                                             21 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1324
                                             21 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1672
                                             21 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _ClearLCD                                             1     1      0    1262
                                             21 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1262
                                             19 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             17 BANK0      2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerLow                                 11    11      0     352
                                              6 BANK0     11    11      0
                       i1_LCD_String
 ---------------------------------------------------------------------------------
 (10) i1_LCD_String                                        2     0      2     352
                                              4 BANK0      2     0      2
                          i1_SendLCD
 ---------------------------------------------------------------------------------
 (11) i1_SendLCD                                           2     1      1     252
                                              2 BANK0      2     1      1
                           i1_LCDout
 ---------------------------------------------------------------------------------
 (12) i1_LCDout                                            2     2      0     124
                                              0 BANK0      2     2      0
                            i1_E_TOG
 ---------------------------------------------------------------------------------
 (13) i1_E_TOG                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _InterruptHandlerHigh                               10    10      0    2940
                                             30 COMRAM    10    10      0
                         _check_RFID
                        _processRFID
 ---------------------------------------------------------------------------------
 (15) _processRFID                                         6     3      3    1316
                                              5 COMRAM     6     3      3
                         i2_ClearLCD
                          i2_SendLCD
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (16) i2_ClearLCD                                          1     1      0     284
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (15) _check_RFID                                         24    22      2    1600
                                              6 COMRAM    24    22      2
                       i2_LCD_String
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (16) i2_SetLine                                           1     1      0     328
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (16) i2_LCD_String                                        2     0      2     381
                                              4 COMRAM     2     0      2
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (17) i2_SendLCD                                           2     1      1     284
                                              2 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (18) i2_LCDout                                            2     2      0      88
                                              0 COMRAM     2     2      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (19) i2_E_TOG                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _setup
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensors
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 _InterruptHandlerLow (ROOT)
   i1_LCD_String
     i1_SendLCD
       i1_LCDout
         i1_E_TOG

 _InterruptHandlerHigh (ROOT)
   _check_RFID
     i2_LCD_String
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
   _processRFID
     i2_ClearLCD
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SendLCD
       i2_LCDout
         i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     12      32       7       19.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7A      84       5       82.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      38       1       59.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EE       3        0.0%
DATA                 0      0      EE      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb 21 19:35:35 2020

                             l51 1364                               bsr 000FE0  
                    ?_LCD_String 0075                              l282 0D3A  
                            l293 03BE                              l295 03C6  
                            _abs 124C                              _pad 0D08  
                            wreg 000FE8                     processRFID@i 0009  
                   __CFG_LVP$OFF 000000                             l1005 1276  
                           ?_abs 0083                             l2400 08F8  
                           l2320 0C80                             l2410 0954  
                           l2330 10CC                             l2340 12F4  
                           l2414 096A                             l2430 09E0  
                           l2334 10E4                             l2440 0A32  
                           l2360 0D32                             l2418 0990  
                           l2450 0A90                             l2434 0A04  
                           l2338 12EE                             l2370 0D8A  
                           l2362 0D44                             l2522 0568  
                           l2356 0D22                             l2454 0AB6  
                           l2446 0A7A                             l2438 0A1E  
                           l2366 0D5E                             l2518 0550  
                           l2470 03A2                             l2392 08BE  
                           l2386 0896                             l2642 102C  
                           l2484 03E0                             l2564 06BE  
                           l2644 1052                             l2740 0BB8  
                           l2398 08E4                             l2558 0682  
                           l2574 06E2                             l2750 0BF8  
                           l2672 1122                             l2488 03F0  
                           l2568 06CA                             l2752 0BFC  
                           l2666 10FE                             l2682 12AA  
                           l2498 04EA                             l2754 0C04  
                           l2772 0C58                             l2764 0C20  
                           l2748 0BF0                             l2678 1296  
                           ?_pad 0081                             STR_1 0340  
                           STR_2 0331                             STR_3 0345  
                           STR_4 0321                             STR_5 0311  
                           STR_6 0301                             u2000 125C  
                           u2110 0A36                             u2031 08C4  
                           u2200 03DA                             u2050 08FC  
                           u2210 04FA                             u2140 0374  
                           u2230 051C                             u2150 0376  
                           _LATB 000F8A                             u2231 051A  
                           u2240 052A                             u2320 0604  
                           u2250 052E                             u2180 03B4  
                           u2270 053A                             u2507 0C2C  
                           u2517 0AF8                             u1910 0C78  
                           u2470 0C50                             u2295 117E  
                           u2607 0BAA                             u2527 0B0E  
                           u2296 1180                             u2480 0C5C  
                           u2617 12AC                             u2537 0B20  
                           u1930 0CC0                             u2627 111C  
                           u2547 0B2E                             u2637 1354  
                           u2557 0B3C                             u2647 118E  
                           u2567 0B50                             u2657 11A0  
                           u2577 0B64                             u2667 0EA2  
                           u2587 0B7E                             u2677 13C4  
                           u2597 0B96                             i1l76 00BE  
                           i2l64 0F7C                             i2l59 0F7A  
                __end_ofi1_E_TOG 13DC                  __end_ofi2_E_TOG 13EA  
                           abs@a 0083                             _dbuf 0100  
                           _main 0BB2                             _dtoa 034A  
                           _prec 00DE                             _nout 00DA  
                           pad@i 0088                             pad@p 0085  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 008A  
                           fsr2l 000FD9                             btemp 0039  
                           start 00DE                     ___param_bank 000000  
              processRFID@i_1062 000B                  __end_of_SendLCD 11A8  
                          ??_abs 0085                            ??_pad 0087  
                __end_of_SetLine 12B4                  __end_of___aodiv 09B2  
                          ?_main 0001                            ?_dtoa 008C  
                __end_of___aomod 0AD8                 __end_ofi1_LCDout 0F26  
                          _RCREG 000FAE                            _E_TOG 13C0  
                   vfpfcnvrt@fmt 00B2                 __end_ofi2_LCDout 1018  
                          _SPBRG 000FAF                      ?i2_ClearLCD 0001  
                          _flags 00E0                            _fputc 0C66  
                          _fputs 10C0                            _setup 1360  
                          pad@fp 0081                            _width 00DC  
             __size_ofi1_SendLCD 0038                            _putch 13EA  
                          main@i 0130                            dtoa@d 008E  
                          dtoa@i 00AE                            dtoa@n 00A6  
                          dtoa@p 00A0                            dtoa@s 00A4  
                          dtoa@w 00A2               __size_ofi2_SendLCD 0030  
                          tablat 000FF5               __size_ofi2_SetLine 002E  
             processRFID@RFIDbuf 0006                            ttemp5 003A  
                          ttemp6 003D                            ttemp7 0041  
                          status 000FD8                            wtemp8 003A  
            __size_of_LCD_String 003A                  __end_of_sprintf 10C0  
               __end_of_ClearLCD 1360                   __CFG_MCLRE$OFF 000000  
                __initialization 11E0                     __end_of_main 0C66  
                   __end_of_dtoa 0592                   __CFG_OSC$IRCIO 000000  
               LCD_String@string 0075                           ??_main 00D8  
                         ??_dtoa 0096                    __activetblptr 000001  
                         ?_E_TOG 0001                        ??i1_E_TOG 0060  
                      ??i2_E_TOG 0001                           ?_fputc 0071  
                         ?_fputs 007A                           _CCPR1H 000FBF  
                         _CCPR1L 000FBE                           ?_setup 0001  
                         ?_putch 0001                           i1l2702 1138  
                         i1l2708 115C                           i1l2736 00BC  
                         i1l2728 008C                           i2l2114 0DC0  
                         i2l2134 0DFE                           i2l2126 0DEE  
                         i2l2160 0720                           i2l2082 1218  
                         i2l2074 1324                           i2l2146 0E1A  
                         i2l2172 07A4                           i2l2078 1336  
                         i2l2182 0854                           i2l2166 0762  
                         i2l2088 1238                           _LCDout 0E2E  
                    SendLCD@Byte 0074                    ?i1_LCD_String 0064  
                         _OSCCON 000FD3                           _PTCON0 000F7F  
                         _PTCON1 000F7E                           _SPBRGH 000FB0  
                         _PTPERH 000F7A                           _PTPERL 000F7B  
                    SendLCD@type 0073                        ??_SendLCD 0074  
                  ?_init_sensors 0001                        ??_SetLine 0075  
            __size_ofi2_ClearLCD 001A                     vfprintf@cfmt 00C6  
                      ??___aodiv 0081                        ??___aomod 0081  
               __end_of_init_LCD 0BB2                __end_ofi1_SendLCD 11E0  
                         clear_0 11E6                           clear_1 11F2  
                         clear_2 11FE                __end_ofi2_SendLCD 12E4  
                  ?i2_LCD_String 0005                __end_ofi2_SetLine 1340  
                         pad@buf 0083                           dtoa@fp 008C  
                         _strlen 12E4                           fputc@c 0071  
                         fputs@c 007E                           fputs@i 007F  
                         fputs@s 007A                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           putch@c 0001  
               __end_of_vfprintf 106E                        ??_sprintf 00CE  
                   ?_processRFID 0006                   ??i1_LCD_String 0066  
                     __accesstop 0060          __end_of__initialization 1204  
                  ___rparam_used 000001                   ??_init_sensors 0071  
                    SetLine@line 0075                    __end_of_E_TOG 13CE  
                      ?i1_LCDout 0001                        ?i2_LCDout 0001  
                 __pcstackCOMRAM 0001                    __end_of_fputc 0D08  
                  __end_of_fputs 10FC                    __end_of_setup 137E  
                  __end_of_putch 13EC                   ??i2_LCD_String 0007  
                   ??_LCD_String 0077                          ??_E_TOG 0071  
  __size_of_InterruptHandlerHigh 0F98                        ?_ClearLCD 0001  
    __end_of_InterruptHandlerLow 00DE                          ??_fputc 0075  
                     _check_RFID 0718                          ??_fputs 007E  
                        ??_setup 0076                          ??_putch 0071  
                     __pbssBANK0 00DA                       __pbssBANK1 0100  
                        ?_LCDout 0001               __size_of_init_RFID 0018  
             __end_of_LCD_String 1136                       ??i1_LCDout 0060  
             i1LCD_String@string 0064                       ??i2_LCDout 0001  
                        _CCP1CON 000FBD                          _CCP2CON 000FBA  
                        ?_strlen 0071                     ??i2_ClearLCD 0005  
                     ??_ClearLCD 0075                          i1_E_TOG 13CE  
             __size_of_vfpfcnvrt 0186                          i2_E_TOG 13DC  
                        _PWMCON0 000F6F                          _PWMCON1 000F6E  
                      ?_init_LCD 0001                  __size_of_LCDout 007C  
                        _SendLCD 1170                          __Hparam 0000  
                        _SetLine 1280                          __Lparam 0000  
             __end_ofi2_ClearLCD 1398                          ___aodiv 0868  
                        ___aomod 09B2            processRFID@latestChar 0008  
                      ?_vfprintf 00C0                     __psmallconst 0300  
                        __pcinit 11E0             __end_ofi1_LCD_String 1170  
                        __ramtop 0300                          __ptext0 0BB2  
                        __ptext1 106E                          __ptext2 1018  
                        __ptext3 0592                          __ptext4 034A  
                        __ptext5 0D08                          __ptext6 12E4  
                        __ptext7 10C0                          __ptext8 0C66  
                        __ptext9 13EA                __end_of_init_RFID 13B0  
               check_RFID@hexBuf 000B                  __size_of_strlen 002E  
                      _T1CONbits 000FCD                     __size_of_abs 0034  
                   __size_of_pad 009E             __end_of_init_sensors 13C0  
                   LCDout@number 0072                      ?_check_RFID 0007  
                        _sprintf 106E                   __pintcode_body 0F26  
           end_of_initialization 1204                       ??_init_LCD 0075  
           __end_ofi2_LCD_String 124C             __size_of_processRFID 0088  
                        fputc@fp 0073                          int_func 0F26  
                        fputs@fp 007C  InterruptHandlerLow@falling_edge 0029  
              __end_of_vfpfcnvrt 0718                        _RCSTAbits 000FAB  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_vfprintf 00C6                          strlen@a 0073  
                        strlen@s 0071                       _robot_mode 002C  
                      _PORTDbits 000F83                        i1_SendLCD 11A8  
                      i2_SendLCD 12B4                        i2_SetLine 1312  
             i2LCD_String@string 0005                        _TRISAbits 000F92  
                      _TRISCbits 000F94                        _TRISDbits 000F95  
                 i1LCDout@number 0061                   __end_of_LCDout 0EAA  
                      _TXSTAbits 000FAC                __size_ofi1_LCDout 007C  
              __size_ofi2_LCDout 0078              __size_of_check_RFID 0150  
                    vfpfcnvrt@ap 00B4                      vfpfcnvrt@fp 00B0  
                    vfpfcnvrt@ll 00B8                      _BAUDCONbits 000FAA  
                     ?i1_SendLCD 0062                   __end_of_strlen 1312  
                     ?i2_SendLCD 0003              start_initialization 11E0  
                     ?i2_SetLine 0001                      __end_of_abs 1280  
                    __end_of_pad 0DA6                __size_of_ClearLCD 0020  
                       ??_LCDout 0071    InterruptHandlerHigh@RFID_flag 0028  
   __end_of_InterruptHandlerHigh 0FA0                      vfprintf@fmt 00C2  
          __size_ofi1_LCD_String 003A            __size_of_init_sensors 0010  
                       ??_strlen 0073                      __pbssCOMRAM 0029  
                  __pcstackBANK0 0060                    __pcstackBANK1 0120  
                       ?i1_E_TOG 0001                 ___aodiv@dividend 0071  
                       ?i2_E_TOG 0001            __size_ofi2_LCD_String 0036  
                 i2LCDout@number 0002     __size_of_InterruptHandlerLow 00C6  
                   i1_LCD_String 1136                __size_of_init_LCD 00DA  
                       ?_SendLCD 0073                         ?_SetLine 0001  
                   _init_sensors 13B0                        _dtoa$1211 009E  
                      __pintcode 0008                         ?___aodiv 0071  
                       ?___aomod 0071                 ___aodiv@quotient 0083  
             check_RFID@checksum 001C                      __pintcodelo 0018  
                   i2_LCD_String 1216                __size_of_vfprintf 0056  
                    ??i1_SendLCD 0063                      __smallconst 0300  
                 __size_of_E_TOG 000E                      ??i2_SendLCD 0004  
                    ??i2_SetLine 0005                        _init_RFID 1398  
                   ??_check_RFID 0009                         ?_sprintf 00C8  
                 __size_of_fputc 00A2                   __size_of_fputs 003C  
                 __size_of_setup 001E                   __size_of_putch 0002  
                check_RFID@byte1 0017                  check_RFID@byte2 0018  
                check_RFID@byte3 0019                  check_RFID@byte4 001A  
                check_RFID@byte5 001B                    i1SendLCD@Byte 0063  
                       _LATAbits 000F89                         _LATCbits 000F8B  
                       _LATDbits 000F8C                         _PIE1bits 000F9D  
                  i1SendLCD@type 0062                         i1u235_25 11B6  
                       i1u235_26 11B8                         i1u270_27 11C6  
                       i1u271_27 11D8                         i1u272_27 0F1E  
                       i1u273_27 13D2                         i1_LCDout 0EAA  
                       i1u268_27 005A                         i1u269_27 1156  
                       i2u151_40 0DEA                         i2u143_45 12BE  
                       i2u143_46 12C0                         i2u160_40 07C4  
                       i2u161_40 07D2                         i2u153_40 0E16  
                       i2u170_40 0814                         i2u162_40 07D4  
                       i2u171_40 0830                         i2u163_40 07E2  
                       i2u172_40 0832                         i2u164_40 07E4  
                       i2u165_40 07F2                         i2u166_40 07F4  
                       i2u158_40 07B8                         i2u167_40 0802  
                       i2u159_40 07C2                         i2u168_40 0804  
                       i2u280_47 13E0                         i2u169_40 0812  
                       _PIR1bits 000F9E                         i2_LCDout 0FA0  
                       i2u274_47 138E                         i2u275_47 1338  
                       i2u276_47 1232                         i2u277_47 12CC  
                       i2u278_47 12DC                         i2u279_47 1010  
                       _RCONbits 000FD0                        _vfpfcnvrt 0592  
             __end_of_check_RFID 0868             _InterruptHandlerHigh 0008  
                       _ClearLCD 1340                       ?_init_RFID 0001  
               __size_ofi1_E_TOG 000E                 __size_ofi2_E_TOG 000E  
                  ??_processRFID 0009                    i2SendLCD@Byte 0004  
                  i2SendLCD@type 0003                      check_RFID@i 001D  
                       __Hrparam 0000                 __size_of_SendLCD 0038  
                     vfprintf@ap 00C4                         __Lrparam 0000  
                     vfprintf@fp 00C0                 __size_of_SetLine 0034  
                   __Lsmallconst 0300                 __size_of___aodiv 014A  
               __size_of___aomod 0126                       ?_vfpfcnvrt 00B0  
                ___aodiv@divisor 0079                  ___aodiv@counter 0081  
          ?_InterruptHandlerHigh 0001                       sprintf@fmt 00CA  
              check_RFID@dataBuf 0007                         __ptext10 124C  
                       __ptext11 09B2                         __ptext20 1170  
                       __ptext12 0868                         __ptext21 0E2E  
                       __ptext13 1360                         __ptext30 137E  
                       __ptext22 13C0                         __ptext14 13B0  
                       __ptext31 0718                         __ptext15 1398  
                       __ptext32 1312                         __ptext24 1136  
                       __ptext16 0AD8                         __ptext33 1216  
                       __ptext25 11A8                         __ptext17 1280  
                       __ptext34 12B4                         __ptext26 0EAA  
                       __ptext18 10FC                         __ptext35 0FA0  
                       __ptext27 13CE                         __ptext19 1340  
                       __ptext36 13DC                         __ptext29 0DA6  
               __size_of_sprintf 0052                         _init_LCD 0AD8  
    InterruptHandlerHigh@RFIDbuf 002D                    __size_of_main 00B4  
                  __size_of_dtoa 0248              __end_of_processRFID 0E2E  
                       _raw_data 00E2                    i2SetLine@line 0005  
                       int$flags 0039                         _vfprintf 1018  
            _InterruptHandlerLow 0018                         main@temp 0120  
                     _LCD_String 10FC                 ___aomod@dividend 0071  
                     _INTCONbits 000FF2                      ??_init_RFID 0071  
                       intlevel1 0000                         intlevel2 0000  
                      sprintf@ap 00D0             ?_InterruptHandlerLow 0001  
                     _OSCCONbits 000FD3                  ___aomod@divisor 0079  
     processRFID@position_in_buf 002B                      ??_vfpfcnvrt 00B6  
                ___aomod@counter 0081           ??_InterruptHandlerHigh 001F  
                       sprintf@f 00D2                         sprintf@s 00C8  
                     i2_ClearLCD 137E                      _processRFID 0DA6  
          ??_InterruptHandlerLow 0066                     ___aodiv@sign 0082  
                   ___aomod@sign 0082  
