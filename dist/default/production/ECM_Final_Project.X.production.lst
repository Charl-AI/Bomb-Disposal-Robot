

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 10 08:44:02 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4331 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     _PORTDbits	set	3971
    83  0000                     _CAP1BUFL	set	3944
    84  0000                     _CAP1BUFH	set	3945
    85  0000                     _CAP1CON	set	3939
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _INTCON2bits	set	4081
   111  0000                     _T0CON	set	4053
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TRISBbits	set	3987
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCONbits	set	4082
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _PDC1H	set	3958
   119  0000                     _PDC1L	set	3959
   120  0000                     _PDC0H	set	3960
   121  0000                     _PDC0L	set	3961
   122                           
   123                           	psect	smallconst
   124  000300                     __psmallconst:
   125                           	opt callstack 0
   126  000300  00                 	db	0
   127  000301                     STR_10:
   128  000301  53                 	db	83	;'S'
   129  000302  54                 	db	84	;'T'
   130  000303  41                 	db	65	;'A'
   131  000304  52                 	db	82	;'R'
   132  000305  54                 	db	84	;'T'
   133  000306  49                 	db	73	;'I'
   134  000307  4E                 	db	78	;'N'
   135  000308  47                 	db	71	;'G'
   136  000309  20                 	db	32
   137  00030A  53                 	db	83	;'S'
   138  00030B  45                 	db	69	;'E'
   139  00030C  41                 	db	65	;'A'
   140  00030D  52                 	db	82	;'R'
   141  00030E  43                 	db	67	;'C'
   142  00030F  48                 	db	72	;'H'
   143  000310  00                 	db	0
   144  000311                     STR_9:
   145  000311  54                 	db	84	;'T'
   146  000312  4F                 	db	79	;'O'
   147  000313  20                 	db	32
   148  000314  53                 	db	83	;'S'
   149  000315  54                 	db	84	;'T'
   150  000316  41                 	db	65	;'A'
   151  000317  52                 	db	82	;'R'
   152  000318  54                 	db	84	;'T'
   153  000319  20                 	db	32
   154  00031A  53                 	db	83	;'S'
   155  00031B  45                 	db	69	;'E'
   156  00031C  41                 	db	65	;'A'
   157  00031D  52                 	db	82	;'R'
   158  00031E  43                 	db	67	;'C'
   159  00031F  48                 	db	72	;'H'
   160  000320  00                 	db	0
   161  000321                     STR_7:
   162  000321  52                 	db	82	;'R'
   163  000322  45                 	db	69	;'E'
   164  000323  53                 	db	83	;'S'
   165  000324  45                 	db	69	;'E'
   166  000325  54                 	db	84	;'T'
   167  000326  54                 	db	84	;'T'
   168  000327  49                 	db	73	;'I'
   169  000328  4E                 	db	78	;'N'
   170  000329  47                 	db	71	;'G'
   171  00032A  20                 	db	32
   172  00032B  52                 	db	82	;'R'
   173  00032C  4F                 	db	79	;'O'
   174  00032D  42                 	db	66	;'B'
   175  00032E  4F                 	db	79	;'O'
   176  00032F  54                 	db	84	;'T'
   177  000330  00                 	db	0
   178  000331                     STR_3:
   179  000331  43                 	db	67	;'C'
   180  000332  48                 	db	72	;'H'
   181  000333  45                 	db	69	;'E'
   182  000334  43                 	db	67	;'C'
   183  000335  4B                 	db	75	;'K'
   184  000336  53                 	db	83	;'S'
   185  000337  55                 	db	85	;'U'
   186  000338  4D                 	db	77	;'M'
   187  000339  20                 	db	32
   188  00033A  46                 	db	70	;'F'
   189  00033B  41                 	db	65	;'A'
   190  00033C  49                 	db	73	;'I'
   191  00033D  4C                 	db	76	;'L'
   192  00033E  45                 	db	69	;'E'
   193  00033F  44                 	db	68	;'D'
   194  000340  00                 	db	0
   195  000341                     STR_2:
   196  000341  43                 	db	67	;'C'
   197  000342  48                 	db	72	;'H'
   198  000343  45                 	db	69	;'E'
   199  000344  43                 	db	67	;'C'
   200  000345  4B                 	db	75	;'K'
   201  000346  53                 	db	83	;'S'
   202  000347  55                 	db	85	;'U'
   203  000348  4D                 	db	77	;'M'
   204  000349  20                 	db	32
   205  00034A  50                 	db	80	;'P'
   206  00034B  41                 	db	65	;'A'
   207  00034C  53                 	db	83	;'S'
   208  00034D  53                 	db	83	;'S'
   209  00034E  45                 	db	69	;'E'
   210  00034F  44                 	db	68	;'D'
   211  000350  00                 	db	0
   212  000351                     STR_5:
   213  000351  4D                 	db	77	;'M'
   214  000352  4F                 	db	79	;'O'
   215  000353  56                 	db	86	;'V'
   216  000354  49                 	db	73	;'I'
   217  000355  4E                 	db	78	;'N'
   218  000356  47                 	db	71	;'G'
   219  000357  20                 	db	32
   220  000358  54                 	db	84	;'T'
   221  000359  4F                 	db	79	;'O'
   222  00035A  20                 	db	32
   223  00035B  42                 	db	66	;'B'
   224  00035C  4F                 	db	79	;'O'
   225  00035D  4D                 	db	77	;'M'
   226  00035E  42                 	db	66	;'B'
   227  00035F  00                 	db	0
   228  000360                     STR_6:
   229  000360  52                 	db	82	;'R'
   230  000361  45                 	db	69	;'E'
   231  000362  54                 	db	84	;'T'
   232  000363  55                 	db	85	;'U'
   233  000364  52                 	db	82	;'R'
   234  000365  4E                 	db	78	;'N'
   235  000366  49                 	db	73	;'I'
   236  000367  4E                 	db	78	;'N'
   237  000368  47                 	db	71	;'G'
   238  000369  20                 	db	32
   239  00036A  48                 	db	72	;'H'
   240  00036B  4F                 	db	79	;'O'
   241  00036C  4D                 	db	77	;'M'
   242  00036D  45                 	db	69	;'E'
   243  00036E  00                 	db	0
   244  00036F                     STR_1:
   245  00036F  43                 	db	67	;'C'
   246  000370  72                 	db	114	;'r'
   247  000371  69                 	db	105	;'i'
   248  000372  74                 	db	116	;'t'
   249  000373  69                 	db	105	;'i'
   250  000374  63                 	db	99	;'c'
   251  000375  61                 	db	97	;'a'
   252  000376  6C                 	db	108	;'l'
   253  000377  20                 	db	32
   254  000378  45                 	db	69	;'E'
   255  000379  72                 	db	114	;'r'
   256  00037A  72                 	db	114	;'r'
   257  00037B  6F                 	db	111	;'o'
   258  00037C  72                 	db	114	;'r'
   259  00037D  00                 	db	0
   260  00037E                     STR_8:
   261  00037E  50                 	db	80	;'P'
   262  00037F  52                 	db	82	;'R'
   263  000380  45                 	db	69	;'E'
   264  000381  53                 	db	83	;'S'
   265  000382  53                 	db	83	;'S'
   266  000383  20                 	db	32
   267  000384  42                 	db	66	;'B'
   268  000385  55                 	db	85	;'U'
   269  000386  54                 	db	84	;'T'
   270  000387  54                 	db	84	;'T'
   271  000388  4F                 	db	79	;'O'
   272  000389  4E                 	db	78	;'N'
   273  00038A  00                 	db	0
   274  00038B                     STR_4:
   275  00038B  53                 	db	83	;'S'
   276  00038C  45                 	db	69	;'E'
   277  00038D  41                 	db	65	;'A'
   278  00038E  52                 	db	82	;'R'
   279  00038F  43                 	db	67	;'C'
   280  000390  48                 	db	72	;'H'
   281  000391  49                 	db	73	;'I'
   282  000392  4E                 	db	78	;'N'
   283  000393  47                 	db	71	;'G'
   284  000394  00                 	db	0
   285                           
   286                           ; #config settings
   287  000395  00                 	db	0	; dummy byte at the end
   288  0000                     
   289                           	psect	cinit
   290  001068                     __pcinit:
   291                           	opt callstack 0
   292  001068                     start_initialization:
   293                           	opt callstack 0
   294  001068                     __initialization:
   295                           	opt callstack 0
   296                           
   297                           ; Clear objects allocated to BANK0 (61 bytes)
   298  001068  EE00  F060         	lfsr	0,__pbssBANK0
   299  00106C  0E3D               	movlw	61
   300  00106E                     clear_0:
   301  00106E  6AEE               	clrf	postinc0,c
   302  001070  06E8               	decf	wreg,f,c
   303  001072  E1FD               	bnz	clear_0
   304                           
   305                           ; Clear objects allocated to COMRAM (17 bytes)
   306  001074  EE00  F038         	lfsr	0,__pbssCOMRAM
   307  001078  0E11               	movlw	17
   308  00107A                     clear_1:
   309  00107A  6AEE               	clrf	postinc0,c
   310  00107C  06E8               	decf	wreg,f,c
   311  00107E  E1FD               	bnz	clear_1
   312  001080                     end_of_initialization:
   313                           	opt callstack 0
   314  001080                     __end_of__initialization:
   315                           	opt callstack 0
   316  001080  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   317  001082  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   318  001084  0E00               	movlw	low (__Lsmallconst shr (0+16))
   319  001086  6EF8               	movwf	tblptru,c
   320  001088  0E03               	movlw	high __Lsmallconst
   321  00108A  6EF7               	movwf	tblptrh,c
   322  00108C  0100               	movlb	0
   323  00108E  EF30  F004         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMRAM
   326  000038                     __pbssCOMRAM:
   327                           	opt callstack 0
   328  000038                     classify_data@smoothed:
   329                           	opt callstack 0
   330  000038                     	ds	2
   331  00003A                     processRFID@position_in_buf:
   332                           	opt callstack 0
   333  00003A                     	ds	1
   334  00003B                     _robot_mode:
   335                           	opt callstack 0
   336  00003B                     	ds	1
   337  00003C                     _RFIDbuf:
   338                           	opt callstack 0
   339  00003C                     	ds	12
   340  000048                     _RFID_flag:
   341                           	opt callstack 0
   342  000048                     	ds	1
   343                           
   344                           	psect	bssBANK0
   345  000060                     __pbssBANK0:
   346                           	opt callstack 0
   347  000060                     _travel_moves:
   348                           	opt callstack 0
   349  000060                     	ds	61
   350                           
   351                           	psect	cstackBANK0
   352  00009D                     __pcstackBANK0:
   353                           	opt callstack 0
   354  00009D                     main@searching_speed:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x0
   358  00009D                     	ds	2
   359  00009F                     main@moving_speed:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x2
   363  00009F                     	ds	2
   364  0000A1                     main@motorL:
   365                           	opt callstack 0
   366                           
   367                           ; 9 bytes @ 0x4
   368  0000A1                     	ds	9
   369  0000AA                     main@motorR:
   370                           	opt callstack 0
   371                           
   372                           ; 9 bytes @ 0xD
   373  0000AA                     	ds	9
   374                           
   375                           	psect	cstackCOMRAM
   376  000001                     __pcstackCOMRAM:
   377                           	opt callstack 0
   378  000001                     processRFID@RFIDbuf:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0x0
   382  000001                     	ds	1
   383  000002                     processRFID@latestChar:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0x1
   387  000002                     	ds	1
   388  000003                     processRFID@i:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x2
   392  000003                     	ds	1
   393  000004                     ??_InterruptHandlerHigh:
   394                           
   395                           ; 1 bytes @ 0x3
   396  000004                     	ds	3
   397  000007                     ??_InterruptHandlerLow:
   398                           
   399                           ; 1 bytes @ 0x6
   400  000007                     	ds	7
   401  00000E                     ??_LCDout:
   402  00000E                     ?___wmul:
   403                           	opt callstack 0
   404  00000E                     initPWM@PWMperiod:
   405                           	opt callstack 0
   406  00000E                     classify_data@raw_data:
   407                           	opt callstack 0
   408  00000E                     ___wmul@multiplier:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0xD
   412  00000E                     	ds	1
   413  00000F                     LCDout@number:
   414                           	opt callstack 0
   415                           
   416                           ; 1 bytes @ 0xE
   417  00000F                     	ds	1
   418  000010                     ??_classify_data:
   419  000010                     SendLCD@type:
   420                           	opt callstack 0
   421  000010                     ___wmul@multiplicand:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0xF
   425  000010                     	ds	1
   426  000011                     SendLCD@Byte:
   427                           	opt callstack 0
   428                           
   429                           ; 1 bytes @ 0x10
   430  000011                     	ds	1
   431  000012                     ??_init_LCD:
   432  000012                     ??_ClearLCD:
   433  000012                     SetLine@line:
   434                           	opt callstack 0
   435  000012                     LCD_String@string:
   436                           	opt callstack 0
   437  000012                     classify_data@filtered:
   438                           	opt callstack 0
   439  000012                     ___wmul@product:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x11
   443  000012                     	ds	1
   444  000013                     check_RFID@dataBuf:
   445                           	opt callstack 0
   446  000013                     display_RFID@dataBuf:
   447                           	opt callstack 0
   448                           
   449                           ; 1 bytes @ 0x12
   450  000013                     	ds	1
   451  000014                     ??_waitForInput:
   452  000014                     ??_check_RFID:
   453  000014                     ?___awdiv:
   454                           	opt callstack 0
   455  000014                     display_RFID@i:
   456                           	opt callstack 0
   457  000014                     ___awdiv@dividend:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x13
   461  000014                     	ds	2
   462  000016                     ___awdiv@divisor:
   463                           	opt callstack 0
   464  000016                     check_RFID@hexBuf:
   465                           	opt callstack 0
   466                           
   467                           ; 12 bytes @ 0x15
   468  000016                     	ds	1
   469  000017                     waitForInput@raw_data:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x16
   473  000017                     	ds	1
   474  000018                     ___awdiv@counter:
   475                           	opt callstack 0
   476                           
   477                           ; 1 bytes @ 0x17
   478  000018                     	ds	1
   479  000019                     ___awdiv@sign:
   480                           	opt callstack 0
   481  000019                     waitForInput@i:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x18
   485  000019                     	ds	1
   486  00001A                     ___awdiv@quotient:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x19
   490  00001A                     	ds	1
   491  00001B                     waitForInput@i_1392:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x1A
   495  00001B                     	ds	1
   496  00001C                     setMotorPWM@m:
   497                           	opt callstack 0
   498                           
   499                           ; 1 bytes @ 0x1B
   500  00001C                     	ds	1
   501  00001D                     ??_setMotorPWM:
   502                           
   503                           ; 1 bytes @ 0x1C
   504  00001D                     	ds	5
   505  000022                     check_RFID@byte1:
   506                           	opt callstack 0
   507  000022                     setMotorPWM@PWMduty:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x21
   511  000022                     	ds	1
   512  000023                     check_RFID@byte2:
   513                           	opt callstack 0
   514                           
   515                           ; 1 bytes @ 0x22
   516  000023                     	ds	1
   517  000024                     stop@mL:
   518                           	opt callstack 0
   519  000024                     turnLeft@mL:
   520                           	opt callstack 0
   521  000024                     turnRight@mL:
   522                           	opt callstack 0
   523  000024                     moveForward@mL:
   524                           	opt callstack 0
   525  000024                     moveBackward@mL:
   526                           	opt callstack 0
   527  000024                     init_motor_struct@mL:
   528                           	opt callstack 0
   529  000024                     check_RFID@byte3:
   530                           	opt callstack 0
   531                           
   532                           ; 1 bytes @ 0x23
   533  000024                     	ds	1
   534  000025                     stop@mR:
   535                           	opt callstack 0
   536  000025                     turnLeft@mR:
   537                           	opt callstack 0
   538  000025                     turnRight@mR:
   539                           	opt callstack 0
   540  000025                     moveForward@mR:
   541                           	opt callstack 0
   542  000025                     moveBackward@mR:
   543                           	opt callstack 0
   544  000025                     init_motor_struct@mR:
   545                           	opt callstack 0
   546  000025                     check_RFID@byte4:
   547                           	opt callstack 0
   548                           
   549                           ; 1 bytes @ 0x24
   550  000025                     	ds	1
   551  000026                     check_RFID@byte5:
   552                           	opt callstack 0
   553  000026                     stop@initial_speed:
   554                           	opt callstack 0
   555  000026                     turnLeft@max_power:
   556                           	opt callstack 0
   557  000026                     turnRight@max_power:
   558                           	opt callstack 0
   559  000026                     moveForward@max_power:
   560                           	opt callstack 0
   561  000026                     moveBackward@max_power:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x25
   565  000026                     	ds	1
   566  000027                     check_RFID@checksum:
   567                           	opt callstack 0
   568                           
   569                           ; 1 bytes @ 0x26
   570  000027                     	ds	1
   571  000028                     ??_stop:
   572  000028                     ??_turnLeft:
   573  000028                     ??_turnRight:
   574  000028                     ??_moveForward:
   575  000028                     ??_moveBackward:
   576  000028                     check_RFID@i:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0x27
   580  000028                     	ds	1
   581  000029                     stop@i:
   582                           	opt callstack 0
   583  000029                     turnLeft@i:
   584                           	opt callstack 0
   585  000029                     turnRight@i:
   586                           	opt callstack 0
   587  000029                     moveForward@i:
   588                           	opt callstack 0
   589  000029                     moveBackward@i:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0x28
   593  000029                     	ds	2
   594  00002B                     scanForBeacon@mL:
   595                           	opt callstack 0
   596  00002B                     moveToBeacon@mL:
   597                           	opt callstack 0
   598  00002B                     returnHome@mL:
   599                           	opt callstack 0
   600  00002B                     stopAndDisplay@mL:
   601                           	opt callstack 0
   602                           
   603                           ; 1 bytes @ 0x2A
   604  00002B                     	ds	1
   605  00002C                     scanForBeacon@mR:
   606                           	opt callstack 0
   607  00002C                     moveToBeacon@mR:
   608                           	opt callstack 0
   609  00002C                     returnHome@mR:
   610                           	opt callstack 0
   611  00002C                     stopAndDisplay@mR:
   612                           	opt callstack 0
   613                           
   614                           ; 1 bytes @ 0x2B
   615  00002C                     	ds	1
   616  00002D                     scanForBeacon@speed:
   617                           	opt callstack 0
   618  00002D                     moveToBeacon@speed:
   619                           	opt callstack 0
   620  00002D                     returnHome@move_speed:
   621                           	opt callstack 0
   622  00002D                     stopAndDisplay@speed:
   623                           	opt callstack 0
   624                           
   625                           ; 2 bytes @ 0x2C
   626  00002D                     	ds	2
   627  00002F                     scanForBeacon@move:
   628                           	opt callstack 0
   629  00002F                     moveToBeacon@move:
   630                           	opt callstack 0
   631  00002F                     stopAndDisplay@RFID_buffer:
   632                           	opt callstack 0
   633  00002F                     returnHome@search_speed:
   634                           	opt callstack 0
   635                           
   636                           ; 2 bytes @ 0x2E
   637  00002F                     	ds	1
   638  000030                     ??_stopAndDisplay:
   639  000030                     scanForBeacon@exit_flag:
   640                           	opt callstack 0
   641  000030                     moveToBeacon@exit_flag:
   642                           	opt callstack 0
   643                           
   644                           ; 1 bytes @ 0x2F
   645  000030                     	ds	1
   646  000031                     ??_scanForBeacon:
   647  000031                     ??_moveToBeacon:
   648  000031                     returnHome@move:
   649                           	opt callstack 0
   650                           
   651                           ; 1 bytes @ 0x30
   652  000031                     	ds	1
   653  000032                     ??_returnHome:
   654  000032                     stopAndDisplay@i:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x31
   658  000032                     	ds	1
   659  000033                     scanForBeacon@raw_data:
   660                           	opt callstack 0
   661  000033                     moveToBeacon@raw_data:
   662                           	opt callstack 0
   663                           
   664                           ; 2 bytes @ 0x32
   665  000033                     	ds	2
   666  000035                     scanForBeacon@beacon_location:
   667                           	opt callstack 0
   668  000035                     moveToBeacon@beacon_location:
   669                           	opt callstack 0
   670                           
   671                           ; 1 bytes @ 0x34
   672  000035                     	ds	1
   673  000036                     moveToBeacon@error_counter:
   674                           	opt callstack 0
   675                           
   676                           ; 2 bytes @ 0x35
   677  000036                     	ds	2
   678  000038                     
   679                           ; 1 bytes @ 0x37
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 117 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  motorR          9   13[BANK0 ] struct DC_motor
   690 ;;  motorL          9    4[BANK0 ] struct DC_motor
   691 ;;  moving_speed    2    2[BANK0 ] int 
   692 ;;  searching_sp    2    0[BANK0 ] int 
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   702 ;;      Params:         0       0       0       0
   703 ;;      Locals:         0      22       0       0
   704 ;;      Temps:          0       0       0       0
   705 ;;      Totals:         0      22       0       0
   706 ;;Total ram usage:       22 bytes
   707 ;; Hardware stack levels required when called:    9
   708 ;; This function calls:
   709 ;;		_LCD_String
   710 ;;		_init_motor_struct
   711 ;;		_moveToBeacon
   712 ;;		_returnHome
   713 ;;		_scanForBeacon
   714 ;;		_setup
   715 ;;		_stopAndDisplay
   716 ;;		_waitForInput
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text0
   723  000860                     __ptext0:
   724                           	opt callstack 0
   725  000860                     _main:
   726                           	opt callstack 22
   727                           
   728                           ;main.c: 120:   setup();
   729                           
   730                           ;incstack = 0
   731  000860  ECB9  F007         	call	_setup	;wreg free
   732                           
   733                           ;main.c: 123:   struct DC_motor motorL, motorR;;main.c: 124:   init_motor_struct(&motorL
      +                          , &motorR);
   734  000864  0EA1               	movlw	low main@motorL
   735  000866  6E24               	movwf	init_motor_struct@mL,c
   736  000868  0EAA               	movlw	low main@motorR
   737  00086A  6E25               	movwf	init_motor_struct@mR,c
   738  00086C  EC67  F003         	call	_init_motor_struct	;wreg free
   739                           
   740                           ;main.c: 127:   int searching_speed = 55;
   741  000870  0E00               	movlw	0
   742  000872  0100               	movlb	0	; () banked
   743  000874  6F9E               	movwf	(main@searching_speed+1)& (0+255),b
   744  000876  0E37               	movlw	55
   745  000878  6F9D               	movwf	main@searching_speed& (0+255),b
   746                           
   747                           ; BSR set to: 0
   748                           ;main.c: 128:   int moving_speed = 95;
   749  00087A  0E00               	movlw	0
   750  00087C  6FA0               	movwf	(main@moving_speed+1)& (0+255),b
   751  00087E  0E5F               	movlw	95
   752  000880  6F9F               	movwf	main@moving_speed& (0+255),b
   753                           
   754                           ; BSR set to: 0
   755                           ;main.c: 130:   waitForInput();
   756  000882  ECF1  F004         	call	_waitForInput	;wreg free
   757  000886                     l2735:
   758                           
   759                           ;main.c: 134:   {;main.c: 136:       if(robot_mode == 0)
   760  000886  503B               	movf	_robot_mode,w,c	;volatile
   761  000888  A4D8               	btfss	status,2,c
   762  00088A  D00F               	goto	l2739
   763                           
   764                           ;main.c: 137:       {;main.c: 138:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed,
   765  00088C  0EA1               	movlw	low main@motorL
   766  00088E  6E2B               	movwf	scanForBeacon@mL,c
   767  000890  0EAA               	movlw	low main@motorR
   768  000892  6E2C               	movwf	scanForBeacon@mR,c
   769  000894  C09D  F02D         	movff	main@searching_speed,scanForBeacon@speed
   770  000898  C09E  F02E         	movff	main@searching_speed+1,scanForBeacon@speed+1
   771  00089C  0E60               	movlw	low _travel_moves
   772  00089E  6E2F               	movwf	scanForBeacon@move,c
   773  0008A0  0E48               	movlw	low _RFID_flag
   774  0008A2  6E30               	movwf	scanForBeacon@exit_flag,c
   775  0008A4  EC48  F005         	call	_scanForBeacon	;wreg free
   776  0008A8  D037               	goto	L3
   777  0008AA                     l2739:
   778  0008AA  043B               	decf	_robot_mode,w,c	;volatile
   779  0008AC  A4D8               	btfss	status,2,c
   780  0008AE  D00F               	goto	l2743
   781                           
   782                           ;main.c: 144:       {;main.c: 145:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   783  0008B0  0EA1               	movlw	low main@motorL
   784  0008B2  6E2B               	movwf	moveToBeacon@mL,c
   785  0008B4  0EAA               	movlw	low main@motorR
   786  0008B6  6E2C               	movwf	moveToBeacon@mR,c
   787  0008B8  C09F  F02D         	movff	main@moving_speed,moveToBeacon@speed
   788  0008BC  C0A0  F02E         	movff	main@moving_speed+1,moveToBeacon@speed+1
   789  0008C0  0E60               	movlw	low _travel_moves
   790  0008C2  6E2F               	movwf	moveToBeacon@move,c
   791  0008C4  0E48               	movlw	low _RFID_flag
   792  0008C6  6E30               	movwf	moveToBeacon@exit_flag,c
   793  0008C8  EC93  F004         	call	_moveToBeacon	;wreg free
   794  0008CC  D025               	goto	L3
   795  0008CE                     l2743:
   796  0008CE  0E02               	movlw	2
   797  0008D0  183B               	xorwf	_robot_mode,w,c	;volatile
   798  0008D2  A4D8               	btfss	status,2,c
   799  0008D4  D011               	goto	l2747
   800                           
   801                           ;main.c: 151:       {;main.c: 152:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   802  0008D6  0EA1               	movlw	low main@motorL
   803  0008D8  6E2B               	movwf	returnHome@mL,c
   804  0008DA  0EAA               	movlw	low main@motorR
   805  0008DC  6E2C               	movwf	returnHome@mR,c
   806  0008DE  C09F  F02D         	movff	main@moving_speed,returnHome@move_speed
   807  0008E2  C0A0  F02E         	movff	main@moving_speed+1,returnHome@move_speed+1
   808  0008E6  C09D  F02F         	movff	main@searching_speed,returnHome@search_speed
   809  0008EA  C09E  F030         	movff	main@searching_speed+1,returnHome@search_speed+1
   810  0008EE  0E60               	movlw	low _travel_moves
   811  0008F0  6E31               	movwf	returnHome@move,c
   812  0008F2  ECE9  F002         	call	_returnHome	;wreg free
   813  0008F6  D010               	goto	L3
   814  0008F8                     l2747:
   815  0008F8  0E03               	movlw	3
   816  0008FA  183B               	xorwf	_robot_mode,w,c	;volatile
   817  0008FC  A4D8               	btfss	status,2,c
   818  0008FE  D00E               	goto	l2751
   819                           
   820                           ;main.c: 158:       {;main.c: 159:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   821  000900  0EA1               	movlw	low main@motorL
   822  000902  6E2B               	movwf	stopAndDisplay@mL,c
   823  000904  0EAA               	movlw	low main@motorR
   824  000906  6E2C               	movwf	stopAndDisplay@mR,c
   825  000908  C09F  F02D         	movff	main@moving_speed,stopAndDisplay@speed
   826  00090C  C0A0  F02E         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   827  000910  0E3C               	movlw	low _RFIDbuf
   828  000912  6E2F               	movwf	stopAndDisplay@RFID_buffer,c
   829  000914  ECCC  F005         	call	_stopAndDisplay	;wreg free
   830  000918                     L3:
   831  000918  6E3B               	movwf	_robot_mode,c	;volatile
   832                           
   833                           ;main.c: 160:       }
   834  00091A  D7B5               	goto	l2735
   835  00091C                     l2751:
   836                           
   837                           ;main.c: 164:       {;main.c: 165:           LCD_String("Critical Error");
   838  00091C  0E6F               	movlw	low STR_1
   839  00091E  6E12               	movwf	LCD_String@string,c
   840  000920  EC1E  F008         	call	_LCD_String	;wreg free
   841  000924  D7B0               	goto	l2735
   842  000926                     __end_of_main:
   843                           	opt callstack 0
   844                           
   845 ;; *************** function _waitForInput *****************
   846 ;; Defined at:
   847 ;;		line 177 in file "subroutines.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  raw_data        2   22[COMRAM] unsigned int 
   852 ;;  throwaway       1    0        unsigned char 
   853 ;;  i               2   26[COMRAM] int 
   854 ;;  i               2   24[COMRAM] int 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 3F/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   864 ;;      Params:         0       0       0       0
   865 ;;      Locals:         7       0       0       0
   866 ;;      Temps:          2       0       0       0
   867 ;;      Totals:         9       0       0       0
   868 ;;Total ram usage:        9 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    7
   871 ;; This function calls:
   872 ;;		_ClearLCD
   873 ;;		_LCD_String
   874 ;;		_SetLine
   875 ;;		_classify_data
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text1
   882  0009E2                     __ptext1:
   883                           	opt callstack 0
   884  0009E2                     _waitForInput:
   885                           	opt callstack 23
   886                           
   887                           ; BSR set to: 0
   888                           ;subroutines.c: 180:     for(int i =0;i<500;i++)
   889                           
   890                           ;incstack = 0
   891  0009E2  0E00               	movlw	0
   892  0009E4  6E1A               	movwf	waitForInput@i+1,c
   893  0009E6  0E00               	movlw	0
   894  0009E8  6E19               	movwf	waitForInput@i,c
   895  0009EA                     l2569:
   896                           
   897                           ;subroutines.c: 181:     {;subroutines.c: 182:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   898  0009EA  5068               	movf	3944,w,c	;volatile
   899  0009EC  CF69 F014          	movff	3945,??_waitForInput	;volatile
   900  0009F0  6A15               	clrf	(??_waitForInput+1)& (0+255),c
   901  0009F2  C014  F015         	movff	??_waitForInput,??_waitForInput+1
   902  0009F6  6A14               	clrf	??_waitForInput,c
   903  0009F8  1014               	iorwf	??_waitForInput,w,c
   904  0009FA  6E17               	movwf	waitForInput@raw_data,c
   905  0009FC  5015               	movf	??_waitForInput+1,w,c
   906  0009FE  6E18               	movwf	waitForInput@raw_data+1,c
   907  000A00  C017  F00E         	movff	waitForInput@raw_data,classify_data@raw_data
   908  000A04  C018  F00F         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   909  000A08  EC57  F007         	call	_classify_data	;wreg free
   910                           
   911                           ;subroutines.c: 184:     }
   912  000A0C  4A19               	infsnz	waitForInput@i,f,c
   913  000A0E  2A1A               	incf	waitForInput@i+1,f,c
   914  000A10  BE1A               	btfsc	waitForInput@i+1,7,c
   915  000A12  D7EB               	goto	l2569
   916  000A14  0EF4               	movlw	244
   917  000A16  5C19               	subwf	waitForInput@i,w,c
   918  000A18  0E01               	movlw	1
   919  000A1A  581A               	subwfb	waitForInput@i+1,w,c
   920  000A1C  A0D8               	btfss	status,0,c
   921  000A1E  D7E5               	goto	l2569
   922                           
   923                           ;subroutines.c: 187:     ClearLCD();
   924  000A20  EC76  F008         	call	_ClearLCD	;wreg free
   925                           
   926                           ;subroutines.c: 188:     SetLine(1);
   927  000A24  0E01               	movlw	1
   928  000A26  EC07  F008         	call	_SetLine
   929                           
   930                           ;subroutines.c: 189:     LCD_String("PRESS BUTTON");
   931  000A2A  0E7E               	movlw	low STR_8
   932  000A2C  6E12               	movwf	LCD_String@string,c
   933  000A2E  EC1E  F008         	call	_LCD_String	;wreg free
   934                           
   935                           ;subroutines.c: 190:     SetLine(2);
   936  000A32  0E02               	movlw	2
   937  000A34  EC07  F008         	call	_SetLine
   938                           
   939                           ;subroutines.c: 191:     LCD_String("TO START SEARCH");
   940  000A38  0E11               	movlw	low STR_9
   941  000A3A  6E12               	movwf	LCD_String@string,c
   942  000A3C  EC1E  F008         	call	_LCD_String	;wreg free
   943  000A40                     l356:
   944  000A40  A483               	btfss	3971,2,c	;volatile
   945  000A42  D7FE               	goto	l356
   946                           
   947                           ;subroutines.c: 197:     ClearLCD();
   948  000A44  EC76  F008         	call	_ClearLCD	;wreg free
   949                           
   950                           ;subroutines.c: 198:     SetLine(1);
   951  000A48  0E01               	movlw	1
   952  000A4A  EC07  F008         	call	_SetLine
   953                           
   954                           ;subroutines.c: 199:     LCD_String("STARTING SEARCH");
   955  000A4E  0E01               	movlw	low STR_10
   956  000A50  6E12               	movwf	LCD_String@string,c
   957  000A52  EC1E  F008         	call	_LCD_String	;wreg free
   958                           
   959                           ;subroutines.c: 200:     for(int i=0; i<10;i++)
   960  000A56  0E00               	movlw	0
   961  000A58  6E1C               	movwf	waitForInput@i_1392+1,c
   962  000A5A  0E00               	movlw	0
   963  000A5C  6E1B               	movwf	waitForInput@i_1392,c
   964  000A5E                     l2593:
   965                           
   966                           ;subroutines.c: 201:     {;subroutines.c: 202:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   967  000A5E  0E02               	movlw	2
   968  000A60  6E15               	movwf	(??_waitForInput+1)& (0+255),c
   969  000A62  0E04               	movlw	4
   970  000A64  6E14               	movwf	??_waitForInput& (0+255),c
   971  000A66  0EBA               	movlw	186
   972  000A68                     u2127:
   973  000A68  2EE8               	decfsz	wreg,f,c
   974  000A6A  D7FE               	bra	u2127
   975  000A6C  2E14               	decfsz	??_waitForInput& (0+255),f,c
   976  000A6E  D7FC               	bra	u2127
   977  000A70  2E15               	decfsz	(??_waitForInput+1)& (0+255),f,c
   978  000A72  D7FA               	bra	u2127
   979  000A74  D000               	nop2	
   980                           
   981                           ;subroutines.c: 203:     }
   982  000A76  4A1B               	infsnz	waitForInput@i_1392,f,c
   983  000A78  2A1C               	incf	waitForInput@i_1392+1,f,c
   984  000A7A  BE1C               	btfsc	waitForInput@i_1392+1,7,c
   985  000A7C  D7F0               	goto	l2593
   986  000A7E  501C               	movf	waitForInput@i_1392+1,w,c
   987  000A80  E104               	bnz	u1930
   988  000A82  0E0A               	movlw	10
   989  000A84  5C1B               	subwf	waitForInput@i_1392,w,c
   990  000A86  A0D8               	btfss	status,0,c
   991  000A88  D7EA               	goto	l2593
   992  000A8A                     u1930:
   993                           
   994                           ;subroutines.c: 204:     ClearLCD();
   995  000A8A  EC76  F008         	call	_ClearLCD	;wreg free
   996  000A8E  0012               	return		;funcret
   997  000A90                     __end_of_waitForInput:
   998                           	opt callstack 0
   999                           
  1000 ;; *************** function _stopAndDisplay *****************
  1001 ;; Defined at:
  1002 ;;		line 144 in file "subroutines.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  1005 ;;		 -> main@motorL(9), 
  1006 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  1007 ;;		 -> main@motorR(9), 
  1008 ;;  speed           2   44[COMRAM] int 
  1009 ;;  RFID_buffer     1   46[COMRAM] PTR volatile unsigned ch
  1010 ;;		 -> RFIDbuf(12), 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  i               2   49[COMRAM] int 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      unsigned char 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1022 ;;      Params:         5       0       0       0
  1023 ;;      Locals:         2       0       0       0
  1024 ;;      Temps:          2       0       0       0
  1025 ;;      Totals:         9       0       0       0
  1026 ;;Total ram usage:        9 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    8
  1029 ;; This function calls:
  1030 ;;		_ClearLCD
  1031 ;;		_LCD_String
  1032 ;;		_check_RFID
  1033 ;;		_display_RFID
  1034 ;;		_stop
  1035 ;; This function is called by:
  1036 ;;		_main
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text2
  1041  000B98                     __ptext2:
  1042                           	opt callstack 0
  1043  000B98                     _stopAndDisplay:
  1044                           	opt callstack 22
  1045                           
  1046                           ;subroutines.c: 144: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *m
      +                          R, int speed,;subroutines.c: 145:                                 volatile char RFID_buf
      +                          fer[]);subroutines.c: 146: {;subroutines.c: 147:     stop(mL, mR,speed);
  1047                           
  1048                           ;incstack = 0
  1049  000B98  C02B  F024         	movff	stopAndDisplay@mL,stop@mL
  1050  000B9C  C02C  F025         	movff	stopAndDisplay@mR,stop@mR
  1051  000BA0  C02D  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1052  000BA4  C02E  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1053  000BA8  EC2F  F007         	call	_stop	;wreg free
  1054                           
  1055                           ;subroutines.c: 150:     display_RFID(RFID_buffer);
  1056  000BAC  C02F  F013         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1057  000BB0  EC9B  F007         	call	_display_RFID	;wreg free
  1058                           
  1059                           ;subroutines.c: 151:     check_RFID(RFID_buffer);
  1060  000BB4  C02F  F013         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1061  000BB8  ECCB  F001         	call	_check_RFID	;wreg free
  1062                           
  1063                           ;subroutines.c: 153:     if(RFID_buffer[0] != 0)
  1064  000BBC  502F               	movf	stopAndDisplay@RFID_buffer,w,c
  1065  000BBE  6ED9               	movwf	fsr2l,c
  1066  000BC0  6ADA               	clrf	fsr2h,c
  1067  000BC2  50DF               	movf	indf2,w,c
  1068  000BC4  A4D8               	btfss	status,2,c
  1069  000BC6  D024               	goto	l2719
  1070  000BC8  D026               	goto	l2721
  1071  000BCA                     l2703:
  1072                           
  1073                           ;subroutines.c: 158:             {;subroutines.c: 159:                 ClearLCD();
  1074  000BCA  EC76  F008         	call	_ClearLCD	;wreg free
  1075                           
  1076                           ;subroutines.c: 160:                 LCD_String("RESETTING ROBOT");
  1077  000BCE  0E21               	movlw	low STR_7
  1078  000BD0  6E12               	movwf	LCD_String@string,c
  1079  000BD2  EC1E  F008         	call	_LCD_String	;wreg free
  1080                           
  1081                           ;subroutines.c: 161:                 for(int i=0; i<10;i++)
  1082  000BD6  0E00               	movlw	0
  1083  000BD8  6E33               	movwf	stopAndDisplay@i+1,c
  1084  000BDA  0E00               	movlw	0
  1085  000BDC  6E32               	movwf	stopAndDisplay@i,c
  1086  000BDE                     l2713:
  1087                           
  1088                           ;subroutines.c: 162:                 {;subroutines.c: 163:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1089  000BDE  0E02               	movlw	2
  1090  000BE0  6E31               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1091  000BE2  0E04               	movlw	4
  1092  000BE4  6E30               	movwf	??_stopAndDisplay& (0+255),c
  1093  000BE6  0EBA               	movlw	186
  1094  000BE8                     u2137:
  1095  000BE8  2EE8               	decfsz	wreg,f,c
  1096  000BEA  D7FE               	bra	u2137
  1097  000BEC  2E30               	decfsz	??_stopAndDisplay& (0+255),f,c
  1098  000BEE  D7FC               	bra	u2137
  1099  000BF0  2E31               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1100  000BF2  D7FA               	bra	u2137
  1101  000BF4  D000               	nop2	
  1102                           
  1103                           ;subroutines.c: 164:                 }
  1104  000BF6  4A32               	infsnz	stopAndDisplay@i,f,c
  1105  000BF8  2A33               	incf	stopAndDisplay@i+1,f,c
  1106  000BFA  BE33               	btfsc	stopAndDisplay@i+1,7,c
  1107  000BFC  D7F0               	goto	l2713
  1108  000BFE  5033               	movf	stopAndDisplay@i+1,w,c
  1109  000C00  E104               	bnz	u2060
  1110  000C02  0E0A               	movlw	10
  1111  000C04  5C32               	subwf	stopAndDisplay@i,w,c
  1112  000C06  A0D8               	btfss	status,0,c
  1113  000C08  D7EA               	goto	l2713
  1114  000C0A                     u2060:
  1115                           
  1116                           ;subroutines.c: 165:                 ClearLCD();
  1117  000C0A  EC76  F008         	call	_ClearLCD	;wreg free
  1118  000C0E  00FF               	reset		;# 
  1119  000C10                     l2719:
  1120                           
  1121                           ;subroutines.c: 157:             while(PORTDbits.RD2 == 1)
  1122  000C10  A483               	btfss	3971,2,c	;volatile
  1123  000C12  D7FE               	goto	l2719
  1124  000C14  D7DA               	goto	l2703
  1125  000C16                     l2721:
  1126                           
  1127                           ;subroutines.c: 171:     {;subroutines.c: 172:         return 0;
  1128  000C16  0E00               	movlw	0
  1129  000C18  0012               	return		;funcret
  1130  000C1A                     __end_of_stopAndDisplay:
  1131                           	opt callstack 0
  1132                           
  1133 ;; *************** function _display_RFID *****************
  1134 ;; Defined at:
  1135 ;;		line 107 in file "RFID.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  dataBuf         1   18[COMRAM] PTR volatile unsigned ch
  1138 ;;		 -> RFIDbuf(12), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  i               2   19[COMRAM] int 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1150 ;;      Params:         1       0       0       0
  1151 ;;      Locals:         2       0       0       0
  1152 ;;      Temps:          0       0       0       0
  1153 ;;      Totals:         3       0       0       0
  1154 ;;Total ram usage:        3 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    7
  1157 ;; This function calls:
  1158 ;;		_ClearLCD
  1159 ;;		_SendLCD
  1160 ;;		_SetLine
  1161 ;; This function is called by:
  1162 ;;		_stopAndDisplay
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text3
  1167  000F36                     __ptext3:
  1168                           	opt callstack 0
  1169  000F36                     _display_RFID:
  1170                           	opt callstack 22
  1171                           
  1172                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1173                           
  1174                           ;incstack = 0
  1175  000F36  EC76  F008         	call	_ClearLCD	;wreg free
  1176                           
  1177                           ;RFID.c: 110:     SetLine(1);
  1178  000F3A  0E01               	movlw	1
  1179  000F3C  EC07  F008         	call	_SetLine
  1180                           
  1181                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1182  000F40  0E00               	movlw	0
  1183  000F42  6E15               	movwf	display_RFID@i+1,c
  1184  000F44  0E00               	movlw	0
  1185  000F46  6E14               	movwf	display_RFID@i,c
  1186  000F48                     l2505:
  1187                           
  1188                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1189  000F48  0E01               	movlw	1
  1190  000F4A  6E10               	movwf	SendLCD@type,c
  1191  000F4C  5013               	movf	display_RFID@dataBuf,w,c
  1192  000F4E  2414               	addwf	display_RFID@i,w,c
  1193  000F50  6ED9               	movwf	fsr2l,c
  1194  000F52  6ADA               	clrf	fsr2h,c
  1195  000F54  50DF               	movf	indf2,w,c
  1196  000F56  ECEF  F007         	call	_SendLCD
  1197                           
  1198                           ;RFID.c: 114:     }
  1199  000F5A  4A14               	infsnz	display_RFID@i,f,c
  1200  000F5C  2A15               	incf	display_RFID@i+1,f,c
  1201  000F5E  BE15               	btfsc	display_RFID@i+1,7,c
  1202  000F60  D7F3               	goto	l2505
  1203  000F62  5015               	movf	display_RFID@i+1,w,c
  1204  000F64  E105               	bnz	u1880
  1205  000F66  0E0A               	movlw	10
  1206  000F68  5C14               	subwf	display_RFID@i,w,c
  1207  000F6A  B0D8               	btfsc	status,0,c
  1208  000F6C  0012               	return	
  1209  000F6E  D7EC               	goto	l2505
  1210  000F70                     u1880:
  1211  000F70  0012               	return		;funcret
  1212  000F72                     __end_of_display_RFID:
  1213                           	opt callstack 0
  1214                           
  1215 ;; *************** function _check_RFID *****************
  1216 ;; Defined at:
  1217 ;;		line 70 in file "RFID.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  dataBuf         1   18[COMRAM] PTR volatile unsigned ch
  1220 ;;		 -> RFIDbuf(12), 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  i               2   39[COMRAM] int 
  1223 ;;  hexBuf         12   21[COMRAM] unsigned char [12]
  1224 ;;  checksum        1   38[COMRAM] unsigned char 
  1225 ;;  byte5           1   37[COMRAM] unsigned char 
  1226 ;;  byte4           1   36[COMRAM] unsigned char 
  1227 ;;  byte3           1   35[COMRAM] unsigned char 
  1228 ;;  byte2           1   34[COMRAM] unsigned char 
  1229 ;;  byte1           1   33[COMRAM] unsigned char 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1239 ;;      Params:         1       0       0       0
  1240 ;;      Locals:        20       0       0       0
  1241 ;;      Temps:          2       0       0       0
  1242 ;;      Totals:        23       0       0       0
  1243 ;;Total ram usage:       23 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    7
  1246 ;; This function calls:
  1247 ;;		_LCD_String
  1248 ;;		_SetLine
  1249 ;; This function is called by:
  1250 ;;		_stopAndDisplay
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text4
  1255  000396                     __ptext4:
  1256                           	opt callstack 0
  1257  000396                     _check_RFID:
  1258                           	opt callstack 22
  1259                           
  1260                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1261                           
  1262                           ;incstack = 0
  1263  000396  0E00               	movlw	0
  1264  000398  6E29               	movwf	check_RFID@i+1,c
  1265  00039A  0E00               	movlw	0
  1266  00039C  6E28               	movwf	check_RFID@i,c
  1267  00039E                     l2471:
  1268                           
  1269                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1270  00039E  5013               	movf	check_RFID@dataBuf,w,c
  1271  0003A0  2428               	addwf	check_RFID@i,w,c
  1272  0003A2  6ED9               	movwf	fsr2l,c
  1273  0003A4  6ADA               	clrf	fsr2h,c
  1274  0003A6  0E2F               	movlw	47
  1275  0003A8  64DF               	cpfsgt	indf2,c
  1276  0003AA  D012               	goto	l2477
  1277  0003AC  5013               	movf	check_RFID@dataBuf,w,c
  1278  0003AE  2428               	addwf	check_RFID@i,w,c
  1279  0003B0  6ED9               	movwf	fsr2l,c
  1280  0003B2  6ADA               	clrf	fsr2h,c
  1281  0003B4  0E3A               	movlw	58
  1282  0003B6  60DF               	cpfslt	indf2,c
  1283  0003B8  D00B               	goto	l2477
  1284                           
  1285                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1286  0003BA  5028               	movf	check_RFID@i,w,c
  1287  0003BC  0F16               	addlw	low check_RFID@hexBuf
  1288  0003BE  6ED9               	movwf	fsr2l,c
  1289  0003C0  6ADA               	clrf	fsr2h,c
  1290  0003C2  5013               	movf	check_RFID@dataBuf,w,c
  1291  0003C4  2428               	addwf	check_RFID@i,w,c
  1292  0003C6  6EE1               	movwf	fsr1l,c
  1293  0003C8  6AE2               	clrf	fsr1h,c
  1294  0003CA  50E7               	movf	indf1,w,c
  1295  0003CC  0FD0               	addlw	208
  1296  0003CE  D018               	goto	L4
  1297  0003D0                     l2477:
  1298  0003D0  5013               	movf	check_RFID@dataBuf,w,c
  1299  0003D2  2428               	addwf	check_RFID@i,w,c
  1300  0003D4  6ED9               	movwf	fsr2l,c
  1301  0003D6  6ADA               	clrf	fsr2h,c
  1302  0003D8  0E40               	movlw	64
  1303  0003DA  64DF               	cpfsgt	indf2,c
  1304  0003DC  D012               	goto	l2483
  1305  0003DE  5013               	movf	check_RFID@dataBuf,w,c
  1306  0003E0  2428               	addwf	check_RFID@i,w,c
  1307  0003E2  6ED9               	movwf	fsr2l,c
  1308  0003E4  6ADA               	clrf	fsr2h,c
  1309  0003E6  0E47               	movlw	71
  1310  0003E8  60DF               	cpfslt	indf2,c
  1311  0003EA  D00B               	goto	l2483
  1312                           
  1313                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1314  0003EC  5028               	movf	check_RFID@i,w,c
  1315  0003EE  0F16               	addlw	low check_RFID@hexBuf
  1316  0003F0  6ED9               	movwf	fsr2l,c
  1317  0003F2  6ADA               	clrf	fsr2h,c
  1318  0003F4  5013               	movf	check_RFID@dataBuf,w,c
  1319  0003F6  2428               	addwf	check_RFID@i,w,c
  1320  0003F8  6EE1               	movwf	fsr1l,c
  1321  0003FA  6AE2               	clrf	fsr1h,c
  1322  0003FC  50E7               	movf	indf1,w,c
  1323  0003FE  0FC9               	addlw	201
  1324  000400                     L4:
  1325  000400  6EDF               	movwf	indf2,c
  1326  000402                     l2483:
  1327                           
  1328                           ;RFID.c: 84:     }
  1329  000402  4A28               	infsnz	check_RFID@i,f,c
  1330  000404  2A29               	incf	check_RFID@i+1,f,c
  1331  000406  BE29               	btfsc	check_RFID@i+1,7,c
  1332  000408  D7CA               	goto	l2471
  1333  00040A  5029               	movf	check_RFID@i+1,w,c
  1334  00040C  E104               	bnz	u1720
  1335  00040E  0E0C               	movlw	12
  1336  000410  5C28               	subwf	check_RFID@i,w,c
  1337  000412  A0D8               	btfss	status,0,c
  1338  000414  D7C4               	goto	l2471
  1339  000416                     u1720:
  1340                           
  1341                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1342  000416  5016               	movf	check_RFID@hexBuf,w,c
  1343  000418  A4D8               	btfss	status,2,c
  1344  00041A  D002               	goto	u1730
  1345  00041C  0E01               	movlw	1
  1346  00041E  D001               	goto	u1740
  1347  000420                     u1730:
  1348  000420  0E00               	movlw	0
  1349  000422                     u1740:
  1350  000422  1017               	iorwf	check_RFID@hexBuf+1,w,c
  1351  000424  6E22               	movwf	check_RFID@byte1,c
  1352                           
  1353                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1354  000426  5018               	movf	check_RFID@hexBuf+2,w,c
  1355  000428  A4D8               	btfss	status,2,c
  1356  00042A  D002               	goto	u1750
  1357  00042C  0E01               	movlw	1
  1358  00042E  D001               	goto	u1760
  1359  000430                     u1750:
  1360  000430  0E00               	movlw	0
  1361  000432                     u1760:
  1362  000432  1019               	iorwf	check_RFID@hexBuf+3,w,c
  1363  000434  6E23               	movwf	check_RFID@byte2,c
  1364                           
  1365                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1366  000436  501A               	movf	check_RFID@hexBuf+4,w,c
  1367  000438  A4D8               	btfss	status,2,c
  1368  00043A  D002               	goto	u1770
  1369  00043C  0E01               	movlw	1
  1370  00043E  D001               	goto	u1780
  1371  000440                     u1770:
  1372  000440  0E00               	movlw	0
  1373  000442                     u1780:
  1374  000442  101B               	iorwf	check_RFID@hexBuf+5,w,c
  1375  000444  6E24               	movwf	check_RFID@byte3,c
  1376                           
  1377                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1378  000446  501C               	movf	check_RFID@hexBuf+6,w,c
  1379  000448  A4D8               	btfss	status,2,c
  1380  00044A  D002               	goto	u1790
  1381  00044C  0E01               	movlw	1
  1382  00044E  D001               	goto	u1800
  1383  000450                     u1790:
  1384  000450  0E00               	movlw	0
  1385  000452                     u1800:
  1386  000452  101D               	iorwf	check_RFID@hexBuf+7,w,c
  1387  000454  6E25               	movwf	check_RFID@byte4,c
  1388                           
  1389                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1390  000456  501E               	movf	check_RFID@hexBuf+8,w,c
  1391  000458  A4D8               	btfss	status,2,c
  1392  00045A  D002               	goto	u1810
  1393  00045C  0E01               	movlw	1
  1394  00045E  D001               	goto	u1820
  1395  000460                     u1810:
  1396  000460  0E00               	movlw	0
  1397  000462                     u1820:
  1398  000462  101F               	iorwf	check_RFID@hexBuf+9,w,c
  1399  000464  6E26               	movwf	check_RFID@byte5,c
  1400                           
  1401                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1402  000466  5020               	movf	check_RFID@hexBuf+10,w,c
  1403  000468  A4D8               	btfss	status,2,c
  1404  00046A  D002               	goto	u1830
  1405  00046C  0E01               	movlw	1
  1406  00046E  D001               	goto	u1840
  1407  000470                     u1830:
  1408  000470  0E00               	movlw	0
  1409  000472                     u1840:
  1410  000472  1021               	iorwf	check_RFID@hexBuf+11,w,c
  1411  000474  6E27               	movwf	check_RFID@checksum,c
  1412                           
  1413                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1414  000476  5022               	movf	check_RFID@byte1,w,c
  1415  000478  1823               	xorwf	check_RFID@byte2,w,c
  1416  00047A  1824               	xorwf	check_RFID@byte3,w,c
  1417  00047C  1825               	xorwf	check_RFID@byte4,w,c
  1418  00047E  6E14               	movwf	??_check_RFID& (0+255),c
  1419  000480  6A15               	clrf	(??_check_RFID+1)& (0+255),c
  1420  000482  5027               	movf	check_RFID@checksum,w,c
  1421  000484  1826               	xorwf	check_RFID@byte5,w,c
  1422  000486  A4D8               	btfss	status,2,c
  1423  000488  D002               	goto	u1850
  1424  00048A  0E01               	movlw	1
  1425  00048C  D001               	goto	u1860
  1426  00048E                     u1850:
  1427  00048E  0E00               	movlw	0
  1428  000490                     u1860:
  1429  000490  1A14               	xorwf	??_check_RFID,f,c
  1430  000492  0E00               	movlw	0
  1431  000494  1A15               	xorwf	??_check_RFID+1,f,c
  1432  000496  5014               	movf	??_check_RFID,w,c
  1433  000498  1015               	iorwf	??_check_RFID+1,w,c
  1434  00049A  B4D8               	btfsc	status,2,c
  1435  00049C  D008               	goto	l2493
  1436                           
  1437                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1438  00049E  0E02               	movlw	2
  1439  0004A0  EC07  F008         	call	_SetLine
  1440                           
  1441                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1442  0004A4  0E41               	movlw	low STR_2
  1443  0004A6  6E12               	movwf	LCD_String@string,c
  1444  0004A8  EC1E  F008         	call	_LCD_String	;wreg free
  1445                           
  1446                           ;RFID.c: 99:     }
  1447  0004AC  0012               	return	
  1448  0004AE                     l2493:
  1449                           
  1450                           ;RFID.c: 102:         SetLine(2);
  1451  0004AE  0E02               	movlw	2
  1452  0004B0  EC07  F008         	call	_SetLine
  1453                           
  1454                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1455  0004B4  0E31               	movlw	low STR_3
  1456  0004B6  6E12               	movwf	LCD_String@string,c
  1457  0004B8  EC1E  F008         	call	_LCD_String	;wreg free
  1458  0004BC  0012               	return		;funcret
  1459  0004BE                     __end_of_check_RFID:
  1460                           	opt callstack 0
  1461                           
  1462 ;; *************** function _SetLine *****************
  1463 ;; Defined at:
  1464 ;;		line 107 in file "LCDIO.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;  line            1    wreg     unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  line            1   17[COMRAM] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1478 ;;      Params:         0       0       0       0
  1479 ;;      Locals:         1       0       0       0
  1480 ;;      Temps:          0       0       0       0
  1481 ;;      Totals:         1       0       0       0
  1482 ;;Total ram usage:        1 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    6
  1485 ;; This function calls:
  1486 ;;		_SendLCD
  1487 ;; This function is called by:
  1488 ;;		_check_RFID
  1489 ;;		_display_RFID
  1490 ;;		_waitForInput
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text5
  1495  00100E                     __ptext5:
  1496                           	opt callstack 0
  1497  00100E                     _SetLine:
  1498                           	opt callstack 23
  1499                           
  1500                           ;incstack = 0
  1501                           ;SetLine@line stored from wreg
  1502  00100E  6E12               	movwf	SetLine@line,c
  1503                           
  1504                           ;LCDIO.c: 109:     if(line == 1){
  1505  001010  0412               	decf	SetLine@line,w,c
  1506  001012  A4D8               	btfss	status,2,c
  1507  001014  D005               	goto	l2313
  1508                           
  1509                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1510  001016  0E00               	movlw	0
  1511  001018  6E10               	movwf	SendLCD@type,c
  1512  00101A  0E80               	movlw	128
  1513  00101C  ECEF  F007         	call	_SendLCD
  1514  001020                     l2313:
  1515                           
  1516                           ;LCDIO.c: 113:     if(line == 2){
  1517  001020  0E02               	movlw	2
  1518  001022  1812               	xorwf	SetLine@line,w,c
  1519  001024  A4D8               	btfss	status,2,c
  1520  001026  D005               	goto	l2317
  1521                           
  1522                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1523  001028  0E00               	movlw	0
  1524  00102A  6E10               	movwf	SendLCD@type,c
  1525  00102C  0EC0               	movlw	192
  1526  00102E  ECEF  F007         	call	_SendLCD
  1527  001032                     l2317:
  1528                           
  1529                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1530  001032  0E21               	movlw	33
  1531  001034                     u2147:
  1532  001034  2EE8               	decfsz	wreg,f,c
  1533  001036  D7FE               	bra	u2147
  1534  001038  F000               	nop	
  1535  00103A  0012               	return		;funcret
  1536  00103C                     __end_of_SetLine:
  1537                           	opt callstack 0
  1538                           
  1539 ;; *************** function _setup *****************
  1540 ;; Defined at:
  1541 ;;		line 46 in file "main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1555 ;;      Params:         0       0       0       0
  1556 ;;      Locals:         0       0       0       0
  1557 ;;      Temps:          0       0       0       0
  1558 ;;      Totals:         0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    7
  1562 ;; This function calls:
  1563 ;;		_initPWM
  1564 ;;		_init_LCD
  1565 ;;		_init_RFID
  1566 ;;		_init_sensor
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text6
  1573  000F72                     __ptext6:
  1574                           	opt callstack 0
  1575  000F72                     _setup:
  1576                           	opt callstack 23
  1577                           
  1578                           ;main.c: 49:     OSCCON = 0x72;
  1579                           
  1580                           ;incstack = 0
  1581  000F72  0E72               	movlw	114
  1582  000F74  6ED3               	movwf	4051,c	;volatile
  1583  000F76                     l55:
  1584  000F76  A4D3               	btfss	4051,2,c	;volatile
  1585  000F78  D7FE               	goto	l55
  1586                           
  1587                           ;main.c: 51:     INTCONbits.GIEH = 1;
  1588  000F7A  8EF2               	bsf	4082,7,c	;volatile
  1589                           
  1590                           ;main.c: 52:     INTCONbits.GIEL = 1;
  1591  000F7C  8CF2               	bsf	4082,6,c	;volatile
  1592                           
  1593                           ;main.c: 53:     RCONbits.IPEN=1;
  1594  000F7E  8ED0               	bsf	4048,7,c	;volatile
  1595                           
  1596                           ;main.c: 56:     init_LCD();
  1597  000F80  ECCC  F003         	call	_init_LCD	;wreg free
  1598                           
  1599                           ;main.c: 57:     init_RFID();
  1600  000F84  EC5C  F008         	call	_init_RFID	;wreg free
  1601                           
  1602                           ;main.c: 58:     init_sensor();
  1603  000F88  EC83  F008         	call	_init_sensor	;wreg free
  1604                           
  1605                           ;main.c: 59:     initPWM(199);
  1606  000F8C  0E00               	movlw	0
  1607  000F8E  6E0F               	movwf	initPWM@PWMperiod+1,c
  1608  000F90  0EC7               	movlw	199
  1609  000F92  6E0E               	movwf	initPWM@PWMperiod,c
  1610  000F94  EC69  F008         	call	_initPWM	;wreg free
  1611                           
  1612                           ;main.c: 62:     TRISBbits.RB0 = 0;
  1613  000F98  9093               	bcf	3987,0,c	;volatile
  1614                           
  1615                           ;main.c: 63:     TRISBbits.RB2 = 0;
  1616  000F9A  9493               	bcf	3987,2,c	;volatile
  1617                           
  1618                           ;main.c: 65:     TRISDbits.RD2 = 1;
  1619  000F9C  8495               	bsf	3989,2,c	;volatile
  1620                           
  1621                           ;main.c: 68:     T0CON = 0b11000111;
  1622  000F9E  0EC7               	movlw	199
  1623  000FA0  6ED5               	movwf	4053,c	;volatile
  1624                           
  1625                           ;main.c: 71:     INTCONbits.TMR0IE=1;
  1626  000FA2  8AF2               	bsf	4082,5,c	;volatile
  1627                           
  1628                           ;main.c: 72:     INTCON2bits.TMR0IP=0;
  1629  000FA4  94F1               	bcf	4081,2,c	;volatile
  1630  000FA6  0012               	return		;funcret
  1631  000FA8                     __end_of_setup:
  1632                           	opt callstack 0
  1633                           
  1634 ;; *************** function _init_sensor *****************
  1635 ;; Defined at:
  1636 ;;		line 17 in file "signal_processing.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;		None
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, status,2
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1650 ;;      Params:         0       0       0       0
  1651 ;;      Locals:         0       0       0       0
  1652 ;;      Temps:          0       0       0       0
  1653 ;;      Totals:         0       0       0       0
  1654 ;;Total ram usage:        0 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    3
  1657 ;; This function calls:
  1658 ;;		Nothing
  1659 ;; This function is called by:
  1660 ;;		_setup
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text7
  1665  001106                     __ptext7:
  1666                           	opt callstack 0
  1667  001106                     _init_sensor:
  1668                           	opt callstack 26
  1669                           
  1670                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1671                           
  1672                           ;incstack = 0
  1673  001106  0E01               	movlw	1
  1674  001108  6EB7               	movwf	4023,c	;volatile
  1675                           
  1676                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1677  00110A  8492               	bsf	3986,2,c	;volatile
  1678                           
  1679                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1680  00110C  0E00               	movlw	0
  1681  00110E  6EB8               	movwf	4024,c	;volatile
  1682                           
  1683                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1684  001110  0E00               	movlw	0
  1685  001112  6EB9               	movwf	4025,c	;volatile
  1686                           
  1687                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1688  001114  0E47               	movlw	71
  1689  001116  6E63               	movwf	3939,c	;volatile
  1690  001118  0012               	return		;funcret
  1691  00111A                     __end_of_init_sensor:
  1692                           	opt callstack 0
  1693                           
  1694 ;; *************** function _init_RFID *****************
  1695 ;; Defined at:
  1696 ;;		line 13 in file "RFID.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, status,2
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1710 ;;      Params:         0       0       0       0
  1711 ;;      Locals:         0       0       0       0
  1712 ;;      Temps:          0       0       0       0
  1713 ;;      Totals:         0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    3
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_setup
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text8
  1725  0010B8                     __ptext8:
  1726                           	opt callstack 0
  1727  0010B8                     _init_RFID:
  1728                           	opt callstack 26
  1729                           
  1730                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1731                           
  1732                           ;incstack = 0
  1733  0010B8  8E94               	bsf	3988,7,c	;volatile
  1734                           
  1735                           ;RFID.c: 19:     SPBRG = 203;
  1736  0010BA  0ECB               	movlw	203
  1737  0010BC  6EAF               	movwf	4015,c	;volatile
  1738                           
  1739                           ;RFID.c: 20:     SPBRGH = 0;
  1740  0010BE  0E00               	movlw	0
  1741  0010C0  6EB0               	movwf	4016,c	;volatile
  1742                           
  1743                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1744  0010C2  86AA               	bsf	4010,3,c	;volatile
  1745                           
  1746                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1747  0010C4  84AC               	bsf	4012,2,c	;volatile
  1748                           
  1749                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1750  0010C6  88AB               	bsf	4011,4,c	;volatile
  1751                           
  1752                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1753  0010C8  8EAB               	bsf	4011,7,c	;volatile
  1754                           
  1755                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1756  0010CA  8AAC               	bsf	4012,5,c	;volatile
  1757                           
  1758                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1759  0010CC  8A9D               	bsf	3997,5,c	;volatile
  1760                           
  1761                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1762  0010CE  8A9F               	bsf	3999,5,c	;volatile
  1763  0010D0  0012               	return		;funcret
  1764  0010D2                     __end_of_init_RFID:
  1765                           	opt callstack 0
  1766                           
  1767 ;; *************** function _init_LCD *****************
  1768 ;; Defined at:
  1769 ;;		line 56 in file "LCDIO.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1783 ;;      Params:         0       0       0       0
  1784 ;;      Locals:         0       0       0       0
  1785 ;;      Temps:          1       0       0       0
  1786 ;;      Totals:         1       0       0       0
  1787 ;;Total ram usage:        1 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    6
  1790 ;; This function calls:
  1791 ;;		_LCDout
  1792 ;;		_SendLCD
  1793 ;; This function is called by:
  1794 ;;		_setup
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text9
  1799  000798                     __ptext9:
  1800                           	opt callstack 0
  1801  000798                     _init_LCD:
  1802                           	opt callstack 23
  1803                           
  1804                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1805                           
  1806                           ;incstack = 0
  1807  000798  9094               	bcf	3988,0,c	;volatile
  1808                           
  1809                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1810  00079A  9E92               	bcf	3986,7,c	;volatile
  1811                           
  1812                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1813  00079C  9694               	bcf	3988,3,c	;volatile
  1814                           
  1815                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1816  00079E  9095               	bcf	3989,0,c	;volatile
  1817                           
  1818                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1819  0007A0  9295               	bcf	3989,1,c	;volatile
  1820                           
  1821                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1822  0007A2  9C92               	bcf	3986,6,c	;volatile
  1823                           
  1824                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1825  0007A4  908C               	bcf	3980,0,c	;volatile
  1826                           
  1827                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1828  0007A6  928C               	bcf	3980,1,c	;volatile
  1829                           
  1830                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1831  0007A8  968B               	bcf	3979,3,c	;volatile
  1832                           
  1833                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1834  0007AA  908B               	bcf	3979,0,c	;volatile
  1835                           
  1836                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1837  0007AC  9C89               	bcf	3977,6,c	;volatile
  1838                           
  1839                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1840  0007AE  9E89               	bcf	3977,7,c	;volatile
  1841                           
  1842                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1843  0007B0  0E27               	movlw	39
  1844  0007B2  6E12               	movwf	??_init_LCD& (0+255),c
  1845  0007B4  0EF5               	movlw	245
  1846  0007B6                     u2157:
  1847  0007B6  2EE8               	decfsz	wreg,f,c
  1848  0007B8  D7FE               	bra	u2157
  1849  0007BA  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1850  0007BC  D7FC               	bra	u2157
  1851  0007BE  F000               	nop	
  1852                           
  1853                           ;LCDIO.c: 76:  LCDout(0b0011);
  1854  0007C0  0E03               	movlw	3
  1855  0007C2  EC0D  F006         	call	_LCDout
  1856                           
  1857                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1858  0007C6  0E0D               	movlw	13
  1859  0007C8  6E12               	movwf	??_init_LCD& (0+255),c
  1860  0007CA  0EFC               	movlw	252
  1861  0007CC                     u2167:
  1862  0007CC  2EE8               	decfsz	wreg,f,c
  1863  0007CE  D7FE               	bra	u2167
  1864  0007D0  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1865  0007D2  D7FC               	bra	u2167
  1866                           
  1867                           ;LCDIO.c: 78:  LCDout(0b0011);
  1868  0007D4  0E03               	movlw	3
  1869  0007D6  EC0D  F006         	call	_LCDout
  1870                           
  1871                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1872  0007DA  0E85               	movlw	133
  1873  0007DC                     u2177:
  1874  0007DC  2EE8               	decfsz	wreg,f,c
  1875  0007DE  D7FE               	bra	u2177
  1876  0007E0  F000               	nop	
  1877                           
  1878                           ;LCDIO.c: 80:  LCDout(0b0011);
  1879  0007E2  0E03               	movlw	3
  1880  0007E4  EC0D  F006         	call	_LCDout
  1881                           
  1882                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1883  0007E8  0E21               	movlw	33
  1884  0007EA                     u2187:
  1885  0007EA  2EE8               	decfsz	wreg,f,c
  1886  0007EC  D7FE               	bra	u2187
  1887  0007EE  F000               	nop	
  1888                           
  1889                           ;LCDIO.c: 82:  LCDout(0b0010);
  1890  0007F0  0E02               	movlw	2
  1891  0007F2  EC0D  F006         	call	_LCDout
  1892                           
  1893                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1894  0007F6  0E21               	movlw	33
  1895  0007F8                     u2197:
  1896  0007F8  2EE8               	decfsz	wreg,f,c
  1897  0007FA  D7FE               	bra	u2197
  1898  0007FC  F000               	nop	
  1899                           
  1900                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1901  0007FE  0E00               	movlw	0
  1902  000800  6E10               	movwf	SendLCD@type,c
  1903  000802  0E28               	movlw	40
  1904  000804  ECEF  F007         	call	_SendLCD
  1905                           
  1906                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1907  000808  0E21               	movlw	33
  1908  00080A                     u2207:
  1909  00080A  2EE8               	decfsz	wreg,f,c
  1910  00080C  D7FE               	bra	u2207
  1911  00080E  F000               	nop	
  1912                           
  1913                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1914  000810  0E00               	movlw	0
  1915  000812  6E10               	movwf	SendLCD@type,c
  1916  000814  0E08               	movlw	8
  1917  000816  ECEF  F007         	call	_SendLCD
  1918                           
  1919                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1920  00081A  0E21               	movlw	33
  1921  00081C                     u2217:
  1922  00081C  2EE8               	decfsz	wreg,f,c
  1923  00081E  D7FE               	bra	u2217
  1924  000820  F000               	nop	
  1925                           
  1926                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1927  000822  0E00               	movlw	0
  1928  000824  6E10               	movwf	SendLCD@type,c
  1929  000826  0E01               	movlw	1
  1930  000828  ECEF  F007         	call	_SendLCD
  1931                           
  1932                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1933  00082C  0E0D               	movlw	13
  1934  00082E  6E12               	movwf	??_init_LCD& (0+255),c
  1935  000830  0EFC               	movlw	252
  1936  000832                     u2227:
  1937  000832  2EE8               	decfsz	wreg,f,c
  1938  000834  D7FE               	bra	u2227
  1939  000836  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1940  000838  D7FC               	bra	u2227
  1941                           
  1942                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1943  00083A  0E00               	movlw	0
  1944  00083C  6E10               	movwf	SendLCD@type,c
  1945  00083E  0E06               	movlw	6
  1946  000840  ECEF  F007         	call	_SendLCD
  1947                           
  1948                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1949  000844  0E21               	movlw	33
  1950  000846                     u2237:
  1951  000846  2EE8               	decfsz	wreg,f,c
  1952  000848  D7FE               	bra	u2237
  1953  00084A  F000               	nop	
  1954                           
  1955                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1956  00084C  0E00               	movlw	0
  1957  00084E  6E10               	movwf	SendLCD@type,c
  1958  000850  0E0C               	movlw	12
  1959  000852  ECEF  F007         	call	_SendLCD
  1960                           
  1961                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1962  000856  0E21               	movlw	33
  1963  000858                     u2247:
  1964  000858  2EE8               	decfsz	wreg,f,c
  1965  00085A  D7FE               	bra	u2247
  1966  00085C  F000               	nop	
  1967  00085E  0012               	return		;funcret
  1968  000860                     __end_of_init_LCD:
  1969                           	opt callstack 0
  1970                           
  1971 ;; *************** function _initPWM *****************
  1972 ;; Defined at:
  1973 ;;		line 5 in file "dc_motor.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  PWMperiod       2   13[COMRAM] int 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1987 ;;      Params:         2       0       0       0
  1988 ;;      Locals:         0       0       0       0
  1989 ;;      Temps:          0       0       0       0
  1990 ;;      Totals:         2       0       0       0
  1991 ;;Total ram usage:        2 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    3
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_setup
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text10
  2002  0010D2                     __ptext10:
  2003                           	opt callstack 0
  2004  0010D2                     _initPWM:
  2005                           	opt callstack 26
  2006                           
  2007                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2008                           
  2009                           ;incstack = 0
  2010  0010D2  0E00               	movlw	0
  2011  0010D4  6E7F               	movwf	3967,c	;volatile
  2012                           
  2013                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2014  0010D6  0E80               	movlw	128
  2015  0010D8  6E7E               	movwf	3966,c	;volatile
  2016                           
  2017                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2018  0010DA  0E6F               	movlw	111
  2019  0010DC  6E6F               	movwf	3951,c	;volatile
  2020                           
  2021                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2022  0010DE  0E00               	movlw	0
  2023  0010E0  6E6E               	movwf	3950,c	;volatile
  2024                           
  2025                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2026  0010E2  C00E  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2027                           
  2028                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2029  0010E6  C00F  FF7A         	movff	initPWM@PWMperiod+1,3962	;volatile
  2030  0010EA  0012               	return		;funcret
  2031  0010EC                     __end_of_initPWM:
  2032                           	opt callstack 0
  2033                           
  2034 ;; *************** function _scanForBeacon *****************
  2035 ;; Defined at:
  2036 ;;		line 23 in file "subroutines.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2039 ;;		 -> main@motorL(9), 
  2040 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2041 ;;		 -> main@motorR(9), 
  2042 ;;  speed           2   44[COMRAM] int 
  2043 ;;  move            1   46[COMRAM] PTR struct Movements
  2044 ;;		 -> travel_moves(61), 
  2045 ;;  exit_flag       1   47[COMRAM] PTR volatile unsigned ch
  2046 ;;		 -> RFID_flag(1), 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  raw_data        2   50[COMRAM] unsigned int 
  2049 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      unsigned char 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2059 ;;      Params:         6       0       0       0
  2060 ;;      Locals:         3       0       0       0
  2061 ;;      Temps:          2       0       0       0
  2062 ;;      Totals:        11       0       0       0
  2063 ;;Total ram usage:       11 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    7
  2066 ;; This function calls:
  2067 ;;		_ClearLCD
  2068 ;;		_LCD_String
  2069 ;;		_classify_data
  2070 ;;		_turnLeft
  2071 ;; This function is called by:
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text11
  2077  000A90                     __ptext11:
  2078                           	opt callstack 0
  2079  000A90                     _scanForBeacon:
  2080                           	opt callstack 23
  2081                           
  2082                           ;subroutines.c: 23: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 24:                         struct Movements *move, volatile
      +                           char *exit_flag);subroutines.c: 25: {;subroutines.c: 26:     move-> move_type[move->mov
      +                          e_number] = 1;
  2083                           
  2084                           ;incstack = 0
  2085  000A90  502F               	movf	scanForBeacon@move,w,c
  2086  000A92  6ED9               	movwf	fsr2l,c
  2087  000A94  6ADA               	clrf	fsr2h,c
  2088  000A96  0E3C               	movlw	60
  2089  000A98  26D9               	addwf	fsr2l,f,c
  2090  000A9A  50DF               	movf	indf2,w,c
  2091  000A9C  6E31               	movwf	??_scanForBeacon& (0+255),c
  2092  000A9E  502F               	movf	scanForBeacon@move,w,c
  2093  000AA0  2431               	addwf	??_scanForBeacon,w,c
  2094  000AA2  6ED9               	movwf	fsr2l,c
  2095  000AA4  6ADA               	clrf	fsr2h,c
  2096  000AA6  0E01               	movlw	1
  2097  000AA8  6EDF               	movwf	indf2,c
  2098                           
  2099                           ;subroutines.c: 27:     turnLeft(mL,mR,speed);
  2100  000AAA  C02B  F024         	movff	scanForBeacon@mL,turnLeft@mL
  2101  000AAE  C02C  F025         	movff	scanForBeacon@mR,turnLeft@mR
  2102  000AB2  C02D  F026         	movff	scanForBeacon@speed,turnLeft@max_power
  2103  000AB6  C02E  F027         	movff	scanForBeacon@speed+1,turnLeft@max_power+1
  2104  000ABA  ECBD  F006         	call	_turnLeft	;wreg free
  2105                           
  2106                           ;subroutines.c: 28:     ClearLCD();
  2107  000ABE  EC76  F008         	call	_ClearLCD	;wreg free
  2108                           
  2109                           ;subroutines.c: 29:     LCD_String("SEARCHING");
  2110  000AC2  0E8B               	movlw	low STR_4
  2111  000AC4  6E12               	movwf	LCD_String@string,c
  2112  000AC6  EC1E  F008         	call	_LCD_String	;wreg free
  2113  000ACA                     l2607:
  2114                           
  2115                           ;subroutines.c: 33:     {;subroutines.c: 35:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2116  000ACA  5068               	movf	3944,w,c	;volatile
  2117  000ACC  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2118  000AD0  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2119  000AD2  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2120  000AD6  6A31               	clrf	??_scanForBeacon,c
  2121  000AD8  1031               	iorwf	??_scanForBeacon,w,c
  2122  000ADA  6E33               	movwf	scanForBeacon@raw_data,c
  2123  000ADC  5032               	movf	??_scanForBeacon+1,w,c
  2124  000ADE  6E34               	movwf	scanForBeacon@raw_data+1,c
  2125                           
  2126                           ;subroutines.c: 38:         char beacon_location = classify_data(raw_data);
  2127  000AE0  C033  F00E         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2128  000AE4  C034  F00F         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2129  000AE8  EC57  F007         	call	_classify_data	;wreg free
  2130  000AEC  6E35               	movwf	scanForBeacon@beacon_location,c
  2131                           
  2132                           ;subroutines.c: 41:         if(*exit_flag == 1)
  2133  000AEE  5030               	movf	scanForBeacon@exit_flag,w,c
  2134  000AF0  6ED9               	movwf	fsr2l,c
  2135  000AF2  6ADA               	clrf	fsr2h,c
  2136  000AF4  04DE               	decf	postinc2,w,c
  2137  000AF6  A4D8               	btfss	status,2,c
  2138  000AF8  D002               	goto	l2619
  2139                           
  2140                           ;subroutines.c: 42:         {;subroutines.c: 43:             return 2;
  2141  000AFA  0E02               	movlw	2
  2142  000AFC  0012               	return	
  2143  000AFE                     l2619:
  2144  000AFE  0435               	decf	scanForBeacon@beacon_location,w,c
  2145  000B00  A4D8               	btfss	status,2,c
  2146  000B02  D7E3               	goto	l2607
  2147                           
  2148                           ;subroutines.c: 47:         {;subroutines.c: 48:             move-> move_number += 1;
  2149  000B04  502F               	movf	scanForBeacon@move,w,c
  2150  000B06  6ED9               	movwf	fsr2l,c
  2151  000B08  6ADA               	clrf	fsr2h,c
  2152  000B0A  0E3C               	movlw	60
  2153  000B0C  26D9               	addwf	fsr2l,f,c
  2154  000B0E  2ADF               	incf	indf2,f,c
  2155                           
  2156                           ;subroutines.c: 49:             return 1;
  2157  000B10  0E01               	movlw	1
  2158  000B12  0012               	return		;funcret
  2159  000B14                     __end_of_scanForBeacon:
  2160                           	opt callstack 0
  2161                           
  2162 ;; *************** function _turnLeft *****************
  2163 ;; Defined at:
  2164 ;;		line 53 in file "dc_motor.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2167 ;;		 -> main@motorL(9), 
  2168 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2169 ;;		 -> main@motorR(9), 
  2170 ;;  max_power       2   37[COMRAM] int 
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  i               2   40[COMRAM] int 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2182 ;;      Params:         4       0       0       0
  2183 ;;      Locals:         2       0       0       0
  2184 ;;      Temps:          1       0       0       0
  2185 ;;      Totals:         7       0       0       0
  2186 ;;Total ram usage:        7 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    5
  2189 ;; This function calls:
  2190 ;;		_setMotorPWM
  2191 ;; This function is called by:
  2192 ;;		_scanForBeacon
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text12
  2197  000D7A                     __ptext12:
  2198                           	opt callstack 0
  2199  000D7A                     _turnLeft:
  2200                           	opt callstack 24
  2201                           
  2202                           ;dc_motor.c: 53: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, int max_power);
      +                          dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2203                           
  2204                           ;incstack = 0
  2205  000D7A  5024               	movf	turnLeft@mL,w,c
  2206  000D7C  6ED9               	movwf	fsr2l,c
  2207  000D7E  6ADA               	clrf	fsr2h,c
  2208  000D80  0E01               	movlw	1
  2209  000D82  26D9               	addwf	fsr2l,f,c
  2210  000D84  0E00               	movlw	0
  2211  000D86  6EDF               	movwf	indf2,c
  2212                           
  2213                           ;dc_motor.c: 57:     mR->direction = 1;
  2214  000D88  5025               	movf	turnLeft@mR,w,c
  2215  000D8A  6ED9               	movwf	fsr2l,c
  2216  000D8C  6ADA               	clrf	fsr2h,c
  2217  000D8E  0E01               	movlw	1
  2218  000D90  26D9               	addwf	fsr2l,f,c
  2219  000D92  0E01               	movlw	1
  2220  000D94  6EDF               	movwf	indf2,c
  2221                           
  2222                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2223  000D96  0E00               	movlw	0
  2224  000D98  6E2A               	movwf	turnLeft@i+1,c
  2225  000D9A  0E00               	movlw	0
  2226  000D9C  6E29               	movwf	turnLeft@i,c
  2227  000D9E  D01B               	goto	l2411
  2228  000DA0                     l2401:
  2229                           
  2230                           ;dc_motor.c: 60:         mL->power = i;
  2231  000DA0  5024               	movf	turnLeft@mL,w,c
  2232  000DA2  6ED9               	movwf	fsr2l,c
  2233  000DA4  6ADA               	clrf	fsr2h,c
  2234  000DA6  C029  FFDF         	movff	turnLeft@i,indf2
  2235                           
  2236                           ;dc_motor.c: 61:         mR->power = i;
  2237  000DAA  5025               	movf	turnLeft@mR,w,c
  2238  000DAC  6ED9               	movwf	fsr2l,c
  2239  000DAE  6ADA               	clrf	fsr2h,c
  2240  000DB0  C029  FFDF         	movff	turnLeft@i,indf2
  2241                           
  2242                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2243  000DB4  C024  F01C         	movff	turnLeft@mL,setMotorPWM@m
  2244  000DB8  EC5F  F002         	call	_setMotorPWM	;wreg free
  2245                           
  2246                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2247  000DBC  C025  F01C         	movff	turnLeft@mR,setMotorPWM@m
  2248  000DC0  EC5F  F002         	call	_setMotorPWM	;wreg free
  2249                           
  2250                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2251  000DC4  0E03               	movlw	3
  2252  000DC6  6E28               	movwf	??_turnLeft& (0+255),c
  2253  000DC8  0E98               	movlw	152
  2254  000DCA                     u2257:
  2255  000DCA  2EE8               	decfsz	wreg,f,c
  2256  000DCC  D7FE               	bra	u2257
  2257  000DCE  2E28               	decfsz	??_turnLeft& (0+255),f,c
  2258  000DD0  D7FC               	bra	u2257
  2259                           
  2260                           ;dc_motor.c: 66:     }
  2261  000DD2  4A29               	infsnz	turnLeft@i,f,c
  2262  000DD4  2A2A               	incf	turnLeft@i+1,f,c
  2263  000DD6                     l2411:
  2264  000DD6  5026               	movf	turnLeft@max_power,w,c
  2265  000DD8  5C29               	subwf	turnLeft@i,w,c
  2266  000DDA  502A               	movf	turnLeft@i+1,w,c
  2267  000DDC  0A80               	xorlw	128
  2268  000DDE  6E28               	movwf	??_turnLeft& (0+255),c
  2269  000DE0  5027               	movf	turnLeft@max_power+1,w,c
  2270  000DE2  0A80               	xorlw	128
  2271  000DE4  5828               	subwfb	??_turnLeft& (0+255),w,c
  2272  000DE6  B0D8               	btfsc	status,0,c
  2273  000DE8  0012               	return	
  2274  000DEA  D7DA               	goto	l2401
  2275  000DEC                     __end_of_turnLeft:
  2276                           	opt callstack 0
  2277                           
  2278 ;; *************** function _returnHome *****************
  2279 ;; Defined at:
  2280 ;;		line 114 in file "subroutines.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2283 ;;		 -> main@motorL(9), 
  2284 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2285 ;;		 -> main@motorR(9), 
  2286 ;;  move_speed      2   44[COMRAM] int 
  2287 ;;  search_speed    2   46[COMRAM] int 
  2288 ;;  move            1   48[COMRAM] PTR struct Movements
  2289 ;;		 -> travel_moves(61), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  i               2    0        int 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      unsigned char 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2301 ;;      Params:         7       0       0       0
  2302 ;;      Locals:         2       0       0       0
  2303 ;;      Temps:          2       0       0       0
  2304 ;;      Totals:        11       0       0       0
  2305 ;;Total ram usage:       11 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    7
  2308 ;; This function calls:
  2309 ;;		_ClearLCD
  2310 ;;		_LCD_String
  2311 ;;		_moveBackward
  2312 ;;		_stop
  2313 ;;		_turnRight
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text13
  2320  0005D2                     __ptext13:
  2321                           	opt callstack 0
  2322  0005D2                     _returnHome:
  2323                           	opt callstack 23
  2324                           
  2325                           ;subroutines.c: 114: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, 
      +                          int move_speed,;subroutines.c: 115:                             int search_speed, struct
      +                           Movements *move);subroutines.c: 116: {;subroutines.c: 118:     stop(mL,mR,move_speed);
  2326                           
  2327                           ;incstack = 0
  2328  0005D2  C02B  F024         	movff	returnHome@mL,stop@mL
  2329  0005D6  C02C  F025         	movff	returnHome@mR,stop@mR
  2330  0005DA  C02D  F026         	movff	returnHome@move_speed,stop@initial_speed
  2331  0005DE  C02E  F027         	movff	returnHome@move_speed+1,stop@initial_speed+1
  2332  0005E2  EC2F  F007         	call	_stop	;wreg free
  2333                           
  2334                           ;subroutines.c: 119:     ClearLCD();
  2335  0005E6  EC76  F008         	call	_ClearLCD	;wreg free
  2336                           
  2337                           ;subroutines.c: 120:     LCD_String("RETURNING HOME");
  2338  0005EA  0E60               	movlw	low STR_6
  2339  0005EC  6E12               	movwf	LCD_String@string,c
  2340  0005EE  EC1E  F008         	call	_LCD_String	;wreg free
  2341  0005F2  D063               	goto	l326
  2342  0005F4                     l2677:
  2343                           
  2344                           ;subroutines.c: 124:     {;subroutines.c: 126:         if(move->move_type[move->move_num
      +                          ber] == 0)
  2345  0005F4  5031               	movf	returnHome@move,w,c
  2346  0005F6  6ED9               	movwf	fsr2l,c
  2347  0005F8  6ADA               	clrf	fsr2h,c
  2348  0005FA  0E3C               	movlw	60
  2349  0005FC  26D9               	addwf	fsr2l,f,c
  2350  0005FE  50DF               	movf	indf2,w,c
  2351  000600  6E32               	movwf	??_returnHome& (0+255),c
  2352  000602  5031               	movf	returnHome@move,w,c
  2353  000604  2432               	addwf	??_returnHome,w,c
  2354  000606  6ED9               	movwf	fsr2l,c
  2355  000608  6ADA               	clrf	fsr2h,c
  2356  00060A  50DF               	movf	indf2,w,c
  2357  00060C  A4D8               	btfss	status,2,c
  2358  00060E  D021               	goto	l2683
  2359                           
  2360                           ;subroutines.c: 127:         {;subroutines.c: 129:             moveBackward(mL,mR,move_s
      +                          peed);
  2361  000610  C02B  F024         	movff	returnHome@mL,moveBackward@mL
  2362  000614  C02C  F025         	movff	returnHome@mR,moveBackward@mR
  2363  000618  C02D  F026         	movff	returnHome@move_speed,moveBackward@max_power
  2364  00061C  C02E  F027         	movff	returnHome@move_speed+1,moveBackward@max_power+1
  2365  000620  EC49  F006         	call	_moveBackward	;wreg free
  2366  000624                     l2681:
  2367  000624  5031               	movf	returnHome@move,w,c
  2368  000626  6ED9               	movwf	fsr2l,c
  2369  000628  6ADA               	clrf	fsr2h,c
  2370  00062A  0E3C               	movlw	60
  2371  00062C  26D9               	addwf	fsr2l,f,c
  2372  00062E  50DF               	movf	indf2,w,c
  2373  000630  0D02               	mullw	2
  2374  000632  5031               	movf	returnHome@move,w,c
  2375  000634  24F3               	addwf	prodl,w,c
  2376  000636  6ED9               	movwf	fsr2l,c
  2377  000638  6ADA               	clrf	fsr2h,c
  2378  00063A  0E14               	movlw	20
  2379  00063C  26D9               	addwf	fsr2l,f,c
  2380  00063E  0E01               	movlw	1
  2381  000640  BEDB               	btfsc	plusw2,7,c
  2382  000642  D035               	goto	u2030
  2383  000644  0E01               	movlw	1
  2384  000646  50DB               	movf	plusw2,w,c
  2385  000648  E1ED               	bnz	l2681
  2386  00064A  04DE               	decf	postinc2,w,c
  2387  00064C  A0D8               	btfss	status,0,c
  2388  00064E  D02F               	goto	u2030
  2389  000650  D7E9               	goto	l2681
  2390  000652                     l2683:
  2391  000652  5031               	movf	returnHome@move,w,c
  2392  000654  6ED9               	movwf	fsr2l,c
  2393  000656  6ADA               	clrf	fsr2h,c
  2394  000658  0E3C               	movlw	60
  2395  00065A  26D9               	addwf	fsr2l,f,c
  2396  00065C  50DF               	movf	indf2,w,c
  2397  00065E  6E32               	movwf	??_returnHome& (0+255),c
  2398  000660  5031               	movf	returnHome@move,w,c
  2399  000662  2432               	addwf	??_returnHome,w,c
  2400  000664  6ED9               	movwf	fsr2l,c
  2401  000666  6ADA               	clrf	fsr2h,c
  2402  000668  04DE               	decf	postinc2,w,c
  2403  00066A  A4D8               	btfss	status,2,c
  2404  00066C  D020               	goto	u2030
  2405                           
  2406                           ;subroutines.c: 134:         {;subroutines.c: 136:             turnRight(mL,mR,search_sp
      +                          eed);
  2407  00066E  C02B  F024         	movff	returnHome@mL,turnRight@mL
  2408  000672  C02C  F025         	movff	returnHome@mR,turnRight@mR
  2409  000676  C02F  F026         	movff	returnHome@search_speed,turnRight@max_power
  2410  00067A  C030  F027         	movff	returnHome@search_speed+1,turnRight@max_power+1
  2411  00067E  ECF6  F006         	call	_turnRight	;wreg free
  2412  000682                     l2687:
  2413  000682  5031               	movf	returnHome@move,w,c
  2414  000684  6ED9               	movwf	fsr2l,c
  2415  000686  6ADA               	clrf	fsr2h,c
  2416  000688  0E3C               	movlw	60
  2417  00068A  26D9               	addwf	fsr2l,f,c
  2418  00068C  50DF               	movf	indf2,w,c
  2419  00068E  0D02               	mullw	2
  2420  000690  5031               	movf	returnHome@move,w,c
  2421  000692  24F3               	addwf	prodl,w,c
  2422  000694  6ED9               	movwf	fsr2l,c
  2423  000696  6ADA               	clrf	fsr2h,c
  2424  000698  0E14               	movlw	20
  2425  00069A  26D9               	addwf	fsr2l,f,c
  2426  00069C  0E01               	movlw	1
  2427  00069E  BEDB               	btfsc	plusw2,7,c
  2428  0006A0  D006               	goto	u2030
  2429  0006A2  0E01               	movlw	1
  2430  0006A4  50DB               	movf	plusw2,w,c
  2431  0006A6  E1ED               	bnz	l2687
  2432  0006A8  04DE               	decf	postinc2,w,c
  2433  0006AA  B0D8               	btfsc	status,0,c
  2434  0006AC  D7EA               	goto	l2687
  2435  0006AE                     u2030:
  2436                           
  2437                           ;subroutines.c: 139:     }
  2438  0006AE  5031               	movf	returnHome@move,w,c
  2439  0006B0  6ED9               	movwf	fsr2l,c
  2440  0006B2  6ADA               	clrf	fsr2h,c
  2441  0006B4  0E3C               	movlw	60
  2442  0006B6  26D9               	addwf	fsr2l,f,c
  2443  0006B8  06DF               	decf	indf2,f,c
  2444  0006BA                     l326:
  2445  0006BA  5031               	movf	returnHome@move,w,c
  2446  0006BC  6ED9               	movwf	fsr2l,c
  2447  0006BE  6ADA               	clrf	fsr2h,c
  2448  0006C0  0E3C               	movlw	60
  2449  0006C2  26D9               	addwf	fsr2l,f,c
  2450  0006C4  50DF               	movf	indf2,w,c
  2451  0006C6  A4D8               	btfss	status,2,c
  2452  0006C8  D795               	goto	l2677
  2453                           
  2454                           ;subroutines.c: 140:     return 3;
  2455  0006CA  0E03               	movlw	3
  2456  0006CC  0012               	return		;funcret
  2457  0006CE                     __end_of_returnHome:
  2458                           	opt callstack 0
  2459                           
  2460 ;; *************** function _turnRight *****************
  2461 ;; Defined at:
  2462 ;;		line 69 in file "dc_motor.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2465 ;;		 -> main@motorL(9), 
  2466 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2467 ;;		 -> main@motorR(9), 
  2468 ;;  max_power       2   37[COMRAM] int 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  i               2   40[COMRAM] int 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2480 ;;      Params:         4       0       0       0
  2481 ;;      Locals:         2       0       0       0
  2482 ;;      Temps:          1       0       0       0
  2483 ;;      Totals:         7       0       0       0
  2484 ;;Total ram usage:        7 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    5
  2487 ;; This function calls:
  2488 ;;		_setMotorPWM
  2489 ;; This function is called by:
  2490 ;;		_returnHome
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           	psect	text14
  2495  000DEC                     __ptext14:
  2496                           	opt callstack 0
  2497  000DEC                     _turnRight:
  2498                           	opt callstack 24
  2499                           
  2500                           ;dc_motor.c: 69: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 70: {;dc_motor.c: 72:     mL->direction = 1;
  2501                           
  2502                           ;incstack = 0
  2503  000DEC  5024               	movf	turnRight@mL,w,c
  2504  000DEE  6ED9               	movwf	fsr2l,c
  2505  000DF0  6ADA               	clrf	fsr2h,c
  2506  000DF2  0E01               	movlw	1
  2507  000DF4  26D9               	addwf	fsr2l,f,c
  2508  000DF6  0E01               	movlw	1
  2509  000DF8  6EDF               	movwf	indf2,c
  2510                           
  2511                           ;dc_motor.c: 73:     mR->direction = 0;
  2512  000DFA  5025               	movf	turnRight@mR,w,c
  2513  000DFC  6ED9               	movwf	fsr2l,c
  2514  000DFE  6ADA               	clrf	fsr2h,c
  2515  000E00  0E01               	movlw	1
  2516  000E02  26D9               	addwf	fsr2l,f,c
  2517  000E04  0E00               	movlw	0
  2518  000E06  6EDF               	movwf	indf2,c
  2519                           
  2520                           ;dc_motor.c: 75:     for(int i = 0; i<max_power;i++){
  2521  000E08  0E00               	movlw	0
  2522  000E0A  6E2A               	movwf	turnRight@i+1,c
  2523  000E0C  0E00               	movlw	0
  2524  000E0E  6E29               	movwf	turnRight@i,c
  2525  000E10  D01B               	goto	l2427
  2526  000E12                     l2417:
  2527                           
  2528                           ;dc_motor.c: 76:         mL->power = i;
  2529  000E12  5024               	movf	turnRight@mL,w,c
  2530  000E14  6ED9               	movwf	fsr2l,c
  2531  000E16  6ADA               	clrf	fsr2h,c
  2532  000E18  C029  FFDF         	movff	turnRight@i,indf2
  2533                           
  2534                           ;dc_motor.c: 77:         mR->power = i;
  2535  000E1C  5025               	movf	turnRight@mR,w,c
  2536  000E1E  6ED9               	movwf	fsr2l,c
  2537  000E20  6ADA               	clrf	fsr2h,c
  2538  000E22  C029  FFDF         	movff	turnRight@i,indf2
  2539                           
  2540                           ;dc_motor.c: 79:         setMotorPWM(mL);
  2541  000E26  C024  F01C         	movff	turnRight@mL,setMotorPWM@m
  2542  000E2A  EC5F  F002         	call	_setMotorPWM	;wreg free
  2543                           
  2544                           ;dc_motor.c: 80:         setMotorPWM(mR);
  2545  000E2E  C025  F01C         	movff	turnRight@mR,setMotorPWM@m
  2546  000E32  EC5F  F002         	call	_setMotorPWM	;wreg free
  2547                           
  2548                           ;dc_motor.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2549  000E36  0E03               	movlw	3
  2550  000E38  6E28               	movwf	??_turnRight& (0+255),c
  2551  000E3A  0E98               	movlw	152
  2552  000E3C                     u2267:
  2553  000E3C  2EE8               	decfsz	wreg,f,c
  2554  000E3E  D7FE               	bra	u2267
  2555  000E40  2E28               	decfsz	??_turnRight& (0+255),f,c
  2556  000E42  D7FC               	bra	u2267
  2557                           
  2558                           ;dc_motor.c: 82:     }
  2559  000E44  4A29               	infsnz	turnRight@i,f,c
  2560  000E46  2A2A               	incf	turnRight@i+1,f,c
  2561  000E48                     l2427:
  2562  000E48  5026               	movf	turnRight@max_power,w,c
  2563  000E4A  5C29               	subwf	turnRight@i,w,c
  2564  000E4C  502A               	movf	turnRight@i+1,w,c
  2565  000E4E  0A80               	xorlw	128
  2566  000E50  6E28               	movwf	??_turnRight& (0+255),c
  2567  000E52  5027               	movf	turnRight@max_power+1,w,c
  2568  000E54  0A80               	xorlw	128
  2569  000E56  5828               	subwfb	??_turnRight& (0+255),w,c
  2570  000E58  B0D8               	btfsc	status,0,c
  2571  000E5A  0012               	return	
  2572  000E5C  D7DA               	goto	l2417
  2573  000E5E                     __end_of_turnRight:
  2574                           	opt callstack 0
  2575                           
  2576 ;; *************** function _stop *****************
  2577 ;; Defined at:
  2578 ;;		line 40 in file "dc_motor.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2581 ;;		 -> main@motorL(9), 
  2582 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2583 ;;		 -> main@motorR(9), 
  2584 ;;  initial_spee    2   37[COMRAM] int 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  i               2   40[COMRAM] int 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2596 ;;      Params:         4       0       0       0
  2597 ;;      Locals:         2       0       0       0
  2598 ;;      Temps:          1       0       0       0
  2599 ;;      Totals:         7       0       0       0
  2600 ;;Total ram usage:        7 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    5
  2603 ;; This function calls:
  2604 ;;		_setMotorPWM
  2605 ;; This function is called by:
  2606 ;;		_returnHome
  2607 ;;		_stopAndDisplay
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text15
  2612  000E5E                     __ptext15:
  2613                           	opt callstack 0
  2614  000E5E                     _stop:
  2615                           	opt callstack 24
  2616                           
  2617                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2618                           
  2619                           ;incstack = 0
  2620  000E5E  C026  F029         	movff	stop@initial_speed,stop@i
  2621  000E62  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  2622  000E66                     l2381:
  2623  000E66  BE2A               	btfsc	stop@i+1,7,c
  2624  000E68  0012               	return	
  2625  000E6A  502A               	movf	stop@i+1,w,c
  2626  000E6C  E103               	bnz	l2385
  2627  000E6E  0429               	decf	stop@i,w,c
  2628  000E70  A0D8               	btfss	status,0,c
  2629  000E72  0012               	return	
  2630  000E74                     l2385:
  2631                           
  2632                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2633  000E74  5024               	movf	stop@mL,w,c
  2634  000E76  6ED9               	movwf	fsr2l,c
  2635  000E78  6ADA               	clrf	fsr2h,c
  2636  000E7A  C029  FFDF         	movff	stop@i,indf2
  2637                           
  2638                           ;dc_motor.c: 45:         mR->power = i;
  2639  000E7E  5025               	movf	stop@mR,w,c
  2640  000E80  6ED9               	movwf	fsr2l,c
  2641  000E82  6ADA               	clrf	fsr2h,c
  2642  000E84  C029  FFDF         	movff	stop@i,indf2
  2643                           
  2644                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2645  000E88  C024  F01C         	movff	stop@mL,setMotorPWM@m
  2646  000E8C  EC5F  F002         	call	_setMotorPWM	;wreg free
  2647                           
  2648                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2649  000E90  C025  F01C         	movff	stop@mR,setMotorPWM@m
  2650  000E94  EC5F  F002         	call	_setMotorPWM	;wreg free
  2651                           
  2652                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2653  000E98  0E03               	movlw	3
  2654  000E9A  6E28               	movwf	??_stop& (0+255),c
  2655  000E9C  0E98               	movlw	152
  2656  000E9E                     u2277:
  2657  000E9E  2EE8               	decfsz	wreg,f,c
  2658  000EA0  D7FE               	bra	u2277
  2659  000EA2  2E28               	decfsz	??_stop& (0+255),f,c
  2660  000EA4  D7FC               	bra	u2277
  2661                           
  2662                           ;dc_motor.c: 49:     }
  2663  000EA6  0629               	decf	stop@i,f,c
  2664  000EA8  A0D8               	btfss	status,0,c
  2665  000EAA  062A               	decf	stop@i+1,f,c
  2666  000EAC  D7DC               	goto	l2381
  2667  000EAE                     __end_of_stop:
  2668                           	opt callstack 0
  2669                           
  2670 ;; *************** function _moveBackward *****************
  2671 ;; Defined at:
  2672 ;;		line 101 in file "dc_motor.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2675 ;;		 -> main@motorL(9), 
  2676 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2677 ;;		 -> main@motorR(9), 
  2678 ;;  max_power       2   37[COMRAM] int 
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;  i               2   40[COMRAM] int 
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      void 
  2683 ;; Registers used:
  2684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2690 ;;      Params:         4       0       0       0
  2691 ;;      Locals:         2       0       0       0
  2692 ;;      Temps:          1       0       0       0
  2693 ;;      Totals:         7       0       0       0
  2694 ;;Total ram usage:        7 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    5
  2697 ;; This function calls:
  2698 ;;		_setMotorPWM
  2699 ;; This function is called by:
  2700 ;;		_returnHome
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text16
  2705  000C92                     __ptext16:
  2706                           	opt callstack 0
  2707  000C92                     _moveBackward:
  2708                           	opt callstack 24
  2709                           
  2710                           ;dc_motor.c: 101: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_po
      +                          wer);dc_motor.c: 102: {;dc_motor.c: 103:     mL->direction = 0;
  2711                           
  2712                           ;incstack = 0
  2713  000C92  5024               	movf	moveBackward@mL,w,c
  2714  000C94  6ED9               	movwf	fsr2l,c
  2715  000C96  6ADA               	clrf	fsr2h,c
  2716  000C98  0E01               	movlw	1
  2717  000C9A  26D9               	addwf	fsr2l,f,c
  2718  000C9C  0E00               	movlw	0
  2719  000C9E  6EDF               	movwf	indf2,c
  2720                           
  2721                           ;dc_motor.c: 104:     mR->direction = 0;
  2722  000CA0  5025               	movf	moveBackward@mR,w,c
  2723  000CA2  6ED9               	movwf	fsr2l,c
  2724  000CA4  6ADA               	clrf	fsr2h,c
  2725  000CA6  0E01               	movlw	1
  2726  000CA8  26D9               	addwf	fsr2l,f,c
  2727  000CAA  0E00               	movlw	0
  2728  000CAC  6EDF               	movwf	indf2,c
  2729                           
  2730                           ;dc_motor.c: 105:     for(int i = 10; i < max_power; i++)
  2731  000CAE  0E00               	movlw	0
  2732  000CB0  6E2A               	movwf	moveBackward@i+1,c
  2733  000CB2  0E0A               	movlw	10
  2734  000CB4  6E29               	movwf	moveBackward@i,c
  2735  000CB6  D01C               	goto	l2463
  2736  000CB8                     l2451:
  2737                           
  2738                           ;dc_motor.c: 106:     {;dc_motor.c: 107:         mL->power = i;
  2739  000CB8  5024               	movf	moveBackward@mL,w,c
  2740  000CBA  6ED9               	movwf	fsr2l,c
  2741  000CBC  6ADA               	clrf	fsr2h,c
  2742  000CBE  C029  FFDF         	movff	moveBackward@i,indf2
  2743                           
  2744                           ;dc_motor.c: 108:         mR->power = i-4;
  2745  000CC2  5025               	movf	moveBackward@mR,w,c
  2746  000CC4  6ED9               	movwf	fsr2l,c
  2747  000CC6  6ADA               	clrf	fsr2h,c
  2748  000CC8  5029               	movf	moveBackward@i,w,c
  2749  000CCA  0FFC               	addlw	252
  2750  000CCC  6EDF               	movwf	indf2,c
  2751                           
  2752                           ;dc_motor.c: 109:         setMotorPWM(mL);
  2753  000CCE  C024  F01C         	movff	moveBackward@mL,setMotorPWM@m
  2754  000CD2  EC5F  F002         	call	_setMotorPWM	;wreg free
  2755                           
  2756                           ;dc_motor.c: 110:         setMotorPWM(mR);
  2757  000CD6  C025  F01C         	movff	moveBackward@mR,setMotorPWM@m
  2758  000CDA  EC5F  F002         	call	_setMotorPWM	;wreg free
  2759                           
  2760                           ;dc_motor.c: 111:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2761  000CDE  0E03               	movlw	3
  2762  000CE0  6E28               	movwf	??_moveBackward& (0+255),c
  2763  000CE2  0E98               	movlw	152
  2764  000CE4                     u2287:
  2765  000CE4  2EE8               	decfsz	wreg,f,c
  2766  000CE6  D7FE               	bra	u2287
  2767  000CE8  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2768  000CEA  D7FC               	bra	u2287
  2769                           
  2770                           ;dc_motor.c: 112:     }
  2771  000CEC  4A29               	infsnz	moveBackward@i,f,c
  2772  000CEE  2A2A               	incf	moveBackward@i+1,f,c
  2773  000CF0                     l2463:
  2774  000CF0  5026               	movf	moveBackward@max_power,w,c
  2775  000CF2  5C29               	subwf	moveBackward@i,w,c
  2776  000CF4  502A               	movf	moveBackward@i+1,w,c
  2777  000CF6  0A80               	xorlw	128
  2778  000CF8  6E28               	movwf	??_moveBackward& (0+255),c
  2779  000CFA  5027               	movf	moveBackward@max_power+1,w,c
  2780  000CFC  0A80               	xorlw	128
  2781  000CFE  5828               	subwfb	??_moveBackward& (0+255),w,c
  2782  000D00  B0D8               	btfsc	status,0,c
  2783  000D02  0012               	return	
  2784  000D04  D7D9               	goto	l2451
  2785  000D06                     __end_of_moveBackward:
  2786                           	opt callstack 0
  2787                           
  2788 ;; *************** function _moveToBeacon *****************
  2789 ;; Defined at:
  2790 ;;		line 56 in file "subroutines.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2793 ;;		 -> main@motorL(9), 
  2794 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2795 ;;		 -> main@motorR(9), 
  2796 ;;  speed           2   44[COMRAM] int 
  2797 ;;  move            1   46[COMRAM] PTR struct Movements
  2798 ;;		 -> travel_moves(61), 
  2799 ;;  exit_flag       1   47[COMRAM] PTR volatile unsigned ch
  2800 ;;		 -> RFID_flag(1), 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  raw_data        2   50[COMRAM] unsigned int 
  2803 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2804 ;;  error_counte    2   53[COMRAM] int 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      unsigned char 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2814 ;;      Params:         6       0       0       0
  2815 ;;      Locals:         5       0       0       0
  2816 ;;      Temps:          2       0       0       0
  2817 ;;      Totals:        13       0       0       0
  2818 ;;Total ram usage:       13 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    7
  2821 ;; This function calls:
  2822 ;;		_ClearLCD
  2823 ;;		_LCD_String
  2824 ;;		_classify_data
  2825 ;;		_moveForward
  2826 ;; This function is called by:
  2827 ;;		_main
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text17
  2832  000926                     __ptext17:
  2833                           	opt callstack 0
  2834  000926                     _moveToBeacon:
  2835                           	opt callstack 23
  2836                           
  2837                           ;subroutines.c: 56: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 57:                         struct Movements *move, volatile 
      +                          char *exit_flag);subroutines.c: 58: {;subroutines.c: 59:     move->move_type[move->move_
      +                          number] = 0;
  2838                           
  2839                           ;incstack = 0
  2840  000926  502F               	movf	moveToBeacon@move,w,c
  2841  000928  6ED9               	movwf	fsr2l,c
  2842  00092A  6ADA               	clrf	fsr2h,c
  2843  00092C  0E3C               	movlw	60
  2844  00092E  26D9               	addwf	fsr2l,f,c
  2845  000930  50DF               	movf	indf2,w,c
  2846  000932  6E31               	movwf	??_moveToBeacon& (0+255),c
  2847  000934  502F               	movf	moveToBeacon@move,w,c
  2848  000936  2431               	addwf	??_moveToBeacon,w,c
  2849  000938  6ED9               	movwf	fsr2l,c
  2850  00093A  6ADA               	clrf	fsr2h,c
  2851  00093C  0E00               	movlw	0
  2852  00093E  6EDF               	movwf	indf2,c
  2853                           
  2854                           ;subroutines.c: 60:     moveForward(mL,mR,speed);
  2855  000940  C02B  F024         	movff	moveToBeacon@mL,moveForward@mL
  2856  000944  C02C  F025         	movff	moveToBeacon@mR,moveForward@mR
  2857  000948  C02D  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2858  00094C  C02E  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2859  000950  EC83  F006         	call	_moveForward	;wreg free
  2860                           
  2861                           ;subroutines.c: 61:     ClearLCD();
  2862  000954  EC76  F008         	call	_ClearLCD	;wreg free
  2863                           
  2864                           ;subroutines.c: 62:     LCD_String("MOVING TO BOMB");
  2865  000958  0E51               	movlw	low STR_5
  2866  00095A  6E12               	movwf	LCD_String@string,c
  2867  00095C  EC1E  F008         	call	_LCD_String	;wreg free
  2868                           
  2869                           ;subroutines.c: 66:     int error_counter = 0;
  2870  000960  0E00               	movlw	0
  2871  000962  6E37               	movwf	moveToBeacon@error_counter+1,c
  2872  000964  0E00               	movlw	0
  2873  000966  6E36               	movwf	moveToBeacon@error_counter,c
  2874  000968                     l2637:
  2875                           
  2876                           ;subroutines.c: 70:     {;subroutines.c: 72:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2877  000968  5068               	movf	3944,w,c	;volatile
  2878  00096A  CF69 F031          	movff	3945,??_moveToBeacon	;volatile
  2879  00096E  6A32               	clrf	(??_moveToBeacon+1)& (0+255),c
  2880  000970  C031  F032         	movff	??_moveToBeacon,??_moveToBeacon+1
  2881  000974  6A31               	clrf	??_moveToBeacon,c
  2882  000976  1031               	iorwf	??_moveToBeacon,w,c
  2883  000978  6E33               	movwf	moveToBeacon@raw_data,c
  2884  00097A  5032               	movf	??_moveToBeacon+1,w,c
  2885  00097C  6E34               	movwf	moveToBeacon@raw_data+1,c
  2886                           
  2887                           ;subroutines.c: 75:         char beacon_location = classify_data(raw_data);
  2888  00097E  C033  F00E         	movff	moveToBeacon@raw_data,classify_data@raw_data
  2889  000982  C034  F00F         	movff	moveToBeacon@raw_data+1,classify_data@raw_data+1
  2890  000986  EC57  F007         	call	_classify_data	;wreg free
  2891  00098A  6E35               	movwf	moveToBeacon@beacon_location,c
  2892                           
  2893                           ;subroutines.c: 78:         if(*exit_flag == 1)
  2894  00098C  5030               	movf	moveToBeacon@exit_flag,w,c
  2895  00098E  6ED9               	movwf	fsr2l,c
  2896  000990  6ADA               	clrf	fsr2h,c
  2897  000992  04DE               	decf	postinc2,w,c
  2898  000994  A4D8               	btfss	status,2,c
  2899  000996  D002               	goto	l2649
  2900  000998                     u1960:
  2901                           
  2902                           ;subroutines.c: 79:         {;subroutines.c: 80:             return 2;
  2903  000998  0E02               	movlw	2
  2904  00099A  0012               	return	
  2905  00099C                     l2649:
  2906  00099C  5035               	movf	moveToBeacon@beacon_location,w,c
  2907  00099E  A4D8               	btfss	status,2,c
  2908  0009A0  D003               	goto	l2653
  2909                           
  2910                           ;subroutines.c: 85:         {;subroutines.c: 86:             error_counter += 1;
  2911  0009A2  4A36               	infsnz	moveToBeacon@error_counter,f,c
  2912  0009A4  2A37               	incf	moveToBeacon@error_counter+1,f,c
  2913                           
  2914                           ;subroutines.c: 87:         }
  2915  0009A6  D004               	goto	l2655
  2916  0009A8                     l2653:
  2917                           
  2918                           ;subroutines.c: 90:         {;subroutines.c: 91:             error_counter = 0;
  2919  0009A8  0E00               	movlw	0
  2920  0009AA  6E37               	movwf	moveToBeacon@error_counter+1,c
  2921  0009AC  0E00               	movlw	0
  2922  0009AE  6E36               	movwf	moveToBeacon@error_counter,c
  2923  0009B0                     l2655:
  2924                           
  2925                           ;subroutines.c: 96:         if(error_counter >=16500)
  2926  0009B0  BE37               	btfsc	moveToBeacon@error_counter+1,7,c
  2927  0009B2  D7DA               	goto	l2637
  2928  0009B4  0E74               	movlw	116
  2929  0009B6  5C36               	subwf	moveToBeacon@error_counter,w,c
  2930  0009B8  0E40               	movlw	64
  2931  0009BA  5837               	subwfb	moveToBeacon@error_counter+1,w,c
  2932  0009BC  A0D8               	btfss	status,0,c
  2933  0009BE  D7D4               	goto	l2637
  2934                           
  2935                           ;subroutines.c: 97:         {;subroutines.c: 98:             move-> move_number += 1;
  2936  0009C0  502F               	movf	moveToBeacon@move,w,c
  2937  0009C2  6ED9               	movwf	fsr2l,c
  2938  0009C4  6ADA               	clrf	fsr2h,c
  2939  0009C6  0E3C               	movlw	60
  2940  0009C8  26D9               	addwf	fsr2l,f,c
  2941  0009CA  2ADF               	incf	indf2,f,c
  2942                           
  2943                           ;subroutines.c: 101:             if(move->move_number >= 19)
  2944  0009CC  502F               	movf	moveToBeacon@move,w,c
  2945  0009CE  6ED9               	movwf	fsr2l,c
  2946  0009D0  6ADA               	clrf	fsr2h,c
  2947  0009D2  0E3C               	movlw	60
  2948  0009D4  26D9               	addwf	fsr2l,f,c
  2949  0009D6  0E12               	movlw	18
  2950  0009D8  64DF               	cpfsgt	indf2,c
  2951  0009DA  D001               	goto	l2665
  2952  0009DC  D7DD               	goto	u1960
  2953  0009DE                     l2665:
  2954                           
  2955                           ;subroutines.c: 106:             {;subroutines.c: 107:                  return 0;
  2956  0009DE  0E00               	movlw	0
  2957  0009E0  0012               	return		;funcret
  2958  0009E2                     __end_of_moveToBeacon:
  2959                           	opt callstack 0
  2960                           
  2961 ;; *************** function _moveForward *****************
  2962 ;; Defined at:
  2963 ;;		line 86 in file "dc_motor.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2966 ;;		 -> main@motorL(9), 
  2967 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2968 ;;		 -> main@motorR(9), 
  2969 ;;  max_power       2   37[COMRAM] int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  i               2   40[COMRAM] int 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2981 ;;      Params:         4       0       0       0
  2982 ;;      Locals:         2       0       0       0
  2983 ;;      Temps:          1       0       0       0
  2984 ;;      Totals:         7       0       0       0
  2985 ;;Total ram usage:        7 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    5
  2988 ;; This function calls:
  2989 ;;		_setMotorPWM
  2990 ;; This function is called by:
  2991 ;;		_moveToBeacon
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text18
  2996  000D06                     __ptext18:
  2997                           	opt callstack 0
  2998  000D06                     _moveForward:
  2999                           	opt callstack 24
  3000                           
  3001                           ;dc_motor.c: 86: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 87: {;dc_motor.c: 88:     mL->direction = 1;
  3002                           
  3003                           ;incstack = 0
  3004  000D06  5024               	movf	moveForward@mL,w,c
  3005  000D08  6ED9               	movwf	fsr2l,c
  3006  000D0A  6ADA               	clrf	fsr2h,c
  3007  000D0C  0E01               	movlw	1
  3008  000D0E  26D9               	addwf	fsr2l,f,c
  3009  000D10  0E01               	movlw	1
  3010  000D12  6EDF               	movwf	indf2,c
  3011                           
  3012                           ;dc_motor.c: 89:     mR->direction = 1;
  3013  000D14  5025               	movf	moveForward@mR,w,c
  3014  000D16  6ED9               	movwf	fsr2l,c
  3015  000D18  6ADA               	clrf	fsr2h,c
  3016  000D1A  0E01               	movlw	1
  3017  000D1C  26D9               	addwf	fsr2l,f,c
  3018  000D1E  0E01               	movlw	1
  3019  000D20  6EDF               	movwf	indf2,c
  3020                           
  3021                           ;dc_motor.c: 90:     for(int i = 10; i < max_power; i++)
  3022  000D22  0E00               	movlw	0
  3023  000D24  6E2A               	movwf	moveForward@i+1,c
  3024  000D26  0E0A               	movlw	10
  3025  000D28  6E29               	movwf	moveForward@i,c
  3026  000D2A  D01C               	goto	l2445
  3027  000D2C                     l2433:
  3028                           
  3029                           ;dc_motor.c: 91:     {;dc_motor.c: 92:         mL->power = i;
  3030  000D2C  5024               	movf	moveForward@mL,w,c
  3031  000D2E  6ED9               	movwf	fsr2l,c
  3032  000D30  6ADA               	clrf	fsr2h,c
  3033  000D32  C029  FFDF         	movff	moveForward@i,indf2
  3034                           
  3035                           ;dc_motor.c: 93:         mR->power = i - 4;
  3036  000D36  5025               	movf	moveForward@mR,w,c
  3037  000D38  6ED9               	movwf	fsr2l,c
  3038  000D3A  6ADA               	clrf	fsr2h,c
  3039  000D3C  5029               	movf	moveForward@i,w,c
  3040  000D3E  0FFC               	addlw	252
  3041  000D40  6EDF               	movwf	indf2,c
  3042                           
  3043                           ;dc_motor.c: 94:         setMotorPWM(mL);
  3044  000D42  C024  F01C         	movff	moveForward@mL,setMotorPWM@m
  3045  000D46  EC5F  F002         	call	_setMotorPWM	;wreg free
  3046                           
  3047                           ;dc_motor.c: 95:         setMotorPWM(mR);
  3048  000D4A  C025  F01C         	movff	moveForward@mR,setMotorPWM@m
  3049  000D4E  EC5F  F002         	call	_setMotorPWM	;wreg free
  3050                           
  3051                           ;dc_motor.c: 96:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3052  000D52  0E03               	movlw	3
  3053  000D54  6E28               	movwf	??_moveForward& (0+255),c
  3054  000D56  0E98               	movlw	152
  3055  000D58                     u2297:
  3056  000D58  2EE8               	decfsz	wreg,f,c
  3057  000D5A  D7FE               	bra	u2297
  3058  000D5C  2E28               	decfsz	??_moveForward& (0+255),f,c
  3059  000D5E  D7FC               	bra	u2297
  3060                           
  3061                           ;dc_motor.c: 97:     }
  3062  000D60  4A29               	infsnz	moveForward@i,f,c
  3063  000D62  2A2A               	incf	moveForward@i+1,f,c
  3064  000D64                     l2445:
  3065  000D64  5026               	movf	moveForward@max_power,w,c
  3066  000D66  5C29               	subwf	moveForward@i,w,c
  3067  000D68  502A               	movf	moveForward@i+1,w,c
  3068  000D6A  0A80               	xorlw	128
  3069  000D6C  6E28               	movwf	??_moveForward& (0+255),c
  3070  000D6E  5027               	movf	moveForward@max_power+1,w,c
  3071  000D70  0A80               	xorlw	128
  3072  000D72  5828               	subwfb	??_moveForward& (0+255),w,c
  3073  000D74  B0D8               	btfsc	status,0,c
  3074  000D76  0012               	return	
  3075  000D78  D7D9               	goto	l2433
  3076  000D7A                     __end_of_moveForward:
  3077                           	opt callstack 0
  3078                           
  3079 ;; *************** function _classify_data *****************
  3080 ;; Defined at:
  3081 ;;		line 33 in file "signal_processing.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  raw_data        2   13[COMRAM] unsigned int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  filtered        2   17[COMRAM] unsigned int 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3095 ;;      Params:         2       0       0       0
  3096 ;;      Locals:         2       0       0       0
  3097 ;;      Temps:          2       0       0       0
  3098 ;;      Totals:         6       0       0       0
  3099 ;;Total ram usage:        6 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_scanForBeacon
  3106 ;;		_moveToBeacon
  3107 ;;		_waitForInput
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text19
  3112  000EAE                     __ptext19:
  3113                           	opt callstack 0
  3114  000EAE                     _classify_data:
  3115                           	opt callstack 26
  3116                           
  3117                           ;signal_processing.c: 33: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           34: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 4
      +                          2:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  3118                           
  3119                           ;incstack = 0
  3120  000EAE  5038               	movf	classify_data@smoothed,w,c
  3121  000EB0  5C0E               	subwf	classify_data@raw_data,w,c
  3122  000EB2  6E10               	movwf	??_classify_data& (0+255),c
  3123  000EB4  5039               	movf	classify_data@smoothed+1,w,c
  3124  000EB6  580F               	subwfb	classify_data@raw_data+1,w,c
  3125  000EB8  6E11               	movwf	(??_classify_data+1)& (0+255),c
  3126  000EBA  90D8               	bcf	status,0,c
  3127  000EBC  3211               	rrcf	??_classify_data+1,f,c
  3128  000EBE  3210               	rrcf	??_classify_data,f,c
  3129  000EC0  90D8               	bcf	status,0,c
  3130  000EC2  3211               	rrcf	??_classify_data+1,f,c
  3131  000EC4  3210               	rrcf	??_classify_data,f,c
  3132  000EC6  5038               	movf	classify_data@smoothed,w,c
  3133  000EC8  2410               	addwf	??_classify_data,w,c
  3134  000ECA  6E38               	movwf	classify_data@smoothed,c
  3135  000ECC  5039               	movf	classify_data@smoothed+1,w,c
  3136  000ECE  2011               	addwfc	??_classify_data+1,w,c
  3137  000ED0  6E39               	movwf	classify_data@smoothed+1,c
  3138                           
  3139                           ;signal_processing.c: 43:     unsigned int filtered = raw_data - smoothed;
  3140  000ED2  5038               	movf	classify_data@smoothed,w,c
  3141  000ED4  5C0E               	subwf	classify_data@raw_data,w,c
  3142  000ED6  6E12               	movwf	classify_data@filtered,c
  3143  000ED8  5039               	movf	classify_data@smoothed+1,w,c
  3144  000EDA  580F               	subwfb	classify_data@raw_data+1,w,c
  3145  000EDC  6E13               	movwf	classify_data@filtered+1,c
  3146                           
  3147                           ;signal_processing.c: 46:     if(filtered >= 100)
  3148  000EDE  5013               	movf	classify_data@filtered+1,w,c
  3149  000EE0  E104               	bnz	u1890
  3150  000EE2  0E64               	movlw	100
  3151  000EE4  5C12               	subwf	classify_data@filtered,w,c
  3152  000EE6  A0D8               	btfss	status,0,c
  3153  000EE8  D002               	goto	l2519
  3154  000EEA                     u1890:
  3155                           
  3156                           ;signal_processing.c: 47:     {;signal_processing.c: 48:         return 1;
  3157  000EEA  0E01               	movlw	1
  3158  000EEC  0012               	return	
  3159  000EEE                     l2519:
  3160                           
  3161                           ;signal_processing.c: 51:     {;signal_processing.c: 52:         return 0;
  3162  000EEE  0E00               	movlw	0
  3163  000EF0  0012               	return		;funcret
  3164  000EF2                     __end_of_classify_data:
  3165                           	opt callstack 0
  3166                           
  3167 ;; *************** function _LCD_String *****************
  3168 ;; Defined at:
  3169 ;;		line 119 in file "LCDIO.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;  string          1   17[COMRAM] PTR unsigned char 
  3172 ;;		 -> STR_10(16), STR_9(16), STR_8(13), STR_7(16), 
  3173 ;;		 -> STR_6(15), STR_5(15), STR_4(10), STR_3(16), 
  3174 ;;		 -> STR_2(16), STR_1(15), 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3186 ;;      Params:         1       0       0       0
  3187 ;;      Locals:         0       0       0       0
  3188 ;;      Temps:          0       0       0       0
  3189 ;;      Totals:         1       0       0       0
  3190 ;;Total ram usage:        1 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    6
  3193 ;; This function calls:
  3194 ;;		_SendLCD
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;;		_check_RFID
  3198 ;;		_scanForBeacon
  3199 ;;		_moveToBeacon
  3200 ;;		_returnHome
  3201 ;;		_stopAndDisplay
  3202 ;;		_waitForInput
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text20
  3207  00103C                     __ptext20:
  3208                           	opt callstack 0
  3209  00103C                     _LCD_String:
  3210                           	opt callstack 23
  3211                           
  3212                           ;LCDIO.c: 121: while(*string != 0){
  3213                           
  3214                           ;incstack = 0
  3215  00103C  D00D               	goto	l2299
  3216  00103E                     l2293:
  3217                           
  3218                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3219  00103E  0E01               	movlw	1
  3220  001040  6E10               	movwf	SendLCD@type,c
  3221  001042  C012  FFF6         	movff	LCD_String@string,tblptrl
  3222  001046                     	if	0	;There is only one active tblptr byte
  3223  001046                     	endif
  3224  001046                     	if	0	;tblptru may be non-zero
  3225  001046                     	endif
  3226  001046                     	if	0	;tblptru may be non-zero
  3227  001046                     	endif
  3228  001046  0008               	tblrd		*
  3229  001048  50F5               	movf	tablat,w,c
  3230  00104A  ECEF  F007         	call	_SendLCD
  3231  00104E  2A12               	incf	LCD_String@string,f,c
  3232                           
  3233                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3234  001050  0E21               	movlw	33
  3235  001052                     u2307:
  3236  001052  2EE8               	decfsz	wreg,f,c
  3237  001054  D7FE               	bra	u2307
  3238  001056  F000               	nop	
  3239  001058                     l2299:
  3240                           
  3241                           ;LCDIO.c: 121: while(*string != 0){
  3242  001058  C012  FFF6         	movff	LCD_String@string,tblptrl
  3243  00105C                     	if	0	;There is only one active tblptr byte
  3244  00105C                     	endif
  3245  00105C                     	if	0	;tblptru may be non-zero
  3246  00105C                     	endif
  3247  00105C                     	if	0	;tblptru may be non-zero
  3248  00105C                     	endif
  3249  00105C  0008               	tblrd		*
  3250  00105E  50F5               	movf	tablat,w,c
  3251  001060  0900               	iorlw	0
  3252  001062  B4D8               	btfsc	status,2,c
  3253  001064  0012               	return	
  3254  001066  D7EB               	goto	l2293
  3255  001068                     __end_of_LCD_String:
  3256                           	opt callstack 0
  3257                           
  3258 ;; *************** function _ClearLCD *****************
  3259 ;; Defined at:
  3260 ;;		line 131 in file "LCDIO.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3274 ;;      Params:         0       0       0       0
  3275 ;;      Locals:         0       0       0       0
  3276 ;;      Temps:          1       0       0       0
  3277 ;;      Totals:         1       0       0       0
  3278 ;;Total ram usage:        1 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    6
  3281 ;; This function calls:
  3282 ;;		_SendLCD
  3283 ;; This function is called by:
  3284 ;;		_display_RFID
  3285 ;;		_scanForBeacon
  3286 ;;		_moveToBeacon
  3287 ;;		_returnHome
  3288 ;;		_stopAndDisplay
  3289 ;;		_waitForInput
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           	psect	text21
  3294  0010EC                     __ptext21:
  3295                           	opt callstack 0
  3296  0010EC                     _ClearLCD:
  3297                           	opt callstack 23
  3298                           
  3299                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3300                           
  3301                           ;incstack = 0
  3302  0010EC  0E00               	movlw	0
  3303  0010EE  6E10               	movwf	SendLCD@type,c
  3304  0010F0  0E01               	movlw	1
  3305  0010F2  ECEF  F007         	call	_SendLCD
  3306                           
  3307                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3308  0010F6  0E0D               	movlw	13
  3309  0010F8  6E12               	movwf	??_ClearLCD& (0+255),c
  3310  0010FA  0EFC               	movlw	252
  3311  0010FC                     u2317:
  3312  0010FC  2EE8               	decfsz	wreg,f,c
  3313  0010FE  D7FE               	bra	u2317
  3314  001100  2E12               	decfsz	??_ClearLCD& (0+255),f,c
  3315  001102  D7FC               	bra	u2317
  3316  001104  0012               	return		;funcret
  3317  001106                     __end_of_ClearLCD:
  3318                           	opt callstack 0
  3319                           
  3320 ;; *************** function _SendLCD *****************
  3321 ;; Defined at:
  3322 ;;		line 44 in file "LCDIO.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  Byte            1    wreg     unsigned char 
  3325 ;;  type            1   15[COMRAM] unsigned char 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  Byte            1   16[COMRAM] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3337 ;;      Params:         1       0       0       0
  3338 ;;      Locals:         1       0       0       0
  3339 ;;      Temps:          0       0       0       0
  3340 ;;      Totals:         2       0       0       0
  3341 ;;Total ram usage:        2 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    5
  3344 ;; This function calls:
  3345 ;;		_LCDout
  3346 ;; This function is called by:
  3347 ;;		_init_LCD
  3348 ;;		_SetLine
  3349 ;;		_LCD_String
  3350 ;;		_ClearLCD
  3351 ;;		_display_RFID
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text22
  3356  000FDE                     __ptext22:
  3357                           	opt callstack 0
  3358  000FDE                     _SendLCD:
  3359                           	opt callstack 23
  3360                           
  3361                           ;incstack = 0
  3362                           ;SendLCD@Byte stored from wreg
  3363  000FDE  6E11               	movwf	SendLCD@Byte,c
  3364                           
  3365                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3366  000FE0  B010               	btfsc	SendLCD@type,0,c
  3367  000FE2  D002               	bra	u1495
  3368  000FE4  9E89               	bcf	3977,7,c	;volatile
  3369  000FE6  D001               	bra	u1496
  3370  000FE8                     u1495:
  3371  000FE8  8E89               	bsf	3977,7,c	;volatile
  3372  000FEA                     u1496:
  3373                           
  3374                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3375  000FEA  3811               	swapf	SendLCD@Byte,w,c
  3376  000FEC  0B0F               	andlw	15
  3377  000FEE  0B0F               	andlw	15
  3378  000FF0  EC0D  F006         	call	_LCDout
  3379                           
  3380                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3381  000FF4  0E06               	movlw	6
  3382  000FF6                     u2327:
  3383  000FF6  2EE8               	decfsz	wreg,f,c
  3384  000FF8  D7FE               	bra	u2327
  3385  000FFA  D000               	nop2	
  3386                           
  3387                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3388  000FFC  5011               	movf	SendLCD@Byte,w,c
  3389  000FFE  0B0F               	andlw	15
  3390  001000  EC0D  F006         	call	_LCDout
  3391                           
  3392                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3393  001004  0E21               	movlw	33
  3394  001006                     u2337:
  3395  001006  2EE8               	decfsz	wreg,f,c
  3396  001008  D7FE               	bra	u2337
  3397  00100A  F000               	nop	
  3398  00100C  0012               	return		;funcret
  3399  00100E                     __end_of_SendLCD:
  3400                           	opt callstack 0
  3401                           
  3402 ;; *************** function _LCDout *****************
  3403 ;; Defined at:
  3404 ;;		line 31 in file "LCDIO.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  number          1    wreg     unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  number          1   14[COMRAM] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3418 ;;      Params:         0       0       0       0
  3419 ;;      Locals:         1       0       0       0
  3420 ;;      Temps:          1       0       0       0
  3421 ;;      Totals:         2       0       0       0
  3422 ;;Total ram usage:        2 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    4
  3425 ;; This function calls:
  3426 ;;		_E_TOG
  3427 ;; This function is called by:
  3428 ;;		_SendLCD
  3429 ;;		_init_LCD
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text23
  3434  000C1A                     __ptext23:
  3435                           	opt callstack 0
  3436  000C1A                     _LCDout:
  3437                           	opt callstack 23
  3438                           
  3439                           ;incstack = 0
  3440                           ;LCDout@number stored from wreg
  3441  000C1A  6E0F               	movwf	LCDout@number,c
  3442                           
  3443                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3444  000C1C  C00F  F00E         	movff	LCDout@number,??_LCDout
  3445  000C20  0E01               	movlw	1
  3446  000C22  160E               	andwf	??_LCDout,f,c
  3447  000C24  508B               	movf	3979,w,c	;volatile
  3448  000C26  180E               	xorwf	??_LCDout,w,c
  3449  000C28  0BFE               	andlw	-2
  3450  000C2A  180E               	xorwf	??_LCDout,w,c
  3451  000C2C  6E8B               	movwf	3979,c	;volatile
  3452                           
  3453                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3454  000C2E  C00F  F00E         	movff	LCDout@number,??_LCDout
  3455  000C32  90D8               	bcf	status,0,c
  3456  000C34  320E               	rrcf	??_LCDout,f,c
  3457  000C36  0E01               	movlw	1
  3458  000C38  160E               	andwf	??_LCDout,f,c
  3459  000C3A  460E               	rlncf	??_LCDout,f,c
  3460  000C3C  460E               	rlncf	??_LCDout,f,c
  3461  000C3E  460E               	rlncf	??_LCDout,f,c
  3462  000C40  508B               	movf	3979,w,c	;volatile
  3463  000C42  180E               	xorwf	??_LCDout,w,c
  3464  000C44  0BF7               	andlw	-9
  3465  000C46  180E               	xorwf	??_LCDout,w,c
  3466  000C48  6E8B               	movwf	3979,c	;volatile
  3467                           
  3468                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3469  000C4A  C00F  F00E         	movff	LCDout@number,??_LCDout
  3470  000C4E  90D8               	bcf	status,0,c
  3471  000C50  320E               	rrcf	??_LCDout,f,c
  3472  000C52  90D8               	bcf	status,0,c
  3473  000C54  320E               	rrcf	??_LCDout,f,c
  3474  000C56  0E01               	movlw	1
  3475  000C58  160E               	andwf	??_LCDout,f,c
  3476  000C5A  508C               	movf	3980,w,c	;volatile
  3477  000C5C  180E               	xorwf	??_LCDout,w,c
  3478  000C5E  0BFE               	andlw	-2
  3479  000C60  180E               	xorwf	??_LCDout,w,c
  3480  000C62  6E8C               	movwf	3980,c	;volatile
  3481                           
  3482                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3483  000C64  C00F  F00E         	movff	LCDout@number,??_LCDout
  3484  000C68  90D8               	bcf	status,0,c
  3485  000C6A  320E               	rrcf	??_LCDout,f,c
  3486  000C6C  90D8               	bcf	status,0,c
  3487  000C6E  320E               	rrcf	??_LCDout,f,c
  3488  000C70  90D8               	bcf	status,0,c
  3489  000C72  320E               	rrcf	??_LCDout,f,c
  3490  000C74  0E01               	movlw	1
  3491  000C76  160E               	andwf	??_LCDout,f,c
  3492  000C78  460E               	rlncf	??_LCDout,f,c
  3493  000C7A  508C               	movf	3980,w,c	;volatile
  3494  000C7C  180E               	xorwf	??_LCDout,w,c
  3495  000C7E  0BFD               	andlw	-3
  3496  000C80  180E               	xorwf	??_LCDout,w,c
  3497  000C82  6E8C               	movwf	3980,c	;volatile
  3498                           
  3499                           ;LCDIO.c: 39:  E_TOG();
  3500  000C84  EC8D  F008         	call	_E_TOG	;wreg free
  3501                           
  3502                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3503  000C88  0E03               	movlw	3
  3504  000C8A                     u2347:
  3505  000C8A  2EE8               	decfsz	wreg,f,c
  3506  000C8C  D7FE               	bra	u2347
  3507  000C8E  F000               	nop	
  3508  000C90  0012               	return		;funcret
  3509  000C92                     __end_of_LCDout:
  3510                           	opt callstack 0
  3511                           
  3512 ;; *************** function _E_TOG *****************
  3513 ;; Defined at:
  3514 ;;		line 23 in file "LCDIO.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3528 ;;      Params:         0       0       0       0
  3529 ;;      Locals:         0       0       0       0
  3530 ;;      Temps:          0       0       0       0
  3531 ;;      Totals:         0       0       0       0
  3532 ;;Total ram usage:        0 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    3
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		_LCDout
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text24
  3543  00111A                     __ptext24:
  3544                           	opt callstack 0
  3545  00111A                     _E_TOG:
  3546                           	opt callstack 23
  3547                           
  3548                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3549                           
  3550                           ;incstack = 0
  3551  00111A  8C89               	bsf	3977,6,c	;volatile
  3552                           
  3553                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3554  00111C  0E03               	movlw	3
  3555  00111E                     u2357:
  3556  00111E  2EE8               	decfsz	wreg,f,c
  3557  001120  D7FE               	bra	u2357
  3558  001122  F000               	nop	
  3559                           
  3560                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3561  001124  9C89               	bcf	3977,6,c	;volatile
  3562  001126  0012               	return		;funcret
  3563  001128                     __end_of_E_TOG:
  3564                           	opt callstack 0
  3565                           
  3566 ;; *************** function _init_motor_struct *****************
  3567 ;; Defined at:
  3568 ;;		line 115 in file "dc_motor.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  3571 ;;		 -> main@motorL(9), 
  3572 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  3573 ;;		 -> main@motorR(9), 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3585 ;;      Params:         2       0       0       0
  3586 ;;      Locals:         0       0       0       0
  3587 ;;      Temps:          0       0       0       0
  3588 ;;      Totals:         2       0       0       0
  3589 ;;Total ram usage:        2 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    5
  3592 ;; This function calls:
  3593 ;;		_setMotorPWM
  3594 ;; This function is called by:
  3595 ;;		_main
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text25
  3600  0006CE                     __ptext25:
  3601                           	opt callstack 0
  3602  0006CE                     _init_motor_struct:
  3603                           	opt callstack 25
  3604                           
  3605                           ;dc_motor.c: 115: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 116: {;dc_motor.c: 118: mL->power = 0;
  3606                           
  3607                           ;incstack = 0
  3608  0006CE  5024               	movf	init_motor_struct@mL,w,c
  3609  0006D0  6ED9               	movwf	fsr2l,c
  3610  0006D2  6ADA               	clrf	fsr2h,c
  3611  0006D4  0E00               	movlw	0
  3612  0006D6  6EDF               	movwf	indf2,c
  3613                           
  3614                           ;dc_motor.c: 119: mL->direction = 1;
  3615  0006D8  5024               	movf	init_motor_struct@mL,w,c
  3616  0006DA  6ED9               	movwf	fsr2l,c
  3617  0006DC  6ADA               	clrf	fsr2h,c
  3618  0006DE  0E01               	movlw	1
  3619  0006E0  26D9               	addwf	fsr2l,f,c
  3620  0006E2  0E01               	movlw	1
  3621  0006E4  6EDF               	movwf	indf2,c
  3622                           
  3623                           ;dc_motor.c: 120: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3624  0006E6  5024               	movf	init_motor_struct@mL,w,c
  3625  0006E8  6ED9               	movwf	fsr2l,c
  3626  0006EA  6ADA               	clrf	fsr2h,c
  3627  0006EC  0E02               	movlw	2
  3628  0006EE  26D9               	addwf	fsr2l,f,c
  3629  0006F0  0E79               	movlw	121
  3630  0006F2  6EDE               	movwf	postinc2,c
  3631  0006F4  0E0F               	movlw	15
  3632  0006F6  6EDD               	movwf	postdec2,c
  3633                           
  3634                           ;dc_motor.c: 121: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3635  0006F8  5024               	movf	init_motor_struct@mL,w,c
  3636  0006FA  6ED9               	movwf	fsr2l,c
  3637  0006FC  6ADA               	clrf	fsr2h,c
  3638  0006FE  0E04               	movlw	4
  3639  000700  26D9               	addwf	fsr2l,f,c
  3640  000702  0E78               	movlw	120
  3641  000704  6EDE               	movwf	postinc2,c
  3642  000706  0E0F               	movlw	15
  3643  000708  6EDD               	movwf	postdec2,c
  3644                           
  3645                           ;dc_motor.c: 122: mL->dir_pin=0;
  3646  00070A  5024               	movf	init_motor_struct@mL,w,c
  3647  00070C  6ED9               	movwf	fsr2l,c
  3648  00070E  6ADA               	clrf	fsr2h,c
  3649  000710  0E06               	movlw	6
  3650  000712  26D9               	addwf	fsr2l,f,c
  3651  000714  0E00               	movlw	0
  3652  000716  6EDF               	movwf	indf2,c
  3653                           
  3654                           ;dc_motor.c: 123: mL->PWMperiod=199;
  3655  000718  5024               	movf	init_motor_struct@mL,w,c
  3656  00071A  6ED9               	movwf	fsr2l,c
  3657  00071C  6ADA               	clrf	fsr2h,c
  3658  00071E  0E07               	movlw	7
  3659  000720  26D9               	addwf	fsr2l,f,c
  3660  000722  0EC7               	movlw	199
  3661  000724  6EDE               	movwf	postinc2,c
  3662  000726  0E00               	movlw	0
  3663  000728  6EDD               	movwf	postdec2,c
  3664                           
  3665                           ;dc_motor.c: 125: mR->power = 0;
  3666  00072A  5025               	movf	init_motor_struct@mR,w,c
  3667  00072C  6ED9               	movwf	fsr2l,c
  3668  00072E  6ADA               	clrf	fsr2h,c
  3669  000730  0E00               	movlw	0
  3670  000732  6EDF               	movwf	indf2,c
  3671                           
  3672                           ;dc_motor.c: 126: mR->direction = 1;
  3673  000734  5025               	movf	init_motor_struct@mR,w,c
  3674  000736  6ED9               	movwf	fsr2l,c
  3675  000738  6ADA               	clrf	fsr2h,c
  3676  00073A  0E01               	movlw	1
  3677  00073C  26D9               	addwf	fsr2l,f,c
  3678  00073E  0E01               	movlw	1
  3679  000740  6EDF               	movwf	indf2,c
  3680                           
  3681                           ;dc_motor.c: 127: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3682  000742  5025               	movf	init_motor_struct@mR,w,c
  3683  000744  6ED9               	movwf	fsr2l,c
  3684  000746  6ADA               	clrf	fsr2h,c
  3685  000748  0E02               	movlw	2
  3686  00074A  26D9               	addwf	fsr2l,f,c
  3687  00074C  0E77               	movlw	119
  3688  00074E  6EDE               	movwf	postinc2,c
  3689  000750  0E0F               	movlw	15
  3690  000752  6EDD               	movwf	postdec2,c
  3691                           
  3692                           ;dc_motor.c: 128: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3693  000754  5025               	movf	init_motor_struct@mR,w,c
  3694  000756  6ED9               	movwf	fsr2l,c
  3695  000758  6ADA               	clrf	fsr2h,c
  3696  00075A  0E04               	movlw	4
  3697  00075C  26D9               	addwf	fsr2l,f,c
  3698  00075E  0E76               	movlw	118
  3699  000760  6EDE               	movwf	postinc2,c
  3700  000762  0E0F               	movlw	15
  3701  000764  6EDD               	movwf	postdec2,c
  3702                           
  3703                           ;dc_motor.c: 129: mR->dir_pin=2;
  3704  000766  5025               	movf	init_motor_struct@mR,w,c
  3705  000768  6ED9               	movwf	fsr2l,c
  3706  00076A  6ADA               	clrf	fsr2h,c
  3707  00076C  0E06               	movlw	6
  3708  00076E  26D9               	addwf	fsr2l,f,c
  3709  000770  0E02               	movlw	2
  3710  000772  6EDF               	movwf	indf2,c
  3711                           
  3712                           ;dc_motor.c: 130: mR->PWMperiod=199;
  3713  000774  5025               	movf	init_motor_struct@mR,w,c
  3714  000776  6ED9               	movwf	fsr2l,c
  3715  000778  6ADA               	clrf	fsr2h,c
  3716  00077A  0E07               	movlw	7
  3717  00077C  26D9               	addwf	fsr2l,f,c
  3718  00077E  0EC7               	movlw	199
  3719  000780  6EDE               	movwf	postinc2,c
  3720  000782  0E00               	movlw	0
  3721  000784  6EDD               	movwf	postdec2,c
  3722                           
  3723                           ;dc_motor.c: 132: setMotorPWM(mL);
  3724  000786  C024  F01C         	movff	init_motor_struct@mL,setMotorPWM@m
  3725  00078A  EC5F  F002         	call	_setMotorPWM	;wreg free
  3726                           
  3727                           ;dc_motor.c: 133: setMotorPWM(mR);
  3728  00078E  C025  F01C         	movff	init_motor_struct@mR,setMotorPWM@m
  3729  000792  EC5F  F002         	call	_setMotorPWM	;wreg free
  3730  000796  0012               	return		;funcret
  3731  000798                     __end_of_init_motor_struct:
  3732                           	opt callstack 0
  3733                           
  3734 ;; *************** function _setMotorPWM *****************
  3735 ;; Defined at:
  3736 ;;		line 18 in file "dc_motor.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  m               1   27[COMRAM] PTR struct DC_motor
  3739 ;;		 -> main@motorR(9), main@motorL(9), 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  PWMduty         2   33[COMRAM] int 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      void 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3751 ;;      Params:         1       0       0       0
  3752 ;;      Locals:         2       0       0       0
  3753 ;;      Temps:          5       0       0       0
  3754 ;;      Totals:         8       0       0       0
  3755 ;;Total ram usage:        8 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    4
  3758 ;; This function calls:
  3759 ;;		___awdiv
  3760 ;;		___wmul
  3761 ;; This function is called by:
  3762 ;;		_stop
  3763 ;;		_turnLeft
  3764 ;;		_turnRight
  3765 ;;		_moveForward
  3766 ;;		_moveBackward
  3767 ;;		_init_motor_struct
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text26
  3772  0004BE                     __ptext26:
  3773                           	opt callstack 0
  3774  0004BE                     _setMotorPWM:
  3775                           	opt callstack 24
  3776                           
  3777                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3778                           
  3779                           ;incstack = 0
  3780  0004BE  501C               	movf	setMotorPWM@m,w,c
  3781  0004C0  6ED9               	movwf	fsr2l,c
  3782  0004C2  6ADA               	clrf	fsr2h,c
  3783  0004C4  50DF               	movf	indf2,w,c
  3784  0004C6  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3785  0004C8  501D               	movf	??_setMotorPWM,w,c
  3786  0004CA  6E0E               	movwf	___wmul@multiplier,c
  3787  0004CC  6A0F               	clrf	___wmul@multiplier+1,c
  3788  0004CE  501C               	movf	setMotorPWM@m,w,c
  3789  0004D0  6ED9               	movwf	fsr2l,c
  3790  0004D2  6ADA               	clrf	fsr2h,c
  3791  0004D4  0E07               	movlw	7
  3792  0004D6  26D9               	addwf	fsr2l,f,c
  3793  0004D8  CFDE F010          	movff	postinc2,___wmul@multiplicand
  3794  0004DC  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  3795  0004E0  EC49  F008         	call	___wmul	;wreg free
  3796  0004E4  C00E  F014         	movff	?___wmul,___awdiv@dividend
  3797  0004E8  C00F  F015         	movff	?___wmul+1,___awdiv@dividend+1
  3798  0004EC  0E00               	movlw	0
  3799  0004EE  6E17               	movwf	___awdiv@divisor+1,c
  3800  0004F0  0E64               	movlw	100
  3801  0004F2  6E16               	movwf	___awdiv@divisor,c
  3802  0004F4  EC8A  F005         	call	___awdiv	;wreg free
  3803  0004F8  C014  F022         	movff	?___awdiv,setMotorPWM@PWMduty
  3804  0004FC  C015  F023         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3805                           
  3806                           ;dc_motor.c: 24:     if (m->direction)
  3807  000500  501C               	movf	setMotorPWM@m,w,c
  3808  000502  6ED9               	movwf	fsr2l,c
  3809  000504  6ADA               	clrf	fsr2h,c
  3810  000506  0E01               	movlw	1
  3811  000508  26D9               	addwf	fsr2l,f,c
  3812  00050A  50DF               	movf	indf2,w,c
  3813  00050C  B4D8               	btfsc	status,2,c
  3814  00050E  D022               	goto	l2307
  3815                           
  3816                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3817  000510  501C               	movf	setMotorPWM@m,w,c
  3818  000512  6ED9               	movwf	fsr2l,c
  3819  000514  6ADA               	clrf	fsr2h,c
  3820  000516  0E06               	movlw	6
  3821  000518  26D9               	addwf	fsr2l,f,c
  3822  00051A  50DF               	movf	indf2,w,c
  3823  00051C  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3824  00051E  0E01               	movlw	1
  3825  000520  6E1E               	movwf	(??_setMotorPWM+1)& (0+255),c
  3826  000522  2A1D               	incf	??_setMotorPWM,f,c
  3827  000524  D002               	goto	u1584
  3828  000526                     u1585:
  3829  000526  90D8               	bcf	status,0,c
  3830  000528  361E               	rlcf	??_setMotorPWM+1,f,c
  3831  00052A                     u1584:
  3832  00052A  2E1D               	decfsz	??_setMotorPWM,f,c
  3833  00052C  D7FC               	goto	u1585
  3834  00052E  501E               	movf	??_setMotorPWM+1,w,c
  3835  000530  108A               	iorwf	3978,w,c	;volatile
  3836  000532  6E8A               	movwf	3978,c	;volatile
  3837                           
  3838                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3839  000534  501C               	movf	setMotorPWM@m,w,c
  3840  000536  6ED9               	movwf	fsr2l,c
  3841  000538  6ADA               	clrf	fsr2h,c
  3842  00053A  0E07               	movlw	7
  3843  00053C  26D9               	addwf	fsr2l,f,c
  3844  00053E  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3845  000542  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3846  000546  5022               	movf	setMotorPWM@PWMduty,w,c
  3847  000548  5C1D               	subwf	??_setMotorPWM,w,c
  3848  00054A  6E22               	movwf	setMotorPWM@PWMduty,c
  3849  00054C  5023               	movf	setMotorPWM@PWMduty+1,w,c
  3850  00054E  581E               	subwfb	??_setMotorPWM+1,w,c
  3851  000550  6E23               	movwf	setMotorPWM@PWMduty+1,c
  3852                           
  3853                           ;dc_motor.c: 28:     }
  3854  000552  D013               	goto	l125
  3855  000554                     l2307:
  3856                           
  3857                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3858  000554  501C               	movf	setMotorPWM@m,w,c
  3859  000556  6ED9               	movwf	fsr2l,c
  3860  000558  6ADA               	clrf	fsr2h,c
  3861  00055A  0E06               	movlw	6
  3862  00055C  26D9               	addwf	fsr2l,f,c
  3863  00055E  50DF               	movf	indf2,w,c
  3864  000560  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3865  000562  0E01               	movlw	1
  3866  000564  6E1E               	movwf	(??_setMotorPWM+1)& (0+255),c
  3867  000566  2A1D               	incf	??_setMotorPWM,f,c
  3868  000568  D002               	goto	u1594
  3869  00056A                     u1595:
  3870  00056A  90D8               	bcf	status,0,c
  3871  00056C  361E               	rlcf	??_setMotorPWM+1,f,c
  3872  00056E                     u1594:
  3873  00056E  2E1D               	decfsz	??_setMotorPWM,f,c
  3874  000570  D7FC               	goto	u1595
  3875  000572  501E               	movf	??_setMotorPWM+1,w,c
  3876  000574  0AFF               	xorlw	255
  3877  000576  148A               	andwf	3978,w,c	;volatile
  3878  000578  6E8A               	movwf	3978,c	;volatile
  3879  00057A                     l125:
  3880                           
  3881                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3882  00057A  501C               	movf	setMotorPWM@m,w,c
  3883  00057C  6ED9               	movwf	fsr2l,c
  3884  00057E  6ADA               	clrf	fsr2h,c
  3885  000580  0E02               	movlw	2
  3886  000582  26D9               	addwf	fsr2l,f,c
  3887  000584  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3888  000588  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3889  00058C  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  3890  000590  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3891  000594  4422               	rlncf	setMotorPWM@PWMduty,w,c
  3892  000596  46E8               	rlncf	wreg,f,c
  3893  000598  0BFC               	andlw	252
  3894  00059A  6EDF               	movwf	indf2,c
  3895                           
  3896                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3897  00059C  501C               	movf	setMotorPWM@m,w,c
  3898  00059E  6ED9               	movwf	fsr2l,c
  3899  0005A0  6ADA               	clrf	fsr2h,c
  3900  0005A2  0E04               	movlw	4
  3901  0005A4  26D9               	addwf	fsr2l,f,c
  3902  0005A6  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3903  0005AA  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3904  0005AE  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  3905  0005B2  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3906  0005B6  C022  F01F         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3907  0005BA  C023  F020         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3908  0005BE  0E06               	movlw	6
  3909  0005C0  6E21               	movwf	(??_setMotorPWM+4)& (0+255),c
  3910  0005C2                     u1605:
  3911  0005C2  3420               	rlcf	??_setMotorPWM+3,w,c
  3912  0005C4  3220               	rrcf	??_setMotorPWM+3,f,c
  3913  0005C6  321F               	rrcf	??_setMotorPWM+2,f,c
  3914  0005C8  2E21               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3915  0005CA  D7FB               	goto	u1605
  3916  0005CC  501F               	movf	??_setMotorPWM+2,w,c
  3917  0005CE  6EDF               	movwf	indf2,c
  3918  0005D0  0012               	return		;funcret
  3919  0005D2                     __end_of_setMotorPWM:
  3920                           	opt callstack 0
  3921                           
  3922 ;; *************** function ___wmul *****************
  3923 ;; Defined at:
  3924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  multiplier      2   13[COMRAM] unsigned int 
  3927 ;;  multiplicand    2   15[COMRAM] unsigned int 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  product         2   17[COMRAM] unsigned int 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2   13[COMRAM] unsigned int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0, prodl, prodh
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3939 ;;      Params:         4       0       0       0
  3940 ;;      Locals:         2       0       0       0
  3941 ;;      Temps:          0       0       0       0
  3942 ;;      Totals:         6       0       0       0
  3943 ;;Total ram usage:        6 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    3
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_setMotorPWM
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text27
  3954  001092                     __ptext27:
  3955                           	opt callstack 0
  3956  001092                     ___wmul:
  3957                           	opt callstack 24
  3958                           
  3959                           ;incstack = 0
  3960  001092  500E               	movf	___wmul@multiplier,w,c
  3961  001094  0210               	mulwf	___wmul@multiplicand,c
  3962  001096  CFF3 F012          	movff	prodl,___wmul@product
  3963  00109A  CFF4 F013          	movff	prodh,___wmul@product+1
  3964  00109E  500E               	movf	___wmul@multiplier,w,c
  3965  0010A0  0211               	mulwf	___wmul@multiplicand+1,c
  3966  0010A2  50F3               	movf	prodl,w,c
  3967  0010A4  2613               	addwf	___wmul@product+1,f,c
  3968  0010A6  500F               	movf	___wmul@multiplier+1,w,c
  3969  0010A8  0210               	mulwf	___wmul@multiplicand,c
  3970  0010AA  50F3               	movf	prodl,w,c
  3971  0010AC  2613               	addwf	___wmul@product+1,f,c
  3972  0010AE  C012  F00E         	movff	___wmul@product,?___wmul
  3973  0010B2  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  3974  0010B6  0012               	return		;funcret
  3975  0010B8                     __end_of___wmul:
  3976                           	opt callstack 0
  3977                           
  3978 ;; *************** function ___awdiv *****************
  3979 ;; Defined at:
  3980 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  dividend        2   19[COMRAM] int 
  3983 ;;  divisor         2   21[COMRAM] int 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  quotient        2   25[COMRAM] int 
  3986 ;;  sign            1   24[COMRAM] unsigned char 
  3987 ;;  counter         1   23[COMRAM] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  2   19[COMRAM] int 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3997 ;;      Params:         4       0       0       0
  3998 ;;      Locals:         4       0       0       0
  3999 ;;      Temps:          0       0       0       0
  4000 ;;      Totals:         8       0       0       0
  4001 ;;Total ram usage:        8 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    3
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_setMotorPWM
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text28
  4012  000B14                     __ptext28:
  4013                           	opt callstack 0
  4014  000B14                     ___awdiv:
  4015                           	opt callstack 24
  4016                           
  4017                           ;incstack = 0
  4018  000B14  0E00               	movlw	0
  4019  000B16  6E19               	movwf	___awdiv@sign,c
  4020  000B18  AE17               	btfss	___awdiv@divisor+1,7,c
  4021  000B1A  D006               	goto	l2255
  4022  000B1C  6C16               	negf	___awdiv@divisor,c
  4023  000B1E  1E17               	comf	___awdiv@divisor+1,f,c
  4024  000B20  B0D8               	btfsc	status,0,c
  4025  000B22  2A17               	incf	___awdiv@divisor+1,f,c
  4026  000B24  0E01               	movlw	1
  4027  000B26  6E19               	movwf	___awdiv@sign,c
  4028  000B28                     l2255:
  4029  000B28  AE15               	btfss	___awdiv@dividend+1,7,c
  4030  000B2A  D006               	goto	l2261
  4031  000B2C  6C14               	negf	___awdiv@dividend,c
  4032  000B2E  1E15               	comf	___awdiv@dividend+1,f,c
  4033  000B30  B0D8               	btfsc	status,0,c
  4034  000B32  2A15               	incf	___awdiv@dividend+1,f,c
  4035  000B34  0E01               	movlw	1
  4036  000B36  1A19               	xorwf	___awdiv@sign,f,c
  4037  000B38                     l2261:
  4038  000B38  0E00               	movlw	0
  4039  000B3A  6E1B               	movwf	___awdiv@quotient+1,c
  4040  000B3C  0E00               	movlw	0
  4041  000B3E  6E1A               	movwf	___awdiv@quotient,c
  4042  000B40  5016               	movf	___awdiv@divisor,w,c
  4043  000B42  1017               	iorwf	___awdiv@divisor+1,w,c
  4044  000B44  B4D8               	btfsc	status,2,c
  4045  000B46  D01C               	goto	l2283
  4046  000B48  0E01               	movlw	1
  4047  000B4A  6E18               	movwf	___awdiv@counter,c
  4048  000B4C  D004               	goto	l2269
  4049  000B4E                     l2267:
  4050  000B4E  90D8               	bcf	status,0,c
  4051  000B50  3616               	rlcf	___awdiv@divisor,f,c
  4052  000B52  3617               	rlcf	___awdiv@divisor+1,f,c
  4053  000B54  2A18               	incf	___awdiv@counter,f,c
  4054  000B56                     l2269:
  4055  000B56  AE17               	btfss	___awdiv@divisor+1,7,c
  4056  000B58  D7FA               	goto	l2267
  4057  000B5A                     u1530:
  4058  000B5A  90D8               	bcf	status,0,c
  4059  000B5C  361A               	rlcf	___awdiv@quotient,f,c
  4060  000B5E  361B               	rlcf	___awdiv@quotient+1,f,c
  4061  000B60  5016               	movf	___awdiv@divisor,w,c
  4062  000B62  5C14               	subwf	___awdiv@dividend,w,c
  4063  000B64  5017               	movf	___awdiv@divisor+1,w,c
  4064  000B66  5815               	subwfb	___awdiv@dividend+1,w,c
  4065  000B68  A0D8               	btfss	status,0,c
  4066  000B6A  D005               	goto	l2279
  4067  000B6C  5016               	movf	___awdiv@divisor,w,c
  4068  000B6E  5E14               	subwf	___awdiv@dividend,f,c
  4069  000B70  5017               	movf	___awdiv@divisor+1,w,c
  4070  000B72  5A15               	subwfb	___awdiv@dividend+1,f,c
  4071  000B74  801A               	bsf	___awdiv@quotient,0,c
  4072  000B76                     l2279:
  4073  000B76  90D8               	bcf	status,0,c
  4074  000B78  3217               	rrcf	___awdiv@divisor+1,f,c
  4075  000B7A  3216               	rrcf	___awdiv@divisor,f,c
  4076  000B7C  2E18               	decfsz	___awdiv@counter,f,c
  4077  000B7E  D7ED               	goto	u1530
  4078  000B80                     l2283:
  4079  000B80  5019               	movf	___awdiv@sign,w,c
  4080  000B82  B4D8               	btfsc	status,2,c
  4081  000B84  D004               	goto	l2287
  4082  000B86  6C1A               	negf	___awdiv@quotient,c
  4083  000B88  1E1B               	comf	___awdiv@quotient+1,f,c
  4084  000B8A  B0D8               	btfsc	status,0,c
  4085  000B8C  2A1B               	incf	___awdiv@quotient+1,f,c
  4086  000B8E                     l2287:
  4087  000B8E  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  4088  000B92  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  4089  000B96  0012               	return		;funcret
  4090  000B98                     __end_of___awdiv:
  4091                           	opt callstack 0
  4092                           
  4093 ;; *************** function _InterruptHandlerLow *****************
  4094 ;; Defined at:
  4095 ;;		line 94 in file "main.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;		None
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4109 ;;      Params:         0       0       0       0
  4110 ;;      Locals:         0       0       0       0
  4111 ;;      Temps:          7       0       0       0
  4112 ;;      Totals:         7       0       0       0
  4113 ;;Total ram usage:        7 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    2
  4116 ;; This function calls:
  4117 ;;		Nothing
  4118 ;; This function is called by:
  4119 ;;		Interrupt level 1
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	intcodelo
  4124  000018                     __pintcodelo:
  4125                           	opt callstack 0
  4126  000018                     _InterruptHandlerLow:
  4127                           	opt callstack 22
  4128                           
  4129                           ;incstack = 0
  4130  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4131  00001A  CFD8 F007          	movff	status,??_InterruptHandlerLow
  4132  00001E  CFE8 F008          	movff	wreg,??_InterruptHandlerLow+1
  4133  000022  CFE0 F009          	movff	bsr,??_InterruptHandlerLow+2
  4134  000026  CFD9 F00A          	movff	fsr2l,??_InterruptHandlerLow+3
  4135  00002A  CFDA F00B          	movff	fsr2h,??_InterruptHandlerLow+4
  4136  00002E  CFF3 F00C          	movff	prodl,??_InterruptHandlerLow+5
  4137  000032  CFF4 F00D          	movff	prodh,??_InterruptHandlerLow+6
  4138                           
  4139                           ;main.c: 97:     if((INTCONbits.TMR0IF) && ((robot_mode == 1) || (robot_mode == 0)))
  4140  000036  A4F2               	btfss	4082,2,c	;volatile
  4141  000038  D011               	goto	i1l72
  4142  00003A  043B               	decf	_robot_mode,w,c	;volatile
  4143  00003C  B4D8               	btfsc	status,2,c
  4144  00003E  D003               	goto	i1u142_20
  4145  000040  503B               	movf	_robot_mode,w,c	;volatile
  4146  000042  A4D8               	btfss	status,2,c
  4147  000044  D00B               	goto	i1l72
  4148  000046                     i1u142_20:
  4149                           
  4150                           ;main.c: 98:     {;main.c: 100:         travel_moves.time_taken[travel_moves.move_number
      +                          ] += 1;
  4151  000046  0100               	movlb	0	; () banked
  4152  000048  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4153  00004A  0D02               	mullw	2
  4154  00004C  50F3               	movf	prodl,w,c
  4155  00004E  0F74               	addlw	low (_travel_moves+20)
  4156  000050  6ED9               	movwf	fsr2l,c
  4157  000052  6ADA               	clrf	fsr2h,c
  4158  000054  2ADE               	incf	postinc2,f,c
  4159  000056  0E00               	movlw	0
  4160  000058  22DD               	addwfc	postdec2,f,c
  4161  00005A  D010               	goto	i1l2191
  4162  00005C                     i1l72:
  4163  00005C  A4F2               	btfss	4082,2,c	;volatile
  4164  00005E  D00E               	goto	i1l2191
  4165  000060  0E02               	movlw	2
  4166  000062  183B               	xorwf	_robot_mode,w,c	;volatile
  4167  000064  A4D8               	btfss	status,2,c
  4168  000066  D00A               	goto	i1l2191
  4169                           
  4170                           ;main.c: 105:     {;main.c: 106:         travel_moves.time_taken[travel_moves.move_numbe
      +                          r] -= 1;
  4171  000068  0100               	movlb	0	; () banked
  4172  00006A  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4173  00006C  0D02               	mullw	2
  4174  00006E  50F3               	movf	prodl,w,c
  4175  000070  0F74               	addlw	low (_travel_moves+20)
  4176  000072  6ED9               	movwf	fsr2l,c
  4177  000074  6ADA               	clrf	fsr2h,c
  4178  000076  06DE               	decf	postinc2,f,c
  4179  000078  0E00               	movlw	0
  4180  00007A  5ADD               	subwfb	postdec2,f,c
  4181  00007C                     i1l2191:
  4182                           
  4183                           ;main.c: 111:     {;main.c: 112:         INTCONbits.TMR0IF = 0;
  4184                           
  4185                           ;main.c: 110:     else
  4186                           
  4187                           ;main.c: 108:     }
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;main.c: 107:         INTCONbits.TMR0IF = 0;
  4191  00007C  94F2               	bcf	4082,2,c	;volatile
  4192  00007E  C00D  FFF4         	movff	??_InterruptHandlerLow+6,prodh
  4193  000082  C00C  FFF3         	movff	??_InterruptHandlerLow+5,prodl
  4194  000086  C00B  FFDA         	movff	??_InterruptHandlerLow+4,fsr2h
  4195  00008A  C00A  FFD9         	movff	??_InterruptHandlerLow+3,fsr2l
  4196  00008E  C009  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4197  000092  C008  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4198  000096  C007  FFD8         	movff	??_InterruptHandlerLow,status
  4199  00009A  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4200  00009C  0010               	retfie	
  4201  00009E                     __end_of_InterruptHandlerLow:
  4202                           	opt callstack 0
  4203                           
  4204 ;; *************** function _InterruptHandlerHigh *****************
  4205 ;; Defined at:
  4206 ;;		line 76 in file "main.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  throwaway       1    0        unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4220 ;;      Params:         0       0       0       0
  4221 ;;      Locals:         1       0       0       0
  4222 ;;      Temps:          2       0       0       0
  4223 ;;      Totals:         3       0       0       0
  4224 ;;Total ram usage:        3 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    1
  4227 ;; This function calls:
  4228 ;;		_processRFID
  4229 ;; This function is called by:
  4230 ;;		Interrupt level 2
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	intcode
  4235  000008                     __pintcode:
  4236                           	opt callstack 0
  4237  000008                     _InterruptHandlerHigh:
  4238                           	opt callstack 22
  4239                           
  4240                           ;incstack = 0
  4241  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4242  00000A  EFD4  F007         	goto	int_func
  4243                           
  4244                           	psect	intcode_body
  4245  000FA8                     __pintcode_body:
  4246                           	opt callstack 22
  4247  000FA8                     int_func:
  4248                           	opt callstack 22
  4249  000FA8  CFD9 F004          	movff	fsr2l,??_InterruptHandlerHigh
  4250  000FAC  CFDA F005          	movff	fsr2h,??_InterruptHandlerHigh+1
  4251                           
  4252                           ;main.c: 80:     if((PIR1bits.RCIF) && ((robot_mode == 1) || robot_mode==0))
  4253  000FB0  AA9E               	btfss	3998,5,c	;volatile
  4254  000FB2  D00E               	goto	i2l63
  4255  000FB4  043B               	decf	_robot_mode,w,c	;volatile
  4256  000FB6  B4D8               	btfsc	status,2,c
  4257  000FB8  D003               	goto	i2u139_40
  4258  000FBA  503B               	movf	_robot_mode,w,c	;volatile
  4259  000FBC  A4D8               	btfss	status,2,c
  4260  000FBE  D008               	goto	i2l63
  4261  000FC0                     i2u139_40:
  4262                           
  4263                           ;main.c: 81:     {;main.c: 83:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4264  000FC0  0E3C               	movlw	low _RFIDbuf
  4265  000FC2  6E01               	movwf	processRFID@RFIDbuf,c
  4266  000FC4  CFAE F002          	movff	4014,processRFID@latestChar	;volatile
  4267  000FC8  EC79  F007         	call	_processRFID	;wreg free
  4268  000FCC  6E48               	movwf	_RFID_flag,c	;volatile
  4269                           
  4270                           ;main.c: 84:     }
  4271  000FCE  D001               	goto	i2l67
  4272  000FD0                     i2l63:
  4273  000FD0  50AE               	movf	4014,w,c	;volatile
  4274  000FD2                     i2l67:
  4275  000FD2  C005  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4276  000FD6  C004  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4277  000FDA  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4278  000FDC  0011               	retfie		f
  4279  000FDE                     __end_of_InterruptHandlerHigh:
  4280                           	opt callstack 0
  4281                           
  4282 ;; *************** function _processRFID *****************
  4283 ;; Defined at:
  4284 ;;		line 34 in file "RFID.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  RFIDbuf         1    0[COMRAM] PTR volatile unsigned ch
  4287 ;;		 -> RFIDbuf(12), 
  4288 ;;  latestChar      1    1[COMRAM] unsigned char 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  i               1    2[COMRAM] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      unsigned char 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4300 ;;      Params:         2       0       0       0
  4301 ;;      Locals:         1       0       0       0
  4302 ;;      Temps:          0       0       0       0
  4303 ;;      Totals:         3       0       0       0
  4304 ;;Total ram usage:        3 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; This function calls:
  4307 ;;		Nothing
  4308 ;; This function is called by:
  4309 ;;		_InterruptHandlerHigh
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text31
  4314  000EF2                     __ptext31:
  4315                           	opt callstack 0
  4316  000EF2                     _processRFID:
  4317                           	opt callstack 22
  4318                           
  4319                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4320                           
  4321                           ;incstack = 0
  4322  000EF2  0E03               	movlw	3
  4323  000EF4  1802               	xorwf	processRFID@latestChar,w,c
  4324  000EF6  A4D8               	btfss	status,2,c
  4325  000EF8  D002               	goto	i2l1961
  4326                           
  4327                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4328  000EFA  0E01               	movlw	1
  4329  000EFC  0012               	return	
  4330  000EFE                     i2l1961:
  4331                           
  4332                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4333  000EFE  0E02               	movlw	2
  4334  000F00  1802               	xorwf	processRFID@latestChar,w,c
  4335  000F02  A4D8               	btfss	status,2,c
  4336  000F04  D010               	goto	i2l1981
  4337                           
  4338                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4339  000F06  0E00               	movlw	0
  4340  000F08  6E3A               	movwf	processRFID@position_in_buf,c
  4341                           
  4342                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4343  000F0A  0E00               	movlw	0
  4344  000F0C  6E03               	movwf	processRFID@i,c
  4345  000F0E                     i2l1969:
  4346                           
  4347                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4348  000F0E  5001               	movf	processRFID@RFIDbuf,w,c
  4349  000F10  2403               	addwf	processRFID@i,w,c
  4350  000F12  6ED9               	movwf	fsr2l,c
  4351  000F14  6ADA               	clrf	fsr2h,c
  4352  000F16  0E00               	movlw	0
  4353  000F18  6EDF               	movwf	indf2,c
  4354                           
  4355                           ;RFID.c: 56:            }
  4356  000F1A  2A03               	incf	processRFID@i,f,c
  4357  000F1C  0E0B               	movlw	11
  4358  000F1E  6403               	cpfsgt	processRFID@i,c
  4359  000F20  D7F6               	goto	i2l1969
  4360  000F22                     i2u119_40:
  4361                           
  4362                           ;RFID.c: 57:            return 0;
  4363  000F22  0E00               	movlw	0
  4364  000F24  0012               	return	
  4365  000F26                     i2l1981:
  4366                           
  4367                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4368  000F26  5001               	movf	processRFID@RFIDbuf,w,c
  4369  000F28  243A               	addwf	processRFID@position_in_buf,w,c
  4370  000F2A  6ED9               	movwf	fsr2l,c
  4371  000F2C  6ADA               	clrf	fsr2h,c
  4372  000F2E  C002  FFDF         	movff	processRFID@latestChar,indf2
  4373                           
  4374                           ;RFID.c: 63:             position_in_buf++;
  4375  000F32  2A3A               	incf	processRFID@position_in_buf,f,c
  4376  000F34  D7F6               	goto	i2u119_40
  4377  000F36                     __end_of_processRFID:
  4378                           	opt callstack 0
  4379                           
  4380                           	psect	rparam
  4381  0000                     
  4382                           	psect	temp
  4383  000049                     btemp:
  4384                           	opt callstack 0
  4385  000049                     	ds	1
  4386  0000                     int$flags	set	btemp
  4387  0000                     wtemp8	set	btemp+1
  4388  0000                     ttemp5	set	btemp+1
  4389  0000                     ttemp6	set	btemp+4
  4390  0000                     ttemp7	set	btemp+8
  4391                           tosu	equ	0xFFF
  4392                           tosh	equ	0xFFE
  4393                           tosl	equ	0xFFD
  4394                           stkptr	equ	0xFFC
  4395                           pclatu	equ	0xFFB
  4396                           pclath	equ	0xFFA
  4397                           pcl	equ	0xFF9
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           indf0	equ	0xFEF
  4405                           postinc0	equ	0xFEE
  4406                           postdec0	equ	0xFED
  4407                           preinc0	equ	0xFEC
  4408                           plusw0	equ	0xFEB
  4409                           fsr0h	equ	0xFEA
  4410                           fsr0l	equ	0xFE9
  4411                           wreg	equ	0xFE8
  4412                           indf1	equ	0xFE7
  4413                           postinc1	equ	0xFE6
  4414                           postdec1	equ	0xFE5
  4415                           preinc1	equ	0xFE4
  4416                           plusw1	equ	0xFE3
  4417                           fsr1h	equ	0xFE2
  4418                           fsr1l	equ	0xFE1
  4419                           bsr	equ	0xFE0
  4420                           indf2	equ	0xFDF
  4421                           postinc2	equ	0xFDE
  4422                           postdec2	equ	0xFDD
  4423                           preinc2	equ	0xFDC
  4424                           plusw2	equ	0xFDB
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    0
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      72
    BANK0           160     22      83
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@move	PTR struct Movements size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(1) Largest target is 1
		 -> RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@move	PTR struct Movements size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    scanForBeacon@exit_flag	PTR volatile unsigned char  size(1) Largest target is 1
		 -> RFID_flag(COMRAM[1]), 

    scanForBeacon@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@move	PTR struct Movements size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(1) Largest target is 16
		 -> STR_10(CODE[16]), STR_9(CODE[16]), STR_8(CODE[13]), STR_7(CODE[16]), 
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S370DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S370DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _check_RFID->_SetLine
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnLeft
    _turnLeft->_setMotorPWM
    _returnHome->_moveBackward
    _returnHome->_stop
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   55035
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    4917
                                             19 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                       9     4      5   15151
                                             42 COMRAM     9     4      5
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         3     2      1    3633
                                             18 COMRAM     3     2      1
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          23    22      1    4536
                                             18 COMRAM    23    22      1
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             17 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             17 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     155
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       11     5      6    7230
                                             42 COMRAM    11     5      6
                           _ClearLCD
                         _LCD_String
                      _classify_data
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     4      7   13301
                                             42 COMRAM    11     4      7
                           _ClearLCD
                         _LCD_String
                       _moveBackward
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 7     3      4    3169
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     7      6    7301
                                             42 COMRAM    13     7      6
                           _ClearLCD
                         _LCD_String
                      _classify_data
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     366
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           1     0      1    2082
                                             17 COMRAM     1     0      1
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             17 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             15 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             13 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    2     0      2    2958
                                             35 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          8     7      1    2344
                                             27 COMRAM     8     7      1
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     352
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             19 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  7     7      0       0
                                              6 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              3 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      53       5       51.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9B       3        0.0%
DATA                 0      0      9B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 10 08:44:02 2020

                           l55 0F76                   ___awdiv@sign 0019                             bsr 000FE0  
          ___wmul@multiplicand 0010                  ?_display_RFID 0013                    ?_LCD_String 0012  
                          l125 057A                            l326 06BA                            l356 0A40  
          display_RFID@dataBuf 0013                 moveToBeacon@mL 002B                 moveToBeacon@mR 002C  
      __size_of_stopAndDisplay 0082                            wreg 000FE8                   processRFID@i 0003  
                 __CFG_LVP$OFF 000000                           l2401 0DA0                           l2313 1020  
                         l2307 0554                           l2411 0DD6                           l2261 0B38  
                         l2317 1032                           l2255 0B28                           l2433 0D2C  
                         l2417 0E12                           l2505 0F48                           l2267 0B4E  
                         l2283 0B80                           l2451 0CB8                           l2427 0E48  
                         l2269 0B56                           l2293 103E                           l2445 0D64  
                         l2381 0E66                           l2287 0B8E                           l2279 0B76  
                         l2519 0EEE                           l2463 0CF0                           l2607 0ACA  
                         l2471 039E                           l2703 0BCA                           l2385 0E74  
                         l2713 0BDE                           l2721 0C16                           l2299 1058  
                         l2619 0AFE                           l2483 0402                           l2653 09A8  
                         l2637 0968                           l2493 04AE                           l2477 03D0  
                         l2655 09B0                           l2719 0C10                           l2751 091C  
                         l2743 08CE                           l2735 0886                           l2665 09DE  
                         l2649 099C                           l2681 0624                           l2593 0A5E  
                         l2569 09EA                           l2683 0652                           l2747 08F8  
                         l2739 08AA                           l2677 05F4                           l2687 0682  
                         STR_1 036F                           STR_2 0341                           STR_3 0331  
                         STR_4 038B                           STR_5 0351                           STR_6 0360  
                         STR_7 0321                           STR_8 037E                           STR_9 0311  
                         u2030 06AE                           u2060 0C0A                           _LATB 000F8A  
                         u2207 080A                           u2127 0A68                           u2217 081C  
                         u2137 0BE8                           u1530 0B5A                           u2307 1052  
                         u2227 0832                           u2147 1034                           u1605 05C2  
                         u2317 10FC                           u2237 0846                           u2157 07B6  
                         u2327 0FF6                           u2247 0858                           u2167 07CC  
                         u1800 0452                           u1720 0416                           u2337 1006  
                         u2257 0DCA                           u2177 07DC                           u1810 0460  
                         u1730 0420                           u2347 0C8A                           u2267 0E3C  
                         u2187 07EA                           u1820 0462                           u1740 0422  
                         u2357 111E                           u2277 0E9E                           u2197 07F8  
                         u1830 0470                           u1750 0430                           u1495 0FE8  
                         u2287 0CE4                           u1584 052A                           u1496 0FEA  
                         u1840 0472                           u1760 0432                           u1585 0526  
                         u2297 0D58                           u1594 056E                           u1850 048E  
                         u1770 0440                           u1930 0A8A                           u1595 056A  
                         u1860 0490                           u1780 0442                           u1790 0450  
                         u1960 0998                           u1880 0F70                           u1890 0EEA  
                         i1l72 005C                           i2l63 0FD0                           i2l67 0FD2  
                 _travel_moves 0060                           _main 0860                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0049  
                         _stop 0E5E                           prodh 000FF4                           prodl 000FF3  
                         start 009E                   ___param_bank 000000                __end_of_SendLCD 100E  
              __end_of_SetLine 103C                 ??_display_RFID 0014                          ?_main 0001  
          main@searching_speed 009D                __end_of___awdiv 0B98                          STR_10 0301  
                        ?_stop 0024                          _T0CON 000FD5                ___awdiv@divisor 0016  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0018  
                        _RCREG 000FAE                          _E_TOG 111A                          _SPBRG 000FAF  
                 ?_init_sensor 0001                __end_of_initPWM 10EC                          _setup 0F72  
             moveToBeacon@move 002F                          tablat 000FF5                          plusw2 000FDB  
           processRFID@RFIDbuf 0001                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          stop@i 0029                          status 000FD8  
                        wtemp8 004A            __size_of_LCD_String 002C               __end_of_ClearLCD 1106  
         moveForward@max_power 0026                 __CFG_MCLRE$OFF 000000                __initialization 1068  
                 __end_of_main 0926                   __end_of_stop 0EAE                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 0012                         ??_main 0038    moveToBeacon@beacon_location 0035  
                       ??_stop 0028                  __activetblptr 000001                         ?_E_TOG 0001  
                 ?_setMotorPWM 001C                   ?_moveForward 0024   scanForBeacon@beacon_location 0035  
             ___awdiv@dividend 0014                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i1l2191 007C                         i2l1961 0EFE  
                       i2l1981 0F26                         i2l1969 0F0E                         _LCDout 0C1A  
                  SendLCD@Byte 0011                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 0010                      ??_SendLCD 0011  
                    ??_SetLine 0012                  display_RFID@i 0014                         ___wmul 1092  
                    ??___awdiv 0018               __end_of_init_LCD 0860            init_motor_struct@mL 0024  
          init_motor_struct@mR 0025                         clear_0 106E                         clear_1 107A  
             ___awdiv@quotient 001A         __size_of_scanForBeacon 0084              moveToBeacon@speed 002D  
                    ??_initPWM 0010                 _stopAndDisplay 0B98                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0024                         stop@mR 0025                   ?_processRFID 0001  
            _init_motor_struct 06CE               __end_of_turnLeft 0DEC           __end_of_display_RFID 0F72  
           ?_init_motor_struct 0024                     __accesstop 0060        __end_of__initialization 1080  
                ___rparam_used 000001                    SetLine@line 0012                  __end_of_E_TOG 1128  
          ??_init_motor_struct 0026      moveToBeacon@error_counter 0036                 __pcstackCOMRAM 0001  
                __end_of_setup 0FA8                   ??_LCD_String 0013         __end_of_stopAndDisplay 0C1A  
                      ??_E_TOG 000E  __size_of_InterruptHandlerHigh 0FD6                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 009E      __end_of_init_motor_struct 0798          __end_of_classify_data 0EF2  
                   _check_RFID 0396           __size_of_init_sensor 0014                        ??_setup 0013  
                ?_moveBackward 0024                     __pbssBANK0 0060                        ?_LCDout 0001  
                _scanForBeacon 0A90             __size_of_init_RFID 001A             __end_of_LCD_String 1068  
           waitForInput@i_1392 001B                        ?___wmul 000E                  ?_moveToBeacon 002B  
                      _CAP1CON 000F63                ?_stopAndDisplay 002B                     ??_ClearLCD 0012  
                      _RFIDbuf 003C                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0028                 ?_scanForBeacon 002B           __size_of_setMotorPWM 0114  
         __size_of_moveForward 0074      stopAndDisplay@RFID_buffer 002F                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0029                  ?_waitForInput 0001  
           __size_of_turnRight 0072                        _SendLCD 0FDE                        __Hparam 0000  
                      _SetLine 100E                        __Lparam 0000                 ??_moveToBeacon 0031  
        processRFID@latestChar 0002                        ___awdiv 0B14                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 000E                        __pcinit 1068  
                      __ramtop 0300                      ?_turnLeft 0024                        __ptext0 0860  
                      __ptext1 09E2                        __ptext2 0B98                        __ptext3 0F36  
                      __ptext4 0396                        __ptext5 100E                        __ptext6 0F72  
                      __ptext7 1106                        __ptext8 10B8                        __ptext9 0798  
            __end_of_init_RFID 10D2               check_RFID@hexBuf 0016                        _initPWM 10D2  
         waitForInput@raw_data 0017                   LCDout@number 000F              scanForBeacon@move 002F  
   __size_of_init_motor_struct 00CA          __size_of_display_RFID 003C              stop@initial_speed 0026  
                  ?_check_RFID 0013                 __pintcode_body 0FA8           end_of_initialization 1080  
           setMotorPWM@PWMduty 0022                     ??_init_LCD 0012           __size_of_processRFID 0044  
               ??_waitForInput 0014                        int_func 0FA8                      _RFID_flag 0048  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          moveToBeacon@exit_flag 0030                     _robot_mode 003B  
                   _returnHome 05D2                   _display_RFID 0F36                     ??_turnLeft 0028  
                    _PORTDbits 000F83              __end_of_turnRight 0E5E                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
              ??_scanForBeacon 0031                  moveForward@mL 0024                  moveForward@mR 0025  
               __end_of_LCDout 0C92                      _TXSTAbits 000FAC                     main@motorL 00A1  
                   main@motorR 00AA           __end_of_moveBackward 0D06            __size_of_check_RFID 0128  
               __end_of___wmul 10B8                    _BAUDCONbits 000FAA          classify_data@filtered 0012  
          start_initialization 1068              __size_of_ClearLCD 001A           __end_of_moveToBeacon 09E2  
        classify_data@raw_data 000E                       ??_LCDout 000E          moveBackward@max_power 0026  
 __end_of_InterruptHandlerHigh 0FDE          classify_data@smoothed 0038               ??_stopAndDisplay 0030  
                     ??___wmul 0012                scanForBeacon@mL 002B                scanForBeacon@mR 002C  
           turnRight@max_power 0026                    ?_returnHome 002B           __end_of_waitForInput 0A90  
                  __pbssCOMRAM 0038                  ??_init_sensor 000E              turnLeft@max_power 0026  
                __pcstackBANK0 009D   __size_of_InterruptHandlerLow 0086              __size_of_init_LCD 00C8  
                     ?_SendLCD 0010                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 0014         __size_of_classify_data 0044             check_RFID@checksum 0027  
                  __pintcodelo 0018                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 000E                    __smallconst 0300                 __size_of_E_TOG 000E  
            __size_of_turnLeft 0072                  waitForInput@i 0019                      _init_RFID 10B8  
          stopAndDisplay@speed 002D                  ??_setMotorPWM 001D                  ??_moveForward 0028  
                 ??_check_RFID 0014                 __size_of_setup 0036                check_RFID@byte1 0022  
              check_RFID@byte2 0023                check_RFID@byte3 0024                check_RFID@byte4 0025  
              check_RFID@byte5 0026            __end_of_init_sensor 111A                 ___wmul@product 0012  
          __size_of_returnHome 00FC                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i1u142_20 0046          __size_of_moveBackward 0074                    turnRight@mL 0024  
                     i2u119_40 0F22                    turnRight@mR 0025                       i2u139_40 0FC0  
                     _PIR1bits 000F9E                       _RCONbits 000FD0           moveToBeacon@raw_data 0033  
           __end_of_check_RFID 04BE              ___wmul@multiplier 000E                   setMotorPWM@m 001C  
                 moveForward@i 0029               main@moving_speed 009F          __size_of_moveToBeacon 00BC  
         _InterruptHandlerHigh 0008                       _ClearLCD 10EC                     ?_init_RFID 0001  
                    _turnRight 0DEC                  ??_processRFID 0003                  _classify_data 0EAE  
       returnHome@search_speed 002F                    _INTCON2bits 000FF1         scanForBeacon@exit_flag 0030  
               moveBackward@mL 0024                 moveBackward@mR 0025                   _moveBackward 0C92  
          __end_of_setMotorPWM 05D2            __end_of_moveForward 0D7A                    check_RFID@i 0028  
                     __Hrparam 0000               __size_of_SendLCD 0030                       __Lrparam 0000  
             __size_of_SetLine 002E                   __Lsmallconst 0300          __size_of_waitForInput 00AE  
                 _moveToBeacon 0926               __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001  
             __size_of_initPWM 001A                    _init_sensor 1106                 ?_classify_data 000E  
            check_RFID@dataBuf 0013                     ?_turnRight 0024                       __ptext10 10D2  
                     __ptext11 0A90                       __ptext20 103C                       __ptext12 0D7A  
                     __ptext21 10EC                       __ptext13 05D2                       __ptext22 0FDE  
                     __ptext14 0DEC                       __ptext31 0EF2                       __ptext23 0C1A  
                     __ptext15 0E5E                       __ptext24 111A                       __ptext16 0C92  
                     __ptext25 06CE                       __ptext17 0926                       __ptext26 04BE  
                     __ptext18 0D06                       __ptext27 1092                       __ptext19 0EAE  
                     __ptext28 0B14          __end_of_scanForBeacon 0B14                       _init_LCD 0798  
                __size_of_main 00C6                  __size_of_stop 0050                     turnLeft@mL 0024  
                   turnLeft@mR 0025            __end_of_processRFID 0F36                   _waitForInput 09E2  
           scanForBeacon@speed 002D                     turnRight@i 0029                       int$flags 0049  
                 ??_returnHome 0032            _InterruptHandlerLow 0018                     _LCD_String 103C  
                     _turnLeft 0D7A          scanForBeacon@raw_data 0033                     _INTCONbits 000FF2  
                  ??_init_RFID 000E                    _setMotorPWM 04BE                    _moveForward 0D06  
                     intlevel1 0000                       intlevel2 0000           ?_InterruptHandlerLow 0001  
           __end_of_returnHome 06CE                      turnLeft@i 0029                     _OSCCONbits 000FD3  
   processRFID@position_in_buf 003A         ??_InterruptHandlerHigh 0004                ??_classify_data 0010  
             stopAndDisplay@mL 002B               stopAndDisplay@mR 002C           returnHome@move_speed 002D  
                  ??_turnRight 0028                    _processRFID 0EF2          ??_InterruptHandlerLow 0007  
              stopAndDisplay@i 0032                 returnHome@move 0031                   returnHome@mL 002B  
                 returnHome@mR 002C  
