

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 05 11:51:32 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 2.05
    44                           ; Generated 20/12/2018 GMT
    45                           ; 
    46                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4331 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     _CAP1BUFL	set	3944
    78  0000                     _CAP1BUFH	set	3945
    79  0000                     _CAP1CON	set	3939
    80  0000                     _DFLTCON	set	3936
    81  0000                     _ANSEL1	set	4025
    82  0000                     _ANSEL0	set	4024
    83  0000                     _T5CON	set	4023
    84  0000                     _IPR1bits	set	3999
    85  0000                     _PIE1bits	set	3997
    86  0000                     _RCSTAbits	set	4011
    87  0000                     _TXSTAbits	set	4012
    88  0000                     _BAUDCONbits	set	4010
    89  0000                     _SPBRGH	set	4016
    90  0000                     _SPBRG	set	4015
    91  0000                     _TRISAbits	set	3986
    92  0000                     _TRISCbits	set	3988
    93  0000                     _LATDbits	set	3980
    94  0000                     _LATCbits	set	3979
    95  0000                     _LATAbits	set	3977
    96  0000                     _LATB	set	3978
    97  0000                     _PTPERH	set	3962
    98  0000                     _PTPERL	set	3963
    99  0000                     _PWMCON1	set	3950
   100  0000                     _PWMCON0	set	3951
   101  0000                     _PTCON1	set	3966
   102  0000                     _PTCON0	set	3967
   103  0000                     _PORTDbits	set	3971
   104  0000                     _RCREG	set	4014
   105  0000                     _PIR1bits	set	3998
   106  0000                     _TRISDbits	set	3989
   107  0000                     _TRISBbits	set	3987
   108  0000                     _RCONbits	set	4048
   109  0000                     _INTCONbits	set	4082
   110  0000                     _OSCCONbits	set	4051
   111  0000                     _OSCCON	set	4051
   112  0000                     _PDC1H	set	3958
   113  0000                     _PDC1L	set	3959
   114  0000                     _PDC0H	set	3960
   115  0000                     _PDC0L	set	3961
   116                           
   117                           	psect	smallconst
   118  000300                     __psmallconst:
   119                           	opt callstack 0
   120  000300  00                 	db	0
   121  000301                     STR_4:
   122  000301  43                 	db	67	;'C'
   123  000302  48                 	db	72	;'H'
   124  000303  45                 	db	69	;'E'
   125  000304  43                 	db	67	;'C'
   126  000305  4B                 	db	75	;'K'
   127  000306  53                 	db	83	;'S'
   128  000307  55                 	db	85	;'U'
   129  000308  4D                 	db	77	;'M'
   130  000309  20                 	db	32
   131  00030A  46                 	db	70	;'F'
   132  00030B  41                 	db	65	;'A'
   133  00030C  49                 	db	73	;'I'
   134  00030D  4C                 	db	76	;'L'
   135  00030E  45                 	db	69	;'E'
   136  00030F  44                 	db	68	;'D'
   137  000310  00                 	db	0
   138  000311                     STR_3:
   139  000311  43                 	db	67	;'C'
   140  000312  48                 	db	72	;'H'
   141  000313  45                 	db	69	;'E'
   142  000314  43                 	db	67	;'C'
   143  000315  4B                 	db	75	;'K'
   144  000316  53                 	db	83	;'S'
   145  000317  55                 	db	85	;'U'
   146  000318  4D                 	db	77	;'M'
   147  000319  20                 	db	32
   148  00031A  50                 	db	80	;'P'
   149  00031B  41                 	db	65	;'A'
   150  00031C  53                 	db	83	;'S'
   151  00031D  53                 	db	83	;'S'
   152  00031E  45                 	db	69	;'E'
   153  00031F  44                 	db	68	;'D'
   154  000320  00                 	db	0
   155  000321                     STR_1:
   156  000321  52                 	db	82	;'R'
   157  000322  45                 	db	69	;'E'
   158  000323  53                 	db	83	;'S'
   159  000324  45                 	db	69	;'E'
   160  000325  54                 	db	84	;'T'
   161  000326  54                 	db	84	;'T'
   162  000327  49                 	db	73	;'I'
   163  000328  4E                 	db	78	;'N'
   164  000329  47                 	db	71	;'G'
   165  00032A  20                 	db	32
   166  00032B  52                 	db	82	;'R'
   167  00032C  4F                 	db	79	;'O'
   168  00032D  42                 	db	66	;'B'
   169  00032E  4F                 	db	79	;'O'
   170  00032F  54                 	db	84	;'T'
   171  000330  00                 	db	0
   172  000331                     STR_2:
   173  000331  43                 	db	67	;'C'
   174  000332  72                 	db	114	;'r'
   175  000333  69                 	db	105	;'i'
   176  000334  74                 	db	116	;'t'
   177  000335  69                 	db	105	;'i'
   178  000336  63                 	db	99	;'c'
   179  000337  61                 	db	97	;'a'
   180  000338  6C                 	db	108	;'l'
   181  000339  20                 	db	32
   182  00033A  45                 	db	69	;'E'
   183  00033B  72                 	db	114	;'r'
   184  00033C  72                 	db	114	;'r'
   185  00033D  6F                 	db	111	;'o'
   186  00033E  72                 	db	114	;'r'
   187  00033F  00                 	db	0
   188                           
   189                           ; #config settings
   190  000340  00                 	db	0	; dummy byte at the end
   191  0000                     
   192                           	psect	cinit
   193  000DEC                     __pcinit:
   194                           	opt callstack 0
   195  000DEC                     start_initialization:
   196                           	opt callstack 0
   197  000DEC                     __initialization:
   198                           	opt callstack 0
   199                           
   200                           ; Clear objects allocated to BANK0 (12 bytes)
   201  000DEC  EE00  F07C         	lfsr	0,__pbssBANK0
   202  000DF0  0E0C               	movlw	12
   203  000DF2                     clear_0:
   204  000DF2  6AEE               	clrf	postinc0,c
   205  000DF4  06E8               	decf	wreg,f,c
   206  000DF6  E1FD               	bnz	clear_0
   207                           
   208                           ; Clear objects allocated to COMRAM (3 bytes)
   209  000DF8  6A3C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   210  000DFA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   211  000DFC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   212  000DFE                     end_of_initialization:
   213                           	opt callstack 0
   214  000DFE                     __end_of__initialization:
   215                           	opt callstack 0
   216  000DFE  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   217  000E00  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   218  000E02  0E00               	movlw	low (__Lsmallconst shr (0+16))
   219  000E04  6EF8               	movwf	tblptru,c
   220  000E06  0E03               	movlw	high __Lsmallconst
   221  000E08  6EF7               	movwf	tblptrh,c
   222  000E0A  0100               	movlb	0
   223  000E0C  EFA1  F001         	goto	_main	;jump to C main() function
   224                           
   225                           	psect	bssCOMRAM
   226  00003A                     __pbssCOMRAM:
   227                           	opt callstack 0
   228  00003A                     processRFID@position_in_buf:
   229                           	opt callstack 0
   230  00003A                     	ds	1
   231  00003B                     _robot_mode:
   232                           	opt callstack 0
   233  00003B                     	ds	1
   234  00003C                     _RFID_flag:
   235                           	opt callstack 0
   236  00003C                     	ds	1
   237                           
   238                           	psect	bssBANK0
   239  00007C                     __pbssBANK0:
   240                           	opt callstack 0
   241  00007C                     _RFIDbuf:
   242                           	opt callstack 0
   243  00007C                     	ds	12
   244                           
   245                           	psect	cstackBANK0
   246  000060                     __pcstackBANK0:
   247                           	opt callstack 0
   248  000060                     main@searching_speed:
   249                           	opt callstack 0
   250                           
   251                           ; 2 bytes @ 0x0
   252  000060                     	ds	2
   253  000062                     main@i:
   254                           	opt callstack 0
   255                           
   256                           ; 2 bytes @ 0x2
   257  000062                     	ds	2
   258  000064                     main@movementMicros:
   259                           	opt callstack 0
   260                           
   261                           ; 4 bytes @ 0x4
   262  000064                     	ds	4
   263  000068                     main@moving_speed:
   264                           	opt callstack 0
   265                           
   266                           ; 2 bytes @ 0x8
   267  000068                     	ds	2
   268  00006A                     main@motorL:
   269                           	opt callstack 0
   270                           
   271                           ; 9 bytes @ 0xA
   272  00006A                     	ds	9
   273  000073                     main@motorR:
   274                           	opt callstack 0
   275                           
   276                           ; 9 bytes @ 0x13
   277  000073                     	ds	9
   278                           
   279                           	psect	cstackCOMRAM
   280  000001                     __pcstackCOMRAM:
   281                           	opt callstack 0
   282  000001                     processRFID@RFIDbuf:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x0
   286  000001                     	ds	2
   287  000003                     processRFID@latestChar:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0x2
   291  000003                     	ds	1
   292  000004                     processRFID@i:
   293                           	opt callstack 0
   294                           
   295                           ; 1 bytes @ 0x3
   296  000004                     	ds	1
   297  000005                     ??_InterruptHandlerHigh:
   298                           
   299                           ; 1 bytes @ 0x4
   300  000005                     	ds	3
   301  000008                     ??_LCDout:
   302  000008                     ?___wmul:
   303                           	opt callstack 0
   304  000008                     initPWM@PWMperiod:
   305                           	opt callstack 0
   306  000008                     classify_data@raw_data:
   307                           	opt callstack 0
   308  000008                     ___wmul@multiplier:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0x7
   312  000008                     	ds	1
   313  000009                     LCDout@number:
   314                           	opt callstack 0
   315                           
   316                           ; 1 bytes @ 0x8
   317  000009                     	ds	1
   318  00000A                     SendLCD@type:
   319                           	opt callstack 0
   320  00000A                     ___wmul@multiplicand:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x9
   324  00000A                     	ds	1
   325  00000B                     SendLCD@Byte:
   326                           	opt callstack 0
   327                           
   328                           ; 1 bytes @ 0xA
   329  00000B                     	ds	1
   330  00000C                     ??_init_LCD:
   331  00000C                     ??_ClearLCD:
   332  00000C                     SetLine@line:
   333                           	opt callstack 0
   334  00000C                     LCD_String@string:
   335                           	opt callstack 0
   336  00000C                     ___wmul@product:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0xB
   340  00000C                     	ds	1
   341  00000D                     display_RFID@dataBuf:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0xC
   345  00000D                     	ds	1
   346  00000E                     ?___awdiv:
   347                           	opt callstack 0
   348  00000E                     check_RFID@dataBuf:
   349                           	opt callstack 0
   350  00000E                     ___awdiv@dividend:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0xD
   354  00000E                     	ds	1
   355  00000F                     display_RFID@i:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0xE
   359  00000F                     	ds	1
   360  000010                     ??_check_RFID:
   361  000010                     ___awdiv@divisor:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0xF
   365  000010                     	ds	2
   366  000012                     ___awdiv@counter:
   367                           	opt callstack 0
   368  000012                     check_RFID@hexBuf:
   369                           	opt callstack 0
   370                           
   371                           ; 12 bytes @ 0x11
   372  000012                     	ds	1
   373  000013                     ___awdiv@sign:
   374                           	opt callstack 0
   375                           
   376                           ; 1 bytes @ 0x12
   377  000013                     	ds	1
   378  000014                     ___awdiv@quotient:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x13
   382  000014                     	ds	2
   383  000016                     setMotorPWM@m:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x15
   387  000016                     	ds	2
   388  000018                     ??_setMotorPWM:
   389                           
   390                           ; 1 bytes @ 0x17
   391  000018                     	ds	5
   392  00001D                     setMotorPWM@PWMduty:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x1C
   396  00001D                     	ds	1
   397  00001E                     check_RFID@byte1:
   398                           	opt callstack 0
   399                           
   400                           ; 1 bytes @ 0x1D
   401  00001E                     	ds	1
   402  00001F                     check_RFID@byte2:
   403                           	opt callstack 0
   404  00001F                     stop@mL:
   405                           	opt callstack 0
   406  00001F                     turnRight@mL:
   407                           	opt callstack 0
   408  00001F                     moveForward@mL:
   409                           	opt callstack 0
   410  00001F                     moveBackward@mL:
   411                           	opt callstack 0
   412  00001F                     init_motor_struct@mL:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x1E
   416  00001F                     	ds	1
   417  000020                     check_RFID@byte3:
   418                           	opt callstack 0
   419                           
   420                           ; 1 bytes @ 0x1F
   421  000020                     	ds	1
   422  000021                     check_RFID@byte4:
   423                           	opt callstack 0
   424  000021                     stop@mR:
   425                           	opt callstack 0
   426  000021                     turnRight@mR:
   427                           	opt callstack 0
   428  000021                     moveForward@mR:
   429                           	opt callstack 0
   430  000021                     moveBackward@mR:
   431                           	opt callstack 0
   432  000021                     init_motor_struct@mR:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x20
   436  000021                     	ds	1
   437  000022                     check_RFID@byte5:
   438                           	opt callstack 0
   439                           
   440                           ; 1 bytes @ 0x21
   441  000022                     	ds	1
   442  000023                     check_RFID@checksum:
   443                           	opt callstack 0
   444  000023                     stop@initial_speed:
   445                           	opt callstack 0
   446  000023                     turnRight@max_power:
   447                           	opt callstack 0
   448  000023                     moveForward@max_power:
   449                           	opt callstack 0
   450  000023                     moveBackward@max_power:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x22
   454  000023                     	ds	1
   455  000024                     check_RFID@i:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x23
   459  000024                     	ds	1
   460  000025                     ??_turnRight:
   461  000025                     ??_moveForward:
   462  000025                     ??_moveBackward:
   463  000025                     stop@i:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x24
   467  000025                     	ds	1
   468  000026                     turnRight@i:
   469                           	opt callstack 0
   470  000026                     moveForward@i:
   471                           	opt callstack 0
   472  000026                     moveBackward@i:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0x25
   476  000026                     	ds	2
   477  000028                     scanForBeacon@mL:
   478                           	opt callstack 0
   479  000028                     moveToBeacon@mL:
   480                           	opt callstack 0
   481  000028                     returnHome@mL:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x27
   485  000028                     	ds	2
   486  00002A                     scanForBeacon@mR:
   487                           	opt callstack 0
   488  00002A                     moveToBeacon@mR:
   489                           	opt callstack 0
   490  00002A                     returnHome@mR:
   491                           	opt callstack 0
   492                           
   493                           ; 2 bytes @ 0x29
   494  00002A                     	ds	2
   495  00002C                     scanForBeacon@speed:
   496                           	opt callstack 0
   497  00002C                     moveToBeacon@speed:
   498                           	opt callstack 0
   499  00002C                     returnHome@speed:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x2B
   503  00002C                     	ds	2
   504  00002E                     ??_scanForBeacon:
   505  00002E                     moveToBeacon@micros:
   506                           	opt callstack 0
   507  00002E                     returnHome@micros:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x2D
   511  00002E                     	ds	2
   512  000030                     scanForBeacon@raw_data:
   513                           	opt callstack 0
   514  000030                     moveToBeacon@RFID_buffer:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x2F
   518  000030                     	ds	2
   519  000032                     scanForBeacon@beacon_location:
   520                           	opt callstack 0
   521  000032                     moveToBeacon@exit_flag:
   522                           	opt callstack 0
   523                           
   524                           ; 2 bytes @ 0x31
   525  000032                     	ds	2
   526  000034                     returnHome@i:
   527                           	opt callstack 0
   528                           
   529                           ; 4 bytes @ 0x33
   530  000034                     	ds	4
   531  000038                     ??_main:
   532                           
   533                           ; 1 bytes @ 0x37
   534  000038                     	ds	2
   535                           
   536 ;;
   537 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   538 ;;
   539 ;; *************** function _main *****************
   540 ;; Defined at:
   541 ;;		line 78 in file "main.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  i               2    2[BANK0 ] int 
   546 ;;  motorR          9   19[BANK0 ] struct DC_motor
   547 ;;  motorL          9   10[BANK0 ] struct DC_motor
   548 ;;  movementMicr    4    4[BANK0 ] unsigned long 
   549 ;;  moving_speed    2    8[BANK0 ] int 
   550 ;;  searching_sp    2    0[BANK0 ] int 
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   560 ;;      Params:         0       0       0       0
   561 ;;      Locals:         0      28       0       0
   562 ;;      Temps:          2       0       0       0
   563 ;;      Totals:         2      28       0       0
   564 ;;Total ram usage:       30 bytes
   565 ;; Hardware stack levels required when called:    8
   566 ;; This function calls:
   567 ;;		_ClearLCD
   568 ;;		_LCD_String
   569 ;;		_init_motor_struct
   570 ;;		_moveToBeacon
   571 ;;		_returnHome
   572 ;;		_scanForBeacon
   573 ;;		_setup
   574 ;;		_stop
   575 ;; This function is called by:
   576 ;;		Startup code after reset
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text0
   581  000342                     __ptext0:
   582                           	opt callstack 0
   583  000342                     _main:
   584                           	opt callstack 23
   585                           
   586                           ;main.c: 81:   setup();
   587                           
   588                           ;incstack = 0
   589  000342  ECB5  F006         	call	_setup	;wreg free
   590                           
   591                           ;main.c: 84:   struct DC_motor motorL, motorR;;main.c: 85:   init_motor_struct(&motorL, 
      +                          &motorR);
   592  000346  0E6A               	movlw	low main@motorL
   593  000348  6E1F               	movwf	init_motor_struct@mL,c
   594  00034A  0E00               	movlw	high main@motorL
   595  00034C  6E20               	movwf	init_motor_struct@mL+1,c
   596  00034E  0E73               	movlw	low main@motorR
   597  000350  6E21               	movwf	init_motor_struct@mR,c
   598  000352  0E00               	movlw	high main@motorR
   599  000354  6E22               	movwf	init_motor_struct@mR+1,c
   600  000356  EC89  F003         	call	_init_motor_struct	;wreg free
   601                           
   602                           ;main.c: 88:   int searching_speed = 50;
   603  00035A  0E00               	movlw	0
   604  00035C  0100               	movlb	0	; () banked
   605  00035E  6F61               	movwf	(main@searching_speed+1)& (0+255),b
   606  000360  0E32               	movlw	50
   607  000362  6F60               	movwf	main@searching_speed& (0+255),b
   608                           
   609                           ; BSR set to: 0
   610                           ;main.c: 89:   int moving_speed = 75;
   611  000364  0E00               	movlw	0
   612  000366  6F69               	movwf	(main@moving_speed+1)& (0+255),b
   613  000368  0E4B               	movlw	75
   614  00036A  6F68               	movwf	main@moving_speed& (0+255),b
   615                           
   616                           ; BSR set to: 0
   617                           ;main.c: 91:   unsigned long movementMicros=0;
   618  00036C  0E00               	movlw	0
   619  00036E  6F64               	movwf	main@movementMicros& (0+255),b
   620  000370  0E00               	movlw	0
   621  000372  6F65               	movwf	(main@movementMicros+1)& (0+255),b
   622  000374  0E00               	movlw	0
   623  000376  6F66               	movwf	(main@movementMicros+2)& (0+255),b
   624  000378  0E00               	movlw	0
   625  00037A  6F67               	movwf	(main@movementMicros+3)& (0+255),b
   626  00037C                     l2216:
   627                           
   628                           ;main.c: 95:   {;main.c: 97:       if(robot_mode == 0)
   629  00037C  503B               	movf	_robot_mode,w,c	;volatile
   630  00037E  A4D8               	btfss	status,2,c
   631  000380  D00F               	goto	l2220
   632                           
   633                           ;main.c: 98:       {;main.c: 99:           robot_mode = scanForBeacon(&motorL, &motorR, 
      +                          searching_speed);
   634  000382  0E6A               	movlw	low main@motorL
   635  000384  6E28               	movwf	scanForBeacon@mL,c
   636  000386  0E00               	movlw	high main@motorL
   637  000388  6E29               	movwf	scanForBeacon@mL+1,c
   638  00038A  0E73               	movlw	low main@motorR
   639  00038C  6E2A               	movwf	scanForBeacon@mR,c
   640  00038E  0E00               	movlw	high main@motorR
   641  000390  6E2B               	movwf	scanForBeacon@mR+1,c
   642  000392  C060  F02C         	movff	main@searching_speed,scanForBeacon@speed
   643  000396  C061  F02D         	movff	main@searching_speed+1,scanForBeacon@speed+1
   644  00039A  EC3D  F006         	call	_scanForBeacon	;wreg free
   645  00039E  D034               	goto	L2
   646  0003A0                     l2220:
   647  0003A0  043B               	decf	_robot_mode,w,c	;volatile
   648  0003A2  A4D8               	btfss	status,2,c
   649  0003A4  D01B               	goto	l2224
   650                           
   651                           ;main.c: 104:       {;main.c: 105:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   652  0003A6  0E6A               	movlw	low main@motorL
   653  0003A8  6E28               	movwf	moveToBeacon@mL,c
   654  0003AA  0E00               	movlw	high main@motorL
   655  0003AC  6E29               	movwf	moveToBeacon@mL+1,c
   656  0003AE  0E73               	movlw	low main@motorR
   657  0003B0  6E2A               	movwf	moveToBeacon@mR,c
   658  0003B2  0E00               	movlw	high main@motorR
   659  0003B4  6E2B               	movwf	moveToBeacon@mR+1,c
   660  0003B6  C068  F02C         	movff	main@moving_speed,moveToBeacon@speed
   661  0003BA  C069  F02D         	movff	main@moving_speed+1,moveToBeacon@speed+1
   662  0003BE  0E64               	movlw	low main@movementMicros
   663  0003C0  6E2E               	movwf	moveToBeacon@micros,c
   664  0003C2  0E00               	movlw	high main@movementMicros
   665  0003C4  6E2F               	movwf	moveToBeacon@micros+1,c
   666  0003C6  0E7C               	movlw	low _RFIDbuf
   667  0003C8  6E30               	movwf	moveToBeacon@RFID_buffer,c
   668  0003CA  0E00               	movlw	high _RFIDbuf
   669  0003CC  6E31               	movwf	moveToBeacon@RFID_buffer+1,c
   670  0003CE  0E3C               	movlw	low _RFID_flag
   671  0003D0  6E32               	movwf	moveToBeacon@exit_flag,c
   672  0003D2  0E00               	movlw	high _RFID_flag
   673  0003D4  6E33               	movwf	moveToBeacon@exit_flag+1,c
   674  0003D6  ECC3  F005         	call	_moveToBeacon	;wreg free
   675  0003DA  D016               	goto	L2
   676  0003DC                     l2224:
   677  0003DC  0E02               	movlw	2
   678  0003DE  183B               	xorwf	_robot_mode,w,c	;volatile
   679  0003E0  A4D8               	btfss	status,2,c
   680  0003E2  D014               	goto	l2228
   681                           
   682                           ;main.c: 111:       {;main.c: 112:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   683  0003E4  0E6A               	movlw	low main@motorL
   684  0003E6  6E28               	movwf	returnHome@mL,c
   685  0003E8  0E00               	movlw	high main@motorL
   686  0003EA  6E29               	movwf	returnHome@mL+1,c
   687  0003EC  0E73               	movlw	low main@motorR
   688  0003EE  6E2A               	movwf	returnHome@mR,c
   689  0003F0  0E00               	movlw	high main@motorR
   690  0003F2  6E2B               	movwf	returnHome@mR+1,c
   691  0003F4  C068  F02C         	movff	main@moving_speed,returnHome@speed
   692  0003F8  C069  F02D         	movff	main@moving_speed+1,returnHome@speed+1
   693  0003FC  0E64               	movlw	low main@movementMicros
   694  0003FE  6E2E               	movwf	returnHome@micros,c
   695  000400  0E00               	movlw	high main@movementMicros
   696  000402  6E2F               	movwf	returnHome@micros+1,c
   697  000404  EC95  F005         	call	_returnHome	;wreg free
   698  000408                     L2:
   699  000408  6E3B               	movwf	_robot_mode,c	;volatile
   700                           
   701                           ;main.c: 114:       }
   702  00040A  D7B8               	goto	l2216
   703  00040C                     l2228:
   704  00040C  0E03               	movlw	3
   705  00040E  183B               	xorwf	_robot_mode,w,c	;volatile
   706  000410  A4D8               	btfss	status,2,c
   707  000412  D03E               	goto	l2254
   708                           
   709                           ;main.c: 118:       {;main.c: 119:           stop(&motorL, &motorR,moving_speed);
   710  000414  0E6A               	movlw	low main@motorL
   711  000416  6E1F               	movwf	stop@mL,c
   712  000418  0E00               	movlw	high main@motorL
   713  00041A  6E20               	movwf	stop@mL+1,c
   714  00041C  0E73               	movlw	low main@motorR
   715  00041E  6E21               	movwf	stop@mR,c
   716  000420  0E00               	movlw	high main@motorR
   717  000422  6E22               	movwf	stop@mR+1,c
   718  000424  C068  F023         	movff	main@moving_speed,stop@initial_speed
   719  000428  C069  F024         	movff	main@moving_speed+1,stop@initial_speed+1
   720  00042C  ECF0  F005         	call	_stop	;wreg free
   721                           
   722                           ;main.c: 121:           while(robot_mode == 3)
   723  000430  D02A               	goto	u1620
   724  000432                     l2232:
   725                           
   726                           ;main.c: 124:               {;main.c: 125:                   ClearLCD();
   727  000432  EC22  F007         	call	_ClearLCD	;wreg free
   728                           
   729                           ;main.c: 126:                   LCD_String("RESETTING ROBOT");
   730  000436  0E21               	movlw	low STR_1
   731  000438  6E0C               	movwf	LCD_String@string,c
   732  00043A  0E03               	movlw	high STR_1
   733  00043C  6E0D               	movwf	LCD_String@string+1,c
   734  00043E  EC82  F006         	call	_LCD_String	;wreg free
   735                           
   736                           ;main.c: 127:                   for(int i=0; i<10;i++)
   737  000442  0E00               	movlw	0
   738  000444  0100               	movlb	0	; () banked
   739  000446  6F63               	movwf	(main@i+1)& (0+255),b
   740  000448  0E00               	movlw	0
   741  00044A  6F62               	movwf	main@i& (0+255),b
   742  00044C                     l2242:
   743                           
   744                           ; BSR set to: 0
   745                           ;main.c: 128:                   {;main.c: 129:                       _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
   746  00044C  0E02               	movlw	2
   747  00044E  6E39               	movwf	(??_main+1)& (0+255),c
   748  000450  0E04               	movlw	4
   749  000452  6E38               	movwf	??_main& (0+255),c
   750  000454  0EBA               	movlw	186
   751  000456                     u1647:
   752  000456  2EE8               	decfsz	wreg,f,c
   753  000458  D7FE               	bra	u1647
   754  00045A  2E38               	decfsz	??_main& (0+255),f,c
   755  00045C  D7FC               	bra	u1647
   756  00045E  2E39               	decfsz	(??_main+1)& (0+255),f,c
   757  000460  D7FA               	bra	u1647
   758  000462  D000               	nop2	
   759                           
   760                           ;main.c: 130:                   }
   761  000464  0100               	movlb	0	; () banked
   762  000466  4B62               	infsnz	main@i& (0+255),f,b
   763  000468  2B63               	incf	(main@i+1)& (0+255),f,b
   764  00046A  BF63               	btfsc	(main@i+1)& (0+255),7,b
   765  00046C  D7EF               	goto	l2242
   766  00046E  5163               	movf	(main@i+1)& (0+255),w,b
   767  000470  E104               	bnz	u1610
   768  000472  0E0A               	movlw	10
   769  000474  5D62               	subwf	main@i& (0+255),w,b
   770  000476  A0D8               	btfss	status,0,c
   771  000478  D7E9               	goto	l2242
   772  00047A                     u1610:
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 131:                   ClearLCD();
   776  00047A  EC22  F007         	call	_ClearLCD	;wreg free
   777                           
   778                           ;main.c: 132:                   robot_mode = 0;
   779  00047E  0E00               	movlw	0
   780  000480  6E3B               	movwf	_robot_mode,c	;volatile
   781  000482                     l2250:
   782                           
   783                           ;main.c: 123:               while(PORTDbits.RD2 == 1)
   784  000482  B483               	btfsc	3971,2,c	;volatile
   785  000484  D7D6               	goto	l2232
   786  000486                     u1620:
   787                           
   788                           ;main.c: 121:           while(robot_mode == 3)
   789  000486  0E03               	movlw	3
   790  000488  183B               	xorwf	_robot_mode,w,c	;volatile
   791  00048A  A4D8               	btfss	status,2,c
   792  00048C  D777               	goto	l2216
   793  00048E  D7F9               	goto	l2250
   794  000490                     l2254:
   795                           
   796                           ;main.c: 138:       {;main.c: 139:           LCD_String("Critical Error");
   797  000490  0E31               	movlw	low STR_2
   798  000492  6E0C               	movwf	LCD_String@string,c
   799  000494  0E03               	movlw	high STR_2
   800  000496  6E0D               	movwf	LCD_String@string+1,c
   801  000498  EC82  F006         	call	_LCD_String	;wreg free
   802  00049C  D76F               	goto	l2216
   803  00049E                     __end_of_main:
   804                           	opt callstack 0
   805                           
   806 ;; *************** function _stop *****************
   807 ;; Defined at:
   808 ;;		line 40 in file "dc_motor.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   811 ;;		 -> main@motorL(9), 
   812 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   813 ;;		 -> main@motorR(9), 
   814 ;;  initial_spee    2   34[COMRAM] int 
   815 ;; Auto vars:     Size  Location     Type
   816 ;;  i               2   36[COMRAM] int 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   826 ;;      Params:         6       0       0       0
   827 ;;      Locals:         2       0       0       0
   828 ;;      Temps:          0       0       0       0
   829 ;;      Totals:         8       0       0       0
   830 ;;Total ram usage:        8 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    4
   833 ;; This function calls:
   834 ;;		_setMotorPWM
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text1
   841  000BE0                     __ptext1:
   842                           	opt callstack 0
   843  000BE0                     _stop:
   844                           	opt callstack 26
   845                           
   846                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
   847                           
   848                           ;incstack = 0
   849  000BE0  C023  F025         	movff	stop@initial_speed,stop@i
   850  000BE4  C024  F026         	movff	stop@initial_speed+1,stop@i+1
   851  000BE8                     l2192:
   852  000BE8  BE26               	btfsc	stop@i+1,7,c
   853  000BEA  0012               	return	
   854  000BEC  5026               	movf	stop@i+1,w,c
   855  000BEE  E103               	bnz	l2196
   856  000BF0  0425               	decf	stop@i,w,c
   857  000BF2  A0D8               	btfss	status,0,c
   858  000BF4  0012               	return	
   859  000BF6                     l2196:
   860                           
   861                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
   862  000BF6  C01F  FFD9         	movff	stop@mL,fsr2l
   863  000BFA  C020  FFDA         	movff	stop@mL+1,fsr2h
   864  000BFE  C025  FFDF         	movff	stop@i,indf2
   865                           
   866                           ;dc_motor.c: 45:         mR->power = i;
   867  000C02  C021  FFD9         	movff	stop@mR,fsr2l
   868  000C06  C022  FFDA         	movff	stop@mR+1,fsr2h
   869  000C0A  C025  FFDF         	movff	stop@i,indf2
   870                           
   871                           ;dc_motor.c: 46:         setMotorPWM(mL);
   872  000C0E  C01F  F016         	movff	stop@mL,setMotorPWM@m
   873  000C12  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
   874  000C16  ECF7  F002         	call	_setMotorPWM	;wreg free
   875                           
   876                           ;dc_motor.c: 47:         setMotorPWM(mR);
   877  000C1A  C021  F016         	movff	stop@mR,setMotorPWM@m
   878  000C1E  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
   879  000C22  ECF7  F002         	call	_setMotorPWM	;wreg free
   880                           
   881                           ;dc_motor.c: 48:     }
   882  000C26  0625               	decf	stop@i,f,c
   883  000C28  A0D8               	btfss	status,0,c
   884  000C2A  0626               	decf	stop@i+1,f,c
   885  000C2C  D7DD               	goto	l2192
   886  000C2E                     __end_of_stop:
   887                           	opt callstack 0
   888                           
   889 ;; *************** function _setup *****************
   890 ;; Defined at:
   891 ;;		line 39 in file "main.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;		None
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   905 ;;      Params:         0       0       0       0
   906 ;;      Locals:         0       0       0       0
   907 ;;      Temps:          0       0       0       0
   908 ;;      Totals:         0       0       0       0
   909 ;;Total ram usage:        0 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    6
   912 ;; This function calls:
   913 ;;		_initPWM
   914 ;;		_init_LCD
   915 ;;		_init_RFID
   916 ;;		_init_sensor
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text2
   923  000D6A                     __ptext2:
   924                           	opt callstack 0
   925  000D6A                     _setup:
   926                           	opt callstack 24
   927                           
   928                           ;main.c: 42:     OSCCON = 0x72;
   929                           
   930                           ;incstack = 0
   931  000D6A  0E72               	movlw	114
   932  000D6C  6ED3               	movwf	4051,c	;volatile
   933  000D6E                     l53:
   934  000D6E  A4D3               	btfss	4051,2,c	;volatile
   935  000D70  D7FE               	goto	l53
   936                           
   937                           ;main.c: 44:     INTCONbits.GIEH = 1;
   938  000D72  8EF2               	bsf	4082,7,c	;volatile
   939                           
   940                           ;main.c: 45:     INTCONbits.GIEL = 1;
   941  000D74  8CF2               	bsf	4082,6,c	;volatile
   942                           
   943                           ;main.c: 46:     RCONbits.IPEN=1;
   944  000D76  8ED0               	bsf	4048,7,c	;volatile
   945                           
   946                           ;main.c: 49:     init_LCD();
   947  000D78  ECFE  F003         	call	_init_LCD	;wreg free
   948                           
   949                           ;main.c: 50:     init_RFID();
   950  000D7C  EC08  F007         	call	_init_RFID	;wreg free
   951                           
   952                           ;main.c: 51:     init_sensor();
   953  000D80  EC2F  F007         	call	_init_sensor	;wreg free
   954                           
   955                           ;main.c: 52:     initPWM(199);
   956  000D84  0E00               	movlw	0
   957  000D86  6E09               	movwf	initPWM@PWMperiod+1,c
   958  000D88  0EC7               	movlw	199
   959  000D8A  6E08               	movwf	initPWM@PWMperiod,c
   960  000D8C  EC15  F007         	call	_initPWM	;wreg free
   961                           
   962                           ;main.c: 54:     TRISBbits.RB0 = 0;
   963  000D90  9093               	bcf	3987,0,c	;volatile
   964                           
   965                           ;main.c: 55:     TRISBbits.RB2 = 0;
   966  000D92  9493               	bcf	3987,2,c	;volatile
   967                           
   968                           ;main.c: 56:     TRISDbits.RD2 = 1;
   969  000D94  8495               	bsf	3989,2,c	;volatile
   970  000D96  0012               	return		;funcret
   971  000D98                     __end_of_setup:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function _init_sensor *****************
   975 ;; Defined at:
   976 ;;		line 14 in file "signal_processing.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, status,2
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   990 ;;      Params:         0       0       0       0
   991 ;;      Locals:         0       0       0       0
   992 ;;      Temps:          0       0       0       0
   993 ;;      Totals:         0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:    2
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_setup
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text3
  1005  000E5E                     __ptext3:
  1006                           	opt callstack 0
  1007  000E5E                     _init_sensor:
  1008                           	opt callstack 27
  1009                           
  1010                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1011                           
  1012                           ;incstack = 0
  1013  000E5E  0E01               	movlw	1
  1014  000E60  6EB7               	movwf	4023,c	;volatile
  1015                           
  1016                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1017  000E62  8492               	bsf	3986,2,c	;volatile
  1018                           
  1019                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1020  000E64  0E00               	movlw	0
  1021  000E66  6EB8               	movwf	4024,c	;volatile
  1022                           
  1023                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1024  000E68  0E00               	movlw	0
  1025  000E6A  6EB9               	movwf	4025,c	;volatile
  1026                           
  1027                           ;signal_processing.c: 23:     DFLTCON = 0b00011000;
  1028  000E6C  0E18               	movlw	24
  1029  000E6E  6E60               	movwf	3936,c	;volatile
  1030                           
  1031                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1032  000E70  0E47               	movlw	71
  1033  000E72  6E63               	movwf	3939,c	;volatile
  1034  000E74  0012               	return		;funcret
  1035  000E76                     __end_of_init_sensor:
  1036                           	opt callstack 0
  1037                           
  1038 ;; *************** function _init_RFID *****************
  1039 ;; Defined at:
  1040 ;;		line 13 in file "RFID.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;		None
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1054 ;;      Params:         0       0       0       0
  1055 ;;      Locals:         0       0       0       0
  1056 ;;      Temps:          0       0       0       0
  1057 ;;      Totals:         0       0       0       0
  1058 ;;Total ram usage:        0 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    2
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_setup
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text4
  1069  000E10                     __ptext4:
  1070                           	opt callstack 0
  1071  000E10                     _init_RFID:
  1072                           	opt callstack 27
  1073                           
  1074                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1075                           
  1076                           ;incstack = 0
  1077  000E10  8E94               	bsf	3988,7,c	;volatile
  1078                           
  1079                           ;RFID.c: 19:     SPBRG = 203;
  1080  000E12  0ECB               	movlw	203
  1081  000E14  6EAF               	movwf	4015,c	;volatile
  1082                           
  1083                           ;RFID.c: 20:     SPBRGH = 0;
  1084  000E16  0E00               	movlw	0
  1085  000E18  6EB0               	movwf	4016,c	;volatile
  1086                           
  1087                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1088  000E1A  86AA               	bsf	4010,3,c	;volatile
  1089                           
  1090                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1091  000E1C  84AC               	bsf	4012,2,c	;volatile
  1092                           
  1093                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1094  000E1E  88AB               	bsf	4011,4,c	;volatile
  1095                           
  1096                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1097  000E20  8EAB               	bsf	4011,7,c	;volatile
  1098                           
  1099                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1100  000E22  8AAC               	bsf	4012,5,c	;volatile
  1101                           
  1102                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1103  000E24  8A9D               	bsf	3997,5,c	;volatile
  1104                           
  1105                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1106  000E26  8A9F               	bsf	3999,5,c	;volatile
  1107  000E28  0012               	return		;funcret
  1108  000E2A                     __end_of_init_RFID:
  1109                           	opt callstack 0
  1110                           
  1111 ;; *************** function _init_LCD *****************
  1112 ;; Defined at:
  1113 ;;		line 56 in file "LCDIO.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;		None
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1127 ;;      Params:         0       0       0       0
  1128 ;;      Locals:         0       0       0       0
  1129 ;;      Temps:          1       0       0       0
  1130 ;;      Totals:         1       0       0       0
  1131 ;;Total ram usage:        1 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:    5
  1134 ;; This function calls:
  1135 ;;		_LCDout
  1136 ;;		_SendLCD
  1137 ;; This function is called by:
  1138 ;;		_setup
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text5
  1143  0007FC                     __ptext5:
  1144                           	opt callstack 0
  1145  0007FC                     _init_LCD:
  1146                           	opt callstack 24
  1147                           
  1148                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1149                           
  1150                           ;incstack = 0
  1151  0007FC  9094               	bcf	3988,0,c	;volatile
  1152                           
  1153                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1154  0007FE  9E92               	bcf	3986,7,c	;volatile
  1155                           
  1156                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1157  000800  9694               	bcf	3988,3,c	;volatile
  1158                           
  1159                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1160  000802  9095               	bcf	3989,0,c	;volatile
  1161                           
  1162                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1163  000804  9295               	bcf	3989,1,c	;volatile
  1164                           
  1165                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1166  000806  9C92               	bcf	3986,6,c	;volatile
  1167                           
  1168                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1169  000808  908C               	bcf	3980,0,c	;volatile
  1170                           
  1171                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1172  00080A  928C               	bcf	3980,1,c	;volatile
  1173                           
  1174                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1175  00080C  968B               	bcf	3979,3,c	;volatile
  1176                           
  1177                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1178  00080E  908B               	bcf	3979,0,c	;volatile
  1179                           
  1180                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1181  000810  9C89               	bcf	3977,6,c	;volatile
  1182                           
  1183                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1184  000812  9E89               	bcf	3977,7,c	;volatile
  1185                           
  1186                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1187  000814  0E27               	movlw	39
  1188  000816  6E0C               	movwf	??_init_LCD& (0+255),c
  1189  000818  0EF5               	movlw	245
  1190  00081A                     u1657:
  1191  00081A  2EE8               	decfsz	wreg,f,c
  1192  00081C  D7FE               	bra	u1657
  1193  00081E  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1194  000820  D7FC               	bra	u1657
  1195  000822  F000               	nop	
  1196                           
  1197                           ;LCDIO.c: 76:  LCDout(0b0011);
  1198  000824  0E03               	movlw	3
  1199  000826  ECE5  F004         	call	_LCDout
  1200                           
  1201                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1202  00082A  0E0D               	movlw	13
  1203  00082C  6E0C               	movwf	??_init_LCD& (0+255),c
  1204  00082E  0EFC               	movlw	252
  1205  000830                     u1667:
  1206  000830  2EE8               	decfsz	wreg,f,c
  1207  000832  D7FE               	bra	u1667
  1208  000834  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1209  000836  D7FC               	bra	u1667
  1210                           
  1211                           ;LCDIO.c: 78:  LCDout(0b0011);
  1212  000838  0E03               	movlw	3
  1213  00083A  ECE5  F004         	call	_LCDout
  1214                           
  1215                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1216  00083E  0E85               	movlw	133
  1217  000840                     u1677:
  1218  000840  2EE8               	decfsz	wreg,f,c
  1219  000842  D7FE               	bra	u1677
  1220  000844  F000               	nop	
  1221                           
  1222                           ;LCDIO.c: 80:  LCDout(0b0011);
  1223  000846  0E03               	movlw	3
  1224  000848  ECE5  F004         	call	_LCDout
  1225                           
  1226                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1227  00084C  0E21               	movlw	33
  1228  00084E                     u1687:
  1229  00084E  2EE8               	decfsz	wreg,f,c
  1230  000850  D7FE               	bra	u1687
  1231  000852  F000               	nop	
  1232                           
  1233                           ;LCDIO.c: 82:  LCDout(0b0010);
  1234  000854  0E02               	movlw	2
  1235  000856  ECE5  F004         	call	_LCDout
  1236                           
  1237                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1238  00085A  0E21               	movlw	33
  1239  00085C                     u1697:
  1240  00085C  2EE8               	decfsz	wreg,f,c
  1241  00085E  D7FE               	bra	u1697
  1242  000860  F000               	nop	
  1243                           
  1244                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1245  000862  0E00               	movlw	0
  1246  000864  6E0A               	movwf	SendLCD@type,c
  1247  000866  0E28               	movlw	40
  1248  000868  EC9D  F006         	call	_SendLCD
  1249                           
  1250                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1251  00086C  0E21               	movlw	33
  1252  00086E                     u1707:
  1253  00086E  2EE8               	decfsz	wreg,f,c
  1254  000870  D7FE               	bra	u1707
  1255  000872  F000               	nop	
  1256                           
  1257                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1258  000874  0E00               	movlw	0
  1259  000876  6E0A               	movwf	SendLCD@type,c
  1260  000878  0E08               	movlw	8
  1261  00087A  EC9D  F006         	call	_SendLCD
  1262                           
  1263                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1264  00087E  0E21               	movlw	33
  1265  000880                     u1717:
  1266  000880  2EE8               	decfsz	wreg,f,c
  1267  000882  D7FE               	bra	u1717
  1268  000884  F000               	nop	
  1269                           
  1270                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1271  000886  0E00               	movlw	0
  1272  000888  6E0A               	movwf	SendLCD@type,c
  1273  00088A  0E01               	movlw	1
  1274  00088C  EC9D  F006         	call	_SendLCD
  1275                           
  1276                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1277  000890  0E0D               	movlw	13
  1278  000892  6E0C               	movwf	??_init_LCD& (0+255),c
  1279  000894  0EFC               	movlw	252
  1280  000896                     u1727:
  1281  000896  2EE8               	decfsz	wreg,f,c
  1282  000898  D7FE               	bra	u1727
  1283  00089A  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1284  00089C  D7FC               	bra	u1727
  1285                           
  1286                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1287  00089E  0E00               	movlw	0
  1288  0008A0  6E0A               	movwf	SendLCD@type,c
  1289  0008A2  0E06               	movlw	6
  1290  0008A4  EC9D  F006         	call	_SendLCD
  1291                           
  1292                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1293  0008A8  0E21               	movlw	33
  1294  0008AA                     u1737:
  1295  0008AA  2EE8               	decfsz	wreg,f,c
  1296  0008AC  D7FE               	bra	u1737
  1297  0008AE  F000               	nop	
  1298                           
  1299                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1300  0008B0  0E00               	movlw	0
  1301  0008B2  6E0A               	movwf	SendLCD@type,c
  1302  0008B4  0E0C               	movlw	12
  1303  0008B6  EC9D  F006         	call	_SendLCD
  1304                           
  1305                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1306  0008BA  0E21               	movlw	33
  1307  0008BC                     u1747:
  1308  0008BC  2EE8               	decfsz	wreg,f,c
  1309  0008BE  D7FE               	bra	u1747
  1310  0008C0  F000               	nop	
  1311  0008C2  0012               	return		;funcret
  1312  0008C4                     __end_of_init_LCD:
  1313                           	opt callstack 0
  1314                           
  1315 ;; *************** function _initPWM *****************
  1316 ;; Defined at:
  1317 ;;		line 5 in file "dc_motor.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;  PWMperiod       2    7[COMRAM] int 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;		None
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, status,2
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1331 ;;      Params:         2       0       0       0
  1332 ;;      Locals:         0       0       0       0
  1333 ;;      Temps:          0       0       0       0
  1334 ;;      Totals:         2       0       0       0
  1335 ;;Total ram usage:        2 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    2
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_setup
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text6
  1346  000E2A                     __ptext6:
  1347                           	opt callstack 0
  1348  000E2A                     _initPWM:
  1349                           	opt callstack 27
  1350                           
  1351                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1352                           
  1353                           ;incstack = 0
  1354  000E2A  0E00               	movlw	0
  1355  000E2C  6E7F               	movwf	3967,c	;volatile
  1356                           
  1357                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1358  000E2E  0E80               	movlw	128
  1359  000E30  6E7E               	movwf	3966,c	;volatile
  1360                           
  1361                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1362  000E32  0E6F               	movlw	111
  1363  000E34  6E6F               	movwf	3951,c	;volatile
  1364                           
  1365                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1366  000E36  0E00               	movlw	0
  1367  000E38  6E6E               	movwf	3950,c	;volatile
  1368                           
  1369                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1370  000E3A  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1371                           
  1372                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1373  000E3E  5009               	movf	initPWM@PWMperiod+1,w,c
  1374  000E40  6E7A               	movwf	3962,c	;volatile
  1375  000E42  0012               	return		;funcret
  1376  000E44                     __end_of_initPWM:
  1377                           	opt callstack 0
  1378                           
  1379 ;; *************** function _scanForBeacon *****************
  1380 ;; Defined at:
  1381 ;;		line 15 in file "subroutines.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1384 ;;		 -> main@motorL(9), 
  1385 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1386 ;;		 -> main@motorR(9), 
  1387 ;;  speed           2   43[COMRAM] int 
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;  raw_data        2   47[COMRAM] unsigned int 
  1390 ;;  beacon_locat    1   49[COMRAM] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      unsigned char 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1400 ;;      Params:         6       0       0       0
  1401 ;;      Locals:         3       0       0       0
  1402 ;;      Temps:          2       0       0       0
  1403 ;;      Totals:        11       0       0       0
  1404 ;;Total ram usage:       11 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    5
  1407 ;; This function calls:
  1408 ;;		_classify_data
  1409 ;;		_turnRight
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text7
  1416  000C7A                     __ptext7:
  1417                           	opt callstack 0
  1418  000C7A                     _scanForBeacon:
  1419                           	opt callstack 25
  1420                           
  1421                           ;subroutines.c: 15: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 16: {;subroutines.c: 17:     turnRight(mL,mR,speed);
  1422                           
  1423                           ;incstack = 0
  1424  000C7A  C028  F01F         	movff	scanForBeacon@mL,turnRight@mL
  1425  000C7E  C029  F020         	movff	scanForBeacon@mL+1,turnRight@mL+1
  1426  000C82  C02A  F021         	movff	scanForBeacon@mR,turnRight@mR
  1427  000C86  C02B  F022         	movff	scanForBeacon@mR+1,turnRight@mR+1
  1428  000C8A  C02C  F023         	movff	scanForBeacon@speed,turnRight@max_power
  1429  000C8E  C02D  F024         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  1430  000C92  ECA4  F004         	call	_turnRight	;wreg free
  1431  000C96                     l2150:
  1432                           
  1433                           ;subroutines.c: 21:     {;subroutines.c: 23:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  1434  000C96  5068               	movf	3944,w,c	;volatile
  1435  000C98  CF69 F02E          	movff	3945,??_scanForBeacon	;volatile
  1436  000C9C  6A2F               	clrf	(??_scanForBeacon+1)& (0+255),c
  1437  000C9E  C02E  F02F         	movff	??_scanForBeacon,??_scanForBeacon+1
  1438  000CA2  6A2E               	clrf	??_scanForBeacon,c
  1439  000CA4  102E               	iorwf	??_scanForBeacon,w,c
  1440  000CA6  6E30               	movwf	scanForBeacon@raw_data,c
  1441  000CA8  502F               	movf	??_scanForBeacon+1,w,c
  1442  000CAA  6E31               	movwf	scanForBeacon@raw_data+1,c
  1443                           
  1444                           ;subroutines.c: 26:         char beacon_location = classify_data(raw_data);
  1445  000CAC  C030  F008         	movff	scanForBeacon@raw_data,classify_data@raw_data
  1446  000CB0  C031  F009         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  1447  000CB4  EC3B  F007         	call	_classify_data	;wreg free
  1448  000CB8  6E32               	movwf	scanForBeacon@beacon_location,c
  1449                           
  1450                           ;subroutines.c: 29:         if(beacon_location == 1)
  1451  000CBA  0432               	decf	scanForBeacon@beacon_location,w,c
  1452  000CBC  A4D8               	btfss	status,2,c
  1453  000CBE  D7EB               	goto	l2150
  1454                           
  1455                           ;subroutines.c: 30:         {;subroutines.c: 31:             return 1;
  1456  000CC0  0E01               	movlw	1
  1457  000CC2  0012               	return		;funcret
  1458  000CC4                     __end_of_scanForBeacon:
  1459                           	opt callstack 0
  1460                           
  1461 ;; *************** function _turnRight *****************
  1462 ;; Defined at:
  1463 ;;		line 52 in file "dc_motor.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1466 ;;		 -> main@motorL(9), 
  1467 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1468 ;;		 -> main@motorR(9), 
  1469 ;;  max_power       2   34[COMRAM] int 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  i               2   37[COMRAM] int 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1481 ;;      Params:         6       0       0       0
  1482 ;;      Locals:         2       0       0       0
  1483 ;;      Temps:          1       0       0       0
  1484 ;;      Totals:         9       0       0       0
  1485 ;;Total ram usage:        9 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    4
  1488 ;; This function calls:
  1489 ;;		_setMotorPWM
  1490 ;; This function is called by:
  1491 ;;		_scanForBeacon
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text8
  1496  000948                     __ptext8:
  1497                           	opt callstack 0
  1498  000948                     _turnRight:
  1499                           	opt callstack 25
  1500                           
  1501                           ;dc_motor.c: 52: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 53: {;dc_motor.c: 55:     mL->direction = 1;
  1502                           
  1503                           ;incstack = 0
  1504  000948  EE20 F001          	lfsr	2,1
  1505  00094C  501F               	movf	turnRight@mL,w,c
  1506  00094E  26D9               	addwf	fsr2l,f,c
  1507  000950  5020               	movf	turnRight@mL+1,w,c
  1508  000952  22DA               	addwfc	fsr2h,f,c
  1509  000954  0E01               	movlw	1
  1510  000956  6EDF               	movwf	indf2,c
  1511                           
  1512                           ;dc_motor.c: 56:     mR->direction = 0;
  1513  000958  EE20 F001          	lfsr	2,1
  1514  00095C  5021               	movf	turnRight@mR,w,c
  1515  00095E  26D9               	addwf	fsr2l,f,c
  1516  000960  5022               	movf	turnRight@mR+1,w,c
  1517  000962  22DA               	addwfc	fsr2h,f,c
  1518  000964  0E00               	movlw	0
  1519  000966  6EDF               	movwf	indf2,c
  1520                           
  1521                           ;dc_motor.c: 58:     for(int i = 0; i<max_power;i++){
  1522  000968  0E00               	movlw	0
  1523  00096A  6E27               	movwf	turnRight@i+1,c
  1524  00096C  0E00               	movlw	0
  1525  00096E  6E26               	movwf	turnRight@i,c
  1526  000970  D021               	goto	l2026
  1527  000972                     l2016:
  1528                           
  1529                           ;dc_motor.c: 59:         mL->power = i;
  1530  000972  C01F  FFD9         	movff	turnRight@mL,fsr2l
  1531  000976  C020  FFDA         	movff	turnRight@mL+1,fsr2h
  1532  00097A  C026  FFDF         	movff	turnRight@i,indf2
  1533                           
  1534                           ;dc_motor.c: 60:         mR->power = i;
  1535  00097E  C021  FFD9         	movff	turnRight@mR,fsr2l
  1536  000982  C022  FFDA         	movff	turnRight@mR+1,fsr2h
  1537  000986  C026  FFDF         	movff	turnRight@i,indf2
  1538                           
  1539                           ;dc_motor.c: 62:         setMotorPWM(mL);
  1540  00098A  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
  1541  00098E  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  1542  000992  ECF7  F002         	call	_setMotorPWM	;wreg free
  1543                           
  1544                           ;dc_motor.c: 63:         setMotorPWM(mR);
  1545  000996  C021  F016         	movff	turnRight@mR,setMotorPWM@m
  1546  00099A  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  1547  00099E  ECF7  F002         	call	_setMotorPWM	;wreg free
  1548                           
  1549                           ;dc_motor.c: 64:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1550  0009A2  0E03               	movlw	3
  1551  0009A4  6E25               	movwf	??_turnRight& (0+255),c
  1552  0009A6  0E98               	movlw	152
  1553  0009A8                     u1757:
  1554  0009A8  2EE8               	decfsz	wreg,f,c
  1555  0009AA  D7FE               	bra	u1757
  1556  0009AC  2E25               	decfsz	??_turnRight& (0+255),f,c
  1557  0009AE  D7FC               	bra	u1757
  1558                           
  1559                           ;dc_motor.c: 65:     }
  1560  0009B0  4A26               	infsnz	turnRight@i,f,c
  1561  0009B2  2A27               	incf	turnRight@i+1,f,c
  1562  0009B4                     l2026:
  1563  0009B4  5023               	movf	turnRight@max_power,w,c
  1564  0009B6  5C26               	subwf	turnRight@i,w,c
  1565  0009B8  5027               	movf	turnRight@i+1,w,c
  1566  0009BA  0A80               	xorlw	128
  1567  0009BC  6E25               	movwf	??_turnRight& (0+255),c
  1568  0009BE  5024               	movf	turnRight@max_power+1,w,c
  1569  0009C0  0A80               	xorlw	128
  1570  0009C2  5825               	subwfb	??_turnRight& (0+255),w,c
  1571  0009C4  B0D8               	btfsc	status,0,c
  1572  0009C6  0012               	return	
  1573  0009C8  D7D4               	goto	l2016
  1574  0009CA                     __end_of_turnRight:
  1575                           	opt callstack 0
  1576                           
  1577 ;; *************** function _classify_data *****************
  1578 ;; Defined at:
  1579 ;;		line 30 in file "signal_processing.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  raw_data        2    7[COMRAM] int 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      unsigned char 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1593 ;;      Params:         2       0       0       0
  1594 ;;      Locals:         0       0       0       0
  1595 ;;      Temps:          0       0       0       0
  1596 ;;      Totals:         2       0       0       0
  1597 ;;Total ram usage:        2 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    2
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_scanForBeacon
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text9
  1608  000E76                     __ptext9:
  1609                           	opt callstack 0
  1610  000E76                     _classify_data:
  1611                           	opt callstack 27
  1612                           
  1613                           ;signal_processing.c: 30: char classify_data(int raw_data);signal_processing.c: 31: {;si
      +                          gnal_processing.c: 32:     if(raw_data > 10000)
  1614                           
  1615                           ;incstack = 0
  1616  000E76  BE09               	btfsc	classify_data@raw_data+1,7,c
  1617  000E78  D008               	goto	l2110
  1618  000E7A  0E11               	movlw	17
  1619  000E7C  5C08               	subwf	classify_data@raw_data,w,c
  1620  000E7E  0E27               	movlw	39
  1621  000E80  5809               	subwfb	classify_data@raw_data+1,w,c
  1622  000E82  A0D8               	btfss	status,0,c
  1623  000E84  D002               	goto	l2110
  1624                           
  1625                           ;signal_processing.c: 33:     {;signal_processing.c: 34:         return 1;
  1626  000E86  0E01               	movlw	1
  1627  000E88  0012               	return	
  1628  000E8A                     l2110:
  1629                           
  1630                           ;signal_processing.c: 37:     {;signal_processing.c: 38:         return 0;
  1631  000E8A  0E00               	movlw	0
  1632  000E8C  0012               	return		;funcret
  1633  000E8E                     __end_of_classify_data:
  1634                           	opt callstack 0
  1635                           
  1636 ;; *************** function _returnHome *****************
  1637 ;; Defined at:
  1638 ;;		line 59 in file "subroutines.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1641 ;;		 -> main@motorL(9), 
  1642 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1643 ;;		 -> main@motorR(9), 
  1644 ;;  speed           2   43[COMRAM] int 
  1645 ;;  micros          2   45[COMRAM] PTR unsigned long 
  1646 ;;		 -> main@movementMicros(4), 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  i               4   51[COMRAM] unsigned long 
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      unsigned char 
  1651 ;; Registers used:
  1652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1658 ;;      Params:         8       0       0       0
  1659 ;;      Locals:         4       0       0       0
  1660 ;;      Temps:          4       0       0       0
  1661 ;;      Totals:        16       0       0       0
  1662 ;;Total ram usage:       16 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; Hardware stack levels required when called:    5
  1665 ;; This function calls:
  1666 ;;		_moveBackward
  1667 ;; This function is called by:
  1668 ;;		_main
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text10
  1673  000B2A                     __ptext10:
  1674                           	opt callstack 0
  1675  000B2A                     _returnHome:
  1676                           	opt callstack 25
  1677                           
  1678                           ;subroutines.c: 59: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 60:                         unsigned long *micros);subroutines.
      +                          c: 61: {;subroutines.c: 62:     moveBackward(mL,mR,speed);
  1679                           
  1680                           ;incstack = 0
  1681  000B2A  C028  F01F         	movff	returnHome@mL,moveBackward@mL
  1682  000B2E  C029  F020         	movff	returnHome@mL+1,moveBackward@mL+1
  1683  000B32  C02A  F021         	movff	returnHome@mR,moveBackward@mR
  1684  000B36  C02B  F022         	movff	returnHome@mR+1,moveBackward@mR+1
  1685  000B3A  C02C  F023         	movff	returnHome@speed,moveBackward@max_power
  1686  000B3E  C02D  F024         	movff	returnHome@speed+1,moveBackward@max_power+1
  1687  000B42  EC21  F005         	call	_moveBackward	;wreg free
  1688                           
  1689                           ;subroutines.c: 64:     for(unsigned long i=0; i<*micros;i++)
  1690  000B46  0E00               	movlw	0
  1691  000B48  6E34               	movwf	returnHome@i,c
  1692  000B4A  0E00               	movlw	0
  1693  000B4C  6E35               	movwf	returnHome@i+1,c
  1694  000B4E  0E00               	movlw	0
  1695  000B50  6E36               	movwf	returnHome@i+2,c
  1696  000B52  0E00               	movlw	0
  1697  000B54  6E37               	movwf	returnHome@i+3,c
  1698  000B56  D007               	goto	l2184
  1699  000B58                     l294:
  1700                           
  1701                           ;subroutines.c: 65:     {;subroutines.c: 66:         _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
  1702  000B58  D000               	nop2		;2 cycle nop
  1703                           
  1704                           ;subroutines.c: 67:     }
  1705  000B5A  0E01               	movlw	1
  1706  000B5C  2634               	addwf	returnHome@i,f,c
  1707  000B5E  0E00               	movlw	0
  1708  000B60  2235               	addwfc	returnHome@i+1,f,c
  1709  000B62  2236               	addwfc	returnHome@i+2,f,c
  1710  000B64  2237               	addwfc	returnHome@i+3,f,c
  1711  000B66                     l2184:
  1712  000B66  C02E  FFD9         	movff	returnHome@micros,fsr2l
  1713  000B6A  C02F  FFDA         	movff	returnHome@micros+1,fsr2h
  1714  000B6E  50DE               	movf	postinc2,w,c
  1715  000B70  5C34               	subwf	returnHome@i,w,c
  1716  000B72  50DE               	movf	postinc2,w,c
  1717  000B74  5835               	subwfb	returnHome@i+1,w,c
  1718  000B76  50DE               	movf	postinc2,w,c
  1719  000B78  5836               	subwfb	returnHome@i+2,w,c
  1720  000B7A  50DE               	movf	postinc2,w,c
  1721  000B7C  5837               	subwfb	returnHome@i+3,w,c
  1722  000B7E  A0D8               	btfss	status,0,c
  1723  000B80  D7EB               	goto	l294
  1724                           
  1725                           ;subroutines.c: 68:     return 3;
  1726  000B82  0E03               	movlw	3
  1727  000B84  0012               	return		;funcret
  1728  000B86                     __end_of_returnHome:
  1729                           	opt callstack 0
  1730                           
  1731 ;; *************** function _moveBackward *****************
  1732 ;; Defined at:
  1733 ;;		line 83 in file "dc_motor.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1736 ;;		 -> main@motorL(9), 
  1737 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1738 ;;		 -> main@motorR(9), 
  1739 ;;  max_power       2   34[COMRAM] int 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  i               2   37[COMRAM] int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1751 ;;      Params:         6       0       0       0
  1752 ;;      Locals:         2       0       0       0
  1753 ;;      Temps:          1       0       0       0
  1754 ;;      Totals:         9       0       0       0
  1755 ;;Total ram usage:        9 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    4
  1758 ;; This function calls:
  1759 ;;		_setMotorPWM
  1760 ;; This function is called by:
  1761 ;;		_returnHome
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text11
  1766  000A42                     __ptext11:
  1767                           	opt callstack 0
  1768  000A42                     _moveBackward:
  1769                           	opt callstack 25
  1770                           
  1771                           ;dc_motor.c: 83: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 84: {;dc_motor.c: 85:     mL->direction = 0;
  1772                           
  1773                           ;incstack = 0
  1774  000A42  EE20 F001          	lfsr	2,1
  1775  000A46  501F               	movf	moveBackward@mL,w,c
  1776  000A48  26D9               	addwf	fsr2l,f,c
  1777  000A4A  5020               	movf	moveBackward@mL+1,w,c
  1778  000A4C  22DA               	addwfc	fsr2h,f,c
  1779  000A4E  0E00               	movlw	0
  1780  000A50  6EDF               	movwf	indf2,c
  1781                           
  1782                           ;dc_motor.c: 86:     mR->direction = 0;
  1783  000A52  EE20 F001          	lfsr	2,1
  1784  000A56  5021               	movf	moveBackward@mR,w,c
  1785  000A58  26D9               	addwf	fsr2l,f,c
  1786  000A5A  5022               	movf	moveBackward@mR+1,w,c
  1787  000A5C  22DA               	addwfc	fsr2h,f,c
  1788  000A5E  0E00               	movlw	0
  1789  000A60  6EDF               	movwf	indf2,c
  1790                           
  1791                           ;dc_motor.c: 87:     for(int i = 0; i < max_power; i++)
  1792  000A62  0E00               	movlw	0
  1793  000A64  6E27               	movwf	moveBackward@i+1,c
  1794  000A66  0E00               	movlw	0
  1795  000A68  6E26               	movwf	moveBackward@i,c
  1796  000A6A  D01A               	goto	l2054
  1797  000A6C                     l2046:
  1798                           
  1799                           ;dc_motor.c: 88:     {;dc_motor.c: 89:         mL->power = i;
  1800  000A6C  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  1801  000A70  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  1802  000A74  C026  FFDF         	movff	moveBackward@i,indf2
  1803                           
  1804                           ;dc_motor.c: 90:         mR->power = i;
  1805  000A78  C021  FFD9         	movff	moveBackward@mR,fsr2l
  1806  000A7C  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  1807  000A80  C026  FFDF         	movff	moveBackward@i,indf2
  1808                           
  1809                           ;dc_motor.c: 91:         setMotorPWM(mL);
  1810  000A84  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  1811  000A88  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  1812  000A8C  ECF7  F002         	call	_setMotorPWM	;wreg free
  1813                           
  1814                           ;dc_motor.c: 92:         setMotorPWM(mR);
  1815  000A90  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  1816  000A94  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  1817  000A98  ECF7  F002         	call	_setMotorPWM	;wreg free
  1818                           
  1819                           ;dc_motor.c: 93:     }
  1820  000A9C  4A26               	infsnz	moveBackward@i,f,c
  1821  000A9E  2A27               	incf	moveBackward@i+1,f,c
  1822  000AA0                     l2054:
  1823  000AA0  5023               	movf	moveBackward@max_power,w,c
  1824  000AA2  5C26               	subwf	moveBackward@i,w,c
  1825  000AA4  5027               	movf	moveBackward@i+1,w,c
  1826  000AA6  0A80               	xorlw	128
  1827  000AA8  6E25               	movwf	??_moveBackward& (0+255),c
  1828  000AAA  5024               	movf	moveBackward@max_power+1,w,c
  1829  000AAC  0A80               	xorlw	128
  1830  000AAE  5825               	subwfb	??_moveBackward& (0+255),w,c
  1831  000AB0  B0D8               	btfsc	status,0,c
  1832  000AB2  0012               	return	
  1833  000AB4  D7DB               	goto	l2046
  1834  000AB6                     __end_of_moveBackward:
  1835                           	opt callstack 0
  1836                           
  1837 ;; *************** function _moveToBeacon *****************
  1838 ;; Defined at:
  1839 ;;		line 36 in file "subroutines.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1842 ;;		 -> main@motorL(9), 
  1843 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1844 ;;		 -> main@motorR(9), 
  1845 ;;  speed           2   43[COMRAM] int 
  1846 ;;  micros          2   45[COMRAM] PTR unsigned long 
  1847 ;;		 -> main@movementMicros(4), 
  1848 ;;  RFID_buffer     2   47[COMRAM] PTR volatile unsigned ch
  1849 ;;		 -> RFIDbuf(12), 
  1850 ;;  exit_flag       2   49[COMRAM] PTR volatile unsigned ch
  1851 ;;		 -> NULL(0), RFID_flag(1), 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1863 ;;      Params:        12       0       0       0
  1864 ;;      Locals:         0       0       0       0
  1865 ;;      Temps:          1       0       0       0
  1866 ;;      Totals:        13       0       0       0
  1867 ;;Total ram usage:       13 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    7
  1870 ;; This function calls:
  1871 ;;		_check_RFID
  1872 ;;		_display_RFID
  1873 ;;		_moveForward
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text12
  1880  000B86                     __ptext12:
  1881                           	opt callstack 0
  1882  000B86                     _moveToBeacon:
  1883                           	opt callstack 23
  1884                           
  1885                           ;subroutines.c: 36: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 37: unsigned long *micros, volatile char RFID_buffer[], volat
      +                          ile char *exit_flag);subroutines.c: 38: {;subroutines.c: 39:     moveForward(mL,mR,speed
      +                          );
  1886                           
  1887                           ;incstack = 0
  1888  000B86  C028  F01F         	movff	moveToBeacon@mL,moveForward@mL
  1889  000B8A  C029  F020         	movff	moveToBeacon@mL+1,moveForward@mL+1
  1890  000B8E  C02A  F021         	movff	moveToBeacon@mR,moveForward@mR
  1891  000B92  C02B  F022         	movff	moveToBeacon@mR+1,moveForward@mR+1
  1892  000B96  C02C  F023         	movff	moveToBeacon@speed,moveForward@max_power
  1893  000B9A  C02D  F024         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  1894  000B9E  EC5B  F005         	call	_moveForward	;wreg free
  1895  000BA2                     l2162:
  1896                           
  1897                           ;subroutines.c: 43:           {;subroutines.c: 44:               _delay((unsigned long)(
      +                          (1)*(8000000/4000000.0)));
  1898  000BA2  D000               	nop2		;2 cycle nop
  1899                           
  1900                           ;subroutines.c: 45:               *micros += 1;
  1901  000BA4  C02E  FFD9         	movff	moveToBeacon@micros,fsr2l
  1902  000BA8  C02F  FFDA         	movff	moveToBeacon@micros+1,fsr2h
  1903  000BAC  2ADE               	incf	postinc2,f,c
  1904  000BAE  0E00               	movlw	0
  1905  000BB0  22DE               	addwfc	postinc2,f,c
  1906  000BB2  22DE               	addwfc	postinc2,f,c
  1907  000BB4  22DE               	addwfc	postinc2,f,c
  1908                           
  1909                           ;subroutines.c: 49:               if(*exit_flag == 1)
  1910  000BB6  C032  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  1911  000BBA  C033  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  1912  000BBE  04DE               	decf	postinc2,w,c
  1913  000BC0  A4D8               	btfss	status,2,c
  1914  000BC2  D7EF               	goto	l2162
  1915                           
  1916                           ;subroutines.c: 50:               {;subroutines.c: 51:                   display_RFID(RF
      +                          ID_buffer);
  1917  000BC4  C030  F00D         	movff	moveToBeacon@RFID_buffer,display_RFID@dataBuf
  1918  000BC8  C031  F00E         	movff	moveToBeacon@RFID_buffer+1,display_RFID@dataBuf+1
  1919  000BCC  EC62  F006         	call	_display_RFID	;wreg free
  1920                           
  1921                           ;subroutines.c: 52:                   check_RFID(RFID_buffer);
  1922  000BD0  C030  F00E         	movff	moveToBeacon@RFID_buffer,check_RFID@dataBuf
  1923  000BD4  C031  F00F         	movff	moveToBeacon@RFID_buffer+1,check_RFID@dataBuf+1
  1924  000BD8  EC4F  F002         	call	_check_RFID	;wreg free
  1925                           
  1926                           ;subroutines.c: 54:                   return 2;
  1927  000BDC  0E02               	movlw	2
  1928  000BDE  0012               	return		;funcret
  1929  000BE0                     __end_of_moveToBeacon:
  1930                           	opt callstack 0
  1931                           
  1932 ;; *************** function _moveForward *****************
  1933 ;; Defined at:
  1934 ;;		line 69 in file "dc_motor.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1937 ;;		 -> main@motorL(9), 
  1938 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1939 ;;		 -> main@motorR(9), 
  1940 ;;  max_power       2   34[COMRAM] int 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  i               2   37[COMRAM] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1952 ;;      Params:         6       0       0       0
  1953 ;;      Locals:         2       0       0       0
  1954 ;;      Temps:          1       0       0       0
  1955 ;;      Totals:         9       0       0       0
  1956 ;;Total ram usage:        9 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    4
  1959 ;; This function calls:
  1960 ;;		_setMotorPWM
  1961 ;; This function is called by:
  1962 ;;		_moveToBeacon
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text13
  1967  000AB6                     __ptext13:
  1968                           	opt callstack 0
  1969  000AB6                     _moveForward:
  1970                           	opt callstack 25
  1971                           
  1972                           ;dc_motor.c: 69: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 70: {;dc_motor.c: 71:     mL->direction = 1;
  1973                           
  1974                           ;incstack = 0
  1975  000AB6  EE20 F001          	lfsr	2,1
  1976  000ABA  501F               	movf	moveForward@mL,w,c
  1977  000ABC  26D9               	addwf	fsr2l,f,c
  1978  000ABE  5020               	movf	moveForward@mL+1,w,c
  1979  000AC0  22DA               	addwfc	fsr2h,f,c
  1980  000AC2  0E01               	movlw	1
  1981  000AC4  6EDF               	movwf	indf2,c
  1982                           
  1983                           ;dc_motor.c: 72:     mR->direction = 1;
  1984  000AC6  EE20 F001          	lfsr	2,1
  1985  000ACA  5021               	movf	moveForward@mR,w,c
  1986  000ACC  26D9               	addwf	fsr2l,f,c
  1987  000ACE  5022               	movf	moveForward@mR+1,w,c
  1988  000AD0  22DA               	addwfc	fsr2h,f,c
  1989  000AD2  0E01               	movlw	1
  1990  000AD4  6EDF               	movwf	indf2,c
  1991                           
  1992                           ;dc_motor.c: 73:     for(int i = 0; i < max_power; i++)
  1993  000AD6  0E00               	movlw	0
  1994  000AD8  6E27               	movwf	moveForward@i+1,c
  1995  000ADA  0E00               	movlw	0
  1996  000ADC  6E26               	movwf	moveForward@i,c
  1997  000ADE  D01A               	goto	l2040
  1998  000AE0                     l2032:
  1999                           
  2000                           ;dc_motor.c: 74:     {;dc_motor.c: 75:         mL->power = i;
  2001  000AE0  C01F  FFD9         	movff	moveForward@mL,fsr2l
  2002  000AE4  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  2003  000AE8  C026  FFDF         	movff	moveForward@i,indf2
  2004                           
  2005                           ;dc_motor.c: 76:         mR->power = i;
  2006  000AEC  C021  FFD9         	movff	moveForward@mR,fsr2l
  2007  000AF0  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  2008  000AF4  C026  FFDF         	movff	moveForward@i,indf2
  2009                           
  2010                           ;dc_motor.c: 77:         setMotorPWM(mL);
  2011  000AF8  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  2012  000AFC  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  2013  000B00  ECF7  F002         	call	_setMotorPWM	;wreg free
  2014                           
  2015                           ;dc_motor.c: 78:         setMotorPWM(mR);
  2016  000B04  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  2017  000B08  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  2018  000B0C  ECF7  F002         	call	_setMotorPWM	;wreg free
  2019                           
  2020                           ;dc_motor.c: 79:     }
  2021  000B10  4A26               	infsnz	moveForward@i,f,c
  2022  000B12  2A27               	incf	moveForward@i+1,f,c
  2023  000B14                     l2040:
  2024  000B14  5023               	movf	moveForward@max_power,w,c
  2025  000B16  5C26               	subwf	moveForward@i,w,c
  2026  000B18  5027               	movf	moveForward@i+1,w,c
  2027  000B1A  0A80               	xorlw	128
  2028  000B1C  6E25               	movwf	??_moveForward& (0+255),c
  2029  000B1E  5024               	movf	moveForward@max_power+1,w,c
  2030  000B20  0A80               	xorlw	128
  2031  000B22  5825               	subwfb	??_moveForward& (0+255),w,c
  2032  000B24  B0D8               	btfsc	status,0,c
  2033  000B26  0012               	return	
  2034  000B28  D7DB               	goto	l2032
  2035  000B2A                     __end_of_moveForward:
  2036                           	opt callstack 0
  2037                           
  2038 ;; *************** function _display_RFID *****************
  2039 ;; Defined at:
  2040 ;;		line 109 in file "RFID.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  dataBuf         2   12[COMRAM] PTR volatile unsigned ch
  2043 ;;		 -> RFIDbuf(12), 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  i               2   14[COMRAM] int 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2055 ;;      Params:         2       0       0       0
  2056 ;;      Locals:         2       0       0       0
  2057 ;;      Temps:          0       0       0       0
  2058 ;;      Totals:         4       0       0       0
  2059 ;;Total ram usage:        4 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    6
  2062 ;; This function calls:
  2063 ;;		_ClearLCD
  2064 ;;		_SendLCD
  2065 ;;		_SetLine
  2066 ;; This function is called by:
  2067 ;;		_moveToBeacon
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text14
  2072  000CC4                     __ptext14:
  2073                           	opt callstack 0
  2074  000CC4                     _display_RFID:
  2075                           	opt callstack 23
  2076                           
  2077                           ;RFID.c: 109: void display_RFID(volatile char dataBuf[]);RFID.c: 110: {;RFID.c: 111:    
      +                           ClearLCD();
  2078                           
  2079                           ;incstack = 0
  2080  000CC4  EC22  F007         	call	_ClearLCD	;wreg free
  2081                           
  2082                           ;RFID.c: 112:     SetLine(1);
  2083  000CC8  0E01               	movlw	1
  2084  000CCA  ECCC  F006         	call	_SetLine
  2085                           
  2086                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  2087  000CCE  0E00               	movlw	0
  2088  000CD0  6E10               	movwf	display_RFID@i+1,c
  2089  000CD2  0E00               	movlw	0
  2090  000CD4  6E0F               	movwf	display_RFID@i,c
  2091  000CD6                     l2096:
  2092                           
  2093                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  2094  000CD6  0E01               	movlw	1
  2095  000CD8  6E0A               	movwf	SendLCD@type,c
  2096  000CDA  500F               	movf	display_RFID@i,w,c
  2097  000CDC  240D               	addwf	display_RFID@dataBuf,w,c
  2098  000CDE  6ED9               	movwf	fsr2l,c
  2099  000CE0  5010               	movf	display_RFID@i+1,w,c
  2100  000CE2  200E               	addwfc	display_RFID@dataBuf+1,w,c
  2101  000CE4  6EDA               	movwf	fsr2h,c
  2102  000CE6  50DF               	movf	indf2,w,c
  2103  000CE8  EC9D  F006         	call	_SendLCD
  2104                           
  2105                           ;RFID.c: 116:     }
  2106  000CEC  4A0F               	infsnz	display_RFID@i,f,c
  2107  000CEE  2A10               	incf	display_RFID@i+1,f,c
  2108  000CF0  BE10               	btfsc	display_RFID@i+1,7,c
  2109  000CF2  D7F1               	goto	l2096
  2110  000CF4  5010               	movf	display_RFID@i+1,w,c
  2111  000CF6  E105               	bnz	u1500
  2112  000CF8  0E0A               	movlw	10
  2113  000CFA  5C0F               	subwf	display_RFID@i,w,c
  2114  000CFC  B0D8               	btfsc	status,0,c
  2115  000CFE  0012               	return	
  2116  000D00  D7EA               	goto	l2096
  2117  000D02                     u1500:
  2118  000D02  0012               	return		;funcret
  2119  000D04                     __end_of_display_RFID:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _ClearLCD *****************
  2123 ;; Defined at:
  2124 ;;		line 131 in file "LCDIO.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2138 ;;      Params:         0       0       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          1       0       0       0
  2141 ;;      Totals:         1       0       0       0
  2142 ;;Total ram usage:        1 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    5
  2145 ;; This function calls:
  2146 ;;		_SendLCD
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;;		_display_RFID
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text15
  2154  000E44                     __ptext15:
  2155                           	opt callstack 0
  2156  000E44                     _ClearLCD:
  2157                           	opt callstack 23
  2158                           
  2159                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  2160                           
  2161                           ;incstack = 0
  2162  000E44  0E00               	movlw	0
  2163  000E46  6E0A               	movwf	SendLCD@type,c
  2164  000E48  0E01               	movlw	1
  2165  000E4A  EC9D  F006         	call	_SendLCD
  2166                           
  2167                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2168  000E4E  0E0D               	movlw	13
  2169  000E50  6E0C               	movwf	??_ClearLCD& (0+255),c
  2170  000E52  0EFC               	movlw	252
  2171  000E54                     u1767:
  2172  000E54  2EE8               	decfsz	wreg,f,c
  2173  000E56  D7FE               	bra	u1767
  2174  000E58  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  2175  000E5A  D7FC               	bra	u1767
  2176  000E5C  0012               	return		;funcret
  2177  000E5E                     __end_of_ClearLCD:
  2178                           	opt callstack 0
  2179                           
  2180 ;; *************** function _check_RFID *****************
  2181 ;; Defined at:
  2182 ;;		line 72 in file "RFID.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  dataBuf         2   13[COMRAM] PTR volatile unsigned ch
  2185 ;;		 -> RFIDbuf(12), 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  i               2   35[COMRAM] int 
  2188 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  2189 ;;  checksum        1   34[COMRAM] unsigned char 
  2190 ;;  byte5           1   33[COMRAM] unsigned char 
  2191 ;;  byte4           1   32[COMRAM] unsigned char 
  2192 ;;  byte3           1   31[COMRAM] unsigned char 
  2193 ;;  byte2           1   30[COMRAM] unsigned char 
  2194 ;;  byte1           1   29[COMRAM] unsigned char 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2204 ;;      Params:         2       0       0       0
  2205 ;;      Locals:        20       0       0       0
  2206 ;;      Temps:          2       0       0       0
  2207 ;;      Totals:        24       0       0       0
  2208 ;;Total ram usage:       24 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    6
  2211 ;; This function calls:
  2212 ;;		_LCD_String
  2213 ;;		_SetLine
  2214 ;; This function is called by:
  2215 ;;		_moveToBeacon
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text16
  2220  00049E                     __ptext16:
  2221                           	opt callstack 0
  2222  00049E                     _check_RFID:
  2223                           	opt callstack 23
  2224                           
  2225                           ;RFID.c: 72: void check_RFID(volatile char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char
      +                           hexBuf[12];;RFID.c: 77:     for(int i=0; i<12;i++)
  2226                           
  2227                           ;incstack = 0
  2228  00049E  0E00               	movlw	0
  2229  0004A0  6E25               	movwf	check_RFID@i+1,c
  2230  0004A2  0E00               	movlw	0
  2231  0004A4  6E24               	movwf	check_RFID@i,c
  2232  0004A6                     l2062:
  2233                           
  2234                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2235  0004A6  5024               	movf	check_RFID@i,w,c
  2236  0004A8  240E               	addwf	check_RFID@dataBuf,w,c
  2237  0004AA  6ED9               	movwf	fsr2l,c
  2238  0004AC  5025               	movf	check_RFID@i+1,w,c
  2239  0004AE  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2240  0004B0  6EDA               	movwf	fsr2h,c
  2241  0004B2  0E2F               	movlw	47
  2242  0004B4  64DF               	cpfsgt	indf2,c
  2243  0004B6  D018               	goto	l2068
  2244  0004B8  5024               	movf	check_RFID@i,w,c
  2245  0004BA  240E               	addwf	check_RFID@dataBuf,w,c
  2246  0004BC  6ED9               	movwf	fsr2l,c
  2247  0004BE  5025               	movf	check_RFID@i+1,w,c
  2248  0004C0  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2249  0004C2  6EDA               	movwf	fsr2h,c
  2250  0004C4  0E3A               	movlw	58
  2251  0004C6  60DF               	cpfslt	indf2,c
  2252  0004C8  D00F               	goto	l2068
  2253                           
  2254                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  2255  0004CA  0E12               	movlw	low check_RFID@hexBuf
  2256  0004CC  2424               	addwf	check_RFID@i,w,c
  2257  0004CE  6ED9               	movwf	fsr2l,c
  2258  0004D0  0E00               	movlw	high check_RFID@hexBuf
  2259  0004D2  2025               	addwfc	check_RFID@i+1,w,c
  2260  0004D4  6EDA               	movwf	fsr2h,c
  2261  0004D6  5024               	movf	check_RFID@i,w,c
  2262  0004D8  240E               	addwf	check_RFID@dataBuf,w,c
  2263  0004DA  6EE1               	movwf	fsr1l,c
  2264  0004DC  5025               	movf	check_RFID@i+1,w,c
  2265  0004DE  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2266  0004E0  6EE2               	movwf	fsr1h,c
  2267  0004E2  50E7               	movf	indf1,w,c
  2268  0004E4  0FD0               	addlw	208
  2269  0004E6  D020               	goto	L3
  2270  0004E8                     l2068:
  2271  0004E8  5024               	movf	check_RFID@i,w,c
  2272  0004EA  240E               	addwf	check_RFID@dataBuf,w,c
  2273  0004EC  6ED9               	movwf	fsr2l,c
  2274  0004EE  5025               	movf	check_RFID@i+1,w,c
  2275  0004F0  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2276  0004F2  6EDA               	movwf	fsr2h,c
  2277  0004F4  0E40               	movlw	64
  2278  0004F6  64DF               	cpfsgt	indf2,c
  2279  0004F8  D018               	goto	l2074
  2280  0004FA  5024               	movf	check_RFID@i,w,c
  2281  0004FC  240E               	addwf	check_RFID@dataBuf,w,c
  2282  0004FE  6ED9               	movwf	fsr2l,c
  2283  000500  5025               	movf	check_RFID@i+1,w,c
  2284  000502  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2285  000504  6EDA               	movwf	fsr2h,c
  2286  000506  0E47               	movlw	71
  2287  000508  60DF               	cpfslt	indf2,c
  2288  00050A  D00F               	goto	l2074
  2289                           
  2290                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2291  00050C  0E12               	movlw	low check_RFID@hexBuf
  2292  00050E  2424               	addwf	check_RFID@i,w,c
  2293  000510  6ED9               	movwf	fsr2l,c
  2294  000512  0E00               	movlw	high check_RFID@hexBuf
  2295  000514  2025               	addwfc	check_RFID@i+1,w,c
  2296  000516  6EDA               	movwf	fsr2h,c
  2297  000518  5024               	movf	check_RFID@i,w,c
  2298  00051A  240E               	addwf	check_RFID@dataBuf,w,c
  2299  00051C  6EE1               	movwf	fsr1l,c
  2300  00051E  5025               	movf	check_RFID@i+1,w,c
  2301  000520  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2302  000522  6EE2               	movwf	fsr1h,c
  2303  000524  50E7               	movf	indf1,w,c
  2304  000526  0FC9               	addlw	201
  2305  000528                     L3:
  2306  000528  6EDF               	movwf	indf2,c
  2307  00052A                     l2074:
  2308                           
  2309                           ;RFID.c: 86:     }
  2310  00052A  4A24               	infsnz	check_RFID@i,f,c
  2311  00052C  2A25               	incf	check_RFID@i+1,f,c
  2312  00052E  BE25               	btfsc	check_RFID@i+1,7,c
  2313  000530  D7BA               	goto	l2062
  2314  000532  5025               	movf	check_RFID@i+1,w,c
  2315  000534  E104               	bnz	u1340
  2316  000536  0E0C               	movlw	12
  2317  000538  5C24               	subwf	check_RFID@i,w,c
  2318  00053A  A0D8               	btfss	status,0,c
  2319  00053C  D7B4               	goto	l2062
  2320  00053E                     u1340:
  2321                           
  2322                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2323  00053E  5012               	movf	check_RFID@hexBuf,w,c
  2324  000540  A4D8               	btfss	status,2,c
  2325  000542  D002               	goto	u1350
  2326  000544  0E01               	movlw	1
  2327  000546  D001               	goto	u1360
  2328  000548                     u1350:
  2329  000548  0E00               	movlw	0
  2330  00054A                     u1360:
  2331  00054A  1013               	iorwf	check_RFID@hexBuf+1,w,c
  2332  00054C  6E1E               	movwf	check_RFID@byte1,c
  2333                           
  2334                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2335  00054E  5014               	movf	check_RFID@hexBuf+2,w,c
  2336  000550  A4D8               	btfss	status,2,c
  2337  000552  D002               	goto	u1370
  2338  000554  0E01               	movlw	1
  2339  000556  D001               	goto	u1380
  2340  000558                     u1370:
  2341  000558  0E00               	movlw	0
  2342  00055A                     u1380:
  2343  00055A  1015               	iorwf	check_RFID@hexBuf+3,w,c
  2344  00055C  6E1F               	movwf	check_RFID@byte2,c
  2345                           
  2346                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2347  00055E  5016               	movf	check_RFID@hexBuf+4,w,c
  2348  000560  A4D8               	btfss	status,2,c
  2349  000562  D002               	goto	u1390
  2350  000564  0E01               	movlw	1
  2351  000566  D001               	goto	u1400
  2352  000568                     u1390:
  2353  000568  0E00               	movlw	0
  2354  00056A                     u1400:
  2355  00056A  1017               	iorwf	check_RFID@hexBuf+5,w,c
  2356  00056C  6E20               	movwf	check_RFID@byte3,c
  2357                           
  2358                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2359  00056E  5018               	movf	check_RFID@hexBuf+6,w,c
  2360  000570  A4D8               	btfss	status,2,c
  2361  000572  D002               	goto	u1410
  2362  000574  0E01               	movlw	1
  2363  000576  D001               	goto	u1420
  2364  000578                     u1410:
  2365  000578  0E00               	movlw	0
  2366  00057A                     u1420:
  2367  00057A  1019               	iorwf	check_RFID@hexBuf+7,w,c
  2368  00057C  6E21               	movwf	check_RFID@byte4,c
  2369                           
  2370                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2371  00057E  501A               	movf	check_RFID@hexBuf+8,w,c
  2372  000580  A4D8               	btfss	status,2,c
  2373  000582  D002               	goto	u1430
  2374  000584  0E01               	movlw	1
  2375  000586  D001               	goto	u1440
  2376  000588                     u1430:
  2377  000588  0E00               	movlw	0
  2378  00058A                     u1440:
  2379  00058A  101B               	iorwf	check_RFID@hexBuf+9,w,c
  2380  00058C  6E22               	movwf	check_RFID@byte5,c
  2381                           
  2382                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2383  00058E  501C               	movf	check_RFID@hexBuf+10,w,c
  2384  000590  A4D8               	btfss	status,2,c
  2385  000592  D002               	goto	u1450
  2386  000594  0E01               	movlw	1
  2387  000596  D001               	goto	u1460
  2388  000598                     u1450:
  2389  000598  0E00               	movlw	0
  2390  00059A                     u1460:
  2391  00059A  101D               	iorwf	check_RFID@hexBuf+11,w,c
  2392  00059C  6E23               	movwf	check_RFID@checksum,c
  2393                           
  2394                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2395  00059E  501E               	movf	check_RFID@byte1,w,c
  2396  0005A0  181F               	xorwf	check_RFID@byte2,w,c
  2397  0005A2  1820               	xorwf	check_RFID@byte3,w,c
  2398  0005A4  1821               	xorwf	check_RFID@byte4,w,c
  2399  0005A6  6E10               	movwf	??_check_RFID& (0+255),c
  2400  0005A8  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  2401  0005AA  5023               	movf	check_RFID@checksum,w,c
  2402  0005AC  1822               	xorwf	check_RFID@byte5,w,c
  2403  0005AE  A4D8               	btfss	status,2,c
  2404  0005B0  D002               	goto	u1470
  2405  0005B2  0E01               	movlw	1
  2406  0005B4  D001               	goto	u1480
  2407  0005B6                     u1470:
  2408  0005B6  0E00               	movlw	0
  2409  0005B8                     u1480:
  2410  0005B8  1A10               	xorwf	??_check_RFID,f,c
  2411  0005BA  0E00               	movlw	0
  2412  0005BC  1A11               	xorwf	??_check_RFID+1,f,c
  2413  0005BE  5010               	movf	??_check_RFID,w,c
  2414  0005C0  1011               	iorwf	??_check_RFID+1,w,c
  2415  0005C2  B4D8               	btfsc	status,2,c
  2416  0005C4  D00A               	goto	l2084
  2417                           
  2418                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  2419  0005C6  0E02               	movlw	2
  2420  0005C8  ECCC  F006         	call	_SetLine
  2421                           
  2422                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  2423  0005CC  0E11               	movlw	low STR_3
  2424  0005CE  6E0C               	movwf	LCD_String@string,c
  2425  0005D0  0E03               	movlw	high STR_3
  2426  0005D2  6E0D               	movwf	LCD_String@string+1,c
  2427  0005D4  EC82  F006         	call	_LCD_String	;wreg free
  2428                           
  2429                           ;RFID.c: 101:     }
  2430  0005D8  0012               	return	
  2431  0005DA                     l2084:
  2432                           
  2433                           ;RFID.c: 104:         SetLine(2);
  2434  0005DA  0E02               	movlw	2
  2435  0005DC  ECCC  F006         	call	_SetLine
  2436                           
  2437                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  2438  0005E0  0E01               	movlw	low STR_4
  2439  0005E2  6E0C               	movwf	LCD_String@string,c
  2440  0005E4  0E03               	movlw	high STR_4
  2441  0005E6  6E0D               	movwf	LCD_String@string+1,c
  2442  0005E8  EC82  F006         	call	_LCD_String	;wreg free
  2443  0005EC  0012               	return		;funcret
  2444  0005EE                     __end_of_check_RFID:
  2445                           	opt callstack 0
  2446                           
  2447 ;; *************** function _SetLine *****************
  2448 ;; Defined at:
  2449 ;;		line 107 in file "LCDIO.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  line            1    wreg     unsigned char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  line            1   11[COMRAM] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  1    wreg      void 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2463 ;;      Params:         0       0       0       0
  2464 ;;      Locals:         1       0       0       0
  2465 ;;      Temps:          0       0       0       0
  2466 ;;      Totals:         1       0       0       0
  2467 ;;Total ram usage:        1 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    5
  2470 ;; This function calls:
  2471 ;;		_SendLCD
  2472 ;; This function is called by:
  2473 ;;		_check_RFID
  2474 ;;		_display_RFID
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text17
  2479  000D98                     __ptext17:
  2480                           	opt callstack 0
  2481  000D98                     _SetLine:
  2482                           	opt callstack 23
  2483                           
  2484                           ;incstack = 0
  2485                           ;SetLine@line stored from wreg
  2486  000D98  6E0C               	movwf	SetLine@line,c
  2487                           
  2488                           ;LCDIO.c: 109:     if(line == 1){
  2489  000D9A  040C               	decf	SetLine@line,w,c
  2490  000D9C  A4D8               	btfss	status,2,c
  2491  000D9E  D005               	goto	l1952
  2492                           
  2493                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2494  000DA0  0E00               	movlw	0
  2495  000DA2  6E0A               	movwf	SendLCD@type,c
  2496  000DA4  0E80               	movlw	128
  2497  000DA6  EC9D  F006         	call	_SendLCD
  2498  000DAA                     l1952:
  2499                           
  2500                           ;LCDIO.c: 113:     if(line == 2){
  2501  000DAA  0E02               	movlw	2
  2502  000DAC  180C               	xorwf	SetLine@line,w,c
  2503  000DAE  A4D8               	btfss	status,2,c
  2504  000DB0  D005               	goto	l1956
  2505                           
  2506                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2507  000DB2  0E00               	movlw	0
  2508  000DB4  6E0A               	movwf	SendLCD@type,c
  2509  000DB6  0EC0               	movlw	192
  2510  000DB8  EC9D  F006         	call	_SendLCD
  2511  000DBC                     l1956:
  2512                           
  2513                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2514  000DBC  0E21               	movlw	33
  2515  000DBE                     u1777:
  2516  000DBE  2EE8               	decfsz	wreg,f,c
  2517  000DC0  D7FE               	bra	u1777
  2518  000DC2  F000               	nop	
  2519  000DC4  0012               	return		;funcret
  2520  000DC6                     __end_of_SetLine:
  2521                           	opt callstack 0
  2522                           
  2523 ;; *************** function _LCD_String *****************
  2524 ;; Defined at:
  2525 ;;		line 119 in file "LCDIO.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  string          2   11[COMRAM] PTR unsigned char 
  2528 ;;		 -> STR_4(16), STR_3(16), STR_2(15), STR_1(16), 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;		None
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2540 ;;      Params:         2       0       0       0
  2541 ;;      Locals:         0       0       0       0
  2542 ;;      Temps:          0       0       0       0
  2543 ;;      Totals:         2       0       0       0
  2544 ;;Total ram usage:        2 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    5
  2547 ;; This function calls:
  2548 ;;		_SendLCD
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;;		_check_RFID
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text18
  2556  000D04                     __ptext18:
  2557                           	opt callstack 0
  2558  000D04                     _LCD_String:
  2559                           	opt callstack 23
  2560                           
  2561                           ;LCDIO.c: 121: while(*string != 0){
  2562                           
  2563                           ;incstack = 0
  2564  000D04  D010               	goto	l1938
  2565  000D06                     l1932:
  2566                           
  2567                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2568  000D06  0E01               	movlw	1
  2569  000D08  6E0A               	movwf	SendLCD@type,c
  2570  000D0A  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2571  000D0E  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2572  000D12                     	if	0	;tblptru may be non-zero
  2573  000D12                     	endif
  2574  000D12                     	if	0	;tblptru may be non-zero
  2575  000D12                     	endif
  2576  000D12  0008               	tblrd		*
  2577  000D14  50F5               	movf	tablat,w,c
  2578  000D16  EC9D  F006         	call	_SendLCD
  2579  000D1A  4A0C               	infsnz	LCD_String@string,f,c
  2580  000D1C  2A0D               	incf	LCD_String@string+1,f,c
  2581                           
  2582                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2583  000D1E  0E21               	movlw	33
  2584  000D20                     u1787:
  2585  000D20  2EE8               	decfsz	wreg,f,c
  2586  000D22  D7FE               	bra	u1787
  2587  000D24  F000               	nop	
  2588  000D26                     l1938:
  2589                           
  2590                           ;LCDIO.c: 121: while(*string != 0){
  2591  000D26  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2592  000D2A  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2593  000D2E                     	if	0	;tblptru may be non-zero
  2594  000D2E                     	endif
  2595  000D2E                     	if	0	;tblptru may be non-zero
  2596  000D2E                     	endif
  2597  000D2E  0008               	tblrd		*
  2598  000D30  50F5               	movf	tablat,w,c
  2599  000D32  0900               	iorlw	0
  2600  000D34  B4D8               	btfsc	status,2,c
  2601  000D36  0012               	return	
  2602  000D38  D7E6               	goto	l1932
  2603  000D3A                     __end_of_LCD_String:
  2604                           	opt callstack 0
  2605                           
  2606 ;; *************** function _SendLCD *****************
  2607 ;; Defined at:
  2608 ;;		line 44 in file "LCDIO.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  Byte            1    wreg     unsigned char 
  2611 ;;  type            1    9[COMRAM] unsigned char 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  Byte            1   10[COMRAM] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2623 ;;      Params:         1       0       0       0
  2624 ;;      Locals:         1       0       0       0
  2625 ;;      Temps:          0       0       0       0
  2626 ;;      Totals:         2       0       0       0
  2627 ;;Total ram usage:        2 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    4
  2630 ;; This function calls:
  2631 ;;		_LCDout
  2632 ;; This function is called by:
  2633 ;;		_init_LCD
  2634 ;;		_SetLine
  2635 ;;		_LCD_String
  2636 ;;		_ClearLCD
  2637 ;;		_display_RFID
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text19
  2642  000D3A                     __ptext19:
  2643                           	opt callstack 0
  2644  000D3A                     _SendLCD:
  2645                           	opt callstack 24
  2646                           
  2647                           ;incstack = 0
  2648                           ;SendLCD@Byte stored from wreg
  2649  000D3A  6E0B               	movwf	SendLCD@Byte,c
  2650                           
  2651                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2652  000D3C  B00A               	btfsc	SendLCD@type,0,c
  2653  000D3E  D002               	bra	u1135
  2654  000D40  9E89               	bcf	3977,7,c	;volatile
  2655  000D42  D001               	bra	u1136
  2656  000D44                     u1135:
  2657  000D44  8E89               	bsf	3977,7,c	;volatile
  2658  000D46                     u1136:
  2659                           
  2660                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2661  000D46  380B               	swapf	SendLCD@Byte,w,c
  2662  000D48  0B0F               	andlw	15
  2663  000D4A  0B0F               	andlw	15
  2664  000D4C  ECE5  F004         	call	_LCDout
  2665                           
  2666                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  2667  000D50  0E06               	movlw	6
  2668  000D52                     u1797:
  2669  000D52  2EE8               	decfsz	wreg,f,c
  2670  000D54  D7FE               	bra	u1797
  2671  000D56  D000               	nop2	
  2672                           
  2673                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  2674  000D58  500B               	movf	SendLCD@Byte,w,c
  2675  000D5A  0B0F               	andlw	15
  2676  000D5C  ECE5  F004         	call	_LCDout
  2677                           
  2678                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2679  000D60  0E21               	movlw	33
  2680  000D62                     u1807:
  2681  000D62  2EE8               	decfsz	wreg,f,c
  2682  000D64  D7FE               	bra	u1807
  2683  000D66  F000               	nop	
  2684  000D68  0012               	return		;funcret
  2685  000D6A                     __end_of_SendLCD:
  2686                           	opt callstack 0
  2687                           
  2688 ;; *************** function _LCDout *****************
  2689 ;; Defined at:
  2690 ;;		line 31 in file "LCDIO.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  number          1    wreg     unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  number          1    8[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       0       0       0
  2705 ;;      Locals:         1       0       0       0
  2706 ;;      Temps:          1       0       0       0
  2707 ;;      Totals:         2       0       0       0
  2708 ;;Total ram usage:        2 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		_E_TOG
  2713 ;; This function is called by:
  2714 ;;		_SendLCD
  2715 ;;		_init_LCD
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text20
  2720  0009CA                     __ptext20:
  2721                           	opt callstack 0
  2722  0009CA                     _LCDout:
  2723                           	opt callstack 24
  2724                           
  2725                           ;incstack = 0
  2726                           ;LCDout@number stored from wreg
  2727  0009CA  6E09               	movwf	LCDout@number,c
  2728                           
  2729                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  2730  0009CC  C009  F008         	movff	LCDout@number,??_LCDout
  2731  0009D0  0E01               	movlw	1
  2732  0009D2  1608               	andwf	??_LCDout,f,c
  2733  0009D4  508B               	movf	3979,w,c	;volatile
  2734  0009D6  1808               	xorwf	??_LCDout,w,c
  2735  0009D8  0BFE               	andlw	-2
  2736  0009DA  1808               	xorwf	??_LCDout,w,c
  2737  0009DC  6E8B               	movwf	3979,c	;volatile
  2738                           
  2739                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  2740  0009DE  C009  F008         	movff	LCDout@number,??_LCDout
  2741  0009E2  90D8               	bcf	status,0,c
  2742  0009E4  3208               	rrcf	??_LCDout,f,c
  2743  0009E6  0E01               	movlw	1
  2744  0009E8  1608               	andwf	??_LCDout,f,c
  2745  0009EA  4608               	rlncf	??_LCDout,f,c
  2746  0009EC  4608               	rlncf	??_LCDout,f,c
  2747  0009EE  4608               	rlncf	??_LCDout,f,c
  2748  0009F0  508B               	movf	3979,w,c	;volatile
  2749  0009F2  1808               	xorwf	??_LCDout,w,c
  2750  0009F4  0BF7               	andlw	-9
  2751  0009F6  1808               	xorwf	??_LCDout,w,c
  2752  0009F8  6E8B               	movwf	3979,c	;volatile
  2753                           
  2754                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  2755  0009FA  C009  F008         	movff	LCDout@number,??_LCDout
  2756  0009FE  90D8               	bcf	status,0,c
  2757  000A00  3208               	rrcf	??_LCDout,f,c
  2758  000A02  90D8               	bcf	status,0,c
  2759  000A04  3208               	rrcf	??_LCDout,f,c
  2760  000A06  0E01               	movlw	1
  2761  000A08  1608               	andwf	??_LCDout,f,c
  2762  000A0A  508C               	movf	3980,w,c	;volatile
  2763  000A0C  1808               	xorwf	??_LCDout,w,c
  2764  000A0E  0BFE               	andlw	-2
  2765  000A10  1808               	xorwf	??_LCDout,w,c
  2766  000A12  6E8C               	movwf	3980,c	;volatile
  2767                           
  2768                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  2769  000A14  C009  F008         	movff	LCDout@number,??_LCDout
  2770  000A18  90D8               	bcf	status,0,c
  2771  000A1A  3208               	rrcf	??_LCDout,f,c
  2772  000A1C  90D8               	bcf	status,0,c
  2773  000A1E  3208               	rrcf	??_LCDout,f,c
  2774  000A20  90D8               	bcf	status,0,c
  2775  000A22  3208               	rrcf	??_LCDout,f,c
  2776  000A24  0E01               	movlw	1
  2777  000A26  1608               	andwf	??_LCDout,f,c
  2778  000A28  4608               	rlncf	??_LCDout,f,c
  2779  000A2A  508C               	movf	3980,w,c	;volatile
  2780  000A2C  1808               	xorwf	??_LCDout,w,c
  2781  000A2E  0BFD               	andlw	-3
  2782  000A30  1808               	xorwf	??_LCDout,w,c
  2783  000A32  6E8C               	movwf	3980,c	;volatile
  2784                           
  2785                           ;LCDIO.c: 39:  E_TOG();
  2786  000A34  EC47  F007         	call	_E_TOG	;wreg free
  2787                           
  2788                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2789  000A38  0E03               	movlw	3
  2790  000A3A                     u1817:
  2791  000A3A  2EE8               	decfsz	wreg,f,c
  2792  000A3C  D7FE               	bra	u1817
  2793  000A3E  F000               	nop	
  2794  000A40  0012               	return		;funcret
  2795  000A42                     __end_of_LCDout:
  2796                           	opt callstack 0
  2797                           
  2798 ;; *************** function _E_TOG *****************
  2799 ;; Defined at:
  2800 ;;		line 23 in file "LCDIO.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      void 
  2807 ;; Registers used:
  2808 ;;		wreg
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2814 ;;      Params:         0       0       0       0
  2815 ;;      Locals:         0       0       0       0
  2816 ;;      Temps:          0       0       0       0
  2817 ;;      Totals:         0       0       0       0
  2818 ;;Total ram usage:        0 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    2
  2821 ;; This function calls:
  2822 ;;		Nothing
  2823 ;; This function is called by:
  2824 ;;		_LCDout
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text21
  2829  000E8E                     __ptext21:
  2830                           	opt callstack 0
  2831  000E8E                     _E_TOG:
  2832                           	opt callstack 24
  2833                           
  2834                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  2835                           
  2836                           ;incstack = 0
  2837  000E8E  8C89               	bsf	3977,6,c	;volatile
  2838                           
  2839                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2840  000E90  0E03               	movlw	3
  2841  000E92                     u1827:
  2842  000E92  2EE8               	decfsz	wreg,f,c
  2843  000E94  D7FE               	bra	u1827
  2844  000E96  F000               	nop	
  2845                           
  2846                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  2847  000E98  9C89               	bcf	3977,6,c	;volatile
  2848  000E9A  0012               	return		;funcret
  2849  000E9C                     __end_of_E_TOG:
  2850                           	opt callstack 0
  2851                           
  2852 ;; *************** function _init_motor_struct *****************
  2853 ;; Defined at:
  2854 ;;		line 96 in file "dc_motor.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2857 ;;		 -> main@motorL(9), 
  2858 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2859 ;;		 -> main@motorR(9), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2871 ;;      Params:         4       0       0       0
  2872 ;;      Locals:         0       0       0       0
  2873 ;;      Temps:          0       0       0       0
  2874 ;;      Totals:         4       0       0       0
  2875 ;;Total ram usage:        4 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    4
  2878 ;; This function calls:
  2879 ;;		_setMotorPWM
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text22
  2886  000712                     __ptext22:
  2887                           	opt callstack 0
  2888  000712                     _init_motor_struct:
  2889                           	opt callstack 26
  2890                           
  2891                           ;dc_motor.c: 96: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 97: {;dc_motor.c: 99: mL->power = 0;
  2892                           
  2893                           ;incstack = 0
  2894  000712  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  2895  000716  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  2896  00071A  0E00               	movlw	0
  2897  00071C  6EDF               	movwf	indf2,c
  2898                           
  2899                           ;dc_motor.c: 100: mL->direction = 1;
  2900  00071E  EE20 F001          	lfsr	2,1
  2901  000722  501F               	movf	init_motor_struct@mL,w,c
  2902  000724  26D9               	addwf	fsr2l,f,c
  2903  000726  5020               	movf	init_motor_struct@mL+1,w,c
  2904  000728  22DA               	addwfc	fsr2h,f,c
  2905  00072A  0E01               	movlw	1
  2906  00072C  6EDF               	movwf	indf2,c
  2907                           
  2908                           ;dc_motor.c: 101: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  2909  00072E  EE20 F002          	lfsr	2,2
  2910  000732  501F               	movf	init_motor_struct@mL,w,c
  2911  000734  26D9               	addwf	fsr2l,f,c
  2912  000736  5020               	movf	init_motor_struct@mL+1,w,c
  2913  000738  22DA               	addwfc	fsr2h,f,c
  2914  00073A  0E79               	movlw	121
  2915  00073C  6EDE               	movwf	postinc2,c
  2916  00073E  0E0F               	movlw	15
  2917  000740  6EDD               	movwf	postdec2,c
  2918                           
  2919                           ;dc_motor.c: 102: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  2920  000742  EE20 F004          	lfsr	2,4
  2921  000746  501F               	movf	init_motor_struct@mL,w,c
  2922  000748  26D9               	addwf	fsr2l,f,c
  2923  00074A  5020               	movf	init_motor_struct@mL+1,w,c
  2924  00074C  22DA               	addwfc	fsr2h,f,c
  2925  00074E  0E78               	movlw	120
  2926  000750  6EDE               	movwf	postinc2,c
  2927  000752  0E0F               	movlw	15
  2928  000754  6EDD               	movwf	postdec2,c
  2929                           
  2930                           ;dc_motor.c: 103: mL->dir_pin=0;
  2931  000756  EE20 F006          	lfsr	2,6
  2932  00075A  501F               	movf	init_motor_struct@mL,w,c
  2933  00075C  26D9               	addwf	fsr2l,f,c
  2934  00075E  5020               	movf	init_motor_struct@mL+1,w,c
  2935  000760  22DA               	addwfc	fsr2h,f,c
  2936  000762  0E00               	movlw	0
  2937  000764  6EDF               	movwf	indf2,c
  2938                           
  2939                           ;dc_motor.c: 104: mL->PWMperiod=199;
  2940  000766  EE20 F007          	lfsr	2,7
  2941  00076A  501F               	movf	init_motor_struct@mL,w,c
  2942  00076C  26D9               	addwf	fsr2l,f,c
  2943  00076E  5020               	movf	init_motor_struct@mL+1,w,c
  2944  000770  22DA               	addwfc	fsr2h,f,c
  2945  000772  0EC7               	movlw	199
  2946  000774  6EDE               	movwf	postinc2,c
  2947  000776  0E00               	movlw	0
  2948  000778  6EDD               	movwf	postdec2,c
  2949                           
  2950                           ;dc_motor.c: 106: mR->power = 0;
  2951  00077A  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  2952  00077E  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  2953  000782  0E00               	movlw	0
  2954  000784  6EDF               	movwf	indf2,c
  2955                           
  2956                           ;dc_motor.c: 107: mR->direction = 1;
  2957  000786  EE20 F001          	lfsr	2,1
  2958  00078A  5021               	movf	init_motor_struct@mR,w,c
  2959  00078C  26D9               	addwf	fsr2l,f,c
  2960  00078E  5022               	movf	init_motor_struct@mR+1,w,c
  2961  000790  22DA               	addwfc	fsr2h,f,c
  2962  000792  0E01               	movlw	1
  2963  000794  6EDF               	movwf	indf2,c
  2964                           
  2965                           ;dc_motor.c: 108: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  2966  000796  EE20 F002          	lfsr	2,2
  2967  00079A  5021               	movf	init_motor_struct@mR,w,c
  2968  00079C  26D9               	addwf	fsr2l,f,c
  2969  00079E  5022               	movf	init_motor_struct@mR+1,w,c
  2970  0007A0  22DA               	addwfc	fsr2h,f,c
  2971  0007A2  0E77               	movlw	119
  2972  0007A4  6EDE               	movwf	postinc2,c
  2973  0007A6  0E0F               	movlw	15
  2974  0007A8  6EDD               	movwf	postdec2,c
  2975                           
  2976                           ;dc_motor.c: 109: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  2977  0007AA  EE20 F004          	lfsr	2,4
  2978  0007AE  5021               	movf	init_motor_struct@mR,w,c
  2979  0007B0  26D9               	addwf	fsr2l,f,c
  2980  0007B2  5022               	movf	init_motor_struct@mR+1,w,c
  2981  0007B4  22DA               	addwfc	fsr2h,f,c
  2982  0007B6  0E76               	movlw	118
  2983  0007B8  6EDE               	movwf	postinc2,c
  2984  0007BA  0E0F               	movlw	15
  2985  0007BC  6EDD               	movwf	postdec2,c
  2986                           
  2987                           ;dc_motor.c: 110: mR->dir_pin=2;
  2988  0007BE  EE20 F006          	lfsr	2,6
  2989  0007C2  5021               	movf	init_motor_struct@mR,w,c
  2990  0007C4  26D9               	addwf	fsr2l,f,c
  2991  0007C6  5022               	movf	init_motor_struct@mR+1,w,c
  2992  0007C8  22DA               	addwfc	fsr2h,f,c
  2993  0007CA  0E02               	movlw	2
  2994  0007CC  6EDF               	movwf	indf2,c
  2995                           
  2996                           ;dc_motor.c: 111: mR->PWMperiod=199;
  2997  0007CE  EE20 F007          	lfsr	2,7
  2998  0007D2  5021               	movf	init_motor_struct@mR,w,c
  2999  0007D4  26D9               	addwf	fsr2l,f,c
  3000  0007D6  5022               	movf	init_motor_struct@mR+1,w,c
  3001  0007D8  22DA               	addwfc	fsr2h,f,c
  3002  0007DA  0EC7               	movlw	199
  3003  0007DC  6EDE               	movwf	postinc2,c
  3004  0007DE  0E00               	movlw	0
  3005  0007E0  6EDD               	movwf	postdec2,c
  3006                           
  3007                           ;dc_motor.c: 113: setMotorPWM(mL);
  3008  0007E2  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  3009  0007E6  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3010  0007EA  ECF7  F002         	call	_setMotorPWM	;wreg free
  3011                           
  3012                           ;dc_motor.c: 114: setMotorPWM(mR);
  3013  0007EE  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  3014  0007F2  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3015  0007F6  ECF7  F002         	call	_setMotorPWM	;wreg free
  3016  0007FA  0012               	return		;funcret
  3017  0007FC                     __end_of_init_motor_struct:
  3018                           	opt callstack 0
  3019                           
  3020 ;; *************** function _setMotorPWM *****************
  3021 ;; Defined at:
  3022 ;;		line 18 in file "dc_motor.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3025 ;;		 -> main@motorR(9), main@motorL(9), 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  PWMduty         2   28[COMRAM] int 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3037 ;;      Params:         2       0       0       0
  3038 ;;      Locals:         2       0       0       0
  3039 ;;      Temps:          5       0       0       0
  3040 ;;      Totals:         9       0       0       0
  3041 ;;Total ram usage:        9 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		___awdiv
  3046 ;;		___wmul
  3047 ;; This function is called by:
  3048 ;;		_stop
  3049 ;;		_turnRight
  3050 ;;		_moveForward
  3051 ;;		_moveBackward
  3052 ;;		_init_motor_struct
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text23
  3057  0005EE                     __ptext23:
  3058                           	opt callstack 0
  3059  0005EE                     _setMotorPWM:
  3060                           	opt callstack 26
  3061                           
  3062                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3063                           
  3064                           ;incstack = 0
  3065  0005EE  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3066  0005F2  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3067  0005F6  50DF               	movf	indf2,w,c
  3068  0005F8  6E18               	movwf	??_setMotorPWM& (0+255),c
  3069  0005FA  5018               	movf	??_setMotorPWM,w,c
  3070  0005FC  6E08               	movwf	___wmul@multiplier,c
  3071  0005FE  6A09               	clrf	___wmul@multiplier+1,c
  3072  000600  EE20 F007          	lfsr	2,7
  3073  000604  5016               	movf	setMotorPWM@m,w,c
  3074  000606  26D9               	addwf	fsr2l,f,c
  3075  000608  5017               	movf	setMotorPWM@m+1,w,c
  3076  00060A  22DA               	addwfc	fsr2h,f,c
  3077  00060C  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  3078  000610  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  3079  000614  ECE3  F006         	call	___wmul	;wreg free
  3080  000618  C008  F00E         	movff	?___wmul,___awdiv@dividend
  3081  00061C  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  3082  000620  0E00               	movlw	0
  3083  000622  6E11               	movwf	___awdiv@divisor+1,c
  3084  000624  0E64               	movlw	100
  3085  000626  6E10               	movwf	___awdiv@divisor,c
  3086  000628  EC62  F004         	call	___awdiv	;wreg free
  3087  00062C  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  3088  000630  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3089                           
  3090                           ;dc_motor.c: 24:     if (m->direction)
  3091  000634  EE20 F001          	lfsr	2,1
  3092  000638  5016               	movf	setMotorPWM@m,w,c
  3093  00063A  26D9               	addwf	fsr2l,f,c
  3094  00063C  5017               	movf	setMotorPWM@m+1,w,c
  3095  00063E  22DA               	addwfc	fsr2h,f,c
  3096  000640  50DF               	movf	indf2,w,c
  3097  000642  B4D8               	btfsc	status,2,c
  3098  000644  D024               	goto	l1946
  3099                           
  3100                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3101  000646  EE20 F006          	lfsr	2,6
  3102  00064A  5016               	movf	setMotorPWM@m,w,c
  3103  00064C  26D9               	addwf	fsr2l,f,c
  3104  00064E  5017               	movf	setMotorPWM@m+1,w,c
  3105  000650  22DA               	addwfc	fsr2h,f,c
  3106  000652  50DF               	movf	indf2,w,c
  3107  000654  6E18               	movwf	??_setMotorPWM& (0+255),c
  3108  000656  0E01               	movlw	1
  3109  000658  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3110  00065A  2A18               	incf	??_setMotorPWM,f,c
  3111  00065C  D002               	goto	u1224
  3112  00065E                     u1225:
  3113  00065E  90D8               	bcf	status,0,c
  3114  000660  3619               	rlcf	??_setMotorPWM+1,f,c
  3115  000662                     u1224:
  3116  000662  2E18               	decfsz	??_setMotorPWM,f,c
  3117  000664  D7FC               	goto	u1225
  3118  000666  5019               	movf	??_setMotorPWM+1,w,c
  3119  000668  108A               	iorwf	3978,w,c	;volatile
  3120  00066A  6E8A               	movwf	3978,c	;volatile
  3121                           
  3122                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3123  00066C  EE20 F007          	lfsr	2,7
  3124  000670  5016               	movf	setMotorPWM@m,w,c
  3125  000672  26D9               	addwf	fsr2l,f,c
  3126  000674  5017               	movf	setMotorPWM@m+1,w,c
  3127  000676  22DA               	addwfc	fsr2h,f,c
  3128  000678  CFDE F018          	movff	postinc2,??_setMotorPWM
  3129  00067C  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3130  000680  501D               	movf	setMotorPWM@PWMduty,w,c
  3131  000682  5C18               	subwf	??_setMotorPWM,w,c
  3132  000684  6E1D               	movwf	setMotorPWM@PWMduty,c
  3133  000686  501E               	movf	setMotorPWM@PWMduty+1,w,c
  3134  000688  5819               	subwfb	??_setMotorPWM+1,w,c
  3135  00068A  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  3136                           
  3137                           ;dc_motor.c: 28:     }
  3138  00068C  D014               	goto	l118
  3139  00068E                     l1946:
  3140                           
  3141                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3142  00068E  EE20 F006          	lfsr	2,6
  3143  000692  5016               	movf	setMotorPWM@m,w,c
  3144  000694  26D9               	addwf	fsr2l,f,c
  3145  000696  5017               	movf	setMotorPWM@m+1,w,c
  3146  000698  22DA               	addwfc	fsr2h,f,c
  3147  00069A  50DF               	movf	indf2,w,c
  3148  00069C  6E18               	movwf	??_setMotorPWM& (0+255),c
  3149  00069E  0E01               	movlw	1
  3150  0006A0  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3151  0006A2  2A18               	incf	??_setMotorPWM,f,c
  3152  0006A4  D002               	goto	u1234
  3153  0006A6                     u1235:
  3154  0006A6  90D8               	bcf	status,0,c
  3155  0006A8  3619               	rlcf	??_setMotorPWM+1,f,c
  3156  0006AA                     u1234:
  3157  0006AA  2E18               	decfsz	??_setMotorPWM,f,c
  3158  0006AC  D7FC               	goto	u1235
  3159  0006AE  5019               	movf	??_setMotorPWM+1,w,c
  3160  0006B0  0AFF               	xorlw	255
  3161  0006B2  148A               	andwf	3978,w,c	;volatile
  3162  0006B4  6E8A               	movwf	3978,c	;volatile
  3163  0006B6                     l118:
  3164                           
  3165                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3166  0006B6  EE20 F002          	lfsr	2,2
  3167  0006BA  5016               	movf	setMotorPWM@m,w,c
  3168  0006BC  26D9               	addwf	fsr2l,f,c
  3169  0006BE  5017               	movf	setMotorPWM@m+1,w,c
  3170  0006C0  22DA               	addwfc	fsr2h,f,c
  3171  0006C2  CFDE F018          	movff	postinc2,??_setMotorPWM
  3172  0006C6  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3173  0006CA  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3174  0006CE  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3175  0006D2  441D               	rlncf	setMotorPWM@PWMduty,w,c
  3176  0006D4  46E8               	rlncf	wreg,f,c
  3177  0006D6  0BFC               	andlw	252
  3178  0006D8  6EDF               	movwf	indf2,c
  3179                           
  3180                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3181  0006DA  EE20 F004          	lfsr	2,4
  3182  0006DE  5016               	movf	setMotorPWM@m,w,c
  3183  0006E0  26D9               	addwf	fsr2l,f,c
  3184  0006E2  5017               	movf	setMotorPWM@m+1,w,c
  3185  0006E4  22DA               	addwfc	fsr2h,f,c
  3186  0006E6  CFDE F018          	movff	postinc2,??_setMotorPWM
  3187  0006EA  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3188  0006EE  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3189  0006F2  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3190  0006F6  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3191  0006FA  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3192  0006FE  0E06               	movlw	6
  3193  000700  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  3194  000702                     u1245:
  3195  000702  341B               	rlcf	??_setMotorPWM+3,w,c
  3196  000704  321B               	rrcf	??_setMotorPWM+3,f,c
  3197  000706  321A               	rrcf	??_setMotorPWM+2,f,c
  3198  000708  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3199  00070A  D7FB               	goto	u1245
  3200  00070C  501A               	movf	??_setMotorPWM+2,w,c
  3201  00070E  6EDF               	movwf	indf2,c
  3202  000710  0012               	return		;funcret
  3203  000712                     __end_of_setMotorPWM:
  3204                           	opt callstack 0
  3205                           
  3206 ;; *************** function ___wmul *****************
  3207 ;; Defined at:
  3208 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  multiplier      2    7[COMRAM] unsigned int 
  3211 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  product         2   11[COMRAM] unsigned int 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  2    7[COMRAM] unsigned int 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0, prodl, prodh
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3223 ;;      Params:         4       0       0       0
  3224 ;;      Locals:         2       0       0       0
  3225 ;;      Temps:          0       0       0       0
  3226 ;;      Totals:         6       0       0       0
  3227 ;;Total ram usage:        6 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    2
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_setMotorPWM
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text24
  3238  000DC6                     __ptext24:
  3239                           	opt callstack 0
  3240  000DC6                     ___wmul:
  3241                           	opt callstack 26
  3242                           
  3243                           ;incstack = 0
  3244  000DC6  5008               	movf	___wmul@multiplier,w,c
  3245  000DC8  020A               	mulwf	___wmul@multiplicand,c
  3246  000DCA  CFF3 F00C          	movff	prodl,___wmul@product
  3247  000DCE  CFF4 F00D          	movff	prodh,___wmul@product+1
  3248  000DD2  5008               	movf	___wmul@multiplier,w,c
  3249  000DD4  020B               	mulwf	___wmul@multiplicand+1,c
  3250  000DD6  50F3               	movf	prodl,w,c
  3251  000DD8  260D               	addwf	___wmul@product+1,f,c
  3252  000DDA  5009               	movf	___wmul@multiplier+1,w,c
  3253  000DDC  020A               	mulwf	___wmul@multiplicand,c
  3254  000DDE  50F3               	movf	prodl,w,c
  3255  000DE0  260D               	addwf	___wmul@product+1,f,c
  3256  000DE2  C00C  F008         	movff	___wmul@product,?___wmul
  3257  000DE6  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3258  000DEA  0012               	return		;funcret
  3259  000DEC                     __end_of___wmul:
  3260                           	opt callstack 0
  3261                           
  3262 ;; *************** function ___awdiv *****************
  3263 ;; Defined at:
  3264 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;  dividend        2   13[COMRAM] int 
  3267 ;;  divisor         2   15[COMRAM] int 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  quotient        2   19[COMRAM] int 
  3270 ;;  sign            1   18[COMRAM] unsigned char 
  3271 ;;  counter         1   17[COMRAM] unsigned char 
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  2   13[COMRAM] int 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3281 ;;      Params:         4       0       0       0
  3282 ;;      Locals:         4       0       0       0
  3283 ;;      Temps:          0       0       0       0
  3284 ;;      Totals:         8       0       0       0
  3285 ;;Total ram usage:        8 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    2
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_setMotorPWM
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text25
  3296  0008C4                     __ptext25:
  3297                           	opt callstack 0
  3298  0008C4                     ___awdiv:
  3299                           	opt callstack 26
  3300                           
  3301                           ;incstack = 0
  3302  0008C4  0E00               	movlw	0
  3303  0008C6  6E13               	movwf	___awdiv@sign,c
  3304  0008C8  AE11               	btfss	___awdiv@divisor+1,7,c
  3305  0008CA  D006               	goto	l1890
  3306  0008CC  6C10               	negf	___awdiv@divisor,c
  3307  0008CE  1E11               	comf	___awdiv@divisor+1,f,c
  3308  0008D0  B0D8               	btfsc	status,0,c
  3309  0008D2  2A11               	incf	___awdiv@divisor+1,f,c
  3310  0008D4  0E01               	movlw	1
  3311  0008D6  6E13               	movwf	___awdiv@sign,c
  3312  0008D8                     l1890:
  3313  0008D8  AE0F               	btfss	___awdiv@dividend+1,7,c
  3314  0008DA  D006               	goto	l1896
  3315  0008DC  6C0E               	negf	___awdiv@dividend,c
  3316  0008DE  1E0F               	comf	___awdiv@dividend+1,f,c
  3317  0008E0  B0D8               	btfsc	status,0,c
  3318  0008E2  2A0F               	incf	___awdiv@dividend+1,f,c
  3319  0008E4  0E01               	movlw	1
  3320  0008E6  1A13               	xorwf	___awdiv@sign,f,c
  3321  0008E8                     l1896:
  3322  0008E8  0E00               	movlw	0
  3323  0008EA  6E15               	movwf	___awdiv@quotient+1,c
  3324  0008EC  0E00               	movlw	0
  3325  0008EE  6E14               	movwf	___awdiv@quotient,c
  3326  0008F0  5010               	movf	___awdiv@divisor,w,c
  3327  0008F2  1011               	iorwf	___awdiv@divisor+1,w,c
  3328  0008F4  B4D8               	btfsc	status,2,c
  3329  0008F6  D01C               	goto	l1918
  3330  0008F8  0E01               	movlw	1
  3331  0008FA  6E12               	movwf	___awdiv@counter,c
  3332  0008FC  D004               	goto	l1904
  3333  0008FE                     l1902:
  3334  0008FE  90D8               	bcf	status,0,c
  3335  000900  3610               	rlcf	___awdiv@divisor,f,c
  3336  000902  3611               	rlcf	___awdiv@divisor+1,f,c
  3337  000904  2A12               	incf	___awdiv@counter,f,c
  3338  000906                     l1904:
  3339  000906  AE11               	btfss	___awdiv@divisor+1,7,c
  3340  000908  D7FA               	goto	l1902
  3341  00090A                     u1170:
  3342  00090A  90D8               	bcf	status,0,c
  3343  00090C  3614               	rlcf	___awdiv@quotient,f,c
  3344  00090E  3615               	rlcf	___awdiv@quotient+1,f,c
  3345  000910  5010               	movf	___awdiv@divisor,w,c
  3346  000912  5C0E               	subwf	___awdiv@dividend,w,c
  3347  000914  5011               	movf	___awdiv@divisor+1,w,c
  3348  000916  580F               	subwfb	___awdiv@dividend+1,w,c
  3349  000918  A0D8               	btfss	status,0,c
  3350  00091A  D005               	goto	l1914
  3351  00091C  5010               	movf	___awdiv@divisor,w,c
  3352  00091E  5E0E               	subwf	___awdiv@dividend,f,c
  3353  000920  5011               	movf	___awdiv@divisor+1,w,c
  3354  000922  5A0F               	subwfb	___awdiv@dividend+1,f,c
  3355  000924  8014               	bsf	___awdiv@quotient,0,c
  3356  000926                     l1914:
  3357  000926  90D8               	bcf	status,0,c
  3358  000928  3211               	rrcf	___awdiv@divisor+1,f,c
  3359  00092A  3210               	rrcf	___awdiv@divisor,f,c
  3360  00092C  2E12               	decfsz	___awdiv@counter,f,c
  3361  00092E  D7ED               	goto	u1170
  3362  000930                     l1918:
  3363  000930  5013               	movf	___awdiv@sign,w,c
  3364  000932  B4D8               	btfsc	status,2,c
  3365  000934  D004               	goto	l1922
  3366  000936  6C14               	negf	___awdiv@quotient,c
  3367  000938  1E15               	comf	___awdiv@quotient+1,f,c
  3368  00093A  B0D8               	btfsc	status,0,c
  3369  00093C  2A15               	incf	___awdiv@quotient+1,f,c
  3370  00093E                     l1922:
  3371  00093E  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  3372  000942  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  3373  000946  0012               	return		;funcret
  3374  000948                     __end_of___awdiv:
  3375                           	opt callstack 0
  3376                           
  3377 ;; *************** function _InterruptHandlerHigh *****************
  3378 ;; Defined at:
  3379 ;;		line 60 in file "main.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  throwaway       1    0        unsigned char 
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3393 ;;      Params:         0       0       0       0
  3394 ;;      Locals:         1       0       0       0
  3395 ;;      Temps:          2       0       0       0
  3396 ;;      Totals:         3       0       0       0
  3397 ;;Total ram usage:        3 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    1
  3400 ;; This function calls:
  3401 ;;		_processRFID
  3402 ;; This function is called by:
  3403 ;;		Interrupt level 2
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	intcode
  3408  000008                     __pintcode:
  3409                           	opt callstack 0
  3410  000008                     _InterruptHandlerHigh:
  3411                           	opt callstack 23
  3412                           
  3413                           ;incstack = 0
  3414  000008  823D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3415  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3416  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3417                           
  3418                           ;main.c: 64:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3419  000012  AA9E               	btfss	3998,5,c	;volatile
  3420  000014  D00D               	goto	i2l61
  3421  000016  043B               	decf	_robot_mode,w,c	;volatile
  3422  000018  A4D8               	btfss	status,2,c
  3423  00001A  D00A               	goto	i2l61
  3424                           
  3425                           ;main.c: 65:     {;main.c: 67:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3426  00001C  0E7C               	movlw	low _RFIDbuf
  3427  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  3428  000020  0E00               	movlw	high _RFIDbuf
  3429  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  3430  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3431  000028  EC17  F006         	call	_processRFID	;wreg free
  3432  00002C  6E3C               	movwf	_RFID_flag,c	;volatile
  3433                           
  3434                           ;main.c: 68:     }
  3435  00002E  D001               	goto	i2l63
  3436  000030                     i2l61:
  3437  000030  50AE               	movf	4014,w,c	;volatile
  3438  000032                     i2l63:
  3439  000032  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3440  000036  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3441  00003A  923D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3442  00003C  0011               	retfie		f
  3443  00003E                     __end_of_InterruptHandlerHigh:
  3444                           	opt callstack 0
  3445                           
  3446 ;; *************** function _processRFID *****************
  3447 ;; Defined at:
  3448 ;;		line 34 in file "RFID.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3451 ;;		 -> RFIDbuf(12), 
  3452 ;;  latestChar      1    2[COMRAM] unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  i               1    3[COMRAM] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      unsigned char 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3464 ;;      Params:         3       0       0       0
  3465 ;;      Locals:         1       0       0       0
  3466 ;;      Temps:          0       0       0       0
  3467 ;;      Totals:         4       0       0       0
  3468 ;;Total ram usage:        4 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_InterruptHandlerHigh
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text27
  3478  000C2E                     __ptext27:
  3479                           	opt callstack 0
  3480  000C2E                     _processRFID:
  3481                           	opt callstack 23
  3482                           
  3483                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3484                           
  3485                           ;incstack = 0
  3486  000C2E  0E03               	movlw	3
  3487  000C30  1803               	xorwf	processRFID@latestChar,w,c
  3488  000C32  A4D8               	btfss	status,2,c
  3489  000C34  D002               	goto	i2l1696
  3490                           
  3491                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3492  000C36  0E01               	movlw	1
  3493  000C38  0012               	return	
  3494  000C3A                     i2l1696:
  3495                           
  3496                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3497  000C3A  0E02               	movlw	2
  3498  000C3C  1803               	xorwf	processRFID@latestChar,w,c
  3499  000C3E  A4D8               	btfss	status,2,c
  3500  000C40  D012               	goto	i2l1716
  3501                           
  3502                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3503  000C42  0E00               	movlw	0
  3504  000C44  6E3A               	movwf	processRFID@position_in_buf,c
  3505                           
  3506                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3507  000C46  0E00               	movlw	0
  3508  000C48  6E04               	movwf	processRFID@i,c
  3509  000C4A                     i2l1704:
  3510                           
  3511                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3512  000C4A  5004               	movf	processRFID@i,w,c
  3513  000C4C  2401               	addwf	processRFID@RFIDbuf,w,c
  3514  000C4E  6ED9               	movwf	fsr2l,c
  3515  000C50  0E00               	movlw	0
  3516  000C52  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3517  000C54  6EDA               	movwf	fsr2h,c
  3518  000C56  0E00               	movlw	0
  3519  000C58  6EDF               	movwf	indf2,c
  3520                           
  3521                           ;RFID.c: 56:            }
  3522  000C5A  2A04               	incf	processRFID@i,f,c
  3523  000C5C  0E0B               	movlw	11
  3524  000C5E  6404               	cpfsgt	processRFID@i,c
  3525  000C60  D7F4               	goto	i2l1704
  3526  000C62                     i2u99_40:
  3527                           
  3528                           ;RFID.c: 58:            return 0;
  3529  000C62  0E00               	movlw	0
  3530  000C64  0012               	return	
  3531  000C66                     i2l1716:
  3532                           
  3533                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  3534  000C66  503A               	movf	processRFID@position_in_buf,w,c
  3535  000C68  2401               	addwf	processRFID@RFIDbuf,w,c
  3536  000C6A  6ED9               	movwf	fsr2l,c
  3537  000C6C  0E00               	movlw	0
  3538  000C6E  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3539  000C70  6EDA               	movwf	fsr2h,c
  3540  000C72  C003  FFDF         	movff	processRFID@latestChar,indf2
  3541                           
  3542                           ;RFID.c: 64:             position_in_buf++;
  3543  000C76  2A3A               	incf	processRFID@position_in_buf,f,c
  3544  000C78  D7F4               	goto	i2u99_40
  3545  000C7A                     __end_of_processRFID:
  3546                           	opt callstack 0
  3547                           
  3548                           	psect	rparam
  3549  0000                     
  3550                           	psect	temp
  3551  00003D                     btemp:
  3552                           	opt callstack 0
  3553  00003D                     	ds	1
  3554  0000                     int$flags	set	btemp
  3555  0000                     wtemp8	set	btemp+1
  3556  0000                     ttemp5	set	btemp+1
  3557  0000                     ttemp6	set	btemp+4
  3558  0000                     ttemp7	set	btemp+8
  3559                           tosu	equ	0xFFF
  3560                           tosh	equ	0xFFE
  3561                           tosl	equ	0xFFD
  3562                           stkptr	equ	0xFFC
  3563                           pclatu	equ	0xFFB
  3564                           pclath	equ	0xFFA
  3565                           pcl	equ	0xFF9
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           indf0	equ	0xFEF
  3573                           postinc0	equ	0xFEE
  3574                           postdec0	equ	0xFED
  3575                           preinc0	equ	0xFEC
  3576                           plusw0	equ	0xFEB
  3577                           fsr0h	equ	0xFEA
  3578                           fsr0l	equ	0xFE9
  3579                           wreg	equ	0xFE8
  3580                           indf1	equ	0xFE7
  3581                           postinc1	equ	0xFE6
  3582                           postdec1	equ	0xFE5
  3583                           preinc1	equ	0xFE4
  3584                           plusw1	equ	0xFE3
  3585                           fsr1h	equ	0xFE2
  3586                           fsr1l	equ	0xFE1
  3587                           bsr	equ	0xFE0
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           preinc2	equ	0xFDC
  3592                           plusw2	equ	0xFDB
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      60
    BANK0           160     28      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    returnHome@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[15]), STR_1(CODE[16]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   28047
                                             55 COMRAM     2     2      0
                                              0 BANK0     28    28      0
                           _ClearLCD
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 8     2      6    2719
                                             30 COMRAM     8     2      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1393
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       11     5      6    3302
                                             39 COMRAM    11     5      6
                      _classify_data
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        2     0      2     121
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          16     8      8    3271
                                             39 COMRAM    16     8      8
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     1     12   11139
                                             39 COMRAM    13     1     12
                         _check_RFID
                       _display_RFID
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (3) _ClearLCD                                             1     1      0    1117
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    3996
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (3) _SetLine                                              1     1      0    1179
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _LCD_String                                           2     0      2    1542
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2778
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2164
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     352
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     565
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (8) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _classify_data
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      28       5       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3C       1       63.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       3        0.0%
DATA                 0      0      64      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 05 11:51:32 2020

                           l53 0D6E                   ___awdiv@sign 0013            ___wmul@multiplicand 000A  
                ?_display_RFID 000D                    ?_LCD_String 000C                            l118 06B6  
                          l294 0B58            display_RFID@dataBuf 000D                 moveToBeacon@mL 0028  
               moveToBeacon@mR 002A                            wreg 000FE8                   processRFID@i 0004  
                 __CFG_LVP$OFF 000000                           l2110 0E8A                           l2032 0AE0  
                         l2040 0B14                           l2016 0972                           l2026 09B4  
                         l2220 03A0                           l2062 04A6                           l2046 0A6C  
                         l2054 0AA0                           l2150 0C96                           l2232 0432  
                         l2224 03DC                           l2216 037C                           l2074 052A  
                         l2162 0BA2                           l2250 0482                           l2242 044C  
                         l2084 05DA                           l2068 04E8                           l2228 040C  
                         l2254 0490                           l2096 0CD6                           l2184 0B66  
                         l2192 0BE8                           l2196 0BF6                           l1902 08FE  
                         l1904 0906                           l1922 093E                           l1914 0926  
                         l1932 0D06                           l1918 0930                           l1952 0DAA  
                         l1890 08D8                           l1946 068E                           l1938 0D26  
                         l1956 0DBC                           l1896 08E8                           STR_1 0321  
                         STR_2 0331                           STR_3 0311                           STR_4 0301  
                         u1135 0D44                           u1224 0662                           u1136 0D46  
                         u1400 056A                           u1225 065E                           u1170 090A  
                         u1234 06AA                           u1410 0578                           u1235 06A6  
                         u1420 057A                           u1340 053E                           u1500 0D02  
                         u1245 0702                           u1430 0588                           u1350 0548  
                         _LATB 000F8A                           u1440 058A                           u1360 054A  
                         u1450 0598                           u1370 0558                           u1610 047A  
                         u1460 059A                           u1380 055A                           u1620 0486  
                         u1470 05B6                           u1390 0568                           u1480 05B8  
                         u1707 086E                           u1717 0880                           u1807 0D62  
                         u1727 0896                           u1647 0456                           u1817 0A3A  
                         u1737 08AA                           u1657 081A                           u1827 0E92  
                         u1747 08BC                           u1667 0830                           u1757 09A8  
                         u1677 0840                           u1767 0E54                           u1687 084E  
                         u1777 0DBE                           u1697 085C                           u1787 0D20  
                         u1797 0D52                           i2l61 0030                           i2l63 0032  
                         _main 0342                           fsr2h 000FDA                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 003D                           _stop 0BE0                           prodh 000FF4  
                         prodl 000FF3                           start 003E                   ___param_bank 000000  
              __end_of_SendLCD 0D6A                __end_of_SetLine 0DC6                 ??_display_RFID 000F  
                        ?_main 0001            main@searching_speed 0060                __end_of___awdiv 0948  
                        ?_stop 001F                ___awdiv@divisor 0010                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                ___awdiv@counter 0012                          _RCREG 000FAE  
                        _E_TOG 0E8E                          _SPBRG 000FAF                   ?_init_sensor 0001  
              __end_of_initPWM 0E44                          _setup 0D6A                          main@i 0062  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 003E  
                        ttemp6 0041                          ttemp7 0045                          stop@i 0025  
                        status 000FD8                          wtemp8 003E            __size_of_LCD_String 0036  
             __end_of_ClearLCD 0E5E           moveForward@max_power 0023                 __CFG_MCLRE$OFF 000000  
              __initialization 0DEC                   __end_of_main 049E                   __end_of_stop 0C2E  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000C                         ??_main 0038  
                       ??_stop 0025                  __activetblptr 000001                         ?_E_TOG 0001  
                 ?_setMotorPWM 0016                   ?_moveForward 001F   scanForBeacon@beacon_location 0032  
             ___awdiv@dividend 000E                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i2l1704 0C4A                         i2l1716 0C66  
                       i2l1696 0C3A                         _LCDout 09CA                    SendLCD@Byte 000B  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000A                      ??_SendLCD 000B                      ??_SetLine 000C  
                display_RFID@i 000F                         ___wmul 0DC6                      ??___awdiv 0012  
             __end_of_init_LCD 08C4            init_motor_struct@mL 001F            init_motor_struct@mR 0021  
                       clear_0 0DF2               ___awdiv@quotient 0014         __size_of_scanForBeacon 004A  
            moveToBeacon@speed 002C                      ??_initPWM 000A                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 001F                         stop@mR 0021                   ?_processRFID 0001  
            _init_motor_struct 0712           __end_of_display_RFID 0D04             ?_init_motor_struct 001F  
                   __accesstop 0060        __end_of__initialization 0DFE                  ___rparam_used 000001  
                  SetLine@line 000C                  __end_of_E_TOG 0E9C            ??_init_motor_struct 0023  
               __pcstackCOMRAM 0001                  __end_of_setup 0D98                   ??_LCD_String 000E  
                      ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0036                      ?_ClearLCD 0001  
    __end_of_init_motor_struct 07FC          __end_of_classify_data 0E8E                     _check_RFID 049E  
         __size_of_init_sensor 0018                        ??_setup 000D                  ?_moveBackward 001F  
                   __pbssBANK0 007C                        ?_LCDout 0001                  _scanForBeacon 0C7A  
           __size_of_init_RFID 001A             __end_of_LCD_String 0D3A                        ?___wmul 0008  
                ?_moveToBeacon 0028                        _CAP1CON 000F63                        _DFLTCON 000F60  
                   ??_ClearLCD 000C                        _RFIDbuf 007C                        i2u99_40 0C62  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0025  
               ?_scanForBeacon 0028           __size_of_setMotorPWM 0124           __size_of_moveForward 0074  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 0026  
           __size_of_turnRight 0082                        _SendLCD 0D3A                        __Hparam 0000  
                      _SetLine 0D98                        __Lparam 0000                 ??_moveToBeacon 0034  
        processRFID@latestChar 0003                        ___awdiv 08C4                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 0008                        __pcinit 0DEC  
                      __ramtop 0300                        __ptext0 0342                        __ptext1 0BE0  
                      __ptext2 0D6A                        __ptext3 0E5E                        __ptext4 0E10  
                      __ptext5 07FC                        __ptext6 0E2A                        __ptext7 0C7A  
                      __ptext8 0948                        __ptext9 0E76              __end_of_init_RFID 0E2A  
             check_RFID@hexBuf 0012                        _initPWM 0E2A                   LCDout@number 0009  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040             moveToBeacon@micros 002E  
            stop@initial_speed 0023                    ?_check_RFID 000E           end_of_initialization 0DFE  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                    _RFID_flag 003C                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE          moveToBeacon@exit_flag 0032  
                   _robot_mode 003B                     _returnHome 0B2A                   _display_RFID 0CC4  
                    _PORTDbits 000F83              __end_of_turnRight 09CA                    returnHome@i 0034  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                ??_scanForBeacon 002E                  moveForward@mL 001F  
                moveForward@mR 0021                 __end_of_LCDout 0A42                      _TXSTAbits 000FAC  
                   main@motorL 006A                     main@motorR 0073           __end_of_moveBackward 0AB6  
          __size_of_check_RFID 0150                 __end_of___wmul 0DEC                    _BAUDCONbits 000FAA  
          start_initialization 0DEC              __size_of_ClearLCD 001A           __end_of_moveToBeacon 0BE0  
        classify_data@raw_data 0008                       ??_LCDout 0008          moveBackward@max_power 0023  
 __end_of_InterruptHandlerHigh 003E                       ??___wmul 000C                scanForBeacon@mL 0028  
              scanForBeacon@mR 002A             turnRight@max_power 0023                    ?_returnHome 0028  
                  __pbssCOMRAM 003A                  ??_init_sensor 0008                  __pcstackBANK0 0060  
            __size_of_init_LCD 00C8                       ?_SendLCD 000A                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 000E         __size_of_classify_data 0018  
           check_RFID@checksum 0023                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 0008                    __smallconst 0300                 __size_of_E_TOG 000E  
                    _init_RFID 0E10                  ??_setMotorPWM 0018                  ??_moveForward 0025  
                 ??_check_RFID 0010                 __size_of_setup 002E                check_RFID@byte1 001E  
              check_RFID@byte2 001F                check_RFID@byte3 0020                check_RFID@byte4 0021  
              check_RFID@byte5 0022            __end_of_init_sensor 0E76                 ___wmul@product 000C  
          __size_of_returnHome 005C                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
        __size_of_moveBackward 0074                    turnRight@mL 001F                    turnRight@mR 0021  
                     _PIR1bits 000F9E                       _RCONbits 000FD0             __end_of_check_RFID 05EE  
            ___wmul@multiplier 0008                   setMotorPWM@m 0016                   moveForward@i 0026  
             main@moving_speed 0068          __size_of_moveToBeacon 005A           _InterruptHandlerHigh 0008  
                     _ClearLCD 0E44                     ?_init_RFID 0001                      _turnRight 0948  
                ??_processRFID 0004                  _classify_data 0E76                 moveBackward@mL 001F  
               moveBackward@mR 0021                   _moveBackward 0A42            __end_of_setMotorPWM 0712  
          __end_of_moveForward 0B2A                    check_RFID@i 0024                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
                 __Lsmallconst 0300                   _moveToBeacon 0B86               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 0E5E  
               ?_classify_data 0008              check_RFID@dataBuf 000E                     ?_turnRight 001F  
                     __ptext10 0B2A                       __ptext11 0A42                       __ptext20 09CA  
                     __ptext12 0B86                       __ptext21 0E8E                       __ptext13 0AB6  
                     __ptext22 0712                       __ptext14 0CC4                       __ptext23 05EE  
                     __ptext15 0E44                       __ptext24 0DC6                       __ptext16 049E  
                     __ptext25 08C4                       __ptext17 0D98                       __ptext18 0D04  
                     __ptext27 0C2E                       __ptext19 0D3A          __end_of_scanForBeacon 0CC4  
                     _init_LCD 07FC                  __size_of_main 015C                  __size_of_stop 004E  
          __end_of_processRFID 0C7A             scanForBeacon@speed 002C                     turnRight@i 0026  
                     int$flags 003D                   ??_returnHome 0030                     _LCD_String 0D04  
        scanForBeacon@raw_data 0030                     _INTCONbits 000FF2                    ??_init_RFID 0008  
                  _setMotorPWM 05EE                    _moveForward 0AB6                       intlevel2 0000  
           __end_of_returnHome 0B86                     _OSCCONbits 000FD3               returnHome@micros 002E  
      moveToBeacon@RFID_buffer 0030     processRFID@position_in_buf 003A         ??_InterruptHandlerHigh 0005  
              ??_classify_data 000A                returnHome@speed 002C                    ??_turnRight 0025  
                  _processRFID 0C2E             main@movementMicros 0064                   returnHome@mL 0028  
                 returnHome@mR 002A  
