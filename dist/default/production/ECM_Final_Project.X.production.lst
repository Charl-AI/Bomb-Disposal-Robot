

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 15:18:41 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4331 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _CAP1CON	set	3939
    73  0000                     _DFLTCON	set	3936
    74  0000                     _ANSEL1	set	4025
    75  0000                     _ANSEL0	set	4024
    76  0000                     _T5CON	set	4023
    77  0000                     _IPR1bits	set	3999
    78  0000                     _PIE1bits	set	3997
    79  0000                     _RCSTAbits	set	4011
    80  0000                     _TXSTAbits	set	4012
    81  0000                     _BAUDCONbits	set	4010
    82  0000                     _SPBRGH	set	4016
    83  0000                     _SPBRG	set	4015
    84  0000                     _TRISAbits	set	3986
    85  0000                     _TRISCbits	set	3988
    86  0000                     _LATDbits	set	3980
    87  0000                     _LATCbits	set	3979
    88  0000                     _LATAbits	set	3977
    89  0000                     _LATB	set	3978
    90  0000                     _PTPERH	set	3962
    91  0000                     _PTPERL	set	3963
    92  0000                     _PWMCON1	set	3950
    93  0000                     _PWMCON0	set	3951
    94  0000                     _PTCON1	set	3966
    95  0000                     _PTCON0	set	3967
    96  0000                     _PORTDbits	set	3971
    97  0000                     _CAP1BUFL	set	3944
    98  0000                     _CAP1BUFH	set	3945
    99  0000                     _RCREG	set	4014
   100  0000                     _PIR1bits	set	3998
   101  0000                     _TRISDbits	set	3989
   102  0000                     _TRISBbits	set	3987
   103  0000                     _RCONbits	set	4048
   104  0000                     _INTCONbits	set	4082
   105  0000                     _OSCCONbits	set	4051
   106  0000                     _OSCCON	set	4051
   107  0000                     _PDC1H	set	3958
   108  0000                     _PDC1L	set	3959
   109  0000                     _PDC0H	set	3960
   110  0000                     _PDC0L	set	3961
   111                           
   112                           	psect	smallconst
   113  000300                     __psmallconst:
   114                           	opt callstack 0
   115  000300  00                 	db	0
   116  000301                     STR_3:
   117  000301  43                 	db	67	;'C'
   118  000302  48                 	db	72	;'H'
   119  000303  45                 	db	69	;'E'
   120  000304  43                 	db	67	;'C'
   121  000305  4B                 	db	75	;'K'
   122  000306  53                 	db	83	;'S'
   123  000307  55                 	db	85	;'U'
   124  000308  4D                 	db	77	;'M'
   125  000309  20                 	db	32
   126  00030A  46                 	db	70	;'F'
   127  00030B  41                 	db	65	;'A'
   128  00030C  49                 	db	73	;'I'
   129  00030D  4C                 	db	76	;'L'
   130  00030E  45                 	db	69	;'E'
   131  00030F  44                 	db	68	;'D'
   132  000310  00                 	db	0
   133  000311                     STR_2:
   134  000311  43                 	db	67	;'C'
   135  000312  48                 	db	72	;'H'
   136  000313  45                 	db	69	;'E'
   137  000314  43                 	db	67	;'C'
   138  000315  4B                 	db	75	;'K'
   139  000316  53                 	db	83	;'S'
   140  000317  55                 	db	85	;'U'
   141  000318  4D                 	db	77	;'M'
   142  000319  20                 	db	32
   143  00031A  50                 	db	80	;'P'
   144  00031B  41                 	db	65	;'A'
   145  00031C  53                 	db	83	;'S'
   146  00031D  53                 	db	83	;'S'
   147  00031E  45                 	db	69	;'E'
   148  00031F  44                 	db	68	;'D'
   149  000320  00                 	db	0
   150  000321                     STR_1:
   151  000321  52                 	db	82	;'R'
   152  000322  45                 	db	69	;'E'
   153  000323  53                 	db	83	;'S'
   154  000324  45                 	db	69	;'E'
   155  000325  54                 	db	84	;'T'
   156  000326  54                 	db	84	;'T'
   157  000327  49                 	db	73	;'I'
   158  000328  4E                 	db	78	;'N'
   159  000329  47                 	db	71	;'G'
   160  00032A  20                 	db	32
   161  00032B  52                 	db	82	;'R'
   162  00032C  4F                 	db	79	;'O'
   163  00032D  42                 	db	66	;'B'
   164  00032E  4F                 	db	79	;'O'
   165  00032F  54                 	db	84	;'T'
   166  000330  00                 	db	0
   167                           
   168                           ; #config settings
   169  000331  00                 	db	0	; dummy byte at the end
   170  0000                     
   171                           	psect	cinit
   172  000D26                     __pcinit:
   173                           	opt callstack 0
   174  000D26                     start_initialization:
   175                           	opt callstack 0
   176  000D26                     __initialization:
   177                           	opt callstack 0
   178                           
   179                           ; Clear objects allocated to COMRAM (15 bytes)
   180  000D26  EE00  F049         	lfsr	0,__pbssCOMRAM
   181  000D2A  0E0F               	movlw	15
   182  000D2C                     clear_0:
   183  000D2C  6AEE               	clrf	postinc0,c
   184  000D2E  06E8               	decf	wreg,f,c
   185  000D30  E1FD               	bnz	clear_0
   186  000D32                     end_of_initialization:
   187                           	opt callstack 0
   188  000D32                     __end_of__initialization:
   189                           	opt callstack 0
   190  000D32  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   191  000D34  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   192  000D36  0E00               	movlw	low (__Lsmallconst shr (0+16))
   193  000D38  6EF8               	movwf	tblptru,c
   194  000D3A  0E03               	movlw	high __Lsmallconst
   195  000D3C  6EF7               	movwf	tblptrh,c
   196  000D3E  0100               	movlb	0
   197  000D40  EF99  F001         	goto	_main	;jump to C main() function
   198                           
   199                           	psect	bssCOMRAM
   200  000049                     __pbssCOMRAM:
   201                           	opt callstack 0
   202  000049                     processRFID@position_in_buf:
   203                           	opt callstack 0
   204  000049                     	ds	1
   205  00004A                     _RFID_flag:
   206                           	opt callstack 0
   207  00004A                     	ds	1
   208  00004B                     _robot_mode:
   209                           	opt callstack 0
   210  00004B                     	ds	1
   211  00004C                     _RFIDbuf:
   212                           	opt callstack 0
   213  00004C                     	ds	12
   214                           
   215                           	psect	cstackCOMRAM
   216  000001                     __pcstackCOMRAM:
   217                           	opt callstack 0
   218  000001                     processRFID@RFIDbuf:
   219                           	opt callstack 0
   220                           
   221                           ; 2 bytes @ 0x0
   222  000001                     	ds	2
   223  000003                     processRFID@latestChar:
   224                           	opt callstack 0
   225                           
   226                           ; 1 bytes @ 0x2
   227  000003                     	ds	1
   228  000004                     processRFID@i:
   229                           	opt callstack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232  000004                     	ds	1
   233  000005                     ??_InterruptHandlerHigh:
   234                           
   235                           ; 1 bytes @ 0x4
   236  000005                     	ds	3
   237  000008                     ??_LCDout:
   238  000008                     ?___wmul:
   239                           	opt callstack 0
   240  000008                     initPWM@PWMperiod:
   241                           	opt callstack 0
   242  000008                     classify_data@raw_data:
   243                           	opt callstack 0
   244  000008                     ___wmul@multiplier:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0x7
   248  000008                     	ds	1
   249  000009                     LCDout@number:
   250                           	opt callstack 0
   251                           
   252                           ; 1 bytes @ 0x8
   253  000009                     	ds	1
   254  00000A                     SendLCD@type:
   255                           	opt callstack 0
   256  00000A                     ___wmul@multiplicand:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x9
   260  00000A                     	ds	1
   261  00000B                     SendLCD@Byte:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0xA
   265  00000B                     	ds	1
   266  00000C                     ??_init_LCD:
   267  00000C                     ??_ClearLCD:
   268  00000C                     SetLine@line:
   269                           	opt callstack 0
   270  00000C                     LCD_String@string:
   271                           	opt callstack 0
   272  00000C                     ___wmul@product:
   273                           	opt callstack 0
   274                           
   275                           ; 2 bytes @ 0xB
   276  00000C                     	ds	1
   277  00000D                     display_RFID@dataBuf:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0xC
   281  00000D                     	ds	1
   282  00000E                     ?___awdiv:
   283                           	opt callstack 0
   284  00000E                     check_RFID@dataBuf:
   285                           	opt callstack 0
   286  00000E                     ___awdiv@dividend:
   287                           	opt callstack 0
   288                           
   289                           ; 2 bytes @ 0xD
   290  00000E                     	ds	1
   291  00000F                     display_RFID@i:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0xE
   295  00000F                     	ds	1
   296  000010                     ??_check_RFID:
   297  000010                     ___awdiv@divisor:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0xF
   301  000010                     	ds	2
   302  000012                     ___awdiv@counter:
   303                           	opt callstack 0
   304  000012                     check_RFID@hexBuf:
   305                           	opt callstack 0
   306                           
   307                           ; 12 bytes @ 0x11
   308  000012                     	ds	1
   309  000013                     ___awdiv@sign:
   310                           	opt callstack 0
   311                           
   312                           ; 1 bytes @ 0x12
   313  000013                     	ds	1
   314  000014                     ___awdiv@quotient:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x13
   318  000014                     	ds	2
   319  000016                     setMotorPWM@m:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0x15
   323  000016                     	ds	2
   324  000018                     ??_setMotorPWM:
   325                           
   326                           ; 1 bytes @ 0x17
   327  000018                     	ds	5
   328  00001D                     setMotorPWM@PWMduty:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0x1C
   332  00001D                     	ds	1
   333  00001E                     check_RFID@byte1:
   334                           	opt callstack 0
   335                           
   336                           ; 1 bytes @ 0x1D
   337  00001E                     	ds	1
   338  00001F                     check_RFID@byte2:
   339                           	opt callstack 0
   340  00001F                     stop@mL:
   341                           	opt callstack 0
   342  00001F                     turnRight@mL:
   343                           	opt callstack 0
   344  00001F                     moveForward@mL:
   345                           	opt callstack 0
   346  00001F                     moveBackward@mL:
   347                           	opt callstack 0
   348  00001F                     init_motor_struct@mL:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0x1E
   352  00001F                     	ds	1
   353  000020                     check_RFID@byte3:
   354                           	opt callstack 0
   355                           
   356                           ; 1 bytes @ 0x1F
   357  000020                     	ds	1
   358  000021                     check_RFID@byte4:
   359                           	opt callstack 0
   360  000021                     stop@mR:
   361                           	opt callstack 0
   362  000021                     turnRight@mR:
   363                           	opt callstack 0
   364  000021                     moveForward@mR:
   365                           	opt callstack 0
   366  000021                     moveBackward@mR:
   367                           	opt callstack 0
   368  000021                     init_motor_struct@mR:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x20
   372  000021                     	ds	1
   373  000022                     check_RFID@byte5:
   374                           	opt callstack 0
   375                           
   376                           ; 1 bytes @ 0x21
   377  000022                     	ds	1
   378  000023                     ??_turnRight:
   379  000023                     check_RFID@checksum:
   380                           	opt callstack 0
   381  000023                     stop@i:
   382                           	opt callstack 0
   383  000023                     moveForward@max_power:
   384                           	opt callstack 0
   385  000023                     moveBackward@max_power:
   386                           	opt callstack 0
   387                           
   388                           ; 2 bytes @ 0x22
   389  000023                     	ds	1
   390  000024                     turnRight@i:
   391                           	opt callstack 0
   392  000024                     check_RFID@i:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x23
   396  000024                     	ds	1
   397  000025                     ??_moveForward:
   398  000025                     ??_moveBackward:
   399                           
   400                           ; 1 bytes @ 0x24
   401  000025                     	ds	1
   402  000026                     moveForward@i:
   403                           	opt callstack 0
   404  000026                     moveBackward@i:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x25
   408  000026                     	ds	2
   409  000028                     ??_main:
   410                           
   411                           ; 1 bytes @ 0x27
   412  000028                     	ds	2
   413  00002A                     main@raw_data:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x29
   417  00002A                     	ds	2
   418  00002C                     main@movementMicros:
   419                           	opt callstack 0
   420                           
   421                           ; 4 bytes @ 0x2B
   422  00002C                     	ds	4
   423  000030                     main@i:
   424                           	opt callstack 0
   425                           
   426                           ; 4 bytes @ 0x2F
   427  000030                     	ds	4
   428  000034                     main@beacon_location:
   429                           	opt callstack 0
   430                           
   431                           ; 1 bytes @ 0x33
   432  000034                     	ds	1
   433  000035                     main@i_498:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x34
   437  000035                     	ds	2
   438  000037                     main@motorL:
   439                           	opt callstack 0
   440                           
   441                           ; 9 bytes @ 0x36
   442  000037                     	ds	9
   443  000040                     main@motorR:
   444                           	opt callstack 0
   445                           
   446                           ; 9 bytes @ 0x3F
   447  000040                     	ds	9
   448                           
   449 ;;
   450 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   451 ;;
   452 ;; *************** function _main *****************
   453 ;; Defined at:
   454 ;;		line 77 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  i               2   52[COMRAM] int 
   459 ;;  i               4   47[COMRAM] unsigned long 
   460 ;;  raw_data        2   41[COMRAM] unsigned int 
   461 ;;  beacon_locat    1   51[COMRAM] unsigned char 
   462 ;;  motorR          9   63[COMRAM] struct DC_motor
   463 ;;  motorL          9   54[COMRAM] struct DC_motor
   464 ;;  movementMicr    4   43[COMRAM] unsigned long 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   474 ;;      Params:         0       0       0       0
   475 ;;      Locals:        31       0       0       0
   476 ;;      Temps:          2       0       0       0
   477 ;;      Totals:        33       0       0       0
   478 ;;Total ram usage:       33 bytes
   479 ;; Hardware stack levels required when called:    7
   480 ;; This function calls:
   481 ;;		_ClearLCD
   482 ;;		_LCD_String
   483 ;;		_check_RFID
   484 ;;		_classify_data
   485 ;;		_display_RFID
   486 ;;		_init_motor_struct
   487 ;;		_moveBackward
   488 ;;		_moveForward
   489 ;;		_setup
   490 ;;		_stop
   491 ;;		_turnRight
   492 ;; This function is called by:
   493 ;;		Startup code after reset
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           	psect	text0
   498  000332                     __ptext0:
   499                           	opt callstack 0
   500  000332                     _main:
   501                           	opt callstack 24
   502                           
   503                           ;main.c: 80:   setup();
   504                           
   505                           ;incstack = 0
   506  000332  EC52  F006         	call	_setup	;wreg free
   507                           
   508                           ;main.c: 83:   struct DC_motor motorL, motorR;;main.c: 84:   init_motor_struct(&motorL, 
      +                          &motorR);
   509  000336  0E37               	movlw	low main@motorL
   510  000338  6E1F               	movwf	init_motor_struct@mL,c
   511  00033A  0E00               	movlw	high main@motorL
   512  00033C  6E20               	movwf	init_motor_struct@mL+1,c
   513  00033E  0E40               	movlw	low main@motorR
   514  000340  6E21               	movwf	init_motor_struct@mR,c
   515  000342  0E00               	movlw	high main@motorR
   516  000344  6E22               	movwf	init_motor_struct@mR+1,c
   517  000346  ECA8  F003         	call	_init_motor_struct	;wreg free
   518                           
   519                           ;main.c: 86:   unsigned long movementMicros=0;
   520  00034A  0E00               	movlw	0
   521  00034C  6E2C               	movwf	main@movementMicros,c
   522  00034E  0E00               	movlw	0
   523  000350  6E2D               	movwf	main@movementMicros+1,c
   524  000352  0E00               	movlw	0
   525  000354  6E2E               	movwf	main@movementMicros+2,c
   526  000356  0E00               	movlw	0
   527  000358  6E2F               	movwf	main@movementMicros+3,c
   528  00035A                     l1729:
   529                           
   530                           ;main.c: 90:   {;main.c: 92:       if(robot_mode == 0)
   531  00035A  504B               	movf	_robot_mode,w,c	;volatile
   532  00035C  A4D8               	btfss	status,2,c
   533  00035E  D025               	goto	u1080
   534                           
   535                           ;main.c: 93:       {;main.c: 94:           turnRight(&motorL, &motorR);
   536  000360  0E37               	movlw	low main@motorL
   537  000362  6E1F               	movwf	turnRight@mL,c
   538  000364  0E00               	movlw	high main@motorL
   539  000366  6E20               	movwf	turnRight@mL+1,c
   540  000368  0E40               	movlw	low main@motorR
   541  00036A  6E21               	movwf	turnRight@mR,c
   542  00036C  0E00               	movlw	high main@motorR
   543  00036E  6E22               	movwf	turnRight@mR+1,c
   544  000370  ECC3  F004         	call	_turnRight	;wreg free
   545                           
   546                           ;main.c: 97:           while(robot_mode == 0)
   547  000374  D017               	goto	l80
   548  000376                     l1733:
   549                           
   550                           ;main.c: 98:           {;main.c: 100:             unsigned int raw_data = (unsigned int)
      +                          ((CAP1BUFH << 8) | CAP1BUFL);
   551  000376  5068               	movf	3944,w,c	;volatile
   552  000378  CF69 F028          	movff	3945,??_main	;volatile
   553  00037C  6A29               	clrf	(??_main+1)& (0+255),c
   554  00037E  C028  F029         	movff	??_main,??_main+1
   555  000382  6A28               	clrf	??_main,c
   556  000384  1028               	iorwf	??_main,w,c
   557  000386  6E2A               	movwf	main@raw_data,c
   558  000388  5029               	movf	??_main+1,w,c
   559  00038A  6E2B               	movwf	main@raw_data+1,c
   560                           
   561                           ;main.c: 103:             char beacon_location = classify_data(raw_data);
   562  00038C  C02A  F008         	movff	main@raw_data,classify_data@raw_data
   563  000390  C02B  F009         	movff	main@raw_data+1,classify_data@raw_data+1
   564  000394  ECD5  F006         	call	_classify_data	;wreg free
   565  000398  6E34               	movwf	main@beacon_location,c
   566                           
   567                           ;main.c: 106:             if(beacon_location == 1)
   568  00039A  0434               	decf	main@beacon_location,w,c
   569  00039C  A4D8               	btfss	status,2,c
   570  00039E  D002               	goto	l80
   571                           
   572                           ;main.c: 107:             {;main.c: 108:                 robot_mode = 1;
   573  0003A0  0E01               	movlw	1
   574  0003A2  6E4B               	movwf	_robot_mode,c	;volatile
   575  0003A4                     l80:
   576                           
   577                           ;main.c: 97:           while(robot_mode == 0)
   578  0003A4  504B               	movf	_robot_mode,w,c	;volatile
   579  0003A6  B4D8               	btfsc	status,2,c
   580  0003A8  D7E6               	goto	l1733
   581  0003AA                     u1080:
   582                           
   583                           ;main.c: 114:       if(robot_mode == 1)
   584  0003AA  044B               	decf	_robot_mode,w,c	;volatile
   585  0003AC  A4D8               	btfss	status,2,c
   586  0003AE  D02C               	goto	u1110
   587                           
   588                           ;main.c: 115:       {;main.c: 116:           moveForward(&motorL, &motorR,75);
   589  0003B0  0E37               	movlw	low main@motorL
   590  0003B2  6E1F               	movwf	moveForward@mL,c
   591  0003B4  0E00               	movlw	high main@motorL
   592  0003B6  6E20               	movwf	moveForward@mL+1,c
   593  0003B8  0E40               	movlw	low main@motorR
   594  0003BA  6E21               	movwf	moveForward@mR,c
   595  0003BC  0E00               	movlw	high main@motorR
   596  0003BE  6E22               	movwf	moveForward@mR+1,c
   597  0003C0  0E00               	movlw	0
   598  0003C2  6E24               	movwf	moveForward@max_power+1,c
   599  0003C4  0E4B               	movlw	75
   600  0003C6  6E23               	movwf	moveForward@max_power,c
   601  0003C8  EC3E  F005         	call	_moveForward	;wreg free
   602                           
   603                           ;main.c: 119:           while(robot_mode == 1)
   604  0003CC  D01A               	goto	l1755
   605  0003CE                     l86:
   606                           
   607                           ;main.c: 120:           {;main.c: 121:               _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
   608  0003CE  D000               	nop2		;2 cycle nop
   609                           
   610                           ;main.c: 122:               movementMicros += 1;
   611  0003D0  0E01               	movlw	1
   612  0003D2  262C               	addwf	main@movementMicros,f,c
   613  0003D4  0E00               	movlw	0
   614  0003D6  222D               	addwfc	main@movementMicros+1,f,c
   615  0003D8  222E               	addwfc	main@movementMicros+2,f,c
   616  0003DA  222F               	addwfc	main@movementMicros+3,f,c
   617                           
   618                           ;main.c: 126:               if(RFID_flag == 1)
   619  0003DC  044A               	decf	_RFID_flag,w,c	;volatile
   620  0003DE  A4D8               	btfss	status,2,c
   621  0003E0  D010               	goto	l1755
   622                           
   623                           ;main.c: 127:               {;main.c: 128:                   display_RFID(RFIDbuf);
   624  0003E2  0E4C               	movlw	low _RFIDbuf
   625  0003E4  6E0D               	movwf	display_RFID@dataBuf,c
   626  0003E6  0E00               	movlw	high _RFIDbuf
   627  0003E8  6E0E               	movwf	display_RFID@dataBuf+1,c
   628  0003EA  ECFF  F005         	call	_display_RFID	;wreg free
   629                           
   630                           ;main.c: 129:                   check_RFID(RFIDbuf);
   631  0003EE  0E4C               	movlw	low _RFIDbuf
   632  0003F0  6E0E               	movwf	check_RFID@dataBuf,c
   633  0003F2  0E00               	movlw	high _RFIDbuf
   634  0003F4  6E0F               	movwf	check_RFID@dataBuf+1,c
   635  0003F6  EC6E  F002         	call	_check_RFID	;wreg free
   636                           
   637                           ;main.c: 130:                   robot_mode = 2;
   638  0003FA  0E02               	movlw	2
   639  0003FC  6E4B               	movwf	_robot_mode,c	;volatile
   640                           
   641                           ;main.c: 131:                   RFID_flag = 0;
   642  0003FE  0E00               	movlw	0
   643  000400  6E4A               	movwf	_RFID_flag,c	;volatile
   644  000402                     l1755:
   645                           
   646                           ;main.c: 119:           while(robot_mode == 1)
   647  000402  044B               	decf	_robot_mode,w,c	;volatile
   648  000404  B4D8               	btfsc	status,2,c
   649  000406  D7E3               	goto	l86
   650  000408                     u1110:
   651                           
   652                           ;main.c: 137:       if(robot_mode == 2)
   653  000408  0E02               	movlw	2
   654  00040A  184B               	xorwf	_robot_mode,w,c	;volatile
   655  00040C  A4D8               	btfss	status,2,c
   656  00040E  D02A               	goto	l1767
   657                           
   658                           ;main.c: 138:       {;main.c: 139:           moveBackward(&motorL,&motorR,75);
   659  000410  0E37               	movlw	low main@motorL
   660  000412  6E1F               	movwf	moveBackward@mL,c
   661  000414  0E00               	movlw	high main@motorL
   662  000416  6E20               	movwf	moveBackward@mL+1,c
   663  000418  0E40               	movlw	low main@motorR
   664  00041A  6E21               	movwf	moveBackward@mR,c
   665  00041C  0E00               	movlw	high main@motorR
   666  00041E  6E22               	movwf	moveBackward@mR+1,c
   667  000420  0E00               	movlw	0
   668  000422  6E24               	movwf	moveBackward@max_power+1,c
   669  000424  0E4B               	movlw	75
   670  000426  6E23               	movwf	moveBackward@max_power,c
   671  000428  EC78  F005         	call	_moveBackward	;wreg free
   672                           
   673                           ;main.c: 141:           for(unsigned long i=0; i<movementMicros;i++)
   674  00042C  0E00               	movlw	0
   675  00042E  6E30               	movwf	main@i,c
   676  000430  0E00               	movlw	0
   677  000432  6E31               	movwf	main@i+1,c
   678  000434  0E00               	movlw	0
   679  000436  6E32               	movwf	main@i+2,c
   680  000438  0E00               	movlw	0
   681  00043A  6E33               	movwf	main@i+3,c
   682  00043C  D007               	goto	l90
   683  00043E                     l91:
   684                           
   685                           ;main.c: 142:           {;main.c: 143:               _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
   686  00043E  D000               	nop2		;2 cycle nop
   687                           
   688                           ;main.c: 144:           }
   689  000440  0E01               	movlw	1
   690  000442  2630               	addwf	main@i,f,c
   691  000444  0E00               	movlw	0
   692  000446  2231               	addwfc	main@i+1,f,c
   693  000448  2232               	addwfc	main@i+2,f,c
   694  00044A  2233               	addwfc	main@i+3,f,c
   695  00044C                     l90:
   696  00044C  502C               	movf	main@movementMicros,w,c
   697  00044E  5C30               	subwf	main@i,w,c
   698  000450  502D               	movf	main@movementMicros+1,w,c
   699  000452  5831               	subwfb	main@i+1,w,c
   700  000454  502E               	movf	main@movementMicros+2,w,c
   701  000456  5832               	subwfb	main@i+2,w,c
   702  000458  502F               	movf	main@movementMicros+3,w,c
   703  00045A  5833               	subwfb	main@i+3,w,c
   704  00045C  A0D8               	btfss	status,0,c
   705  00045E  D7EF               	goto	l91
   706                           
   707                           ;main.c: 145:           robot_mode = 3;
   708  000460  0E03               	movlw	3
   709  000462  6E4B               	movwf	_robot_mode,c	;volatile
   710  000464                     l1767:
   711                           
   712                           ;main.c: 149:       if(robot_mode == 3)
   713  000464  0E03               	movlw	3
   714  000466  184B               	xorwf	_robot_mode,w,c	;volatile
   715  000468  A4D8               	btfss	status,2,c
   716  00046A  D777               	goto	l1729
   717                           
   718                           ;main.c: 150:       {;main.c: 151:           stop(&motorL, &motorR);
   719  00046C  0E37               	movlw	low main@motorL
   720  00046E  6E1F               	movwf	stop@mL,c
   721  000470  0E00               	movlw	high main@motorL
   722  000472  6E20               	movwf	stop@mL+1,c
   723  000474  0E40               	movlw	low main@motorR
   724  000476  6E21               	movwf	stop@mR,c
   725  000478  0E00               	movlw	high main@motorR
   726  00047A  6E22               	movwf	stop@mR+1,c
   727  00047C  ECB2  F005         	call	_stop	;wreg free
   728                           
   729                           ;main.c: 153:           while(robot_mode == 3)
   730  000480  D028               	goto	u1160
   731  000482                     l1771:
   732                           
   733                           ;main.c: 156:               {;main.c: 157:                   ClearLCD();
   734  000482  ECBC  F006         	call	_ClearLCD	;wreg free
   735                           
   736                           ;main.c: 158:                   LCD_String("RESETTING ROBOT");
   737  000486  0E21               	movlw	low STR_1
   738  000488  6E0C               	movwf	LCD_String@string,c
   739  00048A  0E03               	movlw	high STR_1
   740  00048C  6E0D               	movwf	LCD_String@string+1,c
   741  00048E  EC1F  F006         	call	_LCD_String	;wreg free
   742                           
   743                           ;main.c: 159:                   for(int i=0; i<10;i++)
   744  000492  0E00               	movlw	0
   745  000494  6E36               	movwf	main@i_498+1,c
   746  000496  0E00               	movlw	0
   747  000498  6E35               	movwf	main@i_498,c
   748  00049A                     l1781:
   749                           
   750                           ;main.c: 160:                   {;main.c: 161:                       _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
   751  00049A  0E02               	movlw	2
   752  00049C  6E29               	movwf	(??_main+1)& (0+255),c
   753  00049E  0E04               	movlw	4
   754  0004A0  6E28               	movwf	??_main& (0+255),c
   755  0004A2  0EBA               	movlw	186
   756  0004A4                     u1197:
   757  0004A4  2EE8               	decfsz	wreg,f,c
   758  0004A6  D7FE               	bra	u1197
   759  0004A8  2E28               	decfsz	??_main& (0+255),f,c
   760  0004AA  D7FC               	bra	u1197
   761  0004AC  2E29               	decfsz	(??_main+1)& (0+255),f,c
   762  0004AE  D7FA               	bra	u1197
   763  0004B0  D000               	nop2	
   764                           
   765                           ;main.c: 162:                   }
   766  0004B2  4A35               	infsnz	main@i_498,f,c
   767  0004B4  2A36               	incf	main@i_498+1,f,c
   768  0004B6  BE36               	btfsc	main@i_498+1,7,c
   769  0004B8  D7F0               	goto	l1781
   770  0004BA  5036               	movf	main@i_498+1,w,c
   771  0004BC  E104               	bnz	u1150
   772  0004BE  0E0A               	movlw	10
   773  0004C0  5C35               	subwf	main@i_498,w,c
   774  0004C2  A0D8               	btfss	status,0,c
   775  0004C4  D7EA               	goto	l1781
   776  0004C6                     u1150:
   777                           
   778                           ;main.c: 163:                   ClearLCD();
   779  0004C6  ECBC  F006         	call	_ClearLCD	;wreg free
   780                           
   781                           ;main.c: 164:                   robot_mode = 0;
   782  0004CA  0E00               	movlw	0
   783  0004CC  6E4B               	movwf	_robot_mode,c	;volatile
   784  0004CE                     l1789:
   785                           
   786                           ;main.c: 155:               while(PORTDbits.RD2 == 1)
   787  0004CE  B483               	btfsc	3971,2,c	;volatile
   788  0004D0  D7D8               	goto	l1771
   789  0004D2                     u1160:
   790                           
   791                           ;main.c: 153:           while(robot_mode == 3)
   792  0004D2  0E03               	movlw	3
   793  0004D4  184B               	xorwf	_robot_mode,w,c	;volatile
   794  0004D6  A4D8               	btfss	status,2,c
   795  0004D8  D740               	goto	l1729
   796  0004DA  D7F9               	goto	l1789
   797  0004DC                     __end_of_main:
   798                           	opt callstack 0
   799                           
   800 ;; *************** function _turnRight *****************
   801 ;; Defined at:
   802 ;;		line 68 in file "dc_motor.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   805 ;;		 -> main@motorL(9), 
   806 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   807 ;;		 -> main@motorR(9), 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  i               2   35[COMRAM] int 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   819 ;;      Params:         4       0       0       0
   820 ;;      Locals:         2       0       0       0
   821 ;;      Temps:          1       0       0       0
   822 ;;      Totals:         7       0       0       0
   823 ;;Total ram usage:        7 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    4
   826 ;; This function calls:
   827 ;;		_setMotorPWM
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text1
   834  000986                     __ptext1:
   835                           	opt callstack 0
   836  000986                     _turnRight:
   837                           	opt callstack 26
   838                           
   839                           ;dc_motor.c: 68: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 69
      +                          : {;dc_motor.c: 71:     mL->direction = 1;
   840                           
   841                           ;incstack = 0
   842  000986  EE20 F001          	lfsr	2,1
   843  00098A  501F               	movf	turnRight@mL,w,c
   844  00098C  26D9               	addwf	fsr2l,f,c
   845  00098E  5020               	movf	turnRight@mL+1,w,c
   846  000990  22DA               	addwfc	fsr2h,f,c
   847  000992  0E01               	movlw	1
   848  000994  6EDF               	movwf	indf2,c
   849                           
   850                           ;dc_motor.c: 72:     mR->direction = 0;
   851  000996  EE20 F001          	lfsr	2,1
   852  00099A  5021               	movf	turnRight@mR,w,c
   853  00099C  26D9               	addwf	fsr2l,f,c
   854  00099E  5022               	movf	turnRight@mR+1,w,c
   855  0009A0  22DA               	addwfc	fsr2h,f,c
   856  0009A2  0E00               	movlw	0
   857  0009A4  6EDF               	movwf	indf2,c
   858                           
   859                           ;dc_motor.c: 74:     for(int i = 0; i<50;i++){
   860  0009A6  0E00               	movlw	0
   861  0009A8  6E25               	movwf	turnRight@i+1,c
   862  0009AA  0E00               	movlw	0
   863  0009AC  6E24               	movwf	turnRight@i,c
   864  0009AE                     l1603:
   865                           
   866                           ;dc_motor.c: 75:         mL->power = i;
   867  0009AE  C01F  FFD9         	movff	turnRight@mL,fsr2l
   868  0009B2  C020  FFDA         	movff	turnRight@mL+1,fsr2h
   869  0009B6  C024  FFDF         	movff	turnRight@i,indf2
   870                           
   871                           ;dc_motor.c: 76:         mR->power = i;
   872  0009BA  C021  FFD9         	movff	turnRight@mR,fsr2l
   873  0009BE  C022  FFDA         	movff	turnRight@mR+1,fsr2h
   874  0009C2  C024  FFDF         	movff	turnRight@i,indf2
   875                           
   876                           ;dc_motor.c: 78:         setMotorPWM(mL);
   877  0009C6  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
   878  0009CA  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
   879  0009CE  EC16  F003         	call	_setMotorPWM	;wreg free
   880                           
   881                           ;dc_motor.c: 79:         setMotorPWM(mR);
   882  0009D2  C021  F016         	movff	turnRight@mR,setMotorPWM@m
   883  0009D6  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
   884  0009DA  EC16  F003         	call	_setMotorPWM	;wreg free
   885                           
   886                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
   887  0009DE  0E03               	movlw	3
   888  0009E0  6E23               	movwf	??_turnRight& (0+255),c
   889  0009E2  0E98               	movlw	152
   890  0009E4                     u1207:
   891  0009E4  2EE8               	decfsz	wreg,f,c
   892  0009E6  D7FE               	bra	u1207
   893  0009E8  2E23               	decfsz	??_turnRight& (0+255),f,c
   894  0009EA  D7FC               	bra	u1207
   895                           
   896                           ;dc_motor.c: 81:     }
   897  0009EC  4A24               	infsnz	turnRight@i,f,c
   898  0009EE  2A25               	incf	turnRight@i+1,f,c
   899  0009F0  BE25               	btfsc	turnRight@i+1,7,c
   900  0009F2  D7DD               	goto	l1603
   901  0009F4  5025               	movf	turnRight@i+1,w,c
   902  0009F6  E105               	bnz	u780
   903  0009F8  0E32               	movlw	50
   904  0009FA  5C24               	subwf	turnRight@i,w,c
   905  0009FC  B0D8               	btfsc	status,0,c
   906  0009FE  0012               	return	
   907  000A00  D7D6               	goto	l1603
   908  000A02                     u780:
   909  000A02  0012               	return		;funcret
   910  000A04                     __end_of_turnRight:
   911                           	opt callstack 0
   912                           
   913 ;; *************** function _stop *****************
   914 ;; Defined at:
   915 ;;		line 40 in file "dc_motor.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   918 ;;		 -> main@motorL(9), 
   919 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   920 ;;		 -> main@motorR(9), 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  i               2   34[COMRAM] int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   932 ;;      Params:         4       0       0       0
   933 ;;      Locals:         2       0       0       0
   934 ;;      Temps:          0       0       0       0
   935 ;;      Totals:         6       0       0       0
   936 ;;Total ram usage:        6 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    4
   939 ;; This function calls:
   940 ;;		_setMotorPWM
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text2
   947  000B64                     __ptext2:
   948                           	opt callstack 0
   949  000B64                     _stop:
   950                           	opt callstack 26
   951                           
   952                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 41: {;d
      +                          c_motor.c: 42:  for(int i = 50; i > 0; i--)
   953                           
   954                           ;incstack = 0
   955  000B64  0E00               	movlw	0
   956  000B66  6E24               	movwf	stop@i+1,c
   957  000B68  0E32               	movlw	50
   958  000B6A  6E23               	movwf	stop@i,c
   959  000B6C                     l1707:
   960                           
   961                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
   962  000B6C  C01F  FFD9         	movff	stop@mL,fsr2l
   963  000B70  C020  FFDA         	movff	stop@mL+1,fsr2h
   964  000B74  C023  FFDF         	movff	stop@i,indf2
   965                           
   966                           ;dc_motor.c: 45:         mR->power = i;
   967  000B78  C021  FFD9         	movff	stop@mR,fsr2l
   968  000B7C  C022  FFDA         	movff	stop@mR+1,fsr2h
   969  000B80  C023  FFDF         	movff	stop@i,indf2
   970                           
   971                           ;dc_motor.c: 46:         setMotorPWM(mL);
   972  000B84  C01F  F016         	movff	stop@mL,setMotorPWM@m
   973  000B88  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
   974  000B8C  EC16  F003         	call	_setMotorPWM	;wreg free
   975                           
   976                           ;dc_motor.c: 47:         setMotorPWM(mR);
   977  000B90  C021  F016         	movff	stop@mR,setMotorPWM@m
   978  000B94  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
   979  000B98  EC16  F003         	call	_setMotorPWM	;wreg free
   980                           
   981                           ;dc_motor.c: 48:     }
   982  000B9C  0623               	decf	stop@i,f,c
   983  000B9E  A0D8               	btfss	status,0,c
   984  000BA0  0624               	decf	stop@i+1,f,c
   985  000BA2  BE24               	btfsc	stop@i+1,7,c
   986  000BA4  0012               	return	
   987  000BA6  5024               	movf	stop@i+1,w,c
   988  000BA8  E1E1               	bnz	l1707
   989  000BAA  0423               	decf	stop@i,w,c
   990  000BAC  A0D8               	btfss	status,0,c
   991  000BAE  0012               	return	
   992  000BB0  D7DD               	goto	l1707
   993  000BB2                     __end_of_stop:
   994                           	opt callstack 0
   995                           
   996 ;; *************** function _setup *****************
   997 ;; Defined at:
   998 ;;		line 38 in file "main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1012 ;;      Params:         0       0       0       0
  1013 ;;      Locals:         0       0       0       0
  1014 ;;      Temps:          0       0       0       0
  1015 ;;      Totals:         0       0       0       0
  1016 ;;Total ram usage:        0 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    6
  1019 ;; This function calls:
  1020 ;;		_initPWM
  1021 ;;		_init_LCD
  1022 ;;		_init_RFID
  1023 ;;		_init_sensor
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text3
  1030  000CA4                     __ptext3:
  1031                           	opt callstack 0
  1032  000CA4                     _setup:
  1033                           	opt callstack 24
  1034                           
  1035                           ;main.c: 41:     OSCCON = 0x72;
  1036                           
  1037                           ;incstack = 0
  1038  000CA4  0E72               	movlw	114
  1039  000CA6  6ED3               	movwf	4051,c	;volatile
  1040  000CA8                     l63:
  1041  000CA8  A4D3               	btfss	4051,2,c	;volatile
  1042  000CAA  D7FE               	goto	l63
  1043                           
  1044                           ;main.c: 43:     INTCONbits.GIEH = 1;
  1045  000CAC  8EF2               	bsf	4082,7,c	;volatile
  1046                           
  1047                           ;main.c: 44:     INTCONbits.GIEL = 1;
  1048  000CAE  8CF2               	bsf	4082,6,c	;volatile
  1049                           
  1050                           ;main.c: 45:     RCONbits.IPEN=1;
  1051  000CB0  8ED0               	bsf	4048,7,c	;volatile
  1052                           
  1053                           ;main.c: 48:     init_LCD();
  1054  000CB2  EC1D  F004         	call	_init_LCD	;wreg free
  1055                           
  1056                           ;main.c: 49:     init_RFID();
  1057  000CB6  ECA2  F006         	call	_init_RFID	;wreg free
  1058                           
  1059                           ;main.c: 50:     init_sensor();
  1060  000CBA  ECC9  F006         	call	_init_sensor	;wreg free
  1061                           
  1062                           ;main.c: 51:     initPWM(199);
  1063  000CBE  0E00               	movlw	0
  1064  000CC0  6E09               	movwf	initPWM@PWMperiod+1,c
  1065  000CC2  0EC7               	movlw	199
  1066  000CC4  6E08               	movwf	initPWM@PWMperiod,c
  1067  000CC6  ECAF  F006         	call	_initPWM	;wreg free
  1068                           
  1069                           ;main.c: 53:     TRISBbits.RB0 = 0;
  1070  000CCA  9093               	bcf	3987,0,c	;volatile
  1071                           
  1072                           ;main.c: 54:     TRISBbits.RB2 = 0;
  1073  000CCC  9493               	bcf	3987,2,c	;volatile
  1074                           
  1075                           ;main.c: 55:     TRISDbits.RD2 = 1;
  1076  000CCE  8495               	bsf	3989,2,c	;volatile
  1077  000CD0  0012               	return		;funcret
  1078  000CD2                     __end_of_setup:
  1079                           	opt callstack 0
  1080                           
  1081 ;; *************** function _init_sensor *****************
  1082 ;; Defined at:
  1083 ;;		line 14 in file "signal_processing.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1097 ;;      Params:         0       0       0       0
  1098 ;;      Locals:         0       0       0       0
  1099 ;;      Temps:          0       0       0       0
  1100 ;;      Totals:         0       0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    2
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_setup
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text4
  1112  000D92                     __ptext4:
  1113                           	opt callstack 0
  1114  000D92                     _init_sensor:
  1115                           	opt callstack 27
  1116                           
  1117                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1118                           
  1119                           ;incstack = 0
  1120  000D92  0E01               	movlw	1
  1121  000D94  6EB7               	movwf	4023,c	;volatile
  1122                           
  1123                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1124  000D96  8492               	bsf	3986,2,c	;volatile
  1125                           
  1126                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1127  000D98  0E00               	movlw	0
  1128  000D9A  6EB8               	movwf	4024,c	;volatile
  1129                           
  1130                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1131  000D9C  0E00               	movlw	0
  1132  000D9E  6EB9               	movwf	4025,c	;volatile
  1133                           
  1134                           ;signal_processing.c: 23:     DFLTCON = 0b00011000;
  1135  000DA0  0E18               	movlw	24
  1136  000DA2  6E60               	movwf	3936,c	;volatile
  1137                           
  1138                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1139  000DA4  0E47               	movlw	71
  1140  000DA6  6E63               	movwf	3939,c	;volatile
  1141  000DA8  0012               	return		;funcret
  1142  000DAA                     __end_of_init_sensor:
  1143                           	opt callstack 0
  1144                           
  1145 ;; *************** function _init_RFID *****************
  1146 ;; Defined at:
  1147 ;;		line 13 in file "RFID.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1161 ;;      Params:         0       0       0       0
  1162 ;;      Locals:         0       0       0       0
  1163 ;;      Temps:          0       0       0       0
  1164 ;;      Totals:         0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    2
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_setup
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text5
  1176  000D44                     __ptext5:
  1177                           	opt callstack 0
  1178  000D44                     _init_RFID:
  1179                           	opt callstack 27
  1180                           
  1181                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1182                           
  1183                           ;incstack = 0
  1184  000D44  8E94               	bsf	3988,7,c	;volatile
  1185                           
  1186                           ;RFID.c: 19:     SPBRG = 203;
  1187  000D46  0ECB               	movlw	203
  1188  000D48  6EAF               	movwf	4015,c	;volatile
  1189                           
  1190                           ;RFID.c: 20:     SPBRGH = 0;
  1191  000D4A  0E00               	movlw	0
  1192  000D4C  6EB0               	movwf	4016,c	;volatile
  1193                           
  1194                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1195  000D4E  86AA               	bsf	4010,3,c	;volatile
  1196                           
  1197                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1198  000D50  84AC               	bsf	4012,2,c	;volatile
  1199                           
  1200                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1201  000D52  88AB               	bsf	4011,4,c	;volatile
  1202                           
  1203                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1204  000D54  8EAB               	bsf	4011,7,c	;volatile
  1205                           
  1206                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1207  000D56  8AAC               	bsf	4012,5,c	;volatile
  1208                           
  1209                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1210  000D58  8A9D               	bsf	3997,5,c	;volatile
  1211                           
  1212                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1213  000D5A  8A9F               	bsf	3999,5,c	;volatile
  1214  000D5C  0012               	return		;funcret
  1215  000D5E                     __end_of_init_RFID:
  1216                           	opt callstack 0
  1217                           
  1218 ;; *************** function _init_LCD *****************
  1219 ;; Defined at:
  1220 ;;		line 56 in file "LCDIO.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;		None
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1234 ;;      Params:         0       0       0       0
  1235 ;;      Locals:         0       0       0       0
  1236 ;;      Temps:          1       0       0       0
  1237 ;;      Totals:         1       0       0       0
  1238 ;;Total ram usage:        1 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    5
  1241 ;; This function calls:
  1242 ;;		_LCDout
  1243 ;;		_SendLCD
  1244 ;; This function is called by:
  1245 ;;		_setup
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text6
  1250  00083A                     __ptext6:
  1251                           	opt callstack 0
  1252  00083A                     _init_LCD:
  1253                           	opt callstack 24
  1254                           
  1255                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1256                           
  1257                           ;incstack = 0
  1258  00083A  9094               	bcf	3988,0,c	;volatile
  1259                           
  1260                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1261  00083C  9E92               	bcf	3986,7,c	;volatile
  1262                           
  1263                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1264  00083E  9694               	bcf	3988,3,c	;volatile
  1265                           
  1266                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1267  000840  9095               	bcf	3989,0,c	;volatile
  1268                           
  1269                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1270  000842  9295               	bcf	3989,1,c	;volatile
  1271                           
  1272                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1273  000844  9C92               	bcf	3986,6,c	;volatile
  1274                           
  1275                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1276  000846  908C               	bcf	3980,0,c	;volatile
  1277                           
  1278                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1279  000848  928C               	bcf	3980,1,c	;volatile
  1280                           
  1281                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1282  00084A  968B               	bcf	3979,3,c	;volatile
  1283                           
  1284                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1285  00084C  908B               	bcf	3979,0,c	;volatile
  1286                           
  1287                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1288  00084E  9C89               	bcf	3977,6,c	;volatile
  1289                           
  1290                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1291  000850  9E89               	bcf	3977,7,c	;volatile
  1292                           
  1293                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1294  000852  0E27               	movlw	39
  1295  000854  6E0C               	movwf	??_init_LCD& (0+255),c
  1296  000856  0EF5               	movlw	245
  1297  000858                     u1217:
  1298  000858  2EE8               	decfsz	wreg,f,c
  1299  00085A  D7FE               	bra	u1217
  1300  00085C  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1301  00085E  D7FC               	bra	u1217
  1302  000860  F000               	nop	
  1303                           
  1304                           ;LCDIO.c: 76:  LCDout(0b0011);
  1305  000862  0E03               	movlw	3
  1306  000864  EC02  F005         	call	_LCDout
  1307                           
  1308                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1309  000868  0E0D               	movlw	13
  1310  00086A  6E0C               	movwf	??_init_LCD& (0+255),c
  1311  00086C  0EFC               	movlw	252
  1312  00086E                     u1227:
  1313  00086E  2EE8               	decfsz	wreg,f,c
  1314  000870  D7FE               	bra	u1227
  1315  000872  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1316  000874  D7FC               	bra	u1227
  1317                           
  1318                           ;LCDIO.c: 78:  LCDout(0b0011);
  1319  000876  0E03               	movlw	3
  1320  000878  EC02  F005         	call	_LCDout
  1321                           
  1322                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1323  00087C  0E85               	movlw	133
  1324  00087E                     u1237:
  1325  00087E  2EE8               	decfsz	wreg,f,c
  1326  000880  D7FE               	bra	u1237
  1327  000882  F000               	nop	
  1328                           
  1329                           ;LCDIO.c: 80:  LCDout(0b0011);
  1330  000884  0E03               	movlw	3
  1331  000886  EC02  F005         	call	_LCDout
  1332                           
  1333                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1334  00088A  0E21               	movlw	33
  1335  00088C                     u1247:
  1336  00088C  2EE8               	decfsz	wreg,f,c
  1337  00088E  D7FE               	bra	u1247
  1338  000890  F000               	nop	
  1339                           
  1340                           ;LCDIO.c: 82:  LCDout(0b0010);
  1341  000892  0E02               	movlw	2
  1342  000894  EC02  F005         	call	_LCDout
  1343                           
  1344                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1345  000898  0E21               	movlw	33
  1346  00089A                     u1257:
  1347  00089A  2EE8               	decfsz	wreg,f,c
  1348  00089C  D7FE               	bra	u1257
  1349  00089E  F000               	nop	
  1350                           
  1351                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1352  0008A0  0E00               	movlw	0
  1353  0008A2  6E0A               	movwf	SendLCD@type,c
  1354  0008A4  0E28               	movlw	40
  1355  0008A6  EC3A  F006         	call	_SendLCD
  1356                           
  1357                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1358  0008AA  0E21               	movlw	33
  1359  0008AC                     u1267:
  1360  0008AC  2EE8               	decfsz	wreg,f,c
  1361  0008AE  D7FE               	bra	u1267
  1362  0008B0  F000               	nop	
  1363                           
  1364                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1365  0008B2  0E00               	movlw	0
  1366  0008B4  6E0A               	movwf	SendLCD@type,c
  1367  0008B6  0E08               	movlw	8
  1368  0008B8  EC3A  F006         	call	_SendLCD
  1369                           
  1370                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1371  0008BC  0E21               	movlw	33
  1372  0008BE                     u1277:
  1373  0008BE  2EE8               	decfsz	wreg,f,c
  1374  0008C0  D7FE               	bra	u1277
  1375  0008C2  F000               	nop	
  1376                           
  1377                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1378  0008C4  0E00               	movlw	0
  1379  0008C6  6E0A               	movwf	SendLCD@type,c
  1380  0008C8  0E01               	movlw	1
  1381  0008CA  EC3A  F006         	call	_SendLCD
  1382                           
  1383                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1384  0008CE  0E0D               	movlw	13
  1385  0008D0  6E0C               	movwf	??_init_LCD& (0+255),c
  1386  0008D2  0EFC               	movlw	252
  1387  0008D4                     u1287:
  1388  0008D4  2EE8               	decfsz	wreg,f,c
  1389  0008D6  D7FE               	bra	u1287
  1390  0008D8  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1391  0008DA  D7FC               	bra	u1287
  1392                           
  1393                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1394  0008DC  0E00               	movlw	0
  1395  0008DE  6E0A               	movwf	SendLCD@type,c
  1396  0008E0  0E06               	movlw	6
  1397  0008E2  EC3A  F006         	call	_SendLCD
  1398                           
  1399                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1400  0008E6  0E21               	movlw	33
  1401  0008E8                     u1297:
  1402  0008E8  2EE8               	decfsz	wreg,f,c
  1403  0008EA  D7FE               	bra	u1297
  1404  0008EC  F000               	nop	
  1405                           
  1406                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1407  0008EE  0E00               	movlw	0
  1408  0008F0  6E0A               	movwf	SendLCD@type,c
  1409  0008F2  0E0C               	movlw	12
  1410  0008F4  EC3A  F006         	call	_SendLCD
  1411                           
  1412                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1413  0008F8  0E21               	movlw	33
  1414  0008FA                     u1307:
  1415  0008FA  2EE8               	decfsz	wreg,f,c
  1416  0008FC  D7FE               	bra	u1307
  1417  0008FE  F000               	nop	
  1418  000900  0012               	return		;funcret
  1419  000902                     __end_of_init_LCD:
  1420                           	opt callstack 0
  1421                           
  1422 ;; *************** function _initPWM *****************
  1423 ;; Defined at:
  1424 ;;		line 5 in file "dc_motor.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  PWMperiod       2    7[COMRAM] int 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;                  1    wreg      void 
  1431 ;; Registers used:
  1432 ;;		wreg, status,2
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : 0/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1438 ;;      Params:         2       0       0       0
  1439 ;;      Locals:         0       0       0       0
  1440 ;;      Temps:          0       0       0       0
  1441 ;;      Totals:         2       0       0       0
  1442 ;;Total ram usage:        2 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    2
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_setup
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text7
  1453  000D5E                     __ptext7:
  1454                           	opt callstack 0
  1455  000D5E                     _initPWM:
  1456                           	opt callstack 27
  1457                           
  1458                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1459                           
  1460                           ;incstack = 0
  1461  000D5E  0E00               	movlw	0
  1462  000D60  6E7F               	movwf	3967,c	;volatile
  1463                           
  1464                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1465  000D62  0E80               	movlw	128
  1466  000D64  6E7E               	movwf	3966,c	;volatile
  1467                           
  1468                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1469  000D66  0E6F               	movlw	111
  1470  000D68  6E6F               	movwf	3951,c	;volatile
  1471                           
  1472                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1473  000D6A  0E00               	movlw	0
  1474  000D6C  6E6E               	movwf	3950,c	;volatile
  1475                           
  1476                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1477  000D6E  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1478                           
  1479                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1480  000D72  5009               	movf	initPWM@PWMperiod+1,w,c
  1481  000D74  6E7A               	movwf	3962,c	;volatile
  1482  000D76  0012               	return		;funcret
  1483  000D78                     __end_of_initPWM:
  1484                           	opt callstack 0
  1485                           
  1486 ;; *************** function _moveForward *****************
  1487 ;; Defined at:
  1488 ;;		line 85 in file "dc_motor.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1491 ;;		 -> main@motorL(9), 
  1492 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1493 ;;		 -> main@motorR(9), 
  1494 ;;  max_power       2   34[COMRAM] int 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  i               2   37[COMRAM] int 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1506 ;;      Params:         6       0       0       0
  1507 ;;      Locals:         2       0       0       0
  1508 ;;      Temps:          1       0       0       0
  1509 ;;      Totals:         9       0       0       0
  1510 ;;Total ram usage:        9 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    4
  1513 ;; This function calls:
  1514 ;;		_setMotorPWM
  1515 ;; This function is called by:
  1516 ;;		_main
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text8
  1521  000A7C                     __ptext8:
  1522                           	opt callstack 0
  1523  000A7C                     _moveForward:
  1524                           	opt callstack 26
  1525                           
  1526                           ;dc_motor.c: 85: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 1;
  1527                           
  1528                           ;incstack = 0
  1529  000A7C  EE20 F001          	lfsr	2,1
  1530  000A80  501F               	movf	moveForward@mL,w,c
  1531  000A82  26D9               	addwf	fsr2l,f,c
  1532  000A84  5020               	movf	moveForward@mL+1,w,c
  1533  000A86  22DA               	addwfc	fsr2h,f,c
  1534  000A88  0E01               	movlw	1
  1535  000A8A  6EDF               	movwf	indf2,c
  1536                           
  1537                           ;dc_motor.c: 88:     mR->direction = 1;
  1538  000A8C  EE20 F001          	lfsr	2,1
  1539  000A90  5021               	movf	moveForward@mR,w,c
  1540  000A92  26D9               	addwf	fsr2l,f,c
  1541  000A94  5022               	movf	moveForward@mR+1,w,c
  1542  000A96  22DA               	addwfc	fsr2h,f,c
  1543  000A98  0E01               	movlw	1
  1544  000A9A  6EDF               	movwf	indf2,c
  1545                           
  1546                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  1547  000A9C  0E00               	movlw	0
  1548  000A9E  6E27               	movwf	moveForward@i+1,c
  1549  000AA0  0E00               	movlw	0
  1550  000AA2  6E26               	movwf	moveForward@i,c
  1551  000AA4  D01A               	goto	l1639
  1552  000AA6                     l1631:
  1553                           
  1554                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  1555  000AA6  C01F  FFD9         	movff	moveForward@mL,fsr2l
  1556  000AAA  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  1557  000AAE  C026  FFDF         	movff	moveForward@i,indf2
  1558                           
  1559                           ;dc_motor.c: 92:         mR->power = i;
  1560  000AB2  C021  FFD9         	movff	moveForward@mR,fsr2l
  1561  000AB6  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  1562  000ABA  C026  FFDF         	movff	moveForward@i,indf2
  1563                           
  1564                           ;dc_motor.c: 93:         setMotorPWM(mL);
  1565  000ABE  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  1566  000AC2  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  1567  000AC6  EC16  F003         	call	_setMotorPWM	;wreg free
  1568                           
  1569                           ;dc_motor.c: 94:         setMotorPWM(mR);
  1570  000ACA  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  1571  000ACE  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  1572  000AD2  EC16  F003         	call	_setMotorPWM	;wreg free
  1573                           
  1574                           ;dc_motor.c: 95:     }
  1575  000AD6  4A26               	infsnz	moveForward@i,f,c
  1576  000AD8  2A27               	incf	moveForward@i+1,f,c
  1577  000ADA                     l1639:
  1578  000ADA  5023               	movf	moveForward@max_power,w,c
  1579  000ADC  5C26               	subwf	moveForward@i,w,c
  1580  000ADE  5027               	movf	moveForward@i+1,w,c
  1581  000AE0  0A80               	xorlw	128
  1582  000AE2  6E25               	movwf	??_moveForward& (0+255),c
  1583  000AE4  5024               	movf	moveForward@max_power+1,w,c
  1584  000AE6  0A80               	xorlw	128
  1585  000AE8  5825               	subwfb	??_moveForward& (0+255),w,c
  1586  000AEA  B0D8               	btfsc	status,0,c
  1587  000AEC  0012               	return	
  1588  000AEE  D7DB               	goto	l1631
  1589  000AF0                     __end_of_moveForward:
  1590                           	opt callstack 0
  1591                           
  1592 ;; *************** function _moveBackward *****************
  1593 ;; Defined at:
  1594 ;;		line 99 in file "dc_motor.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1597 ;;		 -> main@motorL(9), 
  1598 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1599 ;;		 -> main@motorR(9), 
  1600 ;;  max_power       2   34[COMRAM] int 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  i               2   37[COMRAM] int 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1612 ;;      Params:         6       0       0       0
  1613 ;;      Locals:         2       0       0       0
  1614 ;;      Temps:          1       0       0       0
  1615 ;;      Totals:         9       0       0       0
  1616 ;;Total ram usage:        9 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    4
  1619 ;; This function calls:
  1620 ;;		_setMotorPWM
  1621 ;; This function is called by:
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text9
  1627  000AF0                     __ptext9:
  1628                           	opt callstack 0
  1629  000AF0                     _moveBackward:
  1630                           	opt callstack 26
  1631                           
  1632                           ;dc_motor.c: 99: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 100: {;dc_motor.c: 101:     mL->direction = 0;
  1633                           
  1634                           ;incstack = 0
  1635  000AF0  EE20 F001          	lfsr	2,1
  1636  000AF4  501F               	movf	moveBackward@mL,w,c
  1637  000AF6  26D9               	addwf	fsr2l,f,c
  1638  000AF8  5020               	movf	moveBackward@mL+1,w,c
  1639  000AFA  22DA               	addwfc	fsr2h,f,c
  1640  000AFC  0E00               	movlw	0
  1641  000AFE  6EDF               	movwf	indf2,c
  1642                           
  1643                           ;dc_motor.c: 102:     mR->direction = 0;
  1644  000B00  EE20 F001          	lfsr	2,1
  1645  000B04  5021               	movf	moveBackward@mR,w,c
  1646  000B06  26D9               	addwf	fsr2l,f,c
  1647  000B08  5022               	movf	moveBackward@mR+1,w,c
  1648  000B0A  22DA               	addwfc	fsr2h,f,c
  1649  000B0C  0E00               	movlw	0
  1650  000B0E  6EDF               	movwf	indf2,c
  1651                           
  1652                           ;dc_motor.c: 103:     for(int i = 0; i < max_power; i++)
  1653  000B10  0E00               	movlw	0
  1654  000B12  6E27               	movwf	moveBackward@i+1,c
  1655  000B14  0E00               	movlw	0
  1656  000B16  6E26               	movwf	moveBackward@i,c
  1657  000B18  D01A               	goto	l1699
  1658  000B1A                     l1691:
  1659                           
  1660                           ;dc_motor.c: 104:     {;dc_motor.c: 105:         mL->power = i;
  1661  000B1A  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  1662  000B1E  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  1663  000B22  C026  FFDF         	movff	moveBackward@i,indf2
  1664                           
  1665                           ;dc_motor.c: 106:         mR->power = i;
  1666  000B26  C021  FFD9         	movff	moveBackward@mR,fsr2l
  1667  000B2A  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  1668  000B2E  C026  FFDF         	movff	moveBackward@i,indf2
  1669                           
  1670                           ;dc_motor.c: 107:         setMotorPWM(mL);
  1671  000B32  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  1672  000B36  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  1673  000B3A  EC16  F003         	call	_setMotorPWM	;wreg free
  1674                           
  1675                           ;dc_motor.c: 108:         setMotorPWM(mR);
  1676  000B3E  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  1677  000B42  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  1678  000B46  EC16  F003         	call	_setMotorPWM	;wreg free
  1679                           
  1680                           ;dc_motor.c: 109:     }
  1681  000B4A  4A26               	infsnz	moveBackward@i,f,c
  1682  000B4C  2A27               	incf	moveBackward@i+1,f,c
  1683  000B4E                     l1699:
  1684  000B4E  5023               	movf	moveBackward@max_power,w,c
  1685  000B50  5C26               	subwf	moveBackward@i,w,c
  1686  000B52  5027               	movf	moveBackward@i+1,w,c
  1687  000B54  0A80               	xorlw	128
  1688  000B56  6E25               	movwf	??_moveBackward& (0+255),c
  1689  000B58  5024               	movf	moveBackward@max_power+1,w,c
  1690  000B5A  0A80               	xorlw	128
  1691  000B5C  5825               	subwfb	??_moveBackward& (0+255),w,c
  1692  000B5E  B0D8               	btfsc	status,0,c
  1693  000B60  0012               	return	
  1694  000B62  D7DB               	goto	l1691
  1695  000B64                     __end_of_moveBackward:
  1696                           	opt callstack 0
  1697                           
  1698 ;; *************** function _init_motor_struct *****************
  1699 ;; Defined at:
  1700 ;;		line 112 in file "dc_motor.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1703 ;;		 -> main@motorL(9), 
  1704 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1705 ;;		 -> main@motorR(9), 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1717 ;;      Params:         4       0       0       0
  1718 ;;      Locals:         0       0       0       0
  1719 ;;      Temps:          0       0       0       0
  1720 ;;      Totals:         4       0       0       0
  1721 ;;Total ram usage:        4 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    4
  1724 ;; This function calls:
  1725 ;;		_setMotorPWM
  1726 ;; This function is called by:
  1727 ;;		_main
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text10
  1732  000750                     __ptext10:
  1733                           	opt callstack 0
  1734  000750                     _init_motor_struct:
  1735                           	opt callstack 26
  1736                           
  1737                           ;dc_motor.c: 112: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 113: {;dc_motor.c: 115: mL->power = 0;
  1738                           
  1739                           ;incstack = 0
  1740  000750  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  1741  000754  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  1742  000758  0E00               	movlw	0
  1743  00075A  6EDF               	movwf	indf2,c
  1744                           
  1745                           ;dc_motor.c: 116: mL->direction = 1;
  1746  00075C  EE20 F001          	lfsr	2,1
  1747  000760  501F               	movf	init_motor_struct@mL,w,c
  1748  000762  26D9               	addwf	fsr2l,f,c
  1749  000764  5020               	movf	init_motor_struct@mL+1,w,c
  1750  000766  22DA               	addwfc	fsr2h,f,c
  1751  000768  0E01               	movlw	1
  1752  00076A  6EDF               	movwf	indf2,c
  1753                           
  1754                           ;dc_motor.c: 117: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  1755  00076C  EE20 F002          	lfsr	2,2
  1756  000770  501F               	movf	init_motor_struct@mL,w,c
  1757  000772  26D9               	addwf	fsr2l,f,c
  1758  000774  5020               	movf	init_motor_struct@mL+1,w,c
  1759  000776  22DA               	addwfc	fsr2h,f,c
  1760  000778  0E79               	movlw	121
  1761  00077A  6EDE               	movwf	postinc2,c
  1762  00077C  0E0F               	movlw	15
  1763  00077E  6EDD               	movwf	postdec2,c
  1764                           
  1765                           ;dc_motor.c: 118: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  1766  000780  EE20 F004          	lfsr	2,4
  1767  000784  501F               	movf	init_motor_struct@mL,w,c
  1768  000786  26D9               	addwf	fsr2l,f,c
  1769  000788  5020               	movf	init_motor_struct@mL+1,w,c
  1770  00078A  22DA               	addwfc	fsr2h,f,c
  1771  00078C  0E78               	movlw	120
  1772  00078E  6EDE               	movwf	postinc2,c
  1773  000790  0E0F               	movlw	15
  1774  000792  6EDD               	movwf	postdec2,c
  1775                           
  1776                           ;dc_motor.c: 119: mL->dir_pin=0;
  1777  000794  EE20 F006          	lfsr	2,6
  1778  000798  501F               	movf	init_motor_struct@mL,w,c
  1779  00079A  26D9               	addwf	fsr2l,f,c
  1780  00079C  5020               	movf	init_motor_struct@mL+1,w,c
  1781  00079E  22DA               	addwfc	fsr2h,f,c
  1782  0007A0  0E00               	movlw	0
  1783  0007A2  6EDF               	movwf	indf2,c
  1784                           
  1785                           ;dc_motor.c: 120: mL->PWMperiod=199;
  1786  0007A4  EE20 F007          	lfsr	2,7
  1787  0007A8  501F               	movf	init_motor_struct@mL,w,c
  1788  0007AA  26D9               	addwf	fsr2l,f,c
  1789  0007AC  5020               	movf	init_motor_struct@mL+1,w,c
  1790  0007AE  22DA               	addwfc	fsr2h,f,c
  1791  0007B0  0EC7               	movlw	199
  1792  0007B2  6EDE               	movwf	postinc2,c
  1793  0007B4  0E00               	movlw	0
  1794  0007B6  6EDD               	movwf	postdec2,c
  1795                           
  1796                           ;dc_motor.c: 122: mR->power = 0;
  1797  0007B8  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  1798  0007BC  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  1799  0007C0  0E00               	movlw	0
  1800  0007C2  6EDF               	movwf	indf2,c
  1801                           
  1802                           ;dc_motor.c: 123: mR->direction = 1;
  1803  0007C4  EE20 F001          	lfsr	2,1
  1804  0007C8  5021               	movf	init_motor_struct@mR,w,c
  1805  0007CA  26D9               	addwf	fsr2l,f,c
  1806  0007CC  5022               	movf	init_motor_struct@mR+1,w,c
  1807  0007CE  22DA               	addwfc	fsr2h,f,c
  1808  0007D0  0E01               	movlw	1
  1809  0007D2  6EDF               	movwf	indf2,c
  1810                           
  1811                           ;dc_motor.c: 124: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  1812  0007D4  EE20 F002          	lfsr	2,2
  1813  0007D8  5021               	movf	init_motor_struct@mR,w,c
  1814  0007DA  26D9               	addwf	fsr2l,f,c
  1815  0007DC  5022               	movf	init_motor_struct@mR+1,w,c
  1816  0007DE  22DA               	addwfc	fsr2h,f,c
  1817  0007E0  0E77               	movlw	119
  1818  0007E2  6EDE               	movwf	postinc2,c
  1819  0007E4  0E0F               	movlw	15
  1820  0007E6  6EDD               	movwf	postdec2,c
  1821                           
  1822                           ;dc_motor.c: 125: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  1823  0007E8  EE20 F004          	lfsr	2,4
  1824  0007EC  5021               	movf	init_motor_struct@mR,w,c
  1825  0007EE  26D9               	addwf	fsr2l,f,c
  1826  0007F0  5022               	movf	init_motor_struct@mR+1,w,c
  1827  0007F2  22DA               	addwfc	fsr2h,f,c
  1828  0007F4  0E76               	movlw	118
  1829  0007F6  6EDE               	movwf	postinc2,c
  1830  0007F8  0E0F               	movlw	15
  1831  0007FA  6EDD               	movwf	postdec2,c
  1832                           
  1833                           ;dc_motor.c: 126: mR->dir_pin=2;
  1834  0007FC  EE20 F006          	lfsr	2,6
  1835  000800  5021               	movf	init_motor_struct@mR,w,c
  1836  000802  26D9               	addwf	fsr2l,f,c
  1837  000804  5022               	movf	init_motor_struct@mR+1,w,c
  1838  000806  22DA               	addwfc	fsr2h,f,c
  1839  000808  0E02               	movlw	2
  1840  00080A  6EDF               	movwf	indf2,c
  1841                           
  1842                           ;dc_motor.c: 127: mR->PWMperiod=199;
  1843  00080C  EE20 F007          	lfsr	2,7
  1844  000810  5021               	movf	init_motor_struct@mR,w,c
  1845  000812  26D9               	addwf	fsr2l,f,c
  1846  000814  5022               	movf	init_motor_struct@mR+1,w,c
  1847  000816  22DA               	addwfc	fsr2h,f,c
  1848  000818  0EC7               	movlw	199
  1849  00081A  6EDE               	movwf	postinc2,c
  1850  00081C  0E00               	movlw	0
  1851  00081E  6EDD               	movwf	postdec2,c
  1852                           
  1853                           ;dc_motor.c: 129: setMotorPWM(mL);
  1854  000820  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  1855  000824  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  1856  000828  EC16  F003         	call	_setMotorPWM	;wreg free
  1857                           
  1858                           ;dc_motor.c: 130: setMotorPWM(mR);
  1859  00082C  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  1860  000830  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  1861  000834  EC16  F003         	call	_setMotorPWM	;wreg free
  1862  000838  0012               	return		;funcret
  1863  00083A                     __end_of_init_motor_struct:
  1864                           	opt callstack 0
  1865                           
  1866 ;; *************** function _setMotorPWM *****************
  1867 ;; Defined at:
  1868 ;;		line 18 in file "dc_motor.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  m               2   21[COMRAM] PTR struct DC_motor
  1871 ;;		 -> main@motorR(9), main@motorL(9), 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  PWMduty         2   28[COMRAM] int 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1883 ;;      Params:         2       0       0       0
  1884 ;;      Locals:         2       0       0       0
  1885 ;;      Temps:          5       0       0       0
  1886 ;;      Totals:         9       0       0       0
  1887 ;;Total ram usage:        9 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    3
  1890 ;; This function calls:
  1891 ;;		___awdiv
  1892 ;;		___wmul
  1893 ;; This function is called by:
  1894 ;;		_stop
  1895 ;;		_turnRight
  1896 ;;		_moveForward
  1897 ;;		_moveBackward
  1898 ;;		_init_motor_struct
  1899 ;;		_turnLeft
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text11
  1904  00062C                     __ptext11:
  1905                           	opt callstack 0
  1906  00062C                     _setMotorPWM:
  1907                           	opt callstack 26
  1908                           
  1909                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  1910                           
  1911                           ;incstack = 0
  1912  00062C  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  1913  000630  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1914  000634  50DF               	movf	indf2,w,c
  1915  000636  6E18               	movwf	??_setMotorPWM& (0+255),c
  1916  000638  5018               	movf	??_setMotorPWM,w,c
  1917  00063A  6E08               	movwf	___wmul@multiplier,c
  1918  00063C  6A09               	clrf	___wmul@multiplier+1,c
  1919  00063E  EE20 F007          	lfsr	2,7
  1920  000642  5016               	movf	setMotorPWM@m,w,c
  1921  000644  26D9               	addwf	fsr2l,f,c
  1922  000646  5017               	movf	setMotorPWM@m+1,w,c
  1923  000648  22DA               	addwfc	fsr2h,f,c
  1924  00064A  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  1925  00064E  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  1926  000652  EC80  F006         	call	___wmul	;wreg free
  1927  000656  C008  F00E         	movff	?___wmul,___awdiv@dividend
  1928  00065A  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  1929  00065E  0E00               	movlw	0
  1930  000660  6E11               	movwf	___awdiv@divisor+1,c
  1931  000662  0E64               	movlw	100
  1932  000664  6E10               	movwf	___awdiv@divisor,c
  1933  000666  EC81  F004         	call	___awdiv	;wreg free
  1934  00066A  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  1935  00066E  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1936                           
  1937                           ;dc_motor.c: 24:     if (m->direction)
  1938  000672  EE20 F001          	lfsr	2,1
  1939  000676  5016               	movf	setMotorPWM@m,w,c
  1940  000678  26D9               	addwf	fsr2l,f,c
  1941  00067A  5017               	movf	setMotorPWM@m+1,w,c
  1942  00067C  22DA               	addwfc	fsr2h,f,c
  1943  00067E  50DF               	movf	indf2,w,c
  1944  000680  B4D8               	btfsc	status,2,c
  1945  000682  D024               	goto	l1513
  1946                           
  1947                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  1948  000684  EE20 F006          	lfsr	2,6
  1949  000688  5016               	movf	setMotorPWM@m,w,c
  1950  00068A  26D9               	addwf	fsr2l,f,c
  1951  00068C  5017               	movf	setMotorPWM@m+1,w,c
  1952  00068E  22DA               	addwfc	fsr2h,f,c
  1953  000690  50DF               	movf	indf2,w,c
  1954  000692  6E18               	movwf	??_setMotorPWM& (0+255),c
  1955  000694  0E01               	movlw	1
  1956  000696  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  1957  000698  2A18               	incf	??_setMotorPWM,f,c
  1958  00069A  D002               	goto	u694
  1959  00069C                     u695:
  1960  00069C  90D8               	bcf	status,0,c
  1961  00069E  3619               	rlcf	??_setMotorPWM+1,f,c
  1962  0006A0                     u694:
  1963  0006A0  2E18               	decfsz	??_setMotorPWM,f,c
  1964  0006A2  D7FC               	goto	u695
  1965  0006A4  5019               	movf	??_setMotorPWM+1,w,c
  1966  0006A6  108A               	iorwf	3978,w,c	;volatile
  1967  0006A8  6E8A               	movwf	3978,c	;volatile
  1968                           
  1969                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  1970  0006AA  EE20 F007          	lfsr	2,7
  1971  0006AE  5016               	movf	setMotorPWM@m,w,c
  1972  0006B0  26D9               	addwf	fsr2l,f,c
  1973  0006B2  5017               	movf	setMotorPWM@m+1,w,c
  1974  0006B4  22DA               	addwfc	fsr2h,f,c
  1975  0006B6  CFDE F018          	movff	postinc2,??_setMotorPWM
  1976  0006BA  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  1977  0006BE  501D               	movf	setMotorPWM@PWMduty,w,c
  1978  0006C0  5C18               	subwf	??_setMotorPWM,w,c
  1979  0006C2  6E1D               	movwf	setMotorPWM@PWMduty,c
  1980  0006C4  501E               	movf	setMotorPWM@PWMduty+1,w,c
  1981  0006C6  5819               	subwfb	??_setMotorPWM+1,w,c
  1982  0006C8  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  1983                           
  1984                           ;dc_motor.c: 28:     }
  1985  0006CA  D014               	goto	l135
  1986  0006CC                     l1513:
  1987                           
  1988                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  1989  0006CC  EE20 F006          	lfsr	2,6
  1990  0006D0  5016               	movf	setMotorPWM@m,w,c
  1991  0006D2  26D9               	addwf	fsr2l,f,c
  1992  0006D4  5017               	movf	setMotorPWM@m+1,w,c
  1993  0006D6  22DA               	addwfc	fsr2h,f,c
  1994  0006D8  50DF               	movf	indf2,w,c
  1995  0006DA  6E18               	movwf	??_setMotorPWM& (0+255),c
  1996  0006DC  0E01               	movlw	1
  1997  0006DE  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  1998  0006E0  2A18               	incf	??_setMotorPWM,f,c
  1999  0006E2  D002               	goto	u704
  2000  0006E4                     u705:
  2001  0006E4  90D8               	bcf	status,0,c
  2002  0006E6  3619               	rlcf	??_setMotorPWM+1,f,c
  2003  0006E8                     u704:
  2004  0006E8  2E18               	decfsz	??_setMotorPWM,f,c
  2005  0006EA  D7FC               	goto	u705
  2006  0006EC  5019               	movf	??_setMotorPWM+1,w,c
  2007  0006EE  0AFF               	xorlw	255
  2008  0006F0  148A               	andwf	3978,w,c	;volatile
  2009  0006F2  6E8A               	movwf	3978,c	;volatile
  2010  0006F4                     l135:
  2011                           
  2012                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  2013  0006F4  EE20 F002          	lfsr	2,2
  2014  0006F8  5016               	movf	setMotorPWM@m,w,c
  2015  0006FA  26D9               	addwf	fsr2l,f,c
  2016  0006FC  5017               	movf	setMotorPWM@m+1,w,c
  2017  0006FE  22DA               	addwfc	fsr2h,f,c
  2018  000700  CFDE F018          	movff	postinc2,??_setMotorPWM
  2019  000704  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  2020  000708  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  2021  00070C  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2022  000710  441D               	rlncf	setMotorPWM@PWMduty,w,c
  2023  000712  46E8               	rlncf	wreg,f,c
  2024  000714  0BFC               	andlw	252
  2025  000716  6EDF               	movwf	indf2,c
  2026                           
  2027                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  2028  000718  EE20 F004          	lfsr	2,4
  2029  00071C  5016               	movf	setMotorPWM@m,w,c
  2030  00071E  26D9               	addwf	fsr2l,f,c
  2031  000720  5017               	movf	setMotorPWM@m+1,w,c
  2032  000722  22DA               	addwfc	fsr2h,f,c
  2033  000724  CFDE F018          	movff	postinc2,??_setMotorPWM
  2034  000728  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  2035  00072C  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  2036  000730  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2037  000734  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2038  000738  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2039  00073C  0E06               	movlw	6
  2040  00073E  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  2041  000740                     u715:
  2042  000740  341B               	rlcf	??_setMotorPWM+3,w,c
  2043  000742  321B               	rrcf	??_setMotorPWM+3,f,c
  2044  000744  321A               	rrcf	??_setMotorPWM+2,f,c
  2045  000746  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2046  000748  D7FB               	goto	u715
  2047  00074A  501A               	movf	??_setMotorPWM+2,w,c
  2048  00074C  6EDF               	movwf	indf2,c
  2049  00074E  0012               	return		;funcret
  2050  000750                     __end_of_setMotorPWM:
  2051                           	opt callstack 0
  2052                           
  2053 ;; *************** function ___wmul *****************
  2054 ;; Defined at:
  2055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  multiplier      2    7[COMRAM] unsigned int 
  2058 ;;  multiplicand    2    9[COMRAM] unsigned int 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  product         2   11[COMRAM] unsigned int 
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  2    7[COMRAM] unsigned int 
  2063 ;; Registers used:
  2064 ;;		wreg, status,2, status,0, prodl, prodh
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2070 ;;      Params:         4       0       0       0
  2071 ;;      Locals:         2       0       0       0
  2072 ;;      Temps:          0       0       0       0
  2073 ;;      Totals:         6       0       0       0
  2074 ;;Total ram usage:        6 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    2
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_setMotorPWM
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text12
  2085  000D00                     __ptext12:
  2086                           	opt callstack 0
  2087  000D00                     ___wmul:
  2088                           	opt callstack 26
  2089                           
  2090                           ;incstack = 0
  2091  000D00  5008               	movf	___wmul@multiplier,w,c
  2092  000D02  020A               	mulwf	___wmul@multiplicand,c
  2093  000D04  CFF3 F00C          	movff	prodl,___wmul@product
  2094  000D08  CFF4 F00D          	movff	prodh,___wmul@product+1
  2095  000D0C  5008               	movf	___wmul@multiplier,w,c
  2096  000D0E  020B               	mulwf	___wmul@multiplicand+1,c
  2097  000D10  50F3               	movf	prodl,w,c
  2098  000D12  260D               	addwf	___wmul@product+1,f,c
  2099  000D14  5009               	movf	___wmul@multiplier+1,w,c
  2100  000D16  020A               	mulwf	___wmul@multiplicand,c
  2101  000D18  50F3               	movf	prodl,w,c
  2102  000D1A  260D               	addwf	___wmul@product+1,f,c
  2103  000D1C  C00C  F008         	movff	___wmul@product,?___wmul
  2104  000D20  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  2105  000D24  0012               	return		;funcret
  2106  000D26                     __end_of___wmul:
  2107                           	opt callstack 0
  2108                           
  2109 ;; *************** function ___awdiv *****************
  2110 ;; Defined at:
  2111 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  dividend        2   13[COMRAM] int 
  2114 ;;  divisor         2   15[COMRAM] int 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  quotient        2   19[COMRAM] int 
  2117 ;;  sign            1   18[COMRAM] unsigned char 
  2118 ;;  counter         1   17[COMRAM] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  2   13[COMRAM] int 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2128 ;;      Params:         4       0       0       0
  2129 ;;      Locals:         4       0       0       0
  2130 ;;      Temps:          0       0       0       0
  2131 ;;      Totals:         8       0       0       0
  2132 ;;Total ram usage:        8 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    2
  2135 ;; This function calls:
  2136 ;;		Nothing
  2137 ;; This function is called by:
  2138 ;;		_setMotorPWM
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text13
  2143  000902                     __ptext13:
  2144                           	opt callstack 0
  2145  000902                     ___awdiv:
  2146                           	opt callstack 26
  2147                           
  2148                           ;incstack = 0
  2149  000902  0E00               	movlw	0
  2150  000904  6E13               	movwf	___awdiv@sign,c
  2151  000906  AE11               	btfss	___awdiv@divisor+1,7,c
  2152  000908  D006               	goto	l1425
  2153  00090A  6C10               	negf	___awdiv@divisor,c
  2154  00090C  1E11               	comf	___awdiv@divisor+1,f,c
  2155  00090E  B0D8               	btfsc	status,0,c
  2156  000910  2A11               	incf	___awdiv@divisor+1,f,c
  2157  000912  0E01               	movlw	1
  2158  000914  6E13               	movwf	___awdiv@sign,c
  2159  000916                     l1425:
  2160  000916  AE0F               	btfss	___awdiv@dividend+1,7,c
  2161  000918  D006               	goto	l1431
  2162  00091A  6C0E               	negf	___awdiv@dividend,c
  2163  00091C  1E0F               	comf	___awdiv@dividend+1,f,c
  2164  00091E  B0D8               	btfsc	status,0,c
  2165  000920  2A0F               	incf	___awdiv@dividend+1,f,c
  2166  000922  0E01               	movlw	1
  2167  000924  1A13               	xorwf	___awdiv@sign,f,c
  2168  000926                     l1431:
  2169  000926  0E00               	movlw	0
  2170  000928  6E15               	movwf	___awdiv@quotient+1,c
  2171  00092A  0E00               	movlw	0
  2172  00092C  6E14               	movwf	___awdiv@quotient,c
  2173  00092E  5010               	movf	___awdiv@divisor,w,c
  2174  000930  1011               	iorwf	___awdiv@divisor+1,w,c
  2175  000932  B4D8               	btfsc	status,2,c
  2176  000934  D01C               	goto	l1453
  2177  000936  0E01               	movlw	1
  2178  000938  6E12               	movwf	___awdiv@counter,c
  2179  00093A  D004               	goto	l1439
  2180  00093C                     l1437:
  2181  00093C  90D8               	bcf	status,0,c
  2182  00093E  3610               	rlcf	___awdiv@divisor,f,c
  2183  000940  3611               	rlcf	___awdiv@divisor+1,f,c
  2184  000942  2A12               	incf	___awdiv@counter,f,c
  2185  000944                     l1439:
  2186  000944  AE11               	btfss	___awdiv@divisor+1,7,c
  2187  000946  D7FA               	goto	l1437
  2188  000948                     u640:
  2189  000948  90D8               	bcf	status,0,c
  2190  00094A  3614               	rlcf	___awdiv@quotient,f,c
  2191  00094C  3615               	rlcf	___awdiv@quotient+1,f,c
  2192  00094E  5010               	movf	___awdiv@divisor,w,c
  2193  000950  5C0E               	subwf	___awdiv@dividend,w,c
  2194  000952  5011               	movf	___awdiv@divisor+1,w,c
  2195  000954  580F               	subwfb	___awdiv@dividend+1,w,c
  2196  000956  A0D8               	btfss	status,0,c
  2197  000958  D005               	goto	l1449
  2198  00095A  5010               	movf	___awdiv@divisor,w,c
  2199  00095C  5E0E               	subwf	___awdiv@dividend,f,c
  2200  00095E  5011               	movf	___awdiv@divisor+1,w,c
  2201  000960  5A0F               	subwfb	___awdiv@dividend+1,f,c
  2202  000962  8014               	bsf	___awdiv@quotient,0,c
  2203  000964                     l1449:
  2204  000964  90D8               	bcf	status,0,c
  2205  000966  3211               	rrcf	___awdiv@divisor+1,f,c
  2206  000968  3210               	rrcf	___awdiv@divisor,f,c
  2207  00096A  2E12               	decfsz	___awdiv@counter,f,c
  2208  00096C  D7ED               	goto	u640
  2209  00096E                     l1453:
  2210  00096E  5013               	movf	___awdiv@sign,w,c
  2211  000970  B4D8               	btfsc	status,2,c
  2212  000972  D004               	goto	l1457
  2213  000974  6C14               	negf	___awdiv@quotient,c
  2214  000976  1E15               	comf	___awdiv@quotient+1,f,c
  2215  000978  B0D8               	btfsc	status,0,c
  2216  00097A  2A15               	incf	___awdiv@quotient+1,f,c
  2217  00097C                     l1457:
  2218  00097C  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  2219  000980  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  2220  000984  0012               	return		;funcret
  2221  000986                     __end_of___awdiv:
  2222                           	opt callstack 0
  2223                           
  2224 ;; *************** function _display_RFID *****************
  2225 ;; Defined at:
  2226 ;;		line 109 in file "RFID.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  dataBuf         2   12[COMRAM] PTR unsigned char 
  2229 ;;		 -> RFIDbuf(12), 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  i               2   14[COMRAM] int 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2241 ;;      Params:         2       0       0       0
  2242 ;;      Locals:         2       0       0       0
  2243 ;;      Temps:          0       0       0       0
  2244 ;;      Totals:         4       0       0       0
  2245 ;;Total ram usage:        4 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    6
  2248 ;; This function calls:
  2249 ;;		_ClearLCD
  2250 ;;		_SendLCD
  2251 ;;		_SetLine
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text14
  2258  000BFE                     __ptext14:
  2259                           	opt callstack 0
  2260  000BFE                     _display_RFID:
  2261                           	opt callstack 24
  2262                           
  2263                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  2264                           
  2265                           ;incstack = 0
  2266  000BFE  ECBC  F006         	call	_ClearLCD	;wreg free
  2267                           
  2268                           ;RFID.c: 112:     SetLine(1);
  2269  000C02  0E01               	movlw	1
  2270  000C04  EC69  F006         	call	_SetLine
  2271                           
  2272                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  2273  000C08  0E00               	movlw	0
  2274  000C0A  6E10               	movwf	display_RFID@i+1,c
  2275  000C0C  0E00               	movlw	0
  2276  000C0E  6E0F               	movwf	display_RFID@i,c
  2277  000C10                     l1649:
  2278                           
  2279                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  2280  000C10  0E01               	movlw	1
  2281  000C12  6E0A               	movwf	SendLCD@type,c
  2282  000C14  500F               	movf	display_RFID@i,w,c
  2283  000C16  240D               	addwf	display_RFID@dataBuf,w,c
  2284  000C18  6ED9               	movwf	fsr2l,c
  2285  000C1A  5010               	movf	display_RFID@i+1,w,c
  2286  000C1C  200E               	addwfc	display_RFID@dataBuf+1,w,c
  2287  000C1E  6EDA               	movwf	fsr2h,c
  2288  000C20  50DF               	movf	indf2,w,c
  2289  000C22  EC3A  F006         	call	_SendLCD
  2290                           
  2291                           ;RFID.c: 116:     }
  2292  000C26  4A0F               	infsnz	display_RFID@i,f,c
  2293  000C28  2A10               	incf	display_RFID@i+1,f,c
  2294  000C2A  BE10               	btfsc	display_RFID@i+1,7,c
  2295  000C2C  D7F1               	goto	l1649
  2296  000C2E  5010               	movf	display_RFID@i+1,w,c
  2297  000C30  E105               	bnz	u810
  2298  000C32  0E0A               	movlw	10
  2299  000C34  5C0F               	subwf	display_RFID@i,w,c
  2300  000C36  B0D8               	btfsc	status,0,c
  2301  000C38  0012               	return	
  2302  000C3A  D7EA               	goto	l1649
  2303  000C3C                     u810:
  2304  000C3C  0012               	return		;funcret
  2305  000C3E                     __end_of_display_RFID:
  2306                           	opt callstack 0
  2307                           
  2308 ;; *************** function _ClearLCD *****************
  2309 ;; Defined at:
  2310 ;;		line 137 in file "LCDIO.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2324 ;;      Params:         0       0       0       0
  2325 ;;      Locals:         0       0       0       0
  2326 ;;      Temps:          1       0       0       0
  2327 ;;      Totals:         1       0       0       0
  2328 ;;Total ram usage:        1 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    5
  2331 ;; This function calls:
  2332 ;;		_SendLCD
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;;		_display_RFID
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text15
  2340  000D78                     __ptext15:
  2341                           	opt callstack 0
  2342  000D78                     _ClearLCD:
  2343                           	opt callstack 24
  2344                           
  2345                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  2346                           
  2347                           ;incstack = 0
  2348  000D78  0E00               	movlw	0
  2349  000D7A  6E0A               	movwf	SendLCD@type,c
  2350  000D7C  0E01               	movlw	1
  2351  000D7E  EC3A  F006         	call	_SendLCD
  2352                           
  2353                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2354  000D82  0E0D               	movlw	13
  2355  000D84  6E0C               	movwf	??_ClearLCD& (0+255),c
  2356  000D86  0EFC               	movlw	252
  2357  000D88                     u1317:
  2358  000D88  2EE8               	decfsz	wreg,f,c
  2359  000D8A  D7FE               	bra	u1317
  2360  000D8C  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  2361  000D8E  D7FC               	bra	u1317
  2362  000D90  0012               	return		;funcret
  2363  000D92                     __end_of_ClearLCD:
  2364                           	opt callstack 0
  2365                           
  2366 ;; *************** function _classify_data *****************
  2367 ;; Defined at:
  2368 ;;		line 30 in file "signal_processing.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  raw_data        2    7[COMRAM] int 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      unsigned char 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2382 ;;      Params:         2       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          0       0       0       0
  2385 ;;      Totals:         2       0       0       0
  2386 ;;Total ram usage:        2 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    2
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text16
  2397  000DAA                     __ptext16:
  2398                           	opt callstack 0
  2399  000DAA                     _classify_data:
  2400                           	opt callstack 28
  2401                           
  2402                           ;signal_processing.c: 30: char classify_data(int raw_data);signal_processing.c: 31: {;si
      +                          gnal_processing.c: 32:     if(raw_data > 10000)
  2403                           
  2404                           ;incstack = 0
  2405  000DAA  BE09               	btfsc	classify_data@raw_data+1,7,c
  2406  000DAC  D008               	goto	l1623
  2407  000DAE  0E11               	movlw	17
  2408  000DB0  5C08               	subwf	classify_data@raw_data,w,c
  2409  000DB2  0E27               	movlw	39
  2410  000DB4  5809               	subwfb	classify_data@raw_data+1,w,c
  2411  000DB6  A0D8               	btfss	status,0,c
  2412  000DB8  D002               	goto	l1623
  2413                           
  2414                           ;signal_processing.c: 33:     {;signal_processing.c: 34:         return 1;
  2415  000DBA  0E01               	movlw	1
  2416  000DBC  0012               	return	
  2417  000DBE                     l1623:
  2418                           
  2419                           ;signal_processing.c: 37:     {;signal_processing.c: 38:         return 0;
  2420  000DBE  0E00               	movlw	0
  2421  000DC0  0012               	return		;funcret
  2422  000DC2                     __end_of_classify_data:
  2423                           	opt callstack 0
  2424                           
  2425 ;; *************** function _check_RFID *****************
  2426 ;; Defined at:
  2427 ;;		line 72 in file "RFID.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  2430 ;;		 -> RFIDbuf(12), 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  i               2   35[COMRAM] int 
  2433 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  2434 ;;  checksum        1   34[COMRAM] unsigned char 
  2435 ;;  byte5           1   33[COMRAM] unsigned char 
  2436 ;;  byte4           1   32[COMRAM] unsigned char 
  2437 ;;  byte3           1   31[COMRAM] unsigned char 
  2438 ;;  byte2           1   30[COMRAM] unsigned char 
  2439 ;;  byte1           1   29[COMRAM] unsigned char 
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      void 
  2442 ;; Registers used:
  2443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2449 ;;      Params:         2       0       0       0
  2450 ;;      Locals:        20       0       0       0
  2451 ;;      Temps:          2       0       0       0
  2452 ;;      Totals:        24       0       0       0
  2453 ;;Total ram usage:       24 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; Hardware stack levels required when called:    6
  2456 ;; This function calls:
  2457 ;;		_LCD_String
  2458 ;;		_SetLine
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text17
  2465  0004DC                     __ptext17:
  2466                           	opt callstack 0
  2467  0004DC                     _check_RFID:
  2468                           	opt callstack 24
  2469                           
  2470                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  2471                           
  2472                           ;incstack = 0
  2473  0004DC  0E00               	movlw	0
  2474  0004DE  6E25               	movwf	check_RFID@i+1,c
  2475  0004E0  0E00               	movlw	0
  2476  0004E2  6E24               	movwf	check_RFID@i,c
  2477  0004E4                     l1661:
  2478                           
  2479                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2480  0004E4  5024               	movf	check_RFID@i,w,c
  2481  0004E6  240E               	addwf	check_RFID@dataBuf,w,c
  2482  0004E8  6ED9               	movwf	fsr2l,c
  2483  0004EA  5025               	movf	check_RFID@i+1,w,c
  2484  0004EC  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2485  0004EE  6EDA               	movwf	fsr2h,c
  2486  0004F0  0E2F               	movlw	47
  2487  0004F2  64DF               	cpfsgt	indf2,c
  2488  0004F4  D018               	goto	l1667
  2489  0004F6  5024               	movf	check_RFID@i,w,c
  2490  0004F8  240E               	addwf	check_RFID@dataBuf,w,c
  2491  0004FA  6ED9               	movwf	fsr2l,c
  2492  0004FC  5025               	movf	check_RFID@i+1,w,c
  2493  0004FE  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2494  000500  6EDA               	movwf	fsr2h,c
  2495  000502  0E3A               	movlw	58
  2496  000504  60DF               	cpfslt	indf2,c
  2497  000506  D00F               	goto	l1667
  2498                           
  2499                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  2500  000508  0E12               	movlw	low check_RFID@hexBuf
  2501  00050A  2424               	addwf	check_RFID@i,w,c
  2502  00050C  6ED9               	movwf	fsr2l,c
  2503  00050E  0E00               	movlw	high check_RFID@hexBuf
  2504  000510  2025               	addwfc	check_RFID@i+1,w,c
  2505  000512  6EDA               	movwf	fsr2h,c
  2506  000514  5024               	movf	check_RFID@i,w,c
  2507  000516  240E               	addwf	check_RFID@dataBuf,w,c
  2508  000518  6EE1               	movwf	fsr1l,c
  2509  00051A  5025               	movf	check_RFID@i+1,w,c
  2510  00051C  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2511  00051E  6EE2               	movwf	fsr1h,c
  2512  000520  50E7               	movf	indf1,w,c
  2513  000522  0FD0               	addlw	208
  2514  000524  D020               	goto	L1
  2515  000526                     l1667:
  2516  000526  5024               	movf	check_RFID@i,w,c
  2517  000528  240E               	addwf	check_RFID@dataBuf,w,c
  2518  00052A  6ED9               	movwf	fsr2l,c
  2519  00052C  5025               	movf	check_RFID@i+1,w,c
  2520  00052E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2521  000530  6EDA               	movwf	fsr2h,c
  2522  000532  0E40               	movlw	64
  2523  000534  64DF               	cpfsgt	indf2,c
  2524  000536  D018               	goto	l1673
  2525  000538  5024               	movf	check_RFID@i,w,c
  2526  00053A  240E               	addwf	check_RFID@dataBuf,w,c
  2527  00053C  6ED9               	movwf	fsr2l,c
  2528  00053E  5025               	movf	check_RFID@i+1,w,c
  2529  000540  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2530  000542  6EDA               	movwf	fsr2h,c
  2531  000544  0E47               	movlw	71
  2532  000546  60DF               	cpfslt	indf2,c
  2533  000548  D00F               	goto	l1673
  2534                           
  2535                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2536  00054A  0E12               	movlw	low check_RFID@hexBuf
  2537  00054C  2424               	addwf	check_RFID@i,w,c
  2538  00054E  6ED9               	movwf	fsr2l,c
  2539  000550  0E00               	movlw	high check_RFID@hexBuf
  2540  000552  2025               	addwfc	check_RFID@i+1,w,c
  2541  000554  6EDA               	movwf	fsr2h,c
  2542  000556  5024               	movf	check_RFID@i,w,c
  2543  000558  240E               	addwf	check_RFID@dataBuf,w,c
  2544  00055A  6EE1               	movwf	fsr1l,c
  2545  00055C  5025               	movf	check_RFID@i+1,w,c
  2546  00055E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2547  000560  6EE2               	movwf	fsr1h,c
  2548  000562  50E7               	movf	indf1,w,c
  2549  000564  0FC9               	addlw	201
  2550  000566                     L1:
  2551  000566  6EDF               	movwf	indf2,c
  2552  000568                     l1673:
  2553                           
  2554                           ;RFID.c: 86:     }
  2555  000568  4A24               	infsnz	check_RFID@i,f,c
  2556  00056A  2A25               	incf	check_RFID@i+1,f,c
  2557  00056C  BE25               	btfsc	check_RFID@i+1,7,c
  2558  00056E  D7BA               	goto	l1661
  2559  000570  5025               	movf	check_RFID@i+1,w,c
  2560  000572  E104               	bnz	u860
  2561  000574  0E0C               	movlw	12
  2562  000576  5C24               	subwf	check_RFID@i,w,c
  2563  000578  A0D8               	btfss	status,0,c
  2564  00057A  D7B4               	goto	l1661
  2565  00057C                     u860:
  2566                           
  2567                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2568  00057C  5012               	movf	check_RFID@hexBuf,w,c
  2569  00057E  A4D8               	btfss	status,2,c
  2570  000580  D002               	goto	u870
  2571  000582  0E01               	movlw	1
  2572  000584  D001               	goto	u880
  2573  000586                     u870:
  2574  000586  0E00               	movlw	0
  2575  000588                     u880:
  2576  000588  1013               	iorwf	check_RFID@hexBuf+1,w,c
  2577  00058A  6E1E               	movwf	check_RFID@byte1,c
  2578                           
  2579                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2580  00058C  5014               	movf	check_RFID@hexBuf+2,w,c
  2581  00058E  A4D8               	btfss	status,2,c
  2582  000590  D002               	goto	u890
  2583  000592  0E01               	movlw	1
  2584  000594  D001               	goto	u900
  2585  000596                     u890:
  2586  000596  0E00               	movlw	0
  2587  000598                     u900:
  2588  000598  1015               	iorwf	check_RFID@hexBuf+3,w,c
  2589  00059A  6E1F               	movwf	check_RFID@byte2,c
  2590                           
  2591                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2592  00059C  5016               	movf	check_RFID@hexBuf+4,w,c
  2593  00059E  A4D8               	btfss	status,2,c
  2594  0005A0  D002               	goto	u910
  2595  0005A2  0E01               	movlw	1
  2596  0005A4  D001               	goto	u920
  2597  0005A6                     u910:
  2598  0005A6  0E00               	movlw	0
  2599  0005A8                     u920:
  2600  0005A8  1017               	iorwf	check_RFID@hexBuf+5,w,c
  2601  0005AA  6E20               	movwf	check_RFID@byte3,c
  2602                           
  2603                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2604  0005AC  5018               	movf	check_RFID@hexBuf+6,w,c
  2605  0005AE  A4D8               	btfss	status,2,c
  2606  0005B0  D002               	goto	u930
  2607  0005B2  0E01               	movlw	1
  2608  0005B4  D001               	goto	u940
  2609  0005B6                     u930:
  2610  0005B6  0E00               	movlw	0
  2611  0005B8                     u940:
  2612  0005B8  1019               	iorwf	check_RFID@hexBuf+7,w,c
  2613  0005BA  6E21               	movwf	check_RFID@byte4,c
  2614                           
  2615                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2616  0005BC  501A               	movf	check_RFID@hexBuf+8,w,c
  2617  0005BE  A4D8               	btfss	status,2,c
  2618  0005C0  D002               	goto	u950
  2619  0005C2  0E01               	movlw	1
  2620  0005C4  D001               	goto	u960
  2621  0005C6                     u950:
  2622  0005C6  0E00               	movlw	0
  2623  0005C8                     u960:
  2624  0005C8  101B               	iorwf	check_RFID@hexBuf+9,w,c
  2625  0005CA  6E22               	movwf	check_RFID@byte5,c
  2626                           
  2627                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2628  0005CC  501C               	movf	check_RFID@hexBuf+10,w,c
  2629  0005CE  A4D8               	btfss	status,2,c
  2630  0005D0  D002               	goto	u970
  2631  0005D2  0E01               	movlw	1
  2632  0005D4  D001               	goto	u980
  2633  0005D6                     u970:
  2634  0005D6  0E00               	movlw	0
  2635  0005D8                     u980:
  2636  0005D8  101D               	iorwf	check_RFID@hexBuf+11,w,c
  2637  0005DA  6E23               	movwf	check_RFID@checksum,c
  2638                           
  2639                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2640  0005DC  501E               	movf	check_RFID@byte1,w,c
  2641  0005DE  181F               	xorwf	check_RFID@byte2,w,c
  2642  0005E0  1820               	xorwf	check_RFID@byte3,w,c
  2643  0005E2  1821               	xorwf	check_RFID@byte4,w,c
  2644  0005E4  6E10               	movwf	??_check_RFID& (0+255),c
  2645  0005E6  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  2646  0005E8  5023               	movf	check_RFID@checksum,w,c
  2647  0005EA  1822               	xorwf	check_RFID@byte5,w,c
  2648  0005EC  A4D8               	btfss	status,2,c
  2649  0005EE  D002               	goto	u990
  2650  0005F0  0E01               	movlw	1
  2651  0005F2  D001               	goto	u1000
  2652  0005F4                     u990:
  2653  0005F4  0E00               	movlw	0
  2654  0005F6                     u1000:
  2655  0005F6  1A10               	xorwf	??_check_RFID,f,c
  2656  0005F8  0E00               	movlw	0
  2657  0005FA  1A11               	xorwf	??_check_RFID+1,f,c
  2658  0005FC  5010               	movf	??_check_RFID,w,c
  2659  0005FE  1011               	iorwf	??_check_RFID+1,w,c
  2660  000600  B4D8               	btfsc	status,2,c
  2661  000602  D00A               	goto	l1683
  2662                           
  2663                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  2664  000604  0E02               	movlw	2
  2665  000606  EC69  F006         	call	_SetLine
  2666                           
  2667                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  2668  00060A  0E11               	movlw	low STR_2
  2669  00060C  6E0C               	movwf	LCD_String@string,c
  2670  00060E  0E03               	movlw	high STR_2
  2671  000610  6E0D               	movwf	LCD_String@string+1,c
  2672  000612  EC1F  F006         	call	_LCD_String	;wreg free
  2673                           
  2674                           ;RFID.c: 101:     }
  2675  000616  0012               	return	
  2676  000618                     l1683:
  2677                           
  2678                           ;RFID.c: 104:         SetLine(2);
  2679  000618  0E02               	movlw	2
  2680  00061A  EC69  F006         	call	_SetLine
  2681                           
  2682                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  2683  00061E  0E01               	movlw	low STR_3
  2684  000620  6E0C               	movwf	LCD_String@string,c
  2685  000622  0E03               	movlw	high STR_3
  2686  000624  6E0D               	movwf	LCD_String@string+1,c
  2687  000626  EC1F  F006         	call	_LCD_String	;wreg free
  2688  00062A  0012               	return		;funcret
  2689  00062C                     __end_of_check_RFID:
  2690                           	opt callstack 0
  2691                           
  2692 ;; *************** function _SetLine *****************
  2693 ;; Defined at:
  2694 ;;		line 107 in file "LCDIO.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;  line            1    wreg     unsigned char 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  line            1   11[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, status,2, status,0, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2708 ;;      Params:         0       0       0       0
  2709 ;;      Locals:         1       0       0       0
  2710 ;;      Temps:          0       0       0       0
  2711 ;;      Totals:         1       0       0       0
  2712 ;;Total ram usage:        1 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    5
  2715 ;; This function calls:
  2716 ;;		_SendLCD
  2717 ;; This function is called by:
  2718 ;;		_check_RFID
  2719 ;;		_display_RFID
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text18
  2724  000CD2                     __ptext18:
  2725                           	opt callstack 0
  2726  000CD2                     _SetLine:
  2727                           	opt callstack 24
  2728                           
  2729                           ;incstack = 0
  2730                           ;SetLine@line stored from wreg
  2731  000CD2  6E0C               	movwf	SetLine@line,c
  2732                           
  2733                           ;LCDIO.c: 109:     if(line == 1){
  2734  000CD4  040C               	decf	SetLine@line,w,c
  2735  000CD6  A4D8               	btfss	status,2,c
  2736  000CD8  D005               	goto	l1519
  2737                           
  2738                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2739  000CDA  0E00               	movlw	0
  2740  000CDC  6E0A               	movwf	SendLCD@type,c
  2741  000CDE  0E80               	movlw	128
  2742  000CE0  EC3A  F006         	call	_SendLCD
  2743  000CE4                     l1519:
  2744                           
  2745                           ;LCDIO.c: 113:     if(line == 2){
  2746  000CE4  0E02               	movlw	2
  2747  000CE6  180C               	xorwf	SetLine@line,w,c
  2748  000CE8  A4D8               	btfss	status,2,c
  2749  000CEA  D005               	goto	l1523
  2750                           
  2751                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2752  000CEC  0E00               	movlw	0
  2753  000CEE  6E0A               	movwf	SendLCD@type,c
  2754  000CF0  0EC0               	movlw	192
  2755  000CF2  EC3A  F006         	call	_SendLCD
  2756  000CF6                     l1523:
  2757                           
  2758                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2759  000CF6  0E21               	movlw	33
  2760  000CF8                     u1327:
  2761  000CF8  2EE8               	decfsz	wreg,f,c
  2762  000CFA  D7FE               	bra	u1327
  2763  000CFC  F000               	nop	
  2764  000CFE  0012               	return		;funcret
  2765  000D00                     __end_of_SetLine:
  2766                           	opt callstack 0
  2767                           
  2768 ;; *************** function _LCD_String *****************
  2769 ;; Defined at:
  2770 ;;		line 119 in file "LCDIO.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  string          2   11[COMRAM] PTR unsigned char 
  2773 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2785 ;;      Params:         2       0       0       0
  2786 ;;      Locals:         0       0       0       0
  2787 ;;      Temps:          0       0       0       0
  2788 ;;      Totals:         2       0       0       0
  2789 ;;Total ram usage:        2 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    5
  2792 ;; This function calls:
  2793 ;;		_SendLCD
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;;		_check_RFID
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text19
  2801  000C3E                     __ptext19:
  2802                           	opt callstack 0
  2803  000C3E                     _LCD_String:
  2804                           	opt callstack 24
  2805                           
  2806                           ;LCDIO.c: 121: while(*string != 0){
  2807                           
  2808                           ;incstack = 0
  2809  000C3E  D010               	goto	l1505
  2810  000C40                     l1499:
  2811                           
  2812                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2813  000C40  0E01               	movlw	1
  2814  000C42  6E0A               	movwf	SendLCD@type,c
  2815  000C44  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2816  000C48  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2817  000C4C                     	if	0	;tblptru may be non-zero
  2818  000C4C                     	endif
  2819  000C4C                     	if	0	;tblptru may be non-zero
  2820  000C4C                     	endif
  2821  000C4C  0008               	tblrd		*
  2822  000C4E  50F5               	movf	tablat,w,c
  2823  000C50  EC3A  F006         	call	_SendLCD
  2824  000C54  4A0C               	infsnz	LCD_String@string,f,c
  2825  000C56  2A0D               	incf	LCD_String@string+1,f,c
  2826                           
  2827                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2828  000C58  0E21               	movlw	33
  2829  000C5A                     u1337:
  2830  000C5A  2EE8               	decfsz	wreg,f,c
  2831  000C5C  D7FE               	bra	u1337
  2832  000C5E  F000               	nop	
  2833  000C60                     l1505:
  2834                           
  2835                           ;LCDIO.c: 121: while(*string != 0){
  2836  000C60  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2837  000C64  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2838  000C68                     	if	0	;tblptru may be non-zero
  2839  000C68                     	endif
  2840  000C68                     	if	0	;tblptru may be non-zero
  2841  000C68                     	endif
  2842  000C68  0008               	tblrd		*
  2843  000C6A  50F5               	movf	tablat,w,c
  2844  000C6C  0900               	iorlw	0
  2845  000C6E  B4D8               	btfsc	status,2,c
  2846  000C70  0012               	return	
  2847  000C72  D7E6               	goto	l1499
  2848  000C74                     __end_of_LCD_String:
  2849                           	opt callstack 0
  2850                           
  2851 ;; *************** function _SendLCD *****************
  2852 ;; Defined at:
  2853 ;;		line 44 in file "LCDIO.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  Byte            1    wreg     unsigned char 
  2856 ;;  type            1    9[COMRAM] unsigned char 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  Byte            1   10[COMRAM] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      void 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2868 ;;      Params:         1       0       0       0
  2869 ;;      Locals:         1       0       0       0
  2870 ;;      Temps:          0       0       0       0
  2871 ;;      Totals:         2       0       0       0
  2872 ;;Total ram usage:        2 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    4
  2875 ;; This function calls:
  2876 ;;		_LCDout
  2877 ;; This function is called by:
  2878 ;;		_init_LCD
  2879 ;;		_SetLine
  2880 ;;		_LCD_String
  2881 ;;		_ClearLCD
  2882 ;;		_display_RFID
  2883 ;;		_ShiftLeft
  2884 ;;		_ShiftRight
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text20
  2889  000C74                     __ptext20:
  2890                           	opt callstack 0
  2891  000C74                     _SendLCD:
  2892                           	opt callstack 24
  2893                           
  2894                           ;incstack = 0
  2895                           ;SendLCD@Byte stored from wreg
  2896  000C74  6E0B               	movwf	SendLCD@Byte,c
  2897                           
  2898                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2899  000C76  B00A               	btfsc	SendLCD@type,0,c
  2900  000C78  D002               	bra	u605
  2901  000C7A  9E89               	bcf	3977,7,c	;volatile
  2902  000C7C  D001               	bra	u606
  2903  000C7E                     u605:
  2904  000C7E  8E89               	bsf	3977,7,c	;volatile
  2905  000C80                     u606:
  2906                           
  2907                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2908  000C80  380B               	swapf	SendLCD@Byte,w,c
  2909  000C82  0B0F               	andlw	15
  2910  000C84  0B0F               	andlw	15
  2911  000C86  EC02  F005         	call	_LCDout
  2912                           
  2913                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  2914  000C8A  0E06               	movlw	6
  2915  000C8C                     u1347:
  2916  000C8C  2EE8               	decfsz	wreg,f,c
  2917  000C8E  D7FE               	bra	u1347
  2918  000C90  D000               	nop2	
  2919                           
  2920                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  2921  000C92  500B               	movf	SendLCD@Byte,w,c
  2922  000C94  0B0F               	andlw	15
  2923  000C96  EC02  F005         	call	_LCDout
  2924                           
  2925                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2926  000C9A  0E21               	movlw	33
  2927  000C9C                     u1357:
  2928  000C9C  2EE8               	decfsz	wreg,f,c
  2929  000C9E  D7FE               	bra	u1357
  2930  000CA0  F000               	nop	
  2931  000CA2  0012               	return		;funcret
  2932  000CA4                     __end_of_SendLCD:
  2933                           	opt callstack 0
  2934                           
  2935 ;; *************** function _LCDout *****************
  2936 ;; Defined at:
  2937 ;;		line 31 in file "LCDIO.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  number          1    wreg     unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  number          1    8[COMRAM] unsigned char 
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2951 ;;      Params:         0       0       0       0
  2952 ;;      Locals:         1       0       0       0
  2953 ;;      Temps:          1       0       0       0
  2954 ;;      Totals:         2       0       0       0
  2955 ;;Total ram usage:        2 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    3
  2958 ;; This function calls:
  2959 ;;		_E_TOG
  2960 ;; This function is called by:
  2961 ;;		_SendLCD
  2962 ;;		_init_LCD
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text21
  2967  000A04                     __ptext21:
  2968                           	opt callstack 0
  2969  000A04                     _LCDout:
  2970                           	opt callstack 24
  2971                           
  2972                           ;incstack = 0
  2973                           ;LCDout@number stored from wreg
  2974  000A04  6E09               	movwf	LCDout@number,c
  2975                           
  2976                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  2977  000A06  C009  F008         	movff	LCDout@number,??_LCDout
  2978  000A0A  0E01               	movlw	1
  2979  000A0C  1608               	andwf	??_LCDout,f,c
  2980  000A0E  508B               	movf	3979,w,c	;volatile
  2981  000A10  1808               	xorwf	??_LCDout,w,c
  2982  000A12  0BFE               	andlw	-2
  2983  000A14  1808               	xorwf	??_LCDout,w,c
  2984  000A16  6E8B               	movwf	3979,c	;volatile
  2985                           
  2986                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  2987  000A18  C009  F008         	movff	LCDout@number,??_LCDout
  2988  000A1C  90D8               	bcf	status,0,c
  2989  000A1E  3208               	rrcf	??_LCDout,f,c
  2990  000A20  0E01               	movlw	1
  2991  000A22  1608               	andwf	??_LCDout,f,c
  2992  000A24  4608               	rlncf	??_LCDout,f,c
  2993  000A26  4608               	rlncf	??_LCDout,f,c
  2994  000A28  4608               	rlncf	??_LCDout,f,c
  2995  000A2A  508B               	movf	3979,w,c	;volatile
  2996  000A2C  1808               	xorwf	??_LCDout,w,c
  2997  000A2E  0BF7               	andlw	-9
  2998  000A30  1808               	xorwf	??_LCDout,w,c
  2999  000A32  6E8B               	movwf	3979,c	;volatile
  3000                           
  3001                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3002  000A34  C009  F008         	movff	LCDout@number,??_LCDout
  3003  000A38  90D8               	bcf	status,0,c
  3004  000A3A  3208               	rrcf	??_LCDout,f,c
  3005  000A3C  90D8               	bcf	status,0,c
  3006  000A3E  3208               	rrcf	??_LCDout,f,c
  3007  000A40  0E01               	movlw	1
  3008  000A42  1608               	andwf	??_LCDout,f,c
  3009  000A44  508C               	movf	3980,w,c	;volatile
  3010  000A46  1808               	xorwf	??_LCDout,w,c
  3011  000A48  0BFE               	andlw	-2
  3012  000A4A  1808               	xorwf	??_LCDout,w,c
  3013  000A4C  6E8C               	movwf	3980,c	;volatile
  3014                           
  3015                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3016  000A4E  C009  F008         	movff	LCDout@number,??_LCDout
  3017  000A52  90D8               	bcf	status,0,c
  3018  000A54  3208               	rrcf	??_LCDout,f,c
  3019  000A56  90D8               	bcf	status,0,c
  3020  000A58  3208               	rrcf	??_LCDout,f,c
  3021  000A5A  90D8               	bcf	status,0,c
  3022  000A5C  3208               	rrcf	??_LCDout,f,c
  3023  000A5E  0E01               	movlw	1
  3024  000A60  1608               	andwf	??_LCDout,f,c
  3025  000A62  4608               	rlncf	??_LCDout,f,c
  3026  000A64  508C               	movf	3980,w,c	;volatile
  3027  000A66  1808               	xorwf	??_LCDout,w,c
  3028  000A68  0BFD               	andlw	-3
  3029  000A6A  1808               	xorwf	??_LCDout,w,c
  3030  000A6C  6E8C               	movwf	3980,c	;volatile
  3031                           
  3032                           ;LCDIO.c: 39:  E_TOG();
  3033  000A6E  ECE1  F006         	call	_E_TOG	;wreg free
  3034                           
  3035                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3036  000A72  0E03               	movlw	3
  3037  000A74                     u1367:
  3038  000A74  2EE8               	decfsz	wreg,f,c
  3039  000A76  D7FE               	bra	u1367
  3040  000A78  F000               	nop	
  3041  000A7A  0012               	return		;funcret
  3042  000A7C                     __end_of_LCDout:
  3043                           	opt callstack 0
  3044                           
  3045 ;; *************** function _E_TOG *****************
  3046 ;; Defined at:
  3047 ;;		line 23 in file "LCDIO.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3061 ;;      Params:         0       0       0       0
  3062 ;;      Locals:         0       0       0       0
  3063 ;;      Temps:          0       0       0       0
  3064 ;;      Totals:         0       0       0       0
  3065 ;;Total ram usage:        0 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    2
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_LCDout
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text22
  3076  000DC2                     __ptext22:
  3077                           	opt callstack 0
  3078  000DC2                     _E_TOG:
  3079                           	opt callstack 24
  3080                           
  3081                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3082                           
  3083                           ;incstack = 0
  3084  000DC2  8C89               	bsf	3977,6,c	;volatile
  3085                           
  3086                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3087  000DC4  0E03               	movlw	3
  3088  000DC6                     u1377:
  3089  000DC6  2EE8               	decfsz	wreg,f,c
  3090  000DC8  D7FE               	bra	u1377
  3091  000DCA  F000               	nop	
  3092                           
  3093                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3094  000DCC  9C89               	bcf	3977,6,c	;volatile
  3095  000DCE  0012               	return		;funcret
  3096  000DD0                     __end_of_E_TOG:
  3097                           	opt callstack 0
  3098                           
  3099 ;; *************** function _InterruptHandlerHigh *****************
  3100 ;; Defined at:
  3101 ;;		line 59 in file "main.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  throwaway       1    0        unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3115 ;;      Params:         0       0       0       0
  3116 ;;      Locals:         1       0       0       0
  3117 ;;      Temps:          2       0       0       0
  3118 ;;      Totals:         3       0       0       0
  3119 ;;Total ram usage:        3 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    1
  3122 ;; This function calls:
  3123 ;;		_processRFID
  3124 ;; This function is called by:
  3125 ;;		Interrupt level 2
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	intcode
  3130  000008                     __pintcode:
  3131                           	opt callstack 0
  3132  000008                     _InterruptHandlerHigh:
  3133                           	opt callstack 24
  3134                           
  3135                           ;incstack = 0
  3136  000008  8258               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3137  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3138  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3139                           
  3140                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3141  000012  AA9E               	btfss	3998,5,c	;volatile
  3142  000014  D00D               	goto	i2l71
  3143  000016  044B               	decf	_robot_mode,w,c	;volatile
  3144  000018  A4D8               	btfss	status,2,c
  3145  00001A  D00A               	goto	i2l71
  3146                           
  3147                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3148  00001C  0E4C               	movlw	low _RFIDbuf
  3149  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  3150  000020  0E00               	movlw	high _RFIDbuf
  3151  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  3152  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3153  000028  ECD9  F005         	call	_processRFID	;wreg free
  3154  00002C  6E4A               	movwf	_RFID_flag,c	;volatile
  3155                           
  3156                           ;main.c: 67:     }
  3157  00002E  D001               	goto	i2l73
  3158  000030                     i2l71:
  3159  000030  50AE               	movf	4014,w,c	;volatile
  3160  000032                     i2l73:
  3161  000032  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3162  000036  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3163  00003A  9258               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3164  00003C  0011               	retfie		f
  3165  00003E                     __end_of_InterruptHandlerHigh:
  3166                           	opt callstack 0
  3167                           
  3168 ;; *************** function _processRFID *****************
  3169 ;; Defined at:
  3170 ;;		line 34 in file "RFID.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  3173 ;;		 -> RFIDbuf(12), 
  3174 ;;  latestChar      1    2[COMRAM] unsigned char 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  i               1    3[COMRAM] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      unsigned char 
  3179 ;; Registers used:
  3180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3186 ;;      Params:         3       0       0       0
  3187 ;;      Locals:         1       0       0       0
  3188 ;;      Temps:          0       0       0       0
  3189 ;;      Totals:         4       0       0       0
  3190 ;;Total ram usage:        4 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_InterruptHandlerHigh
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text24
  3200  000BB2                     __ptext24:
  3201                           	opt callstack 0
  3202  000BB2                     _processRFID:
  3203                           	opt callstack 24
  3204                           
  3205                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3206                           
  3207                           ;incstack = 0
  3208  000BB2  0E03               	movlw	3
  3209  000BB4  1803               	xorwf	processRFID@latestChar,w,c
  3210  000BB6  A4D8               	btfss	status,2,c
  3211  000BB8  D002               	goto	i2l1549
  3212                           
  3213                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3214  000BBA  0E01               	movlw	1
  3215  000BBC  0012               	return	
  3216  000BBE                     i2l1549:
  3217                           
  3218                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3219  000BBE  0E02               	movlw	2
  3220  000BC0  1803               	xorwf	processRFID@latestChar,w,c
  3221  000BC2  A4D8               	btfss	status,2,c
  3222  000BC4  D012               	goto	i2l1569
  3223                           
  3224                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3225  000BC6  0E00               	movlw	0
  3226  000BC8  6E49               	movwf	processRFID@position_in_buf,c
  3227                           
  3228                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3229  000BCA  0E00               	movlw	0
  3230  000BCC  6E04               	movwf	processRFID@i,c
  3231  000BCE                     i2l1557:
  3232                           
  3233                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3234  000BCE  5004               	movf	processRFID@i,w,c
  3235  000BD0  2401               	addwf	processRFID@RFIDbuf,w,c
  3236  000BD2  6ED9               	movwf	fsr2l,c
  3237  000BD4  0E00               	movlw	0
  3238  000BD6  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3239  000BD8  6EDA               	movwf	fsr2h,c
  3240  000BDA  0E00               	movlw	0
  3241  000BDC  6EDF               	movwf	indf2,c
  3242                           
  3243                           ;RFID.c: 56:            }
  3244  000BDE  2A04               	incf	processRFID@i,f,c
  3245  000BE0  0E0B               	movlw	11
  3246  000BE2  6404               	cpfsgt	processRFID@i,c
  3247  000BE4  D7F4               	goto	i2l1557
  3248  000BE6                     i2u77_40:
  3249                           
  3250                           ;RFID.c: 58:            return 0;
  3251  000BE6  0E00               	movlw	0
  3252  000BE8  0012               	return	
  3253  000BEA                     i2l1569:
  3254                           
  3255                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  3256  000BEA  5049               	movf	processRFID@position_in_buf,w,c
  3257  000BEC  2401               	addwf	processRFID@RFIDbuf,w,c
  3258  000BEE  6ED9               	movwf	fsr2l,c
  3259  000BF0  0E00               	movlw	0
  3260  000BF2  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3261  000BF4  6EDA               	movwf	fsr2h,c
  3262  000BF6  C003  FFDF         	movff	processRFID@latestChar,indf2
  3263                           
  3264                           ;RFID.c: 64:             position_in_buf++;
  3265  000BFA  2A49               	incf	processRFID@position_in_buf,f,c
  3266  000BFC  D7F4               	goto	i2u77_40
  3267  000BFE                     __end_of_processRFID:
  3268                           	opt callstack 0
  3269                           
  3270                           	psect	rparam
  3271  0000                     
  3272                           	psect	temp
  3273  000058                     btemp:
  3274                           	opt callstack 0
  3275  000058                     	ds	1
  3276  0000                     int$flags	set	btemp
  3277  0000                     wtemp8	set	btemp+1
  3278  0000                     ttemp5	set	btemp+1
  3279  0000                     ttemp6	set	btemp+4
  3280  0000                     ttemp7	set	btemp+8
  3281                           tosu	equ	0xFFF
  3282                           tosh	equ	0xFFE
  3283                           tosl	equ	0xFFD
  3284                           stkptr	equ	0xFFC
  3285                           pclatu	equ	0xFFB
  3286                           pclath	equ	0xFFA
  3287                           pcl	equ	0xFF9
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           indf0	equ	0xFEF
  3295                           postinc0	equ	0xFEE
  3296                           postdec0	equ	0xFED
  3297                           preinc0	equ	0xFEC
  3298                           plusw0	equ	0xFEB
  3299                           fsr0h	equ	0xFEA
  3300                           fsr0l	equ	0xFE9
  3301                           wreg	equ	0xFE8
  3302                           indf1	equ	0xFE7
  3303                           postinc1	equ	0xFE6
  3304                           postdec1	equ	0xFE5
  3305                           preinc1	equ	0xFE4
  3306                           plusw1	equ	0xFE3
  3307                           fsr1h	equ	0xFE2
  3308                           fsr1l	equ	0xFE1
  3309                           bsr	equ	0xFE0
  3310                           indf2	equ	0xFDF
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           preinc2	equ	0xFDC
  3314                           plusw2	equ	0xFDB
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     72      87
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveBackward
    _main->_moveForward
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _moveForward->_setMotorPWM
    _moveBackward->_setMotorPWM
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0   21820
                                             39 COMRAM    33    33      0
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                      _classify_data
                       _display_RFID
                  _init_motor_struct
                       _moveBackward
                        _moveForward
                              _setup
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            7     3      4    2185
                                             30 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    2141
                                             30 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1218
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1098
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _moveForward                                          9     3      6    2261
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBackward                                         9     3      6    2261
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2271
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1811
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     257
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     398
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3324
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1038
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        2     0      2      98
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3284
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1082
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1311
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1038
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      60
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (7) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveBackward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveForward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     48      57       1       92.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57       3        0.0%
DATA                 0      0      57      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 15:18:41 2020

                           l63 0CA8                             l80 03A4                             l90 044C  
                           l91 043E                             l86 03CE                   ___awdiv@sign 0013  
          ___wmul@multiplicand 000A                  ?_display_RFID 000D                    ?_LCD_String 000C  
                          l135 06F4            display_RFID@dataBuf 000D                            u605 0C7E  
                          u606 0C80                            u640 0948                            u704 06E8  
                          u705 06E4                            u810 0C3C                            u715 0740  
                          u900 0598                            u910 05A6                            u920 05A8  
                          u930 05B6                            u940 05B8                            u860 057C  
                          u780 0A02                            u950 05C6                            u870 0586  
                          u694 06A0                            u695 069C                            u960 05C8  
                          u880 0588                            u970 05D6                            u890 0596  
                          u980 05D8                            u990 05F4                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l1431 0926  
                         l1505 0C60                           l1425 0916                           l1513 06CC  
                         l1523 0CF6                           l1603 09AE                           l1437 093C  
                         l1453 096E                           l1519 0CE4                           l1623 0DBE  
                         l1439 0944                           l1631 0AA6                           l1457 097C  
                         l1449 0964                           l1707 0B6C                           l1661 04E4  
                         l1733 0376                           l1639 0ADA                           l1673 0568  
                         l1649 0C10                           l1729 035A                           l1499 0C40  
                         l1683 0618                           l1667 0526                           l1691 0B1A  
                         l1771 0482                           l1755 0402                           l1781 049A  
                         l1767 0464                           l1699 0B4E                           l1789 04CE  
                         STR_1 0321                           STR_2 0311                           STR_3 0301  
                         u1000 05F6                           u1110 0408                           u1150 04C6  
                         u1207 09E4                           u1160 04D2                           u1080 03AA  
                         u1217 0858                           u1307 08FA                           u1227 086E  
                         u1317 0D88                           u1237 087E                           _LATB 000F8A  
                         u1327 0CF8                           u1247 088C                           u1337 0C5A  
                         u1257 089A                           u1347 0C8C                           u1267 08AC  
                         u1357 0C9C                           u1277 08BE                           u1197 04A4  
                         u1367 0A74                           u1287 08D4                           u1377 0DC6  
                         u1297 08E8                           i2l71 0030                           i2l73 0032  
                         _main 0332                           fsr2h 000FDA                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0058                           _stop 0B64                           prodh 000FF4  
                         prodl 000FF3                           start 003E                   ___param_bank 000000  
              __end_of_SendLCD 0CA4                __end_of_SetLine 0D00                 ??_display_RFID 000F  
                        ?_main 0001                __end_of___awdiv 0986                          ?_stop 001F  
              ___awdiv@divisor 0010                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0012                          _RCREG 000FAE                          _E_TOG 0DC2  
                        _SPBRG 000FAF                   ?_init_sensor 0001                   main@raw_data 002A  
              __end_of_initPWM 0D78                          _setup 0CA4                          main@i 0030  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0059  
                        ttemp6 005C                          ttemp7 0060                          stop@i 0023  
                        status 000FD8                          wtemp8 0059            __size_of_LCD_String 0036  
             __end_of_ClearLCD 0D92           moveForward@max_power 0023                 __CFG_MCLRE$OFF 000000  
              __initialization 0D26                   __end_of_main 04DC                   __end_of_stop 0BB2  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000C                         ??_main 0028  
                       ??_stop 0023                  __activetblptr 000001                         ?_E_TOG 0001  
                 ?_setMotorPWM 0016                   ?_moveForward 001F               ___awdiv@dividend 000E  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       i2l1557 0BCE                         i2l1549 0BBE                         i2l1569 0BEA  
                       _LCDout 0A04                    SendLCD@Byte 000B                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 000A  
          main@beacon_location 0034                      ??_SendLCD 000B                      ??_SetLine 000C  
                display_RFID@i 000F                         ___wmul 0D00                      ??___awdiv 0012  
             __end_of_init_LCD 0902            init_motor_struct@mL 001F            init_motor_struct@mR 0021  
                       clear_0 0D2C               ___awdiv@quotient 0014                      ??_initPWM 000A  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 001F                         stop@mR 0021  
                 ?_processRFID 0001              _init_motor_struct 0750           __end_of_display_RFID 0C3E  
           ?_init_motor_struct 001F                     __accesstop 0060        __end_of__initialization 0D32  
                ___rparam_used 000001                    SetLine@line 000C                  __end_of_E_TOG 0DD0  
          ??_init_motor_struct 0023                 __pcstackCOMRAM 0001                  __end_of_setup 0CD2  
                 ??_LCD_String 000E                        ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0036  
                    ?_ClearLCD 0001      __end_of_init_motor_struct 083A          __end_of_classify_data 0DC2  
                   _check_RFID 04DC           __size_of_init_sensor 0018                        ??_setup 000D  
                ?_moveBackward 001F                        ?_LCDout 0001             __size_of_init_RFID 001A  
           __end_of_LCD_String 0C74                        ?___wmul 0008                        _CAP1CON 000F63  
                      _DFLTCON 000F60                     ??_ClearLCD 000C                        _RFIDbuf 004C  
                      i2u77_40 0BE6                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0025           __size_of_setMotorPWM 0124           __size_of_moveForward 0074  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 0026  
           __size_of_turnRight 007E                        _SendLCD 0C74                        __Hparam 0000  
                      _SetLine 0CD2                        __Lparam 0000          processRFID@latestChar 0003  
                      ___awdiv 0902                __size_of___wmul 0026                   __psmallconst 0300  
             initPWM@PWMperiod 0008                        __pcinit 0D26                        __ramtop 0300  
                      __ptext0 0332                        __ptext1 0986                        __ptext2 0B64  
                      __ptext3 0CA4                        __ptext4 0D92                        __ptext5 0D44  
                      __ptext6 083A                        __ptext7 0D5E                        __ptext8 0A7C  
                      __ptext9 0AF0              __end_of_init_RFID 0D5E               check_RFID@hexBuf 0012  
                      _initPWM 0D5E                   LCDout@number 0009     __size_of_init_motor_struct 00EA  
        __size_of_display_RFID 0040                    ?_check_RFID 000E           end_of_initialization 0D32  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                    _RFID_flag 004A                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _robot_mode 004B  
                 _display_RFID 0BFE                      _PORTDbits 000F83              __end_of_turnRight 0A04  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                  moveForward@mL 001F                  moveForward@mR 0021  
               __end_of_LCDout 0A7C                      _TXSTAbits 000FAC                     main@motorL 0037  
                   main@motorR 0040           __end_of_moveBackward 0B64            __size_of_check_RFID 0150  
               __end_of___wmul 0D26                    _BAUDCONbits 000FAA            start_initialization 0D26  
            __size_of_ClearLCD 001A          classify_data@raw_data 0008                       ??_LCDout 0008  
        moveBackward@max_power 0023   __end_of_InterruptHandlerHigh 003E                       ??___wmul 000C  
                  __pbssCOMRAM 0049                  ??_init_sensor 0008              __size_of_init_LCD 00C8  
                     ?_SendLCD 000A                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 000E         __size_of_classify_data 0018             check_RFID@checksum 0023  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       ?_initPWM 0008  
                  __smallconst 0300                 __size_of_E_TOG 000E                      _init_RFID 0D44  
                ??_setMotorPWM 0018                  ??_moveForward 0025                   ??_check_RFID 0010  
               __size_of_setup 002E                check_RFID@byte1 001E                check_RFID@byte2 001F  
              check_RFID@byte3 0020                check_RFID@byte4 0021                check_RFID@byte5 0022  
          __end_of_init_sensor 0DAA                 ___wmul@product 000C                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D          __size_of_moveBackward 0074                    turnRight@mL 001F  
                  turnRight@mR 0021                       _PIR1bits 000F9E                       _RCONbits 000FD0  
           __end_of_check_RFID 062C                      main@i_498 0035              ___wmul@multiplier 0008  
                 setMotorPWM@m 0016                   moveForward@i 0026           _InterruptHandlerHigh 0008  
                     _ClearLCD 0D78                     ?_init_RFID 0001                      _turnRight 0986  
                ??_processRFID 0004                  _classify_data 0DAA                 moveBackward@mL 001F  
               moveBackward@mR 0021                   _moveBackward 0AF0            __end_of_setMotorPWM 0750  
          __end_of_moveForward 0AF0                    check_RFID@i 0024                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
                 __Lsmallconst 0300               __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001  
             __size_of_initPWM 001A                    _init_sensor 0D92                 ?_classify_data 0008  
            check_RFID@dataBuf 000E                     ?_turnRight 001F                       __ptext10 0750  
                     __ptext11 062C                       __ptext20 0C74                       __ptext12 0D00  
                     __ptext21 0A04                       __ptext13 0902                       __ptext22 0DC2  
                     __ptext14 0BFE                       __ptext15 0D78                       __ptext24 0BB2  
                     __ptext16 0DAA                       __ptext17 04DC                       __ptext18 0CD2  
                     __ptext19 0C3E                       _init_LCD 083A                  __size_of_main 01AA  
                __size_of_stop 004E            __end_of_processRFID 0BFE                     turnRight@i 0024  
                     int$flags 0058                     _LCD_String 0C3E                     _INTCONbits 000FF2  
                  ??_init_RFID 0008                    _setMotorPWM 062C                    _moveForward 0A7C  
                     intlevel2 0000                     _OSCCONbits 000FD3     processRFID@position_in_buf 0049  
       ??_InterruptHandlerHigh 0005                ??_classify_data 000A                    ??_turnRight 0023  
                  _processRFID 0BB2             main@movementMicros 002C  
