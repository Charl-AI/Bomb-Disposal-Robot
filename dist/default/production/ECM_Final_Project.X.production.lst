

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 14:14:32 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _ANSEL1	set	4025
    86  0000                     _ANSEL0	set	4024
    87  0000                     _T5CON	set	4023
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _TXSTAbits	set	4012
    92  0000                     _BAUDCONbits	set	4010
    93  0000                     _SPBRGH	set	4016
    94  0000                     _SPBRG	set	4015
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATDbits	set	3980
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _RCREG	set	4014
   108  0000                     _PIR1bits	set	3998
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _T0CON	set	4053
   111  0000                     _TRISDbits	set	3989
   112  0000                     _TRISBbits	set	3987
   113  0000                     _RCONbits	set	4048
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCCONbits	set	4051
   116  0000                     _OSCCON	set	4051
   117  0000                     _PDC1H	set	3958
   118  0000                     _PDC1L	set	3959
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121                           
   122                           	psect	smallconst
   123  000300                     __psmallconst:
   124                           	opt callstack 0
   125  000300  00                 	db	0
   126  000301                     STR_14:
   127  000301  53                 	db	83	;'S'
   128  000302  54                 	db	84	;'T'
   129  000303  41                 	db	65	;'A'
   130  000304  52                 	db	82	;'R'
   131  000305  54                 	db	84	;'T'
   132  000306  49                 	db	73	;'I'
   133  000307  4E                 	db	78	;'N'
   134  000308  47                 	db	71	;'G'
   135  000309  20                 	db	32
   136  00030A  53                 	db	83	;'S'
   137  00030B  45                 	db	69	;'E'
   138  00030C  41                 	db	65	;'A'
   139  00030D  52                 	db	82	;'R'
   140  00030E  43                 	db	67	;'C'
   141  00030F  48                 	db	72	;'H'
   142  000310  00                 	db	0
   143  000311                     STR_13:
   144  000311  54                 	db	84	;'T'
   145  000312  4F                 	db	79	;'O'
   146  000313  20                 	db	32
   147  000314  53                 	db	83	;'S'
   148  000315  54                 	db	84	;'T'
   149  000316  41                 	db	65	;'A'
   150  000317  52                 	db	82	;'R'
   151  000318  54                 	db	84	;'T'
   152  000319  20                 	db	32
   153  00031A  53                 	db	83	;'S'
   154  00031B  45                 	db	69	;'E'
   155  00031C  41                 	db	65	;'A'
   156  00031D  52                 	db	82	;'R'
   157  00031E  43                 	db	67	;'C'
   158  00031F  48                 	db	72	;'H'
   159  000320  00                 	db	0
   160  000321                     STR_6:
   161  000321  52                 	db	82	;'R'
   162  000322  45                 	db	69	;'E'
   163  000323  53                 	db	83	;'S'
   164  000324  45                 	db	69	;'E'
   165  000325  54                 	db	84	;'T'
   166  000326  54                 	db	84	;'T'
   167  000327  49                 	db	73	;'I'
   168  000328  4E                 	db	78	;'N'
   169  000329  47                 	db	71	;'G'
   170  00032A  20                 	db	32
   171  00032B  52                 	db	82	;'R'
   172  00032C  4F                 	db	79	;'O'
   173  00032D  42                 	db	66	;'B'
   174  00032E  4F                 	db	79	;'O'
   175  00032F  54                 	db	84	;'T'
   176  000330  00                 	db	0
   177  000331                     STR_3:
   178  000331  43                 	db	67	;'C'
   179  000332  48                 	db	72	;'H'
   180  000333  45                 	db	69	;'E'
   181  000334  43                 	db	67	;'C'
   182  000335  4B                 	db	75	;'K'
   183  000336  53                 	db	83	;'S'
   184  000337  55                 	db	85	;'U'
   185  000338  4D                 	db	77	;'M'
   186  000339  20                 	db	32
   187  00033A  46                 	db	70	;'F'
   188  00033B  41                 	db	65	;'A'
   189  00033C  49                 	db	73	;'I'
   190  00033D  4C                 	db	76	;'L'
   191  00033E  45                 	db	69	;'E'
   192  00033F  44                 	db	68	;'D'
   193  000340  00                 	db	0
   194  000341                     STR_2:
   195  000341  43                 	db	67	;'C'
   196  000342  48                 	db	72	;'H'
   197  000343  45                 	db	69	;'E'
   198  000344  43                 	db	67	;'C'
   199  000345  4B                 	db	75	;'K'
   200  000346  53                 	db	83	;'S'
   201  000347  55                 	db	85	;'U'
   202  000348  4D                 	db	77	;'M'
   203  000349  20                 	db	32
   204  00034A  50                 	db	80	;'P'
   205  00034B  41                 	db	65	;'A'
   206  00034C  53                 	db	83	;'S'
   207  00034D  53                 	db	83	;'S'
   208  00034E  45                 	db	69	;'E'
   209  00034F  44                 	db	68	;'D'
   210  000350  00                 	db	0
   211  000351                     STR_7:
   212  000351  4D                 	db	77	;'M'
   213  000352  4F                 	db	79	;'O'
   214  000353  56                 	db	86	;'V'
   215  000354  49                 	db	73	;'I'
   216  000355  4E                 	db	78	;'N'
   217  000356  47                 	db	71	;'G'
   218  000357  20                 	db	32
   219  000358  54                 	db	84	;'T'
   220  000359  4F                 	db	79	;'O'
   221  00035A  20                 	db	32
   222  00035B  42                 	db	66	;'B'
   223  00035C  4F                 	db	79	;'O'
   224  00035D  4D                 	db	77	;'M'
   225  00035E  42                 	db	66	;'B'
   226  00035F  00                 	db	0
   227  000360                     STR_5:
   228  000360  42                 	db	66	;'B'
   229  000361  4F                 	db	79	;'O'
   230  000362  4D                 	db	77	;'M'
   231  000363  42                 	db	66	;'B'
   232  000364  20                 	db	32
   233  000365  4E                 	db	78	;'N'
   234  000366  4F                 	db	79	;'O'
   235  000367  54                 	db	84	;'T'
   236  000368  20                 	db	32
   237  000369  46                 	db	70	;'F'
   238  00036A  4F                 	db	79	;'O'
   239  00036B  55                 	db	85	;'U'
   240  00036C  4E                 	db	78	;'N'
   241  00036D  44                 	db	68	;'D'
   242  00036E  00                 	db	0
   243  00036F                     STR_8:
   244  00036F  52                 	db	82	;'R'
   245  000370  45                 	db	69	;'E'
   246  000371  54                 	db	84	;'T'
   247  000372  55                 	db	85	;'U'
   248  000373  52                 	db	82	;'R'
   249  000374  4E                 	db	78	;'N'
   250  000375  49                 	db	73	;'I'
   251  000376  4E                 	db	78	;'N'
   252  000377  47                 	db	71	;'G'
   253  000378  20                 	db	32
   254  000379  48                 	db	72	;'H'
   255  00037A  4F                 	db	79	;'O'
   256  00037B  4D                 	db	77	;'M'
   257  00037C  45                 	db	69	;'E'
   258  00037D  00                 	db	0
   259  00037E                     STR_1:
   260  00037E  43                 	db	67	;'C'
   261  00037F  72                 	db	114	;'r'
   262  000380  69                 	db	105	;'i'
   263  000381  74                 	db	116	;'t'
   264  000382  69                 	db	105	;'i'
   265  000383  63                 	db	99	;'c'
   266  000384  61                 	db	97	;'a'
   267  000385  6C                 	db	108	;'l'
   268  000386  20                 	db	32
   269  000387  45                 	db	69	;'E'
   270  000388  72                 	db	114	;'r'
   271  000389  72                 	db	114	;'r'
   272  00038A  6F                 	db	111	;'o'
   273  00038B  72                 	db	114	;'r'
   274  00038C  00                 	db	0
   275  00038D                     STR_12:
   276  00038D  50                 	db	80	;'P'
   277  00038E  52                 	db	82	;'R'
   278  00038F  45                 	db	69	;'E'
   279  000390  53                 	db	83	;'S'
   280  000391  53                 	db	83	;'S'
   281  000392  20                 	db	32
   282  000393  42                 	db	66	;'B'
   283  000394  55                 	db	85	;'U'
   284  000395  54                 	db	84	;'T'
   285  000396  54                 	db	84	;'T'
   286  000397  4F                 	db	79	;'O'
   287  000398  4E                 	db	78	;'N'
   288  000399  00                 	db	0
   289  00039A                     STR_4:
   290  00039A  53                 	db	83	;'S'
   291  00039B  45                 	db	69	;'E'
   292  00039C  41                 	db	65	;'A'
   293  00039D  52                 	db	82	;'R'
   294  00039E  43                 	db	67	;'C'
   295  00039F  48                 	db	72	;'H'
   296  0003A0  49                 	db	73	;'I'
   297  0003A1  4E                 	db	78	;'N'
   298  0003A2  47                 	db	71	;'G'
   299  0003A3  00                 	db	0
   300  0003A4                     STR_10:
   301  0003A4  25                 	db	37
   302  0003A5  75                 	db	117	;'u'
   303  0003A6  00                 	db	0
   304  0000                     
   305                           ; #config settings
   306  0003A7  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  0010A2                     __pcinit:
   310                           	opt callstack 0
   311  0010A2                     start_initialization:
   312                           	opt callstack 0
   313  0010A2                     __initialization:
   314                           	opt callstack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (50 bytes)
   317  0010A2  EE00  F060         	lfsr	0,__pbssBANK0
   318  0010A6  0E32               	movlw	50
   319  0010A8                     clear_0:
   320  0010A8  6AEE               	clrf	postinc0,c
   321  0010AA  06E8               	decf	wreg,f,c
   322  0010AC  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to COMRAM (13 bytes)
   325  0010AE  EE00  F03C         	lfsr	0,__pbssCOMRAM
   326  0010B2  0E0D               	movlw	13
   327  0010B4                     clear_1:
   328  0010B4  6AEE               	clrf	postinc0,c
   329  0010B6  06E8               	decf	wreg,f,c
   330  0010B8  E1FD               	bnz	clear_1
   331  0010BA                     end_of_initialization:
   332                           	opt callstack 0
   333  0010BA                     __end_of__initialization:
   334                           	opt callstack 0
   335  0010BA  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  0010BC  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  0010BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   338  0010C0  6EF8               	movwf	tblptru,c
   339  0010C2  0100               	movlb	0
   340  0010C4  EF96  F003         	goto	_main	;jump to C main() function
   341                           
   342                           	psect	bssCOMRAM
   343  00003C                     __pbssCOMRAM:
   344                           	opt callstack 0
   345  00003C                     	ds	2
   346  00003E                     debug@smoothed_data:
   347                           	opt callstack 0
   348  00003E                     	ds	2
   349  000040                     classify_data@smoothed:
   350                           	opt callstack 0
   351  000040                     	ds	2
   352  000042                     processRFID@position_in_buf:
   353                           	opt callstack 0
   354  000042                     	ds	1
   355  000043                     _robot_mode:
   356                           	opt callstack 0
   357  000043                     	ds	1
   358  000044                     _movement_time:
   359                           	opt callstack 0
   360  000044                     	ds	4
   361  000048                     _RFID_flag:
   362                           	opt callstack 0
   363  000048                     	ds	1
   364                           
   365                           	psect	bssBANK0
   366  000060                     __pbssBANK0:
   367                           	opt callstack 0
   368  000060                     	ds	2
   369  000062                     	ds	2
   370  000064                     	ds	2
   371  000066                     	ds	32
   372  000086                     _RFIDbuf:
   373                           	opt callstack 0
   374  000086                     	ds	12
   375                           
   376                           	psect	cstackBANK0
   377  000092                     __pcstackBANK0:
   378                           	opt callstack 0
   379  000092                     main@searching_speed:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x0
   383  000092                     	ds	2
   384  000094                     main@moving_speed:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x2
   388  000094                     	ds	2
   389  000096                     main@motorL:
   390                           	opt callstack 0
   391                           
   392                           ; 9 bytes @ 0x4
   393  000096                     	ds	9
   394  00009F                     main@motorR:
   395                           	opt callstack 0
   396                           
   397                           ; 9 bytes @ 0xD
   398  00009F                     	ds	9
   399                           
   400                           	psect	cstackCOMRAM
   401  000001                     __pcstackCOMRAM:
   402                           	opt callstack 0
   403  000001                     processRFID@RFIDbuf:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x0
   407  000001                     	ds	2
   408  000003                     processRFID@latestChar:
   409                           	opt callstack 0
   410                           
   411                           ; 1 bytes @ 0x2
   412  000003                     	ds	1
   413  000004                     processRFID@i:
   414                           	opt callstack 0
   415                           
   416                           ; 1 bytes @ 0x3
   417  000004                     	ds	1
   418  000005                     ??_InterruptHandlerHigh:
   419                           
   420                           ; 1 bytes @ 0x4
   421  000005                     	ds	3
   422  000008                     ??_InterruptHandlerLow:
   423                           
   424                           ; 1 bytes @ 0x7
   425  000008                     	ds	3
   426  00000B                     ??_LCDout:
   427  00000B                     ?___wmul:
   428                           	opt callstack 0
   429  00000B                     initPWM@PWMperiod:
   430                           	opt callstack 0
   431  00000B                     classify_data@raw_data:
   432                           	opt callstack 0
   433  00000B                     ___wmul@multiplier:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0xA
   437  00000B                     	ds	1
   438  00000C                     LCDout@number:
   439                           	opt callstack 0
   440                           
   441                           ; 1 bytes @ 0xB
   442  00000C                     	ds	1
   443  00000D                     ??_classify_data:
   444  00000D                     SendLCD@type:
   445                           	opt callstack 0
   446  00000D                     ___wmul@multiplicand:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0xC
   450  00000D                     	ds	1
   451  00000E                     SendLCD@Byte:
   452                           	opt callstack 0
   453                           
   454                           ; 1 bytes @ 0xD
   455  00000E                     	ds	1
   456  00000F                     ??_init_LCD:
   457  00000F                     ??_ClearLCD:
   458  00000F                     SetLine@line:
   459                           	opt callstack 0
   460  00000F                     LCD_String@string:
   461                           	opt callstack 0
   462  00000F                     classify_data@filtered:
   463                           	opt callstack 0
   464  00000F                     ___wmul@product:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0xE
   468  00000F                     	ds	1
   469  000010                     display_RFID@dataBuf:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0xF
   473  000010                     	ds	1
   474  000011                     ??_waitForInput:
   475  000011                     ?___awdiv:
   476                           	opt callstack 0
   477  000011                     check_RFID@dataBuf:
   478                           	opt callstack 0
   479  000011                     ___awdiv@dividend:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x10
   483  000011                     	ds	1
   484  000012                     display_RFID@i:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x11
   488  000012                     	ds	1
   489  000013                     ??_check_RFID:
   490  000013                     ___awdiv@divisor:
   491                           	opt callstack 0
   492                           
   493                           ; 2 bytes @ 0x12
   494  000013                     	ds	1
   495  000014                     waitForInput@raw_data:
   496                           	opt callstack 0
   497                           
   498                           ; 2 bytes @ 0x13
   499  000014                     	ds	1
   500  000015                     ___awdiv@counter:
   501                           	opt callstack 0
   502  000015                     check_RFID@hexBuf:
   503                           	opt callstack 0
   504                           
   505                           ; 12 bytes @ 0x14
   506  000015                     	ds	1
   507  000016                     ___awdiv@sign:
   508                           	opt callstack 0
   509  000016                     waitForInput@i:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x15
   513  000016                     	ds	1
   514  000017                     ___awdiv@quotient:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x16
   518  000017                     	ds	1
   519  000018                     waitForInput@i_1366:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x17
   523  000018                     	ds	1
   524  000019                     setMotorPWM@m:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x18
   528  000019                     	ds	2
   529  00001B                     ??_setMotorPWM:
   530                           
   531                           ; 1 bytes @ 0x1A
   532  00001B                     	ds	5
   533  000020                     setMotorPWM@PWMduty:
   534                           	opt callstack 0
   535                           
   536                           ; 2 bytes @ 0x1F
   537  000020                     	ds	1
   538  000021                     check_RFID@byte1:
   539                           	opt callstack 0
   540                           
   541                           ; 1 bytes @ 0x20
   542  000021                     	ds	1
   543  000022                     check_RFID@byte2:
   544                           	opt callstack 0
   545  000022                     stop@mL:
   546                           	opt callstack 0
   547  000022                     turn@mL:
   548                           	opt callstack 0
   549  000022                     moveForward@mL:
   550                           	opt callstack 0
   551  000022                     moveBackward@mL:
   552                           	opt callstack 0
   553  000022                     init_motor_struct@mL:
   554                           	opt callstack 0
   555                           
   556                           ; 2 bytes @ 0x21
   557  000022                     	ds	1
   558  000023                     check_RFID@byte3:
   559                           	opt callstack 0
   560                           
   561                           ; 1 bytes @ 0x22
   562  000023                     	ds	1
   563  000024                     check_RFID@byte4:
   564                           	opt callstack 0
   565  000024                     stop@mR:
   566                           	opt callstack 0
   567  000024                     turn@mR:
   568                           	opt callstack 0
   569  000024                     moveForward@mR:
   570                           	opt callstack 0
   571  000024                     moveBackward@mR:
   572                           	opt callstack 0
   573  000024                     init_motor_struct@mR:
   574                           	opt callstack 0
   575                           
   576                           ; 2 bytes @ 0x23
   577  000024                     	ds	1
   578  000025                     check_RFID@byte5:
   579                           	opt callstack 0
   580                           
   581                           ; 1 bytes @ 0x24
   582  000025                     	ds	1
   583  000026                     check_RFID@checksum:
   584                           	opt callstack 0
   585  000026                     stop@initial_speed:
   586                           	opt callstack 0
   587  000026                     turn@max_power:
   588                           	opt callstack 0
   589  000026                     moveForward@max_power:
   590                           	opt callstack 0
   591  000026                     moveBackward@max_power:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x25
   595  000026                     	ds	1
   596  000027                     check_RFID@i:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x26
   600  000027                     	ds	1
   601  000028                     ??_stop:
   602  000028                     ??_turn:
   603  000028                     ??_moveForward:
   604  000028                     ??_moveBackward:
   605                           
   606                           ; 1 bytes @ 0x27
   607  000028                     	ds	1
   608  000029                     stop@i:
   609                           	opt callstack 0
   610  000029                     turn@i:
   611                           	opt callstack 0
   612  000029                     moveForward@i:
   613                           	opt callstack 0
   614  000029                     moveBackward@i:
   615                           	opt callstack 0
   616                           
   617                           ; 2 bytes @ 0x28
   618  000029                     	ds	2
   619  00002B                     scanForBeacon@mL:
   620                           	opt callstack 0
   621  00002B                     moveToBeacon@mL:
   622                           	opt callstack 0
   623  00002B                     returnHome@mL:
   624                           	opt callstack 0
   625  00002B                     stopAndDisplay@mL:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x2A
   629  00002B                     	ds	2
   630  00002D                     scanForBeacon@mR:
   631                           	opt callstack 0
   632  00002D                     moveToBeacon@mR:
   633                           	opt callstack 0
   634  00002D                     returnHome@mR:
   635                           	opt callstack 0
   636  00002D                     stopAndDisplay@mR:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x2C
   640  00002D                     	ds	2
   641  00002F                     scanForBeacon@speed:
   642                           	opt callstack 0
   643  00002F                     moveToBeacon@speed:
   644                           	opt callstack 0
   645  00002F                     returnHome@speed:
   646                           	opt callstack 0
   647  00002F                     stopAndDisplay@speed:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x2E
   651  00002F                     	ds	2
   652  000031                     scanForBeacon@time:
   653                           	opt callstack 0
   654  000031                     moveToBeacon@time:
   655                           	opt callstack 0
   656  000031                     returnHome@time:
   657                           	opt callstack 0
   658  000031                     stopAndDisplay@RFID_buffer:
   659                           	opt callstack 0
   660                           
   661                           ; 2 bytes @ 0x30
   662  000031                     	ds	2
   663  000033                     ??_scanForBeacon:
   664  000033                     ??_stopAndDisplay:
   665  000033                     moveToBeacon@exit_flag:
   666                           	opt callstack 0
   667                           
   668                           ; 2 bytes @ 0x32
   669  000033                     	ds	2
   670  000035                     stopAndDisplay@i:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0x34
   674  000035                     	ds	2
   675  000037                     scanForBeacon@raw_data:
   676                           	opt callstack 0
   677                           
   678                           ; 2 bytes @ 0x36
   679  000037                     	ds	2
   680  000039                     scanForBeacon@beacon_location:
   681                           	opt callstack 0
   682                           
   683                           ; 1 bytes @ 0x38
   684  000039                     	ds	1
   685  00003A                     scanForBeacon@i:
   686                           	opt callstack 0
   687                           
   688                           ; 2 bytes @ 0x39
   689  00003A                     	ds	2
   690  00003C                     
   691                           ; 1 bytes @ 0x3B
   692 ;;
   693 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   694 ;;
   695 ;; *************** function _main *****************
   696 ;; Defined at:
   697 ;;		line 115 in file "main.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  motorR          9   13[BANK0 ] struct DC_motor
   702 ;;  motorL          9    4[BANK0 ] struct DC_motor
   703 ;;  moving_speed    2    2[BANK0 ] int 
   704 ;;  searching_sp    2    0[BANK0 ] int 
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   714 ;;      Params:         0       0       0       0
   715 ;;      Locals:         0      22       0       0
   716 ;;      Temps:          0       0       0       0
   717 ;;      Totals:         0      22       0       0
   718 ;;Total ram usage:       22 bytes
   719 ;; Hardware stack levels required when called:    9
   720 ;; This function calls:
   721 ;;		_LCD_String
   722 ;;		_init_motor_struct
   723 ;;		_moveToBeacon
   724 ;;		_returnHome
   725 ;;		_scanForBeacon
   726 ;;		_setup
   727 ;;		_stopAndDisplay
   728 ;;		_waitForInput
   729 ;; This function is called by:
   730 ;;		Startup code after reset
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           	psect	text0
   735  00072C                     __ptext0:
   736                           	opt callstack 0
   737  00072C                     _main:
   738                           	opt callstack 22
   739                           
   740                           ;main.c: 118:   setup();
   741                           
   742                           ;incstack = 0
   743  00072C  ECED  F007         	call	_setup	;wreg free
   744                           
   745                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   746  000730  0E96               	movlw	low main@motorL
   747  000732  6E22               	movwf	init_motor_struct@mL,c
   748  000734  0E00               	movlw	high main@motorL
   749  000736  6E23               	movwf	init_motor_struct@mL+1,c
   750  000738  0E9F               	movlw	low main@motorR
   751  00073A  6E24               	movwf	init_motor_struct@mR,c
   752  00073C  0E00               	movlw	high main@motorR
   753  00073E  6E25               	movwf	init_motor_struct@mR+1,c
   754  000740  EC13  F004         	call	_init_motor_struct	;wreg free
   755                           
   756                           ;main.c: 125:   int searching_speed = 65;
   757  000744  0E00               	movlw	0
   758  000746  0100               	movlb	0	; () banked
   759  000748  6F93               	movwf	(main@searching_speed+1)& (0+255),b
   760  00074A  0E41               	movlw	65
   761  00074C  6F92               	movwf	main@searching_speed& (0+255),b
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 126:   int moving_speed = 95;
   765  00074E  0E00               	movlw	0
   766  000750  6F95               	movwf	(main@moving_speed+1)& (0+255),b
   767  000752  0E5F               	movlw	95
   768  000754  6F94               	movwf	main@moving_speed& (0+255),b
   769                           
   770                           ; BSR set to: 0
   771                           ;main.c: 128:   waitForInput();
   772  000756  ECEC  F004         	call	_waitForInput	;wreg free
   773  00075A                     l2717:
   774                           
   775                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   776  00075A  5043               	movf	_robot_mode,w,c	;volatile
   777  00075C  A4D8               	btfss	status,2,c
   778  00075E  D013               	goto	l2721
   779                           
   780                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed,
   781  000760  0E96               	movlw	low main@motorL
   782  000762  6E2B               	movwf	scanForBeacon@mL,c
   783  000764  0E00               	movlw	high main@motorL
   784  000766  6E2C               	movwf	scanForBeacon@mL+1,c
   785  000768  0E9F               	movlw	low main@motorR
   786  00076A  6E2D               	movwf	scanForBeacon@mR,c
   787  00076C  0E00               	movlw	high main@motorR
   788  00076E  6E2E               	movwf	scanForBeacon@mR+1,c
   789  000770  C092  F02F         	movff	main@searching_speed,scanForBeacon@speed
   790  000774  C093  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   791  000778  0E44               	movlw	low _movement_time
   792  00077A  6E31               	movwf	scanForBeacon@time,c
   793  00077C  0E00               	movlw	high _movement_time
   794  00077E  6E32               	movwf	scanForBeacon@time+1,c
   795  000780  EC0E  F003         	call	_scanForBeacon	;wreg free
   796  000784  D047               	goto	L3
   797  000786                     l2721:
   798  000786  0443               	decf	_robot_mode,w,c	;volatile
   799  000788  A4D8               	btfss	status,2,c
   800  00078A  D017               	goto	l2725
   801                           
   802                           ;main.c: 143:       {;main.c: 144:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   803  00078C  0E96               	movlw	low main@motorL
   804  00078E  6E2B               	movwf	moveToBeacon@mL,c
   805  000790  0E00               	movlw	high main@motorL
   806  000792  6E2C               	movwf	moveToBeacon@mL+1,c
   807  000794  0E9F               	movlw	low main@motorR
   808  000796  6E2D               	movwf	moveToBeacon@mR,c
   809  000798  0E00               	movlw	high main@motorR
   810  00079A  6E2E               	movwf	moveToBeacon@mR+1,c
   811  00079C  C094  F02F         	movff	main@moving_speed,moveToBeacon@speed
   812  0007A0  C095  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   813  0007A4  0E44               	movlw	low _movement_time
   814  0007A6  6E31               	movwf	moveToBeacon@time,c
   815  0007A8  0E00               	movlw	high _movement_time
   816  0007AA  6E32               	movwf	moveToBeacon@time+1,c
   817  0007AC  0E48               	movlw	low _RFID_flag
   818  0007AE  6E33               	movwf	moveToBeacon@exit_flag,c
   819  0007B0  0E00               	movlw	high _RFID_flag
   820  0007B2  6E34               	movwf	moveToBeacon@exit_flag+1,c
   821  0007B4  ECD6  F006         	call	_moveToBeacon	;wreg free
   822  0007B8  D02D               	goto	L3
   823  0007BA                     l2725:
   824  0007BA  0E02               	movlw	2
   825  0007BC  1843               	xorwf	_robot_mode,w,c	;volatile
   826  0007BE  A4D8               	btfss	status,2,c
   827  0007C0  D013               	goto	l2729
   828                           
   829                           ;main.c: 150:       {;main.c: 151:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   830  0007C2  0E96               	movlw	low main@motorL
   831  0007C4  6E2B               	movwf	returnHome@mL,c
   832  0007C6  0E00               	movlw	high main@motorL
   833  0007C8  6E2C               	movwf	returnHome@mL+1,c
   834  0007CA  0E9F               	movlw	low main@motorR
   835  0007CC  6E2D               	movwf	returnHome@mR,c
   836  0007CE  0E00               	movlw	high main@motorR
   837  0007D0  6E2E               	movwf	returnHome@mR+1,c
   838  0007D2  C094  F02F         	movff	main@moving_speed,returnHome@speed
   839  0007D6  C095  F030         	movff	main@moving_speed+1,returnHome@speed+1
   840  0007DA  0E44               	movlw	low _movement_time
   841  0007DC  6E31               	movwf	returnHome@time,c
   842  0007DE  0E00               	movlw	high _movement_time
   843  0007E0  6E32               	movwf	returnHome@time+1,c
   844  0007E2  ECAB  F007         	call	_returnHome	;wreg free
   845  0007E6  D016               	goto	L3
   846  0007E8                     l2729:
   847  0007E8  0E03               	movlw	3
   848  0007EA  1843               	xorwf	_robot_mode,w,c	;volatile
   849  0007EC  A4D8               	btfss	status,2,c
   850  0007EE  D014               	goto	l2733
   851                           
   852                           ;main.c: 157:       {;main.c: 158:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   853  0007F0  0E96               	movlw	low main@motorL
   854  0007F2  6E2B               	movwf	stopAndDisplay@mL,c
   855  0007F4  0E00               	movlw	high main@motorL
   856  0007F6  6E2C               	movwf	stopAndDisplay@mL+1,c
   857  0007F8  0E9F               	movlw	low main@motorR
   858  0007FA  6E2D               	movwf	stopAndDisplay@mR,c
   859  0007FC  0E00               	movlw	high main@motorR
   860  0007FE  6E2E               	movwf	stopAndDisplay@mR+1,c
   861  000800  C094  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   862  000804  C095  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   863  000808  0E86               	movlw	low _RFIDbuf
   864  00080A  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   865  00080C  0E00               	movlw	high _RFIDbuf
   866  00080E  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   867  000810  EC49  F005         	call	_stopAndDisplay	;wreg free
   868  000814                     L3:
   869  000814  6E43               	movwf	_robot_mode,c	;volatile
   870                           
   871                           ;main.c: 159:       }
   872  000816  D7A1               	goto	l2717
   873  000818                     l2733:
   874                           
   875                           ;main.c: 163:       {;main.c: 164:           LCD_String("Critical Error");
   876  000818  0E7E               	movlw	low STR_1
   877  00081A  6E0F               	movwf	LCD_String@string,c
   878  00081C  0E03               	movlw	high STR_1
   879  00081E  6E10               	movwf	LCD_String@string+1,c
   880  000820  EC06  F007         	call	_LCD_String	;wreg free
   881  000824  D79A               	goto	l2717
   882  000826                     __end_of_main:
   883                           	opt callstack 0
   884                           
   885 ;; *************** function _waitForInput *****************
   886 ;; Defined at:
   887 ;;		line 160 in file "subroutines.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  raw_data        2   19[COMRAM] unsigned int 
   892 ;;  throwaway       1    0        unsigned char 
   893 ;;  i               2   23[COMRAM] int 
   894 ;;  i               2   21[COMRAM] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   904 ;;      Params:         0       0       0       0
   905 ;;      Locals:         7       0       0       0
   906 ;;      Temps:          2       0       0       0
   907 ;;      Totals:         9       0       0       0
   908 ;;Total ram usage:        9 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    7
   911 ;; This function calls:
   912 ;;		_ClearLCD
   913 ;;		_LCD_String
   914 ;;		_SetLine
   915 ;;		_classify_data
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text1
   922  0009D8                     __ptext1:
   923                           	opt callstack 0
   924  0009D8                     _waitForInput:
   925                           	opt callstack 23
   926                           
   927                           ;subroutines.c: 163:     for(int i =0;i<500;i++)
   928                           
   929                           ;incstack = 0
   930  0009D8  0E00               	movlw	0
   931  0009DA  6E17               	movwf	waitForInput@i+1,c
   932  0009DC  0E00               	movlw	0
   933  0009DE  6E16               	movwf	waitForInput@i,c
   934  0009E0                     l2569:
   935                           
   936                           ;subroutines.c: 164:     {;subroutines.c: 165:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   937  0009E0  5068               	movf	3944,w,c	;volatile
   938  0009E2  CF69 F011          	movff	3945,??_waitForInput	;volatile
   939  0009E6  6A12               	clrf	(??_waitForInput+1)& (0+255),c
   940  0009E8  C011  F012         	movff	??_waitForInput,??_waitForInput+1
   941  0009EC  6A11               	clrf	??_waitForInput,c
   942  0009EE  1011               	iorwf	??_waitForInput,w,c
   943  0009F0  6E14               	movwf	waitForInput@raw_data,c
   944  0009F2  5012               	movf	??_waitForInput+1,w,c
   945  0009F4  6E15               	movwf	waitForInput@raw_data+1,c
   946  0009F6  C014  F00B         	movff	waitForInput@raw_data,classify_data@raw_data
   947  0009FA  C015  F00C         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   948  0009FE  EC89  F007         	call	_classify_data	;wreg free
   949                           
   950                           ;subroutines.c: 167:     }
   951  000A02  4A16               	infsnz	waitForInput@i,f,c
   952  000A04  2A17               	incf	waitForInput@i+1,f,c
   953  000A06  BE17               	btfsc	waitForInput@i+1,7,c
   954  000A08  D7EB               	goto	l2569
   955  000A0A  0EF4               	movlw	244
   956  000A0C  5C16               	subwf	waitForInput@i,w,c
   957  000A0E  0E01               	movlw	1
   958  000A10  5817               	subwfb	waitForInput@i+1,w,c
   959  000A12  A0D8               	btfss	status,0,c
   960  000A14  D7E5               	goto	l2569
   961                           
   962                           ;subroutines.c: 170:     ClearLCD();
   963  000A16  EC91  F008         	call	_ClearLCD	;wreg free
   964                           
   965                           ;subroutines.c: 171:     SetLine(1);
   966  000A1A  0E01               	movlw	1
   967  000A1C  EC3A  F008         	call	_SetLine
   968                           
   969                           ;subroutines.c: 172:     LCD_String("PRESS BUTTON");
   970  000A20  0E8D               	movlw	low STR_12
   971  000A22  6E0F               	movwf	LCD_String@string,c
   972  000A24  0E03               	movlw	high STR_12
   973  000A26  6E10               	movwf	LCD_String@string+1,c
   974  000A28  EC06  F007         	call	_LCD_String	;wreg free
   975                           
   976                           ;subroutines.c: 173:     SetLine(2);
   977  000A2C  0E02               	movlw	2
   978  000A2E  EC3A  F008         	call	_SetLine
   979                           
   980                           ;subroutines.c: 174:     LCD_String("TO START SEARCH");
   981  000A32  0E11               	movlw	low STR_13
   982  000A34  6E0F               	movwf	LCD_String@string,c
   983  000A36  0E03               	movlw	high STR_13
   984  000A38  6E10               	movwf	LCD_String@string+1,c
   985  000A3A  EC06  F007         	call	_LCD_String	;wreg free
   986  000A3E                     l349:
   987  000A3E  A483               	btfss	3971,2,c	;volatile
   988  000A40  D7FE               	goto	l349
   989                           
   990                           ;subroutines.c: 180:     ClearLCD();
   991  000A42  EC91  F008         	call	_ClearLCD	;wreg free
   992                           
   993                           ;subroutines.c: 181:     SetLine(1);
   994  000A46  0E01               	movlw	1
   995  000A48  EC3A  F008         	call	_SetLine
   996                           
   997                           ;subroutines.c: 182:     LCD_String("STARTING SEARCH");
   998  000A4C  0E01               	movlw	low STR_14
   999  000A4E  6E0F               	movwf	LCD_String@string,c
  1000  000A50  0E03               	movlw	high STR_14
  1001  000A52  6E10               	movwf	LCD_String@string+1,c
  1002  000A54  EC06  F007         	call	_LCD_String	;wreg free
  1003                           
  1004                           ;subroutines.c: 183:     for(int i=0; i<10;i++)
  1005  000A58  0E00               	movlw	0
  1006  000A5A  6E19               	movwf	waitForInput@i_1366+1,c
  1007  000A5C  0E00               	movlw	0
  1008  000A5E  6E18               	movwf	waitForInput@i_1366,c
  1009  000A60                     l2593:
  1010                           
  1011                           ;subroutines.c: 184:     {;subroutines.c: 185:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
  1012  000A60  0E02               	movlw	2
  1013  000A62  6E12               	movwf	(??_waitForInput+1)& (0+255),c
  1014  000A64  0E04               	movlw	4
  1015  000A66  6E11               	movwf	??_waitForInput& (0+255),c
  1016  000A68  0EBA               	movlw	186
  1017  000A6A                     u1937:
  1018  000A6A  2EE8               	decfsz	wreg,f,c
  1019  000A6C  D7FE               	bra	u1937
  1020  000A6E  2E11               	decfsz	??_waitForInput& (0+255),f,c
  1021  000A70  D7FC               	bra	u1937
  1022  000A72  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
  1023  000A74  D7FA               	bra	u1937
  1024  000A76  D000               	nop2	
  1025                           
  1026                           ;subroutines.c: 186:     }
  1027  000A78  4A18               	infsnz	waitForInput@i_1366,f,c
  1028  000A7A  2A19               	incf	waitForInput@i_1366+1,f,c
  1029  000A7C  BE19               	btfsc	waitForInput@i_1366+1,7,c
  1030  000A7E  D7F0               	goto	l2593
  1031  000A80  5019               	movf	waitForInput@i_1366+1,w,c
  1032  000A82  E104               	bnz	u1790
  1033  000A84  0E0A               	movlw	10
  1034  000A86  5C18               	subwf	waitForInput@i_1366,w,c
  1035  000A88  A0D8               	btfss	status,0,c
  1036  000A8A  D7EA               	goto	l2593
  1037  000A8C                     u1790:
  1038                           
  1039                           ;subroutines.c: 187:     ClearLCD();
  1040  000A8C  EC91  F008         	call	_ClearLCD	;wreg free
  1041  000A90  0012               	return		;funcret
  1042  000A92                     __end_of_waitForInput:
  1043                           	opt callstack 0
  1044                           
  1045 ;; *************** function _stopAndDisplay *****************
  1046 ;; Defined at:
  1047 ;;		line 98 in file "subroutines.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1050 ;;		 -> main@motorL(9), 
  1051 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1052 ;;		 -> main@motorR(9), 
  1053 ;;  speed           2   46[COMRAM] int 
  1054 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
  1055 ;;		 -> RFIDbuf(12), 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  i               2   52[COMRAM] int 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      unsigned char 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1067 ;;      Params:         8       0       0       0
  1068 ;;      Locals:         2       0       0       0
  1069 ;;      Temps:          2       0       0       0
  1070 ;;      Totals:        12       0       0       0
  1071 ;;Total ram usage:       12 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    8
  1074 ;; This function calls:
  1075 ;;		_ClearLCD
  1076 ;;		_LCD_String
  1077 ;;		_check_RFID
  1078 ;;		_display_RFID
  1079 ;;		_stop
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text2
  1086  000A92                     __ptext2:
  1087                           	opt callstack 0
  1088  000A92                     _stopAndDisplay:
  1089                           	opt callstack 22
  1090                           
  1091                           ;subroutines.c: 98: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *mR
      +                          , int speed,;subroutines.c: 99:                                 volatile char RFID_buffe
      +                          r[]);subroutines.c: 100: {;subroutines.c: 101:     stop(mL, mR,speed);
  1092                           
  1093                           ;incstack = 0
  1094  000A92  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1095  000A96  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1096  000A9A  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1097  000A9E  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1098  000AA2  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1099  000AA6  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1100  000AAA  EC35  F007         	call	_stop	;wreg free
  1101                           
  1102                           ;subroutines.c: 103:     display_RFID(RFID_buffer);
  1103  000AAE  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1104  000AB2  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1105  000AB6  ECCD  F007         	call	_display_RFID	;wreg free
  1106                           
  1107                           ;subroutines.c: 104:     check_RFID(RFID_buffer);
  1108  000ABA  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1109  000ABE  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1110  000AC2  ECD4  F001         	call	_check_RFID	;wreg free
  1111                           
  1112                           ;subroutines.c: 106:     if(RFID_buffer[0] != 0)
  1113  000AC6  C031  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1114  000ACA  C032  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1115  000ACE  50DF               	movf	indf2,w,c
  1116  000AD0  A4D8               	btfss	status,2,c
  1117  000AD2  D026               	goto	l2701
  1118  000AD4  D028               	goto	l2703
  1119  000AD6                     l2685:
  1120                           
  1121                           ;subroutines.c: 111:             {;subroutines.c: 112:                 ClearLCD();
  1122  000AD6  EC91  F008         	call	_ClearLCD	;wreg free
  1123                           
  1124                           ;subroutines.c: 113:                 LCD_String("RESETTING ROBOT");
  1125  000ADA  0E21               	movlw	low STR_6
  1126  000ADC  6E0F               	movwf	LCD_String@string,c
  1127  000ADE  0E03               	movlw	high STR_6
  1128  000AE0  6E10               	movwf	LCD_String@string+1,c
  1129  000AE2  EC06  F007         	call	_LCD_String	;wreg free
  1130                           
  1131                           ;subroutines.c: 114:                 for(int i=0; i<10;i++)
  1132  000AE6  0E00               	movlw	0
  1133  000AE8  6E36               	movwf	stopAndDisplay@i+1,c
  1134  000AEA  0E00               	movlw	0
  1135  000AEC  6E35               	movwf	stopAndDisplay@i,c
  1136  000AEE                     l2695:
  1137                           
  1138                           ;subroutines.c: 115:                 {;subroutines.c: 116:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1139  000AEE  0E02               	movlw	2
  1140  000AF0  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1141  000AF2  0E04               	movlw	4
  1142  000AF4  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1143  000AF6  0EBA               	movlw	186
  1144  000AF8                     u1947:
  1145  000AF8  2EE8               	decfsz	wreg,f,c
  1146  000AFA  D7FE               	bra	u1947
  1147  000AFC  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1148  000AFE  D7FC               	bra	u1947
  1149  000B00  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1150  000B02  D7FA               	bra	u1947
  1151  000B04  D000               	nop2	
  1152                           
  1153                           ;subroutines.c: 117:                 }
  1154  000B06  4A35               	infsnz	stopAndDisplay@i,f,c
  1155  000B08  2A36               	incf	stopAndDisplay@i+1,f,c
  1156  000B0A  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1157  000B0C  D7F0               	goto	l2695
  1158  000B0E  5036               	movf	stopAndDisplay@i+1,w,c
  1159  000B10  E104               	bnz	u1870
  1160  000B12  0E0A               	movlw	10
  1161  000B14  5C35               	subwf	stopAndDisplay@i,w,c
  1162  000B16  A0D8               	btfss	status,0,c
  1163  000B18  D7EA               	goto	l2695
  1164  000B1A                     u1870:
  1165                           
  1166                           ;subroutines.c: 118:                 ClearLCD();
  1167  000B1A  EC91  F008         	call	_ClearLCD	;wreg free
  1168  000B1E  00FF               	reset		;# 
  1169  000B20                     l2701:
  1170                           
  1171                           ;subroutines.c: 110:             while(PORTDbits.RD2 == 1)
  1172  000B20  A483               	btfss	3971,2,c	;volatile
  1173  000B22  D7FE               	goto	l2701
  1174  000B24  D7D8               	goto	l2685
  1175  000B26                     l2703:
  1176                           
  1177                           ;subroutines.c: 124:     {;subroutines.c: 125:         return 0;
  1178  000B26  0E00               	movlw	0
  1179  000B28  0012               	return		;funcret
  1180  000B2A                     __end_of_stopAndDisplay:
  1181                           	opt callstack 0
  1182                           
  1183 ;; *************** function _display_RFID *****************
  1184 ;; Defined at:
  1185 ;;		line 107 in file "RFID.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1188 ;;		 -> RFIDbuf(12), 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  i               2   17[COMRAM] int 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1200 ;;      Params:         2       0       0       0
  1201 ;;      Locals:         2       0       0       0
  1202 ;;      Temps:          0       0       0       0
  1203 ;;      Totals:         4       0       0       0
  1204 ;;Total ram usage:        4 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    7
  1207 ;; This function calls:
  1208 ;;		_ClearLCD
  1209 ;;		_SendLCD
  1210 ;;		_SetLine
  1211 ;; This function is called by:
  1212 ;;		_stopAndDisplay
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text3
  1217  000F9A                     __ptext3:
  1218                           	opt callstack 0
  1219  000F9A                     _display_RFID:
  1220                           	opt callstack 22
  1221                           
  1222                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1223                           
  1224                           ;incstack = 0
  1225  000F9A  EC91  F008         	call	_ClearLCD	;wreg free
  1226                           
  1227                           ;RFID.c: 110:     SetLine(1);
  1228  000F9E  0E01               	movlw	1
  1229  000FA0  EC3A  F008         	call	_SetLine
  1230                           
  1231                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1232  000FA4  0E00               	movlw	0
  1233  000FA6  6E13               	movwf	display_RFID@i+1,c
  1234  000FA8  0E00               	movlw	0
  1235  000FAA  6E12               	movwf	display_RFID@i,c
  1236  000FAC                     l2507:
  1237                           
  1238                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1239  000FAC  0E01               	movlw	1
  1240  000FAE  6E0D               	movwf	SendLCD@type,c
  1241  000FB0  5012               	movf	display_RFID@i,w,c
  1242  000FB2  2410               	addwf	display_RFID@dataBuf,w,c
  1243  000FB4  6ED9               	movwf	fsr2l,c
  1244  000FB6  5013               	movf	display_RFID@i+1,w,c
  1245  000FB8  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1246  000FBA  6EDA               	movwf	fsr2h,c
  1247  000FBC  50DF               	movf	indf2,w,c
  1248  000FBE  EC22  F008         	call	_SendLCD
  1249                           
  1250                           ;RFID.c: 114:     }
  1251  000FC2  4A12               	infsnz	display_RFID@i,f,c
  1252  000FC4  2A13               	incf	display_RFID@i+1,f,c
  1253  000FC6  BE13               	btfsc	display_RFID@i+1,7,c
  1254  000FC8  D7F1               	goto	l2507
  1255  000FCA  5013               	movf	display_RFID@i+1,w,c
  1256  000FCC  E105               	bnz	u1740
  1257  000FCE  0E0A               	movlw	10
  1258  000FD0  5C12               	subwf	display_RFID@i,w,c
  1259  000FD2  B0D8               	btfsc	status,0,c
  1260  000FD4  0012               	return	
  1261  000FD6  D7EA               	goto	l2507
  1262  000FD8                     u1740:
  1263  000FD8  0012               	return		;funcret
  1264  000FDA                     __end_of_display_RFID:
  1265                           	opt callstack 0
  1266                           
  1267 ;; *************** function _check_RFID *****************
  1268 ;; Defined at:
  1269 ;;		line 70 in file "RFID.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1272 ;;		 -> RFIDbuf(12), 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;  i               2   38[COMRAM] int 
  1275 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1276 ;;  checksum        1   37[COMRAM] unsigned char 
  1277 ;;  byte5           1   36[COMRAM] unsigned char 
  1278 ;;  byte4           1   35[COMRAM] unsigned char 
  1279 ;;  byte3           1   34[COMRAM] unsigned char 
  1280 ;;  byte2           1   33[COMRAM] unsigned char 
  1281 ;;  byte1           1   32[COMRAM] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1291 ;;      Params:         2       0       0       0
  1292 ;;      Locals:        20       0       0       0
  1293 ;;      Temps:          2       0       0       0
  1294 ;;      Totals:        24       0       0       0
  1295 ;;Total ram usage:       24 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    7
  1298 ;; This function calls:
  1299 ;;		_LCD_String
  1300 ;;		_SetLine
  1301 ;; This function is called by:
  1302 ;;		_stopAndDisplay
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text4
  1307  0003A8                     __ptext4:
  1308                           	opt callstack 0
  1309  0003A8                     _check_RFID:
  1310                           	opt callstack 22
  1311                           
  1312                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1313                           
  1314                           ;incstack = 0
  1315  0003A8  0E00               	movlw	0
  1316  0003AA  6E28               	movwf	check_RFID@i+1,c
  1317  0003AC  0E00               	movlw	0
  1318  0003AE  6E27               	movwf	check_RFID@i,c
  1319  0003B0                     l2473:
  1320                           
  1321                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1322  0003B0  5027               	movf	check_RFID@i,w,c
  1323  0003B2  2411               	addwf	check_RFID@dataBuf,w,c
  1324  0003B4  6ED9               	movwf	fsr2l,c
  1325  0003B6  5028               	movf	check_RFID@i+1,w,c
  1326  0003B8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1327  0003BA  6EDA               	movwf	fsr2h,c
  1328  0003BC  0E2F               	movlw	47
  1329  0003BE  64DF               	cpfsgt	indf2,c
  1330  0003C0  D018               	goto	l2479
  1331  0003C2  5027               	movf	check_RFID@i,w,c
  1332  0003C4  2411               	addwf	check_RFID@dataBuf,w,c
  1333  0003C6  6ED9               	movwf	fsr2l,c
  1334  0003C8  5028               	movf	check_RFID@i+1,w,c
  1335  0003CA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1336  0003CC  6EDA               	movwf	fsr2h,c
  1337  0003CE  0E3A               	movlw	58
  1338  0003D0  60DF               	cpfslt	indf2,c
  1339  0003D2  D00F               	goto	l2479
  1340                           
  1341                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1342  0003D4  0E15               	movlw	low check_RFID@hexBuf
  1343  0003D6  2427               	addwf	check_RFID@i,w,c
  1344  0003D8  6ED9               	movwf	fsr2l,c
  1345  0003DA  0E00               	movlw	high check_RFID@hexBuf
  1346  0003DC  2028               	addwfc	check_RFID@i+1,w,c
  1347  0003DE  6EDA               	movwf	fsr2h,c
  1348  0003E0  5027               	movf	check_RFID@i,w,c
  1349  0003E2  2411               	addwf	check_RFID@dataBuf,w,c
  1350  0003E4  6EE1               	movwf	fsr1l,c
  1351  0003E6  5028               	movf	check_RFID@i+1,w,c
  1352  0003E8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1353  0003EA  6EE2               	movwf	fsr1h,c
  1354  0003EC  50E7               	movf	indf1,w,c
  1355  0003EE  0FD0               	addlw	208
  1356  0003F0  D020               	goto	L4
  1357  0003F2                     l2479:
  1358  0003F2  5027               	movf	check_RFID@i,w,c
  1359  0003F4  2411               	addwf	check_RFID@dataBuf,w,c
  1360  0003F6  6ED9               	movwf	fsr2l,c
  1361  0003F8  5028               	movf	check_RFID@i+1,w,c
  1362  0003FA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1363  0003FC  6EDA               	movwf	fsr2h,c
  1364  0003FE  0E40               	movlw	64
  1365  000400  64DF               	cpfsgt	indf2,c
  1366  000402  D018               	goto	l2485
  1367  000404  5027               	movf	check_RFID@i,w,c
  1368  000406  2411               	addwf	check_RFID@dataBuf,w,c
  1369  000408  6ED9               	movwf	fsr2l,c
  1370  00040A  5028               	movf	check_RFID@i+1,w,c
  1371  00040C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1372  00040E  6EDA               	movwf	fsr2h,c
  1373  000410  0E47               	movlw	71
  1374  000412  60DF               	cpfslt	indf2,c
  1375  000414  D00F               	goto	l2485
  1376                           
  1377                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1378  000416  0E15               	movlw	low check_RFID@hexBuf
  1379  000418  2427               	addwf	check_RFID@i,w,c
  1380  00041A  6ED9               	movwf	fsr2l,c
  1381  00041C  0E00               	movlw	high check_RFID@hexBuf
  1382  00041E  2028               	addwfc	check_RFID@i+1,w,c
  1383  000420  6EDA               	movwf	fsr2h,c
  1384  000422  5027               	movf	check_RFID@i,w,c
  1385  000424  2411               	addwf	check_RFID@dataBuf,w,c
  1386  000426  6EE1               	movwf	fsr1l,c
  1387  000428  5028               	movf	check_RFID@i+1,w,c
  1388  00042A  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1389  00042C  6EE2               	movwf	fsr1h,c
  1390  00042E  50E7               	movf	indf1,w,c
  1391  000430  0FC9               	addlw	201
  1392  000432                     L4:
  1393  000432  6EDF               	movwf	indf2,c
  1394  000434                     l2485:
  1395                           
  1396                           ;RFID.c: 84:     }
  1397  000434  4A27               	infsnz	check_RFID@i,f,c
  1398  000436  2A28               	incf	check_RFID@i+1,f,c
  1399  000438  BE28               	btfsc	check_RFID@i+1,7,c
  1400  00043A  D7BA               	goto	l2473
  1401  00043C  5028               	movf	check_RFID@i+1,w,c
  1402  00043E  E104               	bnz	u1580
  1403  000440  0E0C               	movlw	12
  1404  000442  5C27               	subwf	check_RFID@i,w,c
  1405  000444  A0D8               	btfss	status,0,c
  1406  000446  D7B4               	goto	l2473
  1407  000448                     u1580:
  1408                           
  1409                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1410  000448  5015               	movf	check_RFID@hexBuf,w,c
  1411  00044A  A4D8               	btfss	status,2,c
  1412  00044C  D002               	goto	u1590
  1413  00044E  0E01               	movlw	1
  1414  000450  D001               	goto	u1600
  1415  000452                     u1590:
  1416  000452  0E00               	movlw	0
  1417  000454                     u1600:
  1418  000454  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1419  000456  6E21               	movwf	check_RFID@byte1,c
  1420                           
  1421                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1422  000458  5017               	movf	check_RFID@hexBuf+2,w,c
  1423  00045A  A4D8               	btfss	status,2,c
  1424  00045C  D002               	goto	u1610
  1425  00045E  0E01               	movlw	1
  1426  000460  D001               	goto	u1620
  1427  000462                     u1610:
  1428  000462  0E00               	movlw	0
  1429  000464                     u1620:
  1430  000464  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1431  000466  6E22               	movwf	check_RFID@byte2,c
  1432                           
  1433                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1434  000468  5019               	movf	check_RFID@hexBuf+4,w,c
  1435  00046A  A4D8               	btfss	status,2,c
  1436  00046C  D002               	goto	u1630
  1437  00046E  0E01               	movlw	1
  1438  000470  D001               	goto	u1640
  1439  000472                     u1630:
  1440  000472  0E00               	movlw	0
  1441  000474                     u1640:
  1442  000474  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1443  000476  6E23               	movwf	check_RFID@byte3,c
  1444                           
  1445                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1446  000478  501B               	movf	check_RFID@hexBuf+6,w,c
  1447  00047A  A4D8               	btfss	status,2,c
  1448  00047C  D002               	goto	u1650
  1449  00047E  0E01               	movlw	1
  1450  000480  D001               	goto	u1660
  1451  000482                     u1650:
  1452  000482  0E00               	movlw	0
  1453  000484                     u1660:
  1454  000484  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1455  000486  6E24               	movwf	check_RFID@byte4,c
  1456                           
  1457                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1458  000488  501D               	movf	check_RFID@hexBuf+8,w,c
  1459  00048A  A4D8               	btfss	status,2,c
  1460  00048C  D002               	goto	u1670
  1461  00048E  0E01               	movlw	1
  1462  000490  D001               	goto	u1680
  1463  000492                     u1670:
  1464  000492  0E00               	movlw	0
  1465  000494                     u1680:
  1466  000494  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1467  000496  6E25               	movwf	check_RFID@byte5,c
  1468                           
  1469                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1470  000498  501F               	movf	check_RFID@hexBuf+10,w,c
  1471  00049A  A4D8               	btfss	status,2,c
  1472  00049C  D002               	goto	u1690
  1473  00049E  0E01               	movlw	1
  1474  0004A0  D001               	goto	u1700
  1475  0004A2                     u1690:
  1476  0004A2  0E00               	movlw	0
  1477  0004A4                     u1700:
  1478  0004A4  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1479  0004A6  6E26               	movwf	check_RFID@checksum,c
  1480                           
  1481                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1482  0004A8  5021               	movf	check_RFID@byte1,w,c
  1483  0004AA  1822               	xorwf	check_RFID@byte2,w,c
  1484  0004AC  1823               	xorwf	check_RFID@byte3,w,c
  1485  0004AE  1824               	xorwf	check_RFID@byte4,w,c
  1486  0004B0  6E13               	movwf	??_check_RFID& (0+255),c
  1487  0004B2  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1488  0004B4  5026               	movf	check_RFID@checksum,w,c
  1489  0004B6  1825               	xorwf	check_RFID@byte5,w,c
  1490  0004B8  A4D8               	btfss	status,2,c
  1491  0004BA  D002               	goto	u1710
  1492  0004BC  0E01               	movlw	1
  1493  0004BE  D001               	goto	u1720
  1494  0004C0                     u1710:
  1495  0004C0  0E00               	movlw	0
  1496  0004C2                     u1720:
  1497  0004C2  1A13               	xorwf	??_check_RFID,f,c
  1498  0004C4  0E00               	movlw	0
  1499  0004C6  1A14               	xorwf	??_check_RFID+1,f,c
  1500  0004C8  5013               	movf	??_check_RFID,w,c
  1501  0004CA  1014               	iorwf	??_check_RFID+1,w,c
  1502  0004CC  B4D8               	btfsc	status,2,c
  1503  0004CE  D00A               	goto	l2495
  1504                           
  1505                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1506  0004D0  0E02               	movlw	2
  1507  0004D2  EC3A  F008         	call	_SetLine
  1508                           
  1509                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1510  0004D6  0E41               	movlw	low STR_2
  1511  0004D8  6E0F               	movwf	LCD_String@string,c
  1512  0004DA  0E03               	movlw	high STR_2
  1513  0004DC  6E10               	movwf	LCD_String@string+1,c
  1514  0004DE  EC06  F007         	call	_LCD_String	;wreg free
  1515                           
  1516                           ;RFID.c: 99:     }
  1517  0004E2  0012               	return	
  1518  0004E4                     l2495:
  1519                           
  1520                           ;RFID.c: 102:         SetLine(2);
  1521  0004E4  0E02               	movlw	2
  1522  0004E6  EC3A  F008         	call	_SetLine
  1523                           
  1524                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1525  0004EA  0E31               	movlw	low STR_3
  1526  0004EC  6E0F               	movwf	LCD_String@string,c
  1527  0004EE  0E03               	movlw	high STR_3
  1528  0004F0  6E10               	movwf	LCD_String@string+1,c
  1529  0004F2  EC06  F007         	call	_LCD_String	;wreg free
  1530  0004F6  0012               	return		;funcret
  1531  0004F8                     __end_of_check_RFID:
  1532                           	opt callstack 0
  1533                           
  1534 ;; *************** function _setup *****************
  1535 ;; Defined at:
  1536 ;;		line 45 in file "main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, status,2, status,0, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1550 ;;      Params:         0       0       0       0
  1551 ;;      Locals:         0       0       0       0
  1552 ;;      Temps:          0       0       0       0
  1553 ;;      Totals:         0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    7
  1557 ;; This function calls:
  1558 ;;		_initPWM
  1559 ;;		_init_LCD
  1560 ;;		_init_RFID
  1561 ;;		_init_sensor
  1562 ;; This function is called by:
  1563 ;;		_main
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text5
  1568  000FDA                     __ptext5:
  1569                           	opt callstack 0
  1570  000FDA                     _setup:
  1571                           	opt callstack 23
  1572                           
  1573                           ;main.c: 48:     OSCCON = 0x72;
  1574                           
  1575                           ;incstack = 0
  1576  000FDA  0E72               	movlw	114
  1577  000FDC  6ED3               	movwf	4051,c	;volatile
  1578  000FDE                     l55:
  1579  000FDE  A4D3               	btfss	4051,2,c	;volatile
  1580  000FE0  D7FE               	goto	l55
  1581                           
  1582                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1583  000FE2  8EF2               	bsf	4082,7,c	;volatile
  1584                           
  1585                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1586  000FE4  8CF2               	bsf	4082,6,c	;volatile
  1587                           
  1588                           ;main.c: 52:     RCONbits.IPEN=1;
  1589  000FE6  8ED0               	bsf	4048,7,c	;volatile
  1590                           
  1591                           ;main.c: 55:     init_LCD();
  1592  000FE8  EC88  F004         	call	_init_LCD	;wreg free
  1593                           
  1594                           ;main.c: 56:     init_RFID();
  1595  000FEC  EC77  F008         	call	_init_RFID	;wreg free
  1596                           
  1597                           ;main.c: 57:     init_sensor();
  1598  000FF0  EC9E  F008         	call	_init_sensor	;wreg free
  1599                           
  1600                           ;main.c: 58:     initPWM(199);
  1601  000FF4  0E00               	movlw	0
  1602  000FF6  6E0C               	movwf	initPWM@PWMperiod+1,c
  1603  000FF8  0EC7               	movlw	199
  1604  000FFA  6E0B               	movwf	initPWM@PWMperiod,c
  1605  000FFC  EC84  F008         	call	_initPWM	;wreg free
  1606                           
  1607                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1608  001000  9093               	bcf	3987,0,c	;volatile
  1609                           
  1610                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1611  001002  9493               	bcf	3987,2,c	;volatile
  1612                           
  1613                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1614  001004  8495               	bsf	3989,2,c	;volatile
  1615                           
  1616                           ;main.c: 66:     T0CON = 0b11000111;
  1617  001006  0EC7               	movlw	199
  1618  001008  6ED5               	movwf	4053,c	;volatile
  1619                           
  1620                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1621  00100A  8AF2               	bsf	4082,5,c	;volatile
  1622                           
  1623                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1624  00100C  94F1               	bcf	4081,2,c	;volatile
  1625  00100E  0012               	return		;funcret
  1626  001010                     __end_of_setup:
  1627                           	opt callstack 0
  1628                           
  1629 ;; *************** function _init_sensor *****************
  1630 ;; Defined at:
  1631 ;;		line 17 in file "signal_processing.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  throwaway       2    0        unsigned int 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1645 ;;      Params:         0       0       0       0
  1646 ;;      Locals:         2       0       0       0
  1647 ;;      Temps:          0       0       0       0
  1648 ;;      Totals:         2       0       0       0
  1649 ;;Total ram usage:        2 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    3
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_setup
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text6
  1660  00113C                     __ptext6:
  1661                           	opt callstack 0
  1662  00113C                     _init_sensor:
  1663                           	opt callstack 26
  1664                           
  1665                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1666                           
  1667                           ;incstack = 0
  1668  00113C  0E01               	movlw	1
  1669  00113E  6EB7               	movwf	4023,c	;volatile
  1670                           
  1671                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1672  001140  8492               	bsf	3986,2,c	;volatile
  1673                           
  1674                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1675  001142  0E00               	movlw	0
  1676  001144  6EB8               	movwf	4024,c	;volatile
  1677                           
  1678                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1679  001146  0E00               	movlw	0
  1680  001148  6EB9               	movwf	4025,c	;volatile
  1681                           
  1682                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1683  00114A  0E47               	movlw	71
  1684  00114C  6E63               	movwf	3939,c	;volatile
  1685  00114E  5069               	movf	3945,w,c	;volatile
  1686  001150  5068               	movf	3944,w,c	;volatile
  1687  001152  0012               	return		;funcret
  1688  001154                     __end_of_init_sensor:
  1689                           	opt callstack 0
  1690                           
  1691 ;; *************** function _init_RFID *****************
  1692 ;; Defined at:
  1693 ;;		line 13 in file "RFID.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;		None
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, status,2
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1707 ;;      Params:         0       0       0       0
  1708 ;;      Locals:         0       0       0       0
  1709 ;;      Temps:          0       0       0       0
  1710 ;;      Totals:         0       0       0       0
  1711 ;;Total ram usage:        0 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    3
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_setup
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text7
  1722  0010EE                     __ptext7:
  1723                           	opt callstack 0
  1724  0010EE                     _init_RFID:
  1725                           	opt callstack 26
  1726                           
  1727                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1728                           
  1729                           ;incstack = 0
  1730  0010EE  8E94               	bsf	3988,7,c	;volatile
  1731                           
  1732                           ;RFID.c: 19:     SPBRG = 203;
  1733  0010F0  0ECB               	movlw	203
  1734  0010F2  6EAF               	movwf	4015,c	;volatile
  1735                           
  1736                           ;RFID.c: 20:     SPBRGH = 0;
  1737  0010F4  0E00               	movlw	0
  1738  0010F6  6EB0               	movwf	4016,c	;volatile
  1739                           
  1740                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1741  0010F8  86AA               	bsf	4010,3,c	;volatile
  1742                           
  1743                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1744  0010FA  84AC               	bsf	4012,2,c	;volatile
  1745                           
  1746                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1747  0010FC  88AB               	bsf	4011,4,c	;volatile
  1748                           
  1749                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1750  0010FE  8EAB               	bsf	4011,7,c	;volatile
  1751                           
  1752                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1753  001100  8AAC               	bsf	4012,5,c	;volatile
  1754                           
  1755                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1756  001102  8A9D               	bsf	3997,5,c	;volatile
  1757                           
  1758                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1759  001104  8A9F               	bsf	3999,5,c	;volatile
  1760  001106  0012               	return		;funcret
  1761  001108                     __end_of_init_RFID:
  1762                           	opt callstack 0
  1763                           
  1764 ;; *************** function _init_LCD *****************
  1765 ;; Defined at:
  1766 ;;		line 56 in file "LCDIO.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       0       0       0
  1781 ;;      Locals:         0       0       0       0
  1782 ;;      Temps:          1       0       0       0
  1783 ;;      Totals:         1       0       0       0
  1784 ;;Total ram usage:        1 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    6
  1787 ;; This function calls:
  1788 ;;		_LCDout
  1789 ;;		_SendLCD
  1790 ;; This function is called by:
  1791 ;;		_setup
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text8
  1796  000910                     __ptext8:
  1797                           	opt callstack 0
  1798  000910                     _init_LCD:
  1799                           	opt callstack 23
  1800                           
  1801                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1802                           
  1803                           ;incstack = 0
  1804  000910  9094               	bcf	3988,0,c	;volatile
  1805                           
  1806                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1807  000912  9E92               	bcf	3986,7,c	;volatile
  1808                           
  1809                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1810  000914  9694               	bcf	3988,3,c	;volatile
  1811                           
  1812                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1813  000916  9095               	bcf	3989,0,c	;volatile
  1814                           
  1815                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1816  000918  9295               	bcf	3989,1,c	;volatile
  1817                           
  1818                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1819  00091A  9C92               	bcf	3986,6,c	;volatile
  1820                           
  1821                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1822  00091C  908C               	bcf	3980,0,c	;volatile
  1823                           
  1824                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1825  00091E  928C               	bcf	3980,1,c	;volatile
  1826                           
  1827                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1828  000920  968B               	bcf	3979,3,c	;volatile
  1829                           
  1830                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1831  000922  908B               	bcf	3979,0,c	;volatile
  1832                           
  1833                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1834  000924  9C89               	bcf	3977,6,c	;volatile
  1835                           
  1836                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1837  000926  9E89               	bcf	3977,7,c	;volatile
  1838                           
  1839                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1840  000928  0E27               	movlw	39
  1841  00092A  6E0F               	movwf	??_init_LCD& (0+255),c
  1842  00092C  0EF5               	movlw	245
  1843  00092E                     u1957:
  1844  00092E  2EE8               	decfsz	wreg,f,c
  1845  000930  D7FE               	bra	u1957
  1846  000932  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1847  000934  D7FC               	bra	u1957
  1848  000936  F000               	nop	
  1849                           
  1850                           ;LCDIO.c: 76:  LCDout(0b0011);
  1851  000938  0E03               	movlw	3
  1852  00093A  EC9A  F006         	call	_LCDout
  1853                           
  1854                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1855  00093E  0E0D               	movlw	13
  1856  000940  6E0F               	movwf	??_init_LCD& (0+255),c
  1857  000942  0EFC               	movlw	252
  1858  000944                     u1967:
  1859  000944  2EE8               	decfsz	wreg,f,c
  1860  000946  D7FE               	bra	u1967
  1861  000948  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1862  00094A  D7FC               	bra	u1967
  1863                           
  1864                           ;LCDIO.c: 78:  LCDout(0b0011);
  1865  00094C  0E03               	movlw	3
  1866  00094E  EC9A  F006         	call	_LCDout
  1867                           
  1868                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1869  000952  0E85               	movlw	133
  1870  000954                     u1977:
  1871  000954  2EE8               	decfsz	wreg,f,c
  1872  000956  D7FE               	bra	u1977
  1873  000958  F000               	nop	
  1874                           
  1875                           ;LCDIO.c: 80:  LCDout(0b0011);
  1876  00095A  0E03               	movlw	3
  1877  00095C  EC9A  F006         	call	_LCDout
  1878                           
  1879                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1880  000960  0E21               	movlw	33
  1881  000962                     u1987:
  1882  000962  2EE8               	decfsz	wreg,f,c
  1883  000964  D7FE               	bra	u1987
  1884  000966  F000               	nop	
  1885                           
  1886                           ;LCDIO.c: 82:  LCDout(0b0010);
  1887  000968  0E02               	movlw	2
  1888  00096A  EC9A  F006         	call	_LCDout
  1889                           
  1890                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1891  00096E  0E21               	movlw	33
  1892  000970                     u1997:
  1893  000970  2EE8               	decfsz	wreg,f,c
  1894  000972  D7FE               	bra	u1997
  1895  000974  F000               	nop	
  1896                           
  1897                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1898  000976  0E00               	movlw	0
  1899  000978  6E0D               	movwf	SendLCD@type,c
  1900  00097A  0E28               	movlw	40
  1901  00097C  EC22  F008         	call	_SendLCD
  1902                           
  1903                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1904  000980  0E21               	movlw	33
  1905  000982                     u2007:
  1906  000982  2EE8               	decfsz	wreg,f,c
  1907  000984  D7FE               	bra	u2007
  1908  000986  F000               	nop	
  1909                           
  1910                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1911  000988  0E00               	movlw	0
  1912  00098A  6E0D               	movwf	SendLCD@type,c
  1913  00098C  0E08               	movlw	8
  1914  00098E  EC22  F008         	call	_SendLCD
  1915                           
  1916                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1917  000992  0E21               	movlw	33
  1918  000994                     u2017:
  1919  000994  2EE8               	decfsz	wreg,f,c
  1920  000996  D7FE               	bra	u2017
  1921  000998  F000               	nop	
  1922                           
  1923                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1924  00099A  0E00               	movlw	0
  1925  00099C  6E0D               	movwf	SendLCD@type,c
  1926  00099E  0E01               	movlw	1
  1927  0009A0  EC22  F008         	call	_SendLCD
  1928                           
  1929                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1930  0009A4  0E0D               	movlw	13
  1931  0009A6  6E0F               	movwf	??_init_LCD& (0+255),c
  1932  0009A8  0EFC               	movlw	252
  1933  0009AA                     u2027:
  1934  0009AA  2EE8               	decfsz	wreg,f,c
  1935  0009AC  D7FE               	bra	u2027
  1936  0009AE  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1937  0009B0  D7FC               	bra	u2027
  1938                           
  1939                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1940  0009B2  0E00               	movlw	0
  1941  0009B4  6E0D               	movwf	SendLCD@type,c
  1942  0009B6  0E06               	movlw	6
  1943  0009B8  EC22  F008         	call	_SendLCD
  1944                           
  1945                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1946  0009BC  0E21               	movlw	33
  1947  0009BE                     u2037:
  1948  0009BE  2EE8               	decfsz	wreg,f,c
  1949  0009C0  D7FE               	bra	u2037
  1950  0009C2  F000               	nop	
  1951                           
  1952                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1953  0009C4  0E00               	movlw	0
  1954  0009C6  6E0D               	movwf	SendLCD@type,c
  1955  0009C8  0E0C               	movlw	12
  1956  0009CA  EC22  F008         	call	_SendLCD
  1957                           
  1958                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1959  0009CE  0E21               	movlw	33
  1960  0009D0                     u2047:
  1961  0009D0  2EE8               	decfsz	wreg,f,c
  1962  0009D2  D7FE               	bra	u2047
  1963  0009D4  F000               	nop	
  1964  0009D6  0012               	return		;funcret
  1965  0009D8                     __end_of_init_LCD:
  1966                           	opt callstack 0
  1967                           
  1968 ;; *************** function _initPWM *****************
  1969 ;; Defined at:
  1970 ;;		line 5 in file "dc_motor.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  PWMperiod       2   10[COMRAM] int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1984 ;;      Params:         2       0       0       0
  1985 ;;      Locals:         0       0       0       0
  1986 ;;      Temps:          0       0       0       0
  1987 ;;      Totals:         2       0       0       0
  1988 ;;Total ram usage:        2 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    3
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_setup
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text9
  1999  001108                     __ptext9:
  2000                           	opt callstack 0
  2001  001108                     _initPWM:
  2002                           	opt callstack 26
  2003                           
  2004                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2005                           
  2006                           ;incstack = 0
  2007  001108  0E00               	movlw	0
  2008  00110A  6E7F               	movwf	3967,c	;volatile
  2009                           
  2010                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2011  00110C  0E80               	movlw	128
  2012  00110E  6E7E               	movwf	3966,c	;volatile
  2013                           
  2014                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2015  001110  0E6F               	movlw	111
  2016  001112  6E6F               	movwf	3951,c	;volatile
  2017                           
  2018                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2019  001114  0E00               	movlw	0
  2020  001116  6E6E               	movwf	3950,c	;volatile
  2021                           
  2022                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2023  001118  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2024                           
  2025                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2026  00111C  500C               	movf	initPWM@PWMperiod+1,w,c
  2027  00111E  6E7A               	movwf	3962,c	;volatile
  2028  001120  0012               	return		;funcret
  2029  001122                     __end_of_initPWM:
  2030                           	opt callstack 0
  2031                           
  2032 ;; *************** function _scanForBeacon *****************
  2033 ;; Defined at:
  2034 ;;		line 18 in file "subroutines.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2037 ;;		 -> main@motorL(9), 
  2038 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2039 ;;		 -> main@motorR(9), 
  2040 ;;  speed           2   46[COMRAM] int 
  2041 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2042 ;;		 -> movement_time(4), 
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;  i               2   57[COMRAM] int 
  2045 ;;  raw_data        2   54[COMRAM] unsigned int 
  2046 ;;  beacon_locat    1   56[COMRAM] unsigned char 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      unsigned char 
  2049 ;; Registers used:
  2050 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2056 ;;      Params:         8       0       0       0
  2057 ;;      Locals:         5       0       0       0
  2058 ;;      Temps:          4       0       0       0
  2059 ;;      Totals:        17       0       0       0
  2060 ;;Total ram usage:       17 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    7
  2063 ;; This function calls:
  2064 ;;		_ClearLCD
  2065 ;;		_LCD_String
  2066 ;;		_SetLine
  2067 ;;		_classify_data
  2068 ;;		_stop
  2069 ;;		_turn
  2070 ;; This function is called by:
  2071 ;;		_main
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text10
  2076  00061C                     __ptext10:
  2077                           	opt callstack 0
  2078  00061C                     _scanForBeacon:
  2079                           	opt callstack 23
  2080                           
  2081                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 19:                             volatile unsigned long *time
      +                          );subroutines.c: 20: {;subroutines.c: 21:     turn(mL,mR,speed);
  2082                           
  2083                           ;incstack = 0
  2084  00061C  C02B  F022         	movff	scanForBeacon@mL,turn@mL
  2085  000620  C02C  F023         	movff	scanForBeacon@mL+1,turn@mL+1
  2086  000624  C02D  F024         	movff	scanForBeacon@mR,turn@mR
  2087  000628  C02E  F025         	movff	scanForBeacon@mR+1,turn@mR+1
  2088  00062C  C02F  F026         	movff	scanForBeacon@speed,turn@max_power
  2089  000630  C030  F027         	movff	scanForBeacon@speed+1,turn@max_power+1
  2090  000634  ECD7  F005         	call	_turn	;wreg free
  2091                           
  2092                           ;subroutines.c: 22:     ClearLCD();
  2093  000638  EC91  F008         	call	_ClearLCD	;wreg free
  2094                           
  2095                           ;subroutines.c: 23:     LCD_String("SEARCHING");
  2096  00063C  0E9A               	movlw	low STR_4
  2097  00063E  6E0F               	movwf	LCD_String@string,c
  2098  000640  0E03               	movlw	high STR_4
  2099  000642  6E10               	movwf	LCD_String@string+1,c
  2100  000644  EC06  F007         	call	_LCD_String	;wreg free
  2101  000648                     l2605:
  2102                           
  2103                           ;subroutines.c: 27:     {;subroutines.c: 29:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2104  000648  5068               	movf	3944,w,c	;volatile
  2105  00064A  CF69 F033          	movff	3945,??_scanForBeacon	;volatile
  2106  00064E  6A34               	clrf	(??_scanForBeacon+1)& (0+255),c
  2107  000650  C033  F034         	movff	??_scanForBeacon,??_scanForBeacon+1
  2108  000654  6A33               	clrf	??_scanForBeacon,c
  2109  000656  1033               	iorwf	??_scanForBeacon,w,c
  2110  000658  6E37               	movwf	scanForBeacon@raw_data,c
  2111  00065A  5034               	movf	??_scanForBeacon+1,w,c
  2112  00065C  6E38               	movwf	scanForBeacon@raw_data+1,c
  2113                           
  2114                           ;subroutines.c: 32:         char beacon_location = classify_data(raw_data);
  2115  00065E  C037  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2116  000662  C038  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2117  000666  EC89  F007         	call	_classify_data	;wreg free
  2118  00066A  6E39               	movwf	scanForBeacon@beacon_location,c
  2119                           
  2120                           ;subroutines.c: 35:         if(beacon_location == 1)
  2121  00066C  0439               	decf	scanForBeacon@beacon_location,w,c
  2122  00066E  A4D8               	btfss	status,2,c
  2123  000670  D00A               	goto	l2619
  2124                           
  2125                           ;subroutines.c: 36:         {;subroutines.c: 37:             *time = 0;
  2126  000672  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2127  000676  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2128  00067A  6ADE               	clrf	postinc2,c
  2129  00067C  6ADE               	clrf	postinc2,c
  2130  00067E  6ADE               	clrf	postinc2,c
  2131  000680  6ADD               	clrf	postdec2,c
  2132                           
  2133                           ;subroutines.c: 38:             return 1;
  2134  000682  0E01               	movlw	1
  2135  000684  0012               	return	
  2136  000686                     l2619:
  2137  000686  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2138  00068A  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2139  00068E  0E03               	movlw	3
  2140  000690  50DB               	movf	plusw2,w,c
  2141  000692  E109               	bnz	u1810
  2142  000694  0E02               	movlw	2
  2143  000696  50DB               	movf	plusw2,w,c
  2144  000698  E106               	bnz	u1810
  2145  00069A  0E62               	movlw	98
  2146  00069C  5CDE               	subwf	postinc2,w,c
  2147  00069E  0E02               	movlw	2
  2148  0006A0  58DE               	subwfb	postinc2,w,c
  2149  0006A2  A0D8               	btfss	status,0,c
  2150  0006A4  D7D1               	goto	l2605
  2151  0006A6                     u1810:
  2152                           
  2153                           ;subroutines.c: 42:         {;subroutines.c: 43:             *time = 0;
  2154  0006A6  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2155  0006AA  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2156  0006AE  6ADE               	clrf	postinc2,c
  2157  0006B0  6ADE               	clrf	postinc2,c
  2158  0006B2  6ADE               	clrf	postinc2,c
  2159  0006B4  6ADD               	clrf	postdec2,c
  2160                           
  2161                           ;subroutines.c: 44:             ClearLCD();
  2162  0006B6  EC91  F008         	call	_ClearLCD	;wreg free
  2163                           
  2164                           ;subroutines.c: 45:             LCD_String("BOMB NOT FOUND");
  2165  0006BA  0E60               	movlw	low STR_5
  2166  0006BC  6E0F               	movwf	LCD_String@string,c
  2167  0006BE  0E03               	movlw	high STR_5
  2168  0006C0  6E10               	movwf	LCD_String@string+1,c
  2169  0006C2  EC06  F007         	call	_LCD_String	;wreg free
  2170                           
  2171                           ;subroutines.c: 46:             SetLine(2);
  2172  0006C6  0E02               	movlw	2
  2173  0006C8  EC3A  F008         	call	_SetLine
  2174                           
  2175                           ;subroutines.c: 47:             LCD_String("RESETTING ROBOT");
  2176  0006CC  0E21               	movlw	low STR_6
  2177  0006CE  6E0F               	movwf	LCD_String@string,c
  2178  0006D0  0E03               	movlw	high STR_6
  2179  0006D2  6E10               	movwf	LCD_String@string+1,c
  2180  0006D4  EC06  F007         	call	_LCD_String	;wreg free
  2181                           
  2182                           ;subroutines.c: 48:             stop(mL,mR,speed);
  2183  0006D8  C02B  F022         	movff	scanForBeacon@mL,stop@mL
  2184  0006DC  C02C  F023         	movff	scanForBeacon@mL+1,stop@mL+1
  2185  0006E0  C02D  F024         	movff	scanForBeacon@mR,stop@mR
  2186  0006E4  C02E  F025         	movff	scanForBeacon@mR+1,stop@mR+1
  2187  0006E8  C02F  F026         	movff	scanForBeacon@speed,stop@initial_speed
  2188  0006EC  C030  F027         	movff	scanForBeacon@speed+1,stop@initial_speed+1
  2189  0006F0  EC35  F007         	call	_stop	;wreg free
  2190                           
  2191                           ;subroutines.c: 49:             for(int i=0; i<20;i++)
  2192  0006F4  0E00               	movlw	0
  2193  0006F6  6E3B               	movwf	scanForBeacon@i+1,c
  2194  0006F8  0E00               	movlw	0
  2195  0006FA  6E3A               	movwf	scanForBeacon@i,c
  2196  0006FC                     l2639:
  2197                           
  2198                           ;subroutines.c: 50:             {;subroutines.c: 51:                 _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
  2199  0006FC  0E02               	movlw	2
  2200  0006FE  6E34               	movwf	(??_scanForBeacon+1)& (0+255),c
  2201  000700  0E04               	movlw	4
  2202  000702  6E33               	movwf	??_scanForBeacon& (0+255),c
  2203  000704  0EBA               	movlw	186
  2204  000706                     u2057:
  2205  000706  2EE8               	decfsz	wreg,f,c
  2206  000708  D7FE               	bra	u2057
  2207  00070A  2E33               	decfsz	??_scanForBeacon& (0+255),f,c
  2208  00070C  D7FC               	bra	u2057
  2209  00070E  2E34               	decfsz	(??_scanForBeacon+1)& (0+255),f,c
  2210  000710  D7FA               	bra	u2057
  2211  000712  D000               	nop2	
  2212                           
  2213                           ;subroutines.c: 52:             }
  2214  000714  4A3A               	infsnz	scanForBeacon@i,f,c
  2215  000716  2A3B               	incf	scanForBeacon@i+1,f,c
  2216  000718  BE3B               	btfsc	scanForBeacon@i+1,7,c
  2217  00071A  D7F0               	goto	l2639
  2218  00071C  503B               	movf	scanForBeacon@i+1,w,c
  2219  00071E  E104               	bnz	u1820
  2220  000720  0E14               	movlw	20
  2221  000722  5C3A               	subwf	scanForBeacon@i,w,c
  2222  000724  A0D8               	btfss	status,0,c
  2223  000726  D7EA               	goto	l2639
  2224  000728                     u1820:
  2225  000728  00FF               	reset		;# 
  2226  00072A  D78E               	goto	l2605
  2227  00072C                     __end_of_scanForBeacon:
  2228                           	opt callstack 0
  2229                           
  2230 ;; *************** function _turn *****************
  2231 ;; Defined at:
  2232 ;;		line 53 in file "dc_motor.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2235 ;;		 -> main@motorL(9), 
  2236 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2237 ;;		 -> main@motorR(9), 
  2238 ;;  max_power       2   37[COMRAM] int 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  i               2   40[COMRAM] int 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2250 ;;      Params:         6       0       0       0
  2251 ;;      Locals:         2       0       0       0
  2252 ;;      Temps:          1       0       0       0
  2253 ;;      Totals:         9       0       0       0
  2254 ;;Total ram usage:        9 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    5
  2257 ;; This function calls:
  2258 ;;		_setMotorPWM
  2259 ;; This function is called by:
  2260 ;;		_scanForBeacon
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text11
  2265  000BAE                     __ptext11:
  2266                           	opt callstack 0
  2267  000BAE                     _turn:
  2268                           	opt callstack 24
  2269                           
  2270                           ;dc_motor.c: 53: void turn(struct DC_motor *mL, struct DC_motor *mR, int max_power);dc_m
      +                          otor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2271                           
  2272                           ;incstack = 0
  2273  000BAE  EE20 F001          	lfsr	2,1
  2274  000BB2  5022               	movf	turn@mL,w,c
  2275  000BB4  26D9               	addwf	fsr2l,f,c
  2276  000BB6  5023               	movf	turn@mL+1,w,c
  2277  000BB8  22DA               	addwfc	fsr2h,f,c
  2278  000BBA  0E00               	movlw	0
  2279  000BBC  6EDF               	movwf	indf2,c
  2280                           
  2281                           ;dc_motor.c: 57:     mR->direction = 1;
  2282  000BBE  EE20 F001          	lfsr	2,1
  2283  000BC2  5024               	movf	turn@mR,w,c
  2284  000BC4  26D9               	addwf	fsr2l,f,c
  2285  000BC6  5025               	movf	turn@mR+1,w,c
  2286  000BC8  22DA               	addwfc	fsr2h,f,c
  2287  000BCA  0E01               	movlw	1
  2288  000BCC  6EDF               	movwf	indf2,c
  2289                           
  2290                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2291  000BCE  0E00               	movlw	0
  2292  000BD0  6E2A               	movwf	turn@i+1,c
  2293  000BD2  0E00               	movlw	0
  2294  000BD4  6E29               	movwf	turn@i,c
  2295  000BD6  D021               	goto	l2433
  2296  000BD8                     l2423:
  2297                           
  2298                           ;dc_motor.c: 60:         mL->power = i;
  2299  000BD8  C022  FFD9         	movff	turn@mL,fsr2l
  2300  000BDC  C023  FFDA         	movff	turn@mL+1,fsr2h
  2301  000BE0  C029  FFDF         	movff	turn@i,indf2
  2302                           
  2303                           ;dc_motor.c: 61:         mR->power = i;
  2304  000BE4  C024  FFD9         	movff	turn@mR,fsr2l
  2305  000BE8  C025  FFDA         	movff	turn@mR+1,fsr2h
  2306  000BEC  C029  FFDF         	movff	turn@i,indf2
  2307                           
  2308                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2309  000BF0  C022  F019         	movff	turn@mL,setMotorPWM@m
  2310  000BF4  C023  F01A         	movff	turn@mL+1,setMotorPWM@m+1
  2311  000BF8  EC7C  F002         	call	_setMotorPWM	;wreg free
  2312                           
  2313                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2314  000BFC  C024  F019         	movff	turn@mR,setMotorPWM@m
  2315  000C00  C025  F01A         	movff	turn@mR+1,setMotorPWM@m+1
  2316  000C04  EC7C  F002         	call	_setMotorPWM	;wreg free
  2317                           
  2318                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2319  000C08  0E03               	movlw	3
  2320  000C0A  6E28               	movwf	??_turn& (0+255),c
  2321  000C0C  0E98               	movlw	152
  2322  000C0E                     u2067:
  2323  000C0E  2EE8               	decfsz	wreg,f,c
  2324  000C10  D7FE               	bra	u2067
  2325  000C12  2E28               	decfsz	??_turn& (0+255),f,c
  2326  000C14  D7FC               	bra	u2067
  2327                           
  2328                           ;dc_motor.c: 66:     }
  2329  000C16  4A29               	infsnz	turn@i,f,c
  2330  000C18  2A2A               	incf	turn@i+1,f,c
  2331  000C1A                     l2433:
  2332  000C1A  5026               	movf	turn@max_power,w,c
  2333  000C1C  5C29               	subwf	turn@i,w,c
  2334  000C1E  502A               	movf	turn@i+1,w,c
  2335  000C20  0A80               	xorlw	128
  2336  000C22  6E28               	movwf	??_turn& (0+255),c
  2337  000C24  5027               	movf	turn@max_power+1,w,c
  2338  000C26  0A80               	xorlw	128
  2339  000C28  5828               	subwfb	??_turn& (0+255),w,c
  2340  000C2A  B0D8               	btfsc	status,0,c
  2341  000C2C  0012               	return	
  2342  000C2E  D7D4               	goto	l2423
  2343  000C30                     __end_of_turn:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function _stop *****************
  2347 ;; Defined at:
  2348 ;;		line 40 in file "dc_motor.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2351 ;;		 -> main@motorL(9), 
  2352 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2353 ;;		 -> main@motorR(9), 
  2354 ;;  initial_spee    2   37[COMRAM] int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  i               2   40[COMRAM] int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         6       0       0       0
  2367 ;;      Locals:         2       0       0       0
  2368 ;;      Temps:          1       0       0       0
  2369 ;;      Totals:         9       0       0       0
  2370 ;;Total ram usage:        9 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    5
  2373 ;; This function calls:
  2374 ;;		_setMotorPWM
  2375 ;; This function is called by:
  2376 ;;		_scanForBeacon
  2377 ;;		_stopAndDisplay
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text12
  2382  000E6A                     __ptext12:
  2383                           	opt callstack 0
  2384  000E6A                     _stop:
  2385                           	opt callstack 24
  2386                           
  2387                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2388                           
  2389                           ;incstack = 0
  2390  000E6A  C026  F029         	movff	stop@initial_speed,stop@i
  2391  000E6E  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  2392  000E72                     l2403:
  2393  000E72  BE2A               	btfsc	stop@i+1,7,c
  2394  000E74  0012               	return	
  2395  000E76  502A               	movf	stop@i+1,w,c
  2396  000E78  E103               	bnz	l2407
  2397  000E7A  0429               	decf	stop@i,w,c
  2398  000E7C  A0D8               	btfss	status,0,c
  2399  000E7E  0012               	return	
  2400  000E80                     l2407:
  2401                           
  2402                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2403  000E80  C022  FFD9         	movff	stop@mL,fsr2l
  2404  000E84  C023  FFDA         	movff	stop@mL+1,fsr2h
  2405  000E88  C029  FFDF         	movff	stop@i,indf2
  2406                           
  2407                           ;dc_motor.c: 45:         mR->power = i;
  2408  000E8C  C024  FFD9         	movff	stop@mR,fsr2l
  2409  000E90  C025  FFDA         	movff	stop@mR+1,fsr2h
  2410  000E94  C029  FFDF         	movff	stop@i,indf2
  2411                           
  2412                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2413  000E98  C022  F019         	movff	stop@mL,setMotorPWM@m
  2414  000E9C  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  2415  000EA0  EC7C  F002         	call	_setMotorPWM	;wreg free
  2416                           
  2417                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2418  000EA4  C024  F019         	movff	stop@mR,setMotorPWM@m
  2419  000EA8  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  2420  000EAC  EC7C  F002         	call	_setMotorPWM	;wreg free
  2421                           
  2422                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2423  000EB0  0E03               	movlw	3
  2424  000EB2  6E28               	movwf	??_stop& (0+255),c
  2425  000EB4  0E98               	movlw	152
  2426  000EB6                     u2077:
  2427  000EB6  2EE8               	decfsz	wreg,f,c
  2428  000EB8  D7FE               	bra	u2077
  2429  000EBA  2E28               	decfsz	??_stop& (0+255),f,c
  2430  000EBC  D7FC               	bra	u2077
  2431                           
  2432                           ;dc_motor.c: 49:     }
  2433  000EBE  0629               	decf	stop@i,f,c
  2434  000EC0  A0D8               	btfss	status,0,c
  2435  000EC2  062A               	decf	stop@i+1,f,c
  2436  000EC4  D7D6               	goto	l2403
  2437  000EC6                     __end_of_stop:
  2438                           	opt callstack 0
  2439                           
  2440 ;; *************** function _classify_data *****************
  2441 ;; Defined at:
  2442 ;;		line 35 in file "signal_processing.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  raw_data        2   10[COMRAM] unsigned int 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  filtered        2   14[COMRAM] unsigned int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      unsigned char 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2456 ;;      Params:         2       0       0       0
  2457 ;;      Locals:         2       0       0       0
  2458 ;;      Temps:          2       0       0       0
  2459 ;;      Totals:         6       0       0       0
  2460 ;;Total ram usage:        6 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_scanForBeacon
  2467 ;;		_waitForInput
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text13
  2472  000F12                     __ptext13:
  2473                           	opt callstack 0
  2474  000F12                     _classify_data:
  2475                           	opt callstack 26
  2476                           
  2477                           ;signal_processing.c: 35: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           36: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 3
      +                          9:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  2478                           
  2479                           ;incstack = 0
  2480  000F12  5040               	movf	classify_data@smoothed,w,c
  2481  000F14  5C0B               	subwf	classify_data@raw_data,w,c
  2482  000F16  6E0D               	movwf	??_classify_data& (0+255),c
  2483  000F18  5041               	movf	classify_data@smoothed+1,w,c
  2484  000F1A  580C               	subwfb	classify_data@raw_data+1,w,c
  2485  000F1C  6E0E               	movwf	(??_classify_data+1)& (0+255),c
  2486  000F1E  90D8               	bcf	status,0,c
  2487  000F20  320E               	rrcf	??_classify_data+1,f,c
  2488  000F22  320D               	rrcf	??_classify_data,f,c
  2489  000F24  90D8               	bcf	status,0,c
  2490  000F26  320E               	rrcf	??_classify_data+1,f,c
  2491  000F28  320D               	rrcf	??_classify_data,f,c
  2492  000F2A  5040               	movf	classify_data@smoothed,w,c
  2493  000F2C  240D               	addwf	??_classify_data,w,c
  2494  000F2E  6E40               	movwf	classify_data@smoothed,c
  2495  000F30  5041               	movf	classify_data@smoothed+1,w,c
  2496  000F32  200E               	addwfc	??_classify_data+1,w,c
  2497  000F34  6E41               	movwf	classify_data@smoothed+1,c
  2498                           
  2499                           ;signal_processing.c: 40:     unsigned int filtered = raw_data - smoothed;
  2500  000F36  5040               	movf	classify_data@smoothed,w,c
  2501  000F38  5C0B               	subwf	classify_data@raw_data,w,c
  2502  000F3A  6E0F               	movwf	classify_data@filtered,c
  2503  000F3C  5041               	movf	classify_data@smoothed+1,w,c
  2504  000F3E  580C               	subwfb	classify_data@raw_data+1,w,c
  2505  000F40  6E10               	movwf	classify_data@filtered+1,c
  2506                           
  2507                           ;signal_processing.c: 43:     if(filtered >= 100)
  2508  000F42  5010               	movf	classify_data@filtered+1,w,c
  2509  000F44  E104               	bnz	u1750
  2510  000F46  0E64               	movlw	100
  2511  000F48  5C0F               	subwf	classify_data@filtered,w,c
  2512  000F4A  A0D8               	btfss	status,0,c
  2513  000F4C  D002               	goto	l2521
  2514  000F4E                     u1750:
  2515                           
  2516                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  2517  000F4E  0E01               	movlw	1
  2518  000F50  0012               	return	
  2519  000F52                     l2521:
  2520                           
  2521                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  2522  000F52  0E00               	movlw	0
  2523  000F54  0012               	return		;funcret
  2524  000F56                     __end_of_classify_data:
  2525                           	opt callstack 0
  2526                           
  2527 ;; *************** function _SetLine *****************
  2528 ;; Defined at:
  2529 ;;		line 107 in file "LCDIO.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  line            1    wreg     unsigned char 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  line            1   14[COMRAM] unsigned char 
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, status,2, status,0, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2543 ;;      Params:         0       0       0       0
  2544 ;;      Locals:         1       0       0       0
  2545 ;;      Temps:          0       0       0       0
  2546 ;;      Totals:         1       0       0       0
  2547 ;;Total ram usage:        1 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    6
  2550 ;; This function calls:
  2551 ;;		_SendLCD
  2552 ;; This function is called by:
  2553 ;;		_check_RFID
  2554 ;;		_display_RFID
  2555 ;;		_scanForBeacon
  2556 ;;		_waitForInput
  2557 ;;		_debug
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text14
  2562  001074                     __ptext14:
  2563                           	opt callstack 0
  2564  001074                     _SetLine:
  2565                           	opt callstack 23
  2566                           
  2567                           ;incstack = 0
  2568                           ;SetLine@line stored from wreg
  2569  001074  6E0F               	movwf	SetLine@line,c
  2570                           
  2571                           ;LCDIO.c: 109:     if(line == 1){
  2572  001076  040F               	decf	SetLine@line,w,c
  2573  001078  A4D8               	btfss	status,2,c
  2574  00107A  D005               	goto	l2335
  2575                           
  2576                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2577  00107C  0E00               	movlw	0
  2578  00107E  6E0D               	movwf	SendLCD@type,c
  2579  001080  0E80               	movlw	128
  2580  001082  EC22  F008         	call	_SendLCD
  2581  001086                     l2335:
  2582                           
  2583                           ;LCDIO.c: 113:     if(line == 2){
  2584  001086  0E02               	movlw	2
  2585  001088  180F               	xorwf	SetLine@line,w,c
  2586  00108A  A4D8               	btfss	status,2,c
  2587  00108C  D005               	goto	l2339
  2588                           
  2589                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2590  00108E  0E00               	movlw	0
  2591  001090  6E0D               	movwf	SendLCD@type,c
  2592  001092  0EC0               	movlw	192
  2593  001094  EC22  F008         	call	_SendLCD
  2594  001098                     l2339:
  2595                           
  2596                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2597  001098  0E21               	movlw	33
  2598  00109A                     u2087:
  2599  00109A  2EE8               	decfsz	wreg,f,c
  2600  00109C  D7FE               	bra	u2087
  2601  00109E  F000               	nop	
  2602  0010A0  0012               	return		;funcret
  2603  0010A2                     __end_of_SetLine:
  2604                           	opt callstack 0
  2605                           
  2606 ;; *************** function _returnHome *****************
  2607 ;; Defined at:
  2608 ;;		line 86 in file "subroutines.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2611 ;;		 -> main@motorL(9), 
  2612 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2613 ;;		 -> main@motorR(9), 
  2614 ;;  speed           2   46[COMRAM] int 
  2615 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2616 ;;		 -> movement_time(4), 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      unsigned char 
  2621 ;; Registers used:
  2622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2628 ;;      Params:         8       0       0       0
  2629 ;;      Locals:         0       0       0       0
  2630 ;;      Temps:          4       0       0       0
  2631 ;;      Totals:        12       0       0       0
  2632 ;;Total ram usage:       12 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    7
  2635 ;; This function calls:
  2636 ;;		_ClearLCD
  2637 ;;		_LCD_String
  2638 ;;		_moveBackward
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text15
  2645  000F56                     __ptext15:
  2646                           	opt callstack 0
  2647  000F56                     _returnHome:
  2648                           	opt callstack 23
  2649                           
  2650                           ;subroutines.c: 86: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 87:                             volatile unsigned long *time);s
      +                          ubroutines.c: 88: {;subroutines.c: 89:     moveBackward(mL,mR,speed);
  2651                           
  2652                           ;incstack = 0
  2653  000F56  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2654  000F5A  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2655  000F5E  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2656  000F62  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2657  000F66  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2658  000F6A  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2659  000F6E  EC18  F006         	call	_moveBackward	;wreg free
  2660                           
  2661                           ;subroutines.c: 91:     ClearLCD();
  2662  000F72  EC91  F008         	call	_ClearLCD	;wreg free
  2663                           
  2664                           ;subroutines.c: 92:     LCD_String("RETURNING HOME");
  2665  000F76  0E6F               	movlw	low STR_8
  2666  000F78  6E0F               	movwf	LCD_String@string,c
  2667  000F7A  0E03               	movlw	high STR_8
  2668  000F7C  6E10               	movwf	LCD_String@string+1,c
  2669  000F7E  EC06  F007         	call	_LCD_String	;wreg free
  2670  000F82                     l2671:
  2671  000F82  C031  FFD9         	movff	returnHome@time,fsr2l
  2672  000F86  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2673  000F8A  50DE               	movf	postinc2,w,c
  2674  000F8C  10DE               	iorwf	postinc2,w,c
  2675  000F8E  10DE               	iorwf	postinc2,w,c
  2676  000F90  10DE               	iorwf	postinc2,w,c
  2677  000F92  A4D8               	btfss	status,2,c
  2678  000F94  D7F6               	goto	l2671
  2679                           
  2680                           ;subroutines.c: 94:     return 3;
  2681  000F96  0E03               	movlw	3
  2682  000F98  0012               	return		;funcret
  2683  000F9A                     __end_of_returnHome:
  2684                           	opt callstack 0
  2685                           
  2686 ;; *************** function _moveBackward *****************
  2687 ;; Defined at:
  2688 ;;		line 85 in file "dc_motor.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2691 ;;		 -> main@motorL(9), 
  2692 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2693 ;;		 -> main@motorR(9), 
  2694 ;;  max_power       2   37[COMRAM] int 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  i               2   40[COMRAM] int 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2706 ;;      Params:         6       0       0       0
  2707 ;;      Locals:         2       0       0       0
  2708 ;;      Temps:          1       0       0       0
  2709 ;;      Totals:         9       0       0       0
  2710 ;;Total ram usage:        9 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    5
  2713 ;; This function calls:
  2714 ;;		_setMotorPWM
  2715 ;; This function is called by:
  2716 ;;		_returnHome
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text16
  2721  000C30                     __ptext16:
  2722                           	opt callstack 0
  2723  000C30                     _moveBackward:
  2724                           	opt callstack 24
  2725                           
  2726                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2727                           
  2728                           ;incstack = 0
  2729  000C30  EE20 F001          	lfsr	2,1
  2730  000C34  5022               	movf	moveBackward@mL,w,c
  2731  000C36  26D9               	addwf	fsr2l,f,c
  2732  000C38  5023               	movf	moveBackward@mL+1,w,c
  2733  000C3A  22DA               	addwfc	fsr2h,f,c
  2734  000C3C  0E00               	movlw	0
  2735  000C3E  6EDF               	movwf	indf2,c
  2736                           
  2737                           ;dc_motor.c: 88:     mR->direction = 0;
  2738  000C40  EE20 F001          	lfsr	2,1
  2739  000C44  5024               	movf	moveBackward@mR,w,c
  2740  000C46  26D9               	addwf	fsr2l,f,c
  2741  000C48  5025               	movf	moveBackward@mR+1,w,c
  2742  000C4A  22DA               	addwfc	fsr2h,f,c
  2743  000C4C  0E00               	movlw	0
  2744  000C4E  6EDF               	movwf	indf2,c
  2745                           
  2746                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2747  000C50  0E00               	movlw	0
  2748  000C52  6E2A               	movwf	moveBackward@i+1,c
  2749  000C54  0E00               	movlw	0
  2750  000C56  6E29               	movwf	moveBackward@i,c
  2751  000C58  D021               	goto	l2465
  2752  000C5A                     l2455:
  2753                           
  2754                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2755  000C5A  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2756  000C5E  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2757  000C62  C029  FFDF         	movff	moveBackward@i,indf2
  2758                           
  2759                           ;dc_motor.c: 92:         mR->power = i;
  2760  000C66  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2761  000C6A  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2762  000C6E  C029  FFDF         	movff	moveBackward@i,indf2
  2763                           
  2764                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2765  000C72  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2766  000C76  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2767  000C7A  EC7C  F002         	call	_setMotorPWM	;wreg free
  2768                           
  2769                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2770  000C7E  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2771  000C82  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2772  000C86  EC7C  F002         	call	_setMotorPWM	;wreg free
  2773                           
  2774                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2775  000C8A  0E03               	movlw	3
  2776  000C8C  6E28               	movwf	??_moveBackward& (0+255),c
  2777  000C8E  0E98               	movlw	152
  2778  000C90                     u2097:
  2779  000C90  2EE8               	decfsz	wreg,f,c
  2780  000C92  D7FE               	bra	u2097
  2781  000C94  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2782  000C96  D7FC               	bra	u2097
  2783                           
  2784                           ;dc_motor.c: 96:     }
  2785  000C98  4A29               	infsnz	moveBackward@i,f,c
  2786  000C9A  2A2A               	incf	moveBackward@i+1,f,c
  2787  000C9C                     l2465:
  2788  000C9C  5026               	movf	moveBackward@max_power,w,c
  2789  000C9E  5C29               	subwf	moveBackward@i,w,c
  2790  000CA0  502A               	movf	moveBackward@i+1,w,c
  2791  000CA2  0A80               	xorlw	128
  2792  000CA4  6E28               	movwf	??_moveBackward& (0+255),c
  2793  000CA6  5027               	movf	moveBackward@max_power+1,w,c
  2794  000CA8  0A80               	xorlw	128
  2795  000CAA  5828               	subwfb	??_moveBackward& (0+255),w,c
  2796  000CAC  B0D8               	btfsc	status,0,c
  2797  000CAE  0012               	return	
  2798  000CB0  D7D4               	goto	l2455
  2799  000CB2                     __end_of_moveBackward:
  2800                           	opt callstack 0
  2801                           
  2802 ;; *************** function _moveToBeacon *****************
  2803 ;; Defined at:
  2804 ;;		line 60 in file "subroutines.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2807 ;;		 -> main@motorL(9), 
  2808 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2809 ;;		 -> main@motorR(9), 
  2810 ;;  speed           2   46[COMRAM] int 
  2811 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2812 ;;		 -> movement_time(4), 
  2813 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2814 ;;		 -> NULL(0), RFID_flag(1), 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      unsigned char 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2826 ;;      Params:        10       0       0       0
  2827 ;;      Locals:         0       0       0       0
  2828 ;;      Temps:          4       0       0       0
  2829 ;;      Totals:        14       0       0       0
  2830 ;;Total ram usage:       14 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    7
  2833 ;; This function calls:
  2834 ;;		_ClearLCD
  2835 ;;		_LCD_String
  2836 ;;		_moveForward
  2837 ;; This function is called by:
  2838 ;;		_main
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text17
  2843  000DAC                     __ptext17:
  2844                           	opt callstack 0
  2845  000DAC                     _moveToBeacon:
  2846                           	opt callstack 23
  2847                           
  2848                           ;subroutines.c: 60: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 61:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 62: {;subroutines.c: 63:     moveForward(mL,mR,spe
      +                          ed);
  2849                           
  2850                           ;incstack = 0
  2851  000DAC  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2852  000DB0  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2853  000DB4  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2854  000DB8  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2855  000DBC  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2856  000DC0  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2857  000DC4  EC59  F006         	call	_moveForward	;wreg free
  2858                           
  2859                           ;subroutines.c: 64:     ClearLCD();
  2860  000DC8  EC91  F008         	call	_ClearLCD	;wreg free
  2861                           
  2862                           ;subroutines.c: 65:     LCD_String("MOVING TO BOMB");
  2863  000DCC  0E51               	movlw	low STR_7
  2864  000DCE  6E0F               	movwf	LCD_String@string,c
  2865  000DD0  0E03               	movlw	high STR_7
  2866  000DD2  6E10               	movwf	LCD_String@string+1,c
  2867  000DD4  EC06  F007         	call	_LCD_String	;wreg free
  2868  000DD8                     l2649:
  2869                           
  2870                           ;subroutines.c: 69:           {;subroutines.c: 72:               if(*exit_flag == 1)
  2871  000DD8  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2872  000DDC  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2873  000DE0  04DE               	decf	postinc2,w,c
  2874  000DE2  A4D8               	btfss	status,2,c
  2875  000DE4  D002               	goto	l2659
  2876  000DE6                     u1830:
  2877  000DE6                     l2653:
  2878                           
  2879                           ;subroutines.c: 75:                   return 2;
  2880  000DE6  0E02               	movlw	2
  2881  000DE8  0012               	return	
  2882  000DEA                     l2659:
  2883  000DEA  C031  FFD9         	movff	moveToBeacon@time,fsr2l
  2884  000DEE  C032  FFDA         	movff	moveToBeacon@time+1,fsr2h
  2885  000DF2  0E03               	movlw	3
  2886  000DF4  50DB               	movf	plusw2,w,c
  2887  000DF6  E1F7               	bnz	l2653
  2888  000DF8  0E02               	movlw	2
  2889  000DFA  50DB               	movf	plusw2,w,c
  2890  000DFC  E1F4               	bnz	l2653
  2891  000DFE  0E31               	movlw	49
  2892  000E00  5CDE               	subwf	postinc2,w,c
  2893  000E02  0E01               	movlw	1
  2894  000E04  58DE               	subwfb	postinc2,w,c
  2895  000E06  B0D8               	btfsc	status,0,c
  2896  000E08  D7EE               	goto	u1830
  2897  000E0A  D7E6               	goto	l2649
  2898  000E0C                     __end_of_moveToBeacon:
  2899                           	opt callstack 0
  2900                           
  2901 ;; *************** function _moveForward *****************
  2902 ;; Defined at:
  2903 ;;		line 70 in file "dc_motor.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2906 ;;		 -> main@motorL(9), 
  2907 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2908 ;;		 -> main@motorR(9), 
  2909 ;;  max_power       2   37[COMRAM] int 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  i               2   40[COMRAM] int 
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2921 ;;      Params:         6       0       0       0
  2922 ;;      Locals:         2       0       0       0
  2923 ;;      Temps:          1       0       0       0
  2924 ;;      Totals:         9       0       0       0
  2925 ;;Total ram usage:        9 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    5
  2928 ;; This function calls:
  2929 ;;		_setMotorPWM
  2930 ;; This function is called by:
  2931 ;;		_moveToBeacon
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text18
  2936  000CB2                     __ptext18:
  2937                           	opt callstack 0
  2938  000CB2                     _moveForward:
  2939                           	opt callstack 24
  2940                           
  2941                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2942                           
  2943                           ;incstack = 0
  2944  000CB2  EE20 F001          	lfsr	2,1
  2945  000CB6  5022               	movf	moveForward@mL,w,c
  2946  000CB8  26D9               	addwf	fsr2l,f,c
  2947  000CBA  5023               	movf	moveForward@mL+1,w,c
  2948  000CBC  22DA               	addwfc	fsr2h,f,c
  2949  000CBE  0E01               	movlw	1
  2950  000CC0  6EDF               	movwf	indf2,c
  2951                           
  2952                           ;dc_motor.c: 73:     mR->direction = 1;
  2953  000CC2  EE20 F001          	lfsr	2,1
  2954  000CC6  5024               	movf	moveForward@mR,w,c
  2955  000CC8  26D9               	addwf	fsr2l,f,c
  2956  000CCA  5025               	movf	moveForward@mR+1,w,c
  2957  000CCC  22DA               	addwfc	fsr2h,f,c
  2958  000CCE  0E01               	movlw	1
  2959  000CD0  6EDF               	movwf	indf2,c
  2960                           
  2961                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2962  000CD2  0E00               	movlw	0
  2963  000CD4  6E2A               	movwf	moveForward@i+1,c
  2964  000CD6  0E00               	movlw	0
  2965  000CD8  6E29               	movwf	moveForward@i,c
  2966  000CDA  D021               	goto	l2449
  2967  000CDC                     l2439:
  2968                           
  2969                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2970  000CDC  C022  FFD9         	movff	moveForward@mL,fsr2l
  2971  000CE0  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2972  000CE4  C029  FFDF         	movff	moveForward@i,indf2
  2973                           
  2974                           ;dc_motor.c: 77:         mR->power = i;
  2975  000CE8  C024  FFD9         	movff	moveForward@mR,fsr2l
  2976  000CEC  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2977  000CF0  C029  FFDF         	movff	moveForward@i,indf2
  2978                           
  2979                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2980  000CF4  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2981  000CF8  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2982  000CFC  EC7C  F002         	call	_setMotorPWM	;wreg free
  2983                           
  2984                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2985  000D00  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2986  000D04  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2987  000D08  EC7C  F002         	call	_setMotorPWM	;wreg free
  2988                           
  2989                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2990  000D0C  0E03               	movlw	3
  2991  000D0E  6E28               	movwf	??_moveForward& (0+255),c
  2992  000D10  0E98               	movlw	152
  2993  000D12                     u2107:
  2994  000D12  2EE8               	decfsz	wreg,f,c
  2995  000D14  D7FE               	bra	u2107
  2996  000D16  2E28               	decfsz	??_moveForward& (0+255),f,c
  2997  000D18  D7FC               	bra	u2107
  2998                           
  2999                           ;dc_motor.c: 81:     }
  3000  000D1A  4A29               	infsnz	moveForward@i,f,c
  3001  000D1C  2A2A               	incf	moveForward@i+1,f,c
  3002  000D1E                     l2449:
  3003  000D1E  5026               	movf	moveForward@max_power,w,c
  3004  000D20  5C29               	subwf	moveForward@i,w,c
  3005  000D22  502A               	movf	moveForward@i+1,w,c
  3006  000D24  0A80               	xorlw	128
  3007  000D26  6E28               	movwf	??_moveForward& (0+255),c
  3008  000D28  5027               	movf	moveForward@max_power+1,w,c
  3009  000D2A  0A80               	xorlw	128
  3010  000D2C  5828               	subwfb	??_moveForward& (0+255),w,c
  3011  000D2E  B0D8               	btfsc	status,0,c
  3012  000D30  0012               	return	
  3013  000D32  D7D4               	goto	l2439
  3014  000D34                     __end_of_moveForward:
  3015                           	opt callstack 0
  3016                           
  3017 ;; *************** function _LCD_String *****************
  3018 ;; Defined at:
  3019 ;;		line 119 in file "LCDIO.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  string          2   14[COMRAM] PTR unsigned char 
  3022 ;;		 -> STR_14(16), STR_13(16), STR_12(13), debug@buf2(16), 
  3023 ;;		 -> debug@buf(16), STR_9(16), STR_8(15), STR_7(15), 
  3024 ;;		 -> STR_6(16), STR_5(15), STR_4(10), STR_3(16), 
  3025 ;;		 -> STR_2(16), STR_1(15), 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;		None
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3037 ;;      Params:         2       0       0       0
  3038 ;;      Locals:         0       0       0       0
  3039 ;;      Temps:          0       0       0       0
  3040 ;;      Totals:         2       0       0       0
  3041 ;;Total ram usage:        2 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    6
  3044 ;; This function calls:
  3045 ;;		_SendLCD
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;;		_check_RFID
  3049 ;;		_scanForBeacon
  3050 ;;		_moveToBeacon
  3051 ;;		_returnHome
  3052 ;;		_stopAndDisplay
  3053 ;;		_waitForInput
  3054 ;;		_debug
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text19
  3059  000E0C                     __ptext19:
  3060                           	opt callstack 0
  3061  000E0C                     _LCD_String:
  3062                           	opt callstack 23
  3063                           
  3064                           ;LCDIO.c: 121: while(*string != 0){
  3065                           
  3066                           ;incstack = 0
  3067  000E0C  D01A               	goto	l2321
  3068  000E0E                     l2315:
  3069                           
  3070                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3071  000E0E  0E01               	movlw	1
  3072  000E10  6E0D               	movwf	SendLCD@type,c
  3073  000E12  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3074  000E16  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3075  000E1A  6AF8               	clrf	tblptru,c
  3076  000E1C  0E02               	movlw	(high __ramtop+-1)
  3077  000E1E  64F7               	cpfsgt	tblptrh,c
  3078  000E20  D003               	bra	u1417
  3079  000E22  0008               	tblrd		*
  3080  000E24  50F5               	movf	tablat,w,c
  3081  000E26  D005               	bra	u1410
  3082  000E28                     u1417:
  3083  000E28  CFF6 FFE9          	movff	tblptrl,fsr0l
  3084  000E2C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3085  000E30  50EF               	movf	indf0,w,c
  3086  000E32                     u1410:
  3087  000E32  EC22  F008         	call	_SendLCD
  3088  000E36  4A0F               	infsnz	LCD_String@string,f,c
  3089  000E38  2A10               	incf	LCD_String@string+1,f,c
  3090                           
  3091                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3092  000E3A  0E21               	movlw	33
  3093  000E3C                     u2117:
  3094  000E3C  2EE8               	decfsz	wreg,f,c
  3095  000E3E  D7FE               	bra	u2117
  3096  000E40  F000               	nop	
  3097  000E42                     l2321:
  3098                           
  3099                           ;LCDIO.c: 121: while(*string != 0){
  3100  000E42  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3101  000E46  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3102  000E4A  6AF8               	clrf	tblptru,c
  3103  000E4C  0E02               	movlw	(high __ramtop+-1)
  3104  000E4E  64F7               	cpfsgt	tblptrh,c
  3105  000E50  D003               	bra	u1427
  3106  000E52  0008               	tblrd		*
  3107  000E54  50F5               	movf	tablat,w,c
  3108  000E56  D005               	bra	u1420
  3109  000E58                     u1427:
  3110  000E58  CFF6 FFE9          	movff	tblptrl,fsr0l
  3111  000E5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3112  000E60  50EF               	movf	indf0,w,c
  3113  000E62                     u1420:
  3114  000E62  0900               	iorlw	0
  3115  000E64  B4D8               	btfsc	status,2,c
  3116  000E66  0012               	return	
  3117  000E68  D7D2               	goto	l2315
  3118  000E6A                     __end_of_LCD_String:
  3119                           	opt callstack 0
  3120                           
  3121 ;; *************** function _ClearLCD *****************
  3122 ;; Defined at:
  3123 ;;		line 131 in file "LCDIO.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3137 ;;      Params:         0       0       0       0
  3138 ;;      Locals:         0       0       0       0
  3139 ;;      Temps:          1       0       0       0
  3140 ;;      Totals:         1       0       0       0
  3141 ;;Total ram usage:        1 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    6
  3144 ;; This function calls:
  3145 ;;		_SendLCD
  3146 ;; This function is called by:
  3147 ;;		_display_RFID
  3148 ;;		_scanForBeacon
  3149 ;;		_moveToBeacon
  3150 ;;		_returnHome
  3151 ;;		_stopAndDisplay
  3152 ;;		_waitForInput
  3153 ;;		_debug
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text20
  3158  001122                     __ptext20:
  3159                           	opt callstack 0
  3160  001122                     _ClearLCD:
  3161                           	opt callstack 23
  3162                           
  3163                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3164                           
  3165                           ;incstack = 0
  3166  001122  0E00               	movlw	0
  3167  001124  6E0D               	movwf	SendLCD@type,c
  3168  001126  0E01               	movlw	1
  3169  001128  EC22  F008         	call	_SendLCD
  3170                           
  3171                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3172  00112C  0E0D               	movlw	13
  3173  00112E  6E0F               	movwf	??_ClearLCD& (0+255),c
  3174  001130  0EFC               	movlw	252
  3175  001132                     u2127:
  3176  001132  2EE8               	decfsz	wreg,f,c
  3177  001134  D7FE               	bra	u2127
  3178  001136  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3179  001138  D7FC               	bra	u2127
  3180  00113A  0012               	return		;funcret
  3181  00113C                     __end_of_ClearLCD:
  3182                           	opt callstack 0
  3183                           
  3184 ;; *************** function _SendLCD *****************
  3185 ;; Defined at:
  3186 ;;		line 44 in file "LCDIO.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  Byte            1    wreg     unsigned char 
  3189 ;;  type            1   12[COMRAM] unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  Byte            1   13[COMRAM] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3201 ;;      Params:         1       0       0       0
  3202 ;;      Locals:         1       0       0       0
  3203 ;;      Temps:          0       0       0       0
  3204 ;;      Totals:         2       0       0       0
  3205 ;;Total ram usage:        2 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    5
  3208 ;; This function calls:
  3209 ;;		_LCDout
  3210 ;; This function is called by:
  3211 ;;		_init_LCD
  3212 ;;		_SetLine
  3213 ;;		_LCD_String
  3214 ;;		_ClearLCD
  3215 ;;		_display_RFID
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text21
  3220  001044                     __ptext21:
  3221                           	opt callstack 0
  3222  001044                     _SendLCD:
  3223                           	opt callstack 23
  3224                           
  3225                           ;incstack = 0
  3226                           ;SendLCD@Byte stored from wreg
  3227  001044  6E0E               	movwf	SendLCD@Byte,c
  3228                           
  3229                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3230  001046  B00D               	btfsc	SendLCD@type,0,c
  3231  001048  D002               	bra	u1345
  3232  00104A  9E89               	bcf	3977,7,c	;volatile
  3233  00104C  D001               	bra	u1346
  3234  00104E                     u1345:
  3235  00104E  8E89               	bsf	3977,7,c	;volatile
  3236  001050                     u1346:
  3237                           
  3238                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3239  001050  380E               	swapf	SendLCD@Byte,w,c
  3240  001052  0B0F               	andlw	15
  3241  001054  0B0F               	andlw	15
  3242  001056  EC9A  F006         	call	_LCDout
  3243                           
  3244                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3245  00105A  0E06               	movlw	6
  3246  00105C                     u2137:
  3247  00105C  2EE8               	decfsz	wreg,f,c
  3248  00105E  D7FE               	bra	u2137
  3249  001060  D000               	nop2	
  3250                           
  3251                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3252  001062  500E               	movf	SendLCD@Byte,w,c
  3253  001064  0B0F               	andlw	15
  3254  001066  EC9A  F006         	call	_LCDout
  3255                           
  3256                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3257  00106A  0E21               	movlw	33
  3258  00106C                     u2147:
  3259  00106C  2EE8               	decfsz	wreg,f,c
  3260  00106E  D7FE               	bra	u2147
  3261  001070  F000               	nop	
  3262  001072  0012               	return		;funcret
  3263  001074                     __end_of_SendLCD:
  3264                           	opt callstack 0
  3265                           
  3266 ;; *************** function _LCDout *****************
  3267 ;; Defined at:
  3268 ;;		line 31 in file "LCDIO.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  number          1    wreg     unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  number          1   11[COMRAM] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3282 ;;      Params:         0       0       0       0
  3283 ;;      Locals:         1       0       0       0
  3284 ;;      Temps:          1       0       0       0
  3285 ;;      Totals:         2       0       0       0
  3286 ;;Total ram usage:        2 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    4
  3289 ;; This function calls:
  3290 ;;		_E_TOG
  3291 ;; This function is called by:
  3292 ;;		_SendLCD
  3293 ;;		_init_LCD
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text22
  3298  000D34                     __ptext22:
  3299                           	opt callstack 0
  3300  000D34                     _LCDout:
  3301                           	opt callstack 23
  3302                           
  3303                           ;incstack = 0
  3304                           ;LCDout@number stored from wreg
  3305  000D34  6E0C               	movwf	LCDout@number,c
  3306                           
  3307                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3308  000D36  C00C  F00B         	movff	LCDout@number,??_LCDout
  3309  000D3A  0E01               	movlw	1
  3310  000D3C  160B               	andwf	??_LCDout,f,c
  3311  000D3E  508B               	movf	3979,w,c	;volatile
  3312  000D40  180B               	xorwf	??_LCDout,w,c
  3313  000D42  0BFE               	andlw	-2
  3314  000D44  180B               	xorwf	??_LCDout,w,c
  3315  000D46  6E8B               	movwf	3979,c	;volatile
  3316                           
  3317                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3318  000D48  C00C  F00B         	movff	LCDout@number,??_LCDout
  3319  000D4C  90D8               	bcf	status,0,c
  3320  000D4E  320B               	rrcf	??_LCDout,f,c
  3321  000D50  0E01               	movlw	1
  3322  000D52  160B               	andwf	??_LCDout,f,c
  3323  000D54  460B               	rlncf	??_LCDout,f,c
  3324  000D56  460B               	rlncf	??_LCDout,f,c
  3325  000D58  460B               	rlncf	??_LCDout,f,c
  3326  000D5A  508B               	movf	3979,w,c	;volatile
  3327  000D5C  180B               	xorwf	??_LCDout,w,c
  3328  000D5E  0BF7               	andlw	-9
  3329  000D60  180B               	xorwf	??_LCDout,w,c
  3330  000D62  6E8B               	movwf	3979,c	;volatile
  3331                           
  3332                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3333  000D64  C00C  F00B         	movff	LCDout@number,??_LCDout
  3334  000D68  90D8               	bcf	status,0,c
  3335  000D6A  320B               	rrcf	??_LCDout,f,c
  3336  000D6C  90D8               	bcf	status,0,c
  3337  000D6E  320B               	rrcf	??_LCDout,f,c
  3338  000D70  0E01               	movlw	1
  3339  000D72  160B               	andwf	??_LCDout,f,c
  3340  000D74  508C               	movf	3980,w,c	;volatile
  3341  000D76  180B               	xorwf	??_LCDout,w,c
  3342  000D78  0BFE               	andlw	-2
  3343  000D7A  180B               	xorwf	??_LCDout,w,c
  3344  000D7C  6E8C               	movwf	3980,c	;volatile
  3345                           
  3346                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3347  000D7E  C00C  F00B         	movff	LCDout@number,??_LCDout
  3348  000D82  90D8               	bcf	status,0,c
  3349  000D84  320B               	rrcf	??_LCDout,f,c
  3350  000D86  90D8               	bcf	status,0,c
  3351  000D88  320B               	rrcf	??_LCDout,f,c
  3352  000D8A  90D8               	bcf	status,0,c
  3353  000D8C  320B               	rrcf	??_LCDout,f,c
  3354  000D8E  0E01               	movlw	1
  3355  000D90  160B               	andwf	??_LCDout,f,c
  3356  000D92  460B               	rlncf	??_LCDout,f,c
  3357  000D94  508C               	movf	3980,w,c	;volatile
  3358  000D96  180B               	xorwf	??_LCDout,w,c
  3359  000D98  0BFD               	andlw	-3
  3360  000D9A  180B               	xorwf	??_LCDout,w,c
  3361  000D9C  6E8C               	movwf	3980,c	;volatile
  3362                           
  3363                           ;LCDIO.c: 39:  E_TOG();
  3364  000D9E  ECAA  F008         	call	_E_TOG	;wreg free
  3365                           
  3366                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3367  000DA2  0E03               	movlw	3
  3368  000DA4                     u2157:
  3369  000DA4  2EE8               	decfsz	wreg,f,c
  3370  000DA6  D7FE               	bra	u2157
  3371  000DA8  F000               	nop	
  3372  000DAA  0012               	return		;funcret
  3373  000DAC                     __end_of_LCDout:
  3374                           	opt callstack 0
  3375                           
  3376 ;; *************** function _E_TOG *****************
  3377 ;; Defined at:
  3378 ;;		line 23 in file "LCDIO.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;		None
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3392 ;;      Params:         0       0       0       0
  3393 ;;      Locals:         0       0       0       0
  3394 ;;      Temps:          0       0       0       0
  3395 ;;      Totals:         0       0       0       0
  3396 ;;Total ram usage:        0 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_LCDout
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text23
  3407  001154                     __ptext23:
  3408                           	opt callstack 0
  3409  001154                     _E_TOG:
  3410                           	opt callstack 23
  3411                           
  3412                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3413                           
  3414                           ;incstack = 0
  3415  001154  8C89               	bsf	3977,6,c	;volatile
  3416                           
  3417                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3418  001156  0E03               	movlw	3
  3419  001158                     u2167:
  3420  001158  2EE8               	decfsz	wreg,f,c
  3421  00115A  D7FE               	bra	u2167
  3422  00115C  F000               	nop	
  3423                           
  3424                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3425  00115E  9C89               	bcf	3977,6,c	;volatile
  3426  001160  0012               	return		;funcret
  3427  001162                     __end_of_E_TOG:
  3428                           	opt callstack 0
  3429                           
  3430 ;; *************** function _init_motor_struct *****************
  3431 ;; Defined at:
  3432 ;;		line 99 in file "dc_motor.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3435 ;;		 -> main@motorL(9), 
  3436 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3437 ;;		 -> main@motorR(9), 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3449 ;;      Params:         4       0       0       0
  3450 ;;      Locals:         0       0       0       0
  3451 ;;      Temps:          0       0       0       0
  3452 ;;      Totals:         4       0       0       0
  3453 ;;Total ram usage:        4 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    5
  3456 ;; This function calls:
  3457 ;;		_setMotorPWM
  3458 ;; This function is called by:
  3459 ;;		_main
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text24
  3464  000826                     __ptext24:
  3465                           	opt callstack 0
  3466  000826                     _init_motor_struct:
  3467                           	opt callstack 25
  3468                           
  3469                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3470                           
  3471                           ;incstack = 0
  3472  000826  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3473  00082A  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3474  00082E  0E00               	movlw	0
  3475  000830  6EDF               	movwf	indf2,c
  3476                           
  3477                           ;dc_motor.c: 103: mL->direction = 1;
  3478  000832  EE20 F001          	lfsr	2,1
  3479  000836  5022               	movf	init_motor_struct@mL,w,c
  3480  000838  26D9               	addwf	fsr2l,f,c
  3481  00083A  5023               	movf	init_motor_struct@mL+1,w,c
  3482  00083C  22DA               	addwfc	fsr2h,f,c
  3483  00083E  0E01               	movlw	1
  3484  000840  6EDF               	movwf	indf2,c
  3485                           
  3486                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3487  000842  EE20 F002          	lfsr	2,2
  3488  000846  5022               	movf	init_motor_struct@mL,w,c
  3489  000848  26D9               	addwf	fsr2l,f,c
  3490  00084A  5023               	movf	init_motor_struct@mL+1,w,c
  3491  00084C  22DA               	addwfc	fsr2h,f,c
  3492  00084E  0E79               	movlw	121
  3493  000850  6EDE               	movwf	postinc2,c
  3494  000852  0E0F               	movlw	15
  3495  000854  6EDD               	movwf	postdec2,c
  3496                           
  3497                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3498  000856  EE20 F004          	lfsr	2,4
  3499  00085A  5022               	movf	init_motor_struct@mL,w,c
  3500  00085C  26D9               	addwf	fsr2l,f,c
  3501  00085E  5023               	movf	init_motor_struct@mL+1,w,c
  3502  000860  22DA               	addwfc	fsr2h,f,c
  3503  000862  0E78               	movlw	120
  3504  000864  6EDE               	movwf	postinc2,c
  3505  000866  0E0F               	movlw	15
  3506  000868  6EDD               	movwf	postdec2,c
  3507                           
  3508                           ;dc_motor.c: 106: mL->dir_pin=0;
  3509  00086A  EE20 F006          	lfsr	2,6
  3510  00086E  5022               	movf	init_motor_struct@mL,w,c
  3511  000870  26D9               	addwf	fsr2l,f,c
  3512  000872  5023               	movf	init_motor_struct@mL+1,w,c
  3513  000874  22DA               	addwfc	fsr2h,f,c
  3514  000876  0E00               	movlw	0
  3515  000878  6EDF               	movwf	indf2,c
  3516                           
  3517                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3518  00087A  EE20 F007          	lfsr	2,7
  3519  00087E  5022               	movf	init_motor_struct@mL,w,c
  3520  000880  26D9               	addwf	fsr2l,f,c
  3521  000882  5023               	movf	init_motor_struct@mL+1,w,c
  3522  000884  22DA               	addwfc	fsr2h,f,c
  3523  000886  0EC7               	movlw	199
  3524  000888  6EDE               	movwf	postinc2,c
  3525  00088A  0E00               	movlw	0
  3526  00088C  6EDD               	movwf	postdec2,c
  3527                           
  3528                           ;dc_motor.c: 109: mR->power = 0;
  3529  00088E  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3530  000892  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3531  000896  0E00               	movlw	0
  3532  000898  6EDF               	movwf	indf2,c
  3533                           
  3534                           ;dc_motor.c: 110: mR->direction = 1;
  3535  00089A  EE20 F001          	lfsr	2,1
  3536  00089E  5024               	movf	init_motor_struct@mR,w,c
  3537  0008A0  26D9               	addwf	fsr2l,f,c
  3538  0008A2  5025               	movf	init_motor_struct@mR+1,w,c
  3539  0008A4  22DA               	addwfc	fsr2h,f,c
  3540  0008A6  0E01               	movlw	1
  3541  0008A8  6EDF               	movwf	indf2,c
  3542                           
  3543                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3544  0008AA  EE20 F002          	lfsr	2,2
  3545  0008AE  5024               	movf	init_motor_struct@mR,w,c
  3546  0008B0  26D9               	addwf	fsr2l,f,c
  3547  0008B2  5025               	movf	init_motor_struct@mR+1,w,c
  3548  0008B4  22DA               	addwfc	fsr2h,f,c
  3549  0008B6  0E77               	movlw	119
  3550  0008B8  6EDE               	movwf	postinc2,c
  3551  0008BA  0E0F               	movlw	15
  3552  0008BC  6EDD               	movwf	postdec2,c
  3553                           
  3554                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3555  0008BE  EE20 F004          	lfsr	2,4
  3556  0008C2  5024               	movf	init_motor_struct@mR,w,c
  3557  0008C4  26D9               	addwf	fsr2l,f,c
  3558  0008C6  5025               	movf	init_motor_struct@mR+1,w,c
  3559  0008C8  22DA               	addwfc	fsr2h,f,c
  3560  0008CA  0E76               	movlw	118
  3561  0008CC  6EDE               	movwf	postinc2,c
  3562  0008CE  0E0F               	movlw	15
  3563  0008D0  6EDD               	movwf	postdec2,c
  3564                           
  3565                           ;dc_motor.c: 113: mR->dir_pin=2;
  3566  0008D2  EE20 F006          	lfsr	2,6
  3567  0008D6  5024               	movf	init_motor_struct@mR,w,c
  3568  0008D8  26D9               	addwf	fsr2l,f,c
  3569  0008DA  5025               	movf	init_motor_struct@mR+1,w,c
  3570  0008DC  22DA               	addwfc	fsr2h,f,c
  3571  0008DE  0E02               	movlw	2
  3572  0008E0  6EDF               	movwf	indf2,c
  3573                           
  3574                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3575  0008E2  EE20 F007          	lfsr	2,7
  3576  0008E6  5024               	movf	init_motor_struct@mR,w,c
  3577  0008E8  26D9               	addwf	fsr2l,f,c
  3578  0008EA  5025               	movf	init_motor_struct@mR+1,w,c
  3579  0008EC  22DA               	addwfc	fsr2h,f,c
  3580  0008EE  0EC7               	movlw	199
  3581  0008F0  6EDE               	movwf	postinc2,c
  3582  0008F2  0E00               	movlw	0
  3583  0008F4  6EDD               	movwf	postdec2,c
  3584                           
  3585                           ;dc_motor.c: 116: setMotorPWM(mL);
  3586  0008F6  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3587  0008FA  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3588  0008FE  EC7C  F002         	call	_setMotorPWM	;wreg free
  3589                           
  3590                           ;dc_motor.c: 117: setMotorPWM(mR);
  3591  000902  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3592  000906  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3593  00090A  EC7C  F002         	call	_setMotorPWM	;wreg free
  3594  00090E  0012               	return		;funcret
  3595  000910                     __end_of_init_motor_struct:
  3596                           	opt callstack 0
  3597                           
  3598 ;; *************** function _setMotorPWM *****************
  3599 ;; Defined at:
  3600 ;;		line 18 in file "dc_motor.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3603 ;;		 -> main@motorR(9), main@motorL(9), 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  PWMduty         2   31[COMRAM] int 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3615 ;;      Params:         2       0       0       0
  3616 ;;      Locals:         2       0       0       0
  3617 ;;      Temps:          5       0       0       0
  3618 ;;      Totals:         9       0       0       0
  3619 ;;Total ram usage:        9 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    4
  3622 ;; This function calls:
  3623 ;;		___awdiv
  3624 ;;		___wmul
  3625 ;; This function is called by:
  3626 ;;		_stop
  3627 ;;		_turn
  3628 ;;		_moveForward
  3629 ;;		_moveBackward
  3630 ;;		_init_motor_struct
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text25
  3635  0004F8                     __ptext25:
  3636                           	opt callstack 0
  3637  0004F8                     _setMotorPWM:
  3638                           	opt callstack 24
  3639                           
  3640                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3641                           
  3642                           ;incstack = 0
  3643  0004F8  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3644  0004FC  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3645  000500  50DF               	movf	indf2,w,c
  3646  000502  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3647  000504  501B               	movf	??_setMotorPWM,w,c
  3648  000506  6E0B               	movwf	___wmul@multiplier,c
  3649  000508  6A0C               	clrf	___wmul@multiplier+1,c
  3650  00050A  EE20 F007          	lfsr	2,7
  3651  00050E  5019               	movf	setMotorPWM@m,w,c
  3652  000510  26D9               	addwf	fsr2l,f,c
  3653  000512  501A               	movf	setMotorPWM@m+1,w,c
  3654  000514  22DA               	addwfc	fsr2h,f,c
  3655  000516  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3656  00051A  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3657  00051E  EC64  F008         	call	___wmul	;wreg free
  3658  000522  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3659  000526  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3660  00052A  0E00               	movlw	0
  3661  00052C  6E14               	movwf	___awdiv@divisor+1,c
  3662  00052E  0E64               	movlw	100
  3663  000530  6E13               	movwf	___awdiv@divisor,c
  3664  000532  EC95  F005         	call	___awdiv	;wreg free
  3665  000536  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3666  00053A  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3667                           
  3668                           ;dc_motor.c: 24:     if (m->direction)
  3669  00053E  EE20 F001          	lfsr	2,1
  3670  000542  5019               	movf	setMotorPWM@m,w,c
  3671  000544  26D9               	addwf	fsr2l,f,c
  3672  000546  501A               	movf	setMotorPWM@m+1,w,c
  3673  000548  22DA               	addwfc	fsr2h,f,c
  3674  00054A  50DF               	movf	indf2,w,c
  3675  00054C  B4D8               	btfsc	status,2,c
  3676  00054E  D024               	goto	l2329
  3677                           
  3678                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3679  000550  EE20 F006          	lfsr	2,6
  3680  000554  5019               	movf	setMotorPWM@m,w,c
  3681  000556  26D9               	addwf	fsr2l,f,c
  3682  000558  501A               	movf	setMotorPWM@m+1,w,c
  3683  00055A  22DA               	addwfc	fsr2h,f,c
  3684  00055C  50DF               	movf	indf2,w,c
  3685  00055E  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3686  000560  0E01               	movlw	1
  3687  000562  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3688  000564  2A1B               	incf	??_setMotorPWM,f,c
  3689  000566  D002               	goto	u1454
  3690  000568                     u1455:
  3691  000568  90D8               	bcf	status,0,c
  3692  00056A  361C               	rlcf	??_setMotorPWM+1,f,c
  3693  00056C                     u1454:
  3694  00056C  2E1B               	decfsz	??_setMotorPWM,f,c
  3695  00056E  D7FC               	goto	u1455
  3696  000570  501C               	movf	??_setMotorPWM+1,w,c
  3697  000572  108A               	iorwf	3978,w,c	;volatile
  3698  000574  6E8A               	movwf	3978,c	;volatile
  3699                           
  3700                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3701  000576  EE20 F007          	lfsr	2,7
  3702  00057A  5019               	movf	setMotorPWM@m,w,c
  3703  00057C  26D9               	addwf	fsr2l,f,c
  3704  00057E  501A               	movf	setMotorPWM@m+1,w,c
  3705  000580  22DA               	addwfc	fsr2h,f,c
  3706  000582  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3707  000586  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3708  00058A  5020               	movf	setMotorPWM@PWMduty,w,c
  3709  00058C  5C1B               	subwf	??_setMotorPWM,w,c
  3710  00058E  6E20               	movwf	setMotorPWM@PWMduty,c
  3711  000590  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3712  000592  581C               	subwfb	??_setMotorPWM+1,w,c
  3713  000594  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3714                           
  3715                           ;dc_motor.c: 28:     }
  3716  000596  D014               	goto	l123
  3717  000598                     l2329:
  3718                           
  3719                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3720  000598  EE20 F006          	lfsr	2,6
  3721  00059C  5019               	movf	setMotorPWM@m,w,c
  3722  00059E  26D9               	addwf	fsr2l,f,c
  3723  0005A0  501A               	movf	setMotorPWM@m+1,w,c
  3724  0005A2  22DA               	addwfc	fsr2h,f,c
  3725  0005A4  50DF               	movf	indf2,w,c
  3726  0005A6  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3727  0005A8  0E01               	movlw	1
  3728  0005AA  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3729  0005AC  2A1B               	incf	??_setMotorPWM,f,c
  3730  0005AE  D002               	goto	u1464
  3731  0005B0                     u1465:
  3732  0005B0  90D8               	bcf	status,0,c
  3733  0005B2  361C               	rlcf	??_setMotorPWM+1,f,c
  3734  0005B4                     u1464:
  3735  0005B4  2E1B               	decfsz	??_setMotorPWM,f,c
  3736  0005B6  D7FC               	goto	u1465
  3737  0005B8  501C               	movf	??_setMotorPWM+1,w,c
  3738  0005BA  0AFF               	xorlw	255
  3739  0005BC  148A               	andwf	3978,w,c	;volatile
  3740  0005BE  6E8A               	movwf	3978,c	;volatile
  3741  0005C0                     l123:
  3742                           
  3743                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3744  0005C0  EE20 F002          	lfsr	2,2
  3745  0005C4  5019               	movf	setMotorPWM@m,w,c
  3746  0005C6  26D9               	addwf	fsr2l,f,c
  3747  0005C8  501A               	movf	setMotorPWM@m+1,w,c
  3748  0005CA  22DA               	addwfc	fsr2h,f,c
  3749  0005CC  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3750  0005D0  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3751  0005D4  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3752  0005D8  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3753  0005DC  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3754  0005DE  46E8               	rlncf	wreg,f,c
  3755  0005E0  0BFC               	andlw	252
  3756  0005E2  6EDF               	movwf	indf2,c
  3757                           
  3758                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3759  0005E4  EE20 F004          	lfsr	2,4
  3760  0005E8  5019               	movf	setMotorPWM@m,w,c
  3761  0005EA  26D9               	addwf	fsr2l,f,c
  3762  0005EC  501A               	movf	setMotorPWM@m+1,w,c
  3763  0005EE  22DA               	addwfc	fsr2h,f,c
  3764  0005F0  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3765  0005F4  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3766  0005F8  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3767  0005FC  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3768  000600  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3769  000604  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3770  000608  0E06               	movlw	6
  3771  00060A  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3772  00060C                     u1475:
  3773  00060C  341E               	rlcf	??_setMotorPWM+3,w,c
  3774  00060E  321E               	rrcf	??_setMotorPWM+3,f,c
  3775  000610  321D               	rrcf	??_setMotorPWM+2,f,c
  3776  000612  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3777  000614  D7FB               	goto	u1475
  3778  000616  501D               	movf	??_setMotorPWM+2,w,c
  3779  000618  6EDF               	movwf	indf2,c
  3780  00061A  0012               	return		;funcret
  3781  00061C                     __end_of_setMotorPWM:
  3782                           	opt callstack 0
  3783                           
  3784 ;; *************** function ___wmul *****************
  3785 ;; Defined at:
  3786 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  multiplier      2   10[COMRAM] unsigned int 
  3789 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  product         2   14[COMRAM] unsigned int 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  2   10[COMRAM] unsigned int 
  3794 ;; Registers used:
  3795 ;;		wreg, status,2, status,0, prodl, prodh
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3801 ;;      Params:         4       0       0       0
  3802 ;;      Locals:         2       0       0       0
  3803 ;;      Temps:          0       0       0       0
  3804 ;;      Totals:         6       0       0       0
  3805 ;;Total ram usage:        6 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    3
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_setMotorPWM
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text26
  3816  0010C8                     __ptext26:
  3817                           	opt callstack 0
  3818  0010C8                     ___wmul:
  3819                           	opt callstack 24
  3820                           
  3821                           ;incstack = 0
  3822  0010C8  500B               	movf	___wmul@multiplier,w,c
  3823  0010CA  020D               	mulwf	___wmul@multiplicand,c
  3824  0010CC  CFF3 F00F          	movff	prodl,___wmul@product
  3825  0010D0  CFF4 F010          	movff	prodh,___wmul@product+1
  3826  0010D4  500B               	movf	___wmul@multiplier,w,c
  3827  0010D6  020E               	mulwf	___wmul@multiplicand+1,c
  3828  0010D8  50F3               	movf	prodl,w,c
  3829  0010DA  2610               	addwf	___wmul@product+1,f,c
  3830  0010DC  500C               	movf	___wmul@multiplier+1,w,c
  3831  0010DE  020D               	mulwf	___wmul@multiplicand,c
  3832  0010E0  50F3               	movf	prodl,w,c
  3833  0010E2  2610               	addwf	___wmul@product+1,f,c
  3834  0010E4  C00F  F00B         	movff	___wmul@product,?___wmul
  3835  0010E8  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3836  0010EC  0012               	return		;funcret
  3837  0010EE                     __end_of___wmul:
  3838                           	opt callstack 0
  3839                           
  3840 ;; *************** function ___awdiv *****************
  3841 ;; Defined at:
  3842 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  dividend        2   16[COMRAM] int 
  3845 ;;  divisor         2   18[COMRAM] int 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  quotient        2   22[COMRAM] int 
  3848 ;;  sign            1   21[COMRAM] unsigned char 
  3849 ;;  counter         1   20[COMRAM] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2   16[COMRAM] int 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3859 ;;      Params:         4       0       0       0
  3860 ;;      Locals:         4       0       0       0
  3861 ;;      Temps:          0       0       0       0
  3862 ;;      Totals:         8       0       0       0
  3863 ;;Total ram usage:        8 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    3
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_setMotorPWM
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text27
  3874  000B2A                     __ptext27:
  3875                           	opt callstack 0
  3876  000B2A                     ___awdiv:
  3877                           	opt callstack 24
  3878                           
  3879                           ;incstack = 0
  3880  000B2A  0E00               	movlw	0
  3881  000B2C  6E16               	movwf	___awdiv@sign,c
  3882  000B2E  AE14               	btfss	___awdiv@divisor+1,7,c
  3883  000B30  D006               	goto	l2277
  3884  000B32  6C13               	negf	___awdiv@divisor,c
  3885  000B34  1E14               	comf	___awdiv@divisor+1,f,c
  3886  000B36  B0D8               	btfsc	status,0,c
  3887  000B38  2A14               	incf	___awdiv@divisor+1,f,c
  3888  000B3A  0E01               	movlw	1
  3889  000B3C  6E16               	movwf	___awdiv@sign,c
  3890  000B3E                     l2277:
  3891  000B3E  AE12               	btfss	___awdiv@dividend+1,7,c
  3892  000B40  D006               	goto	l2283
  3893  000B42  6C11               	negf	___awdiv@dividend,c
  3894  000B44  1E12               	comf	___awdiv@dividend+1,f,c
  3895  000B46  B0D8               	btfsc	status,0,c
  3896  000B48  2A12               	incf	___awdiv@dividend+1,f,c
  3897  000B4A  0E01               	movlw	1
  3898  000B4C  1A16               	xorwf	___awdiv@sign,f,c
  3899  000B4E                     l2283:
  3900  000B4E  0E00               	movlw	0
  3901  000B50  6E18               	movwf	___awdiv@quotient+1,c
  3902  000B52  0E00               	movlw	0
  3903  000B54  6E17               	movwf	___awdiv@quotient,c
  3904  000B56  5013               	movf	___awdiv@divisor,w,c
  3905  000B58  1014               	iorwf	___awdiv@divisor+1,w,c
  3906  000B5A  B4D8               	btfsc	status,2,c
  3907  000B5C  D01C               	goto	l2305
  3908  000B5E  0E01               	movlw	1
  3909  000B60  6E15               	movwf	___awdiv@counter,c
  3910  000B62  D004               	goto	l2291
  3911  000B64                     l2289:
  3912  000B64  90D8               	bcf	status,0,c
  3913  000B66  3613               	rlcf	___awdiv@divisor,f,c
  3914  000B68  3614               	rlcf	___awdiv@divisor+1,f,c
  3915  000B6A  2A15               	incf	___awdiv@counter,f,c
  3916  000B6C                     l2291:
  3917  000B6C  AE14               	btfss	___awdiv@divisor+1,7,c
  3918  000B6E  D7FA               	goto	l2289
  3919  000B70                     u1380:
  3920  000B70  90D8               	bcf	status,0,c
  3921  000B72  3617               	rlcf	___awdiv@quotient,f,c
  3922  000B74  3618               	rlcf	___awdiv@quotient+1,f,c
  3923  000B76  5013               	movf	___awdiv@divisor,w,c
  3924  000B78  5C11               	subwf	___awdiv@dividend,w,c
  3925  000B7A  5014               	movf	___awdiv@divisor+1,w,c
  3926  000B7C  5812               	subwfb	___awdiv@dividend+1,w,c
  3927  000B7E  A0D8               	btfss	status,0,c
  3928  000B80  D005               	goto	l2301
  3929  000B82  5013               	movf	___awdiv@divisor,w,c
  3930  000B84  5E11               	subwf	___awdiv@dividend,f,c
  3931  000B86  5014               	movf	___awdiv@divisor+1,w,c
  3932  000B88  5A12               	subwfb	___awdiv@dividend+1,f,c
  3933  000B8A  8017               	bsf	___awdiv@quotient,0,c
  3934  000B8C                     l2301:
  3935  000B8C  90D8               	bcf	status,0,c
  3936  000B8E  3214               	rrcf	___awdiv@divisor+1,f,c
  3937  000B90  3213               	rrcf	___awdiv@divisor,f,c
  3938  000B92  2E15               	decfsz	___awdiv@counter,f,c
  3939  000B94  D7ED               	goto	u1380
  3940  000B96                     l2305:
  3941  000B96  5016               	movf	___awdiv@sign,w,c
  3942  000B98  B4D8               	btfsc	status,2,c
  3943  000B9A  D004               	goto	l2309
  3944  000B9C  6C17               	negf	___awdiv@quotient,c
  3945  000B9E  1E18               	comf	___awdiv@quotient+1,f,c
  3946  000BA0  B0D8               	btfsc	status,0,c
  3947  000BA2  2A18               	incf	___awdiv@quotient+1,f,c
  3948  000BA4                     l2309:
  3949  000BA4  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3950  000BA8  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3951  000BAC  0012               	return		;funcret
  3952  000BAE                     __end_of___awdiv:
  3953                           	opt callstack 0
  3954                           
  3955 ;; *************** function _InterruptHandlerLow *****************
  3956 ;; Defined at:
  3957 ;;		line 93 in file "main.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;		None
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;		None
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, status,2, status,0
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3971 ;;      Params:         0       0       0       0
  3972 ;;      Locals:         0       0       0       0
  3973 ;;      Temps:          3       0       0       0
  3974 ;;      Totals:         3       0       0       0
  3975 ;;Total ram usage:        3 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    2
  3978 ;; This function calls:
  3979 ;;		Nothing
  3980 ;; This function is called by:
  3981 ;;		Interrupt level 1
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	intcodelo
  3986  000018                     __pintcodelo:
  3987                           	opt callstack 0
  3988  000018                     _InterruptHandlerLow:
  3989                           	opt callstack 22
  3990                           
  3991                           ;incstack = 0
  3992  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3993  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3994  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3995  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3996                           
  3997                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1 || robot_mode == 0))
  3998  000026  A4F2               	btfss	4082,2,c	;volatile
  3999  000028  D00D               	goto	i1l70
  4000  00002A  0443               	decf	_robot_mode,w,c	;volatile
  4001  00002C  B4D8               	btfsc	status,2,c
  4002  00002E  D003               	goto	i1u63_20
  4003  000030  5043               	movf	_robot_mode,w,c	;volatile
  4004  000032  A4D8               	btfss	status,2,c
  4005  000034  D007               	goto	i1l70
  4006  000036                     i1u63_20:
  4007                           
  4008                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  4009  000036  0E01               	movlw	1
  4010  000038  2644               	addwf	_movement_time,f,c	;volatile
  4011  00003A  0E00               	movlw	0
  4012  00003C  2245               	addwfc	_movement_time+1,f,c	;volatile
  4013  00003E  2246               	addwfc	_movement_time+2,f,c	;volatile
  4014  000040  2247               	addwfc	_movement_time+3,f,c	;volatile
  4015  000042  D00B               	goto	i1l1643
  4016  000044                     i1l70:
  4017  000044  A4F2               	btfss	4082,2,c	;volatile
  4018  000046  D009               	goto	i1l1643
  4019  000048  0E02               	movlw	2
  4020  00004A  1843               	xorwf	_robot_mode,w,c	;volatile
  4021  00004C  A4D8               	btfss	status,2,c
  4022  00004E  D005               	goto	i1l1643
  4023                           
  4024                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  4025  000050  0644               	decf	_movement_time,f,c	;volatile
  4026  000052  0E00               	movlw	0
  4027  000054  5A45               	subwfb	_movement_time+1,f,c	;volatile
  4028  000056  5A46               	subwfb	_movement_time+2,f,c	;volatile
  4029  000058  5A47               	subwfb	_movement_time+3,f,c	;volatile
  4030  00005A                     i1l1643:
  4031                           
  4032                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  4033                           
  4034                           ;main.c: 108:     else
  4035                           
  4036                           ;main.c: 106:     }
  4037                           
  4038                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  4039  00005A  94F2               	bcf	4082,2,c	;volatile
  4040  00005C  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4041  000060  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4042  000064  C008  FFD8         	movff	??_InterruptHandlerLow,status
  4043  000068  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4044  00006A  0010               	retfie	
  4045  00006C                     __end_of_InterruptHandlerLow:
  4046                           	opt callstack 0
  4047                           
  4048 ;; *************** function _InterruptHandlerHigh *****************
  4049 ;; Defined at:
  4050 ;;		line 75 in file "main.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;		None
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  throwaway       1    0        unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4064 ;;      Params:         0       0       0       0
  4065 ;;      Locals:         1       0       0       0
  4066 ;;      Temps:          2       0       0       0
  4067 ;;      Totals:         3       0       0       0
  4068 ;;Total ram usage:        3 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    1
  4071 ;; This function calls:
  4072 ;;		_processRFID
  4073 ;; This function is called by:
  4074 ;;		Interrupt level 2
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	intcode
  4079  000008                     __pintcode:
  4080                           	opt callstack 0
  4081  000008                     _InterruptHandlerHigh:
  4082                           	opt callstack 22
  4083                           
  4084                           ;incstack = 0
  4085  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4086  00000A  EF08  F008         	goto	int_func
  4087                           
  4088                           	psect	intcode_body
  4089  001010                     __pintcode_body:
  4090                           	opt callstack 22
  4091  001010                     int_func:
  4092                           	opt callstack 22
  4093  001010  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4094  001014  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4095                           
  4096                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4097  001018  AA9E               	btfss	3998,5,c	;volatile
  4098  00101A  D00D               	goto	i2l63
  4099  00101C  0443               	decf	_robot_mode,w,c	;volatile
  4100  00101E  A4D8               	btfss	status,2,c
  4101  001020  D00A               	goto	i2l63
  4102                           
  4103                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4104  001022  0E86               	movlw	low _RFIDbuf
  4105  001024  6E01               	movwf	processRFID@RFIDbuf,c
  4106  001026  0E00               	movlw	high _RFIDbuf
  4107  001028  6E02               	movwf	processRFID@RFIDbuf+1,c
  4108  00102A  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4109  00102E  EC63  F007         	call	_processRFID	;wreg free
  4110  001032  6E48               	movwf	_RFID_flag,c	;volatile
  4111                           
  4112                           ;main.c: 83:     }
  4113  001034  D001               	goto	i2l65
  4114  001036                     i2l63:
  4115  001036  50AE               	movf	4014,w,c	;volatile
  4116  001038                     i2l65:
  4117  001038  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4118  00103C  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4119  001040  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4120  001042  0011               	retfie		f
  4121  001044                     __end_of_InterruptHandlerHigh:
  4122                           	opt callstack 0
  4123                           
  4124 ;; *************** function _processRFID *****************
  4125 ;; Defined at:
  4126 ;;		line 34 in file "RFID.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4129 ;;		 -> RFIDbuf(12), 
  4130 ;;  latestChar      1    2[COMRAM] unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  i               1    3[COMRAM] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      unsigned char 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4142 ;;      Params:         3       0       0       0
  4143 ;;      Locals:         1       0       0       0
  4144 ;;      Temps:          0       0       0       0
  4145 ;;      Totals:         4       0       0       0
  4146 ;;Total ram usage:        4 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_InterruptHandlerHigh
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text30
  4156  000EC6                     __ptext30:
  4157                           	opt callstack 0
  4158  000EC6                     _processRFID:
  4159                           	opt callstack 22
  4160                           
  4161                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4162                           
  4163                           ;incstack = 0
  4164  000EC6  0E03               	movlw	3
  4165  000EC8  1803               	xorwf	processRFID@latestChar,w,c
  4166  000ECA  A4D8               	btfss	status,2,c
  4167  000ECC  D002               	goto	i2l2001
  4168                           
  4169                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4170  000ECE  0E01               	movlw	1
  4171  000ED0  0012               	return	
  4172  000ED2                     i2l2001:
  4173                           
  4174                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4175  000ED2  0E02               	movlw	2
  4176  000ED4  1803               	xorwf	processRFID@latestChar,w,c
  4177  000ED6  A4D8               	btfss	status,2,c
  4178  000ED8  D012               	goto	i2l2021
  4179                           
  4180                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4181  000EDA  0E00               	movlw	0
  4182  000EDC  6E42               	movwf	processRFID@position_in_buf,c
  4183                           
  4184                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4185  000EDE  0E00               	movlw	0
  4186  000EE0  6E04               	movwf	processRFID@i,c
  4187  000EE2                     i2l2009:
  4188                           
  4189                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4190  000EE2  5004               	movf	processRFID@i,w,c
  4191  000EE4  2401               	addwf	processRFID@RFIDbuf,w,c
  4192  000EE6  6ED9               	movwf	fsr2l,c
  4193  000EE8  0E00               	movlw	0
  4194  000EEA  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4195  000EEC  6EDA               	movwf	fsr2h,c
  4196  000EEE  0E00               	movlw	0
  4197  000EF0  6EDF               	movwf	indf2,c
  4198                           
  4199                           ;RFID.c: 56:            }
  4200  000EF2  2A04               	incf	processRFID@i,f,c
  4201  000EF4  0E0B               	movlw	11
  4202  000EF6  6404               	cpfsgt	processRFID@i,c
  4203  000EF8  D7F4               	goto	i2l2009
  4204  000EFA                     i2u115_40:
  4205                           
  4206                           ;RFID.c: 57:            return 0;
  4207  000EFA  0E00               	movlw	0
  4208  000EFC  0012               	return	
  4209  000EFE                     i2l2021:
  4210                           
  4211                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4212  000EFE  5042               	movf	processRFID@position_in_buf,w,c
  4213  000F00  2401               	addwf	processRFID@RFIDbuf,w,c
  4214  000F02  6ED9               	movwf	fsr2l,c
  4215  000F04  0E00               	movlw	0
  4216  000F06  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4217  000F08  6EDA               	movwf	fsr2h,c
  4218  000F0A  C003  FFDF         	movff	processRFID@latestChar,indf2
  4219                           
  4220                           ;RFID.c: 63:             position_in_buf++;
  4221  000F0E  2A42               	incf	processRFID@position_in_buf,f,c
  4222  000F10  D7F4               	goto	i2u115_40
  4223  000F12                     __end_of_processRFID:
  4224                           	opt callstack 0
  4225                           
  4226                           	psect	rparam
  4227  0000                     
  4228                           	psect	temp
  4229  000049                     btemp:
  4230                           	opt callstack 0
  4231  000049                     	ds	1
  4232  0000                     int$flags	set	btemp
  4233  0000                     wtemp8	set	btemp+1
  4234  0000                     ttemp5	set	btemp+1
  4235  0000                     ttemp6	set	btemp+4
  4236  0000                     ttemp7	set	btemp+8
  4237                           tosu	equ	0xFFF
  4238                           tosh	equ	0xFFE
  4239                           tosl	equ	0xFFD
  4240                           stkptr	equ	0xFFC
  4241                           pclatu	equ	0xFFB
  4242                           pclath	equ	0xFFA
  4243                           pcl	equ	0xFF9
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           indf0	equ	0xFEF
  4251                           postinc0	equ	0xFEE
  4252                           postdec0	equ	0xFED
  4253                           preinc0	equ	0xFEC
  4254                           plusw0	equ	0xFEB
  4255                           fsr0h	equ	0xFEA
  4256                           fsr0l	equ	0xFE9
  4257                           wreg	equ	0xFE8
  4258                           indf1	equ	0xFE7
  4259                           postinc1	equ	0xFE6
  4260                           postdec1	equ	0xFE5
  4261                           preinc1	equ	0xFE4
  4262                           plusw1	equ	0xFE3
  4263                           fsr1h	equ	0xFE2
  4264                           fsr1l	equ	0xFE1
  4265                           bsr	equ	0xFE0
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           preinc2	equ	0xFDC
  4270                           plusw2	equ	0xFDB
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8


Data Sizes:
    Strings     166
    Constant    0
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      72
    BANK0           160     22      72
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1866_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_9(CODE[16]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[16]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_scanForBeacon
    _waitForInput->_LCD_String
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_stop
    _scanForBeacon->_turn
    _turn->_setMotorPWM
    _stop->_setMotorPWM
    _SetLine->_SendLCD
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   53676
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    5187
                                             16 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15741
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4896
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       17     9      8   11628
                                             42 COMRAM    17     9      8
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
                               _stop
                               _turn
 ---------------------------------------------------------------------------------
 (2) _turn                                                 9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    3039
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     276
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6843
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        14     4     10    6967
                                             42 COMRAM    14     4     10
                           _ClearLCD
                         _LCD_String
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turn
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90       3        0.0%
DATA                 0      0      90      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 14:14:32 2020

                           l55 0FDE                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l123 05C0                            l349 0A3E            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0098  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2301 0B8C                           l2305 0B96                           l2321 0E42  
                         l2315 0E0E                           l2403 0E72                           l2309 0BA4  
                         l2335 1086                           l2407 0E80                           l2423 0BD8  
                         l2329 0598                           l2521 0F52                           l2433 0C1A  
                         l2291 0B6C                           l2283 0B4E                           l2339 1098  
                         l2507 0FAC                           l2277 0B3E                           l2605 0648  
                         l2701 0B20                           l2439 0CDC                           l2455 0C5A  
                         l2703 0B26                           l2289 0B64                           l2449 0D1E  
                         l2465 0C9C                           l2473 03B0                           l2721 0786  
                         l2619 0686                           l2653 0DE6                           l2485 0434  
                         l2733 0818                           l2725 07BA                           l2717 075A  
                         l2671 0F82                           l2639 06FC                           l2495 04E4  
                         l2479 03F2                           l2649 0DD8                           l2593 0A60  
                         l2569 09E0                           l2729 07E8                           l2659 0DEA  
                         l2685 0AD6                           l2695 0AEE                           STR_1 037E  
                         STR_2 0341                           STR_3 0331                           STR_4 039A  
                         STR_5 0360                           STR_6 0321                           STR_7 0351  
                         STR_8 036F                           STR_9 0321                           u2007 0982  
                         u2017 0994                           u1410 0E32                           u2107 0D12  
                         u2027 09AA                           u1420 0E62                           u2117 0E3C  
                         u2037 09BE                           _LATB 000F8A                           u2127 1132  
                         u2047 09D0                           u1600 0454                           u2137 105C  
                         u1345 104E                           u1417 0E28                           u2057 0706  
                         u1346 1050                           u1610 0462                           u2147 106C  
                         u1427 0E58                           u2067 0C0E                           u1380 0B70  
                         u1700 04A4                           u1620 0464                           u2157 0DA4  
                         u2077 0EB6                           u1454 056C                           u1710 04C0  
                         u1630 0472                           u1455 0568                           u2167 1158  
                         u2087 109A                           u1464 05B4                           u1720 04C2  
                         u1640 0474                           u1465 05B0                           u2097 0C90  
                         u1810 06A6                           u1650 0482                           u1475 060C  
                         u1820 0728                           u1660 0484                           u1580 0448  
                         u1740 0FD8                           u1830 0DE6                           u1750 0F4E  
                         u1670 0492                           u1590 0452                           u1680 0494  
                         u1690 04A2                           u1870 0B1A                           u1790 0A8C  
                         u1937 0A6A                           u1947 0AF8                           u1957 092E  
                         u1967 0944                           u1977 0954                           u1987 0962  
                         u1997 0970                           i1l70 0044                           i2l63 1036  
                         i2l65 1038                           _dbuf 0066                           _main 072C  
                         _prec 0064                           _nout 0060                           fsr0h 000FEA  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0049                           _stop 0E6A  
                         _turn 0BAE                           prodh 000FF4                           prodl 000FF3  
                         start 006C                   ___param_bank 000000                __end_of_SendLCD 1074  
              __end_of_SetLine 10A2                 ??_display_RFID 0012                          ?_main 0001  
          main@searching_speed 0092                __end_of___awdiv 0BAE                          STR_10 03A4  
                        STR_12 038D                          STR_13 0311                          STR_14 0301  
                        ?_stop 0022                          ?_turn 0022                          _T0CON 000FD5  
              ___awdiv@divisor 0013                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0015                          _RCREG 000FAE                          _E_TOG 1154  
                        _SPBRG 000FAF                   ?_init_sensor 0001                __end_of_initPWM 1122  
                        _flags 003C                          _setup 0FDA                          _width 0062  
             moveToBeacon@time 0031                          tablat 000FF5                          plusw2 000FDB  
           processRFID@RFIDbuf 0001                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          stop@i 0029                          status 000FD8  
                        turn@i 0029                          wtemp8 004A            __size_of_LCD_String 005E  
             __end_of_ClearLCD 113C           moveForward@max_power 0026                 __CFG_MCLRE$OFF 000000  
              __initialization 10A2                   __end_of_main 0826                   __end_of_stop 0EC6  
                 __end_of_turn 0C30                 __CFG_OSC$IRCIO 000000               LCD_String@string 000F  
                       ??_main 003C                         ??_stop 0028                         ??_turn 0028  
                __activetblptr 000002                         ?_E_TOG 0001                   ?_setMotorPWM 0019  
                 ?_moveForward 0022   scanForBeacon@beacon_location 0039               ___awdiv@dividend 0011  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       i1l1643 005A                         i2l2001 0ED2                         i2l2021 0EFE  
                       i2l2009 0EE2                         _LCDout 0D34                    SendLCD@Byte 000E  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000D                      ??_SendLCD 000E                      ??_SetLine 000F  
                display_RFID@i 0012                         ___wmul 10C8                      ??___awdiv 0015  
             __end_of_init_LCD 09D8            init_motor_struct@mL 0022            init_motor_struct@mR 0024  
                       clear_0 10A8                         clear_1 10B4               ___awdiv@quotient 0017  
       __size_of_scanForBeacon 0110              moveToBeacon@speed 002F                      ??_initPWM 000D  
               _stopAndDisplay 0A92                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0022  
                       stop@mR 0024                         turn@mL 0022                         turn@mR 0024  
                 ?_processRFID 0001              _init_motor_struct 0826           __end_of_display_RFID 0FDA  
           ?_init_motor_struct 0022                     __accesstop 0060        __end_of__initialization 10BA  
                ___rparam_used 000001                    SetLine@line 000F                  __end_of_E_TOG 1162  
          ??_init_motor_struct 0026                 __pcstackCOMRAM 0001                  __end_of_setup 1010  
                 ??_LCD_String 0011         __end_of_stopAndDisplay 0B2A                        ??_E_TOG 000B  
__size_of_InterruptHandlerHigh 103C                      ?_ClearLCD 0001    __end_of_InterruptHandlerLow 006C  
    __end_of_init_motor_struct 0910          __end_of_classify_data 0F56                     _check_RFID 03A8  
         __size_of_init_sensor 0018                        ??_setup 0010                  ?_moveBackward 0022  
                   __pbssBANK0 0060                        ?_LCDout 0001                  _scanForBeacon 061C  
           __size_of_init_RFID 001A             __end_of_LCD_String 0E6A             waitForInput@i_1366 0018  
                      ?___wmul 000B                  ?_moveToBeacon 002B                        _CAP1CON 000F63  
              ?_stopAndDisplay 002B                     ??_ClearLCD 000F                        _RFIDbuf 0086  
                      i1u63_20 0036                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0028                 ?_scanForBeacon 002B           __size_of_setMotorPWM 0124  
         __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0031                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0029                  ?_waitForInput 0001  
                      _SendLCD 1044                        __Hparam 0000                        _SetLine 1074  
                      __Lparam 0000                 ??_moveToBeacon 0035          processRFID@latestChar 0003  
                      ___awdiv 0B2A                __size_of___wmul 0026                   __psmallconst 0300  
             initPWM@PWMperiod 000B                        __pcinit 10A2                        __ramtop 0300  
                      __ptext0 072C                        __ptext1 09D8                        __ptext2 0A92  
                      __ptext3 0F9A                        __ptext4 03A8                        __ptext5 0FDA  
                      __ptext6 113C                        __ptext7 10EE                        __ptext8 0910  
                      __ptext9 1108              __end_of_init_RFID 1108               check_RFID@hexBuf 0015  
                      _initPWM 1108           waitForInput@raw_data 0014                   LCDout@number 000C  
            scanForBeacon@time 0031     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
            stop@initial_speed 0026                    ?_check_RFID 0011                 __pintcode_body 1010  
         end_of_initialization 10BA             setMotorPWM@PWMduty 0020                     ??_init_LCD 000F  
         __size_of_processRFID 004C                 ??_waitForInput 0011                  __Lmediumconst 0000  
                      int_func 1010                      _RFID_flag 0048                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0033                     _robot_mode 0043                     _returnHome 0F56  
                 _display_RFID 0F9A                      _PORTDbits 000F83                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
              ??_scanForBeacon 0033             debug@smoothed_data 003E                  moveForward@mL 0022  
                moveForward@mR 0024                 __end_of_LCDout 0DAC                      _TXSTAbits 000FAC  
                   main@motorL 0096                     main@motorR 009F           __end_of_moveBackward 0CB2  
          __size_of_check_RFID 0150                 __end_of___wmul 10EE                    _BAUDCONbits 000FAA  
        classify_data@filtered 000F            start_initialization 10A2              __size_of_ClearLCD 001A  
         __end_of_moveToBeacon 0E0C          classify_data@raw_data 000B                       ??_LCDout 000B  
        moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 1044          classify_data@smoothed 0040  
             ??_stopAndDisplay 0033                       ??___wmul 000F                scanForBeacon@mL 002B  
              scanForBeacon@mR 002D                    ?_returnHome 002B           __end_of_waitForInput 0A92  
                  __pbssCOMRAM 003C                  ??_init_sensor 000B                  __pcstackBANK0 0092  
 __size_of_InterruptHandlerLow 0054              __size_of_init_LCD 00C8                       ?_SendLCD 000D  
                     ?_SetLine 0001                      __pintcode 0008                       ?___awdiv 0011  
       __size_of_classify_data 0044             check_RFID@checksum 0026                    __pintcodelo 0018  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       ?_initPWM 000B  
                  __smallconst 0300                 __size_of_E_TOG 000E                  waitForInput@i 0016  
                    _init_RFID 10EE            stopAndDisplay@speed 002F                  ??_setMotorPWM 001B  
                ??_moveForward 0028                   ??_check_RFID 0013                 __size_of_setup 0036  
              check_RFID@byte1 0021                check_RFID@byte2 0022                check_RFID@byte3 0023  
              check_RFID@byte4 0024                check_RFID@byte5 0025            __end_of_init_sensor 1154  
               ___wmul@product 000F            __size_of_returnHome 0044                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                       i2u115_40 0EFA          __size_of_moveBackward 0082  
                     _PIR1bits 000F9E                       _RCONbits 000FD0             __end_of_check_RFID 04F8  
            ___wmul@multiplier 000B                   setMotorPWM@m 0019                   moveForward@i 0029  
             main@moving_speed 0094          __size_of_moveToBeacon 0060           _InterruptHandlerHigh 0008  
                     _ClearLCD 1122                  _movement_time 0044                     ?_init_RFID 0001  
                ??_processRFID 0004                  _classify_data 0F12                    _INTCON2bits 000FF1  
               moveBackward@mL 0022                 moveBackward@mR 0024                   _moveBackward 0C30  
          __end_of_setMotorPWM 061C            __end_of_moveForward 0D34                    check_RFID@i 0027  
                     __Hrparam 0000                  turn@max_power 0026               __size_of_SendLCD 0030  
                     __Lrparam 0000               __size_of_SetLine 002E                 scanForBeacon@i 003A  
        __size_of_waitForInput 00BA                   _moveToBeacon 0DAC               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 113C  
               ?_classify_data 000B              check_RFID@dataBuf 0011                       __ptext10 061C  
                     __ptext11 0BAE                       __ptext20 1122                       __ptext12 0E6A  
                     __ptext21 1044                       __ptext13 0F12                       __ptext30 0EC6  
                     __ptext22 0D34                       __ptext14 1074                       __ptext23 1154  
                     __ptext15 0F56                       __ptext24 0826                       __ptext16 0C30  
                     __ptext25 04F8                       __ptext17 0DAC                       __ptext26 10C8  
                     __ptext18 0CB2                       __ptext27 0B2A                       __ptext19 0E0C  
        __end_of_scanForBeacon 072C                       _init_LCD 0910                  __size_of_main 00FA  
                __size_of_stop 005C                  __size_of_turn 0082            __end_of_processRFID 0F12  
                 _waitForInput 09D8             scanForBeacon@speed 002F                       int$flags 0049  
                 ??_returnHome 0033            _InterruptHandlerLow 0018                     _LCD_String 0E0C  
        scanForBeacon@raw_data 0037                     _INTCONbits 000FF2                    ??_init_RFID 000B  
                  _setMotorPWM 04F8                    _moveForward 0CB2                       intlevel1 0000  
                     intlevel2 0000           ?_InterruptHandlerLow 0001             __end_of_returnHome 0F9A  
                   _OSCCONbits 000FD3     processRFID@position_in_buf 0042         ??_InterruptHandlerHigh 0005  
              ??_classify_data 000D               stopAndDisplay@mL 002B               stopAndDisplay@mR 002D  
              returnHome@speed 002F                    _processRFID 0EC6          ??_InterruptHandlerLow 0008  
              stopAndDisplay@i 0035                 returnHome@time 0031                   returnHome@mL 002B  
                 returnHome@mR 002D  
