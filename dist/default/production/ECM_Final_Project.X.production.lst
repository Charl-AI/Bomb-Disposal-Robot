

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 02 18:39:52 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 2.05
    51                           ; Generated 20/12/2018 GMT
    52                           ; 
    53                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4331 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     _CAP2CON	set	3938
    85  0000                     _CAP1CON	set	3939
    86  0000                     _DFLTCON	set	3936
    87  0000                     _ANSEL1	set	4025
    88  0000                     _ANSEL0	set	4024
    89  0000                     _T5CON	set	4023
    90  0000                     _IPR1bits	set	3999
    91  0000                     _PIE1bits	set	3997
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _BAUDCONbits	set	4010
    95  0000                     _SPBRGH	set	4016
    96  0000                     _SPBRG	set	4015
    97  0000                     _TRISAbits	set	3986
    98  0000                     _TRISCbits	set	3988
    99  0000                     _LATDbits	set	3980
   100  0000                     _LATCbits	set	3979
   101  0000                     _LATAbits	set	3977
   102  0000                     _LATB	set	3978
   103  0000                     _PTPERH	set	3962
   104  0000                     _PTPERL	set	3963
   105  0000                     _PWMCON1	set	3950
   106  0000                     _PWMCON0	set	3951
   107  0000                     _PTCON1	set	3966
   108  0000                     _PTCON0	set	3967
   109  0000                     _PORTDbits	set	3971
   110  0000                     _CAP1BUFL	set	3944
   111  0000                     _CAP1BUFH	set	3945
   112  0000                     _CAP2BUFL	set	3942
   113  0000                     _CAP2BUFH	set	3943
   114  0000                     _RCREG	set	4014
   115  0000                     _PIR1bits	set	3998
   116  0000                     _TRISDbits	set	3989
   117  0000                     _TRISBbits	set	3987
   118  0000                     _RCONbits	set	4048
   119  0000                     _INTCONbits	set	4082
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _OSCCON	set	4051
   122  0000                     _PDC1H	set	3958
   123  0000                     _PDC1L	set	3959
   124  0000                     _PDC0H	set	3960
   125  0000                     _PDC0L	set	3961
   126                           
   127                           	psect	smallconst
   128  000300                     __psmallconst:
   129                           	opt callstack 0
   130  000300  00                 	db	0
   131  000301                     STR_5:
   132  000301  43                 	db	67	;'C'
   133  000302  48                 	db	72	;'H'
   134  000303  45                 	db	69	;'E'
   135  000304  43                 	db	67	;'C'
   136  000305  4B                 	db	75	;'K'
   137  000306  53                 	db	83	;'S'
   138  000307  55                 	db	85	;'U'
   139  000308  4D                 	db	77	;'M'
   140  000309  20                 	db	32
   141  00030A  46                 	db	70	;'F'
   142  00030B  41                 	db	65	;'A'
   143  00030C  49                 	db	73	;'I'
   144  00030D  4C                 	db	76	;'L'
   145  00030E  45                 	db	69	;'E'
   146  00030F  44                 	db	68	;'D'
   147  000310  00                 	db	0
   148  000311                     STR_4:
   149  000311  43                 	db	67	;'C'
   150  000312  48                 	db	72	;'H'
   151  000313  45                 	db	69	;'E'
   152  000314  43                 	db	67	;'C'
   153  000315  4B                 	db	75	;'K'
   154  000316  53                 	db	83	;'S'
   155  000317  55                 	db	85	;'U'
   156  000318  4D                 	db	77	;'M'
   157  000319  20                 	db	32
   158  00031A  50                 	db	80	;'P'
   159  00031B  41                 	db	65	;'A'
   160  00031C  53                 	db	83	;'S'
   161  00031D  53                 	db	83	;'S'
   162  00031E  45                 	db	69	;'E'
   163  00031F  44                 	db	68	;'D'
   164  000320  00                 	db	0
   165  000321                     STR_3:
   166  000321  52                 	db	82	;'R'
   167  000322  45                 	db	69	;'E'
   168  000323  53                 	db	83	;'S'
   169  000324  45                 	db	69	;'E'
   170  000325  54                 	db	84	;'T'
   171  000326  54                 	db	84	;'T'
   172  000327  49                 	db	73	;'I'
   173  000328  4E                 	db	78	;'N'
   174  000329  47                 	db	71	;'G'
   175  00032A  20                 	db	32
   176  00032B  52                 	db	82	;'R'
   177  00032C  4F                 	db	79	;'O'
   178  00032D  42                 	db	66	;'B'
   179  00032E  4F                 	db	79	;'O'
   180  00032F  54                 	db	84	;'T'
   181  000330  00                 	db	0
   182  000331                     STR_2:
   183  000331  52                 	db	82	;'R'
   184  000332  49                 	db	73	;'I'
   185  000333  47                 	db	71	;'G'
   186  000334  48                 	db	72	;'H'
   187  000335  54                 	db	84	;'T'
   188  000336  20                 	db	32
   189  000337  25                 	db	37
   190  000338  75                 	db	117	;'u'
   191  000339  20                 	db	32
   192  00033A  00                 	db	0
   193  00033B                     STR_1:
   194  00033B  4C                 	db	76	;'L'
   195  00033C  45                 	db	69	;'E'
   196  00033D  46                 	db	70	;'F'
   197  00033E  54                 	db	84	;'T'
   198  00033F  20                 	db	32
   199  000340  25                 	db	37
   200  000341  75                 	db	117	;'u'
   201  000342  20                 	db	32
   202  000343  00                 	db	0
   203                           
   204                           ; #config settings
   205  000344  00                 	db	0	; dummy byte at the end
   206  0000                     
   207                           	psect	cinit
   208  001342                     __pcinit:
   209                           	opt callstack 0
   210  001342                     start_initialization:
   211                           	opt callstack 0
   212  001342                     __initialization:
   213                           	opt callstack 0
   214                           
   215                           ; Clear objects allocated to BANK0 (47 bytes)
   216  001342  EE00  F0BF         	lfsr	0,__pbssBANK0
   217  001346  0E2F               	movlw	47
   218  001348                     clear_0:
   219  001348  6AEE               	clrf	postinc0,c
   220  00134A  06E8               	decf	wreg,f,c
   221  00134C  E1FD               	bnz	clear_0
   222                           
   223                           ; Clear objects allocated to COMRAM (8 bytes)
   224  00134E  EE00  F04E         	lfsr	0,__pbssCOMRAM
   225  001352  0E08               	movlw	8
   226  001354                     clear_1:
   227  001354  6AEE               	clrf	postinc0,c
   228  001356  06E8               	decf	wreg,f,c
   229  001358  E1FD               	bnz	clear_1
   230  00135A                     end_of_initialization:
   231                           	opt callstack 0
   232  00135A                     __end_of__initialization:
   233                           	opt callstack 0
   234  00135A  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   235  00135C  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   236  00135E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   237  001360  6EF8               	movwf	tblptru,c
   238  001362  0100               	movlb	0
   239  001364  EF7A  F002         	goto	_main	;jump to C main() function
   240                           
   241                           	psect	bssCOMRAM
   242  00004E                     __pbssCOMRAM:
   243                           	opt callstack 0
   244  00004E                     _width:
   245                           	opt callstack 0
   246  00004E                     	ds	2
   247  000050                     _prec:
   248                           	opt callstack 0
   249  000050                     	ds	2
   250  000052                     _flags:
   251                           	opt callstack 0
   252  000052                     	ds	2
   253  000054                     processRFID@position_in_buf:
   254                           	opt callstack 0
   255  000054                     	ds	1
   256  000055                     _robot_mode:
   257                           	opt callstack 0
   258  000055                     	ds	1
   259                           
   260                           	psect	bssBANK0
   261  0000BF                     __pbssBANK0:
   262                           	opt callstack 0
   263  0000BF                     _nout:
   264                           	opt callstack 0
   265  0000BF                     	ds	2
   266  0000C1                     _RFID_flag:
   267                           	opt callstack 0
   268  0000C1                     	ds	1
   269  0000C2                     _dbuf:
   270                           	opt callstack 0
   271  0000C2                     	ds	32
   272  0000E2                     _RFIDbuf:
   273                           	opt callstack 0
   274  0000E2                     	ds	12
   275                           
   276                           	psect	cstackBANK0
   277  000060                     __pcstackBANK0:
   278                           	opt callstack 0
   279  000060                     vfpfcnvrt@llu:
   280                           	opt callstack 0
   281                           
   282                           ; 8 bytes @ 0x0
   283  000060                     	ds	8
   284  000068                     ?_vfprintf:
   285                           	opt callstack 0
   286  000068                     vfprintf@fp:
   287                           	opt callstack 0
   288                           
   289                           ; 2 bytes @ 0x8
   290  000068                     	ds	2
   291  00006A                     vfprintf@fmt:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0xA
   295  00006A                     	ds	2
   296  00006C                     vfprintf@ap:
   297                           	opt callstack 0
   298                           
   299                           ; 2 bytes @ 0xC
   300  00006C                     	ds	2
   301  00006E                     vfprintf@cfmt:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0xE
   305  00006E                     	ds	2
   306  000070                     ?_sprintf:
   307                           	opt callstack 0
   308  000070                     sprintf@s:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0x10
   312  000070                     	ds	2
   313  000072                     sprintf@fmt:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x12
   317  000072                     	ds	6
   318  000078                     sprintf@ap:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0x18
   322  000078                     	ds	2
   323  00007A                     sprintf@f:
   324                           	opt callstack 0
   325                           
   326                           ; 6 bytes @ 0x1A
   327  00007A                     	ds	6
   328  000080                     ??_main:
   329                           
   330                           ; 1 bytes @ 0x20
   331  000080                     	ds	2
   332  000082                     main@temp2:
   333                           	opt callstack 0
   334                           
   335                           ; 16 bytes @ 0x22
   336  000082                     	ds	16
   337  000092                     main@temp1:
   338                           	opt callstack 0
   339                           
   340                           ; 16 bytes @ 0x32
   341  000092                     	ds	17
   342  0000A3                     main@i:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x43
   346  0000A3                     	ds	2
   347  0000A5                     main@motorL:
   348                           	opt callstack 0
   349                           
   350                           ; 9 bytes @ 0x45
   351  0000A5                     	ds	9
   352  0000AE                     main@motorR:
   353                           	opt callstack 0
   354                           
   355                           ; 9 bytes @ 0x4E
   356  0000AE                     	ds	9
   357  0000B7                     main@sensorL:
   358                           	opt callstack 0
   359                           
   360                           ; 4 bytes @ 0x57
   361  0000B7                     	ds	4
   362  0000BB                     main@sensorR:
   363                           	opt callstack 0
   364                           
   365                           ; 4 bytes @ 0x5B
   366  0000BB                     	ds	4
   367                           
   368                           	psect	cstackCOMRAM
   369  000001                     __pcstackCOMRAM:
   370                           	opt callstack 0
   371  000001                     processRFID@RFIDbuf:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x0
   375  000001                     	ds	2
   376  000003                     processRFID@latestChar:
   377                           	opt callstack 0
   378                           
   379                           ; 1 bytes @ 0x2
   380  000003                     	ds	1
   381  000004                     processRFID@i:
   382                           	opt callstack 0
   383                           
   384                           ; 1 bytes @ 0x3
   385  000004                     	ds	1
   386  000005                     ??_InterruptHandlerHigh:
   387                           
   388                           ; 1 bytes @ 0x4
   389  000005                     	ds	3
   390  000008                     ??_InterruptHandlerLow:
   391                           
   392                           ; 1 bytes @ 0x7
   393  000008                     	ds	1
   394  000009                     ??_LCDout:
   395  000009                     ?_strlen:
   396                           	opt callstack 0
   397  000009                     ?___awdiv:
   398                           	opt callstack 0
   399  000009                     ?___lodiv:
   400                           	opt callstack 0
   401  000009                     ?___lomod:
   402                           	opt callstack 0
   403  000009                     initPWM@PWMperiod:
   404                           	opt callstack 0
   405  000009                     classify_data@left_smoothed:
   406                           	opt callstack 0
   407  000009                     ___awdiv@dividend:
   408                           	opt callstack 0
   409  000009                     fputc@c:
   410                           	opt callstack 0
   411  000009                     strlen@s:
   412                           	opt callstack 0
   413  000009                     ___lodiv@dividend:
   414                           	opt callstack 0
   415  000009                     ___lomod@dividend:
   416                           	opt callstack 0
   417                           
   418                           ; 8 bytes @ 0x8
   419  000009                     	ds	1
   420  00000A                     LCDout@number:
   421                           	opt callstack 0
   422                           
   423                           ; 1 bytes @ 0x9
   424  00000A                     	ds	1
   425  00000B                     SendLCD@type:
   426                           	opt callstack 0
   427  00000B                     classify_data@right_smoothed:
   428                           	opt callstack 0
   429  00000B                     ___awdiv@divisor:
   430                           	opt callstack 0
   431  00000B                     fputc@fp:
   432                           	opt callstack 0
   433  00000B                     strlen@a:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0xA
   437  00000B                     	ds	1
   438  00000C                     SendLCD@Byte:
   439                           	opt callstack 0
   440                           
   441                           ; 1 bytes @ 0xB
   442  00000C                     	ds	1
   443  00000D                     ??_init_LCD:
   444  00000D                     ??_ClearLCD:
   445  00000D                     ??_fputc:
   446  00000D                     SetLine@line:
   447                           	opt callstack 0
   448  00000D                     ___awdiv@counter:
   449                           	opt callstack 0
   450  00000D                     LCD_String@string:
   451                           	opt callstack 0
   452  00000D                     classify_data@difference:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0xC
   456  00000D                     	ds	1
   457  00000E                     ___awdiv@sign:
   458                           	opt callstack 0
   459  00000E                     display_RFID@dataBuf:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0xD
   463  00000E                     	ds	1
   464  00000F                     check_RFID@dataBuf:
   465                           	opt callstack 0
   466  00000F                     ___awdiv@quotient:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0xE
   470  00000F                     	ds	1
   471  000010                     display_RFID@i:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0xF
   475  000010                     	ds	1
   476  000011                     ??_check_RFID:
   477  000011                     ?___wmul:
   478                           	opt callstack 0
   479  000011                     ___wmul@multiplier:
   480                           	opt callstack 0
   481  000011                     ___lodiv@divisor:
   482                           	opt callstack 0
   483  000011                     ___lomod@divisor:
   484                           	opt callstack 0
   485                           
   486                           ; 8 bytes @ 0x10
   487  000011                     	ds	1
   488  000012                     fputs@s:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x11
   492  000012                     	ds	1
   493  000013                     ___wmul@multiplicand:
   494                           	opt callstack 0
   495  000013                     check_RFID@hexBuf:
   496                           	opt callstack 0
   497                           
   498                           ; 12 bytes @ 0x12
   499  000013                     	ds	1
   500  000014                     fputs@fp:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x13
   504  000014                     	ds	1
   505  000015                     ___wmul@product:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0x14
   509  000015                     	ds	1
   510  000016                     fputs@c:
   511                           	opt callstack 0
   512                           
   513                           ; 1 bytes @ 0x15
   514  000016                     	ds	1
   515  000017                     setMotorPWM@m:
   516                           	opt callstack 0
   517  000017                     process_signal@S:
   518                           	opt callstack 0
   519  000017                     fputs@i:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x16
   523  000017                     	ds	2
   524  000019                     ??_setMotorPWM:
   525  000019                     ?_pad:
   526                           	opt callstack 0
   527  000019                     ___lomod@counter:
   528                           	opt callstack 0
   529  000019                     pad@fp:
   530                           	opt callstack 0
   531  000019                     ___lodiv@quotient:
   532                           	opt callstack 0
   533                           
   534                           ; 8 bytes @ 0x18
   535  000019                     	ds	2
   536  00001B                     pad@buf:
   537                           	opt callstack 0
   538                           
   539                           ; 2 bytes @ 0x1A
   540  00001B                     	ds	2
   541  00001D                     pad@p:
   542                           	opt callstack 0
   543                           
   544                           ; 2 bytes @ 0x1C
   545  00001D                     	ds	1
   546  00001E                     setMotorPWM@PWMduty:
   547                           	opt callstack 0
   548                           
   549                           ; 2 bytes @ 0x1D
   550  00001E                     	ds	1
   551  00001F                     ??_pad:
   552  00001F                     check_RFID@byte1:
   553                           	opt callstack 0
   554                           
   555                           ; 1 bytes @ 0x1E
   556  00001F                     	ds	1
   557  000020                     check_RFID@byte2:
   558                           	opt callstack 0
   559  000020                     init_motors@mL:
   560                           	opt callstack 0
   561  000020                     pad@i:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x1F
   565  000020                     	ds	1
   566  000021                     check_RFID@byte3:
   567                           	opt callstack 0
   568  000021                     ___lodiv@counter:
   569                           	opt callstack 0
   570                           
   571                           ; 1 bytes @ 0x20
   572  000021                     	ds	1
   573  000022                     check_RFID@byte4:
   574                           	opt callstack 0
   575  000022                     init_motors@mR:
   576                           	opt callstack 0
   577  000022                     pad@w:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x21
   581  000022                     	ds	1
   582  000023                     check_RFID@byte5:
   583                           	opt callstack 0
   584                           
   585                           ; 1 bytes @ 0x22
   586  000023                     	ds	1
   587  000024                     ?_utoa:
   588                           	opt callstack 0
   589  000024                     check_RFID@checksum:
   590                           	opt callstack 0
   591  000024                     utoa@fp:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x23
   595  000024                     	ds	1
   596  000025                     check_RFID@i:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x24
   600  000025                     	ds	1
   601  000026                     utoa@d:
   602                           	opt callstack 0
   603                           
   604                           ; 8 bytes @ 0x25
   605  000026                     	ds	8
   606  00002E                     ??_utoa:
   607                           
   608                           ; 1 bytes @ 0x2D
   609  00002E                     	ds	8
   610  000036                     utoa@p:
   611                           	opt callstack 0
   612                           
   613                           ; 2 bytes @ 0x35
   614  000036                     	ds	2
   615  000038                     utoa@w:
   616                           	opt callstack 0
   617                           
   618                           ; 2 bytes @ 0x37
   619  000038                     	ds	2
   620  00003A                     utoa@n:
   621                           	opt callstack 0
   622                           
   623                           ; 8 bytes @ 0x39
   624  00003A                     	ds	8
   625  000042                     utoa@i:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x41
   629  000042                     	ds	2
   630  000044                     ?_vfpfcnvrt:
   631                           	opt callstack 0
   632  000044                     vfpfcnvrt@fp:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x43
   636  000044                     	ds	2
   637  000046                     vfpfcnvrt@fmt:
   638                           	opt callstack 0
   639                           
   640                           ; 2 bytes @ 0x45
   641  000046                     	ds	2
   642  000048                     vfpfcnvrt@ap:
   643                           	opt callstack 0
   644                           
   645                           ; 2 bytes @ 0x47
   646  000048                     	ds	2
   647  00004A                     ??_vfpfcnvrt:
   648                           
   649                           ; 1 bytes @ 0x49
   650  00004A                     	ds	4
   651  00004E                     
   652                           ; 1 bytes @ 0x4D
   653 ;;
   654 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   655 ;;
   656 ;; *************** function _main *****************
   657 ;; Defined at:
   658 ;;		line 84 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  i               2   67[BANK0 ] int 
   663 ;;  temp1          16   50[BANK0 ] unsigned char [16]
   664 ;;  temp2          16   34[BANK0 ] unsigned char [16]
   665 ;;  beacon_locat    1    0        unsigned char 
   666 ;;  motorR          9   78[BANK0 ] struct DC_motor
   667 ;;  motorL          9   69[BANK0 ] struct DC_motor
   668 ;;  sensorR         4   91[BANK0 ] struct Sensor
   669 ;;  sensorL         4   87[BANK0 ] struct Sensor
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   679 ;;      Params:         0       0       0       0
   680 ;;      Locals:         0      61       0       0
   681 ;;      Temps:          0       2       0       0
   682 ;;      Totals:         0      63       0       0
   683 ;;Total ram usage:       63 bytes
   684 ;; Hardware stack levels required when called:   11
   685 ;; This function calls:
   686 ;;		_ClearLCD
   687 ;;		_LCD_String
   688 ;;		_SetLine
   689 ;;		_check_RFID
   690 ;;		_classify_data
   691 ;;		_display_RFID
   692 ;;		_init_motors
   693 ;;		_process_signal
   694 ;;		_setup
   695 ;;		_sprintf
   696 ;; This function is called by:
   697 ;;		Startup code after reset
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text0
   702  0004F4                     __ptext0:
   703                           	opt callstack 0
   704  0004F4                     _main:
   705                           	opt callstack 20
   706                           
   707                           ;main.c: 87:   setup();
   708                           
   709                           ;incstack = 0
   710  0004F4  EC5E  F009         	call	_setup	;wreg free
   711                           
   712                           ;main.c: 90:   struct DC_motor motorL, motorR;;main.c: 91:   init_motors(&motorL, &motor
      +                          R);
   713  0004F8  0EA5               	movlw	low main@motorL
   714  0004FA  6E20               	movwf	init_motors@mL,c
   715  0004FC  0E00               	movlw	high main@motorL
   716  0004FE  6E21               	movwf	init_motors@mL+1,c
   717  000500  0EAE               	movlw	low main@motorR
   718  000502  6E22               	movwf	init_motors@mR,c
   719  000504  0E00               	movlw	high main@motorR
   720  000506  6E23               	movwf	init_motors@mR+1,c
   721  000508  EC31  F005         	call	_init_motors	;wreg free
   722  00050C  D081               	goto	l2594
   723  00050E                     l2560:
   724                           
   725                           ;main.c: 100:       {;main.c: 102:           sensorL.raw_data = (int)((CAP2BUFH << 8) | 
      +                          CAP2BUFL);
   726  00050E  5066               	movf	3942,w,c	;volatile
   727  000510  CF67 F080          	movff	3943,??_main	;volatile
   728  000514  0100               	movlb	0	; () banked
   729  000516  6B81               	clrf	(??_main+1)& (0+255),b
   730  000518  C080  F081         	movff	??_main,??_main+1
   731  00051C  6B80               	clrf	??_main& (0+255),b
   732  00051E  1180               	iorwf	??_main& (0+255),w,b
   733  000520  6FB7               	movwf	main@sensorL& (0+255),b
   734  000522  5181               	movf	(??_main+1)& (0+255),w,b
   735  000524  6FB8               	movwf	(main@sensorL+1)& (0+255),b
   736                           
   737                           ;main.c: 103:           sensorR.raw_data = (int)((CAP1BUFH << 8) | CAP1BUFL);
   738  000526  5068               	movf	3944,w,c	;volatile
   739  000528  CF69 F080          	movff	3945,??_main	;volatile
   740  00052C  6B81               	clrf	(??_main+1)& (0+255),b
   741  00052E  C080  F081         	movff	??_main,??_main+1
   742  000532  6B80               	clrf	??_main& (0+255),b
   743  000534  1180               	iorwf	??_main& (0+255),w,b
   744  000536  6FBB               	movwf	main@sensorR& (0+255),b
   745  000538  5181               	movf	(??_main+1)& (0+255),w,b
   746  00053A  6FBC               	movwf	(main@sensorR+1)& (0+255),b
   747                           
   748                           ; BSR set to: 0
   749                           ;main.c: 106:           process_signal(&sensorL);
   750  00053C  0EB7               	movlw	low main@sensorL
   751  00053E  6E17               	movwf	process_signal@S,c
   752  000540  0E00               	movlw	high main@sensorL
   753  000542  6E18               	movwf	process_signal@S+1,c
   754  000544  EC63  F007         	call	_process_signal	;wreg free
   755                           
   756                           ;main.c: 107:           process_signal(&sensorR);
   757  000548  0EBB               	movlw	low main@sensorR
   758  00054A  6E17               	movwf	process_signal@S,c
   759  00054C  0E00               	movlw	high main@sensorR
   760  00054E  6E18               	movwf	process_signal@S+1,c
   761  000550  EC63  F007         	call	_process_signal	;wreg free
   762  000554  C0B9  F009         	movff	main@sensorL+2,classify_data@left_smoothed
   763  000558  C0BA  F00A         	movff	main@sensorL+3,classify_data@left_smoothed+1
   764  00055C  C0BD  F00B         	movff	main@sensorR+2,classify_data@right_smoothed
   765  000560  C0BE  F00C         	movff	main@sensorR+3,classify_data@right_smoothed+1
   766  000564  ECF1  F008         	call	_classify_data	;wreg free
   767                           
   768                           ;main.c: 118:           ClearLCD();
   769  000568  ECF0  F009         	call	_ClearLCD	;wreg free
   770                           
   771                           ;main.c: 119:           SetLine(1);
   772  00056C  0E01               	movlw	1
   773  00056E  EC75  F009         	call	_SetLine
   774                           
   775                           ;main.c: 120:           char temp2[16];;main.c: 121:           sprintf(temp2,"LEFT %u ",
      +                          sensorL.smoothed_signal);
   776  000572  0E82               	movlw	low main@temp2
   777  000574  0100               	movlb	0	; () banked
   778  000576  6F70               	movwf	sprintf@s& (0+255),b
   779  000578  0E00               	movlw	high main@temp2
   780  00057A  6F71               	movwf	(sprintf@s+1)& (0+255),b
   781  00057C  0E3B               	movlw	low STR_1
   782  00057E  6F72               	movwf	sprintf@fmt& (0+255),b
   783  000580  0E03               	movlw	high STR_1
   784  000582  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   785  000584  C0B9  F074         	movff	main@sensorL+2,?_sprintf+4
   786  000588  C0BA  F075         	movff	main@sensorL+3,?_sprintf+5
   787  00058C  EC82  F008         	call	_sprintf	;wreg free
   788                           
   789                           ;main.c: 122:           LCD_String(temp2);
   790  000590  0E82               	movlw	low main@temp2
   791  000592  6E0D               	movwf	LCD_String@string,c
   792  000594  0E00               	movlw	high main@temp2
   793  000596  6E0E               	movwf	LCD_String@string+1,c
   794  000598  EC28  F008         	call	_LCD_String	;wreg free
   795                           
   796                           ;main.c: 123:           SetLine(2);
   797  00059C  0E02               	movlw	2
   798  00059E  EC75  F009         	call	_SetLine
   799                           
   800                           ;main.c: 124:           char temp1[16];;main.c: 125:           sprintf(temp1,"RIGHT %u "
      +                          ,sensorR.smoothed_signal);
   801  0005A2  0E92               	movlw	low main@temp1
   802  0005A4  0100               	movlb	0	; () banked
   803  0005A6  6F70               	movwf	sprintf@s& (0+255),b
   804  0005A8  0E00               	movlw	high main@temp1
   805  0005AA  6F71               	movwf	(sprintf@s+1)& (0+255),b
   806  0005AC  0E31               	movlw	low STR_2
   807  0005AE  6F72               	movwf	sprintf@fmt& (0+255),b
   808  0005B0  0E03               	movlw	high STR_2
   809  0005B2  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   810  0005B4  C0BD  F074         	movff	main@sensorR+2,?_sprintf+4
   811  0005B8  C0BE  F075         	movff	main@sensorR+3,?_sprintf+5
   812  0005BC  EC82  F008         	call	_sprintf	;wreg free
   813                           
   814                           ;main.c: 126:           LCD_String(temp1);
   815  0005C0  0E92               	movlw	low main@temp1
   816  0005C2  6E0D               	movwf	LCD_String@string,c
   817  0005C4  0E00               	movlw	high main@temp1
   818  0005C6  6E0E               	movwf	LCD_String@string+1,c
   819  0005C8  EC28  F008         	call	_LCD_String	;wreg free
   820                           
   821                           ;main.c: 127:           _delay((unsigned long)((100)*(8000000/4000.0)));
   822  0005CC  0E02               	movlw	2
   823  0005CE  0100               	movlb	0	; () banked
   824  0005D0  6F81               	movwf	(??_main+1)& (0+255),b
   825  0005D2  0E04               	movlw	4
   826  0005D4  6F80               	movwf	??_main& (0+255),b
   827  0005D6  0EBA               	movlw	186
   828  0005D8                     u2137:
   829  0005D8  2EE8               	decfsz	wreg,f,c
   830  0005DA  D7FE               	bra	u2137
   831  0005DC  2F80               	decfsz	??_main& (0+255),f,b
   832  0005DE  D7FC               	bra	u2137
   833  0005E0  2F81               	decfsz	(??_main+1)& (0+255),f,b
   834  0005E2  D7FA               	bra	u2137
   835  0005E4  F000               	nop	
   836                           
   837                           ;main.c: 131:           if(RFID_flag == 1)
   838  0005E6  0100               	movlb	0	; () banked
   839  0005E8  05C1               	decf	_RFID_flag& (0+255),w,b	;volatile
   840  0005EA  A4D8               	btfss	status,2,c
   841  0005EC  D011               	goto	l2594
   842                           
   843                           ; BSR set to: 0
   844                           ;main.c: 132:           {;main.c: 133:               display_RFID(RFIDbuf);
   845  0005EE  0EE2               	movlw	low _RFIDbuf
   846  0005F0  6E0E               	movwf	display_RFID@dataBuf,c
   847  0005F2  0E00               	movlw	high _RFIDbuf
   848  0005F4  6E0F               	movwf	display_RFID@dataBuf+1,c
   849  0005F6  ECD1  F008         	call	_display_RFID	;wreg free
   850                           
   851                           ;main.c: 134:               check_RFID(RFIDbuf);
   852  0005FA  0EE2               	movlw	low _RFIDbuf
   853  0005FC  6E0F               	movwf	check_RFID@dataBuf,c
   854  0005FE  0E00               	movlw	high _RFIDbuf
   855  000600  6E10               	movwf	check_RFID@dataBuf+1,c
   856  000602  ECF7  F003         	call	_check_RFID	;wreg free
   857                           
   858                           ;main.c: 135:               robot_mode = 1;
   859  000606  0E01               	movlw	1
   860  000608  6E55               	movwf	_robot_mode,c	;volatile
   861                           
   862                           ;main.c: 136:               RFID_flag = 0;
   863  00060A  0E00               	movlw	0
   864  00060C  0100               	movlb	0	; () banked
   865  00060E  6FC1               	movwf	_RFID_flag& (0+255),b	;volatile
   866  000610                     l2594:
   867                           
   868                           ;main.c: 99:       while(robot_mode == 0)
   869  000610  5055               	movf	_robot_mode,w,c	;volatile
   870  000612  A4D8               	btfss	status,2,c
   871  000614  D003               	goto	l2598
   872  000616  D77B               	goto	l2560
   873  000618                     l2596:
   874                           
   875                           ;main.c: 142:       {;main.c: 144:           robot_mode = 2;
   876  000618  0E02               	movlw	2
   877  00061A  6E55               	movwf	_robot_mode,c	;volatile
   878  00061C                     l2598:
   879                           
   880                           ;main.c: 141:       while(robot_mode == 1)
   881  00061C  0455               	decf	_robot_mode,w,c	;volatile
   882  00061E  A4D8               	btfss	status,2,c
   883  000620  D02C               	goto	u2110
   884  000622  D7FA               	goto	l2596
   885  000624                     l2600:
   886                           
   887                           ;main.c: 151:           {;main.c: 152:               ClearLCD();
   888  000624  ECF0  F009         	call	_ClearLCD	;wreg free
   889                           
   890                           ;main.c: 153:               LCD_String("RESETTING ROBOT");
   891  000628  0E21               	movlw	low STR_3
   892  00062A  6E0D               	movwf	LCD_String@string,c
   893  00062C  0E03               	movlw	high STR_3
   894  00062E  6E0E               	movwf	LCD_String@string+1,c
   895  000630  EC28  F008         	call	_LCD_String	;wreg free
   896                           
   897                           ;main.c: 154:               for(int i=0; i<10;i++)
   898  000634  0E00               	movlw	0
   899  000636  0100               	movlb	0	; () banked
   900  000638  6FA4               	movwf	(main@i+1)& (0+255),b
   901  00063A  0E00               	movlw	0
   902  00063C  6FA3               	movwf	main@i& (0+255),b
   903  00063E                     l2610:
   904                           
   905                           ; BSR set to: 0
   906                           ;main.c: 155:               {;main.c: 156:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   907  00063E  0E02               	movlw	2
   908  000640  0100               	movlb	0	; () banked
   909  000642  6F81               	movwf	(??_main+1)& (0+255),b
   910  000644  0E04               	movlw	4
   911  000646  6F80               	movwf	??_main& (0+255),b
   912  000648  0EBA               	movlw	186
   913  00064A                     u2147:
   914  00064A  2EE8               	decfsz	wreg,f,c
   915  00064C  D7FE               	bra	u2147
   916  00064E  2F80               	decfsz	??_main& (0+255),f,b
   917  000650  D7FC               	bra	u2147
   918  000652  2F81               	decfsz	(??_main+1)& (0+255),f,b
   919  000654  D7FA               	bra	u2147
   920  000656  F000               	nop	
   921                           
   922                           ;main.c: 157:               }
   923  000658  0100               	movlb	0	; () banked
   924  00065A  4BA3               	infsnz	main@i& (0+255),f,b
   925  00065C  2BA4               	incf	(main@i+1)& (0+255),f,b
   926  00065E  BFA4               	btfsc	(main@i+1)& (0+255),7,b
   927  000660  D7EE               	goto	l2610
   928  000662  51A4               	movf	(main@i+1)& (0+255),w,b
   929  000664  E104               	bnz	u2100
   930  000666  0E0A               	movlw	10
   931  000668  5DA3               	subwf	main@i& (0+255),w,b
   932  00066A  A0D8               	btfss	status,0,c
   933  00066C  D7E8               	goto	l2610
   934  00066E                     u2100:
   935                           
   936                           ; BSR set to: 0
   937                           ;main.c: 158:               ClearLCD();
   938  00066E  ECF0  F009         	call	_ClearLCD	;wreg free
   939                           
   940                           ;main.c: 159:               robot_mode = 0;
   941  000672  0E00               	movlw	0
   942  000674  6E55               	movwf	_robot_mode,c	;volatile
   943  000676                     l2618:
   944                           
   945                           ;main.c: 150:           while(PORTDbits.RD2 == 1)
   946  000676  B483               	btfsc	3971,2,c	;volatile
   947  000678  D7D5               	goto	l2600
   948  00067A                     u2110:
   949                           
   950                           ;main.c: 148:       while(robot_mode == 2)
   951  00067A  0E02               	movlw	2
   952  00067C  1855               	xorwf	_robot_mode,w,c	;volatile
   953  00067E  A4D8               	btfss	status,2,c
   954  000680  D7C7               	goto	l2594
   955  000682  D7F9               	goto	l2618
   956  000684                     __end_of_main:
   957                           	opt callstack 0
   958                           
   959 ;; *************** function _sprintf *****************
   960 ;; Defined at:
   961 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  s               2   16[BANK0 ] PTR unsigned char 
   964 ;;		 -> main@temp1(16), main@temp2(16), 
   965 ;;  fmt             2   18[BANK0 ] PTR const unsigned char 
   966 ;;		 -> STR_2(10), STR_1(9), 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  f               6   26[BANK0 ] struct _IO_FILE
   969 ;;  ap              2   24[BANK0 ] PTR void [1]
   970 ;;		 -> ?_sprintf(2), 
   971 ;;  ret             2    0        int 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  2   16[BANK0 ] int 
   974 ;; Registers used:
   975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   981 ;;      Params:         0       6       0       0
   982 ;;      Locals:         0      10       0       0
   983 ;;      Temps:          0       0       0       0
   984 ;;      Totals:         0      16       0       0
   985 ;;Total ram usage:       16 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:   10
   988 ;; This function calls:
   989 ;;		_vfprintf
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text1
   996  001104                     __ptext1:
   997                           	opt callstack 0
   998  001104                     _sprintf:
   999                           	opt callstack 20
  1000                           
  1001                           ;incstack = 0
  1002  001104  0E74               	movlw	low (?_sprintf+4)
  1003  001106  0100               	movlb	0	; () banked
  1004  001108  6F78               	movwf	sprintf@ap& (0+255),b
  1005  00110A  0E00               	movlw	high (?_sprintf+4)
  1006  00110C  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  1007  00110E  C070  F07A         	movff	sprintf@s,sprintf@f
  1008  001112  C071  F07B         	movff	sprintf@s+1,sprintf@f+1
  1009                           
  1010                           ; BSR set to: 0
  1011  001116  0E00               	movlw	0
  1012  001118  6F7D               	movwf	(sprintf@f+3)& (0+255),b
  1013  00111A  0E00               	movlw	0
  1014  00111C  6F7C               	movwf	(sprintf@f+2)& (0+255),b
  1015                           
  1016                           ; BSR set to: 0
  1017  00111E  0E00               	movlw	0
  1018  001120  6F7F               	movwf	(sprintf@f+5)& (0+255),b
  1019  001122  0E00               	movlw	0
  1020  001124  6F7E               	movwf	(sprintf@f+4)& (0+255),b
  1021                           
  1022                           ; BSR set to: 0
  1023  001126  0E7A               	movlw	low sprintf@f
  1024  001128  6F68               	movwf	vfprintf@fp& (0+255),b
  1025  00112A  0E00               	movlw	high sprintf@f
  1026  00112C  6F69               	movwf	(vfprintf@fp+1)& (0+255),b
  1027  00112E  C072  F06A         	movff	sprintf@fmt,vfprintf@fmt
  1028  001132  C073  F06B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1029  001136  0E78               	movlw	low sprintf@ap
  1030  001138  6F6C               	movwf	vfprintf@ap& (0+255),b
  1031  00113A  0E00               	movlw	high sprintf@ap
  1032  00113C  6F6D               	movwf	(vfprintf@ap+1)& (0+255),b
  1033  00113E  EC57  F008         	call	_vfprintf	;wreg free
  1034  001142  0100               	movlb	0	; () banked
  1035  001144  517C               	movf	(sprintf@f+2)& (0+255),w,b
  1036  001146  2570               	addwf	sprintf@s& (0+255),w,b
  1037  001148  6ED9               	movwf	fsr2l,c
  1038  00114A  517D               	movf	(sprintf@f+3)& (0+255),w,b
  1039  00114C  2171               	addwfc	(sprintf@s+1)& (0+255),w,b
  1040  00114E  6EDA               	movwf	fsr2h,c
  1041  001150  0E00               	movlw	0
  1042  001152  6EDF               	movwf	indf2,c
  1043                           
  1044                           ; BSR set to: 0
  1045  001154  0012               	return		;funcret
  1046  001156                     __end_of_sprintf:
  1047                           	opt callstack 0
  1048                           
  1049 ;; *************** function _vfprintf *****************
  1050 ;; Defined at:
  1051 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  1054 ;;		 -> sprintf@f(6), 
  1055 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  1056 ;;		 -> STR_2(10), STR_1(9), 
  1057 ;;  ap              2   12[BANK0 ] PTR PTR void 
  1058 ;;		 -> sprintf@ap(2), 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  cfmt            2   14[BANK0 ] PTR unsigned char 
  1061 ;;		 -> STR_2(10), STR_1(9), 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  2    8[BANK0 ] int 
  1064 ;; Registers used:
  1065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1071 ;;      Params:         0       6       0       0
  1072 ;;      Locals:         0       2       0       0
  1073 ;;      Temps:          0       0       0       0
  1074 ;;      Totals:         0       8       0       0
  1075 ;;Total ram usage:        8 bytes
  1076 ;; Hardware stack levels used:    1
  1077 ;; Hardware stack levels required when called:    9
  1078 ;; This function calls:
  1079 ;;		_vfpfcnvrt
  1080 ;; This function is called by:
  1081 ;;		_sprintf
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text2
  1086  0010AE                     __ptext2:
  1087                           	opt callstack 0
  1088  0010AE                     _vfprintf:
  1089                           	opt callstack 20
  1090                           
  1091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;incstack = 0
  1095  0010AE  C06A  F06E         	movff	vfprintf@fmt,vfprintf@cfmt
  1096  0010B2  C06B  F06F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1097                           
  1098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1099  0010B6  0E00               	movlw	0
  1100  0010B8  0100               	movlb	0	; () banked
  1101  0010BA  6FC0               	movwf	(_nout+1)& (0+255),b
  1102  0010BC  0E00               	movlw	0
  1103  0010BE  6FBF               	movwf	_nout& (0+255),b
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1106  0010C0  D013               	goto	l2542
  1107  0010C2                     l2540:
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1111  0010C2  C068  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1112  0010C6  C069  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1113  0010CA  0E6E               	movlw	low vfprintf@cfmt
  1114  0010CC  6E46               	movwf	vfpfcnvrt@fmt,c
  1115  0010CE  0E00               	movlw	high vfprintf@cfmt
  1116  0010D0  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1117  0010D2  C06C  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1118  0010D6  C06D  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1119  0010DA  EC42  F003         	call	_vfpfcnvrt	;wreg free
  1120  0010DE  5044               	movf	?_vfpfcnvrt,w,c
  1121  0010E0  0100               	movlb	0	; () banked
  1122  0010E2  27BF               	addwf	_nout& (0+255),f,b
  1123  0010E4  5045               	movf	?_vfpfcnvrt+1,w,c
  1124  0010E6  23C0               	addwfc	(_nout+1)& (0+255),f,b
  1125  0010E8                     l2542:
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1129  0010E8  C06E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1130  0010EC  C06F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1131  0010F0                     	if	0	;tblptru may be non-zero
  1132  0010F0                     	endif
  1133  0010F0                     	if	0	;tblptru may be non-zero
  1134  0010F0                     	endif
  1135  0010F0  0008               	tblrd		*
  1136  0010F2  50F5               	movf	tablat,w,c
  1137  0010F4  0900               	iorlw	0
  1138  0010F6  A4D8               	btfss	status,2,c
  1139  0010F8  D7E4               	goto	l2540
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1143  0010FA  C0BF  F068         	movff	_nout,?_vfprintf
  1144  0010FE  C0C0  F069         	movff	_nout+1,?_vfprintf+1
  1145                           
  1146                           ; BSR set to: 0
  1147  001102  0012               	return		;funcret
  1148  001104                     __end_of_vfprintf:
  1149                           	opt callstack 0
  1150                           
  1151 ;; *************** function _vfpfcnvrt *****************
  1152 ;; Defined at:
  1153 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1156 ;;		 -> sprintf@f(6), 
  1157 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1158 ;;		 -> vfprintf@cfmt(2), 
  1159 ;;  ap              2   71[COMRAM] PTR PTR void 
  1160 ;;		 -> sprintf@ap(2), 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  llu             8    0[BANK0 ] unsigned long long 
  1163 ;;  ll              8    0        long long 
  1164 ;;  f               4    0        long long 
  1165 ;;  vp              3    0        PTR void 
  1166 ;;  ct              3    0        unsigned char [3]
  1167 ;;  cp              3    0        PTR unsigned char 
  1168 ;;  i               2    0        int 
  1169 ;;  done            2    0        int 
  1170 ;;  c               1    0        unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  2   67[COMRAM] int 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1180 ;;      Params:         6       0       0       0
  1181 ;;      Locals:         0       8       0       0
  1182 ;;      Temps:          4       0       0       0
  1183 ;;      Totals:        10       8       0       0
  1184 ;;Total ram usage:       18 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:    8
  1187 ;; This function calls:
  1188 ;;		_fputc
  1189 ;;		_utoa
  1190 ;; This function is called by:
  1191 ;;		_vfprintf
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           	psect	text3
  1196  000684                     __ptext3:
  1197                           	opt callstack 0
  1198  000684                     _vfpfcnvrt:
  1199                           	opt callstack 20
  1200                           
  1201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;incstack = 0
  1205  000684  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1206  000688  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1207  00068C  CFDE FFF6          	movff	postinc2,tblptrl
  1208  000690  CFDD FFF7          	movff	postdec2,tblptrh
  1209  000694                     	if	0	;tblptru may be non-zero
  1210  000694                     	endif
  1211  000694                     	if	0	;tblptru may be non-zero
  1212  000694                     	endif
  1213  000694  0008               	tblrd		*
  1214  000696  50F5               	movf	tablat,w,c
  1215  000698  0A25               	xorlw	37
  1216  00069A  A4D8               	btfss	status,2,c
  1217  00069C  D08E               	goto	l2528
  1218                           
  1219                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1220  00069E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1221  0006A2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1222  0006A6  2ADE               	incf	postinc2,f,c
  1223  0006A8  0E00               	movlw	0
  1224  0006AA  22DD               	addwfc	postdec2,f,c
  1225                           
  1226                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1227  0006AC  0E00               	movlw	0
  1228  0006AE  6E4F               	movwf	_width+1,c
  1229  0006B0  0E00               	movlw	0
  1230  0006B2  6E4E               	movwf	_width,c
  1231  0006B4  C04E  F052         	movff	_width,_flags
  1232  0006B8  C04F  F053         	movff	_width+1,_flags+1
  1233                           
  1234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1235  0006BC  6850               	setf	_prec,c
  1236  0006BE  6851               	setf	_prec+1,c
  1237                           
  1238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1239  0006C0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1240  0006C4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1241  0006C8  CFDE FFF6          	movff	postinc2,tblptrl
  1242  0006CC  CFDD FFF7          	movff	postdec2,tblptrh
  1243  0006D0                     	if	0	;tblptru may be non-zero
  1244  0006D0                     	endif
  1245  0006D0                     	if	0	;tblptru may be non-zero
  1246  0006D0                     	endif
  1247  0006D0  0008               	tblrd		*
  1248  0006D2  50F5               	movf	tablat,w,c
  1249  0006D4  0A75               	xorlw	117
  1250  0006D6  A4D8               	btfss	status,2,c
  1251  0006D8  D041               	goto	l2512
  1252                           
  1253                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1254  0006DA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1255  0006DE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1256  0006E2  2ADE               	incf	postinc2,f,c
  1257  0006E4  0E00               	movlw	0
  1258  0006E6  22DD               	addwfc	postdec2,f,c
  1259                           
  1260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1261  0006E8  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1262  0006EC  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1263  0006F0  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1264  0006F4  0E02               	movlw	2
  1265  0006F6  26DE               	addwf	postinc2,f,c
  1266  0006F8  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1267  0006FC  0E00               	movlw	0
  1268  0006FE  22DD               	addwfc	postdec2,f,c
  1269  000700  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1270  000704  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1271  000708  CFDE F04C          	movff	postinc2,??_vfpfcnvrt+2
  1272  00070C  CFDD F04D          	movff	postdec2,??_vfpfcnvrt+3
  1273  000710  C04C  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1274  000714  C04D  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1275  000718  0100               	movlb	0	; () banked
  1276  00071A  6B62               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1277  00071C  6B63               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1278  00071E  6B64               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1279  000720  6B65               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1280  000722  6B66               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1281  000724  6B67               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1285  000726  C044  F024         	movff	vfpfcnvrt@fp,utoa@fp
  1286  00072A  C045  F025         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1287  00072E  C060  F026         	movff	vfpfcnvrt@llu,utoa@d
  1288  000732  C061  F027         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1289  000736  C062  F028         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1290  00073A  C063  F029         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1291  00073E  C064  F02A         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1292  000742  C065  F02B         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1293  000746  C066  F02C         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1294  00074A  C067  F02D         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1295  00074E  ECA3  F001         	call	_utoa	;wreg free
  1296  000752  C024  F044         	movff	?_utoa,?_vfpfcnvrt
  1297  000756  C025  F045         	movff	?_utoa+1,?_vfpfcnvrt+1
  1298  00075A  0012               	return	
  1299  00075C                     l2512:
  1300                           
  1301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1302  00075C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1303  000760  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1304  000764  CFDE FFF6          	movff	postinc2,tblptrl
  1305  000768  CFDD FFF7          	movff	postdec2,tblptrh
  1306  00076C                     	if	0	;tblptru may be non-zero
  1307  00076C                     	endif
  1308  00076C                     	if	0	;tblptru may be non-zero
  1309  00076C                     	endif
  1310  00076C  0008               	tblrd		*
  1311  00076E  50F5               	movf	tablat,w,c
  1312  000770  0A25               	xorlw	37
  1313  000772  A4D8               	btfss	status,2,c
  1314  000774  D016               	goto	l2522
  1315                           
  1316                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1317  000776  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1318  00077A  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1319  00077E  2ADE               	incf	postinc2,f,c
  1320  000780  0E00               	movlw	0
  1321  000782  22DD               	addwfc	postdec2,f,c
  1322                           
  1323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1324  000784  0E00               	movlw	0
  1325  000786  6E0A               	movwf	fputc@c+1,c
  1326  000788  0E25               	movlw	37
  1327  00078A  6E09               	movwf	fputc@c,c
  1328  00078C  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1329  000790  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1330  000794  ECC8  F006         	call	_fputc	;wreg free
  1331  000798                     l2518:
  1332                           
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1334  000798  0E00               	movlw	0
  1335  00079A  6E45               	movwf	?_vfpfcnvrt+1,c
  1336  00079C  0E01               	movlw	1
  1337  00079E  6E44               	movwf	?_vfpfcnvrt,c
  1338  0007A0  0012               	return	
  1339  0007A2                     l2522:
  1340                           
  1341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1342  0007A2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1343  0007A6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1344  0007AA  2ADE               	incf	postinc2,f,c
  1345  0007AC  0E00               	movlw	0
  1346  0007AE  22DD               	addwfc	postdec2,f,c
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1349  0007B0  0E00               	movlw	0
  1350  0007B2  6E45               	movwf	?_vfpfcnvrt+1,c
  1351  0007B4  0E00               	movlw	0
  1352  0007B6  6E44               	movwf	?_vfpfcnvrt,c
  1353  0007B8  0012               	return	
  1354  0007BA                     l2528:
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1357  0007BA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1358  0007BE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1359  0007C2  CFDE FFF6          	movff	postinc2,tblptrl
  1360  0007C6  CFDD FFF7          	movff	postdec2,tblptrh
  1361  0007CA                     	if	0	;tblptru may be non-zero
  1362  0007CA                     	endif
  1363  0007CA                     	if	0	;tblptru may be non-zero
  1364  0007CA                     	endif
  1365  0007CA  0008               	tblrd		*
  1366  0007CC  50F5               	movf	tablat,w,c
  1367  0007CE  6E09               	movwf	fputc@c,c
  1368  0007D0  6A0A               	clrf	fputc@c+1,c
  1369  0007D2  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1370  0007D6  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1371  0007DA  ECC8  F006         	call	_fputc	;wreg free
  1372                           
  1373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1374  0007DE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1375  0007E2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1376  0007E6  2ADE               	incf	postinc2,f,c
  1377  0007E8  0E00               	movlw	0
  1378  0007EA  22DD               	addwfc	postdec2,f,c
  1379  0007EC  D7D5               	goto	l2518
  1380  0007EE                     __end_of_vfpfcnvrt:
  1381                           	opt callstack 0
  1382                           
  1383 ;; *************** function _utoa *****************
  1384 ;; Defined at:
  1385 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
  1388 ;;		 -> sprintf@f(6), 
  1389 ;;  d               8   37[COMRAM] unsigned long long 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  n               8   57[COMRAM] unsigned long long 
  1392 ;;  i               2   65[COMRAM] int 
  1393 ;;  w               2   55[COMRAM] int 
  1394 ;;  p               2   53[COMRAM] int 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  2   35[COMRAM] int 
  1397 ;; Registers used:
  1398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1404 ;;      Params:        10       0       0       0
  1405 ;;      Locals:        14       0       0       0
  1406 ;;      Temps:          8       0       0       0
  1407 ;;      Totals:        32       0       0       0
  1408 ;;Total ram usage:       32 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    7
  1411 ;; This function calls:
  1412 ;;		___lodiv
  1413 ;;		___lomod
  1414 ;;		_pad
  1415 ;; This function is called by:
  1416 ;;		_vfpfcnvrt
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text4
  1421  000346                     __ptext4:
  1422                           	opt callstack 0
  1423  000346                     _utoa:
  1424                           	opt callstack 20
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1427                           
  1428                           ;incstack = 0
  1429  000346  AE51               	btfss	_prec+1,7,c
  1430                           
  1431                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1432  000348  9252               	bcf	_flags,1,c
  1433                           
  1434                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1435  00034A  BE51               	btfsc	_prec+1,7,c
  1436  00034C  D005               	goto	u1970
  1437  00034E  5051               	movf	_prec+1,w,c
  1438  000350  E108               	bnz	l338
  1439  000352  0450               	decf	_prec,w,c
  1440  000354  B0D8               	btfsc	status,0,c
  1441  000356  D005               	goto	l338
  1442  000358                     u1970:
  1443  000358  0E00               	movlw	0
  1444  00035A  6E37               	movwf	utoa@p+1,c
  1445  00035C  0E01               	movlw	1
  1446  00035E  6E36               	movwf	utoa@p,c
  1447  000360  D004               	goto	l340
  1448  000362                     l338:
  1449  000362  C050  F036         	movff	_prec,utoa@p
  1450  000366  C051  F037         	movff	_prec+1,utoa@p+1
  1451  00036A                     l340:
  1452                           
  1453                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1454  00036A  C04E  F038         	movff	_width,utoa@w
  1455  00036E  C04F  F039         	movff	_width+1,utoa@w+1
  1456                           
  1457                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1458  000372  C026  F03A         	movff	utoa@d,utoa@n
  1459  000376  C027  F03B         	movff	utoa@d+1,utoa@n+1
  1460  00037A  C028  F03C         	movff	utoa@d+2,utoa@n+2
  1461  00037E  C029  F03D         	movff	utoa@d+3,utoa@n+3
  1462  000382  C02A  F03E         	movff	utoa@d+4,utoa@n+4
  1463  000386  C02B  F03F         	movff	utoa@d+5,utoa@n+5
  1464  00038A  C02C  F040         	movff	utoa@d+6,utoa@n+6
  1465  00038E  C02D  F041         	movff	utoa@d+7,utoa@n+7
  1466                           
  1467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1468  000392  0E00               	movlw	0
  1469  000394  6E43               	movwf	utoa@i+1,c
  1470  000396  0E1F               	movlw	31
  1471  000398  6E42               	movwf	utoa@i,c
  1472                           
  1473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1474  00039A  0E00               	movlw	0
  1475  00039C  0100               	movlb	0	; () banked
  1476  00039E  6FE1               	movwf	(_dbuf+31)& (0+255),b
  1477                           
  1478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1479  0003A0  D076               	goto	l2482
  1480  0003A2                     l2472:
  1481                           
  1482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1483  0003A2  0642               	decf	utoa@i,f,c
  1484  0003A4  A0D8               	btfss	status,0,c
  1485  0003A6  0643               	decf	utoa@i+1,f,c
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1488  0003A8  0EC2               	movlw	low _dbuf
  1489  0003AA  2442               	addwf	utoa@i,w,c
  1490  0003AC  6ED9               	movwf	fsr2l,c
  1491  0003AE  0E00               	movlw	high _dbuf
  1492  0003B0  2043               	addwfc	utoa@i+1,w,c
  1493  0003B2  6EDA               	movwf	fsr2h,c
  1494  0003B4  C03A  F009         	movff	utoa@n,___lomod@dividend
  1495  0003B8  C03B  F00A         	movff	utoa@n+1,___lomod@dividend+1
  1496  0003BC  C03C  F00B         	movff	utoa@n+2,___lomod@dividend+2
  1497  0003C0  C03D  F00C         	movff	utoa@n+3,___lomod@dividend+3
  1498  0003C4  C03E  F00D         	movff	utoa@n+4,___lomod@dividend+4
  1499  0003C8  C03F  F00E         	movff	utoa@n+5,___lomod@dividend+5
  1500  0003CC  C040  F00F         	movff	utoa@n+6,___lomod@dividend+6
  1501  0003D0  C041  F010         	movff	utoa@n+7,___lomod@dividend+7
  1502  0003D4  0E0A               	movlw	10
  1503  0003D6  6E11               	movwf	___lomod@divisor,c
  1504  0003D8  0E00               	movlw	0
  1505  0003DA  6E12               	movwf	___lomod@divisor+1,c
  1506  0003DC  0E00               	movlw	0
  1507  0003DE  6E13               	movwf	___lomod@divisor+2,c
  1508  0003E0  0E00               	movlw	0
  1509  0003E2  6E14               	movwf	___lomod@divisor+3,c
  1510  0003E4  0E00               	movlw	0
  1511  0003E6  6E15               	movwf	___lomod@divisor+4,c
  1512  0003E8  0E00               	movlw	0
  1513  0003EA  6E16               	movwf	___lomod@divisor+5,c
  1514  0003EC  0E00               	movlw	0
  1515  0003EE  6E17               	movwf	___lomod@divisor+6,c
  1516  0003F0  0E00               	movlw	0
  1517  0003F2  6E18               	movwf	___lomod@divisor+7,c
  1518  0003F4  EC71  F006         	call	___lomod	;wreg free
  1519  0003F8  C009  F02E         	movff	?___lomod,??_utoa
  1520  0003FC  C00A  F02F         	movff	?___lomod+1,??_utoa+1
  1521  000400  C00B  F030         	movff	?___lomod+2,??_utoa+2
  1522  000404  C00C  F031         	movff	?___lomod+3,??_utoa+3
  1523  000408  C00D  F032         	movff	?___lomod+4,??_utoa+4
  1524  00040C  C00E  F033         	movff	?___lomod+5,??_utoa+5
  1525  000410  C00F  F034         	movff	?___lomod+6,??_utoa+6
  1526  000414  C010  F035         	movff	?___lomod+7,??_utoa+7
  1527  000418  502E               	movf	??_utoa,w,c
  1528  00041A  0F30               	addlw	48
  1529  00041C  6EDF               	movwf	indf2,c
  1530                           
  1531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1532  00041E  0636               	decf	utoa@p,f,c
  1533  000420  A0D8               	btfss	status,0,c
  1534  000422  0637               	decf	utoa@p+1,f,c
  1535                           
  1536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1537  000424  0638               	decf	utoa@w,f,c
  1538  000426  A0D8               	btfss	status,0,c
  1539  000428  0639               	decf	utoa@w+1,f,c
  1540                           
  1541                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1542  00042A  C03A  F009         	movff	utoa@n,___lodiv@dividend
  1543  00042E  C03B  F00A         	movff	utoa@n+1,___lodiv@dividend+1
  1544  000432  C03C  F00B         	movff	utoa@n+2,___lodiv@dividend+2
  1545  000436  C03D  F00C         	movff	utoa@n+3,___lodiv@dividend+3
  1546  00043A  C03E  F00D         	movff	utoa@n+4,___lodiv@dividend+4
  1547  00043E  C03F  F00E         	movff	utoa@n+5,___lodiv@dividend+5
  1548  000442  C040  F00F         	movff	utoa@n+6,___lodiv@dividend+6
  1549  000446  C041  F010         	movff	utoa@n+7,___lodiv@dividend+7
  1550  00044A  0E0A               	movlw	10
  1551  00044C  6E11               	movwf	___lodiv@divisor,c
  1552  00044E  0E00               	movlw	0
  1553  000450  6E12               	movwf	___lodiv@divisor+1,c
  1554  000452  0E00               	movlw	0
  1555  000454  6E13               	movwf	___lodiv@divisor+2,c
  1556  000456  0E00               	movlw	0
  1557  000458  6E14               	movwf	___lodiv@divisor+3,c
  1558  00045A  0E00               	movlw	0
  1559  00045C  6E15               	movwf	___lodiv@divisor+4,c
  1560  00045E  0E00               	movlw	0
  1561  000460  6E16               	movwf	___lodiv@divisor+5,c
  1562  000462  0E00               	movlw	0
  1563  000464  6E17               	movwf	___lodiv@divisor+6,c
  1564  000466  0E00               	movlw	0
  1565  000468  6E18               	movwf	___lodiv@divisor+7,c
  1566  00046A  ECA6  F005         	call	___lodiv	;wreg free
  1567  00046E  C009  F03A         	movff	?___lodiv,utoa@n
  1568  000472  C00A  F03B         	movff	?___lodiv+1,utoa@n+1
  1569  000476  C00B  F03C         	movff	?___lodiv+2,utoa@n+2
  1570  00047A  C00C  F03D         	movff	?___lodiv+3,utoa@n+3
  1571  00047E  C00D  F03E         	movff	?___lodiv+4,utoa@n+4
  1572  000482  C00E  F03F         	movff	?___lodiv+5,utoa@n+5
  1573  000486  C00F  F040         	movff	?___lodiv+6,utoa@n+6
  1574  00048A  C010  F041         	movff	?___lodiv+7,utoa@n+7
  1575  00048E                     l2482:
  1576                           
  1577                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1578  00048E  5042               	movf	utoa@i,w,c
  1579  000490  1043               	iorwf	utoa@i+1,w,c
  1580  000492  B4D8               	btfsc	status,2,c
  1581  000494  D01A               	goto	u2020
  1582  000496  503A               	movf	utoa@n,w,c
  1583  000498  103B               	iorwf	utoa@n+1,w,c
  1584  00049A  103C               	iorwf	utoa@n+2,w,c
  1585  00049C  103D               	iorwf	utoa@n+3,w,c
  1586  00049E  103E               	iorwf	utoa@n+4,w,c
  1587  0004A0  103F               	iorwf	utoa@n+5,w,c
  1588  0004A2  1040               	iorwf	utoa@n+6,w,c
  1589  0004A4  1041               	iorwf	utoa@n+7,w,c
  1590  0004A6  A4D8               	btfss	status,2,c
  1591  0004A8  D77C               	goto	l2472
  1592  0004AA  BE37               	btfsc	utoa@p+1,7,c
  1593  0004AC  D005               	goto	u2000
  1594  0004AE  5037               	movf	utoa@p+1,w,c
  1595  0004B0  E102               	bnz	u2001
  1596  0004B2  0436               	decf	utoa@p,w,c
  1597  0004B4  B0D8               	btfsc	status,0,c
  1598  0004B6                     u2001:
  1599  0004B6  D775               	goto	l2472
  1600  0004B8                     u2000:
  1601  0004B8  BE39               	btfsc	utoa@w+1,7,c
  1602  0004BA  D007               	goto	u2020
  1603  0004BC  5039               	movf	utoa@w+1,w,c
  1604  0004BE  E103               	bnz	u2010
  1605  0004C0  0438               	decf	utoa@w,w,c
  1606  0004C2  A0D8               	btfss	status,0,c
  1607  0004C4  D002               	goto	u2020
  1608  0004C6                     u2010:
  1609  0004C6  B252               	btfsc	_flags,1,c
  1610  0004C8  D76C               	goto	l2472
  1611  0004CA                     u2020:
  1612                           
  1613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1614  0004CA  C024  F019         	movff	utoa@fp,pad@fp
  1615  0004CE  C025  F01A         	movff	utoa@fp+1,pad@fp+1
  1616  0004D2  0EC2               	movlw	low _dbuf
  1617  0004D4  2442               	addwf	utoa@i,w,c
  1618  0004D6  6E1B               	movwf	pad@buf,c
  1619  0004D8  0E00               	movlw	high _dbuf
  1620  0004DA  2043               	addwfc	utoa@i+1,w,c
  1621  0004DC  6E1C               	movwf	pad@buf+1,c
  1622  0004DE  C038  F01D         	movff	utoa@w,pad@p
  1623  0004E2  C039  F01E         	movff	utoa@w+1,pad@p+1
  1624  0004E6  EC18  F007         	call	_pad	;wreg free
  1625  0004EA  C019  F024         	movff	?_pad,?_utoa
  1626  0004EE  C01A  F025         	movff	?_pad+1,?_utoa+1
  1627  0004F2  0012               	return		;funcret
  1628  0004F4                     __end_of_utoa:
  1629                           	opt callstack 0
  1630                           
  1631 ;; *************** function _pad *****************
  1632 ;; Defined at:
  1633 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
  1636 ;;		 -> sprintf@f(6), 
  1637 ;;  buf             2   26[COMRAM] PTR unsigned char 
  1638 ;;		 -> dbuf(32), 
  1639 ;;  p               2   28[COMRAM] int 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;  w               2   33[COMRAM] int 
  1642 ;;  i               2   31[COMRAM] int 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  2   24[COMRAM] int 
  1645 ;; Registers used:
  1646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1652 ;;      Params:         6       0       0       0
  1653 ;;      Locals:         4       0       0       0
  1654 ;;      Temps:          1       0       0       0
  1655 ;;      Totals:        11       0       0       0
  1656 ;;Total ram usage:       11 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    6
  1659 ;; This function calls:
  1660 ;;		_fputc
  1661 ;;		_fputs
  1662 ;;		_strlen
  1663 ;; This function is called by:
  1664 ;;		_utoa
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text5
  1669  000E30                     __ptext5:
  1670                           	opt callstack 0
  1671  000E30                     _pad:
  1672                           	opt callstack 20
  1673                           
  1674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1675                           
  1676                           ;incstack = 0
  1677  000E30  A052               	btfss	_flags,0,c
  1678  000E32  D00A               	goto	l2404
  1679                           
  1680                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1681  000E34  C01B  F012         	movff	pad@buf,fputs@s
  1682  000E38  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1683  000E3C  C019  F014         	movff	pad@fp,fputs@fp
  1684  000E40  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1685  000E44  EC0F  F009         	call	_fputs	;wreg free
  1686  000E48                     l2404:
  1687                           
  1688                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1689  000E48  BE1E               	btfsc	pad@p+1,7,c
  1690  000E4A  D005               	goto	l2408
  1691  000E4C  C01D  F022         	movff	pad@p,pad@w
  1692  000E50  C01E  F023         	movff	pad@p+1,pad@w+1
  1693  000E54  D004               	goto	l328
  1694  000E56                     l2408:
  1695  000E56  0E00               	movlw	0
  1696  000E58  6E23               	movwf	pad@w+1,c
  1697  000E5A  0E00               	movlw	0
  1698  000E5C  6E22               	movwf	pad@w,c
  1699  000E5E                     l328:
  1700                           
  1701                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1702  000E5E  0E00               	movlw	0
  1703  000E60  6E21               	movwf	pad@i+1,c
  1704  000E62  0E00               	movlw	0
  1705  000E64  6E20               	movwf	pad@i,c
  1706                           
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1708  000E66  D00C               	goto	l2414
  1709  000E68                     l2410:
  1710                           
  1711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1712  000E68  0E00               	movlw	0
  1713  000E6A  6E0A               	movwf	fputc@c+1,c
  1714  000E6C  0E20               	movlw	32
  1715  000E6E  6E09               	movwf	fputc@c,c
  1716  000E70  C019  F00B         	movff	pad@fp,fputc@fp
  1717  000E74  C01A  F00C         	movff	pad@fp+1,fputc@fp+1
  1718  000E78  ECC8  F006         	call	_fputc	;wreg free
  1719                           
  1720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1721  000E7C  4A20               	infsnz	pad@i,f,c
  1722  000E7E  2A21               	incf	pad@i+1,f,c
  1723  000E80                     l2414:
  1724                           
  1725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1726  000E80  5022               	movf	pad@w,w,c
  1727  000E82  5C20               	subwf	pad@i,w,c
  1728  000E84  5021               	movf	pad@i+1,w,c
  1729  000E86  0A80               	xorlw	128
  1730  000E88  6E1F               	movwf	??_pad& (0+255),c
  1731  000E8A  5023               	movf	pad@w+1,w,c
  1732  000E8C  0A80               	xorlw	128
  1733  000E8E  581F               	subwfb	??_pad& (0+255),w,c
  1734  000E90  A0D8               	btfss	status,0,c
  1735  000E92  D7EA               	goto	l2410
  1736                           
  1737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1738  000E94  B052               	btfsc	_flags,0,c
  1739  000E96  D00A               	goto	l2418
  1740                           
  1741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1742  000E98  C01B  F012         	movff	pad@buf,fputs@s
  1743  000E9C  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1744  000EA0  C019  F014         	movff	pad@fp,fputs@fp
  1745  000EA4  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1746  000EA8  EC0F  F009         	call	_fputs	;wreg free
  1747  000EAC                     l2418:
  1748                           
  1749                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1750  000EAC  C01B  F009         	movff	pad@buf,strlen@s
  1751  000EB0  C01C  F00A         	movff	pad@buf+1,strlen@s+1
  1752  000EB4  EC8C  F009         	call	_strlen	;wreg free
  1753  000EB8  5022               	movf	pad@w,w,c
  1754  000EBA  2409               	addwf	?_strlen,w,c
  1755  000EBC  6E19               	movwf	?_pad,c
  1756  000EBE  5023               	movf	pad@w+1,w,c
  1757  000EC0  200A               	addwfc	?_strlen+1,w,c
  1758  000EC2  6E1A               	movwf	?_pad+1,c
  1759  000EC4  0012               	return		;funcret
  1760  000EC6                     __end_of_pad:
  1761                           	opt callstack 0
  1762                           
  1763 ;; *************** function _strlen *****************
  1764 ;; Defined at:
  1765 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1768 ;;		 -> dbuf(32), 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  a               2   10[COMRAM] PTR const unsigned char 
  1771 ;;		 -> dbuf(32), 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  2    8[COMRAM] unsigned int 
  1774 ;; Registers used:
  1775 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1781 ;;      Params:         2       0       0       0
  1782 ;;      Locals:         2       0       0       0
  1783 ;;      Temps:          0       0       0       0
  1784 ;;      Totals:         4       0       0       0
  1785 ;;Total ram usage:        4 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_pad
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text6
  1796  001318                     __ptext6:
  1797                           	opt callstack 0
  1798  001318                     _strlen:
  1799                           	opt callstack 22
  1800                           
  1801                           ;incstack = 0
  1802  001318  C009  F00B         	movff	strlen@s,strlen@a
  1803  00131C  C00A  F00C         	movff	strlen@s+1,strlen@a+1
  1804  001320  D002               	goto	l2394
  1805  001322                     l2392:
  1806  001322  4A09               	infsnz	strlen@s,f,c
  1807  001324  2A0A               	incf	strlen@s+1,f,c
  1808  001326                     l2394:
  1809  001326  C009  FFD9         	movff	strlen@s,fsr2l
  1810  00132A  C00A  FFDA         	movff	strlen@s+1,fsr2h
  1811  00132E  50DF               	movf	indf2,w,c
  1812  001330  A4D8               	btfss	status,2,c
  1813  001332  D7F7               	goto	l2392
  1814  001334  500B               	movf	strlen@a,w,c
  1815  001336  5C09               	subwf	strlen@s,w,c
  1816  001338  6E09               	movwf	?_strlen,c
  1817  00133A  500C               	movf	strlen@a+1,w,c
  1818  00133C  580A               	subwfb	strlen@s+1,w,c
  1819  00133E  6E0A               	movwf	?_strlen+1,c
  1820  001340  0012               	return		;funcret
  1821  001342                     __end_of_strlen:
  1822                           	opt callstack 0
  1823                           
  1824 ;; *************** function _fputs *****************
  1825 ;; Defined at:
  1826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  s               2   17[COMRAM] PTR const unsigned char 
  1829 ;;		 -> dbuf(32), 
  1830 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1831 ;;		 -> sprintf@f(6), 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  i               2   22[COMRAM] int 
  1834 ;;  c               1   21[COMRAM] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  2   17[COMRAM] int 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1844 ;;      Params:         4       0       0       0
  1845 ;;      Locals:         3       0       0       0
  1846 ;;      Temps:          0       0       0       0
  1847 ;;      Totals:         7       0       0       0
  1848 ;;Total ram usage:        7 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    5
  1851 ;; This function calls:
  1852 ;;		_fputc
  1853 ;; This function is called by:
  1854 ;;		_pad
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text7
  1859  00121E                     __ptext7:
  1860                           	opt callstack 0
  1861  00121E                     _fputs:
  1862                           	opt callstack 20
  1863                           
  1864                           ;incstack = 0
  1865  00121E  0E00               	movlw	0
  1866  001220  6E18               	movwf	fputs@i+1,c
  1867  001222  0E00               	movlw	0
  1868  001224  6E17               	movwf	fputs@i,c
  1869  001226  D00B               	goto	l2388
  1870  001228                     l2384:
  1871  001228  C016  F009         	movff	fputs@c,fputc@c
  1872  00122C  6A0A               	clrf	fputc@c+1,c
  1873  00122E  C014  F00B         	movff	fputs@fp,fputc@fp
  1874  001232  C015  F00C         	movff	fputs@fp+1,fputc@fp+1
  1875  001236  ECC8  F006         	call	_fputc	;wreg free
  1876  00123A  4A17               	infsnz	fputs@i,f,c
  1877  00123C  2A18               	incf	fputs@i+1,f,c
  1878  00123E                     l2388:
  1879  00123E  5017               	movf	fputs@i,w,c
  1880  001240  2412               	addwf	fputs@s,w,c
  1881  001242  6ED9               	movwf	fsr2l,c
  1882  001244  5018               	movf	fputs@i+1,w,c
  1883  001246  2013               	addwfc	fputs@s+1,w,c
  1884  001248  6EDA               	movwf	fsr2h,c
  1885  00124A  50DF               	movf	indf2,w,c
  1886  00124C  6E16               	movwf	fputs@c,c
  1887  00124E  5016               	movf	fputs@c,w,c
  1888  001250  B4D8               	btfsc	status,2,c
  1889  001252  0012               	return	
  1890  001254  D7E9               	goto	l2384
  1891  001256                     __end_of_fputs:
  1892                           	opt callstack 0
  1893                           
  1894 ;; *************** function _fputc *****************
  1895 ;; Defined at:
  1896 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  c               2    8[COMRAM] int 
  1899 ;;  fp              2   10[COMRAM] PTR struct _IO_FILE
  1900 ;;		 -> sprintf@f(6), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  2    8[COMRAM] int 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1912 ;;      Params:         4       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          5       0       0       0
  1915 ;;      Totals:         9       0       0       0
  1916 ;;Total ram usage:        9 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    4
  1919 ;; This function calls:
  1920 ;;		_putch
  1921 ;; This function is called by:
  1922 ;;		_pad
  1923 ;;		_vfpfcnvrt
  1924 ;;		_fputs
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text8
  1929  000D90                     __ptext8:
  1930                           	opt callstack 0
  1931  000D90                     _fputc:
  1932                           	opt callstack 20
  1933                           
  1934                           ;incstack = 0
  1935  000D90  500B               	movf	fputc@fp,w,c
  1936  000D92  100C               	iorwf	fputc@fp+1,w,c
  1937  000D94  B4D8               	btfsc	status,2,c
  1938  000D96  D004               	goto	u1800
  1939  000D98  500B               	movf	fputc@fp,w,c
  1940  000D9A  100C               	iorwf	fputc@fp+1,w,c
  1941  000D9C  A4D8               	btfss	status,2,c
  1942  000D9E  D004               	goto	l2374
  1943  000DA0                     u1800:
  1944  000DA0  5009               	movf	fputc@c,w,c
  1945  000DA2  EC04  F00A         	call	_putch
  1946  000DA6  0012               	return	
  1947  000DA8                     l2374:
  1948  000DA8  EE20 F004          	lfsr	2,4
  1949  000DAC  500B               	movf	fputc@fp,w,c
  1950  000DAE  26D9               	addwf	fsr2l,f,c
  1951  000DB0  500C               	movf	fputc@fp+1,w,c
  1952  000DB2  22DA               	addwfc	fsr2h,f,c
  1953  000DB4  50DE               	movf	postinc2,w,c
  1954  000DB6  10DE               	iorwf	postinc2,w,c
  1955  000DB8  B4D8               	btfsc	status,2,c
  1956  000DBA  D016               	goto	u1820
  1957  000DBC  EE20 F004          	lfsr	2,4
  1958  000DC0  500B               	movf	fputc@fp,w,c
  1959  000DC2  26D9               	addwf	fsr2l,f,c
  1960  000DC4  500C               	movf	fputc@fp+1,w,c
  1961  000DC6  22DA               	addwfc	fsr2h,f,c
  1962  000DC8  EE10 F002          	lfsr	1,2
  1963  000DCC  500B               	movf	fputc@fp,w,c
  1964  000DCE  26E1               	addwf	fsr1l,f,c
  1965  000DD0  500C               	movf	fputc@fp+1,w,c
  1966  000DD2  22E2               	addwfc	fsr1h,f,c
  1967  000DD4  50DE               	movf	postinc2,w,c
  1968  000DD6  5CE6               	subwf	postinc1,w,c
  1969  000DD8  50E6               	movf	postinc1,w,c
  1970  000DDA  0A80               	xorlw	128
  1971  000DDC  6E11               	movwf	(??_fputc+4)& (0+255),c
  1972  000DDE  50DE               	movf	postinc2,w,c
  1973  000DE0  0A80               	xorlw	128
  1974  000DE2  5811               	subwfb	(??_fputc+4)& (0+255),w,c
  1975  000DE4  B0D8               	btfsc	status,0,c
  1976  000DE6  0012               	return	
  1977  000DE8                     u1820:
  1978  000DE8  EE20 F002          	lfsr	2,2
  1979  000DEC  500B               	movf	fputc@fp,w,c
  1980  000DEE  26D9               	addwf	fsr2l,f,c
  1981  000DF0  500C               	movf	fputc@fp+1,w,c
  1982  000DF2  22DA               	addwfc	fsr2h,f,c
  1983  000DF4  CFDE F00D          	movff	postinc2,??_fputc
  1984  000DF8  CFDD F00E          	movff	postdec2,??_fputc+1
  1985  000DFC  C00B  FFD9         	movff	fputc@fp,fsr2l
  1986  000E00  C00C  FFDA         	movff	fputc@fp+1,fsr2h
  1987  000E04  CFDE F00F          	movff	postinc2,??_fputc+2
  1988  000E08  CFDD F010          	movff	postdec2,??_fputc+3
  1989  000E0C  500D               	movf	??_fputc,w,c
  1990  000E0E  240F               	addwf	??_fputc+2,w,c
  1991  000E10  6ED9               	movwf	fsr2l,c
  1992  000E12  500E               	movf	??_fputc+1,w,c
  1993  000E14  2010               	addwfc	??_fputc+3,w,c
  1994  000E16  6EDA               	movwf	fsr2h,c
  1995  000E18  C009  FFDF         	movff	fputc@c,indf2
  1996  000E1C  EE20 F002          	lfsr	2,2
  1997  000E20  500B               	movf	fputc@fp,w,c
  1998  000E22  26D9               	addwf	fsr2l,f,c
  1999  000E24  500C               	movf	fputc@fp+1,w,c
  2000  000E26  22DA               	addwfc	fsr2h,f,c
  2001  000E28  2ADE               	incf	postinc2,f,c
  2002  000E2A  0E00               	movlw	0
  2003  000E2C  22DD               	addwfc	postdec2,f,c
  2004  000E2E  0012               	return		;funcret
  2005  000E30                     __end_of_fputc:
  2006                           	opt callstack 0
  2007                           
  2008 ;; *************** function _putch *****************
  2009 ;; Defined at:
  2010 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  c               1    wreg     unsigned char 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  c               1    0[COMRAM] unsigned char 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      void 
  2017 ;; Registers used:
  2018 ;;		wreg
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2024 ;;      Params:         0       0       0       0
  2025 ;;      Locals:         0       0       0       0
  2026 ;;      Temps:          0       0       0       0
  2027 ;;      Totals:         0       0       0       0
  2028 ;;Total ram usage:        0 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    3
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_fputc
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text9
  2039  001408                     __ptext9:
  2040                           	opt callstack 0
  2041  001408                     _putch:
  2042                           	opt callstack 20
  2043                           
  2044                           ;incstack = 0
  2045  001408  0012               	return		;funcret
  2046  00140A                     __end_of_putch:
  2047                           	opt callstack 0
  2048                           
  2049 ;; *************** function ___lomod *****************
  2050 ;; Defined at:
  2051 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  dividend        8    8[COMRAM] unsigned long long 
  2054 ;;  divisor         8   16[COMRAM] unsigned long long 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  counter         1   24[COMRAM] unsigned char 
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  8    8[COMRAM] unsigned long long 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2066 ;;      Params:        16       0       0       0
  2067 ;;      Locals:         1       0       0       0
  2068 ;;      Temps:          0       0       0       0
  2069 ;;      Totals:        17       0       0       0
  2070 ;;Total ram usage:       17 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    3
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_utoa
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text10
  2081  000CE2                     __ptext10:
  2082                           	opt callstack 0
  2083  000CE2                     ___lomod:
  2084                           	opt callstack 23
  2085                           
  2086                           ;incstack = 0
  2087  000CE2  5011               	movf	___lomod@divisor,w,c
  2088  000CE4  1012               	iorwf	___lomod@divisor+1,w,c
  2089  000CE6  1013               	iorwf	___lomod@divisor+2,w,c
  2090  000CE8  1014               	iorwf	___lomod@divisor+3,w,c
  2091  000CEA  1015               	iorwf	___lomod@divisor+4,w,c
  2092  000CEC  1016               	iorwf	___lomod@divisor+5,w,c
  2093  000CEE  1017               	iorwf	___lomod@divisor+6,w,c
  2094  000CF0  1018               	iorwf	___lomod@divisor+7,w,c
  2095  000CF2  B4D8               	btfsc	status,2,c
  2096  000CF4  D03C               	goto	l811
  2097  000CF6  0E01               	movlw	1
  2098  000CF8  6E19               	movwf	___lomod@counter,c
  2099  000CFA  D00A               	goto	l2450
  2100  000CFC                     l2448:
  2101  000CFC  90D8               	bcf	status,0,c
  2102  000CFE  3611               	rlcf	___lomod@divisor,f,c
  2103  000D00  3612               	rlcf	___lomod@divisor+1,f,c
  2104  000D02  3613               	rlcf	___lomod@divisor+2,f,c
  2105  000D04  3614               	rlcf	___lomod@divisor+3,f,c
  2106  000D06  3615               	rlcf	___lomod@divisor+4,f,c
  2107  000D08  3616               	rlcf	___lomod@divisor+5,f,c
  2108  000D0A  3617               	rlcf	___lomod@divisor+6,f,c
  2109  000D0C  3618               	rlcf	___lomod@divisor+7,f,c
  2110  000D0E  2A19               	incf	___lomod@counter,f,c
  2111  000D10                     l2450:
  2112  000D10  AE18               	btfss	___lomod@divisor+7,7,c
  2113  000D12  D7F4               	goto	l2448
  2114  000D14                     u1940:
  2115  000D14  5011               	movf	___lomod@divisor,w,c
  2116  000D16  5C09               	subwf	___lomod@dividend,w,c
  2117  000D18  5012               	movf	___lomod@divisor+1,w,c
  2118  000D1A  580A               	subwfb	___lomod@dividend+1,w,c
  2119  000D1C  5013               	movf	___lomod@divisor+2,w,c
  2120  000D1E  580B               	subwfb	___lomod@dividend+2,w,c
  2121  000D20  5014               	movf	___lomod@divisor+3,w,c
  2122  000D22  580C               	subwfb	___lomod@dividend+3,w,c
  2123  000D24  5015               	movf	___lomod@divisor+4,w,c
  2124  000D26  580D               	subwfb	___lomod@dividend+4,w,c
  2125  000D28  5016               	movf	___lomod@divisor+5,w,c
  2126  000D2A  580E               	subwfb	___lomod@dividend+5,w,c
  2127  000D2C  5017               	movf	___lomod@divisor+6,w,c
  2128  000D2E  580F               	subwfb	___lomod@dividend+6,w,c
  2129  000D30  5018               	movf	___lomod@divisor+7,w,c
  2130  000D32  5810               	subwfb	___lomod@dividend+7,w,c
  2131  000D34  A0D8               	btfss	status,0,c
  2132  000D36  D010               	goto	l2456
  2133  000D38  5011               	movf	___lomod@divisor,w,c
  2134  000D3A  5E09               	subwf	___lomod@dividend,f,c
  2135  000D3C  5012               	movf	___lomod@divisor+1,w,c
  2136  000D3E  5A0A               	subwfb	___lomod@dividend+1,f,c
  2137  000D40  5013               	movf	___lomod@divisor+2,w,c
  2138  000D42  5A0B               	subwfb	___lomod@dividend+2,f,c
  2139  000D44  5014               	movf	___lomod@divisor+3,w,c
  2140  000D46  5A0C               	subwfb	___lomod@dividend+3,f,c
  2141  000D48  5015               	movf	___lomod@divisor+4,w,c
  2142  000D4A  5A0D               	subwfb	___lomod@dividend+4,f,c
  2143  000D4C  5016               	movf	___lomod@divisor+5,w,c
  2144  000D4E  5A0E               	subwfb	___lomod@dividend+5,f,c
  2145  000D50  5017               	movf	___lomod@divisor+6,w,c
  2146  000D52  5A0F               	subwfb	___lomod@dividend+6,f,c
  2147  000D54  5018               	movf	___lomod@divisor+7,w,c
  2148  000D56  5A10               	subwfb	___lomod@dividend+7,f,c
  2149  000D58                     l2456:
  2150  000D58  90D8               	bcf	status,0,c
  2151  000D5A  3218               	rrcf	___lomod@divisor+7,f,c
  2152  000D5C  3217               	rrcf	___lomod@divisor+6,f,c
  2153  000D5E  3216               	rrcf	___lomod@divisor+5,f,c
  2154  000D60  3215               	rrcf	___lomod@divisor+4,f,c
  2155  000D62  3214               	rrcf	___lomod@divisor+3,f,c
  2156  000D64  3213               	rrcf	___lomod@divisor+2,f,c
  2157  000D66  3212               	rrcf	___lomod@divisor+1,f,c
  2158  000D68  3211               	rrcf	___lomod@divisor,f,c
  2159  000D6A  2E19               	decfsz	___lomod@counter,f,c
  2160  000D6C  D7D3               	goto	u1940
  2161  000D6E                     l811:
  2162  000D6E  C009  F009         	movff	___lomod@dividend,?___lomod
  2163  000D72  C00A  F00A         	movff	___lomod@dividend+1,?___lomod+1
  2164  000D76  C00B  F00B         	movff	___lomod@dividend+2,?___lomod+2
  2165  000D7A  C00C  F00C         	movff	___lomod@dividend+3,?___lomod+3
  2166  000D7E  C00D  F00D         	movff	___lomod@dividend+4,?___lomod+4
  2167  000D82  C00E  F00E         	movff	___lomod@dividend+5,?___lomod+5
  2168  000D86  C00F  F00F         	movff	___lomod@dividend+6,?___lomod+6
  2169  000D8A  C010  F010         	movff	___lomod@dividend+7,?___lomod+7
  2170  000D8E  0012               	return		;funcret
  2171  000D90                     __end_of___lomod:
  2172                           	opt callstack 0
  2173                           
  2174 ;; *************** function ___lodiv *****************
  2175 ;; Defined at:
  2176 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  dividend        8    8[COMRAM] unsigned long long 
  2179 ;;  divisor         8   16[COMRAM] unsigned long long 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  quotient        8   24[COMRAM] unsigned long long 
  2182 ;;  counter         1   32[COMRAM] unsigned char 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  8    8[COMRAM] unsigned long long 
  2185 ;; Registers used:
  2186 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2192 ;;      Params:        16       0       0       0
  2193 ;;      Locals:         9       0       0       0
  2194 ;;      Temps:          0       0       0       0
  2195 ;;      Totals:        25       0       0       0
  2196 ;;Total ram usage:       25 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; Hardware stack levels required when called:    3
  2199 ;; This function calls:
  2200 ;;		Nothing
  2201 ;; This function is called by:
  2202 ;;		_utoa
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text11
  2207  000B4C                     __ptext11:
  2208                           	opt callstack 0
  2209  000B4C                     ___lodiv:
  2210                           	opt callstack 23
  2211                           
  2212                           ;incstack = 0
  2213  000B4C  EE20  F019         	lfsr	2,___lodiv@quotient
  2214  000B50  0E07               	movlw	7
  2215  000B52                     u1891:
  2216  000B52  6ADE               	clrf	postinc2,c
  2217  000B54  06E8               	decf	wreg,f,c
  2218  000B56  E2FD               	bc	u1891
  2219  000B58  5011               	movf	___lodiv@divisor,w,c
  2220  000B5A  1012               	iorwf	___lodiv@divisor+1,w,c
  2221  000B5C  1013               	iorwf	___lodiv@divisor+2,w,c
  2222  000B5E  1014               	iorwf	___lodiv@divisor+3,w,c
  2223  000B60  1015               	iorwf	___lodiv@divisor+4,w,c
  2224  000B62  1016               	iorwf	___lodiv@divisor+5,w,c
  2225  000B64  1017               	iorwf	___lodiv@divisor+6,w,c
  2226  000B66  1018               	iorwf	___lodiv@divisor+7,w,c
  2227  000B68  B4D8               	btfsc	status,2,c
  2228  000B6A  D046               	goto	l801
  2229  000B6C  0E01               	movlw	1
  2230  000B6E  6E21               	movwf	___lodiv@counter,c
  2231  000B70  D00A               	goto	l2430
  2232  000B72                     l2428:
  2233  000B72  90D8               	bcf	status,0,c
  2234  000B74  3611               	rlcf	___lodiv@divisor,f,c
  2235  000B76  3612               	rlcf	___lodiv@divisor+1,f,c
  2236  000B78  3613               	rlcf	___lodiv@divisor+2,f,c
  2237  000B7A  3614               	rlcf	___lodiv@divisor+3,f,c
  2238  000B7C  3615               	rlcf	___lodiv@divisor+4,f,c
  2239  000B7E  3616               	rlcf	___lodiv@divisor+5,f,c
  2240  000B80  3617               	rlcf	___lodiv@divisor+6,f,c
  2241  000B82  3618               	rlcf	___lodiv@divisor+7,f,c
  2242  000B84  2A21               	incf	___lodiv@counter,f,c
  2243  000B86                     l2430:
  2244  000B86  AE18               	btfss	___lodiv@divisor+7,7,c
  2245  000B88  D7F4               	goto	l2428
  2246  000B8A                     u1910:
  2247  000B8A  90D8               	bcf	status,0,c
  2248  000B8C  3619               	rlcf	___lodiv@quotient,f,c
  2249  000B8E  361A               	rlcf	___lodiv@quotient+1,f,c
  2250  000B90  361B               	rlcf	___lodiv@quotient+2,f,c
  2251  000B92  361C               	rlcf	___lodiv@quotient+3,f,c
  2252  000B94  361D               	rlcf	___lodiv@quotient+4,f,c
  2253  000B96  361E               	rlcf	___lodiv@quotient+5,f,c
  2254  000B98  361F               	rlcf	___lodiv@quotient+6,f,c
  2255  000B9A  3620               	rlcf	___lodiv@quotient+7,f,c
  2256  000B9C  5011               	movf	___lodiv@divisor,w,c
  2257  000B9E  5C09               	subwf	___lodiv@dividend,w,c
  2258  000BA0  5012               	movf	___lodiv@divisor+1,w,c
  2259  000BA2  580A               	subwfb	___lodiv@dividend+1,w,c
  2260  000BA4  5013               	movf	___lodiv@divisor+2,w,c
  2261  000BA6  580B               	subwfb	___lodiv@dividend+2,w,c
  2262  000BA8  5014               	movf	___lodiv@divisor+3,w,c
  2263  000BAA  580C               	subwfb	___lodiv@dividend+3,w,c
  2264  000BAC  5015               	movf	___lodiv@divisor+4,w,c
  2265  000BAE  580D               	subwfb	___lodiv@dividend+4,w,c
  2266  000BB0  5016               	movf	___lodiv@divisor+5,w,c
  2267  000BB2  580E               	subwfb	___lodiv@dividend+5,w,c
  2268  000BB4  5017               	movf	___lodiv@divisor+6,w,c
  2269  000BB6  580F               	subwfb	___lodiv@dividend+6,w,c
  2270  000BB8  5018               	movf	___lodiv@divisor+7,w,c
  2271  000BBA  5810               	subwfb	___lodiv@dividend+7,w,c
  2272  000BBC  A0D8               	btfss	status,0,c
  2273  000BBE  D011               	goto	l2440
  2274  000BC0  5011               	movf	___lodiv@divisor,w,c
  2275  000BC2  5E09               	subwf	___lodiv@dividend,f,c
  2276  000BC4  5012               	movf	___lodiv@divisor+1,w,c
  2277  000BC6  5A0A               	subwfb	___lodiv@dividend+1,f,c
  2278  000BC8  5013               	movf	___lodiv@divisor+2,w,c
  2279  000BCA  5A0B               	subwfb	___lodiv@dividend+2,f,c
  2280  000BCC  5014               	movf	___lodiv@divisor+3,w,c
  2281  000BCE  5A0C               	subwfb	___lodiv@dividend+3,f,c
  2282  000BD0  5015               	movf	___lodiv@divisor+4,w,c
  2283  000BD2  5A0D               	subwfb	___lodiv@dividend+4,f,c
  2284  000BD4  5016               	movf	___lodiv@divisor+5,w,c
  2285  000BD6  5A0E               	subwfb	___lodiv@dividend+5,f,c
  2286  000BD8  5017               	movf	___lodiv@divisor+6,w,c
  2287  000BDA  5A0F               	subwfb	___lodiv@dividend+6,f,c
  2288  000BDC  5018               	movf	___lodiv@divisor+7,w,c
  2289  000BDE  5A10               	subwfb	___lodiv@dividend+7,f,c
  2290  000BE0  8019               	bsf	___lodiv@quotient,0,c
  2291  000BE2                     l2440:
  2292  000BE2  90D8               	bcf	status,0,c
  2293  000BE4  3218               	rrcf	___lodiv@divisor+7,f,c
  2294  000BE6  3217               	rrcf	___lodiv@divisor+6,f,c
  2295  000BE8  3216               	rrcf	___lodiv@divisor+5,f,c
  2296  000BEA  3215               	rrcf	___lodiv@divisor+4,f,c
  2297  000BEC  3214               	rrcf	___lodiv@divisor+3,f,c
  2298  000BEE  3213               	rrcf	___lodiv@divisor+2,f,c
  2299  000BF0  3212               	rrcf	___lodiv@divisor+1,f,c
  2300  000BF2  3211               	rrcf	___lodiv@divisor,f,c
  2301  000BF4  2E21               	decfsz	___lodiv@counter,f,c
  2302  000BF6  D7C9               	goto	u1910
  2303  000BF8                     l801:
  2304  000BF8  C019  F009         	movff	___lodiv@quotient,?___lodiv
  2305  000BFC  C01A  F00A         	movff	___lodiv@quotient+1,?___lodiv+1
  2306  000C00  C01B  F00B         	movff	___lodiv@quotient+2,?___lodiv+2
  2307  000C04  C01C  F00C         	movff	___lodiv@quotient+3,?___lodiv+3
  2308  000C08  C01D  F00D         	movff	___lodiv@quotient+4,?___lodiv+4
  2309  000C0C  C01E  F00E         	movff	___lodiv@quotient+5,?___lodiv+5
  2310  000C10  C01F  F00F         	movff	___lodiv@quotient+6,?___lodiv+6
  2311  000C14  C020  F010         	movff	___lodiv@quotient+7,?___lodiv+7
  2312  000C18  0012               	return		;funcret
  2313  000C1A                     __end_of___lodiv:
  2314                           	opt callstack 0
  2315                           
  2316 ;; *************** function _setup *****************
  2317 ;; Defined at:
  2318 ;;		line 38 in file "main.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2332 ;;      Params:         0       0       0       0
  2333 ;;      Locals:         0       0       0       0
  2334 ;;      Temps:          0       0       0       0
  2335 ;;      Totals:         0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    7
  2339 ;; This function calls:
  2340 ;;		_initPWM
  2341 ;;		_init_LCD
  2342 ;;		_init_RFID
  2343 ;;		_init_sensors
  2344 ;; This function is called by:
  2345 ;;		_main
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text12
  2350  0012BC                     __ptext12:
  2351                           	opt callstack 0
  2352  0012BC                     _setup:
  2353                           	opt callstack 23
  2354                           
  2355                           ;main.c: 41:     OSCCON = 0x72;
  2356                           
  2357                           ;incstack = 0
  2358  0012BC  0E72               	movlw	114
  2359  0012BE  6ED3               	movwf	4051,c	;volatile
  2360  0012C0                     l65:
  2361  0012C0  A4D3               	btfss	4051,2,c	;volatile
  2362  0012C2  D7FE               	goto	l65
  2363                           
  2364                           ;main.c: 43:     INTCONbits.GIEH = 1;
  2365  0012C4  8EF2               	bsf	4082,7,c	;volatile
  2366                           
  2367                           ;main.c: 44:     INTCONbits.GIEL = 1;
  2368  0012C6  8CF2               	bsf	4082,6,c	;volatile
  2369                           
  2370                           ;main.c: 45:     RCONbits.IPEN=1;
  2371  0012C8  8ED0               	bsf	4048,7,c	;volatile
  2372                           
  2373                           ;main.c: 48:     init_LCD();
  2374  0012CA  EC0D  F006         	call	_init_LCD	;wreg free
  2375                           
  2376                           ;main.c: 49:     init_RFID();
  2377  0012CE  ECD6  F009         	call	_init_RFID	;wreg free
  2378                           
  2379                           ;main.c: 50:     init_sensors();
  2380  0012D2  ECC7  F009         	call	_init_sensors	;wreg free
  2381                           
  2382                           ;main.c: 51:     initPWM(199);
  2383  0012D6  0E00               	movlw	0
  2384  0012D8  6E0A               	movwf	initPWM@PWMperiod+1,c
  2385  0012DA  0EC7               	movlw	199
  2386  0012DC  6E09               	movwf	initPWM@PWMperiod,c
  2387  0012DE  ECE3  F009         	call	_initPWM	;wreg free
  2388                           
  2389                           ;main.c: 53:     TRISBbits.RB0 = 0;
  2390  0012E2  9093               	bcf	3987,0,c	;volatile
  2391                           
  2392                           ;main.c: 54:     TRISBbits.RB2 = 0;
  2393  0012E4  9493               	bcf	3987,2,c	;volatile
  2394                           
  2395                           ;main.c: 55:     TRISDbits.RD2 = 1;
  2396  0012E6  8495               	bsf	3989,2,c	;volatile
  2397  0012E8  0012               	return		;funcret
  2398  0012EA                     __end_of_setup:
  2399                           	opt callstack 0
  2400                           
  2401 ;; *************** function _init_sensors *****************
  2402 ;; Defined at:
  2403 ;;		line 14 in file "signal_processing.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;		None
  2406 ;; Auto vars:     Size  Location     Type
  2407 ;;		None
  2408 ;; Return value:  Size  Location     Type
  2409 ;;                  1    wreg      void 
  2410 ;; Registers used:
  2411 ;;		wreg, status,2
  2412 ;; Tracked objects:
  2413 ;;		On entry : 0/0
  2414 ;;		On exit  : 0/0
  2415 ;;		Unchanged: 0/0
  2416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2417 ;;      Params:         0       0       0       0
  2418 ;;      Locals:         0       0       0       0
  2419 ;;      Temps:          0       0       0       0
  2420 ;;      Totals:         0       0       0       0
  2421 ;;Total ram usage:        0 bytes
  2422 ;; Hardware stack levels used:    1
  2423 ;; Hardware stack levels required when called:    3
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_setup
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text13
  2432  00138E                     __ptext13:
  2433                           	opt callstack 0
  2434  00138E                     _init_sensors:
  2435                           	opt callstack 26
  2436                           
  2437                           ;signal_processing.c: 16:     T5CON =0b00011001;
  2438                           
  2439                           ;incstack = 0
  2440  00138E  0E19               	movlw	25
  2441  001390  6EB7               	movwf	4023,c	;volatile
  2442                           
  2443                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2444  001392  8492               	bsf	3986,2,c	;volatile
  2445                           
  2446                           ;signal_processing.c: 18:     TRISAbits.RA3 = 1;
  2447  001394  8692               	bsf	3986,3,c	;volatile
  2448                           
  2449                           ;signal_processing.c: 21:     ANSEL0 = 0;
  2450  001396  0E00               	movlw	0
  2451  001398  6EB8               	movwf	4024,c	;volatile
  2452                           
  2453                           ;signal_processing.c: 22:     ANSEL1 = 0;
  2454  00139A  0E00               	movlw	0
  2455  00139C  6EB9               	movwf	4025,c	;volatile
  2456                           
  2457                           ;signal_processing.c: 24:     DFLTCON = 0b00011000;
  2458  00139E  0E18               	movlw	24
  2459  0013A0  6E60               	movwf	3936,c	;volatile
  2460                           
  2461                           ;signal_processing.c: 25:     CAP1CON = 0b01000110;
  2462  0013A2  0E46               	movlw	70
  2463  0013A4  6E63               	movwf	3939,c	;volatile
  2464                           
  2465                           ;signal_processing.c: 26:     CAP2CON = 0b01000110;
  2466  0013A6  0E46               	movlw	70
  2467  0013A8  6E62               	movwf	3938,c	;volatile
  2468  0013AA  0012               	return		;funcret
  2469  0013AC                     __end_of_init_sensors:
  2470                           	opt callstack 0
  2471                           
  2472 ;; *************** function _init_RFID *****************
  2473 ;; Defined at:
  2474 ;;		line 13 in file "RFID.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2488 ;;      Params:         0       0       0       0
  2489 ;;      Locals:         0       0       0       0
  2490 ;;      Temps:          0       0       0       0
  2491 ;;      Totals:         0       0       0       0
  2492 ;;Total ram usage:        0 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    3
  2495 ;; This function calls:
  2496 ;;		Nothing
  2497 ;; This function is called by:
  2498 ;;		_setup
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text14
  2503  0013AC                     __ptext14:
  2504                           	opt callstack 0
  2505  0013AC                     _init_RFID:
  2506                           	opt callstack 26
  2507                           
  2508                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2509                           
  2510                           ;incstack = 0
  2511  0013AC  8E94               	bsf	3988,7,c	;volatile
  2512                           
  2513                           ;RFID.c: 19:     SPBRG = 203;
  2514  0013AE  0ECB               	movlw	203
  2515  0013B0  6EAF               	movwf	4015,c	;volatile
  2516                           
  2517                           ;RFID.c: 20:     SPBRGH = 0;
  2518  0013B2  0E00               	movlw	0
  2519  0013B4  6EB0               	movwf	4016,c	;volatile
  2520                           
  2521                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2522  0013B6  86AA               	bsf	4010,3,c	;volatile
  2523                           
  2524                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2525  0013B8  84AC               	bsf	4012,2,c	;volatile
  2526                           
  2527                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2528  0013BA  88AB               	bsf	4011,4,c	;volatile
  2529                           
  2530                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2531  0013BC  8EAB               	bsf	4011,7,c	;volatile
  2532                           
  2533                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2534  0013BE  8AAC               	bsf	4012,5,c	;volatile
  2535                           
  2536                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2537  0013C0  8A9D               	bsf	3997,5,c	;volatile
  2538                           
  2539                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2540  0013C2  8A9F               	bsf	3999,5,c	;volatile
  2541  0013C4  0012               	return		;funcret
  2542  0013C6                     __end_of_init_RFID:
  2543                           	opt callstack 0
  2544                           
  2545 ;; *************** function _init_LCD *****************
  2546 ;; Defined at:
  2547 ;;		line 56 in file "LCDIO.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2561 ;;      Params:         0       0       0       0
  2562 ;;      Locals:         0       0       0       0
  2563 ;;      Temps:          1       0       0       0
  2564 ;;      Totals:         1       0       0       0
  2565 ;;Total ram usage:        1 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    6
  2568 ;; This function calls:
  2569 ;;		_LCDout
  2570 ;;		_SendLCD
  2571 ;; This function is called by:
  2572 ;;		_setup
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text15
  2577  000C1A                     __ptext15:
  2578                           	opt callstack 0
  2579  000C1A                     _init_LCD:
  2580                           	opt callstack 23
  2581                           
  2582                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2583                           
  2584                           ;incstack = 0
  2585  000C1A  9094               	bcf	3988,0,c	;volatile
  2586                           
  2587                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2588  000C1C  9E92               	bcf	3986,7,c	;volatile
  2589                           
  2590                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2591  000C1E  9694               	bcf	3988,3,c	;volatile
  2592                           
  2593                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2594  000C20  9095               	bcf	3989,0,c	;volatile
  2595                           
  2596                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2597  000C22  9295               	bcf	3989,1,c	;volatile
  2598                           
  2599                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2600  000C24  9C92               	bcf	3986,6,c	;volatile
  2601                           
  2602                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2603  000C26  908C               	bcf	3980,0,c	;volatile
  2604                           
  2605                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2606  000C28  928C               	bcf	3980,1,c	;volatile
  2607                           
  2608                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2609  000C2A  968B               	bcf	3979,3,c	;volatile
  2610                           
  2611                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2612  000C2C  908B               	bcf	3979,0,c	;volatile
  2613                           
  2614                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2615  000C2E  9C89               	bcf	3977,6,c	;volatile
  2616                           
  2617                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2618  000C30  9E89               	bcf	3977,7,c	;volatile
  2619                           
  2620                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2621  000C32  0E27               	movlw	39
  2622  000C34  6E0D               	movwf	??_init_LCD& (0+255),c
  2623  000C36  0EF5               	movlw	245
  2624  000C38                     u2157:
  2625  000C38  2EE8               	decfsz	wreg,f,c
  2626  000C3A  D7FE               	bra	u2157
  2627  000C3C  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2628  000C3E  D7FC               	bra	u2157
  2629  000C40  F000               	nop	
  2630                           
  2631                           ;LCDIO.c: 76:  LCDout(0b0011);
  2632  000C42  0E03               	movlw	3
  2633  000C44  ECEC  F007         	call	_LCDout
  2634                           
  2635                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2636  000C48  0E0D               	movlw	13
  2637  000C4A  6E0D               	movwf	??_init_LCD& (0+255),c
  2638  000C4C  0EFC               	movlw	252
  2639  000C4E                     u2167:
  2640  000C4E  2EE8               	decfsz	wreg,f,c
  2641  000C50  D7FE               	bra	u2167
  2642  000C52  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2643  000C54  D7FC               	bra	u2167
  2644                           
  2645                           ;LCDIO.c: 78:  LCDout(0b0011);
  2646  000C56  0E03               	movlw	3
  2647  000C58  ECEC  F007         	call	_LCDout
  2648                           
  2649                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2650  000C5C  0E85               	movlw	133
  2651  000C5E                     u2177:
  2652  000C5E  2EE8               	decfsz	wreg,f,c
  2653  000C60  D7FE               	bra	u2177
  2654  000C62  F000               	nop	
  2655                           
  2656                           ;LCDIO.c: 80:  LCDout(0b0011);
  2657  000C64  0E03               	movlw	3
  2658  000C66  ECEC  F007         	call	_LCDout
  2659                           
  2660                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2661  000C6A  0E21               	movlw	33
  2662  000C6C                     u2187:
  2663  000C6C  2EE8               	decfsz	wreg,f,c
  2664  000C6E  D7FE               	bra	u2187
  2665  000C70  F000               	nop	
  2666                           
  2667                           ;LCDIO.c: 82:  LCDout(0b0010);
  2668  000C72  0E02               	movlw	2
  2669  000C74  ECEC  F007         	call	_LCDout
  2670                           
  2671                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2672  000C78  0E21               	movlw	33
  2673  000C7A                     u2197:
  2674  000C7A  2EE8               	decfsz	wreg,f,c
  2675  000C7C  D7FE               	bra	u2197
  2676  000C7E  F000               	nop	
  2677                           
  2678                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2679  000C80  0E00               	movlw	0
  2680  000C82  6E0B               	movwf	SendLCD@type,c
  2681  000C84  0E28               	movlw	40
  2682  000C86  EC46  F009         	call	_SendLCD
  2683                           
  2684                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2685  000C8A  0E21               	movlw	33
  2686  000C8C                     u2207:
  2687  000C8C  2EE8               	decfsz	wreg,f,c
  2688  000C8E  D7FE               	bra	u2207
  2689  000C90  F000               	nop	
  2690                           
  2691                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2692  000C92  0E00               	movlw	0
  2693  000C94  6E0B               	movwf	SendLCD@type,c
  2694  000C96  0E08               	movlw	8
  2695  000C98  EC46  F009         	call	_SendLCD
  2696                           
  2697                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2698  000C9C  0E21               	movlw	33
  2699  000C9E                     u2217:
  2700  000C9E  2EE8               	decfsz	wreg,f,c
  2701  000CA0  D7FE               	bra	u2217
  2702  000CA2  F000               	nop	
  2703                           
  2704                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2705  000CA4  0E00               	movlw	0
  2706  000CA6  6E0B               	movwf	SendLCD@type,c
  2707  000CA8  0E01               	movlw	1
  2708  000CAA  EC46  F009         	call	_SendLCD
  2709                           
  2710                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2711  000CAE  0E0D               	movlw	13
  2712  000CB0  6E0D               	movwf	??_init_LCD& (0+255),c
  2713  000CB2  0EFC               	movlw	252
  2714  000CB4                     u2227:
  2715  000CB4  2EE8               	decfsz	wreg,f,c
  2716  000CB6  D7FE               	bra	u2227
  2717  000CB8  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2718  000CBA  D7FC               	bra	u2227
  2719                           
  2720                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2721  000CBC  0E00               	movlw	0
  2722  000CBE  6E0B               	movwf	SendLCD@type,c
  2723  000CC0  0E06               	movlw	6
  2724  000CC2  EC46  F009         	call	_SendLCD
  2725                           
  2726                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2727  000CC6  0E21               	movlw	33
  2728  000CC8                     u2237:
  2729  000CC8  2EE8               	decfsz	wreg,f,c
  2730  000CCA  D7FE               	bra	u2237
  2731  000CCC  F000               	nop	
  2732                           
  2733                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2734  000CCE  0E00               	movlw	0
  2735  000CD0  6E0B               	movwf	SendLCD@type,c
  2736  000CD2  0E0C               	movlw	12
  2737  000CD4  EC46  F009         	call	_SendLCD
  2738                           
  2739                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2740  000CD8  0E21               	movlw	33
  2741  000CDA                     u2247:
  2742  000CDA  2EE8               	decfsz	wreg,f,c
  2743  000CDC  D7FE               	bra	u2247
  2744  000CDE  F000               	nop	
  2745  000CE0  0012               	return		;funcret
  2746  000CE2                     __end_of_init_LCD:
  2747                           	opt callstack 0
  2748                           
  2749 ;; *************** function _initPWM *****************
  2750 ;; Defined at:
  2751 ;;		line 5 in file "dc_motor.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  PWMperiod       2    8[COMRAM] int 
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2765 ;;      Params:         2       0       0       0
  2766 ;;      Locals:         0       0       0       0
  2767 ;;      Temps:          0       0       0       0
  2768 ;;      Totals:         2       0       0       0
  2769 ;;Total ram usage:        2 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    3
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		_setup
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text16
  2780  0013C6                     __ptext16:
  2781                           	opt callstack 0
  2782  0013C6                     _initPWM:
  2783                           	opt callstack 26
  2784                           
  2785                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2786                           
  2787                           ;incstack = 0
  2788  0013C6  0E00               	movlw	0
  2789  0013C8  6E7F               	movwf	3967,c	;volatile
  2790                           
  2791                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2792  0013CA  0E80               	movlw	128
  2793  0013CC  6E7E               	movwf	3966,c	;volatile
  2794                           
  2795                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2796  0013CE  0E6F               	movlw	111
  2797  0013D0  6E6F               	movwf	3951,c	;volatile
  2798                           
  2799                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2800  0013D2  0E00               	movlw	0
  2801  0013D4  6E6E               	movwf	3950,c	;volatile
  2802                           
  2803                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2804  0013D6  C009  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2805                           
  2806                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2807  0013DA  500A               	movf	initPWM@PWMperiod+1,w,c
  2808  0013DC  6E7A               	movwf	3962,c	;volatile
  2809  0013DE  0012               	return		;funcret
  2810  0013E0                     __end_of_initPWM:
  2811                           	opt callstack 0
  2812                           
  2813 ;; *************** function _process_signal *****************
  2814 ;; Defined at:
  2815 ;;		line 32 in file "signal_processing.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  S               2   22[COMRAM] PTR struct Sensor
  2818 ;;		 -> main@sensorR(4), main@sensorL(4), 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  smoothing_co    1    0        unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2830 ;;      Params:         2       0       0       0
  2831 ;;      Locals:         1       0       0       0
  2832 ;;      Temps:          0       0       0       0
  2833 ;;      Totals:         3       0       0       0
  2834 ;;Total ram usage:        3 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    4
  2837 ;; This function calls:
  2838 ;;		___awdiv
  2839 ;;		___wmul
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text17
  2846  000EC6                     __ptext17:
  2847                           	opt callstack 0
  2848  000EC6                     _process_signal:
  2849                           	opt callstack 26
  2850                           
  2851                           ;signal_processing.c: 36:     S->smoothed_signal *= (100-smoothing_constant)/100;
  2852                           
  2853                           ;incstack = 0
  2854  000EC6  EE20 F002          	lfsr	2,2
  2855  000ECA  5017               	movf	process_signal@S,w,c
  2856  000ECC  26D9               	addwf	fsr2l,f,c
  2857  000ECE  5018               	movf	process_signal@S+1,w,c
  2858  000ED0  22DA               	addwfc	fsr2h,f,c
  2859  000ED2  CFDE F011          	movff	postinc2,___wmul@multiplier
  2860  000ED6  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  2861  000EDA  0E00               	movlw	0
  2862  000EDC  6E0C               	movwf	___awdiv@divisor+1,c
  2863  000EDE  0E64               	movlw	100
  2864  000EE0  6E0B               	movwf	___awdiv@divisor,c
  2865  000EE2  0E00               	movlw	0
  2866  000EE4  6E0A               	movwf	___awdiv@dividend+1,c
  2867  000EE6  0E32               	movlw	50
  2868  000EE8  6E09               	movwf	___awdiv@dividend,c
  2869  000EEA  ECAA  F007         	call	___awdiv	;wreg free
  2870  000EEE  C009  F013         	movff	?___awdiv,___wmul@multiplicand
  2871  000EF2  C00A  F014         	movff	?___awdiv+1,___wmul@multiplicand+1
  2872  000EF6  ECB4  F009         	call	___wmul	;wreg free
  2873  000EFA  EE20 F002          	lfsr	2,2
  2874  000EFE  5017               	movf	process_signal@S,w,c
  2875  000F00  26D9               	addwf	fsr2l,f,c
  2876  000F02  5018               	movf	process_signal@S+1,w,c
  2877  000F04  22DA               	addwfc	fsr2h,f,c
  2878  000F06  C011  FFDE         	movff	?___wmul,postinc2
  2879  000F0A  C012  FFDD         	movff	?___wmul+1,postdec2
  2880                           
  2881                           ;signal_processing.c: 37:     S->smoothed_signal += (S->raw_data * smoothing_constant)/1
      +                          00;
  2882  000F0E  0E00               	movlw	0
  2883  000F10  6E12               	movwf	___wmul@multiplier+1,c
  2884  000F12  0E32               	movlw	50
  2885  000F14  6E11               	movwf	___wmul@multiplier,c
  2886  000F16  C017  FFD9         	movff	process_signal@S,fsr2l
  2887  000F1A  C018  FFDA         	movff	process_signal@S+1,fsr2h
  2888  000F1E  CFDE F013          	movff	postinc2,___wmul@multiplicand
  2889  000F22  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  2890  000F26  ECB4  F009         	call	___wmul	;wreg free
  2891  000F2A  C011  F009         	movff	?___wmul,___awdiv@dividend
  2892  000F2E  C012  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  2893  000F32  0E00               	movlw	0
  2894  000F34  6E0C               	movwf	___awdiv@divisor+1,c
  2895  000F36  0E64               	movlw	100
  2896  000F38  6E0B               	movwf	___awdiv@divisor,c
  2897  000F3A  ECAA  F007         	call	___awdiv	;wreg free
  2898  000F3E  EE20 F002          	lfsr	2,2
  2899  000F42  5017               	movf	process_signal@S,w,c
  2900  000F44  26D9               	addwf	fsr2l,f,c
  2901  000F46  5018               	movf	process_signal@S+1,w,c
  2902  000F48  22DA               	addwfc	fsr2h,f,c
  2903  000F4A  5009               	movf	?___awdiv,w,c
  2904  000F4C  26DE               	addwf	postinc2,f,c
  2905  000F4E  500A               	movf	?___awdiv+1,w,c
  2906  000F50  22DD               	addwfc	postdec2,f,c
  2907  000F52  0012               	return		;funcret
  2908  000F54                     __end_of_process_signal:
  2909                           	opt callstack 0
  2910                           
  2911 ;; *************** function _init_motors *****************
  2912 ;; Defined at:
  2913 ;;		line 146 in file "dc_motor.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  2916 ;;		 -> main@motorL(9), 
  2917 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  2918 ;;		 -> main@motorR(9), 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;		None
  2921 ;; Return value:  Size  Location     Type
  2922 ;;                  1    wreg      void 
  2923 ;; Registers used:
  2924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2930 ;;      Params:         4       0       0       0
  2931 ;;      Locals:         0       0       0       0
  2932 ;;      Temps:          0       0       0       0
  2933 ;;      Totals:         4       0       0       0
  2934 ;;Total ram usage:        4 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    5
  2937 ;; This function calls:
  2938 ;;		_setMotorPWM
  2939 ;; This function is called by:
  2940 ;;		_main
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text18
  2945  000A62                     __ptext18:
  2946                           	opt callstack 0
  2947  000A62                     _init_motors:
  2948                           	opt callstack 25
  2949                           
  2950                           ;dc_motor.c: 146: void init_motors(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           147: {;dc_motor.c: 149: mL->power = 0;
  2951                           
  2952                           ;incstack = 0
  2953  000A62  C020  FFD9         	movff	init_motors@mL,fsr2l
  2954  000A66  C021  FFDA         	movff	init_motors@mL+1,fsr2h
  2955  000A6A  0E00               	movlw	0
  2956  000A6C  6EDF               	movwf	indf2,c
  2957                           
  2958                           ;dc_motor.c: 150: mL->direction = 1;
  2959  000A6E  EE20 F001          	lfsr	2,1
  2960  000A72  5020               	movf	init_motors@mL,w,c
  2961  000A74  26D9               	addwf	fsr2l,f,c
  2962  000A76  5021               	movf	init_motors@mL+1,w,c
  2963  000A78  22DA               	addwfc	fsr2h,f,c
  2964  000A7A  0E01               	movlw	1
  2965  000A7C  6EDF               	movwf	indf2,c
  2966                           
  2967                           ;dc_motor.c: 151: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  2968  000A7E  EE20 F002          	lfsr	2,2
  2969  000A82  5020               	movf	init_motors@mL,w,c
  2970  000A84  26D9               	addwf	fsr2l,f,c
  2971  000A86  5021               	movf	init_motors@mL+1,w,c
  2972  000A88  22DA               	addwfc	fsr2h,f,c
  2973  000A8A  0E79               	movlw	121
  2974  000A8C  6EDE               	movwf	postinc2,c
  2975  000A8E  0E0F               	movlw	15
  2976  000A90  6EDD               	movwf	postdec2,c
  2977                           
  2978                           ;dc_motor.c: 152: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  2979  000A92  EE20 F004          	lfsr	2,4
  2980  000A96  5020               	movf	init_motors@mL,w,c
  2981  000A98  26D9               	addwf	fsr2l,f,c
  2982  000A9A  5021               	movf	init_motors@mL+1,w,c
  2983  000A9C  22DA               	addwfc	fsr2h,f,c
  2984  000A9E  0E78               	movlw	120
  2985  000AA0  6EDE               	movwf	postinc2,c
  2986  000AA2  0E0F               	movlw	15
  2987  000AA4  6EDD               	movwf	postdec2,c
  2988                           
  2989                           ;dc_motor.c: 153: mL->dir_pin=0;
  2990  000AA6  EE20 F006          	lfsr	2,6
  2991  000AAA  5020               	movf	init_motors@mL,w,c
  2992  000AAC  26D9               	addwf	fsr2l,f,c
  2993  000AAE  5021               	movf	init_motors@mL+1,w,c
  2994  000AB0  22DA               	addwfc	fsr2h,f,c
  2995  000AB2  0E00               	movlw	0
  2996  000AB4  6EDF               	movwf	indf2,c
  2997                           
  2998                           ;dc_motor.c: 154: mL->PWMperiod=199;
  2999  000AB6  EE20 F007          	lfsr	2,7
  3000  000ABA  5020               	movf	init_motors@mL,w,c
  3001  000ABC  26D9               	addwf	fsr2l,f,c
  3002  000ABE  5021               	movf	init_motors@mL+1,w,c
  3003  000AC0  22DA               	addwfc	fsr2h,f,c
  3004  000AC2  0EC7               	movlw	199
  3005  000AC4  6EDE               	movwf	postinc2,c
  3006  000AC6  0E00               	movlw	0
  3007  000AC8  6EDD               	movwf	postdec2,c
  3008                           
  3009                           ;dc_motor.c: 156: mR->power = 0;
  3010  000ACA  C022  FFD9         	movff	init_motors@mR,fsr2l
  3011  000ACE  C023  FFDA         	movff	init_motors@mR+1,fsr2h
  3012  000AD2  0E00               	movlw	0
  3013  000AD4  6EDF               	movwf	indf2,c
  3014                           
  3015                           ;dc_motor.c: 157: mR->direction = 1;
  3016  000AD6  EE20 F001          	lfsr	2,1
  3017  000ADA  5022               	movf	init_motors@mR,w,c
  3018  000ADC  26D9               	addwf	fsr2l,f,c
  3019  000ADE  5023               	movf	init_motors@mR+1,w,c
  3020  000AE0  22DA               	addwfc	fsr2h,f,c
  3021  000AE2  0E01               	movlw	1
  3022  000AE4  6EDF               	movwf	indf2,c
  3023                           
  3024                           ;dc_motor.c: 158: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3025  000AE6  EE20 F002          	lfsr	2,2
  3026  000AEA  5022               	movf	init_motors@mR,w,c
  3027  000AEC  26D9               	addwf	fsr2l,f,c
  3028  000AEE  5023               	movf	init_motors@mR+1,w,c
  3029  000AF0  22DA               	addwfc	fsr2h,f,c
  3030  000AF2  0E77               	movlw	119
  3031  000AF4  6EDE               	movwf	postinc2,c
  3032  000AF6  0E0F               	movlw	15
  3033  000AF8  6EDD               	movwf	postdec2,c
  3034                           
  3035                           ;dc_motor.c: 159: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3036  000AFA  EE20 F004          	lfsr	2,4
  3037  000AFE  5022               	movf	init_motors@mR,w,c
  3038  000B00  26D9               	addwf	fsr2l,f,c
  3039  000B02  5023               	movf	init_motors@mR+1,w,c
  3040  000B04  22DA               	addwfc	fsr2h,f,c
  3041  000B06  0E76               	movlw	118
  3042  000B08  6EDE               	movwf	postinc2,c
  3043  000B0A  0E0F               	movlw	15
  3044  000B0C  6EDD               	movwf	postdec2,c
  3045                           
  3046                           ;dc_motor.c: 160: mR->dir_pin=2;
  3047  000B0E  EE20 F006          	lfsr	2,6
  3048  000B12  5022               	movf	init_motors@mR,w,c
  3049  000B14  26D9               	addwf	fsr2l,f,c
  3050  000B16  5023               	movf	init_motors@mR+1,w,c
  3051  000B18  22DA               	addwfc	fsr2h,f,c
  3052  000B1A  0E02               	movlw	2
  3053  000B1C  6EDF               	movwf	indf2,c
  3054                           
  3055                           ;dc_motor.c: 161: mR->PWMperiod=199;
  3056  000B1E  EE20 F007          	lfsr	2,7
  3057  000B22  5022               	movf	init_motors@mR,w,c
  3058  000B24  26D9               	addwf	fsr2l,f,c
  3059  000B26  5023               	movf	init_motors@mR+1,w,c
  3060  000B28  22DA               	addwfc	fsr2h,f,c
  3061  000B2A  0EC7               	movlw	199
  3062  000B2C  6EDE               	movwf	postinc2,c
  3063  000B2E  0E00               	movlw	0
  3064  000B30  6EDD               	movwf	postdec2,c
  3065                           
  3066                           ;dc_motor.c: 163: setMotorPWM(mL);
  3067  000B32  C020  F017         	movff	init_motors@mL,setMotorPWM@m
  3068  000B36  C021  F018         	movff	init_motors@mL+1,setMotorPWM@m+1
  3069  000B3A  EC9F  F004         	call	_setMotorPWM	;wreg free
  3070                           
  3071                           ;dc_motor.c: 164: setMotorPWM(mR);
  3072  000B3E  C022  F017         	movff	init_motors@mR,setMotorPWM@m
  3073  000B42  C023  F018         	movff	init_motors@mR+1,setMotorPWM@m+1
  3074  000B46  EC9F  F004         	call	_setMotorPWM	;wreg free
  3075  000B4A  0012               	return		;funcret
  3076  000B4C                     __end_of_init_motors:
  3077                           	opt callstack 0
  3078                           
  3079 ;; *************** function _setMotorPWM *****************
  3080 ;; Defined at:
  3081 ;;		line 18 in file "dc_motor.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  m               2   22[COMRAM] PTR struct DC_motor
  3084 ;;		 -> main@motorR(9), main@motorL(9), 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  PWMduty         2   29[COMRAM] int 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      void 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3096 ;;      Params:         2       0       0       0
  3097 ;;      Locals:         2       0       0       0
  3098 ;;      Temps:          5       0       0       0
  3099 ;;      Totals:         9       0       0       0
  3100 ;;Total ram usage:        9 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    4
  3103 ;; This function calls:
  3104 ;;		___awdiv
  3105 ;;		___wmul
  3106 ;; This function is called by:
  3107 ;;		_init_motors
  3108 ;;		_setMotorFullSpeed
  3109 ;;		_stopMotor
  3110 ;;		_stop
  3111 ;;		_turnLeft
  3112 ;;		_turnRight
  3113 ;;		_fullSpeedAhead
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text19
  3118  00093E                     __ptext19:
  3119                           	opt callstack 0
  3120  00093E                     _setMotorPWM:
  3121                           	opt callstack 25
  3122                           
  3123                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3124                           
  3125                           ;incstack = 0
  3126  00093E  C017  FFD9         	movff	setMotorPWM@m,fsr2l
  3127  000942  C018  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3128  000946  50DF               	movf	indf2,w,c
  3129  000948  6E19               	movwf	??_setMotorPWM& (0+255),c
  3130  00094A  5019               	movf	??_setMotorPWM,w,c
  3131  00094C  6E11               	movwf	___wmul@multiplier,c
  3132  00094E  6A12               	clrf	___wmul@multiplier+1,c
  3133  000950  EE20 F007          	lfsr	2,7
  3134  000954  5017               	movf	setMotorPWM@m,w,c
  3135  000956  26D9               	addwf	fsr2l,f,c
  3136  000958  5018               	movf	setMotorPWM@m+1,w,c
  3137  00095A  22DA               	addwfc	fsr2h,f,c
  3138  00095C  CFDE F013          	movff	postinc2,___wmul@multiplicand
  3139  000960  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  3140  000964  ECB4  F009         	call	___wmul	;wreg free
  3141  000968  C011  F009         	movff	?___wmul,___awdiv@dividend
  3142  00096C  C012  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  3143  000970  0E00               	movlw	0
  3144  000972  6E0C               	movwf	___awdiv@divisor+1,c
  3145  000974  0E64               	movlw	100
  3146  000976  6E0B               	movwf	___awdiv@divisor,c
  3147  000978  ECAA  F007         	call	___awdiv	;wreg free
  3148  00097C  C009  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
  3149  000980  C00A  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3150                           
  3151                           ;dc_motor.c: 24:     if (m->direction)
  3152  000984  EE20 F001          	lfsr	2,1
  3153  000988  5017               	movf	setMotorPWM@m,w,c
  3154  00098A  26D9               	addwf	fsr2l,f,c
  3155  00098C  5018               	movf	setMotorPWM@m+1,w,c
  3156  00098E  22DA               	addwfc	fsr2h,f,c
  3157  000990  50DF               	movf	indf2,w,c
  3158  000992  B4D8               	btfsc	status,2,c
  3159  000994  D024               	goto	l2044
  3160                           
  3161                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3162  000996  EE20 F006          	lfsr	2,6
  3163  00099A  5017               	movf	setMotorPWM@m,w,c
  3164  00099C  26D9               	addwf	fsr2l,f,c
  3165  00099E  5018               	movf	setMotorPWM@m+1,w,c
  3166  0009A0  22DA               	addwfc	fsr2h,f,c
  3167  0009A2  50DF               	movf	indf2,w,c
  3168  0009A4  6E19               	movwf	??_setMotorPWM& (0+255),c
  3169  0009A6  0E01               	movlw	1
  3170  0009A8  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3171  0009AA  2A19               	incf	??_setMotorPWM,f,c
  3172  0009AC  D002               	goto	u1304
  3173  0009AE                     u1305:
  3174  0009AE  90D8               	bcf	status,0,c
  3175  0009B0  361A               	rlcf	??_setMotorPWM+1,f,c
  3176  0009B2                     u1304:
  3177  0009B2  2E19               	decfsz	??_setMotorPWM,f,c
  3178  0009B4  D7FC               	goto	u1305
  3179  0009B6  501A               	movf	??_setMotorPWM+1,w,c
  3180  0009B8  108A               	iorwf	3978,w,c	;volatile
  3181  0009BA  6E8A               	movwf	3978,c	;volatile
  3182                           
  3183                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3184  0009BC  EE20 F007          	lfsr	2,7
  3185  0009C0  5017               	movf	setMotorPWM@m,w,c
  3186  0009C2  26D9               	addwf	fsr2l,f,c
  3187  0009C4  5018               	movf	setMotorPWM@m+1,w,c
  3188  0009C6  22DA               	addwfc	fsr2h,f,c
  3189  0009C8  CFDE F019          	movff	postinc2,??_setMotorPWM
  3190  0009CC  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3191  0009D0  501E               	movf	setMotorPWM@PWMduty,w,c
  3192  0009D2  5C19               	subwf	??_setMotorPWM,w,c
  3193  0009D4  6E1E               	movwf	setMotorPWM@PWMduty,c
  3194  0009D6  501F               	movf	setMotorPWM@PWMduty+1,w,c
  3195  0009D8  581A               	subwfb	??_setMotorPWM+1,w,c
  3196  0009DA  6E1F               	movwf	setMotorPWM@PWMduty+1,c
  3197                           
  3198                           ;dc_motor.c: 28:     }
  3199  0009DC  D014               	goto	l134
  3200  0009DE                     l2044:
  3201                           
  3202                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3203  0009DE  EE20 F006          	lfsr	2,6
  3204  0009E2  5017               	movf	setMotorPWM@m,w,c
  3205  0009E4  26D9               	addwf	fsr2l,f,c
  3206  0009E6  5018               	movf	setMotorPWM@m+1,w,c
  3207  0009E8  22DA               	addwfc	fsr2h,f,c
  3208  0009EA  50DF               	movf	indf2,w,c
  3209  0009EC  6E19               	movwf	??_setMotorPWM& (0+255),c
  3210  0009EE  0E01               	movlw	1
  3211  0009F0  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3212  0009F2  2A19               	incf	??_setMotorPWM,f,c
  3213  0009F4  D002               	goto	u1314
  3214  0009F6                     u1315:
  3215  0009F6  90D8               	bcf	status,0,c
  3216  0009F8  361A               	rlcf	??_setMotorPWM+1,f,c
  3217  0009FA                     u1314:
  3218  0009FA  2E19               	decfsz	??_setMotorPWM,f,c
  3219  0009FC  D7FC               	goto	u1315
  3220  0009FE  501A               	movf	??_setMotorPWM+1,w,c
  3221  000A00  0AFF               	xorlw	255
  3222  000A02  148A               	andwf	3978,w,c	;volatile
  3223  000A04  6E8A               	movwf	3978,c	;volatile
  3224  000A06                     l134:
  3225                           
  3226                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3227  000A06  EE20 F002          	lfsr	2,2
  3228  000A0A  5017               	movf	setMotorPWM@m,w,c
  3229  000A0C  26D9               	addwf	fsr2l,f,c
  3230  000A0E  5018               	movf	setMotorPWM@m+1,w,c
  3231  000A10  22DA               	addwfc	fsr2h,f,c
  3232  000A12  CFDE F019          	movff	postinc2,??_setMotorPWM
  3233  000A16  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3234  000A1A  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3235  000A1E  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3236  000A22  441E               	rlncf	setMotorPWM@PWMduty,w,c
  3237  000A24  46E8               	rlncf	wreg,f,c
  3238  000A26  0BFC               	andlw	252
  3239  000A28  6EDF               	movwf	indf2,c
  3240                           
  3241                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3242  000A2A  EE20 F004          	lfsr	2,4
  3243  000A2E  5017               	movf	setMotorPWM@m,w,c
  3244  000A30  26D9               	addwf	fsr2l,f,c
  3245  000A32  5018               	movf	setMotorPWM@m+1,w,c
  3246  000A34  22DA               	addwfc	fsr2h,f,c
  3247  000A36  CFDE F019          	movff	postinc2,??_setMotorPWM
  3248  000A3A  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3249  000A3E  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3250  000A42  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3251  000A46  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3252  000A4A  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3253  000A4E  0E06               	movlw	6
  3254  000A50  6E1D               	movwf	(??_setMotorPWM+4)& (0+255),c
  3255  000A52                     u1325:
  3256  000A52  341C               	rlcf	??_setMotorPWM+3,w,c
  3257  000A54  321C               	rrcf	??_setMotorPWM+3,f,c
  3258  000A56  321B               	rrcf	??_setMotorPWM+2,f,c
  3259  000A58  2E1D               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3260  000A5A  D7FB               	goto	u1325
  3261  000A5C  501B               	movf	??_setMotorPWM+2,w,c
  3262  000A5E  6EDF               	movwf	indf2,c
  3263  000A60  0012               	return		;funcret
  3264  000A62                     __end_of_setMotorPWM:
  3265                           	opt callstack 0
  3266                           
  3267 ;; *************** function ___wmul *****************
  3268 ;; Defined at:
  3269 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  multiplier      2   16[COMRAM] unsigned int 
  3272 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;  product         2   20[COMRAM] unsigned int 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  2   16[COMRAM] unsigned int 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, prodl, prodh
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3284 ;;      Params:         4       0       0       0
  3285 ;;      Locals:         2       0       0       0
  3286 ;;      Temps:          0       0       0       0
  3287 ;;      Totals:         6       0       0       0
  3288 ;;Total ram usage:        6 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_setMotorPWM
  3295 ;;		_process_signal
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text20
  3300  001368                     __ptext20:
  3301                           	opt callstack 0
  3302  001368                     ___wmul:
  3303                           	opt callstack 26
  3304                           
  3305                           ;incstack = 0
  3306  001368  5011               	movf	___wmul@multiplier,w,c
  3307  00136A  0213               	mulwf	___wmul@multiplicand,c
  3308  00136C  CFF3 F015          	movff	prodl,___wmul@product
  3309  001370  CFF4 F016          	movff	prodh,___wmul@product+1
  3310  001374  5011               	movf	___wmul@multiplier,w,c
  3311  001376  0214               	mulwf	___wmul@multiplicand+1,c
  3312  001378  50F3               	movf	prodl,w,c
  3313  00137A  2616               	addwf	___wmul@product+1,f,c
  3314  00137C  5012               	movf	___wmul@multiplier+1,w,c
  3315  00137E  0213               	mulwf	___wmul@multiplicand,c
  3316  001380  50F3               	movf	prodl,w,c
  3317  001382  2616               	addwf	___wmul@product+1,f,c
  3318  001384  C015  F011         	movff	___wmul@product,?___wmul
  3319  001388  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3320  00138C  0012               	return		;funcret
  3321  00138E                     __end_of___wmul:
  3322                           	opt callstack 0
  3323                           
  3324 ;; *************** function ___awdiv *****************
  3325 ;; Defined at:
  3326 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  dividend        2    8[COMRAM] int 
  3329 ;;  divisor         2   10[COMRAM] int 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;  quotient        2   14[COMRAM] int 
  3332 ;;  sign            1   13[COMRAM] unsigned char 
  3333 ;;  counter         1   12[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  2    8[COMRAM] int 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3343 ;;      Params:         4       0       0       0
  3344 ;;      Locals:         4       0       0       0
  3345 ;;      Temps:          0       0       0       0
  3346 ;;      Totals:         8       0       0       0
  3347 ;;Total ram usage:        8 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    3
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_setMotorPWM
  3354 ;;		_process_signal
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text21
  3359  000F54                     __ptext21:
  3360                           	opt callstack 0
  3361  000F54                     ___awdiv:
  3362                           	opt callstack 26
  3363                           
  3364                           ;incstack = 0
  3365  000F54  0E00               	movlw	0
  3366  000F56  6E0E               	movwf	___awdiv@sign,c
  3367  000F58  AE0C               	btfss	___awdiv@divisor+1,7,c
  3368  000F5A  D006               	goto	l1922
  3369  000F5C  6C0B               	negf	___awdiv@divisor,c
  3370  000F5E  1E0C               	comf	___awdiv@divisor+1,f,c
  3371  000F60  B0D8               	btfsc	status,0,c
  3372  000F62  2A0C               	incf	___awdiv@divisor+1,f,c
  3373  000F64  0E01               	movlw	1
  3374  000F66  6E0E               	movwf	___awdiv@sign,c
  3375  000F68                     l1922:
  3376  000F68  AE0A               	btfss	___awdiv@dividend+1,7,c
  3377  000F6A  D006               	goto	l1928
  3378  000F6C  6C09               	negf	___awdiv@dividend,c
  3379  000F6E  1E0A               	comf	___awdiv@dividend+1,f,c
  3380  000F70  B0D8               	btfsc	status,0,c
  3381  000F72  2A0A               	incf	___awdiv@dividend+1,f,c
  3382  000F74  0E01               	movlw	1
  3383  000F76  1A0E               	xorwf	___awdiv@sign,f,c
  3384  000F78                     l1928:
  3385  000F78  0E00               	movlw	0
  3386  000F7A  6E10               	movwf	___awdiv@quotient+1,c
  3387  000F7C  0E00               	movlw	0
  3388  000F7E  6E0F               	movwf	___awdiv@quotient,c
  3389  000F80  500B               	movf	___awdiv@divisor,w,c
  3390  000F82  100C               	iorwf	___awdiv@divisor+1,w,c
  3391  000F84  B4D8               	btfsc	status,2,c
  3392  000F86  D01C               	goto	l1950
  3393  000F88  0E01               	movlw	1
  3394  000F8A  6E0D               	movwf	___awdiv@counter,c
  3395  000F8C  D004               	goto	l1936
  3396  000F8E                     l1934:
  3397  000F8E  90D8               	bcf	status,0,c
  3398  000F90  360B               	rlcf	___awdiv@divisor,f,c
  3399  000F92  360C               	rlcf	___awdiv@divisor+1,f,c
  3400  000F94  2A0D               	incf	___awdiv@counter,f,c
  3401  000F96                     l1936:
  3402  000F96  AE0C               	btfss	___awdiv@divisor+1,7,c
  3403  000F98  D7FA               	goto	l1934
  3404  000F9A                     u1210:
  3405  000F9A  90D8               	bcf	status,0,c
  3406  000F9C  360F               	rlcf	___awdiv@quotient,f,c
  3407  000F9E  3610               	rlcf	___awdiv@quotient+1,f,c
  3408  000FA0  500B               	movf	___awdiv@divisor,w,c
  3409  000FA2  5C09               	subwf	___awdiv@dividend,w,c
  3410  000FA4  500C               	movf	___awdiv@divisor+1,w,c
  3411  000FA6  580A               	subwfb	___awdiv@dividend+1,w,c
  3412  000FA8  A0D8               	btfss	status,0,c
  3413  000FAA  D005               	goto	l1946
  3414  000FAC  500B               	movf	___awdiv@divisor,w,c
  3415  000FAE  5E09               	subwf	___awdiv@dividend,f,c
  3416  000FB0  500C               	movf	___awdiv@divisor+1,w,c
  3417  000FB2  5A0A               	subwfb	___awdiv@dividend+1,f,c
  3418  000FB4  800F               	bsf	___awdiv@quotient,0,c
  3419  000FB6                     l1946:
  3420  000FB6  90D8               	bcf	status,0,c
  3421  000FB8  320C               	rrcf	___awdiv@divisor+1,f,c
  3422  000FBA  320B               	rrcf	___awdiv@divisor,f,c
  3423  000FBC  2E0D               	decfsz	___awdiv@counter,f,c
  3424  000FBE  D7ED               	goto	u1210
  3425  000FC0                     l1950:
  3426  000FC0  500E               	movf	___awdiv@sign,w,c
  3427  000FC2  B4D8               	btfsc	status,2,c
  3428  000FC4  D004               	goto	l1954
  3429  000FC6  6C0F               	negf	___awdiv@quotient,c
  3430  000FC8  1E10               	comf	___awdiv@quotient+1,f,c
  3431  000FCA  B0D8               	btfsc	status,0,c
  3432  000FCC  2A10               	incf	___awdiv@quotient+1,f,c
  3433  000FCE                     l1954:
  3434  000FCE  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  3435  000FD2  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  3436  000FD6  0012               	return		;funcret
  3437  000FD8                     __end_of___awdiv:
  3438                           	opt callstack 0
  3439                           
  3440 ;; *************** function _display_RFID *****************
  3441 ;; Defined at:
  3442 ;;		line 109 in file "RFID.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  3445 ;;		 -> RFIDbuf(12), 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  i               2   15[COMRAM] int 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3457 ;;      Params:         2       0       0       0
  3458 ;;      Locals:         2       0       0       0
  3459 ;;      Temps:          0       0       0       0
  3460 ;;      Totals:         4       0       0       0
  3461 ;;Total ram usage:        4 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    7
  3464 ;; This function calls:
  3465 ;;		_ClearLCD
  3466 ;;		_SendLCD
  3467 ;;		_SetLine
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text22
  3474  0011A2                     __ptext22:
  3475                           	opt callstack 0
  3476  0011A2                     _display_RFID:
  3477                           	opt callstack 23
  3478                           
  3479                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  3480                           
  3481                           ;incstack = 0
  3482  0011A2  ECF0  F009         	call	_ClearLCD	;wreg free
  3483                           
  3484                           ;RFID.c: 112:     SetLine(1);
  3485  0011A6  0E01               	movlw	1
  3486  0011A8  EC75  F009         	call	_SetLine
  3487                           
  3488                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  3489  0011AC  0E00               	movlw	0
  3490  0011AE  6E11               	movwf	display_RFID@i+1,c
  3491  0011B0  0E00               	movlw	0
  3492  0011B2  6E10               	movwf	display_RFID@i,c
  3493  0011B4                     l2172:
  3494                           
  3495                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  3496  0011B4  0E01               	movlw	1
  3497  0011B6  6E0B               	movwf	SendLCD@type,c
  3498  0011B8  5010               	movf	display_RFID@i,w,c
  3499  0011BA  240E               	addwf	display_RFID@dataBuf,w,c
  3500  0011BC  6ED9               	movwf	fsr2l,c
  3501  0011BE  5011               	movf	display_RFID@i+1,w,c
  3502  0011C0  200F               	addwfc	display_RFID@dataBuf+1,w,c
  3503  0011C2  6EDA               	movwf	fsr2h,c
  3504  0011C4  50DF               	movf	indf2,w,c
  3505  0011C6  EC46  F009         	call	_SendLCD
  3506                           
  3507                           ;RFID.c: 116:     }
  3508  0011CA  4A10               	infsnz	display_RFID@i,f,c
  3509  0011CC  2A11               	incf	display_RFID@i+1,f,c
  3510  0011CE  BE11               	btfsc	display_RFID@i+1,7,c
  3511  0011D0  D7F1               	goto	l2172
  3512  0011D2  5011               	movf	display_RFID@i+1,w,c
  3513  0011D4  E105               	bnz	u1410
  3514  0011D6  0E0A               	movlw	10
  3515  0011D8  5C10               	subwf	display_RFID@i,w,c
  3516  0011DA  B0D8               	btfsc	status,0,c
  3517  0011DC  0012               	return	
  3518  0011DE  D7EA               	goto	l2172
  3519  0011E0                     u1410:
  3520  0011E0  0012               	return		;funcret
  3521  0011E2                     __end_of_display_RFID:
  3522                           	opt callstack 0
  3523                           
  3524 ;; *************** function _ClearLCD *****************
  3525 ;; Defined at:
  3526 ;;		line 137 in file "LCDIO.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3540 ;;      Params:         0       0       0       0
  3541 ;;      Locals:         0       0       0       0
  3542 ;;      Temps:          1       0       0       0
  3543 ;;      Totals:         1       0       0       0
  3544 ;;Total ram usage:        1 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    6
  3547 ;; This function calls:
  3548 ;;		_SendLCD
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;;		_display_RFID
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text23
  3556  0013E0                     __ptext23:
  3557                           	opt callstack 0
  3558  0013E0                     _ClearLCD:
  3559                           	opt callstack 23
  3560                           
  3561                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  3562                           
  3563                           ;incstack = 0
  3564  0013E0  0E00               	movlw	0
  3565  0013E2  6E0B               	movwf	SendLCD@type,c
  3566  0013E4  0E01               	movlw	1
  3567  0013E6  EC46  F009         	call	_SendLCD
  3568                           
  3569                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3570  0013EA  0E0D               	movlw	13
  3571  0013EC  6E0D               	movwf	??_ClearLCD& (0+255),c
  3572  0013EE  0EFC               	movlw	252
  3573  0013F0                     u2257:
  3574  0013F0  2EE8               	decfsz	wreg,f,c
  3575  0013F2  D7FE               	bra	u2257
  3576  0013F4  2E0D               	decfsz	??_ClearLCD& (0+255),f,c
  3577  0013F6  D7FC               	bra	u2257
  3578  0013F8  0012               	return		;funcret
  3579  0013FA                     __end_of_ClearLCD:
  3580                           	opt callstack 0
  3581                           
  3582 ;; *************** function _classify_data *****************
  3583 ;; Defined at:
  3584 ;;		line 45 in file "signal_processing.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  left_smoothe    2    8[COMRAM] int 
  3587 ;;  right_smooth    2   10[COMRAM] int 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  difference      2   12[COMRAM] int 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      unsigned char 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3599 ;;      Params:         4       0       0       0
  3600 ;;      Locals:         2       0       0       0
  3601 ;;      Temps:          0       0       0       0
  3602 ;;      Totals:         6       0       0       0
  3603 ;;Total ram usage:        6 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    3
  3606 ;; This function calls:
  3607 ;;		Nothing
  3608 ;; This function is called by:
  3609 ;;		_main
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text24
  3614  0011E2                     __ptext24:
  3615                           	opt callstack 0
  3616  0011E2                     _classify_data:
  3617                           	opt callstack 27
  3618                           
  3619                           ;signal_processing.c: 45: char classify_data(int left_smoothed, int right_smoothed);sign
      +                          al_processing.c: 46: {;signal_processing.c: 47:     int difference = left_smoothed - rig
      +                          ht_smoothed;
  3620                           
  3621                           ;incstack = 0
  3622  0011E2  500B               	movf	classify_data@right_smoothed,w,c
  3623  0011E4  5C09               	subwf	classify_data@left_smoothed,w,c
  3624  0011E6  6E0D               	movwf	classify_data@difference,c
  3625  0011E8  500C               	movf	classify_data@right_smoothed+1,w,c
  3626  0011EA  580A               	subwfb	classify_data@left_smoothed+1,w,c
  3627  0011EC  6E0E               	movwf	classify_data@difference+1,c
  3628                           
  3629                           ;signal_processing.c: 50:     if(difference < 5 && difference > -5)
  3630  0011EE  BE0E               	btfsc	classify_data@difference+1,7,c
  3631  0011F0  D006               	goto	u1380
  3632  0011F2  500E               	movf	classify_data@difference+1,w,c
  3633  0011F4  E10E               	bnz	l2140
  3634  0011F6  0E05               	movlw	5
  3635  0011F8  5C0D               	subwf	classify_data@difference,w,c
  3636  0011FA  B0D8               	btfsc	status,0,c
  3637  0011FC  D00A               	goto	l2140
  3638  0011FE                     u1380:
  3639  0011FE  AE0E               	btfss	classify_data@difference+1,7,c
  3640  001200  D006               	goto	u1390
  3641  001202  0EFC               	movlw	252
  3642  001204  5C0D               	subwf	classify_data@difference,w,c
  3643  001206  0EFF               	movlw	255
  3644  001208  580E               	subwfb	classify_data@difference+1,w,c
  3645  00120A  A0D8               	btfss	status,0,c
  3646  00120C  D002               	goto	l2140
  3647  00120E                     u1390:
  3648                           
  3649                           ;signal_processing.c: 51:     {;signal_processing.c: 52:         return 3;
  3650  00120E  0E03               	movlw	3
  3651  001210  0012               	return	
  3652  001212                     l2140:
  3653  001212  AE0E               	btfss	classify_data@difference+1,7,c
  3654  001214  D002               	goto	l2148
  3655                           
  3656                           ;signal_processing.c: 56:     {;signal_processing.c: 57:         return 2;
  3657  001216  0E02               	movlw	2
  3658  001218  0012               	return	
  3659  00121A                     l2148:
  3660                           
  3661                           ;signal_processing.c: 61:     {;signal_processing.c: 62:         return 1;
  3662  00121A  0E01               	movlw	1
  3663  00121C  0012               	return		;funcret
  3664  00121E                     __end_of_classify_data:
  3665                           	opt callstack 0
  3666                           
  3667 ;; *************** function _check_RFID *****************
  3668 ;; Defined at:
  3669 ;;		line 72 in file "RFID.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  dataBuf         2   14[COMRAM] PTR unsigned char 
  3672 ;;		 -> RFIDbuf(12), 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  i               2   36[COMRAM] int 
  3675 ;;  hexBuf         12   18[COMRAM] unsigned char [12]
  3676 ;;  checksum        1   35[COMRAM] unsigned char 
  3677 ;;  byte5           1   34[COMRAM] unsigned char 
  3678 ;;  byte4           1   33[COMRAM] unsigned char 
  3679 ;;  byte3           1   32[COMRAM] unsigned char 
  3680 ;;  byte2           1   31[COMRAM] unsigned char 
  3681 ;;  byte1           1   30[COMRAM] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3691 ;;      Params:         2       0       0       0
  3692 ;;      Locals:        20       0       0       0
  3693 ;;      Temps:          2       0       0       0
  3694 ;;      Totals:        24       0       0       0
  3695 ;;Total ram usage:       24 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    7
  3698 ;; This function calls:
  3699 ;;		_LCD_String
  3700 ;;		_SetLine
  3701 ;; This function is called by:
  3702 ;;		_main
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text25
  3707  0007EE                     __ptext25:
  3708                           	opt callstack 0
  3709  0007EE                     _check_RFID:
  3710                           	opt callstack 23
  3711                           
  3712                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  3713                           
  3714                           ;incstack = 0
  3715  0007EE  0E00               	movlw	0
  3716  0007F0  6E26               	movwf	check_RFID@i+1,c
  3717  0007F2  0E00               	movlw	0
  3718  0007F4  6E25               	movwf	check_RFID@i,c
  3719  0007F6                     l2184:
  3720                           
  3721                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  3722  0007F6  5025               	movf	check_RFID@i,w,c
  3723  0007F8  240F               	addwf	check_RFID@dataBuf,w,c
  3724  0007FA  6ED9               	movwf	fsr2l,c
  3725  0007FC  5026               	movf	check_RFID@i+1,w,c
  3726  0007FE  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3727  000800  6EDA               	movwf	fsr2h,c
  3728  000802  0E2F               	movlw	47
  3729  000804  64DF               	cpfsgt	indf2,c
  3730  000806  D018               	goto	l2190
  3731  000808  5025               	movf	check_RFID@i,w,c
  3732  00080A  240F               	addwf	check_RFID@dataBuf,w,c
  3733  00080C  6ED9               	movwf	fsr2l,c
  3734  00080E  5026               	movf	check_RFID@i+1,w,c
  3735  000810  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3736  000812  6EDA               	movwf	fsr2h,c
  3737  000814  0E3A               	movlw	58
  3738  000816  60DF               	cpfslt	indf2,c
  3739  000818  D00F               	goto	l2190
  3740                           
  3741                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  3742  00081A  0E13               	movlw	low check_RFID@hexBuf
  3743  00081C  2425               	addwf	check_RFID@i,w,c
  3744  00081E  6ED9               	movwf	fsr2l,c
  3745  000820  0E00               	movlw	high check_RFID@hexBuf
  3746  000822  2026               	addwfc	check_RFID@i+1,w,c
  3747  000824  6EDA               	movwf	fsr2h,c
  3748  000826  5025               	movf	check_RFID@i,w,c
  3749  000828  240F               	addwf	check_RFID@dataBuf,w,c
  3750  00082A  6EE1               	movwf	fsr1l,c
  3751  00082C  5026               	movf	check_RFID@i+1,w,c
  3752  00082E  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3753  000830  6EE2               	movwf	fsr1h,c
  3754  000832  50E7               	movf	indf1,w,c
  3755  000834  0FD0               	addlw	208
  3756  000836  D020               	goto	L1
  3757  000838                     l2190:
  3758  000838  5025               	movf	check_RFID@i,w,c
  3759  00083A  240F               	addwf	check_RFID@dataBuf,w,c
  3760  00083C  6ED9               	movwf	fsr2l,c
  3761  00083E  5026               	movf	check_RFID@i+1,w,c
  3762  000840  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3763  000842  6EDA               	movwf	fsr2h,c
  3764  000844  0E40               	movlw	64
  3765  000846  64DF               	cpfsgt	indf2,c
  3766  000848  D018               	goto	l2196
  3767  00084A  5025               	movf	check_RFID@i,w,c
  3768  00084C  240F               	addwf	check_RFID@dataBuf,w,c
  3769  00084E  6ED9               	movwf	fsr2l,c
  3770  000850  5026               	movf	check_RFID@i+1,w,c
  3771  000852  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3772  000854  6EDA               	movwf	fsr2h,c
  3773  000856  0E47               	movlw	71
  3774  000858  60DF               	cpfslt	indf2,c
  3775  00085A  D00F               	goto	l2196
  3776                           
  3777                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  3778  00085C  0E13               	movlw	low check_RFID@hexBuf
  3779  00085E  2425               	addwf	check_RFID@i,w,c
  3780  000860  6ED9               	movwf	fsr2l,c
  3781  000862  0E00               	movlw	high check_RFID@hexBuf
  3782  000864  2026               	addwfc	check_RFID@i+1,w,c
  3783  000866  6EDA               	movwf	fsr2h,c
  3784  000868  5025               	movf	check_RFID@i,w,c
  3785  00086A  240F               	addwf	check_RFID@dataBuf,w,c
  3786  00086C  6EE1               	movwf	fsr1l,c
  3787  00086E  5026               	movf	check_RFID@i+1,w,c
  3788  000870  2010               	addwfc	check_RFID@dataBuf+1,w,c
  3789  000872  6EE2               	movwf	fsr1h,c
  3790  000874  50E7               	movf	indf1,w,c
  3791  000876  0FC9               	addlw	201
  3792  000878                     L1:
  3793  000878  6EDF               	movwf	indf2,c
  3794  00087A                     l2196:
  3795                           
  3796                           ;RFID.c: 86:     }
  3797  00087A  4A25               	infsnz	check_RFID@i,f,c
  3798  00087C  2A26               	incf	check_RFID@i+1,f,c
  3799  00087E  BE26               	btfsc	check_RFID@i+1,7,c
  3800  000880  D7BA               	goto	l2184
  3801  000882  5026               	movf	check_RFID@i+1,w,c
  3802  000884  E104               	bnz	u1460
  3803  000886  0E0C               	movlw	12
  3804  000888  5C25               	subwf	check_RFID@i,w,c
  3805  00088A  A0D8               	btfss	status,0,c
  3806  00088C  D7B4               	goto	l2184
  3807  00088E                     u1460:
  3808                           
  3809                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  3810  00088E  5013               	movf	check_RFID@hexBuf,w,c
  3811  000890  A4D8               	btfss	status,2,c
  3812  000892  D002               	goto	u1470
  3813  000894  0E01               	movlw	1
  3814  000896  D001               	goto	u1480
  3815  000898                     u1470:
  3816  000898  0E00               	movlw	0
  3817  00089A                     u1480:
  3818  00089A  1014               	iorwf	check_RFID@hexBuf+1,w,c
  3819  00089C  6E1F               	movwf	check_RFID@byte1,c
  3820                           
  3821                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  3822  00089E  5015               	movf	check_RFID@hexBuf+2,w,c
  3823  0008A0  A4D8               	btfss	status,2,c
  3824  0008A2  D002               	goto	u1490
  3825  0008A4  0E01               	movlw	1
  3826  0008A6  D001               	goto	u1500
  3827  0008A8                     u1490:
  3828  0008A8  0E00               	movlw	0
  3829  0008AA                     u1500:
  3830  0008AA  1016               	iorwf	check_RFID@hexBuf+3,w,c
  3831  0008AC  6E20               	movwf	check_RFID@byte2,c
  3832                           
  3833                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  3834  0008AE  5017               	movf	check_RFID@hexBuf+4,w,c
  3835  0008B0  A4D8               	btfss	status,2,c
  3836  0008B2  D002               	goto	u1510
  3837  0008B4  0E01               	movlw	1
  3838  0008B6  D001               	goto	u1520
  3839  0008B8                     u1510:
  3840  0008B8  0E00               	movlw	0
  3841  0008BA                     u1520:
  3842  0008BA  1018               	iorwf	check_RFID@hexBuf+5,w,c
  3843  0008BC  6E21               	movwf	check_RFID@byte3,c
  3844                           
  3845                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  3846  0008BE  5019               	movf	check_RFID@hexBuf+6,w,c
  3847  0008C0  A4D8               	btfss	status,2,c
  3848  0008C2  D002               	goto	u1530
  3849  0008C4  0E01               	movlw	1
  3850  0008C6  D001               	goto	u1540
  3851  0008C8                     u1530:
  3852  0008C8  0E00               	movlw	0
  3853  0008CA                     u1540:
  3854  0008CA  101A               	iorwf	check_RFID@hexBuf+7,w,c
  3855  0008CC  6E22               	movwf	check_RFID@byte4,c
  3856                           
  3857                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  3858  0008CE  501B               	movf	check_RFID@hexBuf+8,w,c
  3859  0008D0  A4D8               	btfss	status,2,c
  3860  0008D2  D002               	goto	u1550
  3861  0008D4  0E01               	movlw	1
  3862  0008D6  D001               	goto	u1560
  3863  0008D8                     u1550:
  3864  0008D8  0E00               	movlw	0
  3865  0008DA                     u1560:
  3866  0008DA  101C               	iorwf	check_RFID@hexBuf+9,w,c
  3867  0008DC  6E23               	movwf	check_RFID@byte5,c
  3868                           
  3869                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  3870  0008DE  501D               	movf	check_RFID@hexBuf+10,w,c
  3871  0008E0  A4D8               	btfss	status,2,c
  3872  0008E2  D002               	goto	u1570
  3873  0008E4  0E01               	movlw	1
  3874  0008E6  D001               	goto	u1580
  3875  0008E8                     u1570:
  3876  0008E8  0E00               	movlw	0
  3877  0008EA                     u1580:
  3878  0008EA  101E               	iorwf	check_RFID@hexBuf+11,w,c
  3879  0008EC  6E24               	movwf	check_RFID@checksum,c
  3880                           
  3881                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  3882  0008EE  501F               	movf	check_RFID@byte1,w,c
  3883  0008F0  1820               	xorwf	check_RFID@byte2,w,c
  3884  0008F2  1821               	xorwf	check_RFID@byte3,w,c
  3885  0008F4  1822               	xorwf	check_RFID@byte4,w,c
  3886  0008F6  6E11               	movwf	??_check_RFID& (0+255),c
  3887  0008F8  6A12               	clrf	(??_check_RFID+1)& (0+255),c
  3888  0008FA  5024               	movf	check_RFID@checksum,w,c
  3889  0008FC  1823               	xorwf	check_RFID@byte5,w,c
  3890  0008FE  A4D8               	btfss	status,2,c
  3891  000900  D002               	goto	u1590
  3892  000902  0E01               	movlw	1
  3893  000904  D001               	goto	u1600
  3894  000906                     u1590:
  3895  000906  0E00               	movlw	0
  3896  000908                     u1600:
  3897  000908  1A11               	xorwf	??_check_RFID,f,c
  3898  00090A  0E00               	movlw	0
  3899  00090C  1A12               	xorwf	??_check_RFID+1,f,c
  3900  00090E  5011               	movf	??_check_RFID,w,c
  3901  000910  1012               	iorwf	??_check_RFID+1,w,c
  3902  000912  B4D8               	btfsc	status,2,c
  3903  000914  D00A               	goto	l2206
  3904                           
  3905                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  3906  000916  0E02               	movlw	2
  3907  000918  EC75  F009         	call	_SetLine
  3908                           
  3909                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  3910  00091C  0E11               	movlw	low STR_4
  3911  00091E  6E0D               	movwf	LCD_String@string,c
  3912  000920  0E03               	movlw	high STR_4
  3913  000922  6E0E               	movwf	LCD_String@string+1,c
  3914  000924  EC28  F008         	call	_LCD_String	;wreg free
  3915                           
  3916                           ;RFID.c: 101:     }
  3917  000928  0012               	return	
  3918  00092A                     l2206:
  3919                           
  3920                           ;RFID.c: 104:         SetLine(2);
  3921  00092A  0E02               	movlw	2
  3922  00092C  EC75  F009         	call	_SetLine
  3923                           
  3924                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  3925  000930  0E01               	movlw	low STR_5
  3926  000932  6E0D               	movwf	LCD_String@string,c
  3927  000934  0E03               	movlw	high STR_5
  3928  000936  6E0E               	movwf	LCD_String@string+1,c
  3929  000938  EC28  F008         	call	_LCD_String	;wreg free
  3930  00093C  0012               	return		;funcret
  3931  00093E                     __end_of_check_RFID:
  3932                           	opt callstack 0
  3933                           
  3934 ;; *************** function _SetLine *****************
  3935 ;; Defined at:
  3936 ;;		line 107 in file "LCDIO.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  line            1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  line            1   12[COMRAM] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3950 ;;      Params:         0       0       0       0
  3951 ;;      Locals:         1       0       0       0
  3952 ;;      Temps:          0       0       0       0
  3953 ;;      Totals:         1       0       0       0
  3954 ;;Total ram usage:        1 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    6
  3957 ;; This function calls:
  3958 ;;		_SendLCD
  3959 ;; This function is called by:
  3960 ;;		_main
  3961 ;;		_check_RFID
  3962 ;;		_display_RFID
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text26
  3967  0012EA                     __ptext26:
  3968                           	opt callstack 0
  3969  0012EA                     _SetLine:
  3970                           	opt callstack 23
  3971                           
  3972                           ;incstack = 0
  3973                           ;SetLine@line stored from wreg
  3974  0012EA  6E0D               	movwf	SetLine@line,c
  3975                           
  3976                           ;LCDIO.c: 109:     if(line == 1){
  3977  0012EC  040D               	decf	SetLine@line,w,c
  3978  0012EE  A4D8               	btfss	status,2,c
  3979  0012F0  D005               	goto	l2022
  3980                           
  3981                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  3982  0012F2  0E00               	movlw	0
  3983  0012F4  6E0B               	movwf	SendLCD@type,c
  3984  0012F6  0E80               	movlw	128
  3985  0012F8  EC46  F009         	call	_SendLCD
  3986  0012FC                     l2022:
  3987                           
  3988                           ;LCDIO.c: 113:     if(line == 2){
  3989  0012FC  0E02               	movlw	2
  3990  0012FE  180D               	xorwf	SetLine@line,w,c
  3991  001300  A4D8               	btfss	status,2,c
  3992  001302  D005               	goto	l2026
  3993                           
  3994                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  3995  001304  0E00               	movlw	0
  3996  001306  6E0B               	movwf	SendLCD@type,c
  3997  001308  0EC0               	movlw	192
  3998  00130A  EC46  F009         	call	_SendLCD
  3999  00130E                     l2026:
  4000                           
  4001                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4002  00130E  0E21               	movlw	33
  4003  001310                     u2267:
  4004  001310  2EE8               	decfsz	wreg,f,c
  4005  001312  D7FE               	bra	u2267
  4006  001314  F000               	nop	
  4007  001316  0012               	return		;funcret
  4008  001318                     __end_of_SetLine:
  4009                           	opt callstack 0
  4010                           
  4011 ;; *************** function _LCD_String *****************
  4012 ;; Defined at:
  4013 ;;		line 119 in file "LCDIO.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  string          2   12[COMRAM] PTR unsigned char 
  4016 ;;		 -> STR_5(16), STR_4(16), STR_3(16), main@temp1(16), 
  4017 ;;		 -> main@temp2(16), 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      void 
  4022 ;; Registers used:
  4023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4029 ;;      Params:         2       0       0       0
  4030 ;;      Locals:         0       0       0       0
  4031 ;;      Temps:          0       0       0       0
  4032 ;;      Totals:         2       0       0       0
  4033 ;;Total ram usage:        2 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    6
  4036 ;; This function calls:
  4037 ;;		_SendLCD
  4038 ;; This function is called by:
  4039 ;;		_main
  4040 ;;		_check_RFID
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           	psect	text27
  4045  001050                     __ptext27:
  4046                           	opt callstack 0
  4047  001050                     _LCD_String:
  4048                           	opt callstack 23
  4049                           
  4050                           ;LCDIO.c: 121: while(*string != 0){
  4051                           
  4052                           ;incstack = 0
  4053  001050  D01A               	goto	l2036
  4054  001052                     l2030:
  4055                           
  4056                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4057  001052  0E01               	movlw	1
  4058  001054  6E0B               	movwf	SendLCD@type,c
  4059  001056  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4060  00105A  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4061  00105E  6AF8               	clrf	tblptru,c
  4062  001060  0E02               	movlw	(high __ramtop+-1)
  4063  001062  64F7               	cpfsgt	tblptrh,c
  4064  001064  D003               	bra	u1267
  4065  001066  0008               	tblrd		*
  4066  001068  50F5               	movf	tablat,w,c
  4067  00106A  D005               	bra	u1260
  4068  00106C                     u1267:
  4069  00106C  CFF6 FFE1          	movff	tblptrl,fsr1l
  4070  001070  CFF7 FFE2          	movff	tblptrh,fsr1h
  4071  001074  50E7               	movf	indf1,w,c
  4072  001076                     u1260:
  4073  001076  EC46  F009         	call	_SendLCD
  4074  00107A  4A0D               	infsnz	LCD_String@string,f,c
  4075  00107C  2A0E               	incf	LCD_String@string+1,f,c
  4076                           
  4077                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4078  00107E  0E21               	movlw	33
  4079  001080                     u2277:
  4080  001080  2EE8               	decfsz	wreg,f,c
  4081  001082  D7FE               	bra	u2277
  4082  001084  F000               	nop	
  4083  001086                     l2036:
  4084                           
  4085                           ;LCDIO.c: 121: while(*string != 0){
  4086  001086  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4087  00108A  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4088  00108E  6AF8               	clrf	tblptru,c
  4089  001090  0E02               	movlw	(high __ramtop+-1)
  4090  001092  64F7               	cpfsgt	tblptrh,c
  4091  001094  D003               	bra	u1277
  4092  001096  0008               	tblrd		*
  4093  001098  50F5               	movf	tablat,w,c
  4094  00109A  D005               	bra	u1270
  4095  00109C                     u1277:
  4096  00109C  CFF6 FFE1          	movff	tblptrl,fsr1l
  4097  0010A0  CFF7 FFE2          	movff	tblptrh,fsr1h
  4098  0010A4  50E7               	movf	indf1,w,c
  4099  0010A6                     u1270:
  4100  0010A6  0900               	iorlw	0
  4101  0010A8  B4D8               	btfsc	status,2,c
  4102  0010AA  0012               	return	
  4103  0010AC  D7D2               	goto	l2030
  4104  0010AE                     __end_of_LCD_String:
  4105                           	opt callstack 0
  4106                           
  4107 ;; *************** function _SendLCD *****************
  4108 ;; Defined at:
  4109 ;;		line 44 in file "LCDIO.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  Byte            1    wreg     unsigned char 
  4112 ;;  type            1   10[COMRAM] unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  Byte            1   11[COMRAM] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4124 ;;      Params:         1       0       0       0
  4125 ;;      Locals:         1       0       0       0
  4126 ;;      Temps:          0       0       0       0
  4127 ;;      Totals:         2       0       0       0
  4128 ;;Total ram usage:        2 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    5
  4131 ;; This function calls:
  4132 ;;		_LCDout
  4133 ;; This function is called by:
  4134 ;;		_init_LCD
  4135 ;;		_SetLine
  4136 ;;		_LCD_String
  4137 ;;		_ClearLCD
  4138 ;;		_display_RFID
  4139 ;;		_ShiftLeft
  4140 ;;		_ShiftRight
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text28
  4145  00128C                     __ptext28:
  4146                           	opt callstack 0
  4147  00128C                     _SendLCD:
  4148                           	opt callstack 23
  4149                           
  4150                           ;incstack = 0
  4151                           ;SendLCD@Byte stored from wreg
  4152  00128C  6E0C               	movwf	SendLCD@Byte,c
  4153                           
  4154                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4155  00128E  B00B               	btfsc	SendLCD@type,0,c
  4156  001290  D002               	bra	u1145
  4157  001292  9E89               	bcf	3977,7,c	;volatile
  4158  001294  D001               	bra	u1146
  4159  001296                     u1145:
  4160  001296  8E89               	bsf	3977,7,c	;volatile
  4161  001298                     u1146:
  4162                           
  4163                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4164  001298  380C               	swapf	SendLCD@Byte,w,c
  4165  00129A  0B0F               	andlw	15
  4166  00129C  0B0F               	andlw	15
  4167  00129E  ECEC  F007         	call	_LCDout
  4168                           
  4169                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4170  0012A2  0E06               	movlw	6
  4171  0012A4                     u2287:
  4172  0012A4  2EE8               	decfsz	wreg,f,c
  4173  0012A6  D7FE               	bra	u2287
  4174  0012A8  D000               	nop2	
  4175                           
  4176                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4177  0012AA  500C               	movf	SendLCD@Byte,w,c
  4178  0012AC  0B0F               	andlw	15
  4179  0012AE  ECEC  F007         	call	_LCDout
  4180                           
  4181                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4182  0012B2  0E21               	movlw	33
  4183  0012B4                     u2297:
  4184  0012B4  2EE8               	decfsz	wreg,f,c
  4185  0012B6  D7FE               	bra	u2297
  4186  0012B8  F000               	nop	
  4187  0012BA  0012               	return		;funcret
  4188  0012BC                     __end_of_SendLCD:
  4189                           	opt callstack 0
  4190                           
  4191 ;; *************** function _LCDout *****************
  4192 ;; Defined at:
  4193 ;;		line 31 in file "LCDIO.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  number          1    wreg     unsigned char 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  number          1    9[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4207 ;;      Params:         0       0       0       0
  4208 ;;      Locals:         1       0       0       0
  4209 ;;      Temps:          1       0       0       0
  4210 ;;      Totals:         2       0       0       0
  4211 ;;Total ram usage:        2 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    4
  4214 ;; This function calls:
  4215 ;;		_E_TOG
  4216 ;; This function is called by:
  4217 ;;		_SendLCD
  4218 ;;		_init_LCD
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text29
  4223  000FD8                     __ptext29:
  4224                           	opt callstack 0
  4225  000FD8                     _LCDout:
  4226                           	opt callstack 23
  4227                           
  4228                           ;incstack = 0
  4229                           ;LCDout@number stored from wreg
  4230  000FD8  6E0A               	movwf	LCDout@number,c
  4231                           
  4232                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4233  000FDA  C00A  F009         	movff	LCDout@number,??_LCDout
  4234  000FDE  0E01               	movlw	1
  4235  000FE0  1609               	andwf	??_LCDout,f,c
  4236  000FE2  508B               	movf	3979,w,c	;volatile
  4237  000FE4  1809               	xorwf	??_LCDout,w,c
  4238  000FE6  0BFE               	andlw	-2
  4239  000FE8  1809               	xorwf	??_LCDout,w,c
  4240  000FEA  6E8B               	movwf	3979,c	;volatile
  4241                           
  4242                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4243  000FEC  C00A  F009         	movff	LCDout@number,??_LCDout
  4244  000FF0  90D8               	bcf	status,0,c
  4245  000FF2  3209               	rrcf	??_LCDout,f,c
  4246  000FF4  0E01               	movlw	1
  4247  000FF6  1609               	andwf	??_LCDout,f,c
  4248  000FF8  4609               	rlncf	??_LCDout,f,c
  4249  000FFA  4609               	rlncf	??_LCDout,f,c
  4250  000FFC  4609               	rlncf	??_LCDout,f,c
  4251  000FFE  508B               	movf	3979,w,c	;volatile
  4252  001000  1809               	xorwf	??_LCDout,w,c
  4253  001002  0BF7               	andlw	-9
  4254  001004  1809               	xorwf	??_LCDout,w,c
  4255  001006  6E8B               	movwf	3979,c	;volatile
  4256                           
  4257                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4258  001008  C00A  F009         	movff	LCDout@number,??_LCDout
  4259  00100C  90D8               	bcf	status,0,c
  4260  00100E  3209               	rrcf	??_LCDout,f,c
  4261  001010  90D8               	bcf	status,0,c
  4262  001012  3209               	rrcf	??_LCDout,f,c
  4263  001014  0E01               	movlw	1
  4264  001016  1609               	andwf	??_LCDout,f,c
  4265  001018  508C               	movf	3980,w,c	;volatile
  4266  00101A  1809               	xorwf	??_LCDout,w,c
  4267  00101C  0BFE               	andlw	-2
  4268  00101E  1809               	xorwf	??_LCDout,w,c
  4269  001020  6E8C               	movwf	3980,c	;volatile
  4270                           
  4271                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4272  001022  C00A  F009         	movff	LCDout@number,??_LCDout
  4273  001026  90D8               	bcf	status,0,c
  4274  001028  3209               	rrcf	??_LCDout,f,c
  4275  00102A  90D8               	bcf	status,0,c
  4276  00102C  3209               	rrcf	??_LCDout,f,c
  4277  00102E  90D8               	bcf	status,0,c
  4278  001030  3209               	rrcf	??_LCDout,f,c
  4279  001032  0E01               	movlw	1
  4280  001034  1609               	andwf	??_LCDout,f,c
  4281  001036  4609               	rlncf	??_LCDout,f,c
  4282  001038  508C               	movf	3980,w,c	;volatile
  4283  00103A  1809               	xorwf	??_LCDout,w,c
  4284  00103C  0BFD               	andlw	-3
  4285  00103E  1809               	xorwf	??_LCDout,w,c
  4286  001040  6E8C               	movwf	3980,c	;volatile
  4287                           
  4288                           ;LCDIO.c: 39:  E_TOG();
  4289  001042  ECFD  F009         	call	_E_TOG	;wreg free
  4290                           
  4291                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4292  001046  0E03               	movlw	3
  4293  001048                     u2307:
  4294  001048  2EE8               	decfsz	wreg,f,c
  4295  00104A  D7FE               	bra	u2307
  4296  00104C  F000               	nop	
  4297  00104E  0012               	return		;funcret
  4298  001050                     __end_of_LCDout:
  4299                           	opt callstack 0
  4300                           
  4301 ;; *************** function _E_TOG *****************
  4302 ;; Defined at:
  4303 ;;		line 23 in file "LCDIO.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4317 ;;      Params:         0       0       0       0
  4318 ;;      Locals:         0       0       0       0
  4319 ;;      Temps:          0       0       0       0
  4320 ;;      Totals:         0       0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    3
  4324 ;; This function calls:
  4325 ;;		Nothing
  4326 ;; This function is called by:
  4327 ;;		_LCDout
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text30
  4332  0013FA                     __ptext30:
  4333                           	opt callstack 0
  4334  0013FA                     _E_TOG:
  4335                           	opt callstack 23
  4336                           
  4337                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4338                           
  4339                           ;incstack = 0
  4340  0013FA  8C89               	bsf	3977,6,c	;volatile
  4341                           
  4342                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4343  0013FC  0E03               	movlw	3
  4344  0013FE                     u2317:
  4345  0013FE  2EE8               	decfsz	wreg,f,c
  4346  001400  D7FE               	bra	u2317
  4347  001402  F000               	nop	
  4348                           
  4349                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4350  001404  9C89               	bcf	3977,6,c	;volatile
  4351  001406  0012               	return		;funcret
  4352  001408                     __end_of_E_TOG:
  4353                           	opt callstack 0
  4354                           
  4355 ;; *************** function _InterruptHandlerLow *****************
  4356 ;; Defined at:
  4357 ;;		line 77 in file "main.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		None
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4371 ;;      Params:         0       0       0       0
  4372 ;;      Locals:         0       0       0       0
  4373 ;;      Temps:          1       0       0       0
  4374 ;;      Totals:         1       0       0       0
  4375 ;;Total ram usage:        1 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    2
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		Interrupt level 1
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	intcodelo
  4386  000018                     __pintcodelo:
  4387                           	opt callstack 0
  4388  000018                     _InterruptHandlerLow:
  4389                           	opt callstack 20
  4390                           
  4391                           ;incstack = 0
  4392  000018  8056               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4393  00001A  CFE0 F008          	movff	bsr,??_InterruptHandlerLow
  4394  00001E  C008  FFE0         	movff	??_InterruptHandlerLow,bsr
  4395  000022  9056               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4396  000024  0010               	retfie	
  4397  000026                     __end_of_InterruptHandlerLow:
  4398                           	opt callstack 0
  4399                           
  4400 ;; *************** function _InterruptHandlerHigh *****************
  4401 ;; Defined at:
  4402 ;;		line 59 in file "main.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  throwaway       1    0        unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4416 ;;      Params:         0       0       0       0
  4417 ;;      Locals:         1       0       0       0
  4418 ;;      Temps:          2       0       0       0
  4419 ;;      Totals:         3       0       0       0
  4420 ;;Total ram usage:        3 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    1
  4423 ;; This function calls:
  4424 ;;		_processRFID
  4425 ;; This function is called by:
  4426 ;;		Interrupt level 2
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	intcode
  4431  000008                     __pintcode:
  4432                           	opt callstack 0
  4433  000008                     _InterruptHandlerHigh:
  4434                           	opt callstack 20
  4435                           
  4436                           ;incstack = 0
  4437  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4438  00000A  EF2B  F009         	goto	int_func
  4439                           
  4440                           	psect	intcode_body
  4441  001256                     __pintcode_body:
  4442                           	opt callstack 20
  4443  001256                     int_func:
  4444                           	opt callstack 20
  4445  001256  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4446  00125A  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4447                           
  4448                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4449  00125E  AA9E               	btfss	3998,5,c	;volatile
  4450  001260  D00E               	goto	i2l73
  4451  001262  5055               	movf	_robot_mode,w,c	;volatile
  4452  001264  A4D8               	btfss	status,2,c
  4453  001266  D00B               	goto	i2l73
  4454                           
  4455                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4456  001268  0EE2               	movlw	low _RFIDbuf
  4457  00126A  6E01               	movwf	processRFID@RFIDbuf,c
  4458  00126C  0E00               	movlw	high _RFIDbuf
  4459  00126E  6E02               	movwf	processRFID@RFIDbuf+1,c
  4460  001270  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4461  001274  ECAB  F008         	call	_processRFID	;wreg free
  4462  001278  0100               	movlb	0	; () banked
  4463  00127A  6FC1               	movwf	_RFID_flag& (0+255),b	;volatile
  4464                           
  4465                           ;main.c: 67:     }
  4466  00127C  D001               	goto	i2l75
  4467  00127E                     i2l73:
  4468  00127E  50AE               	movf	4014,w,c	;volatile
  4469  001280                     i2l75:
  4470  001280  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4471  001284  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4472  001288  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4473  00128A  0011               	retfie		f
  4474  00128C                     __end_of_InterruptHandlerHigh:
  4475                           	opt callstack 0
  4476                           
  4477 ;; *************** function _processRFID *****************
  4478 ;; Defined at:
  4479 ;;		line 34 in file "RFID.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  4482 ;;		 -> RFIDbuf(12), 
  4483 ;;  latestChar      1    2[COMRAM] unsigned char 
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  i               1    3[COMRAM] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      unsigned char 
  4488 ;; Registers used:
  4489 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4495 ;;      Params:         3       0       0       0
  4496 ;;      Locals:         1       0       0       0
  4497 ;;      Temps:          0       0       0       0
  4498 ;;      Totals:         4       0       0       0
  4499 ;;Total ram usage:        4 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		_InterruptHandlerHigh
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text33
  4509  001156                     __ptext33:
  4510                           	opt callstack 0
  4511  001156                     _processRFID:
  4512                           	opt callstack 20
  4513                           
  4514                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4515                           
  4516                           ;incstack = 0
  4517  001156  0E03               	movlw	3
  4518  001158  1803               	xorwf	processRFID@latestChar,w,c
  4519  00115A  A4D8               	btfss	status,2,c
  4520  00115C  D002               	goto	i2l2078
  4521                           
  4522                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4523  00115E  0E01               	movlw	1
  4524  001160  0012               	return	
  4525  001162                     i2l2078:
  4526                           
  4527                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4528  001162  0E02               	movlw	2
  4529  001164  1803               	xorwf	processRFID@latestChar,w,c
  4530  001166  A4D8               	btfss	status,2,c
  4531  001168  D012               	goto	i2l2098
  4532                           
  4533                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4534  00116A  0E00               	movlw	0
  4535  00116C  6E54               	movwf	processRFID@position_in_buf,c
  4536                           
  4537                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4538  00116E  0E00               	movlw	0
  4539  001170  6E04               	movwf	processRFID@i,c
  4540  001172                     i2l2086:
  4541                           
  4542                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4543  001172  5004               	movf	processRFID@i,w,c
  4544  001174  2401               	addwf	processRFID@RFIDbuf,w,c
  4545  001176  6ED9               	movwf	fsr2l,c
  4546  001178  0E00               	movlw	0
  4547  00117A  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4548  00117C  6EDA               	movwf	fsr2h,c
  4549  00117E  0E00               	movlw	0
  4550  001180  6EDF               	movwf	indf2,c
  4551                           
  4552                           ;RFID.c: 56:            }
  4553  001182  2A04               	incf	processRFID@i,f,c
  4554  001184  0E0B               	movlw	11
  4555  001186  6404               	cpfsgt	processRFID@i,c
  4556  001188  D7F4               	goto	i2l2086
  4557  00118A                     i2u137_40:
  4558                           
  4559                           ;RFID.c: 58:            return 0;
  4560  00118A  0E00               	movlw	0
  4561  00118C  0012               	return	
  4562  00118E                     i2l2098:
  4563                           
  4564                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  4565  00118E  5054               	movf	processRFID@position_in_buf,w,c
  4566  001190  2401               	addwf	processRFID@RFIDbuf,w,c
  4567  001192  6ED9               	movwf	fsr2l,c
  4568  001194  0E00               	movlw	0
  4569  001196  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4570  001198  6EDA               	movwf	fsr2h,c
  4571  00119A  C003  FFDF         	movff	processRFID@latestChar,indf2
  4572                           
  4573                           ;RFID.c: 64:             position_in_buf++;
  4574  00119E  2A54               	incf	processRFID@position_in_buf,f,c
  4575  0011A0  D7F4               	goto	i2u137_40
  4576  0011A2                     __end_of_processRFID:
  4577                           	opt callstack 0
  4578                           
  4579                           	psect	rparam
  4580  0000                     
  4581                           	psect	temp
  4582  000056                     btemp:
  4583                           	opt callstack 0
  4584  000056                     	ds	1
  4585  0000                     int$flags	set	btemp
  4586  0000                     wtemp8	set	btemp+1
  4587  0000                     ttemp5	set	btemp+1
  4588  0000                     ttemp6	set	btemp+4
  4589  0000                     ttemp7	set	btemp+8
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           stkptr	equ	0xFFC
  4594                           pclatu	equ	0xFFB
  4595                           pclath	equ	0xFFA
  4596                           pcl	equ	0xFF9
  4597                           tblptru	equ	0xFF8
  4598                           tblptrh	equ	0xFF7
  4599                           tblptrl	equ	0xFF6
  4600                           tablat	equ	0xFF5
  4601                           prodh	equ	0xFF4
  4602                           prodl	equ	0xFF3
  4603                           indf0	equ	0xFEF
  4604                           postinc0	equ	0xFEE
  4605                           postdec0	equ	0xFED
  4606                           preinc0	equ	0xFEC
  4607                           plusw0	equ	0xFEB
  4608                           fsr0h	equ	0xFEA
  4609                           fsr0l	equ	0xFE9
  4610                           wreg	equ	0xFE8
  4611                           indf1	equ	0xFE7
  4612                           postinc1	equ	0xFE6
  4613                           postdec1	equ	0xFE5
  4614                           preinc1	equ	0xFE4
  4615                           plusw1	equ	0xFE3
  4616                           fsr1h	equ	0xFE2
  4617                           fsr1l	equ	0xFE1
  4618                           bsr	equ	0xFE0
  4619                           indf2	equ	0xFDF
  4620                           postinc2	equ	0xFDE
  4621                           postdec2	equ	0xFDD
  4622                           preinc2	equ	0xFDC
  4623                           plusw2	equ	0xFDB
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     77      85
    BANK0           160     95     142
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1771_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    process_signal@S	PTR struct Sensor size(2) Largest target is 4
		 -> main@sensorR(BANK0[4]), main@sensorL(BANK0[4]), 

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[16]), main@temp1(BANK0[16]), 
		 -> main@temp2(BANK0[16]), 

    init_motors@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motors@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _process_signal->___wmul
    _init_motors->_setMotorPWM
    _setMotorPWM->___wmul
    ___wmul->___awdiv
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0   24661
                                             32 BANK0     63    63      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                         _check_RFID
                      _classify_data
                       _display_RFID
                        _init_motors
                     _process_signal
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7709
                                             16 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                              8 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             67 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             35 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             24 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              8 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             17 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              8 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              8 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              8 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1274
                            _initPWM
                           _init_LCD
                          _init_RFID
                       _init_sensors
 ---------------------------------------------------------------------------------
 (2) _init_sensors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1154
                                             12 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _process_signal                                       3     1      2    1432
                                             22 COMRAM     3     1      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _init_motors                                          4     0      4    2763
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2303
                                             22 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     499
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     648
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3408
                                             13 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1066
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        6     2      4     263
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3492
                                             14 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1110
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1491
                                             12 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1066
                                             10 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              8 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerLow                                  1     1      0       0
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                                3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (11) _processRFID                                         4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motors
     _setMotorPWM
       ___awdiv
       ___wmul
         ___awdiv (ARG)
   _process_signal
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensors
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4D      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E3       3        0.0%
DATA                 0      0      E3      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 02 18:39:52 2020

                           l65 12C0                   ___awdiv@sign 000E                             bsr 000FE0  
          ___wmul@multiplicand 0013                  ?_display_RFID 000E                    ?_LCD_String 000D  
                          l134 0A06                            l340 036A                            l328 0E5E  
                          l338 0362                            l801 0BF8                            l811 0D6E  
          display_RFID@dataBuf 000E                            _pad 0E30                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l2030 1052  
                         l2022 12FC                           l2026 130E                           l2036 1086  
                         l2140 1212                           l2044 09DE                           l2206 092A  
                         l2410 0E68                           l2148 121A                           l2172 11B4  
                         l2404 0E48                           l2190 0838                           l2430 0B86  
                         l2414 0E80                           l2184 07F6                           l2440 0BE2  
                         l2408 0E56                           l2512 075C                           l2600 0624  
                         l2450 0D10                           l2418 0EAC                           l2522 07A2  
                         l2610 063E                           l2196 087A                           l2428 0B72  
                         l2540 10C2                           l2374 0DA8                           l2518 0798  
                         l2542 10E8                           l2456 0D58                           l2448 0CFC  
                         l2384 1228                           l2392 1322                           l2472 03A2  
                         l2528 07BA                           l2560 050E                           l1922 0F68  
                         l2394 1326                           l2482 048E                           l2618 0676  
                         l2388 123E                           l1934 0F8E                           l1950 0FC0  
                         l1936 0F96                           l1928 0F78                           l1954 0FCE  
                         l1946 0FB6                           l2594 0610                           l2596 0618  
                         l2598 061C                           ?_pad 0019                           STR_1 033B  
                         STR_2 0331                           STR_3 0321                           STR_4 0311  
                         STR_5 0301                           u2000 04B8                           u2001 04B6  
                         u1210 0F9A                           u2010 04C6                           u2020 04CA  
                         u2100 066E                           u2110 067A                           u1304 09B2  
                         u1145 1296                           u1305 09AE                           u1146 1298  
                         u1410 11E0                           u1314 09FA                           u1315 09F6  
                         u1260 1076                           u1500 08AA                           u1325 0A52  
                         u1270 10A6                           u1510 08B8                           _LATB 000F8A  
                         u2207 0C8C                           u1600 0908                           u1520 08BA  
                         u2217 0C9E                           u2137 05D8                           u1530 08C8  
                         u2307 1048                           u1267 106C                           u2227 0CB4  
                         u2147 064A                           u1540 08CA                           u1460 088E  
                         u1380 11FE                           u2317 13FE                           u1277 109C  
                         u2237 0CC8                           u2157 0C38                           u1550 08D8  
                         u1470 0898                           u1390 120E                           u2247 0CDA  
                         u2167 0C4E                           u1560 08DA                           u1480 089A  
                         u1800 0DA0                           u2257 13F0                           u2177 0C5E  
                         u1570 08E8                           u1490 08A8                           u2267 1310  
                         u2187 0C6C                           u1580 08EA                           u1820 0DE8  
                         u2277 1080                           u2197 0C7A                           u1590 0906  
                         u1910 0B8A                           u2287 12A4                           u2297 12B4  
                         u1940 0D14                           u1970 0358                           u1891 0B52  
                         i2l73 127E                           i2l75 1280                           _dbuf 00C2  
                         _main 04F4                           _prec 0050                           _nout 00BF  
                         pad@i 0020                           pad@p 001D                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 0022                           fsr2l 000FD9  
                         btemp 0056                           _utoa 0346                    main@sensorL 00B7  
                  main@sensorR 00BB                           prodh 000FF4                           prodl 000FF3  
                         start 0026                   ___param_bank 000000                __end_of_SendLCD 12BC  
                        ??_pad 001F                __end_of_SetLine 1318                 ??_display_RFID 0010  
                        ?_main 0001                __end_of___awdiv 0FD8                          ?_utoa 0024  
              __end_of___lodiv 0C1A                ___awdiv@divisor 000B                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                __end_of___lomod 0D90  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 000D  
                        _RCREG 000FAE                          _E_TOG 13FA                   vfpfcnvrt@fmt 0046  
                 vfpfcnvrt@llu 0060                          _SPBRG 000FAF                   ?_init_motors 0020  
              __end_of_initPWM 13E0                          _flags 0052                          _fputc 0D90  
                        _fputs 121E                          _setup 12BC                          pad@fp 0019  
                        _width 004E                          _putch 1408                          main@i 00A3  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0057  
                        ttemp6 005A                          ttemp7 005E                          utoa@d 0026  
                        utoa@i 0042                          utoa@n 003A                          utoa@p 0036  
                        utoa@w 0038                          status 000FD8                          wtemp8 0057  
          __size_of_LCD_String 005E                __end_of_sprintf 1156               __end_of_ClearLCD 13FA  
             ___lodiv@dividend 0009                 __CFG_MCLRE$OFF 000000                __initialization 1342  
                 __end_of_main 0684                   __end_of_utoa 04F4                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000D                         ??_main 0080                         ??_utoa 002E  
                __activetblptr 000002                         ?_E_TOG 0001               ___lodiv@quotient 0019  
                 ?_setMotorPWM 0017                         ?_fputc 0009                         ?_fputs 0012  
             ___awdiv@dividend 0009                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         ?_putch 0001                         i2l2086 1172  
                       i2l2078 1162                         i2l2098 118E                         _LCDout 0FD8  
                  SendLCD@Byte 000C                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000B                      ??_SendLCD 000C  
                ?_init_sensors 0001                      ??_SetLine 000D                   vfprintf@cfmt 006E  
                display_RFID@i 0010                         ___wmul 1368        classify_data@difference 000D  
                    ??___awdiv 000D                      ??___lodiv 0019                      ??___lomod 0019  
             __end_of_init_LCD 0CE2                         clear_0 1348                         clear_1 1354  
             ___awdiv@quotient 000F                         pad@buf 001B                         _strlen 1318  
                    ??_initPWM 000B                         fputc@c 0009                         fputs@c 0016  
                       fputs@i 0017                         fputs@s 0012               ??_process_signal 0019  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         putch@c 0001               __end_of_vfprintf 1104  
                       utoa@fp 0024                      ??_sprintf 004E                   ?_processRFID 0001  
         __end_of_display_RFID 11E2                     __accesstop 0060        __end_of__initialization 135A  
                ___rparam_used 000001                 ??_init_sensors 0009                    SetLine@line 000D  
                __end_of_E_TOG 1408                 __pcstackCOMRAM 0001                  __end_of_fputc 0E30  
                __end_of_fputs 1256                  __end_of_setup 12EA                  __end_of_putch 140A  
                 ??_LCD_String 000F                        ??_E_TOG 0009  __size_of_InterruptHandlerHigh 1284  
                    ?_ClearLCD 0001    __end_of_InterruptHandlerLow 0026          __end_of_classify_data 121E  
                      ??_fputc 000D                     _check_RFID 07EE                        ??_fputs 0016  
         __size_of_init_motors 00EA                        ??_setup 000E                        ??_putch 0009  
                   __pbssBANK0 00BF                        ?_LCDout 0001             __size_of_init_RFID 001A  
           __end_of_LCD_String 10AE                        ?___wmul 0011                        _CAP1CON 000F63  
                      _CAP2CON 000F62                        _DFLTCON 000F60                        ?_strlen 0009  
                   ??_ClearLCD 000D             __size_of_vfpfcnvrt 016A                        _RFIDbuf 00E2  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E               ___lomod@dividend 0009  
         __size_of_setMotorPWM 0124                      ?_init_LCD 0001                __size_of_LCDout 0078  
                      _SendLCD 128C                        __Hparam 0000                        _SetLine 12EA  
                      __Lparam 0000          processRFID@latestChar 0003                        ___awdiv 0F54  
              __size_of___wmul 0026                        ___lodiv 0B4C                        ___lomod 0CE2  
                    ?_vfprintf 0068                   __psmallconst 0300               initPWM@PWMperiod 0009  
                      __pcinit 1342                        __ramtop 0300                        __ptext0 04F4  
                      __ptext1 1104                        __ptext2 10AE                        __ptext3 0684  
                      __ptext4 0346                        __ptext5 0E30                        __ptext6 1318  
                      __ptext7 121E                        __ptext8 0D90                        __ptext9 1408  
            __end_of_init_RFID 13C6               check_RFID@hexBuf 0013                __size_of_strlen 002A  
                      _initPWM 13C6                   __size_of_pad 0096           __end_of_init_sensors 13AC  
                 LCDout@number 000A          __size_of_display_RFID 0040                    ?_check_RFID 000F  
                      _sprintf 1104                 __pintcode_body 1256           end_of_initialization 135A  
           setMotorPWM@PWMduty 001E                     ??_init_LCD 000D           __size_of_processRFID 004C  
                      fputc@fp 000B                  __Lmediumconst 0000                        int_func 1256  
                      fputs@fp 0014                      _RFID_flag 00C1              __end_of_vfpfcnvrt 07EE  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                     ??_vfprintf 004E  
                      strlen@a 000B                        strlen@s 0009                     _robot_mode 0055  
                 _display_RFID 11A2                process_signal@S 0017                      _PORTDbits 000F83  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                 __end_of_LCDout 1050                      _TXSTAbits 000FAC  
                   main@motorL 00A5                     main@motorR 00AE            __size_of_check_RFID 0150  
                  vfpfcnvrt@ap 0048                    vfpfcnvrt@fp 0044                 __end_of___wmul 138E  
                  _BAUDCONbits 000FAA                 __end_of_strlen 1342            start_initialization 1342  
              ___lodiv@divisor 0011                ___lodiv@counter 0021                    __end_of_pad 0EC6  
            __size_of_ClearLCD 001A                       ??_LCDout 0009   __end_of_InterruptHandlerHigh 128C  
                  vfprintf@fmt 006A                       ??___wmul 0015          __size_of_init_sensors 001E  
                     ??_strlen 000B                    __pbssCOMRAM 004E                  ??_init_motors 0024  
                __pcstackBANK0 0060   __size_of_InterruptHandlerLow 000E        __size_of_process_signal 008E  
            __size_of_init_LCD 00C8                       ?_SendLCD 000B                       ?_SetLine 0001  
                 _init_sensors 138E                      __pintcode 0008                       ?___awdiv 0009  
       __size_of_classify_data 003C                       ?___lodiv 0009                       ?___lomod 0009  
           check_RFID@checksum 0024                    __pintcodelo 0018              __size_of_vfprintf 0056  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                ___lomod@divisor 0011                       ?_initPWM 0009  
                  __smallconst 0300                ___lomod@counter 0019                 __size_of_E_TOG 000E  
                    _init_RFID 13AC                  ??_setMotorPWM 0019                   ??_check_RFID 0011  
                     ?_sprintf 0070                 __size_of_fputc 00A0                 __size_of_fputs 0038  
               __size_of_setup 002E                 __size_of_putch 0002                check_RFID@byte1 001F  
              check_RFID@byte2 0020                check_RFID@byte3 0021                check_RFID@byte4 0022  
              check_RFID@byte5 0023            __end_of_init_motors 0B4C                 ___wmul@product 0015  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       i2u137_40 118A  
                     _PIR1bits 000F9E                       _RCONbits 000FD0                      _vfpfcnvrt 0684  
           __end_of_check_RFID 093E              ___wmul@multiplier 0011                   setMotorPWM@m 0017  
         _InterruptHandlerHigh 0008                       _ClearLCD 13E0                      main@temp1 0092  
                    main@temp2 0082                     ?_init_RFID 0001                  ??_processRFID 0004  
                _classify_data 11E2            __end_of_setMotorPWM 0A62                    check_RFID@i 0025  
                     __Hrparam 0000               __size_of_SendLCD 0030                     vfprintf@ap 006C  
                     __Lrparam 0000                     vfprintf@fp 0068               __size_of_SetLine 002E  
             __size_of___awdiv 0084               __size_of___lodiv 00CE               __size_of___lomod 00AE  
                   ?_vfpfcnvrt 0044          ?_InterruptHandlerHigh 0001                     sprintf@fmt 0072  
             __size_of_initPWM 001A                    _init_motors 0A62                 ?_classify_data 0009  
            check_RFID@dataBuf 000F                       __ptext10 0CE2                       __ptext11 0B4C  
                     __ptext20 1368                       __ptext12 12BC                       __ptext21 0F54  
                     __ptext13 138E                       __ptext30 13FA                       __ptext22 11A2  
                     __ptext14 13AC                       __ptext23 13E0                       __ptext15 0C1A  
                     __ptext24 11E2                       __ptext16 13C6                       __ptext33 1156  
                     __ptext25 07EE                       __ptext17 0EC6                       __ptext26 12EA  
                     __ptext18 0A62                       __ptext27 1050                       __ptext19 093E  
                     __ptext28 128C                       __ptext29 0FD8               __size_of_sprintf 0052  
                     _init_LCD 0C1A                 _process_signal 0EC6                  __size_of_main 0190  
                __size_of_utoa 01AE            __end_of_processRFID 11A2                       int$flags 0056  
                     _vfprintf 10AE            _InterruptHandlerLow 0018                     _LCD_String 1050  
                   _INTCONbits 000FF2    classify_data@right_smoothed 000B                    ??_init_RFID 0009  
                  _setMotorPWM 093E         __end_of_process_signal 0F54                       intlevel1 0000  
                     intlevel2 0000                      sprintf@ap 0078           ?_InterruptHandlerLow 0001  
                init_motors@mL 0020                  init_motors@mR 0022                     _OSCCONbits 000FD3  
   classify_data@left_smoothed 0009     processRFID@position_in_buf 0054                    ??_vfpfcnvrt 004A  
       ??_InterruptHandlerHigh 0005                       sprintf@f 007A                       sprintf@s 0070  
              ??_classify_data 000D                    _processRFID 1156                ?_process_signal 0017  
        ??_InterruptHandlerLow 0008  
