

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 11:31:02 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 2.05
    51                           ; Generated 20/12/2018 GMT
    52                           ; 
    53                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4331 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     _CAP1CON	set	3939
    85  0000                     _DFLTCON	set	3936
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _PORTDbits	set	3971
   109  0000                     _CAP1BUFL	set	3944
   110  0000                     _CAP1BUFH	set	3945
   111  0000                     _RCREG	set	4014
   112  0000                     _PIR1bits	set	3998
   113  0000                     _TRISDbits	set	3989
   114  0000                     _TRISBbits	set	3987
   115  0000                     _RCONbits	set	4048
   116  0000                     _INTCONbits	set	4082
   117  0000                     _OSCCONbits	set	4051
   118  0000                     _OSCCON	set	4051
   119  0000                     _PDC1H	set	3958
   120  0000                     _PDC1L	set	3959
   121  0000                     _PDC0H	set	3960
   122  0000                     _PDC0L	set	3961
   123                           
   124                           	psect	smallconst
   125  000300                     __psmallconst:
   126                           	opt callstack 0
   127  000300  00                 	db	0
   128  000301                     STR_4:
   129  000301  43                 	db	67	;'C'
   130  000302  48                 	db	72	;'H'
   131  000303  45                 	db	69	;'E'
   132  000304  43                 	db	67	;'C'
   133  000305  4B                 	db	75	;'K'
   134  000306  53                 	db	83	;'S'
   135  000307  55                 	db	85	;'U'
   136  000308  4D                 	db	77	;'M'
   137  000309  20                 	db	32
   138  00030A  46                 	db	70	;'F'
   139  00030B  41                 	db	65	;'A'
   140  00030C  49                 	db	73	;'I'
   141  00030D  4C                 	db	76	;'L'
   142  00030E  45                 	db	69	;'E'
   143  00030F  44                 	db	68	;'D'
   144  000310  00                 	db	0
   145  000311                     STR_3:
   146  000311  43                 	db	67	;'C'
   147  000312  48                 	db	72	;'H'
   148  000313  45                 	db	69	;'E'
   149  000314  43                 	db	67	;'C'
   150  000315  4B                 	db	75	;'K'
   151  000316  53                 	db	83	;'S'
   152  000317  55                 	db	85	;'U'
   153  000318  4D                 	db	77	;'M'
   154  000319  20                 	db	32
   155  00031A  50                 	db	80	;'P'
   156  00031B  41                 	db	65	;'A'
   157  00031C  53                 	db	83	;'S'
   158  00031D  53                 	db	83	;'S'
   159  00031E  45                 	db	69	;'E'
   160  00031F  44                 	db	68	;'D'
   161  000320  00                 	db	0
   162  000321                     STR_2:
   163  000321  52                 	db	82	;'R'
   164  000322  45                 	db	69	;'E'
   165  000323  53                 	db	83	;'S'
   166  000324  45                 	db	69	;'E'
   167  000325  54                 	db	84	;'T'
   168  000326  54                 	db	84	;'T'
   169  000327  49                 	db	73	;'I'
   170  000328  4E                 	db	78	;'N'
   171  000329  47                 	db	71	;'G'
   172  00032A  20                 	db	32
   173  00032B  52                 	db	82	;'R'
   174  00032C  4F                 	db	79	;'O'
   175  00032D  42                 	db	66	;'B'
   176  00032E  4F                 	db	79	;'O'
   177  00032F  54                 	db	84	;'T'
   178  000330  00                 	db	0
   179  000331                     STR_1:
   180  000331  73                 	db	115	;'s'
   181  000332  6D                 	db	109	;'m'
   182  000333  6F                 	db	111	;'o'
   183  000334  6F                 	db	111	;'o'
   184  000335  74                 	db	116	;'t'
   185  000336  68                 	db	104	;'h'
   186  000337  65                 	db	101	;'e'
   187  000338  64                 	db	100	;'d'
   188  000339  20                 	db	32
   189  00033A  25                 	db	37
   190  00033B  75                 	db	117	;'u'
   191  00033C  20                 	db	32
   192  00033D  00                 	db	0
   193                           
   194                           ; #config settings
   195  00033E  00                 	db	0	; dummy byte at the end
   196  0000                     
   197                           	psect	cinit
   198  001334                     __pcinit:
   199                           	opt callstack 0
   200  001334                     start_initialization:
   201                           	opt callstack 0
   202  001334                     __initialization:
   203                           	opt callstack 0
   204                           
   205                           ; Clear objects allocated to BANK0 (48 bytes)
   206  001334  EE00  F0A7         	lfsr	0,__pbssBANK0
   207  001338  0E30               	movlw	48
   208  00133A                     clear_0:
   209  00133A  6AEE               	clrf	postinc0,c
   210  00133C  06E8               	decf	wreg,f,c
   211  00133E  E1FD               	bnz	clear_0
   212                           
   213                           ; Clear objects allocated to COMRAM (8 bytes)
   214  001340  EE00  F04F         	lfsr	0,__pbssCOMRAM
   215  001344  0E08               	movlw	8
   216  001346                     clear_1:
   217  001346  6AEE               	clrf	postinc0,c
   218  001348  06E8               	decf	wreg,f,c
   219  00134A  E1FD               	bnz	clear_1
   220  00134C                     end_of_initialization:
   221                           	opt callstack 0
   222  00134C                     __end_of__initialization:
   223                           	opt callstack 0
   224  00134C  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   225  00134E  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   226  001350  0E00               	movlw	low (__Lmediumconst shr (0+16))
   227  001352  6EF8               	movwf	tblptru,c
   228  001354  0100               	movlb	0
   229  001356  EF2C  F003         	goto	_main	;jump to C main() function
   230                           
   231                           	psect	bssCOMRAM
   232  00004F                     __pbssCOMRAM:
   233                           	opt callstack 0
   234  00004F                     _width:
   235                           	opt callstack 0
   236  00004F                     	ds	2
   237  000051                     _prec:
   238                           	opt callstack 0
   239  000051                     	ds	2
   240  000053                     _flags:
   241                           	opt callstack 0
   242  000053                     	ds	2
   243  000055                     processRFID@position_in_buf:
   244                           	opt callstack 0
   245  000055                     	ds	1
   246  000056                     _robot_mode:
   247                           	opt callstack 0
   248  000056                     	ds	1
   249                           
   250                           	psect	bssBANK0
   251  0000A7                     __pbssBANK0:
   252                           	opt callstack 0
   253  0000A7                     _nout:
   254                           	opt callstack 0
   255  0000A7                     	ds	2
   256  0000A9                     main@beacon_location:
   257                           	opt callstack 0
   258  0000A9                     	ds	1
   259  0000AA                     _RFID_flag:
   260                           	opt callstack 0
   261  0000AA                     	ds	1
   262  0000AB                     _dbuf:
   263                           	opt callstack 0
   264  0000AB                     	ds	32
   265  0000CB                     _RFIDbuf:
   266                           	opt callstack 0
   267  0000CB                     	ds	12
   268                           
   269                           	psect	cstackBANK0
   270  000060                     __pcstackBANK0:
   271                           	opt callstack 0
   272  000060                     vfpfcnvrt@llu:
   273                           	opt callstack 0
   274                           
   275                           ; 8 bytes @ 0x0
   276  000060                     	ds	8
   277  000068                     ?_vfprintf:
   278                           	opt callstack 0
   279  000068                     vfprintf@fp:
   280                           	opt callstack 0
   281                           
   282                           ; 2 bytes @ 0x8
   283  000068                     	ds	2
   284  00006A                     vfprintf@fmt:
   285                           	opt callstack 0
   286                           
   287                           ; 2 bytes @ 0xA
   288  00006A                     	ds	2
   289  00006C                     vfprintf@ap:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0xC
   293  00006C                     	ds	2
   294  00006E                     ?_sprintf:
   295                           	opt callstack 0
   296  00006E                     sprintf@s:
   297                           	opt callstack 0
   298                           
   299                           ; 2 bytes @ 0xE
   300  00006E                     	ds	2
   301  000070                     sprintf@fmt:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x10
   305  000070                     	ds	6
   306  000076                     sprintf@ap:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0x16
   310  000076                     	ds	2
   311  000078                     sprintf@f:
   312                           	opt callstack 0
   313                           
   314                           ; 6 bytes @ 0x18
   315  000078                     	ds	6
   316  00007E                     ??_main:
   317                           
   318                           ; 1 bytes @ 0x1E
   319  00007E                     	ds	2
   320  000080                     main@temp2:
   321                           	opt callstack 0
   322                           
   323                           ; 16 bytes @ 0x20
   324  000080                     	ds	16
   325  000090                     main@previous_location:
   326                           	opt callstack 0
   327                           
   328                           ; 1 bytes @ 0x30
   329  000090                     	ds	1
   330  000091                     main@raw_data:
   331                           	opt callstack 0
   332                           
   333                           ; 2 bytes @ 0x31
   334  000091                     	ds	2
   335  000093                     main@i:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x33
   339  000093                     	ds	2
   340  000095                     main@motorL:
   341                           	opt callstack 0
   342                           
   343                           ; 9 bytes @ 0x35
   344  000095                     	ds	9
   345  00009E                     main@motorR:
   346                           	opt callstack 0
   347                           
   348                           ; 9 bytes @ 0x3E
   349  00009E                     	ds	9
   350                           
   351                           	psect	cstackCOMRAM
   352  000001                     __pcstackCOMRAM:
   353                           	opt callstack 0
   354  000001                     processRFID@RFIDbuf:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x0
   358  000001                     	ds	2
   359  000003                     processRFID@latestChar:
   360                           	opt callstack 0
   361                           
   362                           ; 1 bytes @ 0x2
   363  000003                     	ds	1
   364  000004                     processRFID@i:
   365                           	opt callstack 0
   366                           
   367                           ; 1 bytes @ 0x3
   368  000004                     	ds	1
   369  000005                     ??_InterruptHandlerHigh:
   370                           
   371                           ; 1 bytes @ 0x4
   372  000005                     	ds	3
   373  000008                     ??_LCDout:
   374  000008                     ?_strlen:
   375                           	opt callstack 0
   376  000008                     ?___wmul:
   377                           	opt callstack 0
   378  000008                     ?___lodiv:
   379                           	opt callstack 0
   380  000008                     ?___lomod:
   381                           	opt callstack 0
   382  000008                     initPWM@PWMperiod:
   383                           	opt callstack 0
   384  000008                     classify_data@raw_data:
   385                           	opt callstack 0
   386  000008                     ___wmul@multiplier:
   387                           	opt callstack 0
   388  000008                     fputc@c:
   389                           	opt callstack 0
   390  000008                     strlen@s:
   391                           	opt callstack 0
   392  000008                     ___lodiv@dividend:
   393                           	opt callstack 0
   394  000008                     ___lomod@dividend:
   395                           	opt callstack 0
   396                           
   397                           ; 8 bytes @ 0x7
   398  000008                     	ds	1
   399  000009                     LCDout@number:
   400                           	opt callstack 0
   401                           
   402                           ; 1 bytes @ 0x8
   403  000009                     	ds	1
   404  00000A                     SendLCD@type:
   405                           	opt callstack 0
   406  00000A                     ___wmul@multiplicand:
   407                           	opt callstack 0
   408  00000A                     fputc@fp:
   409                           	opt callstack 0
   410  00000A                     strlen@a:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x9
   414  00000A                     	ds	1
   415  00000B                     SendLCD@Byte:
   416                           	opt callstack 0
   417                           
   418                           ; 1 bytes @ 0xA
   419  00000B                     	ds	1
   420  00000C                     ??_init_LCD:
   421  00000C                     ??_ClearLCD:
   422  00000C                     ??_fputc:
   423  00000C                     SetLine@line:
   424                           	opt callstack 0
   425  00000C                     LCD_String@string:
   426                           	opt callstack 0
   427  00000C                     ___wmul@product:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0xB
   431  00000C                     	ds	1
   432  00000D                     display_RFID@dataBuf:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0xC
   436  00000D                     	ds	1
   437  00000E                     ?___awdiv:
   438                           	opt callstack 0
   439  00000E                     check_RFID@dataBuf:
   440                           	opt callstack 0
   441  00000E                     ___awdiv@dividend:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0xD
   445  00000E                     	ds	1
   446  00000F                     display_RFID@i:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0xE
   450  00000F                     	ds	1
   451  000010                     ??_check_RFID:
   452  000010                     ___awdiv@divisor:
   453                           	opt callstack 0
   454  000010                     ___lodiv@divisor:
   455                           	opt callstack 0
   456  000010                     ___lomod@divisor:
   457                           	opt callstack 0
   458                           
   459                           ; 8 bytes @ 0xF
   460  000010                     	ds	1
   461  000011                     fputs@s:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x10
   465  000011                     	ds	1
   466  000012                     ___awdiv@counter:
   467                           	opt callstack 0
   468  000012                     check_RFID@hexBuf:
   469                           	opt callstack 0
   470                           
   471                           ; 12 bytes @ 0x11
   472  000012                     	ds	1
   473  000013                     ___awdiv@sign:
   474                           	opt callstack 0
   475  000013                     fputs@fp:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x12
   479  000013                     	ds	1
   480  000014                     ___awdiv@quotient:
   481                           	opt callstack 0
   482                           
   483                           ; 2 bytes @ 0x13
   484  000014                     	ds	1
   485  000015                     fputs@c:
   486                           	opt callstack 0
   487                           
   488                           ; 1 bytes @ 0x14
   489  000015                     	ds	1
   490  000016                     setMotorPWM@m:
   491                           	opt callstack 0
   492  000016                     fputs@i:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x15
   496  000016                     	ds	2
   497  000018                     ??_setMotorPWM:
   498  000018                     ?_pad:
   499                           	opt callstack 0
   500  000018                     ___lomod@counter:
   501                           	opt callstack 0
   502  000018                     pad@fp:
   503                           	opt callstack 0
   504  000018                     ___lodiv@quotient:
   505                           	opt callstack 0
   506                           
   507                           ; 8 bytes @ 0x17
   508  000018                     	ds	2
   509  00001A                     pad@buf:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x19
   513  00001A                     	ds	2
   514  00001C                     pad@p:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x1B
   518  00001C                     	ds	1
   519  00001D                     setMotorPWM@PWMduty:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x1C
   523  00001D                     	ds	1
   524  00001E                     ??_pad:
   525  00001E                     check_RFID@byte1:
   526                           	opt callstack 0
   527                           
   528                           ; 1 bytes @ 0x1D
   529  00001E                     	ds	1
   530  00001F                     check_RFID@byte2:
   531                           	opt callstack 0
   532  00001F                     turnRight@mL:
   533                           	opt callstack 0
   534  00001F                     fullSpeedAhead@mL:
   535                           	opt callstack 0
   536  00001F                     init_motors@mL:
   537                           	opt callstack 0
   538  00001F                     pad@i:
   539                           	opt callstack 0
   540                           
   541                           ; 2 bytes @ 0x1E
   542  00001F                     	ds	1
   543  000020                     check_RFID@byte3:
   544                           	opt callstack 0
   545  000020                     ___lodiv@counter:
   546                           	opt callstack 0
   547                           
   548                           ; 1 bytes @ 0x1F
   549  000020                     	ds	1
   550  000021                     check_RFID@byte4:
   551                           	opt callstack 0
   552  000021                     turnRight@mR:
   553                           	opt callstack 0
   554  000021                     fullSpeedAhead@mR:
   555                           	opt callstack 0
   556  000021                     init_motors@mR:
   557                           	opt callstack 0
   558  000021                     pad@w:
   559                           	opt callstack 0
   560                           
   561                           ; 2 bytes @ 0x20
   562  000021                     	ds	1
   563  000022                     check_RFID@byte5:
   564                           	opt callstack 0
   565                           
   566                           ; 1 bytes @ 0x21
   567  000022                     	ds	1
   568  000023                     ??_turnRight:
   569  000023                     ?_utoa:
   570                           	opt callstack 0
   571  000023                     check_RFID@checksum:
   572                           	opt callstack 0
   573  000023                     fullSpeedAhead@i:
   574                           	opt callstack 0
   575  000023                     utoa@fp:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x22
   579  000023                     	ds	1
   580  000024                     turnRight@i:
   581                           	opt callstack 0
   582  000024                     check_RFID@i:
   583                           	opt callstack 0
   584                           
   585                           ; 2 bytes @ 0x23
   586  000024                     	ds	1
   587  000025                     utoa@d:
   588                           	opt callstack 0
   589                           
   590                           ; 8 bytes @ 0x24
   591  000025                     	ds	1
   592  000026                     moveToBeacon@prev_location:
   593                           	opt callstack 0
   594                           
   595                           ; 1 bytes @ 0x25
   596  000026                     	ds	1
   597  000027                     moveToBeacon@mL:
   598                           	opt callstack 0
   599                           
   600                           ; 2 bytes @ 0x26
   601  000027                     	ds	2
   602  000029                     moveToBeacon@mR:
   603                           	opt callstack 0
   604                           
   605                           ; 2 bytes @ 0x28
   606  000029                     	ds	2
   607  00002B                     moveToBeacon@beacon_location:
   608                           	opt callstack 0
   609                           
   610                           ; 1 bytes @ 0x2A
   611  00002B                     	ds	2
   612  00002D                     ??_utoa:
   613                           
   614                           ; 1 bytes @ 0x2C
   615  00002D                     	ds	8
   616  000035                     utoa@p:
   617                           	opt callstack 0
   618                           
   619                           ; 2 bytes @ 0x34
   620  000035                     	ds	2
   621  000037                     utoa@w:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x36
   625  000037                     	ds	2
   626  000039                     utoa@n:
   627                           	opt callstack 0
   628                           
   629                           ; 8 bytes @ 0x38
   630  000039                     	ds	8
   631  000041                     utoa@i:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x40
   635  000041                     	ds	2
   636  000043                     ?_vfpfcnvrt:
   637                           	opt callstack 0
   638  000043                     vfpfcnvrt@fp:
   639                           	opt callstack 0
   640                           
   641                           ; 2 bytes @ 0x42
   642  000043                     	ds	2
   643  000045                     vfpfcnvrt@fmt:
   644                           	opt callstack 0
   645                           
   646                           ; 2 bytes @ 0x44
   647  000045                     	ds	2
   648  000047                     vfpfcnvrt@ap:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x46
   652  000047                     	ds	2
   653  000049                     ??_vfpfcnvrt:
   654                           
   655                           ; 1 bytes @ 0x48
   656  000049                     	ds	4
   657  00004D                     vfprintf@cfmt:
   658                           	opt callstack 0
   659                           
   660                           ; 2 bytes @ 0x4C
   661  00004D                     	ds	2
   662  00004F                     
   663                           ; 1 bytes @ 0x4E
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 77 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  i               2   51[BANK0 ] int 
   674 ;;  temp2          16   32[BANK0 ] unsigned char [16]
   675 ;;  raw_data        2   49[BANK0 ] unsigned int 
   676 ;;  previous_loc    1   48[BANK0 ] unsigned char 
   677 ;;  motorR          9   62[BANK0 ] struct DC_motor
   678 ;;  motorL          9   53[BANK0 ] struct DC_motor
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   688 ;;      Params:         0       0       0       0
   689 ;;      Locals:         0      39       0       0
   690 ;;      Temps:          0       2       0       0
   691 ;;      Totals:         0      41       0       0
   692 ;;Total ram usage:       41 bytes
   693 ;; Hardware stack levels required when called:   10
   694 ;; This function calls:
   695 ;;		_ClearLCD
   696 ;;		_LCD_String
   697 ;;		_SetLine
   698 ;;		_check_RFID
   699 ;;		_classify_data
   700 ;;		_display_RFID
   701 ;;		_init_motors
   702 ;;		_moveToBeacon
   703 ;;		_setup
   704 ;;		_sprintf
   705 ;; This function is called by:
   706 ;;		Startup code after reset
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text0
   711  000658                     __ptext0:
   712                           	opt callstack 0
   713  000658                     _main:
   714                           	opt callstack 21
   715                           
   716                           ;main.c: 80:   setup();
   717                           
   718                           ;incstack = 0
   719  000658  EC57  F009         	call	_setup	;wreg free
   720                           
   721                           ;main.c: 83:   struct DC_motor motorL, motorR;;main.c: 84:   init_motors(&motorL, &motor
      +                          R);
   722  00065C  0E95               	movlw	low main@motorL
   723  00065E  6E1F               	movwf	init_motors@mL,c
   724  000660  0E00               	movlw	high main@motorL
   725  000662  6E20               	movwf	init_motors@mL+1,c
   726  000664  0E9E               	movlw	low main@motorR
   727  000666  6E21               	movwf	init_motors@mR,c
   728  000668  0E00               	movlw	high main@motorR
   729  00066A  6E22               	movwf	init_motors@mR+1,c
   730  00066C  EC0F  F005         	call	_init_motors	;wreg free
   731  000670  D062               	goto	l2552
   732  000672                     l2522:
   733                           
   734                           ;main.c: 91:       {;main.c: 92:           static char beacon_location;;main.c: 95:     
      +                                unsigned int raw_data = (unsigned int)((CAP1BUFH << 8) | CAP1BUFL);
   735  000672  5068               	movf	3944,w,c	;volatile
   736  000674  CF69 F07E          	movff	3945,??_main	;volatile
   737  000678  0100               	movlb	0	; () banked
   738  00067A  6B7F               	clrf	(??_main+1)& (0+255),b
   739  00067C  C07E  F07F         	movff	??_main,??_main+1
   740  000680  6B7E               	clrf	??_main& (0+255),b
   741  000682  117E               	iorwf	??_main& (0+255),w,b
   742  000684  6F91               	movwf	main@raw_data& (0+255),b
   743  000686  517F               	movf	(??_main+1)& (0+255),w,b
   744  000688  6F92               	movwf	(main@raw_data+1)& (0+255),b
   745                           
   746                           ; BSR set to: 0
   747                           ;main.c: 98:           char previous_location = beacon_location;
   748  00068A  C0A9  F090         	movff	main@beacon_location,main@previous_location
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 101:           beacon_location = classify_data(raw_data);
   752  00068E  C091  F008         	movff	main@raw_data,classify_data@raw_data
   753  000692  C092  F009         	movff	main@raw_data+1,classify_data@raw_data+1
   754  000696  ECF3  F009         	call	_classify_data	;wreg free
   755  00069A  0100               	movlb	0	; () banked
   756  00069C  6FA9               	movwf	main@beacon_location& (0+255),b
   757                           
   758                           ; BSR set to: 0
   759                           ;main.c: 105:           moveToBeacon(beacon_location, previous_location, &motorL, &motor
      +                          R);
   760  00069E  C090  F026         	movff	main@previous_location,moveToBeacon@prev_location
   761  0006A2  0E95               	movlw	low main@motorL
   762  0006A4  6E27               	movwf	moveToBeacon@mL,c
   763  0006A6  0E00               	movlw	high main@motorL
   764  0006A8  6E28               	movwf	moveToBeacon@mL+1,c
   765  0006AA  0E9E               	movlw	low main@motorR
   766  0006AC  6E29               	movwf	moveToBeacon@mR,c
   767  0006AE  0E00               	movlw	high main@motorR
   768  0006B0  6E2A               	movwf	moveToBeacon@mR+1,c
   769  0006B2  51A9               	movf	main@beacon_location& (0+255),w,b
   770  0006B4  ECDF  F008         	call	_moveToBeacon
   771                           
   772                           ;main.c: 108:           ClearLCD();
   773  0006B8  ECDA  F009         	call	_ClearLCD	;wreg free
   774                           
   775                           ;main.c: 109:           SetLine(1);
   776  0006BC  0E01               	movlw	1
   777  0006BE  EC6E  F009         	call	_SetLine
   778                           
   779                           ;main.c: 110:           char temp2[16];;main.c: 111:           sprintf(temp2,"smoothed %
      +                          u ",raw_data);
   780  0006C2  0E80               	movlw	low main@temp2
   781  0006C4  0100               	movlb	0	; () banked
   782  0006C6  6F6E               	movwf	sprintf@s& (0+255),b
   783  0006C8  0E00               	movlw	high main@temp2
   784  0006CA  6F6F               	movwf	(sprintf@s+1)& (0+255),b
   785  0006CC  0E31               	movlw	low STR_1
   786  0006CE  6F70               	movwf	sprintf@fmt& (0+255),b
   787  0006D0  0E03               	movlw	high STR_1
   788  0006D2  6F71               	movwf	(sprintf@fmt+1)& (0+255),b
   789  0006D4  C091  F072         	movff	main@raw_data,?_sprintf+4
   790  0006D8  C092  F073         	movff	main@raw_data+1,?_sprintf+5
   791  0006DC  EC90  F008         	call	_sprintf	;wreg free
   792                           
   793                           ;main.c: 112:           LCD_String(temp2);
   794  0006E0  0E80               	movlw	low main@temp2
   795  0006E2  6E0C               	movwf	LCD_String@string,c
   796  0006E4  0E00               	movlw	high main@temp2
   797  0006E6  6E0D               	movwf	LCD_String@string+1,c
   798  0006E8  EC36  F008         	call	_LCD_String	;wreg free
   799                           
   800                           ;main.c: 113:           SetLine(2);
   801  0006EC  0E02               	movlw	2
   802  0006EE  EC6E  F009         	call	_SetLine
   803                           
   804                           ;main.c: 117:           _delay((unsigned long)((100)*(8000000/4000.0)));
   805  0006F2  0E02               	movlw	2
   806  0006F4  0100               	movlb	0	; () banked
   807  0006F6  6F7F               	movwf	(??_main+1)& (0+255),b
   808  0006F8  0E04               	movlw	4
   809  0006FA  6F7E               	movwf	??_main& (0+255),b
   810  0006FC  0EBA               	movlw	186
   811  0006FE                     u2117:
   812  0006FE  2EE8               	decfsz	wreg,f,c
   813  000700  D7FE               	bra	u2117
   814  000702  2F7E               	decfsz	??_main& (0+255),f,b
   815  000704  D7FC               	bra	u2117
   816  000706  2F7F               	decfsz	(??_main+1)& (0+255),f,b
   817  000708  D7FA               	bra	u2117
   818  00070A  F000               	nop	
   819                           
   820                           ;main.c: 121:           if(RFID_flag == 1)
   821  00070C  0100               	movlb	0	; () banked
   822  00070E  05AA               	decf	_RFID_flag& (0+255),w,b	;volatile
   823  000710  A4D8               	btfss	status,2,c
   824  000712  D011               	goto	l2552
   825                           
   826                           ; BSR set to: 0
   827                           ;main.c: 122:           {;main.c: 123:               display_RFID(RFIDbuf);
   828  000714  0ECB               	movlw	low _RFIDbuf
   829  000716  6E0D               	movwf	display_RFID@dataBuf,c
   830  000718  0E00               	movlw	high _RFIDbuf
   831  00071A  6E0E               	movwf	display_RFID@dataBuf+1,c
   832  00071C  EC03  F009         	call	_display_RFID	;wreg free
   833                           
   834                           ;main.c: 124:               check_RFID(RFIDbuf);
   835  000720  0ECB               	movlw	low _RFIDbuf
   836  000722  6E0E               	movwf	check_RFID@dataBuf,c
   837  000724  0E00               	movlw	high _RFIDbuf
   838  000726  6E0F               	movwf	check_RFID@dataBuf+1,c
   839  000728  ECD5  F003         	call	_check_RFID	;wreg free
   840                           
   841                           ;main.c: 125:               robot_mode = 1;
   842  00072C  0E01               	movlw	1
   843  00072E  6E56               	movwf	_robot_mode,c	;volatile
   844                           
   845                           ;main.c: 126:               RFID_flag = 0;
   846  000730  0E00               	movlw	0
   847  000732  0100               	movlb	0	; () banked
   848  000734  6FAA               	movwf	_RFID_flag& (0+255),b	;volatile
   849  000736                     l2552:
   850                           
   851                           ;main.c: 90:       while(robot_mode == 0)
   852  000736  5056               	movf	_robot_mode,w,c	;volatile
   853  000738  A4D8               	btfss	status,2,c
   854  00073A  D003               	goto	l2556
   855  00073C  D79A               	goto	l2522
   856  00073E                     l2554:
   857                           
   858                           ;main.c: 132:       {;main.c: 134:           robot_mode = 2;
   859  00073E  0E02               	movlw	2
   860  000740  6E56               	movwf	_robot_mode,c	;volatile
   861  000742                     l2556:
   862                           
   863                           ;main.c: 131:       while(robot_mode == 1)
   864  000742  0456               	decf	_robot_mode,w,c	;volatile
   865  000744  A4D8               	btfss	status,2,c
   866  000746  D02C               	goto	u2090
   867  000748  D7FA               	goto	l2554
   868  00074A                     l2558:
   869                           
   870                           ;main.c: 141:           {;main.c: 142:               ClearLCD();
   871  00074A  ECDA  F009         	call	_ClearLCD	;wreg free
   872                           
   873                           ;main.c: 143:               LCD_String("RESETTING ROBOT");
   874  00074E  0E21               	movlw	low STR_2
   875  000750  6E0C               	movwf	LCD_String@string,c
   876  000752  0E03               	movlw	high STR_2
   877  000754  6E0D               	movwf	LCD_String@string+1,c
   878  000756  EC36  F008         	call	_LCD_String	;wreg free
   879                           
   880                           ;main.c: 144:               for(int i=0; i<10;i++)
   881  00075A  0E00               	movlw	0
   882  00075C  0100               	movlb	0	; () banked
   883  00075E  6F94               	movwf	(main@i+1)& (0+255),b
   884  000760  0E00               	movlw	0
   885  000762  6F93               	movwf	main@i& (0+255),b
   886  000764                     l2568:
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 145:               {;main.c: 146:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   890  000764  0E02               	movlw	2
   891  000766  0100               	movlb	0	; () banked
   892  000768  6F7F               	movwf	(??_main+1)& (0+255),b
   893  00076A  0E04               	movlw	4
   894  00076C  6F7E               	movwf	??_main& (0+255),b
   895  00076E  0EBA               	movlw	186
   896  000770                     u2127:
   897  000770  2EE8               	decfsz	wreg,f,c
   898  000772  D7FE               	bra	u2127
   899  000774  2F7E               	decfsz	??_main& (0+255),f,b
   900  000776  D7FC               	bra	u2127
   901  000778  2F7F               	decfsz	(??_main+1)& (0+255),f,b
   902  00077A  D7FA               	bra	u2127
   903  00077C  F000               	nop	
   904                           
   905                           ;main.c: 147:               }
   906  00077E  0100               	movlb	0	; () banked
   907  000780  4B93               	infsnz	main@i& (0+255),f,b
   908  000782  2B94               	incf	(main@i+1)& (0+255),f,b
   909  000784  BF94               	btfsc	(main@i+1)& (0+255),7,b
   910  000786  D7EE               	goto	l2568
   911  000788  5194               	movf	(main@i+1)& (0+255),w,b
   912  00078A  E104               	bnz	u2080
   913  00078C  0E0A               	movlw	10
   914  00078E  5D93               	subwf	main@i& (0+255),w,b
   915  000790  A0D8               	btfss	status,0,c
   916  000792  D7E8               	goto	l2568
   917  000794                     u2080:
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 148:               ClearLCD();
   921  000794  ECDA  F009         	call	_ClearLCD	;wreg free
   922                           
   923                           ;main.c: 149:               robot_mode = 0;
   924  000798  0E00               	movlw	0
   925  00079A  6E56               	movwf	_robot_mode,c	;volatile
   926  00079C                     l2576:
   927                           
   928                           ;main.c: 140:           while(PORTDbits.RD2 == 1)
   929  00079C  B483               	btfsc	3971,2,c	;volatile
   930  00079E  D7D5               	goto	l2558
   931  0007A0                     u2090:
   932                           
   933                           ;main.c: 138:       while(robot_mode == 2)
   934  0007A0  0E02               	movlw	2
   935  0007A2  1856               	xorwf	_robot_mode,w,c	;volatile
   936  0007A4  A4D8               	btfss	status,2,c
   937  0007A6  D7C7               	goto	l2552
   938  0007A8  D7F9               	goto	l2576
   939  0007AA                     __end_of_main:
   940                           	opt callstack 0
   941                           
   942 ;; *************** function _sprintf *****************
   943 ;; Defined at:
   944 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  s               2   14[BANK0 ] PTR unsigned char 
   947 ;;		 -> main@temp2(16), 
   948 ;;  fmt             2   16[BANK0 ] PTR const unsigned char 
   949 ;;		 -> STR_1(13), 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  f               6   24[BANK0 ] struct _IO_FILE
   952 ;;  ap              2   22[BANK0 ] PTR void [1]
   953 ;;		 -> ?_sprintf(2), 
   954 ;;  ret             2    0        int 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  2   14[BANK0 ] int 
   957 ;; Registers used:
   958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   964 ;;      Params:         0       6       0       0
   965 ;;      Locals:         0      10       0       0
   966 ;;      Temps:          0       0       0       0
   967 ;;      Totals:         0      16       0       0
   968 ;;Total ram usage:       16 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    9
   971 ;; This function calls:
   972 ;;		_vfprintf
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text1
   979  001120                     __ptext1:
   980                           	opt callstack 0
   981  001120                     _sprintf:
   982                           	opt callstack 21
   983                           
   984                           ;incstack = 0
   985  001120  0E72               	movlw	low (?_sprintf+4)
   986  001122  0100               	movlb	0	; () banked
   987  001124  6F76               	movwf	sprintf@ap& (0+255),b
   988  001126  0E00               	movlw	high (?_sprintf+4)
   989  001128  6F77               	movwf	(sprintf@ap+1)& (0+255),b
   990  00112A  C06E  F078         	movff	sprintf@s,sprintf@f
   991  00112E  C06F  F079         	movff	sprintf@s+1,sprintf@f+1
   992                           
   993                           ; BSR set to: 0
   994  001132  0E00               	movlw	0
   995  001134  6F7B               	movwf	(sprintf@f+3)& (0+255),b
   996  001136  0E00               	movlw	0
   997  001138  6F7A               	movwf	(sprintf@f+2)& (0+255),b
   998                           
   999                           ; BSR set to: 0
  1000  00113A  0E00               	movlw	0
  1001  00113C  6F7D               	movwf	(sprintf@f+5)& (0+255),b
  1002  00113E  0E00               	movlw	0
  1003  001140  6F7C               	movwf	(sprintf@f+4)& (0+255),b
  1004                           
  1005                           ; BSR set to: 0
  1006  001142  0E78               	movlw	low sprintf@f
  1007  001144  6F68               	movwf	vfprintf@fp& (0+255),b
  1008  001146  0E00               	movlw	high sprintf@f
  1009  001148  6F69               	movwf	(vfprintf@fp+1)& (0+255),b
  1010  00114A  C070  F06A         	movff	sprintf@fmt,vfprintf@fmt
  1011  00114E  C071  F06B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1012  001152  0E76               	movlw	low sprintf@ap
  1013  001154  6F6C               	movwf	vfprintf@ap& (0+255),b
  1014  001156  0E00               	movlw	high sprintf@ap
  1015  001158  6F6D               	movwf	(vfprintf@ap+1)& (0+255),b
  1016  00115A  EC65  F008         	call	_vfprintf	;wreg free
  1017  00115E  0100               	movlb	0	; () banked
  1018  001160  517A               	movf	(sprintf@f+2)& (0+255),w,b
  1019  001162  256E               	addwf	sprintf@s& (0+255),w,b
  1020  001164  6ED9               	movwf	fsr2l,c
  1021  001166  517B               	movf	(sprintf@f+3)& (0+255),w,b
  1022  001168  216F               	addwfc	(sprintf@s+1)& (0+255),w,b
  1023  00116A  6EDA               	movwf	fsr2h,c
  1024  00116C  0E00               	movlw	0
  1025  00116E  6EDF               	movwf	indf2,c
  1026                           
  1027                           ; BSR set to: 0
  1028  001170  0012               	return		;funcret
  1029  001172                     __end_of_sprintf:
  1030                           	opt callstack 0
  1031                           
  1032 ;; *************** function _vfprintf *****************
  1033 ;; Defined at:
  1034 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  1037 ;;		 -> sprintf@f(6), 
  1038 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  1039 ;;		 -> STR_1(13), 
  1040 ;;  ap              2   12[BANK0 ] PTR PTR void 
  1041 ;;		 -> sprintf@ap(2), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  1044 ;;		 -> STR_1(13), 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2    8[BANK0 ] int 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1054 ;;      Params:         0       6       0       0
  1055 ;;      Locals:         2       0       0       0
  1056 ;;      Temps:          0       0       0       0
  1057 ;;      Totals:         2       6       0       0
  1058 ;;Total ram usage:        8 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    8
  1061 ;; This function calls:
  1062 ;;		_vfpfcnvrt
  1063 ;; This function is called by:
  1064 ;;		_sprintf
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text2
  1069  0010CA                     __ptext2:
  1070                           	opt callstack 0
  1071  0010CA                     _vfprintf:
  1072                           	opt callstack 21
  1073                           
  1074                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;incstack = 0
  1078  0010CA  C06A  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  1079  0010CE  C06B  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1080                           
  1081                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1082  0010D2  0E00               	movlw	0
  1083  0010D4  0100               	movlb	0	; () banked
  1084  0010D6  6FA8               	movwf	(_nout+1)& (0+255),b
  1085  0010D8  0E00               	movlw	0
  1086  0010DA  6FA7               	movwf	_nout& (0+255),b
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1089  0010DC  D013               	goto	l2504
  1090  0010DE                     l2502:
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1094  0010DE  C068  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1095  0010E2  C069  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1096  0010E6  0E4D               	movlw	low vfprintf@cfmt
  1097  0010E8  6E45               	movwf	vfpfcnvrt@fmt,c
  1098  0010EA  0E00               	movlw	high vfprintf@cfmt
  1099  0010EC  6E46               	movwf	vfpfcnvrt@fmt+1,c
  1100  0010EE  C06C  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1101  0010F2  C06D  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1102  0010F6  EC77  F002         	call	_vfpfcnvrt	;wreg free
  1103  0010FA  5043               	movf	?_vfpfcnvrt,w,c
  1104  0010FC  0100               	movlb	0	; () banked
  1105  0010FE  27A7               	addwf	_nout& (0+255),f,b
  1106  001100  5044               	movf	?_vfpfcnvrt+1,w,c
  1107  001102  23A8               	addwfc	(_nout+1)& (0+255),f,b
  1108  001104                     l2504:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1112  001104  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1113  001108  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1114  00110C                     	if	0	;tblptru may be non-zero
  1115  00110C                     	endif
  1116  00110C                     	if	0	;tblptru may be non-zero
  1117  00110C                     	endif
  1118  00110C  0008               	tblrd		*
  1119  00110E  50F5               	movf	tablat,w,c
  1120  001110  0900               	iorlw	0
  1121  001112  A4D8               	btfss	status,2,c
  1122  001114  D7E4               	goto	l2502
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1126  001116  C0A7  F068         	movff	_nout,?_vfprintf
  1127  00111A  C0A8  F069         	movff	_nout+1,?_vfprintf+1
  1128                           
  1129                           ; BSR set to: 0
  1130  00111E  0012               	return		;funcret
  1131  001120                     __end_of_vfprintf:
  1132                           	opt callstack 0
  1133                           
  1134 ;; *************** function _vfpfcnvrt *****************
  1135 ;; Defined at:
  1136 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1139 ;;		 -> sprintf@f(6), 
  1140 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1141 ;;		 -> vfprintf@cfmt(2), 
  1142 ;;  ap              2   70[COMRAM] PTR PTR void 
  1143 ;;		 -> sprintf@ap(2), 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  llu             8    0[BANK0 ] unsigned long long 
  1146 ;;  ll              8    0        long long 
  1147 ;;  f               4    0        long long 
  1148 ;;  vp              3    0        PTR void 
  1149 ;;  ct              3    0        unsigned char [3]
  1150 ;;  cp              3    0        PTR unsigned char 
  1151 ;;  i               2    0        int 
  1152 ;;  done            2    0        int 
  1153 ;;  c               1    0        unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  2   66[COMRAM] int 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1163 ;;      Params:         6       0       0       0
  1164 ;;      Locals:         0       8       0       0
  1165 ;;      Temps:          4       0       0       0
  1166 ;;      Totals:        10       8       0       0
  1167 ;;Total ram usage:       18 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    7
  1170 ;; This function calls:
  1171 ;;		_fputc
  1172 ;;		_utoa
  1173 ;; This function is called by:
  1174 ;;		_vfprintf
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text3
  1179  0004EE                     __ptext3:
  1180                           	opt callstack 0
  1181  0004EE                     _vfpfcnvrt:
  1182                           	opt callstack 21
  1183                           
  1184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;incstack = 0
  1188  0004EE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1189  0004F2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1190  0004F6  CFDE FFF6          	movff	postinc2,tblptrl
  1191  0004FA  CFDD FFF7          	movff	postdec2,tblptrh
  1192  0004FE                     	if	0	;tblptru may be non-zero
  1193  0004FE                     	endif
  1194  0004FE                     	if	0	;tblptru may be non-zero
  1195  0004FE                     	endif
  1196  0004FE  0008               	tblrd		*
  1197  000500  50F5               	movf	tablat,w,c
  1198  000502  0A25               	xorlw	37
  1199  000504  A4D8               	btfss	status,2,c
  1200  000506  D08E               	goto	l2490
  1201                           
  1202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1203  000508  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1204  00050C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1205  000510  2ADE               	incf	postinc2,f,c
  1206  000512  0E00               	movlw	0
  1207  000514  22DD               	addwfc	postdec2,f,c
  1208                           
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1210  000516  0E00               	movlw	0
  1211  000518  6E50               	movwf	_width+1,c
  1212  00051A  0E00               	movlw	0
  1213  00051C  6E4F               	movwf	_width,c
  1214  00051E  C04F  F053         	movff	_width,_flags
  1215  000522  C050  F054         	movff	_width+1,_flags+1
  1216                           
  1217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1218  000526  6851               	setf	_prec,c
  1219  000528  6852               	setf	_prec+1,c
  1220                           
  1221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1222  00052A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1223  00052E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1224  000532  CFDE FFF6          	movff	postinc2,tblptrl
  1225  000536  CFDD FFF7          	movff	postdec2,tblptrh
  1226  00053A                     	if	0	;tblptru may be non-zero
  1227  00053A                     	endif
  1228  00053A                     	if	0	;tblptru may be non-zero
  1229  00053A                     	endif
  1230  00053A  0008               	tblrd		*
  1231  00053C  50F5               	movf	tablat,w,c
  1232  00053E  0A75               	xorlw	117
  1233  000540  A4D8               	btfss	status,2,c
  1234  000542  D041               	goto	l2474
  1235                           
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1237  000544  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1238  000548  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1239  00054C  2ADE               	incf	postinc2,f,c
  1240  00054E  0E00               	movlw	0
  1241  000550  22DD               	addwfc	postdec2,f,c
  1242                           
  1243                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1244  000552  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1245  000556  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1246  00055A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1247  00055E  0E02               	movlw	2
  1248  000560  26DE               	addwf	postinc2,f,c
  1249  000562  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1250  000566  0E00               	movlw	0
  1251  000568  22DD               	addwfc	postdec2,f,c
  1252  00056A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1253  00056E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1254  000572  CFDE F04B          	movff	postinc2,??_vfpfcnvrt+2
  1255  000576  CFDD F04C          	movff	postdec2,??_vfpfcnvrt+3
  1256  00057A  C04B  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1257  00057E  C04C  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1258  000582  0100               	movlb	0	; () banked
  1259  000584  6B62               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1260  000586  6B63               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1261  000588  6B64               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1262  00058A  6B65               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1263  00058C  6B66               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1264  00058E  6B67               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1268  000590  C043  F023         	movff	vfpfcnvrt@fp,utoa@fp
  1269  000594  C044  F024         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1270  000598  C060  F025         	movff	vfpfcnvrt@llu,utoa@d
  1271  00059C  C061  F026         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1272  0005A0  C062  F027         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1273  0005A4  C063  F028         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1274  0005A8  C064  F029         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1275  0005AC  C065  F02A         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1276  0005B0  C066  F02B         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1277  0005B4  C067  F02C         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1278  0005B8  ECA0  F001         	call	_utoa	;wreg free
  1279  0005BC  C023  F043         	movff	?_utoa,?_vfpfcnvrt
  1280  0005C0  C024  F044         	movff	?_utoa+1,?_vfpfcnvrt+1
  1281  0005C4  0012               	return	
  1282  0005C6                     l2474:
  1283                           
  1284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1285  0005C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1286  0005CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1287  0005CE  CFDE FFF6          	movff	postinc2,tblptrl
  1288  0005D2  CFDD FFF7          	movff	postdec2,tblptrh
  1289  0005D6                     	if	0	;tblptru may be non-zero
  1290  0005D6                     	endif
  1291  0005D6                     	if	0	;tblptru may be non-zero
  1292  0005D6                     	endif
  1293  0005D6  0008               	tblrd		*
  1294  0005D8  50F5               	movf	tablat,w,c
  1295  0005DA  0A25               	xorlw	37
  1296  0005DC  A4D8               	btfss	status,2,c
  1297  0005DE  D016               	goto	l2484
  1298                           
  1299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1300  0005E0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1301  0005E4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1302  0005E8  2ADE               	incf	postinc2,f,c
  1303  0005EA  0E00               	movlw	0
  1304  0005EC  22DD               	addwfc	postdec2,f,c
  1305                           
  1306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1307  0005EE  0E00               	movlw	0
  1308  0005F0  6E09               	movwf	fputc@c+1,c
  1309  0005F2  0E25               	movlw	37
  1310  0005F4  6E08               	movwf	fputc@c,c
  1311  0005F6  C043  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  1312  0005FA  C044  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1313  0005FE  ECA6  F006         	call	_fputc	;wreg free
  1314  000602                     l2480:
  1315                           
  1316                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1317  000602  0E00               	movlw	0
  1318  000604  6E44               	movwf	?_vfpfcnvrt+1,c
  1319  000606  0E01               	movlw	1
  1320  000608  6E43               	movwf	?_vfpfcnvrt,c
  1321  00060A  0012               	return	
  1322  00060C                     l2484:
  1323                           
  1324                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1325  00060C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1326  000610  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1327  000614  2ADE               	incf	postinc2,f,c
  1328  000616  0E00               	movlw	0
  1329  000618  22DD               	addwfc	postdec2,f,c
  1330                           
  1331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1332  00061A  0E00               	movlw	0
  1333  00061C  6E44               	movwf	?_vfpfcnvrt+1,c
  1334  00061E  0E00               	movlw	0
  1335  000620  6E43               	movwf	?_vfpfcnvrt,c
  1336  000622  0012               	return	
  1337  000624                     l2490:
  1338                           
  1339                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1340  000624  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1341  000628  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1342  00062C  CFDE FFF6          	movff	postinc2,tblptrl
  1343  000630  CFDD FFF7          	movff	postdec2,tblptrh
  1344  000634                     	if	0	;tblptru may be non-zero
  1345  000634                     	endif
  1346  000634                     	if	0	;tblptru may be non-zero
  1347  000634                     	endif
  1348  000634  0008               	tblrd		*
  1349  000636  50F5               	movf	tablat,w,c
  1350  000638  6E08               	movwf	fputc@c,c
  1351  00063A  6A09               	clrf	fputc@c+1,c
  1352  00063C  C043  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  1353  000640  C044  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1354  000644  ECA6  F006         	call	_fputc	;wreg free
  1355                           
  1356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1357  000648  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1358  00064C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1359  000650  2ADE               	incf	postinc2,f,c
  1360  000652  0E00               	movlw	0
  1361  000654  22DD               	addwfc	postdec2,f,c
  1362  000656  D7D5               	goto	l2480
  1363  000658                     __end_of_vfpfcnvrt:
  1364                           	opt callstack 0
  1365                           
  1366 ;; *************** function _utoa *****************
  1367 ;; Defined at:
  1368 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  fp              2   34[COMRAM] PTR struct _IO_FILE
  1371 ;;		 -> sprintf@f(6), 
  1372 ;;  d               8   36[COMRAM] unsigned long long 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  n               8   56[COMRAM] unsigned long long 
  1375 ;;  i               2   64[COMRAM] int 
  1376 ;;  w               2   54[COMRAM] int 
  1377 ;;  p               2   52[COMRAM] int 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  2   34[COMRAM] int 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1387 ;;      Params:        10       0       0       0
  1388 ;;      Locals:        14       0       0       0
  1389 ;;      Temps:          8       0       0       0
  1390 ;;      Totals:        32       0       0       0
  1391 ;;Total ram usage:       32 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    6
  1394 ;; This function calls:
  1395 ;;		___lodiv
  1396 ;;		___lomod
  1397 ;;		_pad
  1398 ;; This function is called by:
  1399 ;;		_vfpfcnvrt
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text4
  1404  000340                     __ptext4:
  1405                           	opt callstack 0
  1406  000340                     _utoa:
  1407                           	opt callstack 21
  1408                           
  1409                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1410                           
  1411                           ;incstack = 0
  1412  000340  AE52               	btfss	_prec+1,7,c
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1415  000342  9253               	bcf	_flags,1,c
  1416                           
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1418  000344  BE52               	btfsc	_prec+1,7,c
  1419  000346  D005               	goto	u1950
  1420  000348  5052               	movf	_prec+1,w,c
  1421  00034A  E108               	bnz	l324
  1422  00034C  0451               	decf	_prec,w,c
  1423  00034E  B0D8               	btfsc	status,0,c
  1424  000350  D005               	goto	l324
  1425  000352                     u1950:
  1426  000352  0E00               	movlw	0
  1427  000354  6E36               	movwf	utoa@p+1,c
  1428  000356  0E01               	movlw	1
  1429  000358  6E35               	movwf	utoa@p,c
  1430  00035A  D004               	goto	l326
  1431  00035C                     l324:
  1432  00035C  C051  F035         	movff	_prec,utoa@p
  1433  000360  C052  F036         	movff	_prec+1,utoa@p+1
  1434  000364                     l326:
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1437  000364  C04F  F037         	movff	_width,utoa@w
  1438  000368  C050  F038         	movff	_width+1,utoa@w+1
  1439                           
  1440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1441  00036C  C025  F039         	movff	utoa@d,utoa@n
  1442  000370  C026  F03A         	movff	utoa@d+1,utoa@n+1
  1443  000374  C027  F03B         	movff	utoa@d+2,utoa@n+2
  1444  000378  C028  F03C         	movff	utoa@d+3,utoa@n+3
  1445  00037C  C029  F03D         	movff	utoa@d+4,utoa@n+4
  1446  000380  C02A  F03E         	movff	utoa@d+5,utoa@n+5
  1447  000384  C02B  F03F         	movff	utoa@d+6,utoa@n+6
  1448  000388  C02C  F040         	movff	utoa@d+7,utoa@n+7
  1449                           
  1450                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1451  00038C  0E00               	movlw	0
  1452  00038E  6E42               	movwf	utoa@i+1,c
  1453  000390  0E1F               	movlw	31
  1454  000392  6E41               	movwf	utoa@i,c
  1455                           
  1456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1457  000394  0E00               	movlw	0
  1458  000396  0100               	movlb	0	; () banked
  1459  000398  6FCA               	movwf	(_dbuf+31)& (0+255),b
  1460                           
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1462  00039A  D076               	goto	l2444
  1463  00039C                     l2434:
  1464                           
  1465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1466  00039C  0641               	decf	utoa@i,f,c
  1467  00039E  A0D8               	btfss	status,0,c
  1468  0003A0  0642               	decf	utoa@i+1,f,c
  1469                           
  1470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1471  0003A2  0EAB               	movlw	low _dbuf
  1472  0003A4  2441               	addwf	utoa@i,w,c
  1473  0003A6  6ED9               	movwf	fsr2l,c
  1474  0003A8  0E00               	movlw	high _dbuf
  1475  0003AA  2042               	addwfc	utoa@i+1,w,c
  1476  0003AC  6EDA               	movwf	fsr2h,c
  1477  0003AE  C039  F008         	movff	utoa@n,___lomod@dividend
  1478  0003B2  C03A  F009         	movff	utoa@n+1,___lomod@dividend+1
  1479  0003B6  C03B  F00A         	movff	utoa@n+2,___lomod@dividend+2
  1480  0003BA  C03C  F00B         	movff	utoa@n+3,___lomod@dividend+3
  1481  0003BE  C03D  F00C         	movff	utoa@n+4,___lomod@dividend+4
  1482  0003C2  C03E  F00D         	movff	utoa@n+5,___lomod@dividend+5
  1483  0003C6  C03F  F00E         	movff	utoa@n+6,___lomod@dividend+6
  1484  0003CA  C040  F00F         	movff	utoa@n+7,___lomod@dividend+7
  1485  0003CE  0E0A               	movlw	10
  1486  0003D0  6E10               	movwf	___lomod@divisor,c
  1487  0003D2  0E00               	movlw	0
  1488  0003D4  6E11               	movwf	___lomod@divisor+1,c
  1489  0003D6  0E00               	movlw	0
  1490  0003D8  6E12               	movwf	___lomod@divisor+2,c
  1491  0003DA  0E00               	movlw	0
  1492  0003DC  6E13               	movwf	___lomod@divisor+3,c
  1493  0003DE  0E00               	movlw	0
  1494  0003E0  6E14               	movwf	___lomod@divisor+4,c
  1495  0003E2  0E00               	movlw	0
  1496  0003E4  6E15               	movwf	___lomod@divisor+5,c
  1497  0003E6  0E00               	movlw	0
  1498  0003E8  6E16               	movwf	___lomod@divisor+6,c
  1499  0003EA  0E00               	movlw	0
  1500  0003EC  6E17               	movwf	___lomod@divisor+7,c
  1501  0003EE  EC4F  F006         	call	___lomod	;wreg free
  1502  0003F2  C008  F02D         	movff	?___lomod,??_utoa
  1503  0003F6  C009  F02E         	movff	?___lomod+1,??_utoa+1
  1504  0003FA  C00A  F02F         	movff	?___lomod+2,??_utoa+2
  1505  0003FE  C00B  F030         	movff	?___lomod+3,??_utoa+3
  1506  000402  C00C  F031         	movff	?___lomod+4,??_utoa+4
  1507  000406  C00D  F032         	movff	?___lomod+5,??_utoa+5
  1508  00040A  C00E  F033         	movff	?___lomod+6,??_utoa+6
  1509  00040E  C00F  F034         	movff	?___lomod+7,??_utoa+7
  1510  000412  502D               	movf	??_utoa,w,c
  1511  000414  0F30               	addlw	48
  1512  000416  6EDF               	movwf	indf2,c
  1513                           
  1514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1515  000418  0635               	decf	utoa@p,f,c
  1516  00041A  A0D8               	btfss	status,0,c
  1517  00041C  0636               	decf	utoa@p+1,f,c
  1518                           
  1519                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1520  00041E  0637               	decf	utoa@w,f,c
  1521  000420  A0D8               	btfss	status,0,c
  1522  000422  0638               	decf	utoa@w+1,f,c
  1523                           
  1524                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1525  000424  C039  F008         	movff	utoa@n,___lodiv@dividend
  1526  000428  C03A  F009         	movff	utoa@n+1,___lodiv@dividend+1
  1527  00042C  C03B  F00A         	movff	utoa@n+2,___lodiv@dividend+2
  1528  000430  C03C  F00B         	movff	utoa@n+3,___lodiv@dividend+3
  1529  000434  C03D  F00C         	movff	utoa@n+4,___lodiv@dividend+4
  1530  000438  C03E  F00D         	movff	utoa@n+5,___lodiv@dividend+5
  1531  00043C  C03F  F00E         	movff	utoa@n+6,___lodiv@dividend+6
  1532  000440  C040  F00F         	movff	utoa@n+7,___lodiv@dividend+7
  1533  000444  0E0A               	movlw	10
  1534  000446  6E10               	movwf	___lodiv@divisor,c
  1535  000448  0E00               	movlw	0
  1536  00044A  6E11               	movwf	___lodiv@divisor+1,c
  1537  00044C  0E00               	movlw	0
  1538  00044E  6E12               	movwf	___lodiv@divisor+2,c
  1539  000450  0E00               	movlw	0
  1540  000452  6E13               	movwf	___lodiv@divisor+3,c
  1541  000454  0E00               	movlw	0
  1542  000456  6E14               	movwf	___lodiv@divisor+4,c
  1543  000458  0E00               	movlw	0
  1544  00045A  6E15               	movwf	___lodiv@divisor+5,c
  1545  00045C  0E00               	movlw	0
  1546  00045E  6E16               	movwf	___lodiv@divisor+6,c
  1547  000460  0E00               	movlw	0
  1548  000462  6E17               	movwf	___lodiv@divisor+7,c
  1549  000464  EC84  F005         	call	___lodiv	;wreg free
  1550  000468  C008  F039         	movff	?___lodiv,utoa@n
  1551  00046C  C009  F03A         	movff	?___lodiv+1,utoa@n+1
  1552  000470  C00A  F03B         	movff	?___lodiv+2,utoa@n+2
  1553  000474  C00B  F03C         	movff	?___lodiv+3,utoa@n+3
  1554  000478  C00C  F03D         	movff	?___lodiv+4,utoa@n+4
  1555  00047C  C00D  F03E         	movff	?___lodiv+5,utoa@n+5
  1556  000480  C00E  F03F         	movff	?___lodiv+6,utoa@n+6
  1557  000484  C00F  F040         	movff	?___lodiv+7,utoa@n+7
  1558  000488                     l2444:
  1559                           
  1560                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1561  000488  5041               	movf	utoa@i,w,c
  1562  00048A  1042               	iorwf	utoa@i+1,w,c
  1563  00048C  B4D8               	btfsc	status,2,c
  1564  00048E  D01A               	goto	u2000
  1565  000490  5039               	movf	utoa@n,w,c
  1566  000492  103A               	iorwf	utoa@n+1,w,c
  1567  000494  103B               	iorwf	utoa@n+2,w,c
  1568  000496  103C               	iorwf	utoa@n+3,w,c
  1569  000498  103D               	iorwf	utoa@n+4,w,c
  1570  00049A  103E               	iorwf	utoa@n+5,w,c
  1571  00049C  103F               	iorwf	utoa@n+6,w,c
  1572  00049E  1040               	iorwf	utoa@n+7,w,c
  1573  0004A0  A4D8               	btfss	status,2,c
  1574  0004A2  D77C               	goto	l2434
  1575  0004A4  BE36               	btfsc	utoa@p+1,7,c
  1576  0004A6  D005               	goto	u1980
  1577  0004A8  5036               	movf	utoa@p+1,w,c
  1578  0004AA  E102               	bnz	u1981
  1579  0004AC  0435               	decf	utoa@p,w,c
  1580  0004AE  B0D8               	btfsc	status,0,c
  1581  0004B0                     u1981:
  1582  0004B0  D775               	goto	l2434
  1583  0004B2                     u1980:
  1584  0004B2  BE38               	btfsc	utoa@w+1,7,c
  1585  0004B4  D007               	goto	u2000
  1586  0004B6  5038               	movf	utoa@w+1,w,c
  1587  0004B8  E103               	bnz	u1990
  1588  0004BA  0437               	decf	utoa@w,w,c
  1589  0004BC  A0D8               	btfss	status,0,c
  1590  0004BE  D002               	goto	u2000
  1591  0004C0                     u1990:
  1592  0004C0  B253               	btfsc	_flags,1,c
  1593  0004C2  D76C               	goto	l2434
  1594  0004C4                     u2000:
  1595                           
  1596                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1597  0004C4  C023  F018         	movff	utoa@fp,pad@fp
  1598  0004C8  C024  F019         	movff	utoa@fp+1,pad@fp+1
  1599  0004CC  0EAB               	movlw	low _dbuf
  1600  0004CE  2441               	addwf	utoa@i,w,c
  1601  0004D0  6E1A               	movwf	pad@buf,c
  1602  0004D2  0E00               	movlw	high _dbuf
  1603  0004D4  2042               	addwfc	utoa@i+1,w,c
  1604  0004D6  6E1B               	movwf	pad@buf+1,c
  1605  0004D8  C037  F01C         	movff	utoa@w,pad@p
  1606  0004DC  C038  F01D         	movff	utoa@w+1,pad@p+1
  1607  0004E0  ECF6  F006         	call	_pad	;wreg free
  1608  0004E4  C018  F023         	movff	?_pad,?_utoa
  1609  0004E8  C019  F024         	movff	?_pad+1,?_utoa+1
  1610  0004EC  0012               	return		;funcret
  1611  0004EE                     __end_of_utoa:
  1612                           	opt callstack 0
  1613                           
  1614 ;; *************** function _pad *****************
  1615 ;; Defined at:
  1616 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  fp              2   23[COMRAM] PTR struct _IO_FILE
  1619 ;;		 -> sprintf@f(6), 
  1620 ;;  buf             2   25[COMRAM] PTR unsigned char 
  1621 ;;		 -> dbuf(32), 
  1622 ;;  p               2   27[COMRAM] int 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  w               2   32[COMRAM] int 
  1625 ;;  i               2   30[COMRAM] int 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  2   23[COMRAM] int 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1635 ;;      Params:         6       0       0       0
  1636 ;;      Locals:         4       0       0       0
  1637 ;;      Temps:          1       0       0       0
  1638 ;;      Totals:        11       0       0       0
  1639 ;;Total ram usage:       11 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    5
  1642 ;; This function calls:
  1643 ;;		_fputc
  1644 ;;		_fputs
  1645 ;;		_strlen
  1646 ;; This function is called by:
  1647 ;;		_utoa
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text5
  1652  000DEC                     __ptext5:
  1653                           	opt callstack 0
  1654  000DEC                     _pad:
  1655                           	opt callstack 21
  1656                           
  1657                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1658                           
  1659                           ;incstack = 0
  1660  000DEC  A053               	btfss	_flags,0,c
  1661  000DEE  D00A               	goto	l2366
  1662                           
  1663                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1664  000DF0  C01A  F011         	movff	pad@buf,fputs@s
  1665  000DF4  C01B  F012         	movff	pad@buf+1,fputs@s+1
  1666  000DF8  C018  F013         	movff	pad@fp,fputs@fp
  1667  000DFC  C019  F014         	movff	pad@fp+1,fputs@fp+1
  1668  000E00  EC23  F009         	call	_fputs	;wreg free
  1669  000E04                     l2366:
  1670                           
  1671                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1672  000E04  BE1D               	btfsc	pad@p+1,7,c
  1673  000E06  D005               	goto	l2370
  1674  000E08  C01C  F021         	movff	pad@p,pad@w
  1675  000E0C  C01D  F022         	movff	pad@p+1,pad@w+1
  1676  000E10  D004               	goto	l314
  1677  000E12                     l2370:
  1678  000E12  0E00               	movlw	0
  1679  000E14  6E22               	movwf	pad@w+1,c
  1680  000E16  0E00               	movlw	0
  1681  000E18  6E21               	movwf	pad@w,c
  1682  000E1A                     l314:
  1683                           
  1684                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1685  000E1A  0E00               	movlw	0
  1686  000E1C  6E20               	movwf	pad@i+1,c
  1687  000E1E  0E00               	movlw	0
  1688  000E20  6E1F               	movwf	pad@i,c
  1689                           
  1690                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1691  000E22  D00C               	goto	l2376
  1692  000E24                     l2372:
  1693                           
  1694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1695  000E24  0E00               	movlw	0
  1696  000E26  6E09               	movwf	fputc@c+1,c
  1697  000E28  0E20               	movlw	32
  1698  000E2A  6E08               	movwf	fputc@c,c
  1699  000E2C  C018  F00A         	movff	pad@fp,fputc@fp
  1700  000E30  C019  F00B         	movff	pad@fp+1,fputc@fp+1
  1701  000E34  ECA6  F006         	call	_fputc	;wreg free
  1702                           
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1704  000E38  4A1F               	infsnz	pad@i,f,c
  1705  000E3A  2A20               	incf	pad@i+1,f,c
  1706  000E3C                     l2376:
  1707                           
  1708                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1709  000E3C  5021               	movf	pad@w,w,c
  1710  000E3E  5C1F               	subwf	pad@i,w,c
  1711  000E40  5020               	movf	pad@i+1,w,c
  1712  000E42  0A80               	xorlw	128
  1713  000E44  6E1E               	movwf	??_pad& (0+255),c
  1714  000E46  5022               	movf	pad@w+1,w,c
  1715  000E48  0A80               	xorlw	128
  1716  000E4A  581E               	subwfb	??_pad& (0+255),w,c
  1717  000E4C  A0D8               	btfss	status,0,c
  1718  000E4E  D7EA               	goto	l2372
  1719                           
  1720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1721  000E50  B053               	btfsc	_flags,0,c
  1722  000E52  D00A               	goto	l2380
  1723                           
  1724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1725  000E54  C01A  F011         	movff	pad@buf,fputs@s
  1726  000E58  C01B  F012         	movff	pad@buf+1,fputs@s+1
  1727  000E5C  C018  F013         	movff	pad@fp,fputs@fp
  1728  000E60  C019  F014         	movff	pad@fp+1,fputs@fp+1
  1729  000E64  EC23  F009         	call	_fputs	;wreg free
  1730  000E68                     l2380:
  1731                           
  1732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1733  000E68  C01A  F008         	movff	pad@buf,strlen@s
  1734  000E6C  C01B  F009         	movff	pad@buf+1,strlen@s+1
  1735  000E70  EC85  F009         	call	_strlen	;wreg free
  1736  000E74  5021               	movf	pad@w,w,c
  1737  000E76  2408               	addwf	?_strlen,w,c
  1738  000E78  6E18               	movwf	?_pad,c
  1739  000E7A  5022               	movf	pad@w+1,w,c
  1740  000E7C  2009               	addwfc	?_strlen+1,w,c
  1741  000E7E  6E19               	movwf	?_pad+1,c
  1742  000E80  0012               	return		;funcret
  1743  000E82                     __end_of_pad:
  1744                           	opt callstack 0
  1745                           
  1746 ;; *************** function _strlen *****************
  1747 ;; Defined at:
  1748 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  s               2    7[COMRAM] PTR const unsigned char 
  1751 ;;		 -> dbuf(32), 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  a               2    9[COMRAM] PTR const unsigned char 
  1754 ;;		 -> dbuf(32), 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  2    7[COMRAM] unsigned int 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1764 ;;      Params:         2       0       0       0
  1765 ;;      Locals:         2       0       0       0
  1766 ;;      Temps:          0       0       0       0
  1767 ;;      Totals:         4       0       0       0
  1768 ;;Total ram usage:        4 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    2
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_pad
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text6
  1779  00130A                     __ptext6:
  1780                           	opt callstack 0
  1781  00130A                     _strlen:
  1782                           	opt callstack 23
  1783                           
  1784                           ;incstack = 0
  1785  00130A  C008  F00A         	movff	strlen@s,strlen@a
  1786  00130E  C009  F00B         	movff	strlen@s+1,strlen@a+1
  1787  001312  D002               	goto	l2356
  1788  001314                     l2354:
  1789  001314  4A08               	infsnz	strlen@s,f,c
  1790  001316  2A09               	incf	strlen@s+1,f,c
  1791  001318                     l2356:
  1792  001318  C008  FFD9         	movff	strlen@s,fsr2l
  1793  00131C  C009  FFDA         	movff	strlen@s+1,fsr2h
  1794  001320  50DF               	movf	indf2,w,c
  1795  001322  A4D8               	btfss	status,2,c
  1796  001324  D7F7               	goto	l2354
  1797  001326  500A               	movf	strlen@a,w,c
  1798  001328  5C08               	subwf	strlen@s,w,c
  1799  00132A  6E08               	movwf	?_strlen,c
  1800  00132C  500B               	movf	strlen@a+1,w,c
  1801  00132E  5809               	subwfb	strlen@s+1,w,c
  1802  001330  6E09               	movwf	?_strlen+1,c
  1803  001332  0012               	return		;funcret
  1804  001334                     __end_of_strlen:
  1805                           	opt callstack 0
  1806                           
  1807 ;; *************** function _fputs *****************
  1808 ;; Defined at:
  1809 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  s               2   16[COMRAM] PTR const unsigned char 
  1812 ;;		 -> dbuf(32), 
  1813 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1814 ;;		 -> sprintf@f(6), 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  i               2   21[COMRAM] int 
  1817 ;;  c               1   20[COMRAM] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  2   16[COMRAM] int 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1827 ;;      Params:         4       0       0       0
  1828 ;;      Locals:         3       0       0       0
  1829 ;;      Temps:          0       0       0       0
  1830 ;;      Totals:         7       0       0       0
  1831 ;;Total ram usage:        7 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    4
  1834 ;; This function calls:
  1835 ;;		_fputc
  1836 ;; This function is called by:
  1837 ;;		_pad
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text7
  1842  001246                     __ptext7:
  1843                           	opt callstack 0
  1844  001246                     _fputs:
  1845                           	opt callstack 21
  1846                           
  1847                           ;incstack = 0
  1848  001246  0E00               	movlw	0
  1849  001248  6E17               	movwf	fputs@i+1,c
  1850  00124A  0E00               	movlw	0
  1851  00124C  6E16               	movwf	fputs@i,c
  1852  00124E  D00B               	goto	l2350
  1853  001250                     l2346:
  1854  001250  C015  F008         	movff	fputs@c,fputc@c
  1855  001254  6A09               	clrf	fputc@c+1,c
  1856  001256  C013  F00A         	movff	fputs@fp,fputc@fp
  1857  00125A  C014  F00B         	movff	fputs@fp+1,fputc@fp+1
  1858  00125E  ECA6  F006         	call	_fputc	;wreg free
  1859  001262  4A16               	infsnz	fputs@i,f,c
  1860  001264  2A17               	incf	fputs@i+1,f,c
  1861  001266                     l2350:
  1862  001266  5016               	movf	fputs@i,w,c
  1863  001268  2411               	addwf	fputs@s,w,c
  1864  00126A  6ED9               	movwf	fsr2l,c
  1865  00126C  5017               	movf	fputs@i+1,w,c
  1866  00126E  2012               	addwfc	fputs@s+1,w,c
  1867  001270  6EDA               	movwf	fsr2h,c
  1868  001272  50DF               	movf	indf2,w,c
  1869  001274  6E15               	movwf	fputs@c,c
  1870  001276  5015               	movf	fputs@c,w,c
  1871  001278  B4D8               	btfsc	status,2,c
  1872  00127A  0012               	return	
  1873  00127C  D7E9               	goto	l2346
  1874  00127E                     __end_of_fputs:
  1875                           	opt callstack 0
  1876                           
  1877 ;; *************** function _fputc *****************
  1878 ;; Defined at:
  1879 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  c               2    7[COMRAM] int 
  1882 ;;  fp              2    9[COMRAM] PTR struct _IO_FILE
  1883 ;;		 -> sprintf@f(6), 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    7[COMRAM] int 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1895 ;;      Params:         4       0       0       0
  1896 ;;      Locals:         0       0       0       0
  1897 ;;      Temps:          5       0       0       0
  1898 ;;      Totals:         9       0       0       0
  1899 ;;Total ram usage:        9 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    3
  1902 ;; This function calls:
  1903 ;;		_putch
  1904 ;; This function is called by:
  1905 ;;		_pad
  1906 ;;		_vfpfcnvrt
  1907 ;;		_fputs
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text8
  1912  000D4C                     __ptext8:
  1913                           	opt callstack 0
  1914  000D4C                     _fputc:
  1915                           	opt callstack 21
  1916                           
  1917                           ;incstack = 0
  1918  000D4C  500A               	movf	fputc@fp,w,c
  1919  000D4E  100B               	iorwf	fputc@fp+1,w,c
  1920  000D50  B4D8               	btfsc	status,2,c
  1921  000D52  D004               	goto	u1780
  1922  000D54  500A               	movf	fputc@fp,w,c
  1923  000D56  100B               	iorwf	fputc@fp+1,w,c
  1924  000D58  A4D8               	btfss	status,2,c
  1925  000D5A  D004               	goto	l2336
  1926  000D5C                     u1780:
  1927  000D5C  5008               	movf	fputc@c,w,c
  1928  000D5E  EC06  F00A         	call	_putch
  1929  000D62  0012               	return	
  1930  000D64                     l2336:
  1931  000D64  EE20 F004          	lfsr	2,4
  1932  000D68  500A               	movf	fputc@fp,w,c
  1933  000D6A  26D9               	addwf	fsr2l,f,c
  1934  000D6C  500B               	movf	fputc@fp+1,w,c
  1935  000D6E  22DA               	addwfc	fsr2h,f,c
  1936  000D70  50DE               	movf	postinc2,w,c
  1937  000D72  10DE               	iorwf	postinc2,w,c
  1938  000D74  B4D8               	btfsc	status,2,c
  1939  000D76  D016               	goto	u1800
  1940  000D78  EE20 F004          	lfsr	2,4
  1941  000D7C  500A               	movf	fputc@fp,w,c
  1942  000D7E  26D9               	addwf	fsr2l,f,c
  1943  000D80  500B               	movf	fputc@fp+1,w,c
  1944  000D82  22DA               	addwfc	fsr2h,f,c
  1945  000D84  EE10 F002          	lfsr	1,2
  1946  000D88  500A               	movf	fputc@fp,w,c
  1947  000D8A  26E1               	addwf	fsr1l,f,c
  1948  000D8C  500B               	movf	fputc@fp+1,w,c
  1949  000D8E  22E2               	addwfc	fsr1h,f,c
  1950  000D90  50DE               	movf	postinc2,w,c
  1951  000D92  5CE6               	subwf	postinc1,w,c
  1952  000D94  50E6               	movf	postinc1,w,c
  1953  000D96  0A80               	xorlw	128
  1954  000D98  6E10               	movwf	(??_fputc+4)& (0+255),c
  1955  000D9A  50DE               	movf	postinc2,w,c
  1956  000D9C  0A80               	xorlw	128
  1957  000D9E  5810               	subwfb	(??_fputc+4)& (0+255),w,c
  1958  000DA0  B0D8               	btfsc	status,0,c
  1959  000DA2  0012               	return	
  1960  000DA4                     u1800:
  1961  000DA4  EE20 F002          	lfsr	2,2
  1962  000DA8  500A               	movf	fputc@fp,w,c
  1963  000DAA  26D9               	addwf	fsr2l,f,c
  1964  000DAC  500B               	movf	fputc@fp+1,w,c
  1965  000DAE  22DA               	addwfc	fsr2h,f,c
  1966  000DB0  CFDE F00C          	movff	postinc2,??_fputc
  1967  000DB4  CFDD F00D          	movff	postdec2,??_fputc+1
  1968  000DB8  C00A  FFD9         	movff	fputc@fp,fsr2l
  1969  000DBC  C00B  FFDA         	movff	fputc@fp+1,fsr2h
  1970  000DC0  CFDE F00E          	movff	postinc2,??_fputc+2
  1971  000DC4  CFDD F00F          	movff	postdec2,??_fputc+3
  1972  000DC8  500C               	movf	??_fputc,w,c
  1973  000DCA  240E               	addwf	??_fputc+2,w,c
  1974  000DCC  6ED9               	movwf	fsr2l,c
  1975  000DCE  500D               	movf	??_fputc+1,w,c
  1976  000DD0  200F               	addwfc	??_fputc+3,w,c
  1977  000DD2  6EDA               	movwf	fsr2h,c
  1978  000DD4  C008  FFDF         	movff	fputc@c,indf2
  1979  000DD8  EE20 F002          	lfsr	2,2
  1980  000DDC  500A               	movf	fputc@fp,w,c
  1981  000DDE  26D9               	addwf	fsr2l,f,c
  1982  000DE0  500B               	movf	fputc@fp+1,w,c
  1983  000DE2  22DA               	addwfc	fsr2h,f,c
  1984  000DE4  2ADE               	incf	postinc2,f,c
  1985  000DE6  0E00               	movlw	0
  1986  000DE8  22DD               	addwfc	postdec2,f,c
  1987  000DEA  0012               	return		;funcret
  1988  000DEC                     __end_of_fputc:
  1989                           	opt callstack 0
  1990                           
  1991 ;; *************** function _putch *****************
  1992 ;; Defined at:
  1993 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  c               1    wreg     unsigned char 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  c               1    0[COMRAM] unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2007 ;;      Params:         0       0       0       0
  2008 ;;      Locals:         0       0       0       0
  2009 ;;      Temps:          0       0       0       0
  2010 ;;      Totals:         0       0       0       0
  2011 ;;Total ram usage:        0 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    2
  2014 ;; This function calls:
  2015 ;;		Nothing
  2016 ;; This function is called by:
  2017 ;;		_fputc
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           	psect	text9
  2022  00140C                     __ptext9:
  2023                           	opt callstack 0
  2024  00140C                     _putch:
  2025                           	opt callstack 21
  2026                           
  2027                           ;incstack = 0
  2028  00140C  0012               	return		;funcret
  2029  00140E                     __end_of_putch:
  2030                           	opt callstack 0
  2031                           
  2032 ;; *************** function ___lomod *****************
  2033 ;; Defined at:
  2034 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  dividend        8    7[COMRAM] unsigned long long 
  2037 ;;  divisor         8   15[COMRAM] unsigned long long 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  counter         1   23[COMRAM] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  8    7[COMRAM] unsigned long long 
  2042 ;; Registers used:
  2043 ;;		wreg, status,2, status,0
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2049 ;;      Params:        16       0       0       0
  2050 ;;      Locals:         1       0       0       0
  2051 ;;      Temps:          0       0       0       0
  2052 ;;      Totals:        17       0       0       0
  2053 ;;Total ram usage:       17 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    2
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_utoa
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text10
  2064  000C9E                     __ptext10:
  2065                           	opt callstack 0
  2066  000C9E                     ___lomod:
  2067                           	opt callstack 24
  2068                           
  2069                           ;incstack = 0
  2070  000C9E  5010               	movf	___lomod@divisor,w,c
  2071  000CA0  1011               	iorwf	___lomod@divisor+1,w,c
  2072  000CA2  1012               	iorwf	___lomod@divisor+2,w,c
  2073  000CA4  1013               	iorwf	___lomod@divisor+3,w,c
  2074  000CA6  1014               	iorwf	___lomod@divisor+4,w,c
  2075  000CA8  1015               	iorwf	___lomod@divisor+5,w,c
  2076  000CAA  1016               	iorwf	___lomod@divisor+6,w,c
  2077  000CAC  1017               	iorwf	___lomod@divisor+7,w,c
  2078  000CAE  B4D8               	btfsc	status,2,c
  2079  000CB0  D03C               	goto	l797
  2080  000CB2  0E01               	movlw	1
  2081  000CB4  6E18               	movwf	___lomod@counter,c
  2082  000CB6  D00A               	goto	l2412
  2083  000CB8                     l2410:
  2084  000CB8  90D8               	bcf	status,0,c
  2085  000CBA  3610               	rlcf	___lomod@divisor,f,c
  2086  000CBC  3611               	rlcf	___lomod@divisor+1,f,c
  2087  000CBE  3612               	rlcf	___lomod@divisor+2,f,c
  2088  000CC0  3613               	rlcf	___lomod@divisor+3,f,c
  2089  000CC2  3614               	rlcf	___lomod@divisor+4,f,c
  2090  000CC4  3615               	rlcf	___lomod@divisor+5,f,c
  2091  000CC6  3616               	rlcf	___lomod@divisor+6,f,c
  2092  000CC8  3617               	rlcf	___lomod@divisor+7,f,c
  2093  000CCA  2A18               	incf	___lomod@counter,f,c
  2094  000CCC                     l2412:
  2095  000CCC  AE17               	btfss	___lomod@divisor+7,7,c
  2096  000CCE  D7F4               	goto	l2410
  2097  000CD0                     u1920:
  2098  000CD0  5010               	movf	___lomod@divisor,w,c
  2099  000CD2  5C08               	subwf	___lomod@dividend,w,c
  2100  000CD4  5011               	movf	___lomod@divisor+1,w,c
  2101  000CD6  5809               	subwfb	___lomod@dividend+1,w,c
  2102  000CD8  5012               	movf	___lomod@divisor+2,w,c
  2103  000CDA  580A               	subwfb	___lomod@dividend+2,w,c
  2104  000CDC  5013               	movf	___lomod@divisor+3,w,c
  2105  000CDE  580B               	subwfb	___lomod@dividend+3,w,c
  2106  000CE0  5014               	movf	___lomod@divisor+4,w,c
  2107  000CE2  580C               	subwfb	___lomod@dividend+4,w,c
  2108  000CE4  5015               	movf	___lomod@divisor+5,w,c
  2109  000CE6  580D               	subwfb	___lomod@dividend+5,w,c
  2110  000CE8  5016               	movf	___lomod@divisor+6,w,c
  2111  000CEA  580E               	subwfb	___lomod@dividend+6,w,c
  2112  000CEC  5017               	movf	___lomod@divisor+7,w,c
  2113  000CEE  580F               	subwfb	___lomod@dividend+7,w,c
  2114  000CF0  A0D8               	btfss	status,0,c
  2115  000CF2  D010               	goto	l2418
  2116  000CF4  5010               	movf	___lomod@divisor,w,c
  2117  000CF6  5E08               	subwf	___lomod@dividend,f,c
  2118  000CF8  5011               	movf	___lomod@divisor+1,w,c
  2119  000CFA  5A09               	subwfb	___lomod@dividend+1,f,c
  2120  000CFC  5012               	movf	___lomod@divisor+2,w,c
  2121  000CFE  5A0A               	subwfb	___lomod@dividend+2,f,c
  2122  000D00  5013               	movf	___lomod@divisor+3,w,c
  2123  000D02  5A0B               	subwfb	___lomod@dividend+3,f,c
  2124  000D04  5014               	movf	___lomod@divisor+4,w,c
  2125  000D06  5A0C               	subwfb	___lomod@dividend+4,f,c
  2126  000D08  5015               	movf	___lomod@divisor+5,w,c
  2127  000D0A  5A0D               	subwfb	___lomod@dividend+5,f,c
  2128  000D0C  5016               	movf	___lomod@divisor+6,w,c
  2129  000D0E  5A0E               	subwfb	___lomod@dividend+6,f,c
  2130  000D10  5017               	movf	___lomod@divisor+7,w,c
  2131  000D12  5A0F               	subwfb	___lomod@dividend+7,f,c
  2132  000D14                     l2418:
  2133  000D14  90D8               	bcf	status,0,c
  2134  000D16  3217               	rrcf	___lomod@divisor+7,f,c
  2135  000D18  3216               	rrcf	___lomod@divisor+6,f,c
  2136  000D1A  3215               	rrcf	___lomod@divisor+5,f,c
  2137  000D1C  3214               	rrcf	___lomod@divisor+4,f,c
  2138  000D1E  3213               	rrcf	___lomod@divisor+3,f,c
  2139  000D20  3212               	rrcf	___lomod@divisor+2,f,c
  2140  000D22  3211               	rrcf	___lomod@divisor+1,f,c
  2141  000D24  3210               	rrcf	___lomod@divisor,f,c
  2142  000D26  2E18               	decfsz	___lomod@counter,f,c
  2143  000D28  D7D3               	goto	u1920
  2144  000D2A                     l797:
  2145  000D2A  C008  F008         	movff	___lomod@dividend,?___lomod
  2146  000D2E  C009  F009         	movff	___lomod@dividend+1,?___lomod+1
  2147  000D32  C00A  F00A         	movff	___lomod@dividend+2,?___lomod+2
  2148  000D36  C00B  F00B         	movff	___lomod@dividend+3,?___lomod+3
  2149  000D3A  C00C  F00C         	movff	___lomod@dividend+4,?___lomod+4
  2150  000D3E  C00D  F00D         	movff	___lomod@dividend+5,?___lomod+5
  2151  000D42  C00E  F00E         	movff	___lomod@dividend+6,?___lomod+6
  2152  000D46  C00F  F00F         	movff	___lomod@dividend+7,?___lomod+7
  2153  000D4A  0012               	return		;funcret
  2154  000D4C                     __end_of___lomod:
  2155                           	opt callstack 0
  2156                           
  2157 ;; *************** function ___lodiv *****************
  2158 ;; Defined at:
  2159 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  dividend        8    7[COMRAM] unsigned long long 
  2162 ;;  divisor         8   15[COMRAM] unsigned long long 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  quotient        8   23[COMRAM] unsigned long long 
  2165 ;;  counter         1   31[COMRAM] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  8    7[COMRAM] unsigned long long 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2175 ;;      Params:        16       0       0       0
  2176 ;;      Locals:         9       0       0       0
  2177 ;;      Temps:          0       0       0       0
  2178 ;;      Totals:        25       0       0       0
  2179 ;;Total ram usage:       25 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    2
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_utoa
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text11
  2190  000B08                     __ptext11:
  2191                           	opt callstack 0
  2192  000B08                     ___lodiv:
  2193                           	opt callstack 24
  2194                           
  2195                           ;incstack = 0
  2196  000B08  EE20  F018         	lfsr	2,___lodiv@quotient
  2197  000B0C  0E07               	movlw	7
  2198  000B0E                     u1871:
  2199  000B0E  6ADE               	clrf	postinc2,c
  2200  000B10  06E8               	decf	wreg,f,c
  2201  000B12  E2FD               	bc	u1871
  2202  000B14  5010               	movf	___lodiv@divisor,w,c
  2203  000B16  1011               	iorwf	___lodiv@divisor+1,w,c
  2204  000B18  1012               	iorwf	___lodiv@divisor+2,w,c
  2205  000B1A  1013               	iorwf	___lodiv@divisor+3,w,c
  2206  000B1C  1014               	iorwf	___lodiv@divisor+4,w,c
  2207  000B1E  1015               	iorwf	___lodiv@divisor+5,w,c
  2208  000B20  1016               	iorwf	___lodiv@divisor+6,w,c
  2209  000B22  1017               	iorwf	___lodiv@divisor+7,w,c
  2210  000B24  B4D8               	btfsc	status,2,c
  2211  000B26  D046               	goto	l787
  2212  000B28  0E01               	movlw	1
  2213  000B2A  6E20               	movwf	___lodiv@counter,c
  2214  000B2C  D00A               	goto	l2392
  2215  000B2E                     l2390:
  2216  000B2E  90D8               	bcf	status,0,c
  2217  000B30  3610               	rlcf	___lodiv@divisor,f,c
  2218  000B32  3611               	rlcf	___lodiv@divisor+1,f,c
  2219  000B34  3612               	rlcf	___lodiv@divisor+2,f,c
  2220  000B36  3613               	rlcf	___lodiv@divisor+3,f,c
  2221  000B38  3614               	rlcf	___lodiv@divisor+4,f,c
  2222  000B3A  3615               	rlcf	___lodiv@divisor+5,f,c
  2223  000B3C  3616               	rlcf	___lodiv@divisor+6,f,c
  2224  000B3E  3617               	rlcf	___lodiv@divisor+7,f,c
  2225  000B40  2A20               	incf	___lodiv@counter,f,c
  2226  000B42                     l2392:
  2227  000B42  AE17               	btfss	___lodiv@divisor+7,7,c
  2228  000B44  D7F4               	goto	l2390
  2229  000B46                     u1890:
  2230  000B46  90D8               	bcf	status,0,c
  2231  000B48  3618               	rlcf	___lodiv@quotient,f,c
  2232  000B4A  3619               	rlcf	___lodiv@quotient+1,f,c
  2233  000B4C  361A               	rlcf	___lodiv@quotient+2,f,c
  2234  000B4E  361B               	rlcf	___lodiv@quotient+3,f,c
  2235  000B50  361C               	rlcf	___lodiv@quotient+4,f,c
  2236  000B52  361D               	rlcf	___lodiv@quotient+5,f,c
  2237  000B54  361E               	rlcf	___lodiv@quotient+6,f,c
  2238  000B56  361F               	rlcf	___lodiv@quotient+7,f,c
  2239  000B58  5010               	movf	___lodiv@divisor,w,c
  2240  000B5A  5C08               	subwf	___lodiv@dividend,w,c
  2241  000B5C  5011               	movf	___lodiv@divisor+1,w,c
  2242  000B5E  5809               	subwfb	___lodiv@dividend+1,w,c
  2243  000B60  5012               	movf	___lodiv@divisor+2,w,c
  2244  000B62  580A               	subwfb	___lodiv@dividend+2,w,c
  2245  000B64  5013               	movf	___lodiv@divisor+3,w,c
  2246  000B66  580B               	subwfb	___lodiv@dividend+3,w,c
  2247  000B68  5014               	movf	___lodiv@divisor+4,w,c
  2248  000B6A  580C               	subwfb	___lodiv@dividend+4,w,c
  2249  000B6C  5015               	movf	___lodiv@divisor+5,w,c
  2250  000B6E  580D               	subwfb	___lodiv@dividend+5,w,c
  2251  000B70  5016               	movf	___lodiv@divisor+6,w,c
  2252  000B72  580E               	subwfb	___lodiv@dividend+6,w,c
  2253  000B74  5017               	movf	___lodiv@divisor+7,w,c
  2254  000B76  580F               	subwfb	___lodiv@dividend+7,w,c
  2255  000B78  A0D8               	btfss	status,0,c
  2256  000B7A  D011               	goto	l2402
  2257  000B7C  5010               	movf	___lodiv@divisor,w,c
  2258  000B7E  5E08               	subwf	___lodiv@dividend,f,c
  2259  000B80  5011               	movf	___lodiv@divisor+1,w,c
  2260  000B82  5A09               	subwfb	___lodiv@dividend+1,f,c
  2261  000B84  5012               	movf	___lodiv@divisor+2,w,c
  2262  000B86  5A0A               	subwfb	___lodiv@dividend+2,f,c
  2263  000B88  5013               	movf	___lodiv@divisor+3,w,c
  2264  000B8A  5A0B               	subwfb	___lodiv@dividend+3,f,c
  2265  000B8C  5014               	movf	___lodiv@divisor+4,w,c
  2266  000B8E  5A0C               	subwfb	___lodiv@dividend+4,f,c
  2267  000B90  5015               	movf	___lodiv@divisor+5,w,c
  2268  000B92  5A0D               	subwfb	___lodiv@dividend+5,f,c
  2269  000B94  5016               	movf	___lodiv@divisor+6,w,c
  2270  000B96  5A0E               	subwfb	___lodiv@dividend+6,f,c
  2271  000B98  5017               	movf	___lodiv@divisor+7,w,c
  2272  000B9A  5A0F               	subwfb	___lodiv@dividend+7,f,c
  2273  000B9C  8018               	bsf	___lodiv@quotient,0,c
  2274  000B9E                     l2402:
  2275  000B9E  90D8               	bcf	status,0,c
  2276  000BA0  3217               	rrcf	___lodiv@divisor+7,f,c
  2277  000BA2  3216               	rrcf	___lodiv@divisor+6,f,c
  2278  000BA4  3215               	rrcf	___lodiv@divisor+5,f,c
  2279  000BA6  3214               	rrcf	___lodiv@divisor+4,f,c
  2280  000BA8  3213               	rrcf	___lodiv@divisor+3,f,c
  2281  000BAA  3212               	rrcf	___lodiv@divisor+2,f,c
  2282  000BAC  3211               	rrcf	___lodiv@divisor+1,f,c
  2283  000BAE  3210               	rrcf	___lodiv@divisor,f,c
  2284  000BB0  2E20               	decfsz	___lodiv@counter,f,c
  2285  000BB2  D7C9               	goto	u1890
  2286  000BB4                     l787:
  2287  000BB4  C018  F008         	movff	___lodiv@quotient,?___lodiv
  2288  000BB8  C019  F009         	movff	___lodiv@quotient+1,?___lodiv+1
  2289  000BBC  C01A  F00A         	movff	___lodiv@quotient+2,?___lodiv+2
  2290  000BC0  C01B  F00B         	movff	___lodiv@quotient+3,?___lodiv+3
  2291  000BC4  C01C  F00C         	movff	___lodiv@quotient+4,?___lodiv+4
  2292  000BC8  C01D  F00D         	movff	___lodiv@quotient+5,?___lodiv+5
  2293  000BCC  C01E  F00E         	movff	___lodiv@quotient+6,?___lodiv+6
  2294  000BD0  C01F  F00F         	movff	___lodiv@quotient+7,?___lodiv+7
  2295  000BD4  0012               	return		;funcret
  2296  000BD6                     __end_of___lodiv:
  2297                           	opt callstack 0
  2298                           
  2299 ;; *************** function _setup *****************
  2300 ;; Defined at:
  2301 ;;		line 38 in file "main.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2315 ;;      Params:         0       0       0       0
  2316 ;;      Locals:         0       0       0       0
  2317 ;;      Temps:          0       0       0       0
  2318 ;;      Totals:         0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    6
  2322 ;; This function calls:
  2323 ;;		_initPWM
  2324 ;;		_init_LCD
  2325 ;;		_init_RFID
  2326 ;;		_init_sensor
  2327 ;; This function is called by:
  2328 ;;		_main
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text12
  2333  0012AE                     __ptext12:
  2334                           	opt callstack 0
  2335  0012AE                     _setup:
  2336                           	opt callstack 24
  2337                           
  2338                           ;main.c: 41:     OSCCON = 0x72;
  2339                           
  2340                           ;incstack = 0
  2341  0012AE  0E72               	movlw	114
  2342  0012B0  6ED3               	movwf	4051,c	;volatile
  2343  0012B2                     l61:
  2344  0012B2  A4D3               	btfss	4051,2,c	;volatile
  2345  0012B4  D7FE               	goto	l61
  2346                           
  2347                           ;main.c: 43:     INTCONbits.GIEH = 1;
  2348  0012B6  8EF2               	bsf	4082,7,c	;volatile
  2349                           
  2350                           ;main.c: 44:     INTCONbits.GIEL = 1;
  2351  0012B8  8CF2               	bsf	4082,6,c	;volatile
  2352                           
  2353                           ;main.c: 45:     RCONbits.IPEN=1;
  2354  0012BA  8ED0               	bsf	4048,7,c	;volatile
  2355                           
  2356                           ;main.c: 48:     init_LCD();
  2357  0012BC  ECEB  F005         	call	_init_LCD	;wreg free
  2358                           
  2359                           ;main.c: 49:     init_RFID();
  2360  0012C0  ECC0  F009         	call	_init_RFID	;wreg free
  2361                           
  2362                           ;main.c: 50:     init_sensor();
  2363  0012C4  ECE7  F009         	call	_init_sensor	;wreg free
  2364                           
  2365                           ;main.c: 51:     initPWM(199);
  2366  0012C8  0E00               	movlw	0
  2367  0012CA  6E09               	movwf	initPWM@PWMperiod+1,c
  2368  0012CC  0EC7               	movlw	199
  2369  0012CE  6E08               	movwf	initPWM@PWMperiod,c
  2370  0012D0  ECCD  F009         	call	_initPWM	;wreg free
  2371                           
  2372                           ;main.c: 53:     TRISBbits.RB0 = 0;
  2373  0012D4  9093               	bcf	3987,0,c	;volatile
  2374                           
  2375                           ;main.c: 54:     TRISBbits.RB2 = 0;
  2376  0012D6  9493               	bcf	3987,2,c	;volatile
  2377                           
  2378                           ;main.c: 55:     TRISDbits.RD2 = 1;
  2379  0012D8  8495               	bsf	3989,2,c	;volatile
  2380  0012DA  0012               	return		;funcret
  2381  0012DC                     __end_of_setup:
  2382                           	opt callstack 0
  2383                           
  2384 ;; *************** function _init_sensor *****************
  2385 ;; Defined at:
  2386 ;;		line 14 in file "signal_processing.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2400 ;;      Params:         0       0       0       0
  2401 ;;      Locals:         0       0       0       0
  2402 ;;      Temps:          0       0       0       0
  2403 ;;      Totals:         0       0       0       0
  2404 ;;Total ram usage:        0 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    2
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_setup
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text13
  2415  0013CE                     __ptext13:
  2416                           	opt callstack 0
  2417  0013CE                     _init_sensor:
  2418                           	opt callstack 27
  2419                           
  2420                           ;signal_processing.c: 16:     T5CON =0b00000001;
  2421                           
  2422                           ;incstack = 0
  2423  0013CE  0E01               	movlw	1
  2424  0013D0  6EB7               	movwf	4023,c	;volatile
  2425                           
  2426                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2427  0013D2  8492               	bsf	3986,2,c	;volatile
  2428                           
  2429                           ;signal_processing.c: 20:     ANSEL0 = 0;
  2430  0013D4  0E00               	movlw	0
  2431  0013D6  6EB8               	movwf	4024,c	;volatile
  2432                           
  2433                           ;signal_processing.c: 21:     ANSEL1 = 0;
  2434  0013D8  0E00               	movlw	0
  2435  0013DA  6EB9               	movwf	4025,c	;volatile
  2436                           
  2437                           ;signal_processing.c: 23:     DFLTCON = 0b00011000;
  2438  0013DC  0E18               	movlw	24
  2439  0013DE  6E60               	movwf	3936,c	;volatile
  2440                           
  2441                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  2442  0013E0  0E47               	movlw	71
  2443  0013E2  6E63               	movwf	3939,c	;volatile
  2444  0013E4  0012               	return		;funcret
  2445  0013E6                     __end_of_init_sensor:
  2446                           	opt callstack 0
  2447                           
  2448 ;; *************** function _init_RFID *****************
  2449 ;; Defined at:
  2450 ;;		line 13 in file "RFID.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  1    wreg      void 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2464 ;;      Params:         0       0       0       0
  2465 ;;      Locals:         0       0       0       0
  2466 ;;      Temps:          0       0       0       0
  2467 ;;      Totals:         0       0       0       0
  2468 ;;Total ram usage:        0 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    2
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_setup
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text14
  2479  001380                     __ptext14:
  2480                           	opt callstack 0
  2481  001380                     _init_RFID:
  2482                           	opt callstack 27
  2483                           
  2484                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2485                           
  2486                           ;incstack = 0
  2487  001380  8E94               	bsf	3988,7,c	;volatile
  2488                           
  2489                           ;RFID.c: 19:     SPBRG = 203;
  2490  001382  0ECB               	movlw	203
  2491  001384  6EAF               	movwf	4015,c	;volatile
  2492                           
  2493                           ;RFID.c: 20:     SPBRGH = 0;
  2494  001386  0E00               	movlw	0
  2495  001388  6EB0               	movwf	4016,c	;volatile
  2496                           
  2497                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2498  00138A  86AA               	bsf	4010,3,c	;volatile
  2499                           
  2500                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2501  00138C  84AC               	bsf	4012,2,c	;volatile
  2502                           
  2503                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2504  00138E  88AB               	bsf	4011,4,c	;volatile
  2505                           
  2506                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2507  001390  8EAB               	bsf	4011,7,c	;volatile
  2508                           
  2509                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2510  001392  8AAC               	bsf	4012,5,c	;volatile
  2511                           
  2512                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2513  001394  8A9D               	bsf	3997,5,c	;volatile
  2514                           
  2515                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2516  001396  8A9F               	bsf	3999,5,c	;volatile
  2517  001398  0012               	return		;funcret
  2518  00139A                     __end_of_init_RFID:
  2519                           	opt callstack 0
  2520                           
  2521 ;; *************** function _init_LCD *****************
  2522 ;; Defined at:
  2523 ;;		line 56 in file "LCDIO.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2537 ;;      Params:         0       0       0       0
  2538 ;;      Locals:         0       0       0       0
  2539 ;;      Temps:          1       0       0       0
  2540 ;;      Totals:         1       0       0       0
  2541 ;;Total ram usage:        1 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    5
  2544 ;; This function calls:
  2545 ;;		_LCDout
  2546 ;;		_SendLCD
  2547 ;; This function is called by:
  2548 ;;		_setup
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text15
  2553  000BD6                     __ptext15:
  2554                           	opt callstack 0
  2555  000BD6                     _init_LCD:
  2556                           	opt callstack 24
  2557                           
  2558                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2559                           
  2560                           ;incstack = 0
  2561  000BD6  9094               	bcf	3988,0,c	;volatile
  2562                           
  2563                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2564  000BD8  9E92               	bcf	3986,7,c	;volatile
  2565                           
  2566                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2567  000BDA  9694               	bcf	3988,3,c	;volatile
  2568                           
  2569                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2570  000BDC  9095               	bcf	3989,0,c	;volatile
  2571                           
  2572                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2573  000BDE  9295               	bcf	3989,1,c	;volatile
  2574                           
  2575                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2576  000BE0  9C92               	bcf	3986,6,c	;volatile
  2577                           
  2578                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2579  000BE2  908C               	bcf	3980,0,c	;volatile
  2580                           
  2581                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2582  000BE4  928C               	bcf	3980,1,c	;volatile
  2583                           
  2584                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2585  000BE6  968B               	bcf	3979,3,c	;volatile
  2586                           
  2587                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2588  000BE8  908B               	bcf	3979,0,c	;volatile
  2589                           
  2590                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2591  000BEA  9C89               	bcf	3977,6,c	;volatile
  2592                           
  2593                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2594  000BEC  9E89               	bcf	3977,7,c	;volatile
  2595                           
  2596                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2597  000BEE  0E27               	movlw	39
  2598  000BF0  6E0C               	movwf	??_init_LCD& (0+255),c
  2599  000BF2  0EF5               	movlw	245
  2600  000BF4                     u2137:
  2601  000BF4  2EE8               	decfsz	wreg,f,c
  2602  000BF6  D7FE               	bra	u2137
  2603  000BF8  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  2604  000BFA  D7FC               	bra	u2137
  2605  000BFC  F000               	nop	
  2606                           
  2607                           ;LCDIO.c: 76:  LCDout(0b0011);
  2608  000BFE  0E03               	movlw	3
  2609  000C00  ECC2  F007         	call	_LCDout
  2610                           
  2611                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2612  000C04  0E0D               	movlw	13
  2613  000C06  6E0C               	movwf	??_init_LCD& (0+255),c
  2614  000C08  0EFC               	movlw	252
  2615  000C0A                     u2147:
  2616  000C0A  2EE8               	decfsz	wreg,f,c
  2617  000C0C  D7FE               	bra	u2147
  2618  000C0E  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  2619  000C10  D7FC               	bra	u2147
  2620                           
  2621                           ;LCDIO.c: 78:  LCDout(0b0011);
  2622  000C12  0E03               	movlw	3
  2623  000C14  ECC2  F007         	call	_LCDout
  2624                           
  2625                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2626  000C18  0E85               	movlw	133
  2627  000C1A                     u2157:
  2628  000C1A  2EE8               	decfsz	wreg,f,c
  2629  000C1C  D7FE               	bra	u2157
  2630  000C1E  F000               	nop	
  2631                           
  2632                           ;LCDIO.c: 80:  LCDout(0b0011);
  2633  000C20  0E03               	movlw	3
  2634  000C22  ECC2  F007         	call	_LCDout
  2635                           
  2636                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2637  000C26  0E21               	movlw	33
  2638  000C28                     u2167:
  2639  000C28  2EE8               	decfsz	wreg,f,c
  2640  000C2A  D7FE               	bra	u2167
  2641  000C2C  F000               	nop	
  2642                           
  2643                           ;LCDIO.c: 82:  LCDout(0b0010);
  2644  000C2E  0E02               	movlw	2
  2645  000C30  ECC2  F007         	call	_LCDout
  2646                           
  2647                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2648  000C34  0E21               	movlw	33
  2649  000C36                     u2177:
  2650  000C36  2EE8               	decfsz	wreg,f,c
  2651  000C38  D7FE               	bra	u2177
  2652  000C3A  F000               	nop	
  2653                           
  2654                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2655  000C3C  0E00               	movlw	0
  2656  000C3E  6E0A               	movwf	SendLCD@type,c
  2657  000C40  0E28               	movlw	40
  2658  000C42  EC3F  F009         	call	_SendLCD
  2659                           
  2660                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2661  000C46  0E21               	movlw	33
  2662  000C48                     u2187:
  2663  000C48  2EE8               	decfsz	wreg,f,c
  2664  000C4A  D7FE               	bra	u2187
  2665  000C4C  F000               	nop	
  2666                           
  2667                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2668  000C4E  0E00               	movlw	0
  2669  000C50  6E0A               	movwf	SendLCD@type,c
  2670  000C52  0E08               	movlw	8
  2671  000C54  EC3F  F009         	call	_SendLCD
  2672                           
  2673                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2674  000C58  0E21               	movlw	33
  2675  000C5A                     u2197:
  2676  000C5A  2EE8               	decfsz	wreg,f,c
  2677  000C5C  D7FE               	bra	u2197
  2678  000C5E  F000               	nop	
  2679                           
  2680                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2681  000C60  0E00               	movlw	0
  2682  000C62  6E0A               	movwf	SendLCD@type,c
  2683  000C64  0E01               	movlw	1
  2684  000C66  EC3F  F009         	call	_SendLCD
  2685                           
  2686                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2687  000C6A  0E0D               	movlw	13
  2688  000C6C  6E0C               	movwf	??_init_LCD& (0+255),c
  2689  000C6E  0EFC               	movlw	252
  2690  000C70                     u2207:
  2691  000C70  2EE8               	decfsz	wreg,f,c
  2692  000C72  D7FE               	bra	u2207
  2693  000C74  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  2694  000C76  D7FC               	bra	u2207
  2695                           
  2696                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2697  000C78  0E00               	movlw	0
  2698  000C7A  6E0A               	movwf	SendLCD@type,c
  2699  000C7C  0E06               	movlw	6
  2700  000C7E  EC3F  F009         	call	_SendLCD
  2701                           
  2702                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2703  000C82  0E21               	movlw	33
  2704  000C84                     u2217:
  2705  000C84  2EE8               	decfsz	wreg,f,c
  2706  000C86  D7FE               	bra	u2217
  2707  000C88  F000               	nop	
  2708                           
  2709                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2710  000C8A  0E00               	movlw	0
  2711  000C8C  6E0A               	movwf	SendLCD@type,c
  2712  000C8E  0E0C               	movlw	12
  2713  000C90  EC3F  F009         	call	_SendLCD
  2714                           
  2715                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2716  000C94  0E21               	movlw	33
  2717  000C96                     u2227:
  2718  000C96  2EE8               	decfsz	wreg,f,c
  2719  000C98  D7FE               	bra	u2227
  2720  000C9A  F000               	nop	
  2721  000C9C  0012               	return		;funcret
  2722  000C9E                     __end_of_init_LCD:
  2723                           	opt callstack 0
  2724                           
  2725 ;; *************** function _initPWM *****************
  2726 ;; Defined at:
  2727 ;;		line 5 in file "dc_motor.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  PWMperiod       2    7[COMRAM] int 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2741 ;;      Params:         2       0       0       0
  2742 ;;      Locals:         0       0       0       0
  2743 ;;      Temps:          0       0       0       0
  2744 ;;      Totals:         2       0       0       0
  2745 ;;Total ram usage:        2 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    2
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_setup
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text16
  2756  00139A                     __ptext16:
  2757                           	opt callstack 0
  2758  00139A                     _initPWM:
  2759                           	opt callstack 27
  2760                           
  2761                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2762                           
  2763                           ;incstack = 0
  2764  00139A  0E00               	movlw	0
  2765  00139C  6E7F               	movwf	3967,c	;volatile
  2766                           
  2767                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2768  00139E  0E80               	movlw	128
  2769  0013A0  6E7E               	movwf	3966,c	;volatile
  2770                           
  2771                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2772  0013A2  0E6F               	movlw	111
  2773  0013A4  6E6F               	movwf	3951,c	;volatile
  2774                           
  2775                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2776  0013A6  0E00               	movlw	0
  2777  0013A8  6E6E               	movwf	3950,c	;volatile
  2778                           
  2779                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2780  0013AA  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2781                           
  2782                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2783  0013AE  5009               	movf	initPWM@PWMperiod+1,w,c
  2784  0013B0  6E7A               	movwf	3962,c	;volatile
  2785  0013B2  0012               	return		;funcret
  2786  0013B4                     __end_of_initPWM:
  2787                           	opt callstack 0
  2788                           
  2789 ;; *************** function _moveToBeacon *****************
  2790 ;; Defined at:
  2791 ;;		line 117 in file "dc_motor.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  beacon_locat    1    wreg     unsigned char 
  2794 ;;  prev_locatio    1   37[COMRAM] unsigned char 
  2795 ;;  mL              2   38[COMRAM] PTR struct DC_motor
  2796 ;;		 -> main@motorL(9), 
  2797 ;;  mR              2   40[COMRAM] PTR struct DC_motor
  2798 ;;		 -> main@motorR(9), 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  beacon_locat    1   42[COMRAM] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2810 ;;      Params:         5       0       0       0
  2811 ;;      Locals:         1       0       0       0
  2812 ;;      Temps:          0       0       0       0
  2813 ;;      Totals:         6       0       0       0
  2814 ;;Total ram usage:        6 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    5
  2817 ;; This function calls:
  2818 ;;		_fullSpeedAhead
  2819 ;;		_turnRight
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text17
  2826  0011BE                     __ptext17:
  2827                           	opt callstack 0
  2828  0011BE                     _moveToBeacon:
  2829                           	opt callstack 25
  2830                           
  2831                           ;incstack = 0
  2832                           ;moveToBeacon@beacon_location stored from wreg
  2833  0011BE  6E2B               	movwf	moveToBeacon@beacon_location,c
  2834                           
  2835                           ;dc_motor.c: 117: void moveToBeacon(char beacon_location, char prev_location,;dc_motor.c
      +                          : 118:                     struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 119: {;
      +                          dc_motor.c: 121:     if(beacon_location == 0)
  2836  0011C0  502B               	movf	moveToBeacon@beacon_location,w,c
  2837  0011C2  A4D8               	btfss	status,2,c
  2838  0011C4  D00E               	goto	l2152
  2839                           
  2840                           ;dc_motor.c: 122:     {;dc_motor.c: 123:         if(prev_location!= beacon_location)
  2841  0011C6  502B               	movf	moveToBeacon@beacon_location,w,c
  2842  0011C8  1826               	xorwf	moveToBeacon@prev_location,w,c
  2843  0011CA  B4D8               	btfsc	status,2,c
  2844  0011CC  D00A               	goto	l2152
  2845                           
  2846                           ;dc_motor.c: 124:         {;dc_motor.c: 125:             turnRight(mL, mR);
  2847  0011CE  C027  F01F         	movff	moveToBeacon@mL,turnRight@mL
  2848  0011D2  C028  F020         	movff	moveToBeacon@mL+1,turnRight@mL+1
  2849  0011D6  C029  F021         	movff	moveToBeacon@mR,turnRight@mR
  2850  0011DA  C02A  F022         	movff	moveToBeacon@mR+1,turnRight@mR+1
  2851  0011DE  EC83  F007         	call	_turnRight	;wreg free
  2852  0011E2                     l2152:
  2853                           
  2854                           ;dc_motor.c: 129:     if(beacon_location == 1)
  2855  0011E2  042B               	decf	moveToBeacon@beacon_location,w,c
  2856  0011E4  A4D8               	btfss	status,2,c
  2857  0011E6  0012               	return	
  2858                           
  2859                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         if(prev_location != beacon_location)
  2860  0011E8  502B               	movf	moveToBeacon@beacon_location,w,c
  2861  0011EA  1826               	xorwf	moveToBeacon@prev_location,w,c
  2862  0011EC  B4D8               	btfsc	status,2,c
  2863  0011EE  0012               	return	
  2864                           
  2865                           ;dc_motor.c: 132:         {;dc_motor.c: 133:         fullSpeedAhead(mL,mR);
  2866  0011F0  C027  F01F         	movff	moveToBeacon@mL,fullSpeedAhead@mL
  2867  0011F4  C028  F020         	movff	moveToBeacon@mL+1,fullSpeedAhead@mL+1
  2868  0011F8  C029  F021         	movff	moveToBeacon@mR,fullSpeedAhead@mR
  2869  0011FC  C02A  F022         	movff	moveToBeacon@mR+1,fullSpeedAhead@mR+1
  2870  001200  ECFE  F007         	call	_fullSpeedAhead	;wreg free
  2871  001204  0012               	return		;funcret
  2872  001206                     __end_of_moveToBeacon:
  2873                           	opt callstack 0
  2874                           
  2875 ;; *************** function _turnRight *****************
  2876 ;; Defined at:
  2877 ;;		line 86 in file "dc_motor.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2880 ;;		 -> main@motorL(9), 
  2881 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2882 ;;		 -> main@motorR(9), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  i               2   35[COMRAM] int 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2894 ;;      Params:         4       0       0       0
  2895 ;;      Locals:         2       0       0       0
  2896 ;;      Temps:          1       0       0       0
  2897 ;;      Totals:         7       0       0       0
  2898 ;;Total ram usage:        7 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    4
  2901 ;; This function calls:
  2902 ;;		_setMotorPWM
  2903 ;; This function is called by:
  2904 ;;		_moveToBeacon
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text18
  2909  000F06                     __ptext18:
  2910                           	opt callstack 0
  2911  000F06                     _turnRight:
  2912                           	opt callstack 25
  2913                           
  2914                           ;dc_motor.c: 86: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 87
      +                          : {;dc_motor.c: 89:     mL->direction = 1;
  2915                           
  2916                           ;incstack = 0
  2917  000F06  EE20 F001          	lfsr	2,1
  2918  000F0A  501F               	movf	turnRight@mL,w,c
  2919  000F0C  26D9               	addwf	fsr2l,f,c
  2920  000F0E  5020               	movf	turnRight@mL+1,w,c
  2921  000F10  22DA               	addwfc	fsr2h,f,c
  2922  000F12  0E01               	movlw	1
  2923  000F14  6EDF               	movwf	indf2,c
  2924                           
  2925                           ;dc_motor.c: 90:     mR->direction = 0;
  2926  000F16  EE20 F001          	lfsr	2,1
  2927  000F1A  5021               	movf	turnRight@mR,w,c
  2928  000F1C  26D9               	addwf	fsr2l,f,c
  2929  000F1E  5022               	movf	turnRight@mR+1,w,c
  2930  000F20  22DA               	addwfc	fsr2h,f,c
  2931  000F22  0E00               	movlw	0
  2932  000F24  6EDF               	movwf	indf2,c
  2933                           
  2934                           ;dc_motor.c: 92:     for(int i = 0; i<50;i++){
  2935  000F26  0E00               	movlw	0
  2936  000F28  6E25               	movwf	turnRight@i+1,c
  2937  000F2A  0E00               	movlw	0
  2938  000F2C  6E24               	movwf	turnRight@i,c
  2939  000F2E                     l2026:
  2940                           
  2941                           ;dc_motor.c: 93:         mL->power = i;
  2942  000F2E  C01F  FFD9         	movff	turnRight@mL,fsr2l
  2943  000F32  C020  FFDA         	movff	turnRight@mL+1,fsr2h
  2944  000F36  C024  FFDF         	movff	turnRight@i,indf2
  2945                           
  2946                           ;dc_motor.c: 94:         mR->power = i;
  2947  000F3A  C021  FFD9         	movff	turnRight@mR,fsr2l
  2948  000F3E  C022  FFDA         	movff	turnRight@mR+1,fsr2h
  2949  000F42  C024  FFDF         	movff	turnRight@i,indf2
  2950                           
  2951                           ;dc_motor.c: 96:         setMotorPWM(mL);
  2952  000F46  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
  2953  000F4A  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  2954  000F4E  EC7D  F004         	call	_setMotorPWM	;wreg free
  2955                           
  2956                           ;dc_motor.c: 97:         setMotorPWM(mR);
  2957  000F52  C021  F016         	movff	turnRight@mR,setMotorPWM@m
  2958  000F56  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  2959  000F5A  EC7D  F004         	call	_setMotorPWM	;wreg free
  2960                           
  2961                           ;dc_motor.c: 98:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2962  000F5E  0E03               	movlw	3
  2963  000F60  6E23               	movwf	??_turnRight& (0+255),c
  2964  000F62  0E98               	movlw	152
  2965  000F64                     u2237:
  2966  000F64  2EE8               	decfsz	wreg,f,c
  2967  000F66  D7FE               	bra	u2237
  2968  000F68  2E23               	decfsz	??_turnRight& (0+255),f,c
  2969  000F6A  D7FC               	bra	u2237
  2970                           
  2971                           ;dc_motor.c: 99:     }
  2972  000F6C  4A24               	infsnz	turnRight@i,f,c
  2973  000F6E  2A25               	incf	turnRight@i+1,f,c
  2974  000F70  BE25               	btfsc	turnRight@i+1,7,c
  2975  000F72  D7DD               	goto	l2026
  2976  000F74  5025               	movf	turnRight@i+1,w,c
  2977  000F76  E105               	bnz	u1320
  2978  000F78  0E32               	movlw	50
  2979  000F7A  5C24               	subwf	turnRight@i,w,c
  2980  000F7C  B0D8               	btfsc	status,0,c
  2981  000F7E  0012               	return	
  2982  000F80  D7D6               	goto	l2026
  2983  000F82                     u1320:
  2984  000F82  0012               	return		;funcret
  2985  000F84                     __end_of_turnRight:
  2986                           	opt callstack 0
  2987                           
  2988 ;; *************** function _fullSpeedAhead *****************
  2989 ;; Defined at:
  2990 ;;		line 103 in file "dc_motor.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2993 ;;		 -> main@motorL(9), 
  2994 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2995 ;;		 -> main@motorR(9), 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  i               2   34[COMRAM] int 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3007 ;;      Params:         4       0       0       0
  3008 ;;      Locals:         2       0       0       0
  3009 ;;      Temps:          0       0       0       0
  3010 ;;      Totals:         6       0       0       0
  3011 ;;Total ram usage:        6 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    4
  3014 ;; This function calls:
  3015 ;;		_setMotorPWM
  3016 ;; This function is called by:
  3017 ;;		_moveToBeacon
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text19
  3022  000FFC                     __ptext19:
  3023                           	opt callstack 0
  3024  000FFC                     _fullSpeedAhead:
  3025                           	opt callstack 25
  3026                           
  3027                           ;dc_motor.c: 103: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 104: {;dc_motor.c: 105:     mL->direction = 1;
  3028                           
  3029                           ;incstack = 0
  3030  000FFC  EE20 F001          	lfsr	2,1
  3031  001000  501F               	movf	fullSpeedAhead@mL,w,c
  3032  001002  26D9               	addwf	fsr2l,f,c
  3033  001004  5020               	movf	fullSpeedAhead@mL+1,w,c
  3034  001006  22DA               	addwfc	fsr2h,f,c
  3035  001008  0E01               	movlw	1
  3036  00100A  6EDF               	movwf	indf2,c
  3037                           
  3038                           ;dc_motor.c: 106:     mR->direction = 1;
  3039  00100C  EE20 F001          	lfsr	2,1
  3040  001010  5021               	movf	fullSpeedAhead@mR,w,c
  3041  001012  26D9               	addwf	fsr2l,f,c
  3042  001014  5022               	movf	fullSpeedAhead@mR+1,w,c
  3043  001016  22DA               	addwfc	fsr2h,f,c
  3044  001018  0E01               	movlw	1
  3045  00101A  6EDF               	movwf	indf2,c
  3046                           
  3047                           ;dc_motor.c: 107:     for(int i = 0; i < 50; i++)
  3048  00101C  0E00               	movlw	0
  3049  00101E  6E24               	movwf	fullSpeedAhead@i+1,c
  3050  001020  0E00               	movlw	0
  3051  001022  6E23               	movwf	fullSpeedAhead@i,c
  3052  001024                     l2046:
  3053                           
  3054                           ;dc_motor.c: 108:     {;dc_motor.c: 109:         mL->power = i;
  3055  001024  C01F  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3056  001028  C020  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3057  00102C  C023  FFDF         	movff	fullSpeedAhead@i,indf2
  3058                           
  3059                           ;dc_motor.c: 110:         mR->power = i;
  3060  001030  C021  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3061  001034  C022  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3062  001038  C023  FFDF         	movff	fullSpeedAhead@i,indf2
  3063                           
  3064                           ;dc_motor.c: 111:         setMotorPWM(mL);
  3065  00103C  C01F  F016         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3066  001040  C020  F017         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3067  001044  EC7D  F004         	call	_setMotorPWM	;wreg free
  3068                           
  3069                           ;dc_motor.c: 112:         setMotorPWM(mR);
  3070  001048  C021  F016         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3071  00104C  C022  F017         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3072  001050  EC7D  F004         	call	_setMotorPWM	;wreg free
  3073                           
  3074                           ;dc_motor.c: 113:     }
  3075  001054  4A23               	infsnz	fullSpeedAhead@i,f,c
  3076  001056  2A24               	incf	fullSpeedAhead@i+1,f,c
  3077  001058  BE24               	btfsc	fullSpeedAhead@i+1,7,c
  3078  00105A  D7E4               	goto	l2046
  3079  00105C  5024               	movf	fullSpeedAhead@i+1,w,c
  3080  00105E  E105               	bnz	u1330
  3081  001060  0E32               	movlw	50
  3082  001062  5C23               	subwf	fullSpeedAhead@i,w,c
  3083  001064  B0D8               	btfsc	status,0,c
  3084  001066  0012               	return	
  3085  001068  D7DD               	goto	l2046
  3086  00106A                     u1330:
  3087  00106A  0012               	return		;funcret
  3088  00106C                     __end_of_fullSpeedAhead:
  3089                           	opt callstack 0
  3090                           
  3091 ;; *************** function _init_motors *****************
  3092 ;; Defined at:
  3093 ;;		line 138 in file "dc_motor.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3096 ;;		 -> main@motorL(9), 
  3097 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3098 ;;		 -> main@motorR(9), 
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      void 
  3103 ;; Registers used:
  3104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3110 ;;      Params:         4       0       0       0
  3111 ;;      Locals:         0       0       0       0
  3112 ;;      Temps:          0       0       0       0
  3113 ;;      Totals:         4       0       0       0
  3114 ;;Total ram usage:        4 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    4
  3117 ;; This function calls:
  3118 ;;		_setMotorPWM
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text20
  3125  000A1E                     __ptext20:
  3126                           	opt callstack 0
  3127  000A1E                     _init_motors:
  3128                           	opt callstack 26
  3129                           
  3130                           ;dc_motor.c: 138: void init_motors(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           139: {;dc_motor.c: 141: mL->power = 0;
  3131                           
  3132                           ;incstack = 0
  3133  000A1E  C01F  FFD9         	movff	init_motors@mL,fsr2l
  3134  000A22  C020  FFDA         	movff	init_motors@mL+1,fsr2h
  3135  000A26  0E00               	movlw	0
  3136  000A28  6EDF               	movwf	indf2,c
  3137                           
  3138                           ;dc_motor.c: 142: mL->direction = 1;
  3139  000A2A  EE20 F001          	lfsr	2,1
  3140  000A2E  501F               	movf	init_motors@mL,w,c
  3141  000A30  26D9               	addwf	fsr2l,f,c
  3142  000A32  5020               	movf	init_motors@mL+1,w,c
  3143  000A34  22DA               	addwfc	fsr2h,f,c
  3144  000A36  0E01               	movlw	1
  3145  000A38  6EDF               	movwf	indf2,c
  3146                           
  3147                           ;dc_motor.c: 143: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3148  000A3A  EE20 F002          	lfsr	2,2
  3149  000A3E  501F               	movf	init_motors@mL,w,c
  3150  000A40  26D9               	addwf	fsr2l,f,c
  3151  000A42  5020               	movf	init_motors@mL+1,w,c
  3152  000A44  22DA               	addwfc	fsr2h,f,c
  3153  000A46  0E79               	movlw	121
  3154  000A48  6EDE               	movwf	postinc2,c
  3155  000A4A  0E0F               	movlw	15
  3156  000A4C  6EDD               	movwf	postdec2,c
  3157                           
  3158                           ;dc_motor.c: 144: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3159  000A4E  EE20 F004          	lfsr	2,4
  3160  000A52  501F               	movf	init_motors@mL,w,c
  3161  000A54  26D9               	addwf	fsr2l,f,c
  3162  000A56  5020               	movf	init_motors@mL+1,w,c
  3163  000A58  22DA               	addwfc	fsr2h,f,c
  3164  000A5A  0E78               	movlw	120
  3165  000A5C  6EDE               	movwf	postinc2,c
  3166  000A5E  0E0F               	movlw	15
  3167  000A60  6EDD               	movwf	postdec2,c
  3168                           
  3169                           ;dc_motor.c: 145: mL->dir_pin=0;
  3170  000A62  EE20 F006          	lfsr	2,6
  3171  000A66  501F               	movf	init_motors@mL,w,c
  3172  000A68  26D9               	addwf	fsr2l,f,c
  3173  000A6A  5020               	movf	init_motors@mL+1,w,c
  3174  000A6C  22DA               	addwfc	fsr2h,f,c
  3175  000A6E  0E00               	movlw	0
  3176  000A70  6EDF               	movwf	indf2,c
  3177                           
  3178                           ;dc_motor.c: 146: mL->PWMperiod=199;
  3179  000A72  EE20 F007          	lfsr	2,7
  3180  000A76  501F               	movf	init_motors@mL,w,c
  3181  000A78  26D9               	addwf	fsr2l,f,c
  3182  000A7A  5020               	movf	init_motors@mL+1,w,c
  3183  000A7C  22DA               	addwfc	fsr2h,f,c
  3184  000A7E  0EC7               	movlw	199
  3185  000A80  6EDE               	movwf	postinc2,c
  3186  000A82  0E00               	movlw	0
  3187  000A84  6EDD               	movwf	postdec2,c
  3188                           
  3189                           ;dc_motor.c: 148: mR->power = 0;
  3190  000A86  C021  FFD9         	movff	init_motors@mR,fsr2l
  3191  000A8A  C022  FFDA         	movff	init_motors@mR+1,fsr2h
  3192  000A8E  0E00               	movlw	0
  3193  000A90  6EDF               	movwf	indf2,c
  3194                           
  3195                           ;dc_motor.c: 149: mR->direction = 1;
  3196  000A92  EE20 F001          	lfsr	2,1
  3197  000A96  5021               	movf	init_motors@mR,w,c
  3198  000A98  26D9               	addwf	fsr2l,f,c
  3199  000A9A  5022               	movf	init_motors@mR+1,w,c
  3200  000A9C  22DA               	addwfc	fsr2h,f,c
  3201  000A9E  0E01               	movlw	1
  3202  000AA0  6EDF               	movwf	indf2,c
  3203                           
  3204                           ;dc_motor.c: 150: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3205  000AA2  EE20 F002          	lfsr	2,2
  3206  000AA6  5021               	movf	init_motors@mR,w,c
  3207  000AA8  26D9               	addwf	fsr2l,f,c
  3208  000AAA  5022               	movf	init_motors@mR+1,w,c
  3209  000AAC  22DA               	addwfc	fsr2h,f,c
  3210  000AAE  0E77               	movlw	119
  3211  000AB0  6EDE               	movwf	postinc2,c
  3212  000AB2  0E0F               	movlw	15
  3213  000AB4  6EDD               	movwf	postdec2,c
  3214                           
  3215                           ;dc_motor.c: 151: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3216  000AB6  EE20 F004          	lfsr	2,4
  3217  000ABA  5021               	movf	init_motors@mR,w,c
  3218  000ABC  26D9               	addwf	fsr2l,f,c
  3219  000ABE  5022               	movf	init_motors@mR+1,w,c
  3220  000AC0  22DA               	addwfc	fsr2h,f,c
  3221  000AC2  0E76               	movlw	118
  3222  000AC4  6EDE               	movwf	postinc2,c
  3223  000AC6  0E0F               	movlw	15
  3224  000AC8  6EDD               	movwf	postdec2,c
  3225                           
  3226                           ;dc_motor.c: 152: mR->dir_pin=2;
  3227  000ACA  EE20 F006          	lfsr	2,6
  3228  000ACE  5021               	movf	init_motors@mR,w,c
  3229  000AD0  26D9               	addwf	fsr2l,f,c
  3230  000AD2  5022               	movf	init_motors@mR+1,w,c
  3231  000AD4  22DA               	addwfc	fsr2h,f,c
  3232  000AD6  0E02               	movlw	2
  3233  000AD8  6EDF               	movwf	indf2,c
  3234                           
  3235                           ;dc_motor.c: 153: mR->PWMperiod=199;
  3236  000ADA  EE20 F007          	lfsr	2,7
  3237  000ADE  5021               	movf	init_motors@mR,w,c
  3238  000AE0  26D9               	addwf	fsr2l,f,c
  3239  000AE2  5022               	movf	init_motors@mR+1,w,c
  3240  000AE4  22DA               	addwfc	fsr2h,f,c
  3241  000AE6  0EC7               	movlw	199
  3242  000AE8  6EDE               	movwf	postinc2,c
  3243  000AEA  0E00               	movlw	0
  3244  000AEC  6EDD               	movwf	postdec2,c
  3245                           
  3246                           ;dc_motor.c: 155: setMotorPWM(mL);
  3247  000AEE  C01F  F016         	movff	init_motors@mL,setMotorPWM@m
  3248  000AF2  C020  F017         	movff	init_motors@mL+1,setMotorPWM@m+1
  3249  000AF6  EC7D  F004         	call	_setMotorPWM	;wreg free
  3250                           
  3251                           ;dc_motor.c: 156: setMotorPWM(mR);
  3252  000AFA  C021  F016         	movff	init_motors@mR,setMotorPWM@m
  3253  000AFE  C022  F017         	movff	init_motors@mR+1,setMotorPWM@m+1
  3254  000B02  EC7D  F004         	call	_setMotorPWM	;wreg free
  3255  000B06  0012               	return		;funcret
  3256  000B08                     __end_of_init_motors:
  3257                           	opt callstack 0
  3258                           
  3259 ;; *************** function _setMotorPWM *****************
  3260 ;; Defined at:
  3261 ;;		line 18 in file "dc_motor.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3264 ;;		 -> main@motorR(9), main@motorL(9), 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  PWMduty         2   28[COMRAM] int 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3276 ;;      Params:         2       0       0       0
  3277 ;;      Locals:         2       0       0       0
  3278 ;;      Temps:          5       0       0       0
  3279 ;;      Totals:         9       0       0       0
  3280 ;;Total ram usage:        9 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		___awdiv
  3285 ;;		___wmul
  3286 ;; This function is called by:
  3287 ;;		_turnRight
  3288 ;;		_fullSpeedAhead
  3289 ;;		_init_motors
  3290 ;;		_setMotorFullSpeed
  3291 ;;		_stopMotor
  3292 ;;		_stop
  3293 ;;		_turnLeft
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text21
  3298  0008FA                     __ptext21:
  3299                           	opt callstack 0
  3300  0008FA                     _setMotorPWM:
  3301                           	opt callstack 25
  3302                           
  3303                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3304                           
  3305                           ;incstack = 0
  3306  0008FA  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3307  0008FE  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3308  000902  50DF               	movf	indf2,w,c
  3309  000904  6E18               	movwf	??_setMotorPWM& (0+255),c
  3310  000906  5018               	movf	??_setMotorPWM,w,c
  3311  000908  6E08               	movwf	___wmul@multiplier,c
  3312  00090A  6A09               	clrf	___wmul@multiplier+1,c
  3313  00090C  EE20 F007          	lfsr	2,7
  3314  000910  5016               	movf	setMotorPWM@m,w,c
  3315  000912  26D9               	addwf	fsr2l,f,c
  3316  000914  5017               	movf	setMotorPWM@m+1,w,c
  3317  000916  22DA               	addwfc	fsr2h,f,c
  3318  000918  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  3319  00091C  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  3320  000920  ECAD  F009         	call	___wmul	;wreg free
  3321  000924  C008  F00E         	movff	?___wmul,___awdiv@dividend
  3322  000928  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  3323  00092C  0E00               	movlw	0
  3324  00092E  6E11               	movwf	___awdiv@divisor+1,c
  3325  000930  0E64               	movlw	100
  3326  000932  6E10               	movwf	___awdiv@divisor,c
  3327  000934  EC41  F007         	call	___awdiv	;wreg free
  3328  000938  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  3329  00093C  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3330                           
  3331                           ;dc_motor.c: 24:     if (m->direction)
  3332  000940  EE20 F001          	lfsr	2,1
  3333  000944  5016               	movf	setMotorPWM@m,w,c
  3334  000946  26D9               	addwf	fsr2l,f,c
  3335  000948  5017               	movf	setMotorPWM@m+1,w,c
  3336  00094A  22DA               	addwfc	fsr2h,f,c
  3337  00094C  50DF               	movf	indf2,w,c
  3338  00094E  B4D8               	btfsc	status,2,c
  3339  000950  D024               	goto	l1890
  3340                           
  3341                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3342  000952  EE20 F006          	lfsr	2,6
  3343  000956  5016               	movf	setMotorPWM@m,w,c
  3344  000958  26D9               	addwf	fsr2l,f,c
  3345  00095A  5017               	movf	setMotorPWM@m+1,w,c
  3346  00095C  22DA               	addwfc	fsr2h,f,c
  3347  00095E  50DF               	movf	indf2,w,c
  3348  000960  6E18               	movwf	??_setMotorPWM& (0+255),c
  3349  000962  0E01               	movlw	1
  3350  000964  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3351  000966  2A18               	incf	??_setMotorPWM,f,c
  3352  000968  D002               	goto	u1204
  3353  00096A                     u1205:
  3354  00096A  90D8               	bcf	status,0,c
  3355  00096C  3619               	rlcf	??_setMotorPWM+1,f,c
  3356  00096E                     u1204:
  3357  00096E  2E18               	decfsz	??_setMotorPWM,f,c
  3358  000970  D7FC               	goto	u1205
  3359  000972  5019               	movf	??_setMotorPWM+1,w,c
  3360  000974  108A               	iorwf	3978,w,c	;volatile
  3361  000976  6E8A               	movwf	3978,c	;volatile
  3362                           
  3363                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3364  000978  EE20 F007          	lfsr	2,7
  3365  00097C  5016               	movf	setMotorPWM@m,w,c
  3366  00097E  26D9               	addwf	fsr2l,f,c
  3367  000980  5017               	movf	setMotorPWM@m+1,w,c
  3368  000982  22DA               	addwfc	fsr2h,f,c
  3369  000984  CFDE F018          	movff	postinc2,??_setMotorPWM
  3370  000988  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3371  00098C  501D               	movf	setMotorPWM@PWMduty,w,c
  3372  00098E  5C18               	subwf	??_setMotorPWM,w,c
  3373  000990  6E1D               	movwf	setMotorPWM@PWMduty,c
  3374  000992  501E               	movf	setMotorPWM@PWMduty+1,w,c
  3375  000994  5819               	subwfb	??_setMotorPWM+1,w,c
  3376  000996  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  3377                           
  3378                           ;dc_motor.c: 28:     }
  3379  000998  D014               	goto	l127
  3380  00099A                     l1890:
  3381                           
  3382                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3383  00099A  EE20 F006          	lfsr	2,6
  3384  00099E  5016               	movf	setMotorPWM@m,w,c
  3385  0009A0  26D9               	addwf	fsr2l,f,c
  3386  0009A2  5017               	movf	setMotorPWM@m+1,w,c
  3387  0009A4  22DA               	addwfc	fsr2h,f,c
  3388  0009A6  50DF               	movf	indf2,w,c
  3389  0009A8  6E18               	movwf	??_setMotorPWM& (0+255),c
  3390  0009AA  0E01               	movlw	1
  3391  0009AC  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3392  0009AE  2A18               	incf	??_setMotorPWM,f,c
  3393  0009B0  D002               	goto	u1214
  3394  0009B2                     u1215:
  3395  0009B2  90D8               	bcf	status,0,c
  3396  0009B4  3619               	rlcf	??_setMotorPWM+1,f,c
  3397  0009B6                     u1214:
  3398  0009B6  2E18               	decfsz	??_setMotorPWM,f,c
  3399  0009B8  D7FC               	goto	u1215
  3400  0009BA  5019               	movf	??_setMotorPWM+1,w,c
  3401  0009BC  0AFF               	xorlw	255
  3402  0009BE  148A               	andwf	3978,w,c	;volatile
  3403  0009C0  6E8A               	movwf	3978,c	;volatile
  3404  0009C2                     l127:
  3405                           
  3406                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3407  0009C2  EE20 F002          	lfsr	2,2
  3408  0009C6  5016               	movf	setMotorPWM@m,w,c
  3409  0009C8  26D9               	addwf	fsr2l,f,c
  3410  0009CA  5017               	movf	setMotorPWM@m+1,w,c
  3411  0009CC  22DA               	addwfc	fsr2h,f,c
  3412  0009CE  CFDE F018          	movff	postinc2,??_setMotorPWM
  3413  0009D2  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3414  0009D6  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3415  0009DA  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3416  0009DE  441D               	rlncf	setMotorPWM@PWMduty,w,c
  3417  0009E0  46E8               	rlncf	wreg,f,c
  3418  0009E2  0BFC               	andlw	252
  3419  0009E4  6EDF               	movwf	indf2,c
  3420                           
  3421                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3422  0009E6  EE20 F004          	lfsr	2,4
  3423  0009EA  5016               	movf	setMotorPWM@m,w,c
  3424  0009EC  26D9               	addwf	fsr2l,f,c
  3425  0009EE  5017               	movf	setMotorPWM@m+1,w,c
  3426  0009F0  22DA               	addwfc	fsr2h,f,c
  3427  0009F2  CFDE F018          	movff	postinc2,??_setMotorPWM
  3428  0009F6  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3429  0009FA  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3430  0009FE  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3431  000A02  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3432  000A06  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3433  000A0A  0E06               	movlw	6
  3434  000A0C  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  3435  000A0E                     u1225:
  3436  000A0E  341B               	rlcf	??_setMotorPWM+3,w,c
  3437  000A10  321B               	rrcf	??_setMotorPWM+3,f,c
  3438  000A12  321A               	rrcf	??_setMotorPWM+2,f,c
  3439  000A14  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3440  000A16  D7FB               	goto	u1225
  3441  000A18  501A               	movf	??_setMotorPWM+2,w,c
  3442  000A1A  6EDF               	movwf	indf2,c
  3443  000A1C  0012               	return		;funcret
  3444  000A1E                     __end_of_setMotorPWM:
  3445                           	opt callstack 0
  3446                           
  3447 ;; *************** function ___wmul *****************
  3448 ;; Defined at:
  3449 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  multiplier      2    7[COMRAM] unsigned int 
  3452 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  product         2   11[COMRAM] unsigned int 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  2    7[COMRAM] unsigned int 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0, prodl, prodh
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3464 ;;      Params:         4       0       0       0
  3465 ;;      Locals:         2       0       0       0
  3466 ;;      Temps:          0       0       0       0
  3467 ;;      Totals:         6       0       0       0
  3468 ;;Total ram usage:        6 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    2
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_setMotorPWM
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text22
  3479  00135A                     __ptext22:
  3480                           	opt callstack 0
  3481  00135A                     ___wmul:
  3482                           	opt callstack 25
  3483                           
  3484                           ;incstack = 0
  3485  00135A  5008               	movf	___wmul@multiplier,w,c
  3486  00135C  020A               	mulwf	___wmul@multiplicand,c
  3487  00135E  CFF3 F00C          	movff	prodl,___wmul@product
  3488  001362  CFF4 F00D          	movff	prodh,___wmul@product+1
  3489  001366  5008               	movf	___wmul@multiplier,w,c
  3490  001368  020B               	mulwf	___wmul@multiplicand+1,c
  3491  00136A  50F3               	movf	prodl,w,c
  3492  00136C  260D               	addwf	___wmul@product+1,f,c
  3493  00136E  5009               	movf	___wmul@multiplier+1,w,c
  3494  001370  020A               	mulwf	___wmul@multiplicand,c
  3495  001372  50F3               	movf	prodl,w,c
  3496  001374  260D               	addwf	___wmul@product+1,f,c
  3497  001376  C00C  F008         	movff	___wmul@product,?___wmul
  3498  00137A  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3499  00137E  0012               	return		;funcret
  3500  001380                     __end_of___wmul:
  3501                           	opt callstack 0
  3502                           
  3503 ;; *************** function ___awdiv *****************
  3504 ;; Defined at:
  3505 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  dividend        2   13[COMRAM] int 
  3508 ;;  divisor         2   15[COMRAM] int 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  quotient        2   19[COMRAM] int 
  3511 ;;  sign            1   18[COMRAM] unsigned char 
  3512 ;;  counter         1   17[COMRAM] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  2   13[COMRAM] int 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3522 ;;      Params:         4       0       0       0
  3523 ;;      Locals:         4       0       0       0
  3524 ;;      Temps:          0       0       0       0
  3525 ;;      Totals:         8       0       0       0
  3526 ;;Total ram usage:        8 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_setMotorPWM
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text23
  3537  000E82                     __ptext23:
  3538                           	opt callstack 0
  3539  000E82                     ___awdiv:
  3540                           	opt callstack 25
  3541                           
  3542                           ;incstack = 0
  3543  000E82  0E00               	movlw	0
  3544  000E84  6E13               	movwf	___awdiv@sign,c
  3545  000E86  AE11               	btfss	___awdiv@divisor+1,7,c
  3546  000E88  D006               	goto	l1848
  3547  000E8A  6C10               	negf	___awdiv@divisor,c
  3548  000E8C  1E11               	comf	___awdiv@divisor+1,f,c
  3549  000E8E  B0D8               	btfsc	status,0,c
  3550  000E90  2A11               	incf	___awdiv@divisor+1,f,c
  3551  000E92  0E01               	movlw	1
  3552  000E94  6E13               	movwf	___awdiv@sign,c
  3553  000E96                     l1848:
  3554  000E96  AE0F               	btfss	___awdiv@dividend+1,7,c
  3555  000E98  D006               	goto	l1854
  3556  000E9A  6C0E               	negf	___awdiv@dividend,c
  3557  000E9C  1E0F               	comf	___awdiv@dividend+1,f,c
  3558  000E9E  B0D8               	btfsc	status,0,c
  3559  000EA0  2A0F               	incf	___awdiv@dividend+1,f,c
  3560  000EA2  0E01               	movlw	1
  3561  000EA4  1A13               	xorwf	___awdiv@sign,f,c
  3562  000EA6                     l1854:
  3563  000EA6  0E00               	movlw	0
  3564  000EA8  6E15               	movwf	___awdiv@quotient+1,c
  3565  000EAA  0E00               	movlw	0
  3566  000EAC  6E14               	movwf	___awdiv@quotient,c
  3567  000EAE  5010               	movf	___awdiv@divisor,w,c
  3568  000EB0  1011               	iorwf	___awdiv@divisor+1,w,c
  3569  000EB2  B4D8               	btfsc	status,2,c
  3570  000EB4  D01C               	goto	l1876
  3571  000EB6  0E01               	movlw	1
  3572  000EB8  6E12               	movwf	___awdiv@counter,c
  3573  000EBA  D004               	goto	l1862
  3574  000EBC                     l1860:
  3575  000EBC  90D8               	bcf	status,0,c
  3576  000EBE  3610               	rlcf	___awdiv@divisor,f,c
  3577  000EC0  3611               	rlcf	___awdiv@divisor+1,f,c
  3578  000EC2  2A12               	incf	___awdiv@counter,f,c
  3579  000EC4                     l1862:
  3580  000EC4  AE11               	btfss	___awdiv@divisor+1,7,c
  3581  000EC6  D7FA               	goto	l1860
  3582  000EC8                     u1160:
  3583  000EC8  90D8               	bcf	status,0,c
  3584  000ECA  3614               	rlcf	___awdiv@quotient,f,c
  3585  000ECC  3615               	rlcf	___awdiv@quotient+1,f,c
  3586  000ECE  5010               	movf	___awdiv@divisor,w,c
  3587  000ED0  5C0E               	subwf	___awdiv@dividend,w,c
  3588  000ED2  5011               	movf	___awdiv@divisor+1,w,c
  3589  000ED4  580F               	subwfb	___awdiv@dividend+1,w,c
  3590  000ED6  A0D8               	btfss	status,0,c
  3591  000ED8  D005               	goto	l1872
  3592  000EDA  5010               	movf	___awdiv@divisor,w,c
  3593  000EDC  5E0E               	subwf	___awdiv@dividend,f,c
  3594  000EDE  5011               	movf	___awdiv@divisor+1,w,c
  3595  000EE0  5A0F               	subwfb	___awdiv@dividend+1,f,c
  3596  000EE2  8014               	bsf	___awdiv@quotient,0,c
  3597  000EE4                     l1872:
  3598  000EE4  90D8               	bcf	status,0,c
  3599  000EE6  3211               	rrcf	___awdiv@divisor+1,f,c
  3600  000EE8  3210               	rrcf	___awdiv@divisor,f,c
  3601  000EEA  2E12               	decfsz	___awdiv@counter,f,c
  3602  000EEC  D7ED               	goto	u1160
  3603  000EEE                     l1876:
  3604  000EEE  5013               	movf	___awdiv@sign,w,c
  3605  000EF0  B4D8               	btfsc	status,2,c
  3606  000EF2  D004               	goto	l1880
  3607  000EF4  6C14               	negf	___awdiv@quotient,c
  3608  000EF6  1E15               	comf	___awdiv@quotient+1,f,c
  3609  000EF8  B0D8               	btfsc	status,0,c
  3610  000EFA  2A15               	incf	___awdiv@quotient+1,f,c
  3611  000EFC                     l1880:
  3612  000EFC  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  3613  000F00  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  3614  000F04  0012               	return		;funcret
  3615  000F06                     __end_of___awdiv:
  3616                           	opt callstack 0
  3617                           
  3618 ;; *************** function _display_RFID *****************
  3619 ;; Defined at:
  3620 ;;		line 109 in file "RFID.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  dataBuf         2   12[COMRAM] PTR unsigned char 
  3623 ;;		 -> RFIDbuf(12), 
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;  i               2   14[COMRAM] int 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3635 ;;      Params:         2       0       0       0
  3636 ;;      Locals:         2       0       0       0
  3637 ;;      Temps:          0       0       0       0
  3638 ;;      Totals:         4       0       0       0
  3639 ;;Total ram usage:        4 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    6
  3642 ;; This function calls:
  3643 ;;		_ClearLCD
  3644 ;;		_SendLCD
  3645 ;;		_SetLine
  3646 ;; This function is called by:
  3647 ;;		_main
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text24
  3652  001206                     __ptext24:
  3653                           	opt callstack 0
  3654  001206                     _display_RFID:
  3655                           	opt callstack 24
  3656                           
  3657                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  3658                           
  3659                           ;incstack = 0
  3660  001206  ECDA  F009         	call	_ClearLCD	;wreg free
  3661                           
  3662                           ;RFID.c: 112:     SetLine(1);
  3663  00120A  0E01               	movlw	1
  3664  00120C  EC6E  F009         	call	_SetLine
  3665                           
  3666                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  3667  001210  0E00               	movlw	0
  3668  001212  6E10               	movwf	display_RFID@i+1,c
  3669  001214  0E00               	movlw	0
  3670  001216  6E0F               	movwf	display_RFID@i,c
  3671  001218                     l2178:
  3672                           
  3673                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  3674  001218  0E01               	movlw	1
  3675  00121A  6E0A               	movwf	SendLCD@type,c
  3676  00121C  500F               	movf	display_RFID@i,w,c
  3677  00121E  240D               	addwf	display_RFID@dataBuf,w,c
  3678  001220  6ED9               	movwf	fsr2l,c
  3679  001222  5010               	movf	display_RFID@i+1,w,c
  3680  001224  200E               	addwfc	display_RFID@dataBuf+1,w,c
  3681  001226  6EDA               	movwf	fsr2h,c
  3682  001228  50DF               	movf	indf2,w,c
  3683  00122A  EC3F  F009         	call	_SendLCD
  3684                           
  3685                           ;RFID.c: 116:     }
  3686  00122E  4A0F               	infsnz	display_RFID@i,f,c
  3687  001230  2A10               	incf	display_RFID@i+1,f,c
  3688  001232  BE10               	btfsc	display_RFID@i+1,7,c
  3689  001234  D7F1               	goto	l2178
  3690  001236  5010               	movf	display_RFID@i+1,w,c
  3691  001238  E105               	bnz	u1440
  3692  00123A  0E0A               	movlw	10
  3693  00123C  5C0F               	subwf	display_RFID@i,w,c
  3694  00123E  B0D8               	btfsc	status,0,c
  3695  001240  0012               	return	
  3696  001242  D7EA               	goto	l2178
  3697  001244                     u1440:
  3698  001244  0012               	return		;funcret
  3699  001246                     __end_of_display_RFID:
  3700                           	opt callstack 0
  3701                           
  3702 ;; *************** function _ClearLCD *****************
  3703 ;; Defined at:
  3704 ;;		line 137 in file "LCDIO.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3718 ;;      Params:         0       0       0       0
  3719 ;;      Locals:         0       0       0       0
  3720 ;;      Temps:          1       0       0       0
  3721 ;;      Totals:         1       0       0       0
  3722 ;;Total ram usage:        1 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    5
  3725 ;; This function calls:
  3726 ;;		_SendLCD
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;;		_display_RFID
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text25
  3734  0013B4                     __ptext25:
  3735                           	opt callstack 0
  3736  0013B4                     _ClearLCD:
  3737                           	opt callstack 24
  3738                           
  3739                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  3740                           
  3741                           ;incstack = 0
  3742  0013B4  0E00               	movlw	0
  3743  0013B6  6E0A               	movwf	SendLCD@type,c
  3744  0013B8  0E01               	movlw	1
  3745  0013BA  EC3F  F009         	call	_SendLCD
  3746                           
  3747                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3748  0013BE  0E0D               	movlw	13
  3749  0013C0  6E0C               	movwf	??_ClearLCD& (0+255),c
  3750  0013C2  0EFC               	movlw	252
  3751  0013C4                     u2247:
  3752  0013C4  2EE8               	decfsz	wreg,f,c
  3753  0013C6  D7FE               	bra	u2247
  3754  0013C8  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  3755  0013CA  D7FC               	bra	u2247
  3756  0013CC  0012               	return		;funcret
  3757  0013CE                     __end_of_ClearLCD:
  3758                           	opt callstack 0
  3759                           
  3760 ;; *************** function _classify_data *****************
  3761 ;; Defined at:
  3762 ;;		line 30 in file "signal_processing.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  raw_data        2    7[COMRAM] int 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      unsigned char 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3776 ;;      Params:         2       0       0       0
  3777 ;;      Locals:         0       0       0       0
  3778 ;;      Temps:          0       0       0       0
  3779 ;;      Totals:         2       0       0       0
  3780 ;;Total ram usage:        2 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    2
  3783 ;; This function calls:
  3784 ;;		Nothing
  3785 ;; This function is called by:
  3786 ;;		_main
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text26
  3791  0013E6                     __ptext26:
  3792                           	opt callstack 0
  3793  0013E6                     _classify_data:
  3794                           	opt callstack 28
  3795                           
  3796                           ;signal_processing.c: 30: char classify_data(int raw_data);signal_processing.c: 31: {;si
      +                          gnal_processing.c: 32:     if(raw_data > 10000)
  3797                           
  3798                           ;incstack = 0
  3799  0013E6  BE09               	btfsc	classify_data@raw_data+1,7,c
  3800  0013E8  D008               	goto	l2142
  3801  0013EA  0E11               	movlw	17
  3802  0013EC  5C08               	subwf	classify_data@raw_data,w,c
  3803  0013EE  0E27               	movlw	39
  3804  0013F0  5809               	subwfb	classify_data@raw_data+1,w,c
  3805  0013F2  A0D8               	btfss	status,0,c
  3806  0013F4  D002               	goto	l2142
  3807                           
  3808                           ;signal_processing.c: 33:     {;signal_processing.c: 34:         return 1;
  3809  0013F6  0E01               	movlw	1
  3810  0013F8  0012               	return	
  3811  0013FA                     l2142:
  3812                           
  3813                           ;signal_processing.c: 37:     {;signal_processing.c: 38:         return 0;
  3814  0013FA  0E00               	movlw	0
  3815  0013FC  0012               	return		;funcret
  3816  0013FE                     __end_of_classify_data:
  3817                           	opt callstack 0
  3818                           
  3819 ;; *************** function _check_RFID *****************
  3820 ;; Defined at:
  3821 ;;		line 72 in file "RFID.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  3824 ;;		 -> RFIDbuf(12), 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  i               2   35[COMRAM] int 
  3827 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  3828 ;;  checksum        1   34[COMRAM] unsigned char 
  3829 ;;  byte5           1   33[COMRAM] unsigned char 
  3830 ;;  byte4           1   32[COMRAM] unsigned char 
  3831 ;;  byte3           1   31[COMRAM] unsigned char 
  3832 ;;  byte2           1   30[COMRAM] unsigned char 
  3833 ;;  byte1           1   29[COMRAM] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      void 
  3836 ;; Registers used:
  3837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3843 ;;      Params:         2       0       0       0
  3844 ;;      Locals:        20       0       0       0
  3845 ;;      Temps:          2       0       0       0
  3846 ;;      Totals:        24       0       0       0
  3847 ;;Total ram usage:       24 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    6
  3850 ;; This function calls:
  3851 ;;		_LCD_String
  3852 ;;		_SetLine
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text27
  3859  0007AA                     __ptext27:
  3860                           	opt callstack 0
  3861  0007AA                     _check_RFID:
  3862                           	opt callstack 24
  3863                           
  3864                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  3865                           
  3866                           ;incstack = 0
  3867  0007AA  0E00               	movlw	0
  3868  0007AC  6E25               	movwf	check_RFID@i+1,c
  3869  0007AE  0E00               	movlw	0
  3870  0007B0  6E24               	movwf	check_RFID@i,c
  3871  0007B2                     l2190:
  3872                           
  3873                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  3874  0007B2  5024               	movf	check_RFID@i,w,c
  3875  0007B4  240E               	addwf	check_RFID@dataBuf,w,c
  3876  0007B6  6ED9               	movwf	fsr2l,c
  3877  0007B8  5025               	movf	check_RFID@i+1,w,c
  3878  0007BA  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3879  0007BC  6EDA               	movwf	fsr2h,c
  3880  0007BE  0E2F               	movlw	47
  3881  0007C0  64DF               	cpfsgt	indf2,c
  3882  0007C2  D018               	goto	l2196
  3883  0007C4  5024               	movf	check_RFID@i,w,c
  3884  0007C6  240E               	addwf	check_RFID@dataBuf,w,c
  3885  0007C8  6ED9               	movwf	fsr2l,c
  3886  0007CA  5025               	movf	check_RFID@i+1,w,c
  3887  0007CC  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3888  0007CE  6EDA               	movwf	fsr2h,c
  3889  0007D0  0E3A               	movlw	58
  3890  0007D2  60DF               	cpfslt	indf2,c
  3891  0007D4  D00F               	goto	l2196
  3892                           
  3893                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  3894  0007D6  0E12               	movlw	low check_RFID@hexBuf
  3895  0007D8  2424               	addwf	check_RFID@i,w,c
  3896  0007DA  6ED9               	movwf	fsr2l,c
  3897  0007DC  0E00               	movlw	high check_RFID@hexBuf
  3898  0007DE  2025               	addwfc	check_RFID@i+1,w,c
  3899  0007E0  6EDA               	movwf	fsr2h,c
  3900  0007E2  5024               	movf	check_RFID@i,w,c
  3901  0007E4  240E               	addwf	check_RFID@dataBuf,w,c
  3902  0007E6  6EE1               	movwf	fsr1l,c
  3903  0007E8  5025               	movf	check_RFID@i+1,w,c
  3904  0007EA  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3905  0007EC  6EE2               	movwf	fsr1h,c
  3906  0007EE  50E7               	movf	indf1,w,c
  3907  0007F0  0FD0               	addlw	208
  3908  0007F2  D020               	goto	L1
  3909  0007F4                     l2196:
  3910  0007F4  5024               	movf	check_RFID@i,w,c
  3911  0007F6  240E               	addwf	check_RFID@dataBuf,w,c
  3912  0007F8  6ED9               	movwf	fsr2l,c
  3913  0007FA  5025               	movf	check_RFID@i+1,w,c
  3914  0007FC  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3915  0007FE  6EDA               	movwf	fsr2h,c
  3916  000800  0E40               	movlw	64
  3917  000802  64DF               	cpfsgt	indf2,c
  3918  000804  D018               	goto	l2202
  3919  000806  5024               	movf	check_RFID@i,w,c
  3920  000808  240E               	addwf	check_RFID@dataBuf,w,c
  3921  00080A  6ED9               	movwf	fsr2l,c
  3922  00080C  5025               	movf	check_RFID@i+1,w,c
  3923  00080E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3924  000810  6EDA               	movwf	fsr2h,c
  3925  000812  0E47               	movlw	71
  3926  000814  60DF               	cpfslt	indf2,c
  3927  000816  D00F               	goto	l2202
  3928                           
  3929                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  3930  000818  0E12               	movlw	low check_RFID@hexBuf
  3931  00081A  2424               	addwf	check_RFID@i,w,c
  3932  00081C  6ED9               	movwf	fsr2l,c
  3933  00081E  0E00               	movlw	high check_RFID@hexBuf
  3934  000820  2025               	addwfc	check_RFID@i+1,w,c
  3935  000822  6EDA               	movwf	fsr2h,c
  3936  000824  5024               	movf	check_RFID@i,w,c
  3937  000826  240E               	addwf	check_RFID@dataBuf,w,c
  3938  000828  6EE1               	movwf	fsr1l,c
  3939  00082A  5025               	movf	check_RFID@i+1,w,c
  3940  00082C  200F               	addwfc	check_RFID@dataBuf+1,w,c
  3941  00082E  6EE2               	movwf	fsr1h,c
  3942  000830  50E7               	movf	indf1,w,c
  3943  000832  0FC9               	addlw	201
  3944  000834                     L1:
  3945  000834  6EDF               	movwf	indf2,c
  3946  000836                     l2202:
  3947                           
  3948                           ;RFID.c: 86:     }
  3949  000836  4A24               	infsnz	check_RFID@i,f,c
  3950  000838  2A25               	incf	check_RFID@i+1,f,c
  3951  00083A  BE25               	btfsc	check_RFID@i+1,7,c
  3952  00083C  D7BA               	goto	l2190
  3953  00083E  5025               	movf	check_RFID@i+1,w,c
  3954  000840  E104               	bnz	u1490
  3955  000842  0E0C               	movlw	12
  3956  000844  5C24               	subwf	check_RFID@i,w,c
  3957  000846  A0D8               	btfss	status,0,c
  3958  000848  D7B4               	goto	l2190
  3959  00084A                     u1490:
  3960                           
  3961                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  3962  00084A  5012               	movf	check_RFID@hexBuf,w,c
  3963  00084C  A4D8               	btfss	status,2,c
  3964  00084E  D002               	goto	u1500
  3965  000850  0E01               	movlw	1
  3966  000852  D001               	goto	u1510
  3967  000854                     u1500:
  3968  000854  0E00               	movlw	0
  3969  000856                     u1510:
  3970  000856  1013               	iorwf	check_RFID@hexBuf+1,w,c
  3971  000858  6E1E               	movwf	check_RFID@byte1,c
  3972                           
  3973                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  3974  00085A  5014               	movf	check_RFID@hexBuf+2,w,c
  3975  00085C  A4D8               	btfss	status,2,c
  3976  00085E  D002               	goto	u1520
  3977  000860  0E01               	movlw	1
  3978  000862  D001               	goto	u1530
  3979  000864                     u1520:
  3980  000864  0E00               	movlw	0
  3981  000866                     u1530:
  3982  000866  1015               	iorwf	check_RFID@hexBuf+3,w,c
  3983  000868  6E1F               	movwf	check_RFID@byte2,c
  3984                           
  3985                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  3986  00086A  5016               	movf	check_RFID@hexBuf+4,w,c
  3987  00086C  A4D8               	btfss	status,2,c
  3988  00086E  D002               	goto	u1540
  3989  000870  0E01               	movlw	1
  3990  000872  D001               	goto	u1550
  3991  000874                     u1540:
  3992  000874  0E00               	movlw	0
  3993  000876                     u1550:
  3994  000876  1017               	iorwf	check_RFID@hexBuf+5,w,c
  3995  000878  6E20               	movwf	check_RFID@byte3,c
  3996                           
  3997                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  3998  00087A  5018               	movf	check_RFID@hexBuf+6,w,c
  3999  00087C  A4D8               	btfss	status,2,c
  4000  00087E  D002               	goto	u1560
  4001  000880  0E01               	movlw	1
  4002  000882  D001               	goto	u1570
  4003  000884                     u1560:
  4004  000884  0E00               	movlw	0
  4005  000886                     u1570:
  4006  000886  1019               	iorwf	check_RFID@hexBuf+7,w,c
  4007  000888  6E21               	movwf	check_RFID@byte4,c
  4008                           
  4009                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  4010  00088A  501A               	movf	check_RFID@hexBuf+8,w,c
  4011  00088C  A4D8               	btfss	status,2,c
  4012  00088E  D002               	goto	u1580
  4013  000890  0E01               	movlw	1
  4014  000892  D001               	goto	u1590
  4015  000894                     u1580:
  4016  000894  0E00               	movlw	0
  4017  000896                     u1590:
  4018  000896  101B               	iorwf	check_RFID@hexBuf+9,w,c
  4019  000898  6E22               	movwf	check_RFID@byte5,c
  4020                           
  4021                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  4022  00089A  501C               	movf	check_RFID@hexBuf+10,w,c
  4023  00089C  A4D8               	btfss	status,2,c
  4024  00089E  D002               	goto	u1600
  4025  0008A0  0E01               	movlw	1
  4026  0008A2  D001               	goto	u1610
  4027  0008A4                     u1600:
  4028  0008A4  0E00               	movlw	0
  4029  0008A6                     u1610:
  4030  0008A6  101D               	iorwf	check_RFID@hexBuf+11,w,c
  4031  0008A8  6E23               	movwf	check_RFID@checksum,c
  4032                           
  4033                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  4034  0008AA  501E               	movf	check_RFID@byte1,w,c
  4035  0008AC  181F               	xorwf	check_RFID@byte2,w,c
  4036  0008AE  1820               	xorwf	check_RFID@byte3,w,c
  4037  0008B0  1821               	xorwf	check_RFID@byte4,w,c
  4038  0008B2  6E10               	movwf	??_check_RFID& (0+255),c
  4039  0008B4  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  4040  0008B6  5023               	movf	check_RFID@checksum,w,c
  4041  0008B8  1822               	xorwf	check_RFID@byte5,w,c
  4042  0008BA  A4D8               	btfss	status,2,c
  4043  0008BC  D002               	goto	u1620
  4044  0008BE  0E01               	movlw	1
  4045  0008C0  D001               	goto	u1630
  4046  0008C2                     u1620:
  4047  0008C2  0E00               	movlw	0
  4048  0008C4                     u1630:
  4049  0008C4  1A10               	xorwf	??_check_RFID,f,c
  4050  0008C6  0E00               	movlw	0
  4051  0008C8  1A11               	xorwf	??_check_RFID+1,f,c
  4052  0008CA  5010               	movf	??_check_RFID,w,c
  4053  0008CC  1011               	iorwf	??_check_RFID+1,w,c
  4054  0008CE  B4D8               	btfsc	status,2,c
  4055  0008D0  D00A               	goto	l2212
  4056                           
  4057                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  4058  0008D2  0E02               	movlw	2
  4059  0008D4  EC6E  F009         	call	_SetLine
  4060                           
  4061                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  4062  0008D8  0E11               	movlw	low STR_3
  4063  0008DA  6E0C               	movwf	LCD_String@string,c
  4064  0008DC  0E03               	movlw	high STR_3
  4065  0008DE  6E0D               	movwf	LCD_String@string+1,c
  4066  0008E0  EC36  F008         	call	_LCD_String	;wreg free
  4067                           
  4068                           ;RFID.c: 101:     }
  4069  0008E4  0012               	return	
  4070  0008E6                     l2212:
  4071                           
  4072                           ;RFID.c: 104:         SetLine(2);
  4073  0008E6  0E02               	movlw	2
  4074  0008E8  EC6E  F009         	call	_SetLine
  4075                           
  4076                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  4077  0008EC  0E01               	movlw	low STR_4
  4078  0008EE  6E0C               	movwf	LCD_String@string,c
  4079  0008F0  0E03               	movlw	high STR_4
  4080  0008F2  6E0D               	movwf	LCD_String@string+1,c
  4081  0008F4  EC36  F008         	call	_LCD_String	;wreg free
  4082  0008F8  0012               	return		;funcret
  4083  0008FA                     __end_of_check_RFID:
  4084                           	opt callstack 0
  4085                           
  4086 ;; *************** function _SetLine *****************
  4087 ;; Defined at:
  4088 ;;		line 107 in file "LCDIO.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  line            1    wreg     unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  line            1   11[COMRAM] unsigned char 
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4102 ;;      Params:         0       0       0       0
  4103 ;;      Locals:         1       0       0       0
  4104 ;;      Temps:          0       0       0       0
  4105 ;;      Totals:         1       0       0       0
  4106 ;;Total ram usage:        1 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    5
  4109 ;; This function calls:
  4110 ;;		_SendLCD
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;;		_check_RFID
  4114 ;;		_display_RFID
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text28
  4119  0012DC                     __ptext28:
  4120                           	opt callstack 0
  4121  0012DC                     _SetLine:
  4122                           	opt callstack 24
  4123                           
  4124                           ;incstack = 0
  4125                           ;SetLine@line stored from wreg
  4126  0012DC  6E0C               	movwf	SetLine@line,c
  4127                           
  4128                           ;LCDIO.c: 109:     if(line == 1){
  4129  0012DE  040C               	decf	SetLine@line,w,c
  4130  0012E0  A4D8               	btfss	status,2,c
  4131  0012E2  D005               	goto	l2002
  4132                           
  4133                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4134  0012E4  0E00               	movlw	0
  4135  0012E6  6E0A               	movwf	SendLCD@type,c
  4136  0012E8  0E80               	movlw	128
  4137  0012EA  EC3F  F009         	call	_SendLCD
  4138  0012EE                     l2002:
  4139                           
  4140                           ;LCDIO.c: 113:     if(line == 2){
  4141  0012EE  0E02               	movlw	2
  4142  0012F0  180C               	xorwf	SetLine@line,w,c
  4143  0012F2  A4D8               	btfss	status,2,c
  4144  0012F4  D005               	goto	l2006
  4145                           
  4146                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4147  0012F6  0E00               	movlw	0
  4148  0012F8  6E0A               	movwf	SendLCD@type,c
  4149  0012FA  0EC0               	movlw	192
  4150  0012FC  EC3F  F009         	call	_SendLCD
  4151  001300                     l2006:
  4152                           
  4153                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4154  001300  0E21               	movlw	33
  4155  001302                     u2257:
  4156  001302  2EE8               	decfsz	wreg,f,c
  4157  001304  D7FE               	bra	u2257
  4158  001306  F000               	nop	
  4159  001308  0012               	return		;funcret
  4160  00130A                     __end_of_SetLine:
  4161                           	opt callstack 0
  4162                           
  4163 ;; *************** function _LCD_String *****************
  4164 ;; Defined at:
  4165 ;;		line 119 in file "LCDIO.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  string          2   11[COMRAM] PTR unsigned char 
  4168 ;;		 -> STR_4(16), STR_3(16), STR_2(16), main@temp2(16), 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4180 ;;      Params:         2       0       0       0
  4181 ;;      Locals:         0       0       0       0
  4182 ;;      Temps:          0       0       0       0
  4183 ;;      Totals:         2       0       0       0
  4184 ;;Total ram usage:        2 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    5
  4187 ;; This function calls:
  4188 ;;		_SendLCD
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;;		_check_RFID
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text29
  4196  00106C                     __ptext29:
  4197                           	opt callstack 0
  4198  00106C                     _LCD_String:
  4199                           	opt callstack 24
  4200                           
  4201                           ;LCDIO.c: 121: while(*string != 0){
  4202                           
  4203                           ;incstack = 0
  4204  00106C  D01A               	goto	l2016
  4205  00106E                     l2010:
  4206                           
  4207                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4208  00106E  0E01               	movlw	1
  4209  001070  6E0A               	movwf	SendLCD@type,c
  4210  001072  C00C  FFF6         	movff	LCD_String@string,tblptrl
  4211  001076  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  4212  00107A  6AF8               	clrf	tblptru,c
  4213  00107C  0E02               	movlw	(high __ramtop+-1)
  4214  00107E  64F7               	cpfsgt	tblptrh,c
  4215  001080  D003               	bra	u1297
  4216  001082  0008               	tblrd		*
  4217  001084  50F5               	movf	tablat,w,c
  4218  001086  D005               	bra	u1290
  4219  001088                     u1297:
  4220  001088  CFF6 FFE1          	movff	tblptrl,fsr1l
  4221  00108C  CFF7 FFE2          	movff	tblptrh,fsr1h
  4222  001090  50E7               	movf	indf1,w,c
  4223  001092                     u1290:
  4224  001092  EC3F  F009         	call	_SendLCD
  4225  001096  4A0C               	infsnz	LCD_String@string,f,c
  4226  001098  2A0D               	incf	LCD_String@string+1,f,c
  4227                           
  4228                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4229  00109A  0E21               	movlw	33
  4230  00109C                     u2267:
  4231  00109C  2EE8               	decfsz	wreg,f,c
  4232  00109E  D7FE               	bra	u2267
  4233  0010A0  F000               	nop	
  4234  0010A2                     l2016:
  4235                           
  4236                           ;LCDIO.c: 121: while(*string != 0){
  4237  0010A2  C00C  FFF6         	movff	LCD_String@string,tblptrl
  4238  0010A6  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  4239  0010AA  6AF8               	clrf	tblptru,c
  4240  0010AC  0E02               	movlw	(high __ramtop+-1)
  4241  0010AE  64F7               	cpfsgt	tblptrh,c
  4242  0010B0  D003               	bra	u1307
  4243  0010B2  0008               	tblrd		*
  4244  0010B4  50F5               	movf	tablat,w,c
  4245  0010B6  D005               	bra	u1300
  4246  0010B8                     u1307:
  4247  0010B8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4248  0010BC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4249  0010C0  50E7               	movf	indf1,w,c
  4250  0010C2                     u1300:
  4251  0010C2  0900               	iorlw	0
  4252  0010C4  B4D8               	btfsc	status,2,c
  4253  0010C6  0012               	return	
  4254  0010C8  D7D2               	goto	l2010
  4255  0010CA                     __end_of_LCD_String:
  4256                           	opt callstack 0
  4257                           
  4258 ;; *************** function _SendLCD *****************
  4259 ;; Defined at:
  4260 ;;		line 44 in file "LCDIO.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  Byte            1    wreg     unsigned char 
  4263 ;;  type            1    9[COMRAM] unsigned char 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  Byte            1   10[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4275 ;;      Params:         1       0       0       0
  4276 ;;      Locals:         1       0       0       0
  4277 ;;      Temps:          0       0       0       0
  4278 ;;      Totals:         2       0       0       0
  4279 ;;Total ram usage:        2 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    4
  4282 ;; This function calls:
  4283 ;;		_LCDout
  4284 ;; This function is called by:
  4285 ;;		_init_LCD
  4286 ;;		_SetLine
  4287 ;;		_LCD_String
  4288 ;;		_ClearLCD
  4289 ;;		_display_RFID
  4290 ;;		_ShiftLeft
  4291 ;;		_ShiftRight
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text30
  4296  00127E                     __ptext30:
  4297                           	opt callstack 0
  4298  00127E                     _SendLCD:
  4299                           	opt callstack 24
  4300                           
  4301                           ;incstack = 0
  4302                           ;SendLCD@Byte stored from wreg
  4303  00127E  6E0B               	movwf	SendLCD@Byte,c
  4304                           
  4305                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4306  001280  B00A               	btfsc	SendLCD@type,0,c
  4307  001282  D002               	bra	u1235
  4308  001284  9E89               	bcf	3977,7,c	;volatile
  4309  001286  D001               	bra	u1236
  4310  001288                     u1235:
  4311  001288  8E89               	bsf	3977,7,c	;volatile
  4312  00128A                     u1236:
  4313                           
  4314                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4315  00128A  380B               	swapf	SendLCD@Byte,w,c
  4316  00128C  0B0F               	andlw	15
  4317  00128E  0B0F               	andlw	15
  4318  001290  ECC2  F007         	call	_LCDout
  4319                           
  4320                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4321  001294  0E06               	movlw	6
  4322  001296                     u2277:
  4323  001296  2EE8               	decfsz	wreg,f,c
  4324  001298  D7FE               	bra	u2277
  4325  00129A  D000               	nop2	
  4326                           
  4327                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4328  00129C  500B               	movf	SendLCD@Byte,w,c
  4329  00129E  0B0F               	andlw	15
  4330  0012A0  ECC2  F007         	call	_LCDout
  4331                           
  4332                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4333  0012A4  0E21               	movlw	33
  4334  0012A6                     u2287:
  4335  0012A6  2EE8               	decfsz	wreg,f,c
  4336  0012A8  D7FE               	bra	u2287
  4337  0012AA  F000               	nop	
  4338  0012AC  0012               	return		;funcret
  4339  0012AE                     __end_of_SendLCD:
  4340                           	opt callstack 0
  4341                           
  4342 ;; *************** function _LCDout *****************
  4343 ;; Defined at:
  4344 ;;		line 31 in file "LCDIO.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  number          1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  number          1    8[COMRAM] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4358 ;;      Params:         0       0       0       0
  4359 ;;      Locals:         1       0       0       0
  4360 ;;      Temps:          1       0       0       0
  4361 ;;      Totals:         2       0       0       0
  4362 ;;Total ram usage:        2 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    3
  4365 ;; This function calls:
  4366 ;;		_E_TOG
  4367 ;; This function is called by:
  4368 ;;		_SendLCD
  4369 ;;		_init_LCD
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text31
  4374  000F84                     __ptext31:
  4375                           	opt callstack 0
  4376  000F84                     _LCDout:
  4377                           	opt callstack 24
  4378                           
  4379                           ;incstack = 0
  4380                           ;LCDout@number stored from wreg
  4381  000F84  6E09               	movwf	LCDout@number,c
  4382                           
  4383                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4384  000F86  C009  F008         	movff	LCDout@number,??_LCDout
  4385  000F8A  0E01               	movlw	1
  4386  000F8C  1608               	andwf	??_LCDout,f,c
  4387  000F8E  508B               	movf	3979,w,c	;volatile
  4388  000F90  1808               	xorwf	??_LCDout,w,c
  4389  000F92  0BFE               	andlw	-2
  4390  000F94  1808               	xorwf	??_LCDout,w,c
  4391  000F96  6E8B               	movwf	3979,c	;volatile
  4392                           
  4393                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4394  000F98  C009  F008         	movff	LCDout@number,??_LCDout
  4395  000F9C  90D8               	bcf	status,0,c
  4396  000F9E  3208               	rrcf	??_LCDout,f,c
  4397  000FA0  0E01               	movlw	1
  4398  000FA2  1608               	andwf	??_LCDout,f,c
  4399  000FA4  4608               	rlncf	??_LCDout,f,c
  4400  000FA6  4608               	rlncf	??_LCDout,f,c
  4401  000FA8  4608               	rlncf	??_LCDout,f,c
  4402  000FAA  508B               	movf	3979,w,c	;volatile
  4403  000FAC  1808               	xorwf	??_LCDout,w,c
  4404  000FAE  0BF7               	andlw	-9
  4405  000FB0  1808               	xorwf	??_LCDout,w,c
  4406  000FB2  6E8B               	movwf	3979,c	;volatile
  4407                           
  4408                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4409  000FB4  C009  F008         	movff	LCDout@number,??_LCDout
  4410  000FB8  90D8               	bcf	status,0,c
  4411  000FBA  3208               	rrcf	??_LCDout,f,c
  4412  000FBC  90D8               	bcf	status,0,c
  4413  000FBE  3208               	rrcf	??_LCDout,f,c
  4414  000FC0  0E01               	movlw	1
  4415  000FC2  1608               	andwf	??_LCDout,f,c
  4416  000FC4  508C               	movf	3980,w,c	;volatile
  4417  000FC6  1808               	xorwf	??_LCDout,w,c
  4418  000FC8  0BFE               	andlw	-2
  4419  000FCA  1808               	xorwf	??_LCDout,w,c
  4420  000FCC  6E8C               	movwf	3980,c	;volatile
  4421                           
  4422                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4423  000FCE  C009  F008         	movff	LCDout@number,??_LCDout
  4424  000FD2  90D8               	bcf	status,0,c
  4425  000FD4  3208               	rrcf	??_LCDout,f,c
  4426  000FD6  90D8               	bcf	status,0,c
  4427  000FD8  3208               	rrcf	??_LCDout,f,c
  4428  000FDA  90D8               	bcf	status,0,c
  4429  000FDC  3208               	rrcf	??_LCDout,f,c
  4430  000FDE  0E01               	movlw	1
  4431  000FE0  1608               	andwf	??_LCDout,f,c
  4432  000FE2  4608               	rlncf	??_LCDout,f,c
  4433  000FE4  508C               	movf	3980,w,c	;volatile
  4434  000FE6  1808               	xorwf	??_LCDout,w,c
  4435  000FE8  0BFD               	andlw	-3
  4436  000FEA  1808               	xorwf	??_LCDout,w,c
  4437  000FEC  6E8C               	movwf	3980,c	;volatile
  4438                           
  4439                           ;LCDIO.c: 39:  E_TOG();
  4440  000FEE  ECFF  F009         	call	_E_TOG	;wreg free
  4441                           
  4442                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4443  000FF2  0E03               	movlw	3
  4444  000FF4                     u2297:
  4445  000FF4  2EE8               	decfsz	wreg,f,c
  4446  000FF6  D7FE               	bra	u2297
  4447  000FF8  F000               	nop	
  4448  000FFA  0012               	return		;funcret
  4449  000FFC                     __end_of_LCDout:
  4450                           	opt callstack 0
  4451                           
  4452 ;; *************** function _E_TOG *****************
  4453 ;; Defined at:
  4454 ;;		line 23 in file "LCDIO.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4468 ;;      Params:         0       0       0       0
  4469 ;;      Locals:         0       0       0       0
  4470 ;;      Temps:          0       0       0       0
  4471 ;;      Totals:         0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    2
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_LCDout
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text32
  4483  0013FE                     __ptext32:
  4484                           	opt callstack 0
  4485  0013FE                     _E_TOG:
  4486                           	opt callstack 24
  4487                           
  4488                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4489                           
  4490                           ;incstack = 0
  4491  0013FE  8C89               	bsf	3977,6,c	;volatile
  4492                           
  4493                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4494  001400  0E03               	movlw	3
  4495  001402                     u2307:
  4496  001402  2EE8               	decfsz	wreg,f,c
  4497  001404  D7FE               	bra	u2307
  4498  001406  F000               	nop	
  4499                           
  4500                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4501  001408  9C89               	bcf	3977,6,c	;volatile
  4502  00140A  0012               	return		;funcret
  4503  00140C                     __end_of_E_TOG:
  4504                           	opt callstack 0
  4505                           
  4506 ;; *************** function _InterruptHandlerHigh *****************
  4507 ;; Defined at:
  4508 ;;		line 59 in file "main.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  throwaway       1    0        unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4522 ;;      Params:         0       0       0       0
  4523 ;;      Locals:         1       0       0       0
  4524 ;;      Temps:          2       0       0       0
  4525 ;;      Totals:         3       0       0       0
  4526 ;;Total ram usage:        3 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    1
  4529 ;; This function calls:
  4530 ;;		_processRFID
  4531 ;; This function is called by:
  4532 ;;		Interrupt level 2
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	intcode
  4537  000008                     __pintcode:
  4538                           	opt callstack 0
  4539  000008                     _InterruptHandlerHigh:
  4540                           	opt callstack 21
  4541                           
  4542                           ;incstack = 0
  4543  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4544  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4545  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4546                           
  4547                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4548  000012  AA9E               	btfss	3998,5,c	;volatile
  4549  000014  D00E               	goto	i2l69
  4550  000016  5056               	movf	_robot_mode,w,c	;volatile
  4551  000018  A4D8               	btfss	status,2,c
  4552  00001A  D00B               	goto	i2l69
  4553                           
  4554                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4555  00001C  0ECB               	movlw	low _RFIDbuf
  4556  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  4557  000020  0E00               	movlw	high _RFIDbuf
  4558  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  4559  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4560  000028  ECB9  F008         	call	_processRFID	;wreg free
  4561  00002C  0100               	movlb	0	; () banked
  4562  00002E  6FAA               	movwf	_RFID_flag& (0+255),b	;volatile
  4563                           
  4564                           ;main.c: 67:     }
  4565  000030  D001               	goto	i2l71
  4566  000032                     i2l69:
  4567  000032  50AE               	movf	4014,w,c	;volatile
  4568  000034                     i2l71:
  4569  000034  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4570  000038  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4571  00003C  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4572  00003E  0011               	retfie		f
  4573  000040                     __end_of_InterruptHandlerHigh:
  4574                           	opt callstack 0
  4575                           
  4576 ;; *************** function _processRFID *****************
  4577 ;; Defined at:
  4578 ;;		line 34 in file "RFID.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  4581 ;;		 -> RFIDbuf(12), 
  4582 ;;  latestChar      1    2[COMRAM] unsigned char 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  i               1    3[COMRAM] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      unsigned char 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4594 ;;      Params:         3       0       0       0
  4595 ;;      Locals:         1       0       0       0
  4596 ;;      Temps:          0       0       0       0
  4597 ;;      Totals:         4       0       0       0
  4598 ;;Total ram usage:        4 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; This function calls:
  4601 ;;		Nothing
  4602 ;; This function is called by:
  4603 ;;		_InterruptHandlerHigh
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text34
  4608  001172                     __ptext34:
  4609                           	opt callstack 0
  4610  001172                     _processRFID:
  4611                           	opt callstack 21
  4612                           
  4613                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4614                           
  4615                           ;incstack = 0
  4616  001172  0E03               	movlw	3
  4617  001174  1803               	xorwf	processRFID@latestChar,w,c
  4618  001176  A4D8               	btfss	status,2,c
  4619  001178  D002               	goto	i2l2088
  4620                           
  4621                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4622  00117A  0E01               	movlw	1
  4623  00117C  0012               	return	
  4624  00117E                     i2l2088:
  4625                           
  4626                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4627  00117E  0E02               	movlw	2
  4628  001180  1803               	xorwf	processRFID@latestChar,w,c
  4629  001182  A4D8               	btfss	status,2,c
  4630  001184  D012               	goto	i2l2108
  4631                           
  4632                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4633  001186  0E00               	movlw	0
  4634  001188  6E55               	movwf	processRFID@position_in_buf,c
  4635                           
  4636                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4637  00118A  0E00               	movlw	0
  4638  00118C  6E04               	movwf	processRFID@i,c
  4639  00118E                     i2l2096:
  4640                           
  4641                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4642  00118E  5004               	movf	processRFID@i,w,c
  4643  001190  2401               	addwf	processRFID@RFIDbuf,w,c
  4644  001192  6ED9               	movwf	fsr2l,c
  4645  001194  0E00               	movlw	0
  4646  001196  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4647  001198  6EDA               	movwf	fsr2h,c
  4648  00119A  0E00               	movlw	0
  4649  00119C  6EDF               	movwf	indf2,c
  4650                           
  4651                           ;RFID.c: 56:            }
  4652  00119E  2A04               	incf	processRFID@i,f,c
  4653  0011A0  0E0B               	movlw	11
  4654  0011A2  6404               	cpfsgt	processRFID@i,c
  4655  0011A4  D7F4               	goto	i2l2096
  4656  0011A6                     i2u138_40:
  4657                           
  4658                           ;RFID.c: 58:            return 0;
  4659  0011A6  0E00               	movlw	0
  4660  0011A8  0012               	return	
  4661  0011AA                     i2l2108:
  4662                           
  4663                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  4664  0011AA  5055               	movf	processRFID@position_in_buf,w,c
  4665  0011AC  2401               	addwf	processRFID@RFIDbuf,w,c
  4666  0011AE  6ED9               	movwf	fsr2l,c
  4667  0011B0  0E00               	movlw	0
  4668  0011B2  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4669  0011B4  6EDA               	movwf	fsr2h,c
  4670  0011B6  C003  FFDF         	movff	processRFID@latestChar,indf2
  4671                           
  4672                           ;RFID.c: 64:             position_in_buf++;
  4673  0011BA  2A55               	incf	processRFID@position_in_buf,f,c
  4674  0011BC  D7F4               	goto	i2u138_40
  4675  0011BE                     __end_of_processRFID:
  4676                           	opt callstack 0
  4677                           
  4678                           	psect	rparam
  4679  0000                     
  4680                           	psect	temp
  4681  000057                     btemp:
  4682                           	opt callstack 0
  4683  000057                     	ds	1
  4684  0000                     int$flags	set	btemp
  4685  0000                     wtemp8	set	btemp+1
  4686  0000                     ttemp5	set	btemp+1
  4687  0000                     ttemp6	set	btemp+4
  4688  0000                     ttemp7	set	btemp+8
  4689                           tosu	equ	0xFFF
  4690                           tosh	equ	0xFFE
  4691                           tosl	equ	0xFFD
  4692                           stkptr	equ	0xFFC
  4693                           pclatu	equ	0xFFB
  4694                           pclath	equ	0xFFA
  4695                           pcl	equ	0xFF9
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           indf0	equ	0xFEF
  4703                           postinc0	equ	0xFEE
  4704                           postdec0	equ	0xFED
  4705                           preinc0	equ	0xFEC
  4706                           plusw0	equ	0xFEB
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           indf1	equ	0xFE7
  4711                           postinc1	equ	0xFE6
  4712                           postdec1	equ	0xFE5
  4713                           preinc1	equ	0xFE4
  4714                           plusw1	equ	0xFE3
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           bsr	equ	0xFE0
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           preinc2	equ	0xFDC
  4722                           plusw2	equ	0xFDB
  4723                           fsr2h	equ	0xFDA
  4724                           fsr2l	equ	0xFD9
  4725                           status	equ	0xFD8


Data Sizes:
    Strings     61
    Constant    0
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      86
    BANK0           160     71     119
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1746_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), main@temp2(BANK0[16]), 

    init_motors@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motors@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _moveToBeacon->_turnRight
    _turnRight->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _init_motors->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                41    41      0   27082
                                             30 BANK0     41    41      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                         _check_RFID
                      _classify_data
                       _display_RFID
                        _init_motors
                       _moveToBeacon
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7529
                                             14 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                             76 COMRAM     2     2      0
                                              8 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             66 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             34 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             23 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             16 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              7 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              7 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              7 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1274
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1154
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                         6     1      5    4910
                                             37 COMRAM     6     1      5
                     _fullSpeedAhead
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     3      4    2231
                                             30 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     2      4    2231
                                             30 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motors                                          4     0      4    2317
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1857
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     303
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3408
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1066
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        2     0      2      98
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3416
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1110
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1415
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1066
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (10) _processRFID                                         4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motors
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     47      77       5       74.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      56       1       91.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CD       3        0.0%
DATA                 0      0      CD      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 11:31:02 2020

                           l61 12B2                   ___awdiv@sign 0013            ___wmul@multiplicand 000A  
                ?_display_RFID 000D                    ?_LCD_String 000C                            l127 09C2  
                          l314 0E1A                            l324 035C                            l326 0364  
          display_RFID@dataBuf 000D                            l787 0BB4                            l797 0D2A  
                          _pad 0DEC                 moveToBeacon@mL 0027                 moveToBeacon@mR 0029  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2010 106E                           l2002 12EE                           l2006 1300  
                         l2016 10A2                           l2202 0836                           l2026 0F2E  
                         l2212 08E6                           l2142 13FA                           l2046 1024  
                         l2152 11E2                           l2402 0B9E                           l2410 0CB8  
                         l2412 0CCC                           l2190 07B2                           l2350 1266  
                         l2502 10DE                           l2336 0D64                           l2504 1104  
                         l2178 1218                           l2418 0D14                           l2346 1250  
                         l2354 1314                           l2370 0E12                           l2434 039C  
                         l2522 0672                           l2196 07F4                           l2356 1318  
                         l2380 0E68                           l2372 0E24                           l2444 0488  
                         l2390 0B2E                           l2366 0E04                           l2392 0B42  
                         l2376 0E3C                           l2480 0602                           l2552 0736  
                         l2474 05C6                           l2490 0624                           l2554 073E  
                         l1860 0EBC                           l2484 060C                           l2556 0742  
                         l1862 0EC4                           l1854 0EA6                           l2558 074A  
                         l1880 0EFC                           l1872 0EE4                           l1848 0E96  
                         l2576 079C                           l2568 0764                           l1890 099A  
                         l1876 0EEE                           ?_pad 0018                           STR_1 0331  
                         STR_2 0321                           STR_3 0311                           STR_4 0301  
                         u2000 04C4                           u1300 10C2                           u1204 096E  
                         u1205 096A                           u1214 09B6                           u1215 09B2  
                         u1160 0EC8                           u1320 0F82                           u1225 0A0E  
                         u1330 106A                           u1235 1288                           u1307 10B8  
                         u1236 128A                           u1500 0854                           u2117 06FE  
                         u1510 0856                           _LATB 000F8A                           u2207 0C70  
                         u2127 0770                           u1600 08A4                           u1520 0864  
                         u1440 1244                           u2080 0794                           u2217 0C84  
                         u2137 0BF4                           u1290 1092                           u1610 08A6  
                         u1530 0866                           u2090 07A0                           u2307 1402  
                         u2227 0C96                           u2147 0C0A                           u1620 08C2  
                         u1540 0874                           u2237 0F64                           u2157 0C1A  
                         u1630 08C4                           u1550 0876                           u2247 13C4  
                         u2167 0C28                           u1560 0884                           u1800 0DA4  
                         u1297 1088                           u2257 1302                           u2177 0C36  
                         u1570 0886                           u1490 084A                           u2267 109C  
                         u2187 0C48                           u1580 0894                           u2277 1296  
                         u2197 0C5A                           u1590 0896                           u2287 12A6  
                         u1920 0CD0                           u2297 0FF4                           u1780 0D5C  
                         u1950 0352                           u1871 0B0E                           u1890 0B46  
                         u1980 04B2                           u1981 04B0                           u1990 04C0  
                         i2l71 0034                           i2l69 0032                           _dbuf 00AB  
                         _main 0658                           _prec 0051                           _nout 00A7  
                         pad@i 001F                           pad@p 001C                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 0021                           fsr2l 000FD9  
                         btemp 0057                           _utoa 0340                           prodh 000FF4  
                         prodl 000FF3                           start 0040                   ___param_bank 000000  
              __end_of_SendLCD 12AE                          ??_pad 001E                __end_of_SetLine 130A  
               ??_display_RFID 000F                          ?_main 0001                __end_of___awdiv 0F06  
                        ?_utoa 0023                __end_of___lodiv 0BD6                ___awdiv@divisor 0010  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
              __end_of___lomod 0D4C                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0012                          _RCREG 000FAE                          _E_TOG 13FE  
                 vfpfcnvrt@fmt 0045                   vfpfcnvrt@llu 0060                          _SPBRG 000FAF  
                 ?_init_sensor 0001                   ?_init_motors 001F                   main@raw_data 0091  
              __end_of_initPWM 13B4                          _flags 0053                          _fputc 0D4C  
                        _fputs 1246                          _setup 12AE                          pad@fp 0018  
                        _width 004F                          _putch 140C                          main@i 0093  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0058  
                        ttemp6 005B                          ttemp7 005F                          utoa@d 0025  
                        utoa@i 0041                          utoa@n 0039                          utoa@p 0035  
                        utoa@w 0037                          status 000FD8                          wtemp8 0058  
          __size_of_LCD_String 005E                __end_of_sprintf 1172               __end_of_ClearLCD 13CE  
             ___lodiv@dividend 0008                 __CFG_MCLRE$OFF 000000                __initialization 1334  
                 __end_of_main 07AA                   __end_of_utoa 04EE                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000C                         ??_main 007E    moveToBeacon@beacon_location 002B  
                       ??_utoa 002D                  __activetblptr 000002                         ?_E_TOG 0001  
             ___lodiv@quotient 0018                   ?_setMotorPWM 0016                         ?_fputc 0008  
                       ?_fputs 0011               ___awdiv@dividend 000E                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         ?_putch 0001  
                       i2l2108 11AA                         i2l2096 118E                         i2l2088 117E  
                       _LCDout 0F84                    SendLCD@Byte 000B                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 000A  
          main@beacon_location 00A9                      ??_SendLCD 000B                      ??_SetLine 000C  
                 vfprintf@cfmt 004D                  display_RFID@i 000F                         ___wmul 135A  
                    ??___awdiv 0012                      ??___lodiv 0018                      ??___lomod 0018  
             __end_of_init_LCD 0C9E                         clear_0 133A                         clear_1 1346  
             ___awdiv@quotient 0014                         pad@buf 001A                         _strlen 130A  
                    ??_initPWM 000A                         fputc@c 0008                         fputs@c 0015  
                       fputs@i 0016                         fputs@s 0011                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 1120                         utoa@fp 0023  
                    ??_sprintf 004F                   ?_processRFID 0001           __end_of_display_RFID 1246  
                   __accesstop 0060        __end_of__initialization 134C                fullSpeedAhead@i 0023  
                ___rparam_used 000001                    SetLine@line 000C                  __end_of_E_TOG 140C  
               __pcstackCOMRAM 0001                  __end_of_fputc 0DEC                  __end_of_fputs 127E  
                __end_of_setup 12DC                  __end_of_putch 140E                   ??_LCD_String 000E  
                      ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0038                      ?_ClearLCD 0001  
        __end_of_classify_data 13FE                        ??_fputc 000C                     _check_RFID 07AA  
                      ??_fputs 0015           __size_of_init_sensor 0018           __size_of_init_motors 00EA  
                      ??_setup 000D                        ??_putch 0008                     __pbssBANK0 00A7  
                      ?_LCDout 0001             __size_of_init_RFID 001A             __end_of_LCD_String 10CA  
                      ?___wmul 0008                  ?_moveToBeacon 0026                        _CAP1CON 000F63  
      __size_of_fullSpeedAhead 0070                        _DFLTCON 000F60                        ?_strlen 0008  
                   ??_ClearLCD 000C             __size_of_vfpfcnvrt 016A                        _RFIDbuf 00CB  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E               ___lomod@dividend 0008  
         __size_of_setMotorPWM 0124                      ?_init_LCD 0001                __size_of_LCDout 0078  
           __size_of_turnRight 007E                        _SendLCD 127E                        __Hparam 0000  
                      _SetLine 12DC                        __Lparam 0000                 ??_moveToBeacon 002B  
        processRFID@latestChar 0003                        ___awdiv 0E82                __size_of___wmul 0026  
                      ___lodiv 0B08                        ___lomod 0C9E                      ?_vfprintf 0068  
                 __psmallconst 0300               initPWM@PWMperiod 0008                        __pcinit 1334  
                      __ramtop 0300                        __ptext0 0658                        __ptext1 1120  
                      __ptext2 10CA                        __ptext3 04EE                        __ptext4 0340  
                      __ptext5 0DEC                        __ptext6 130A                        __ptext7 1246  
                      __ptext8 0D4C                        __ptext9 140C              __end_of_init_RFID 139A  
             check_RFID@hexBuf 0012                __size_of_strlen 002A                        _initPWM 139A  
                 __size_of_pad 0096                   LCDout@number 0009          __size_of_display_RFID 0040  
                  ?_check_RFID 000E                        _sprintf 1120           end_of_initialization 134C  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                      fputc@fp 000A                  __Lmediumconst 0000                        fputs@fp 0013  
                    _RFID_flag 00AA              __end_of_vfpfcnvrt 0658                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_vfprintf 004D                        strlen@a 000A  
                      strlen@s 0008                     _robot_mode 0056                   _display_RFID 1206  
                    _PORTDbits 000F83              __end_of_turnRight 0F84                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
             fullSpeedAhead@mL 001F               fullSpeedAhead@mR 0021                 __end_of_LCDout 0FFC  
                    _TXSTAbits 000FAC                     main@motorL 0095                     main@motorR 009E  
               _fullSpeedAhead 0FFC            __size_of_check_RFID 0150                    vfpfcnvrt@ap 0047  
                  vfpfcnvrt@fp 0043                 __end_of___wmul 1380                    _BAUDCONbits 000FAA  
               __end_of_strlen 1334            start_initialization 1334                ___lodiv@divisor 0010  
              ___lodiv@counter 0020                    __end_of_pad 0E82              __size_of_ClearLCD 001A  
         __end_of_moveToBeacon 1206          classify_data@raw_data 0008                       ??_LCDout 0008  
 __end_of_InterruptHandlerHigh 0040                    vfprintf@fmt 006A         __end_of_fullSpeedAhead 106C  
                     ??___wmul 000C                       ??_strlen 000A                    __pbssCOMRAM 004F  
                ??_init_sensor 0008                  ??_init_motors 0023                  __pcstackBANK0 0060  
        main@previous_location 0090              __size_of_init_LCD 00C8                       ?_SendLCD 000A  
                     ?_SetLine 0001                ?_fullSpeedAhead 001F                      __pintcode 0008  
                     ?___awdiv 000E         __size_of_classify_data 0018                       ?___lodiv 0008  
                     ?___lomod 0008             check_RFID@checksum 0023              __size_of_vfprintf 0056  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                ___lomod@divisor 0010  
                     ?_initPWM 0008                    __smallconst 0300                ___lomod@counter 0018  
               __size_of_E_TOG 000E                      _init_RFID 1380                  ??_setMotorPWM 0018  
                 ??_check_RFID 0010                       ?_sprintf 006E                 __size_of_fputc 00A0  
               __size_of_fputs 0038                 __size_of_setup 002E                 __size_of_putch 0002  
              check_RFID@byte1 001E                check_RFID@byte2 001F                check_RFID@byte3 0020  
              check_RFID@byte4 0021                check_RFID@byte5 0022            __end_of_init_sensor 13E6  
          __end_of_init_motors 0B08                 ___wmul@product 000C                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _IPR1bits 000F9F  
                     _PIE1bits 000F9D                    turnRight@mL 001F                    turnRight@mR 0021  
                     i2u138_40 11A6                       _PIR1bits 000F9E                       _RCONbits 000FD0  
                    _vfpfcnvrt 04EE             __end_of_check_RFID 08FA              ___wmul@multiplier 0008  
                 setMotorPWM@m 0016          __size_of_moveToBeacon 0048           _InterruptHandlerHigh 0008  
                     _ClearLCD 13B4                      main@temp2 0080                     ?_init_RFID 0001  
                    _turnRight 0F06                  ??_processRFID 0004                  _classify_data 13E6  
          __end_of_setMotorPWM 0A1E                    check_RFID@i 0024                       __Hrparam 0000  
    moveToBeacon@prev_location 0026               __size_of_SendLCD 0030                     vfprintf@ap 006C  
                     __Lrparam 0000                     vfprintf@fp 0068               __size_of_SetLine 002E  
                 _moveToBeacon 11BE               __size_of___awdiv 0084               __size_of___lodiv 00CE  
             __size_of___lomod 00AE                     ?_vfpfcnvrt 0043          ?_InterruptHandlerHigh 0001  
                   sprintf@fmt 0070               __size_of_initPWM 001A                    _init_sensor 13CE  
                  _init_motors 0A1E                 ?_classify_data 0008              check_RFID@dataBuf 000E  
                   ?_turnRight 001F                       __ptext10 0C9E                       __ptext11 0B08  
                     __ptext20 0A1E                       __ptext12 12AE                       __ptext21 08FA  
                     __ptext13 13CE                       __ptext30 127E                       __ptext22 135A  
                     __ptext14 1380                       __ptext31 0F84                       __ptext23 0E82  
                     __ptext15 0BD6                       __ptext32 13FE                       __ptext24 1206  
                     __ptext16 139A                       __ptext25 13B4                       __ptext17 11BE  
                     __ptext34 1172                       __ptext26 13E6                       __ptext18 0F06  
                     __ptext27 07AA                       __ptext19 0FFC                       __ptext28 12DC  
                     __ptext29 106C               __size_of_sprintf 0052                       _init_LCD 0BD6  
                __size_of_main 0152                  __size_of_utoa 01AE            __end_of_processRFID 11BE  
                   turnRight@i 0024                       int$flags 0057                       _vfprintf 10CA  
                   _LCD_String 106C                     _INTCONbits 000FF2                    ??_init_RFID 0008  
                  _setMotorPWM 08FA                       intlevel2 0000                      sprintf@ap 0076  
             ??_fullSpeedAhead 0023                  init_motors@mL 001F                  init_motors@mR 0021  
                   _OSCCONbits 000FD3     processRFID@position_in_buf 0055                    ??_vfpfcnvrt 0049  
       ??_InterruptHandlerHigh 0005                       sprintf@f 0078                       sprintf@s 006E  
              ??_classify_data 000A                    ??_turnRight 0023                    _processRFID 1172  
