

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 02 17:37:05 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 2.05
    62                           ; Generated 20/12/2018 GMT
    63                           ; 
    64                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4331 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     _CAP2CON	set	3938
    96  0000                     _CAP1CON	set	3939
    97  0000                     _DFLTCON	set	3936
    98  0000                     _ANSEL1	set	4025
    99  0000                     _ANSEL0	set	4024
   100  0000                     _T5CON	set	4023
   101  0000                     _IPR1bits	set	3999
   102  0000                     _PIE1bits	set	3997
   103  0000                     _RCSTAbits	set	4011
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _BAUDCONbits	set	4010
   106  0000                     _SPBRGH	set	4016
   107  0000                     _SPBRG	set	4015
   108  0000                     _TRISAbits	set	3986
   109  0000                     _TRISCbits	set	3988
   110  0000                     _LATDbits	set	3980
   111  0000                     _LATCbits	set	3979
   112  0000                     _LATAbits	set	3977
   113  0000                     _LATB	set	3978
   114  0000                     _PTPERH	set	3962
   115  0000                     _PTPERL	set	3963
   116  0000                     _PWMCON1	set	3950
   117  0000                     _PWMCON0	set	3951
   118  0000                     _PTCON1	set	3966
   119  0000                     _PTCON0	set	3967
   120  0000                     _PORTDbits	set	3971
   121  0000                     _CAP1BUFL	set	3944
   122  0000                     _CAP1BUFH	set	3945
   123  0000                     _CAP2BUFL	set	3942
   124  0000                     _CAP2BUFH	set	3943
   125  0000                     _RCREG	set	4014
   126  0000                     _PIR1bits	set	3998
   127  0000                     _TRISDbits	set	3989
   128  0000                     _TRISBbits	set	3987
   129  0000                     _RCONbits	set	4048
   130  0000                     _INTCONbits	set	4082
   131  0000                     _OSCCONbits	set	4051
   132  0000                     _OSCCON	set	4051
   133  0000                     _PDC1H	set	3958
   134  0000                     _PDC1L	set	3959
   135  0000                     _PDC0H	set	3960
   136  0000                     _PDC0L	set	3961
   137                           
   138                           	psect	smallconst
   139  000300                     __psmallconst:
   140                           	opt callstack 0
   141  000300  00                 	db	0
   142  000301                     STR_5:
   143  000301  43                 	db	67	;'C'
   144  000302  48                 	db	72	;'H'
   145  000303  45                 	db	69	;'E'
   146  000304  43                 	db	67	;'C'
   147  000305  4B                 	db	75	;'K'
   148  000306  53                 	db	83	;'S'
   149  000307  55                 	db	85	;'U'
   150  000308  4D                 	db	77	;'M'
   151  000309  20                 	db	32
   152  00030A  46                 	db	70	;'F'
   153  00030B  41                 	db	65	;'A'
   154  00030C  49                 	db	73	;'I'
   155  00030D  4C                 	db	76	;'L'
   156  00030E  45                 	db	69	;'E'
   157  00030F  44                 	db	68	;'D'
   158  000310  00                 	db	0
   159  000311                     STR_4:
   160  000311  43                 	db	67	;'C'
   161  000312  48                 	db	72	;'H'
   162  000313  45                 	db	69	;'E'
   163  000314  43                 	db	67	;'C'
   164  000315  4B                 	db	75	;'K'
   165  000316  53                 	db	83	;'S'
   166  000317  55                 	db	85	;'U'
   167  000318  4D                 	db	77	;'M'
   168  000319  20                 	db	32
   169  00031A  50                 	db	80	;'P'
   170  00031B  41                 	db	65	;'A'
   171  00031C  53                 	db	83	;'S'
   172  00031D  53                 	db	83	;'S'
   173  00031E  45                 	db	69	;'E'
   174  00031F  44                 	db	68	;'D'
   175  000320  00                 	db	0
   176  000321                     STR_3:
   177  000321  52                 	db	82	;'R'
   178  000322  45                 	db	69	;'E'
   179  000323  53                 	db	83	;'S'
   180  000324  45                 	db	69	;'E'
   181  000325  54                 	db	84	;'T'
   182  000326  54                 	db	84	;'T'
   183  000327  49                 	db	73	;'I'
   184  000328  4E                 	db	78	;'N'
   185  000329  47                 	db	71	;'G'
   186  00032A  20                 	db	32
   187  00032B  52                 	db	82	;'R'
   188  00032C  4F                 	db	79	;'O'
   189  00032D  42                 	db	66	;'B'
   190  00032E  4F                 	db	79	;'O'
   191  00032F  54                 	db	84	;'T'
   192  000330  00                 	db	0
   193  000331                     STR_2:
   194  000331  52                 	db	82	;'R'
   195  000332  49                 	db	73	;'I'
   196  000333  47                 	db	71	;'G'
   197  000334  48                 	db	72	;'H'
   198  000335  54                 	db	84	;'T'
   199  000336  20                 	db	32
   200  000337  25                 	db	37
   201  000338  75                 	db	117	;'u'
   202  000339  20                 	db	32
   203  00033A  00                 	db	0
   204  00033B                     STR_1:
   205  00033B  4C                 	db	76	;'L'
   206  00033C  45                 	db	69	;'E'
   207  00033D  46                 	db	70	;'F'
   208  00033E  54                 	db	84	;'T'
   209  00033F  20                 	db	32
   210  000340  25                 	db	37
   211  000341  75                 	db	117	;'u'
   212  000342  20                 	db	32
   213  000343  00                 	db	0
   214                           
   215                           ; #config settings
   216  000344  00                 	db	0	; dummy byte at the end
   217  0000                     
   218                           	psect	cinit
   219  0015F4                     __pcinit:
   220                           	opt callstack 0
   221  0015F4                     start_initialization:
   222                           	opt callstack 0
   223  0015F4                     __initialization:
   224                           	opt callstack 0
   225                           
   226                           ; Clear objects allocated to BANK1 (32 bytes)
   227  0015F4  EE01  F03D         	lfsr	0,__pbssBANK1
   228  0015F8  0E20               	movlw	32
   229  0015FA                     clear_0:
   230  0015FA  6AEE               	clrf	postinc0,c
   231  0015FC  06E8               	decf	wreg,f,c
   232  0015FE  E1FD               	bnz	clear_0
   233                           
   234                           ; Clear objects allocated to BANK0 (6 bytes)
   235  001600  0100               	movlb	0
   236  001602  6BCD               	clrf	(__pbssBANK0+5)& (0+255),b
   237  001604  6BCC               	clrf	(__pbssBANK0+4)& (0+255),b
   238  001606  6BCB               	clrf	(__pbssBANK0+3)& (0+255),b
   239  001608  6BCA               	clrf	(__pbssBANK0+2)& (0+255),b
   240  00160A  6BC9               	clrf	(__pbssBANK0+1)& (0+255),b
   241  00160C  6BC8               	clrf	__pbssBANK0& (0+255),b
   242                           
   243                           ; Clear objects allocated to COMRAM (16 bytes)
   244  00160E  EE00  F029         	lfsr	0,__pbssCOMRAM
   245  001612  0E10               	movlw	16
   246  001614                     clear_1:
   247  001614  6AEE               	clrf	postinc0,c
   248  001616  06E8               	decf	wreg,f,c
   249  001618  E1FD               	bnz	clear_1
   250  00161A                     end_of_initialization:
   251                           	opt callstack 0
   252  00161A                     __end_of__initialization:
   253                           	opt callstack 0
   254  00161A  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   255  00161C  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   256  00161E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   257  001620  6EF8               	movwf	tblptru,c
   258  001622  0100               	movlb	0
   259  001624  EF7D  F002         	goto	_main	;jump to C main() function
   260                           
   261                           	psect	bssCOMRAM
   262  000029                     __pbssCOMRAM:
   263                           	opt callstack 0
   264  000029                     _nout:
   265                           	opt callstack 0
   266  000029                     	ds	2
   267  00002B                     processRFID@position_in_buf:
   268                           	opt callstack 0
   269  00002B                     	ds	1
   270  00002C                     _robot_mode:
   271                           	opt callstack 0
   272  00002C                     	ds	1
   273  00002D                     InterruptHandlerHigh@RFIDbuf:
   274                           	opt callstack 0
   275  00002D                     	ds	12
   276                           
   277                           	psect	bssBANK0
   278  0000C8                     __pbssBANK0:
   279                           	opt callstack 0
   280  0000C8                     _width:
   281                           	opt callstack 0
   282  0000C8                     	ds	2
   283  0000CA                     _prec:
   284                           	opt callstack 0
   285  0000CA                     	ds	2
   286  0000CC                     _flags:
   287                           	opt callstack 0
   288  0000CC                     	ds	2
   289                           
   290                           	psect	bssBANK1
   291  00013D                     __pbssBANK1:
   292                           	opt callstack 0
   293  00013D                     _dbuf:
   294                           	opt callstack 0
   295  00013D                     	ds	32
   296                           
   297                           	psect	cstackBANK1
   298  000100                     __pcstackBANK1:
   299                           	opt callstack 0
   300  000100                     main@temp2:
   301                           	opt callstack 0
   302                           
   303                           ; 16 bytes @ 0x0
   304  000100                     	ds	16
   305  000110                     main@temp1:
   306                           	opt callstack 0
   307                           
   308                           ; 16 bytes @ 0x10
   309  000110                     	ds	16
   310  000120                     main@beacon_location:
   311                           	opt callstack 0
   312                           
   313                           ; 1 bytes @ 0x20
   314  000120                     	ds	1
   315  000121                     main@i:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0x21
   319  000121                     	ds	2
   320  000123                     main@motorL:
   321                           	opt callstack 0
   322                           
   323                           ; 9 bytes @ 0x23
   324  000123                     	ds	9
   325  00012C                     main@motorR:
   326                           	opt callstack 0
   327                           
   328                           ; 9 bytes @ 0x2C
   329  00012C                     	ds	9
   330  000135                     main@sensorL:
   331                           	opt callstack 0
   332                           
   333                           ; 4 bytes @ 0x35
   334  000135                     	ds	4
   335  000139                     main@sensorR:
   336                           	opt callstack 0
   337                           
   338                           ; 4 bytes @ 0x39
   339  000139                     	ds	4
   340                           
   341                           	psect	cstackBANK0
   342  000060                     __pcstackBANK0:
   343                           	opt callstack 0
   344  000060                     ??_InterruptHandlerLow:
   345                           
   346                           ; 1 bytes @ 0x0
   347  000060                     	ds	1
   348  000061                     ??_LCDout:
   349  000061                     ?_strlen:
   350                           	opt callstack 0
   351  000061                     ?___awdiv:
   352                           	opt callstack 0
   353  000061                     ?___lodiv:
   354                           	opt callstack 0
   355  000061                     ?___lomod:
   356                           	opt callstack 0
   357  000061                     initPWM@PWMperiod:
   358                           	opt callstack 0
   359  000061                     init_motors@mL:
   360                           	opt callstack 0
   361  000061                     classify_data@left_smoothed:
   362                           	opt callstack 0
   363  000061                     ___awdiv@dividend:
   364                           	opt callstack 0
   365  000061                     fputc@c:
   366                           	opt callstack 0
   367  000061                     strlen@s:
   368                           	opt callstack 0
   369  000061                     ___lodiv@dividend:
   370                           	opt callstack 0
   371  000061                     ___lomod@dividend:
   372                           	opt callstack 0
   373                           
   374                           ; 8 bytes @ 0x1
   375  000061                     	ds	1
   376  000062                     LCDout@number:
   377                           	opt callstack 0
   378                           
   379                           ; 1 bytes @ 0x2
   380  000062                     	ds	1
   381  000063                     SendLCD@type:
   382                           	opt callstack 0
   383  000063                     init_motors@mR:
   384                           	opt callstack 0
   385  000063                     classify_data@right_smoothed:
   386                           	opt callstack 0
   387  000063                     ___awdiv@divisor:
   388                           	opt callstack 0
   389  000063                     fputc@fp:
   390                           	opt callstack 0
   391  000063                     strlen@a:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0x3
   395  000063                     	ds	1
   396  000064                     SendLCD@Byte:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0x4
   400  000064                     	ds	1
   401  000065                     ??_init_LCD:
   402  000065                     ??_ClearLCD:
   403  000065                     ??_fputc:
   404  000065                     SetLine@line:
   405                           	opt callstack 0
   406  000065                     ___awdiv@counter:
   407                           	opt callstack 0
   408  000065                     LCD_String@string:
   409                           	opt callstack 0
   410  000065                     classify_data@difference:
   411                           	opt callstack 0
   412                           
   413                           ; 2 bytes @ 0x5
   414  000065                     	ds	1
   415  000066                     ___awdiv@sign:
   416                           	opt callstack 0
   417                           
   418                           ; 1 bytes @ 0x6
   419  000066                     	ds	1
   420  000067                     ___awdiv@quotient:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x7
   424  000067                     	ds	2
   425  000069                     ?___wmul:
   426                           	opt callstack 0
   427  000069                     ___wmul@multiplier:
   428                           	opt callstack 0
   429  000069                     ___lodiv@divisor:
   430                           	opt callstack 0
   431  000069                     ___lomod@divisor:
   432                           	opt callstack 0
   433                           
   434                           ; 8 bytes @ 0x9
   435  000069                     	ds	1
   436  00006A                     fputs@s:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0xA
   440  00006A                     	ds	1
   441  00006B                     ___wmul@multiplicand:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0xB
   445  00006B                     	ds	1
   446  00006C                     fputs@fp:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0xC
   450  00006C                     	ds	1
   451  00006D                     ___wmul@product:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0xD
   455  00006D                     	ds	1
   456  00006E                     fputs@c:
   457                           	opt callstack 0
   458                           
   459                           ; 1 bytes @ 0xE
   460  00006E                     	ds	1
   461  00006F                     setMotorPWM@m:
   462                           	opt callstack 0
   463  00006F                     process_signal@S:
   464                           	opt callstack 0
   465  00006F                     fputs@i:
   466                           	opt callstack 0
   467                           
   468                           ; 2 bytes @ 0xF
   469  00006F                     	ds	2
   470  000071                     ??_setMotorPWM:
   471  000071                     ?_pad:
   472                           	opt callstack 0
   473  000071                     ___lomod@counter:
   474                           	opt callstack 0
   475  000071                     pad@fp:
   476                           	opt callstack 0
   477  000071                     ___lodiv@quotient:
   478                           	opt callstack 0
   479                           
   480                           ; 8 bytes @ 0x11
   481  000071                     	ds	2
   482  000073                     pad@buf:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x13
   486  000073                     	ds	2
   487  000075                     pad@p:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x15
   491  000075                     	ds	1
   492  000076                     setMotorPWM@PWMduty:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x16
   496  000076                     	ds	1
   497  000077                     ??_pad:
   498                           
   499                           ; 1 bytes @ 0x17
   500  000077                     	ds	1
   501  000078                     stop@mL:
   502                           	opt callstack 0
   503  000078                     turnLeft@mL:
   504                           	opt callstack 0
   505  000078                     fullSpeedAhead@mL:
   506                           	opt callstack 0
   507  000078                     pad@i:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x18
   511  000078                     	ds	1
   512  000079                     ___lodiv@counter:
   513                           	opt callstack 0
   514                           
   515                           ; 1 bytes @ 0x19
   516  000079                     	ds	1
   517  00007A                     stop@mR:
   518                           	opt callstack 0
   519  00007A                     turnLeft@mR:
   520                           	opt callstack 0
   521  00007A                     fullSpeedAhead@mR:
   522                           	opt callstack 0
   523  00007A                     pad@w:
   524                           	opt callstack 0
   525                           
   526                           ; 2 bytes @ 0x1A
   527  00007A                     	ds	2
   528  00007C                     ??_turnLeft:
   529  00007C                     ?_utoa:
   530                           	opt callstack 0
   531  00007C                     stop@i:
   532                           	opt callstack 0
   533  00007C                     fullSpeedAhead@i:
   534                           	opt callstack 0
   535  00007C                     utoa@fp:
   536                           	opt callstack 0
   537                           
   538                           ; 2 bytes @ 0x1C
   539  00007C                     	ds	1
   540  00007D                     turnLeft@i:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x1D
   544  00007D                     	ds	1
   545  00007E                     utoa@d:
   546                           	opt callstack 0
   547                           
   548                           ; 8 bytes @ 0x1E
   549  00007E                     	ds	1
   550  00007F                     moveToBeacon@mL:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x1F
   554  00007F                     	ds	2
   555  000081                     moveToBeacon@mR:
   556                           	opt callstack 0
   557                           
   558                           ; 2 bytes @ 0x21
   559  000081                     	ds	2
   560  000083                     moveToBeacon@beacon_location:
   561                           	opt callstack 0
   562                           
   563                           ; 1 bytes @ 0x23
   564  000083                     	ds	3
   565  000086                     ??_utoa:
   566                           
   567                           ; 1 bytes @ 0x26
   568  000086                     	ds	8
   569  00008E                     utoa@p:
   570                           	opt callstack 0
   571                           
   572                           ; 2 bytes @ 0x2E
   573  00008E                     	ds	2
   574  000090                     utoa@w:
   575                           	opt callstack 0
   576                           
   577                           ; 2 bytes @ 0x30
   578  000090                     	ds	2
   579  000092                     utoa@n:
   580                           	opt callstack 0
   581                           
   582                           ; 8 bytes @ 0x32
   583  000092                     	ds	8
   584  00009A                     utoa@i:
   585                           	opt callstack 0
   586                           
   587                           ; 2 bytes @ 0x3A
   588  00009A                     	ds	2
   589  00009C                     ?_vfpfcnvrt:
   590                           	opt callstack 0
   591  00009C                     vfpfcnvrt@fp:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x3C
   595  00009C                     	ds	2
   596  00009E                     vfpfcnvrt@fmt:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x3E
   600  00009E                     	ds	2
   601  0000A0                     vfpfcnvrt@ap:
   602                           	opt callstack 0
   603                           
   604                           ; 2 bytes @ 0x40
   605  0000A0                     	ds	2
   606  0000A2                     ??_vfpfcnvrt:
   607                           
   608                           ; 1 bytes @ 0x42
   609  0000A2                     	ds	4
   610  0000A6                     vfpfcnvrt@llu:
   611                           	opt callstack 0
   612                           
   613                           ; 8 bytes @ 0x46
   614  0000A6                     	ds	8
   615  0000AE                     ?_vfprintf:
   616                           	opt callstack 0
   617  0000AE                     vfprintf@fp:
   618                           	opt callstack 0
   619                           
   620                           ; 2 bytes @ 0x4E
   621  0000AE                     	ds	2
   622  0000B0                     vfprintf@fmt:
   623                           	opt callstack 0
   624                           
   625                           ; 2 bytes @ 0x50
   626  0000B0                     	ds	2
   627  0000B2                     vfprintf@ap:
   628                           	opt callstack 0
   629                           
   630                           ; 2 bytes @ 0x52
   631  0000B2                     	ds	2
   632  0000B4                     vfprintf@cfmt:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x54
   636  0000B4                     	ds	2
   637  0000B6                     ?_sprintf:
   638                           	opt callstack 0
   639  0000B6                     sprintf@s:
   640                           	opt callstack 0
   641                           
   642                           ; 2 bytes @ 0x56
   643  0000B6                     	ds	2
   644  0000B8                     sprintf@fmt:
   645                           	opt callstack 0
   646                           
   647                           ; 2 bytes @ 0x58
   648  0000B8                     	ds	4
   649  0000BC                     
   650                           ; 1 bytes @ 0x5C
   651  0000BC                     	ds	2
   652  0000BE                     sprintf@ap:
   653                           	opt callstack 0
   654                           
   655                           ; 2 bytes @ 0x5E
   656  0000BE                     	ds	2
   657  0000C0                     sprintf@f:
   658                           	opt callstack 0
   659                           
   660                           ; 6 bytes @ 0x60
   661  0000C0                     	ds	6
   662  0000C6                     ??_main:
   663                           
   664                           ; 1 bytes @ 0x66
   665  0000C6                     	ds	2
   666                           
   667                           	psect	cstackCOMRAM
   668  000001                     __pcstackCOMRAM:
   669                           	opt callstack 0
   670  000001                     ??i2_LCDout:
   671  000001                     
   672                           ; 1 bytes @ 0x0
   673  000001                     	ds	1
   674  000002                     i2LCDout@number:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0x1
   678  000002                     	ds	1
   679  000003                     i2SendLCD@type:
   680                           	opt callstack 0
   681                           
   682                           ; 1 bytes @ 0x2
   683  000003                     	ds	1
   684  000004                     i2SendLCD@Byte:
   685                           	opt callstack 0
   686                           
   687                           ; 1 bytes @ 0x3
   688  000004                     	ds	1
   689  000005                     ??i2_ClearLCD:
   690  000005                     i2SetLine@line:
   691                           	opt callstack 0
   692  000005                     i2LCD_String@string:
   693                           	opt callstack 0
   694                           
   695                           ; 2 bytes @ 0x4
   696  000005                     	ds	1
   697  000006                     processRFID@RFIDbuf:
   698                           	opt callstack 0
   699                           
   700                           ; 2 bytes @ 0x5
   701  000006                     	ds	1
   702  000007                     check_RFID@dataBuf:
   703                           	opt callstack 0
   704                           
   705                           ; 2 bytes @ 0x6
   706  000007                     	ds	1
   707  000008                     processRFID@latestChar:
   708                           	opt callstack 0
   709                           
   710                           ; 1 bytes @ 0x7
   711  000008                     	ds	1
   712  000009                     ??_check_RFID:
   713  000009                     processRFID@i:
   714                           	opt callstack 0
   715                           
   716                           ; 2 bytes @ 0x8
   717  000009                     	ds	2
   718  00000B                     processRFID@i_1218:
   719                           	opt callstack 0
   720  00000B                     check_RFID@hexBuf:
   721                           	opt callstack 0
   722                           
   723                           ; 12 bytes @ 0xA
   724  00000B                     	ds	12
   725  000017                     check_RFID@byte1:
   726                           	opt callstack 0
   727                           
   728                           ; 1 bytes @ 0x16
   729  000017                     	ds	1
   730  000018                     check_RFID@byte2:
   731                           	opt callstack 0
   732                           
   733                           ; 1 bytes @ 0x17
   734  000018                     	ds	1
   735  000019                     check_RFID@byte3:
   736                           	opt callstack 0
   737                           
   738                           ; 1 bytes @ 0x18
   739  000019                     	ds	1
   740  00001A                     check_RFID@byte4:
   741                           	opt callstack 0
   742                           
   743                           ; 1 bytes @ 0x19
   744  00001A                     	ds	1
   745  00001B                     check_RFID@byte5:
   746                           	opt callstack 0
   747                           
   748                           ; 1 bytes @ 0x1A
   749  00001B                     	ds	1
   750  00001C                     check_RFID@checksum:
   751                           	opt callstack 0
   752                           
   753                           ; 1 bytes @ 0x1B
   754  00001C                     	ds	1
   755  00001D                     check_RFID@i:
   756                           	opt callstack 0
   757                           
   758                           ; 2 bytes @ 0x1C
   759  00001D                     	ds	2
   760  00001F                     ??_InterruptHandlerHigh:
   761                           
   762                           ; 1 bytes @ 0x1E
   763  00001F                     	ds	9
   764  000028                     InterruptHandlerHigh@RFID_flag:
   765                           	opt callstack 0
   766                           
   767                           ; 1 bytes @ 0x27
   768  000028                     	ds	1
   769                           
   770 ;;
   771 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   772 ;;
   773 ;; *************** function _main *****************
   774 ;; Defined at:
   775 ;;		line 93 in file "main.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  i               2   33[BANK1 ] int 
   780 ;;  temp1          16   16[BANK1 ] unsigned char [16]
   781 ;;  temp2          16    0[BANK1 ] unsigned char [16]
   782 ;;  beacon_locat    1   32[BANK1 ] unsigned char 
   783 ;;  motorR          9   44[BANK1 ] struct DC_motor
   784 ;;  motorL          9   35[BANK1 ] struct DC_motor
   785 ;;  sensorR         4   57[BANK1 ] struct Sensor
   786 ;;  sensorL         4   53[BANK1 ] struct Sensor
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   796 ;;      Params:         0       0       0       0
   797 ;;      Locals:         0       0      61       0
   798 ;;      Temps:          0       2       0       0
   799 ;;      Totals:         0       2      61       0
   800 ;;Total ram usage:       63 bytes
   801 ;; Hardware stack levels required when called:   15
   802 ;; This function calls:
   803 ;;		_ClearLCD
   804 ;;		_LCD_String
   805 ;;		_SetLine
   806 ;;		_classify_data
   807 ;;		_init_motors
   808 ;;		_moveToBeacon
   809 ;;		_process_signal
   810 ;;		_setup
   811 ;;		_sprintf
   812 ;; This function is called by:
   813 ;;		Startup code after reset
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text0
   818  0004FA                     __ptext0:
   819                           	opt callstack 0
   820  0004FA                     _main:
   821                           	opt callstack 16
   822                           
   823                           ;main.c: 96:   setup();
   824                           
   825                           ;incstack = 0
   826  0004FA  EC2E  F00B         	call	_setup	;wreg free
   827                           
   828                           ;main.c: 99:   struct DC_motor motorL, motorR;;main.c: 100:   init_motors(&motorL, &moto
      +                          rR);
   829  0004FE  0E23               	movlw	low main@motorL
   830  000500  0100               	movlb	0	; () banked
   831  000502  6F61               	movwf	init_motors@mL& (0+255),b
   832  000504  0E01               	movlw	high main@motorL
   833  000506  6F62               	movwf	(init_motors@mL+1)& (0+255),b
   834  000508  0E2C               	movlw	low main@motorR
   835  00050A  6F63               	movwf	init_motors@mR& (0+255),b
   836  00050C  0E01               	movlw	high main@motorR
   837  00050E  6F64               	movwf	(init_motors@mR+1)& (0+255),b
   838  000510  ECAF  F005         	call	_init_motors	;wreg free
   839  000514  D086               	goto	l3111
   840  000516                     l3085:
   841                           
   842                           ;main.c: 109:       {;main.c: 111:           sensorL.raw_data = (int)((CAP2BUFH << 8) | 
      +                          CAP2BUFL);
   843  000516  5066               	movf	3942,w,c	;volatile
   844  000518  CF67 F0C6          	movff	3943,??_main	;volatile
   845  00051C  0100               	movlb	0	; () banked
   846  00051E  6BC7               	clrf	(??_main+1)& (0+255),b
   847  000520  C0C6  F0C7         	movff	??_main,??_main+1
   848  000524  6BC6               	clrf	??_main& (0+255),b
   849  000526  11C6               	iorwf	??_main& (0+255),w,b
   850  000528  0101               	movlb	1	; () banked
   851  00052A  6F35               	movwf	main@sensorL& (0+255),b
   852  00052C  0100               	movlb	0	; () banked
   853  00052E  51C7               	movf	(??_main+1)& (0+255),w,b
   854  000530  0101               	movlb	1	; () banked
   855  000532  6F36               	movwf	(main@sensorL+1)& (0+255),b
   856                           
   857                           ;main.c: 112:           sensorR.raw_data = (int)((CAP1BUFH << 8) | CAP1BUFL);
   858  000534  5068               	movf	3944,w,c	;volatile
   859  000536  CF69 F0C6          	movff	3945,??_main	;volatile
   860  00053A  0100               	movlb	0	; () banked
   861  00053C  6BC7               	clrf	(??_main+1)& (0+255),b
   862  00053E  C0C6  F0C7         	movff	??_main,??_main+1
   863  000542  6BC6               	clrf	??_main& (0+255),b
   864  000544  11C6               	iorwf	??_main& (0+255),w,b
   865  000546  0101               	movlb	1	; () banked
   866  000548  6F39               	movwf	main@sensorR& (0+255),b
   867  00054A  0100               	movlb	0	; () banked
   868  00054C  51C7               	movf	(??_main+1)& (0+255),w,b
   869  00054E  0101               	movlb	1	; () banked
   870  000550  6F3A               	movwf	(main@sensorR+1)& (0+255),b
   871                           
   872                           ; BSR set to: 1
   873                           ;main.c: 115:           process_signal(&sensorL);
   874  000552  0E35               	movlw	low main@sensorL
   875  000554  0100               	movlb	0	; () banked
   876  000556  6F6F               	movwf	process_signal@S& (0+255),b
   877  000558  0E01               	movlw	high main@sensorL
   878  00055A  6F70               	movwf	(process_signal@S+1)& (0+255),b
   879  00055C  EC79  F007         	call	_process_signal	;wreg free
   880                           
   881                           ;main.c: 116:           process_signal(&sensorR);
   882  000560  0E39               	movlw	low main@sensorR
   883  000562  0100               	movlb	0	; () banked
   884  000564  6F6F               	movwf	process_signal@S& (0+255),b
   885  000566  0E01               	movlw	high main@sensorR
   886  000568  6F70               	movwf	(process_signal@S+1)& (0+255),b
   887  00056A  EC79  F007         	call	_process_signal	;wreg free
   888                           
   889                           ;main.c: 119:           char beacon_location = classify_data(sensorL.smoothed_signal,
   890  00056E  C137  F061         	movff	main@sensorL+2,classify_data@left_smoothed
   891  000572  C138  F062         	movff	main@sensorL+3,classify_data@left_smoothed+1
   892  000576  C13B  F063         	movff	main@sensorR+2,classify_data@right_smoothed
   893  00057A  C13C  F064         	movff	main@sensorR+3,classify_data@right_smoothed+1
   894  00057E  ECA1  F00A         	call	_classify_data	;wreg free
   895  000582  0101               	movlb	1	; () banked
   896  000584  6F20               	movwf	main@beacon_location& (0+255),b
   897                           
   898                           ; BSR set to: 1
   899                           ;main.c: 124:           moveToBeacon(beacon_location, &motorL, &motorR);
   900  000586  0E23               	movlw	low main@motorL
   901  000588  0100               	movlb	0	; () banked
   902  00058A  6F7F               	movwf	moveToBeacon@mL& (0+255),b
   903  00058C  0E01               	movlw	high main@motorL
   904  00058E  6F80               	movwf	(moveToBeacon@mL+1)& (0+255),b
   905  000590  0E2C               	movlw	low main@motorR
   906  000592  6F81               	movwf	moveToBeacon@mR& (0+255),b
   907  000594  0E01               	movlw	high main@motorR
   908  000596  6F82               	movwf	(moveToBeacon@mR+1)& (0+255),b
   909  000598  0101               	movlb	1	; () banked
   910  00059A  5120               	movf	main@beacon_location& (0+255),w,b
   911  00059C  ECC4  F007         	call	_moveToBeacon
   912                           
   913                           ;main.c: 127:           ClearLCD();
   914  0005A0  ECA0  F00B         	call	_ClearLCD	;wreg free
   915                           
   916                           ;main.c: 128:           SetLine(1);
   917  0005A4  0E01               	movlw	1
   918  0005A6  EC14  F00B         	call	_SetLine
   919                           
   920                           ;main.c: 129:           char temp2[16];;main.c: 130:           sprintf(temp2,"LEFT %u ",
      +                          sensorL.smoothed_signal);
   921  0005AA  0E00               	movlw	low main@temp2
   922  0005AC  0100               	movlb	0	; () banked
   923  0005AE  6FB6               	movwf	sprintf@s& (0+255),b
   924  0005B0  0E01               	movlw	high main@temp2
   925  0005B2  6FB7               	movwf	(sprintf@s+1)& (0+255),b
   926  0005B4  0E3B               	movlw	low STR_1
   927  0005B6  6FB8               	movwf	sprintf@fmt& (0+255),b
   928  0005B8  0E03               	movlw	high STR_1
   929  0005BA  6FB9               	movwf	(sprintf@fmt+1)& (0+255),b
   930  0005BC  C137  F0BA         	movff	main@sensorL+2,?_sprintf+4
   931  0005C0  C138  F0BB         	movff	main@sensorL+3,?_sprintf+5
   932  0005C4  EC4F  F00A         	call	_sprintf	;wreg free
   933                           
   934                           ;main.c: 131:           LCD_String(temp2);
   935  0005C8  0E00               	movlw	low main@temp2
   936  0005CA  0100               	movlb	0	; () banked
   937  0005CC  6F65               	movwf	LCD_String@string& (0+255),b
   938  0005CE  0E01               	movlw	high main@temp2
   939  0005D0  6F66               	movwf	(LCD_String@string+1)& (0+255),b
   940  0005D2  ECC4  F009         	call	_LCD_String	;wreg free
   941                           
   942                           ;main.c: 132:           SetLine(2);
   943  0005D6  0E02               	movlw	2
   944  0005D8  EC14  F00B         	call	_SetLine
   945                           
   946                           ;main.c: 133:           char temp1[16];;main.c: 134:           sprintf(temp1,"RIGHT %u "
      +                          ,sensorR.smoothed_signal);
   947  0005DC  0E10               	movlw	low main@temp1
   948  0005DE  0100               	movlb	0	; () banked
   949  0005E0  6FB6               	movwf	sprintf@s& (0+255),b
   950  0005E2  0E01               	movlw	high main@temp1
   951  0005E4  6FB7               	movwf	(sprintf@s+1)& (0+255),b
   952  0005E6  0E31               	movlw	low STR_2
   953  0005E8  6FB8               	movwf	sprintf@fmt& (0+255),b
   954  0005EA  0E03               	movlw	high STR_2
   955  0005EC  6FB9               	movwf	(sprintf@fmt+1)& (0+255),b
   956  0005EE  C13B  F0BA         	movff	main@sensorR+2,?_sprintf+4
   957  0005F2  C13C  F0BB         	movff	main@sensorR+3,?_sprintf+5
   958  0005F6  EC4F  F00A         	call	_sprintf	;wreg free
   959                           
   960                           ;main.c: 135:           LCD_String(temp1);
   961  0005FA  0E10               	movlw	low main@temp1
   962  0005FC  0100               	movlb	0	; () banked
   963  0005FE  6F65               	movwf	LCD_String@string& (0+255),b
   964  000600  0E01               	movlw	high main@temp1
   965  000602  6F66               	movwf	(LCD_String@string+1)& (0+255),b
   966  000604  ECC4  F009         	call	_LCD_String	;wreg free
   967                           
   968                           ;main.c: 136:           _delay((unsigned long)((100)*(8000000/4000.0)));
   969  000608  0E02               	movlw	2
   970  00060A  0100               	movlb	0	; () banked
   971  00060C  6FC7               	movwf	(??_main+1)& (0+255),b
   972  00060E  0E04               	movlw	4
   973  000610  6FC6               	movwf	??_main& (0+255),b
   974  000612  0EBA               	movlw	186
   975  000614                     u2867:
   976  000614  2EE8               	decfsz	wreg,f,c
   977  000616  D7FE               	bra	u2867
   978  000618  2FC6               	decfsz	??_main& (0+255),f,b
   979  00061A  D7FC               	bra	u2867
   980  00061C  2FC7               	decfsz	(??_main+1)& (0+255),f,b
   981  00061E  D7FA               	bra	u2867
   982  000620  F000               	nop	
   983  000622                     l3111:
   984                           
   985                           ;main.c: 108:       while(robot_mode == 0)
   986  000622  502C               	movf	_robot_mode,w,c	;volatile
   987  000624  A4D8               	btfss	status,2,c
   988  000626  D003               	goto	l3115
   989  000628  D776               	goto	l3085
   990  00062A                     l3113:
   991                           
   992                           ;main.c: 141:       {;main.c: 143:           robot_mode = 2;
   993  00062A  0E02               	movlw	2
   994  00062C  6E2C               	movwf	_robot_mode,c	;volatile
   995  00062E                     l3115:
   996                           
   997                           ;main.c: 140:       while(robot_mode == 1)
   998  00062E  042C               	decf	_robot_mode,w,c	;volatile
   999  000630  A4D8               	btfss	status,2,c
  1000  000632  D02D               	goto	u2810
  1001  000634  D7FA               	goto	l3113
  1002  000636                     l3117:
  1003                           
  1004                           ;main.c: 150:           {;main.c: 151:               ClearLCD();
  1005  000636  ECA0  F00B         	call	_ClearLCD	;wreg free
  1006                           
  1007                           ;main.c: 152:               LCD_String("RESETTING ROBOT");
  1008  00063A  0E21               	movlw	low STR_3
  1009  00063C  0100               	movlb	0	; () banked
  1010  00063E  6F65               	movwf	LCD_String@string& (0+255),b
  1011  000640  0E03               	movlw	high STR_3
  1012  000642  6F66               	movwf	(LCD_String@string+1)& (0+255),b
  1013  000644  ECC4  F009         	call	_LCD_String	;wreg free
  1014                           
  1015                           ;main.c: 153:               for(int i=0; i<10;i++)
  1016  000648  0E00               	movlw	0
  1017  00064A  0101               	movlb	1	; () banked
  1018  00064C  6F22               	movwf	(main@i+1)& (0+255),b
  1019  00064E  0E00               	movlw	0
  1020  000650  6F21               	movwf	main@i& (0+255),b
  1021  000652                     l3127:
  1022                           
  1023                           ; BSR set to: 1
  1024                           ;main.c: 154:               {;main.c: 155:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
  1025  000652  0E02               	movlw	2
  1026  000654  0100               	movlb	0	; () banked
  1027  000656  6FC7               	movwf	(??_main+1)& (0+255),b
  1028  000658  0E04               	movlw	4
  1029  00065A  6FC6               	movwf	??_main& (0+255),b
  1030  00065C  0EBA               	movlw	186
  1031  00065E                     u2877:
  1032  00065E  2EE8               	decfsz	wreg,f,c
  1033  000660  D7FE               	bra	u2877
  1034  000662  2FC6               	decfsz	??_main& (0+255),f,b
  1035  000664  D7FC               	bra	u2877
  1036  000666  2FC7               	decfsz	(??_main+1)& (0+255),f,b
  1037  000668  D7FA               	bra	u2877
  1038  00066A  F000               	nop	
  1039                           
  1040                           ;main.c: 156:               }
  1041  00066C  0101               	movlb	1	; () banked
  1042  00066E  4B21               	infsnz	main@i& (0+255),f,b
  1043  000670  2B22               	incf	(main@i+1)& (0+255),f,b
  1044  000672  BF22               	btfsc	(main@i+1)& (0+255),7,b
  1045  000674  D7EE               	goto	l3127
  1046  000676  5122               	movf	(main@i+1)& (0+255),w,b
  1047  000678  E104               	bnz	u2800
  1048  00067A  0E0A               	movlw	10
  1049  00067C  5D21               	subwf	main@i& (0+255),w,b
  1050  00067E  A0D8               	btfss	status,0,c
  1051  000680  D7E8               	goto	l3127
  1052  000682                     u2800:
  1053                           
  1054                           ; BSR set to: 1
  1055                           ;main.c: 157:               ClearLCD();
  1056  000682  ECA0  F00B         	call	_ClearLCD	;wreg free
  1057                           
  1058                           ;main.c: 158:               robot_mode = 0;
  1059  000686  0E00               	movlw	0
  1060  000688  6E2C               	movwf	_robot_mode,c	;volatile
  1061  00068A                     l3135:
  1062                           
  1063                           ;main.c: 149:           while(PORTDbits.RD2 == 1)
  1064  00068A  B483               	btfsc	3971,2,c	;volatile
  1065  00068C  D7D4               	goto	l3117
  1066  00068E                     u2810:
  1067                           
  1068                           ;main.c: 147:       while(robot_mode == 2)
  1069  00068E  0E02               	movlw	2
  1070  000690  182C               	xorwf	_robot_mode,w,c	;volatile
  1071  000692  A4D8               	btfss	status,2,c
  1072  000694  D7C6               	goto	l3111
  1073  000696  D7F9               	goto	l3135
  1074  000698                     __end_of_main:
  1075                           	opt callstack 0
  1076                           
  1077 ;; *************** function _sprintf *****************
  1078 ;; Defined at:
  1079 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  s               2   86[BANK0 ] PTR unsigned char 
  1082 ;;		 -> main@temp1(16), main@temp2(16), 
  1083 ;;  fmt             2   88[BANK0 ] PTR const unsigned char 
  1084 ;;		 -> STR_2(10), STR_1(9), 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  f               6   96[BANK0 ] struct _IO_FILE
  1087 ;;  ap              2   94[BANK0 ] PTR void [1]
  1088 ;;		 -> ?_sprintf(2), 
  1089 ;;  ret             2    0        int 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  2   86[BANK0 ] int 
  1092 ;; Registers used:
  1093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1099 ;;      Params:         0       6       0       0
  1100 ;;      Locals:         0      10       0       0
  1101 ;;      Temps:          0       0       0       0
  1102 ;;      Totals:         0      16       0       0
  1103 ;;Total ram usage:       16 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:   14
  1106 ;; This function calls:
  1107 ;;		_vfprintf
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text1
  1114  00149E                     __ptext1:
  1115                           	opt callstack 0
  1116  00149E                     _sprintf:
  1117                           	opt callstack 16
  1118                           
  1119                           ;incstack = 0
  1120  00149E  0EBA               	movlw	low (?_sprintf+4)
  1121  0014A0  0100               	movlb	0	; () banked
  1122  0014A2  6FBE               	movwf	sprintf@ap& (0+255),b
  1123  0014A4  0E00               	movlw	high (?_sprintf+4)
  1124  0014A6  6FBF               	movwf	(sprintf@ap+1)& (0+255),b
  1125  0014A8  C0B6  F0C0         	movff	sprintf@s,sprintf@f
  1126  0014AC  C0B7  F0C1         	movff	sprintf@s+1,sprintf@f+1
  1127                           
  1128                           ; BSR set to: 0
  1129  0014B0  0E00               	movlw	0
  1130  0014B2  6FC3               	movwf	(sprintf@f+3)& (0+255),b
  1131  0014B4  0E00               	movlw	0
  1132  0014B6  6FC2               	movwf	(sprintf@f+2)& (0+255),b
  1133                           
  1134                           ; BSR set to: 0
  1135  0014B8  0E00               	movlw	0
  1136  0014BA  6FC5               	movwf	(sprintf@f+5)& (0+255),b
  1137  0014BC  0E00               	movlw	0
  1138  0014BE  6FC4               	movwf	(sprintf@f+4)& (0+255),b
  1139                           
  1140                           ; BSR set to: 0
  1141  0014C0  0EC0               	movlw	low sprintf@f
  1142  0014C2  6FAE               	movwf	vfprintf@fp& (0+255),b
  1143  0014C4  0E00               	movlw	high sprintf@f
  1144  0014C6  6FAF               	movwf	(vfprintf@fp+1)& (0+255),b
  1145  0014C8  C0B8  F0B0         	movff	sprintf@fmt,vfprintf@fmt
  1146  0014CC  C0B9  F0B1         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1147  0014D0  0EBE               	movlw	low sprintf@ap
  1148  0014D2  6FB2               	movwf	vfprintf@ap& (0+255),b
  1149  0014D4  0E00               	movlw	high sprintf@ap
  1150  0014D6  6FB3               	movwf	(vfprintf@ap+1)& (0+255),b
  1151  0014D8  EC24  F00A         	call	_vfprintf	;wreg free
  1152  0014DC  0100               	movlb	0	; () banked
  1153  0014DE  51C2               	movf	(sprintf@f+2)& (0+255),w,b
  1154  0014E0  25B6               	addwf	sprintf@s& (0+255),w,b
  1155  0014E2  6ED9               	movwf	fsr2l,c
  1156  0014E4  51C3               	movf	(sprintf@f+3)& (0+255),w,b
  1157  0014E6  21B7               	addwfc	(sprintf@s+1)& (0+255),w,b
  1158  0014E8  6EDA               	movwf	fsr2h,c
  1159  0014EA  0E00               	movlw	0
  1160  0014EC  6EDF               	movwf	indf2,c
  1161                           
  1162                           ; BSR set to: 0
  1163  0014EE  0012               	return		;funcret
  1164  0014F0                     __end_of_sprintf:
  1165                           	opt callstack 0
  1166                           
  1167 ;; *************** function _vfprintf *****************
  1168 ;; Defined at:
  1169 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  fp              2   78[BANK0 ] PTR struct _IO_FILE
  1172 ;;		 -> sprintf@f(6), 
  1173 ;;  fmt             2   80[BANK0 ] PTR const unsigned char 
  1174 ;;		 -> STR_2(10), STR_1(9), 
  1175 ;;  ap              2   82[BANK0 ] PTR PTR void 
  1176 ;;		 -> sprintf@ap(2), 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  cfmt            2   84[BANK0 ] PTR unsigned char 
  1179 ;;		 -> STR_2(10), STR_1(9), 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  2   78[BANK0 ] int 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1189 ;;      Params:         0       6       0       0
  1190 ;;      Locals:         0       2       0       0
  1191 ;;      Temps:          0       0       0       0
  1192 ;;      Totals:         0       8       0       0
  1193 ;;Total ram usage:        8 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:   13
  1196 ;; This function calls:
  1197 ;;		_vfpfcnvrt
  1198 ;; This function is called by:
  1199 ;;		_sprintf
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text2
  1204  001448                     __ptext2:
  1205                           	opt callstack 0
  1206  001448                     _vfprintf:
  1207                           	opt callstack 16
  1208                           
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;incstack = 0
  1213  001448  C0B0  F0B4         	movff	vfprintf@fmt,vfprintf@cfmt
  1214  00144C  C0B1  F0B5         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1215                           
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1217  001450  0E00               	movlw	0
  1218  001452  6E2A               	movwf	_nout+1,c
  1219  001454  0E00               	movlw	0
  1220  001456  6E29               	movwf	_nout,c
  1221                           
  1222                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1223  001458  D014               	goto	l2853
  1224  00145A                     l2851:
  1225                           
  1226                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1227  00145A  C0AE  F09C         	movff	vfprintf@fp,vfpfcnvrt@fp
  1228  00145E  C0AF  F09D         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1229  001462  0EB4               	movlw	low vfprintf@cfmt
  1230  001464  0100               	movlb	0	; () banked
  1231  001466  6F9E               	movwf	vfpfcnvrt@fmt& (0+255),b
  1232  001468  0E00               	movlw	high vfprintf@cfmt
  1233  00146A  6F9F               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  1234  00146C  C0B2  F0A0         	movff	vfprintf@ap,vfpfcnvrt@ap
  1235  001470  C0B3  F0A1         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1236  001474  EC4C  F003         	call	_vfpfcnvrt	;wreg free
  1237  001478  0100               	movlb	0	; () banked
  1238  00147A  519C               	movf	?_vfpfcnvrt& (0+255),w,b
  1239  00147C  2629               	addwf	_nout,f,c
  1240  00147E  519D               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  1241  001480  222A               	addwfc	_nout+1,f,c
  1242  001482                     l2853:
  1243                           
  1244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1245  001482  C0B4  FFF6         	movff	vfprintf@cfmt,tblptrl
  1246  001486  C0B5  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1247  00148A                     	if	0	;tblptru may be non-zero
  1248  00148A                     	endif
  1249  00148A                     	if	0	;tblptru may be non-zero
  1250  00148A                     	endif
  1251  00148A  0008               	tblrd		*
  1252  00148C  50F5               	movf	tablat,w,c
  1253  00148E  0900               	iorlw	0
  1254  001490  A4D8               	btfss	status,2,c
  1255  001492  D7E3               	goto	l2851
  1256                           
  1257                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1258  001494  C029  F0AE         	movff	_nout,?_vfprintf
  1259  001498  C02A  F0AF         	movff	_nout+1,?_vfprintf+1
  1260  00149C  0012               	return		;funcret
  1261  00149E                     __end_of_vfprintf:
  1262                           	opt callstack 0
  1263                           
  1264 ;; *************** function _vfpfcnvrt *****************
  1265 ;; Defined at:
  1266 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  fp              2   60[BANK0 ] PTR struct _IO_FILE
  1269 ;;		 -> sprintf@f(6), 
  1270 ;;  fmt             2   62[BANK0 ] PTR PTR unsigned char 
  1271 ;;		 -> vfprintf@cfmt(2), 
  1272 ;;  ap              2   64[BANK0 ] PTR PTR void 
  1273 ;;		 -> sprintf@ap(2), 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  llu             8   70[BANK0 ] unsigned long long 
  1276 ;;  ll              8    0        long long 
  1277 ;;  f               4    0        long long 
  1278 ;;  vp              3    0        PTR void 
  1279 ;;  ct              3    0        unsigned char [3]
  1280 ;;  cp              3    0        PTR unsigned char 
  1281 ;;  i               2    0        int 
  1282 ;;  done            2    0        int 
  1283 ;;  c               1    0        unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2   60[BANK0 ] int 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1293 ;;      Params:         0       6       0       0
  1294 ;;      Locals:         0       8       0       0
  1295 ;;      Temps:          0       4       0       0
  1296 ;;      Totals:         0      18       0       0
  1297 ;;Total ram usage:       18 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:   12
  1300 ;; This function calls:
  1301 ;;		_fputc
  1302 ;;		_utoa
  1303 ;; This function is called by:
  1304 ;;		_vfprintf
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text3
  1309  000698                     __ptext3:
  1310                           	opt callstack 0
  1311  000698                     _vfpfcnvrt:
  1312                           	opt callstack 16
  1313                           
  1314                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1315                           
  1316                           ;incstack = 0
  1317  000698  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1318  00069C  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1319  0006A0  CFDE FFF6          	movff	postinc2,tblptrl
  1320  0006A4  CFDD FFF7          	movff	postdec2,tblptrh
  1321  0006A8                     	if	0	;tblptru may be non-zero
  1322  0006A8                     	endif
  1323  0006A8                     	if	0	;tblptru may be non-zero
  1324  0006A8                     	endif
  1325  0006A8  0008               	tblrd		*
  1326  0006AA  50F5               	movf	tablat,w,c
  1327  0006AC  0A25               	xorlw	37
  1328  0006AE  A4D8               	btfss	status,2,c
  1329  0006B0  D08F               	goto	l2721
  1330                           
  1331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1332  0006B2  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1333  0006B6  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1334  0006BA  2ADE               	incf	postinc2,f,c
  1335  0006BC  0E00               	movlw	0
  1336  0006BE  22DD               	addwfc	postdec2,f,c
  1337                           
  1338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1339  0006C0  0E00               	movlw	0
  1340  0006C2  0100               	movlb	0	; () banked
  1341  0006C4  6FC9               	movwf	(_width+1)& (0+255),b
  1342  0006C6  0E00               	movlw	0
  1343  0006C8  6FC8               	movwf	_width& (0+255),b
  1344  0006CA  C0C8  F0CC         	movff	_width,_flags
  1345  0006CE  C0C9  F0CD         	movff	_width+1,_flags+1
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1349  0006D2  69CA               	setf	_prec& (0+255),b
  1350  0006D4  69CB               	setf	(_prec+1)& (0+255),b
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1354  0006D6  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1355  0006DA  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1356  0006DE  CFDE FFF6          	movff	postinc2,tblptrl
  1357  0006E2  CFDD FFF7          	movff	postdec2,tblptrh
  1358  0006E6                     	if	0	;tblptru may be non-zero
  1359  0006E6                     	endif
  1360  0006E6                     	if	0	;tblptru may be non-zero
  1361  0006E6                     	endif
  1362  0006E6  0008               	tblrd		*
  1363  0006E8  50F5               	movf	tablat,w,c
  1364  0006EA  0A75               	xorlw	117
  1365  0006EC  A4D8               	btfss	status,2,c
  1366  0006EE  D040               	goto	l2705
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1370  0006F0  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1371  0006F4  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1372  0006F8  2ADE               	incf	postinc2,f,c
  1373  0006FA  0E00               	movlw	0
  1374  0006FC  22DD               	addwfc	postdec2,f,c
  1375                           
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1377  0006FE  C0A0  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1378  000702  C0A1  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1379  000706  CFDF F0A2          	movff	indf2,??_vfpfcnvrt
  1380  00070A  0E02               	movlw	2
  1381  00070C  26DE               	addwf	postinc2,f,c
  1382  00070E  CFDF F0A3          	movff	indf2,??_vfpfcnvrt+1
  1383  000712  0E00               	movlw	0
  1384  000714  22DD               	addwfc	postdec2,f,c
  1385  000716  C0A2  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1386  00071A  C0A3  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1387  00071E  CFDE F0A4          	movff	postinc2,??_vfpfcnvrt+2
  1388  000722  CFDD F0A5          	movff	postdec2,??_vfpfcnvrt+3
  1389  000726  C0A4  F0A6         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1390  00072A  C0A5  F0A7         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1391  00072E  6BA8               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1392  000730  6BA9               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1393  000732  6BAA               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1394  000734  6BAB               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1395  000736  6BAC               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1396  000738  6BAD               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1400  00073A  C09C  F07C         	movff	vfpfcnvrt@fp,utoa@fp
  1401  00073E  C09D  F07D         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1402  000742  C0A6  F07E         	movff	vfpfcnvrt@llu,utoa@d
  1403  000746  C0A7  F07F         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1404  00074A  C0A8  F080         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1405  00074E  C0A9  F081         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1406  000752  C0AA  F082         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1407  000756  C0AB  F083         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1408  00075A  C0AC  F084         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1409  00075E  C0AD  F085         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1410  000762  ECA3  F001         	call	_utoa	;wreg free
  1411  000766  C07C  F09C         	movff	?_utoa,?_vfpfcnvrt
  1412  00076A  C07D  F09D         	movff	?_utoa+1,?_vfpfcnvrt+1
  1413  00076E  0012               	return	
  1414  000770                     l2705:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1418  000770  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1419  000774  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1420  000778  CFDE FFF6          	movff	postinc2,tblptrl
  1421  00077C  CFDD FFF7          	movff	postdec2,tblptrh
  1422  000780                     	if	0	;tblptru may be non-zero
  1423  000780                     	endif
  1424  000780                     	if	0	;tblptru may be non-zero
  1425  000780                     	endif
  1426  000780  0008               	tblrd		*
  1427  000782  50F5               	movf	tablat,w,c
  1428  000784  0A25               	xorlw	37
  1429  000786  A4D8               	btfss	status,2,c
  1430  000788  D017               	goto	l2715
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1434  00078A  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1435  00078E  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1436  000792  2ADE               	incf	postinc2,f,c
  1437  000794  0E00               	movlw	0
  1438  000796  22DD               	addwfc	postdec2,f,c
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1442  000798  0E00               	movlw	0
  1443  00079A  6F62               	movwf	(fputc@c+1)& (0+255),b
  1444  00079C  0E25               	movlw	37
  1445  00079E  6F61               	movwf	fputc@c& (0+255),b
  1446  0007A0  C09C  F063         	movff	vfpfcnvrt@fp,fputc@fp
  1447  0007A4  C09D  F064         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1448  0007A8  ECD9  F006         	call	_fputc	;wreg free
  1449  0007AC                     l2711:
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1452  0007AC  0E00               	movlw	0
  1453  0007AE  0100               	movlb	0	; () banked
  1454  0007B0  6F9D               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  1455  0007B2  0E01               	movlw	1
  1456  0007B4  6F9C               	movwf	?_vfpfcnvrt& (0+255),b
  1457  0007B6  0012               	return	
  1458  0007B8                     l2715:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1462  0007B8  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1463  0007BC  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1464  0007C0  2ADE               	incf	postinc2,f,c
  1465  0007C2  0E00               	movlw	0
  1466  0007C4  22DD               	addwfc	postdec2,f,c
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1470  0007C6  0E00               	movlw	0
  1471  0007C8  6F9D               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  1472  0007CA  0E00               	movlw	0
  1473  0007CC  6F9C               	movwf	?_vfpfcnvrt& (0+255),b
  1474  0007CE  0012               	return	
  1475  0007D0                     l2721:
  1476                           
  1477                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1478  0007D0  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1479  0007D4  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1480  0007D8  CFDE FFF6          	movff	postinc2,tblptrl
  1481  0007DC  CFDD FFF7          	movff	postdec2,tblptrh
  1482  0007E0                     	if	0	;tblptru may be non-zero
  1483  0007E0                     	endif
  1484  0007E0                     	if	0	;tblptru may be non-zero
  1485  0007E0                     	endif
  1486  0007E0  0008               	tblrd		*
  1487  0007E2  50F5               	movf	tablat,w,c
  1488  0007E4  0100               	movlb	0	; () banked
  1489  0007E6  6F61               	movwf	fputc@c& (0+255),b
  1490  0007E8  6B62               	clrf	(fputc@c+1)& (0+255),b
  1491  0007EA  C09C  F063         	movff	vfpfcnvrt@fp,fputc@fp
  1492  0007EE  C09D  F064         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1493  0007F2  ECD9  F006         	call	_fputc	;wreg free
  1494                           
  1495                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1496  0007F6  C09E  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1497  0007FA  C09F  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1498  0007FE  2ADE               	incf	postinc2,f,c
  1499  000800  0E00               	movlw	0
  1500  000802  22DD               	addwfc	postdec2,f,c
  1501  000804  D7D3               	goto	l2711
  1502  000806                     __end_of_vfpfcnvrt:
  1503                           	opt callstack 0
  1504                           
  1505 ;; *************** function _utoa *****************
  1506 ;; Defined at:
  1507 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  fp              2   28[BANK0 ] PTR struct _IO_FILE
  1510 ;;		 -> sprintf@f(6), 
  1511 ;;  d               8   30[BANK0 ] unsigned long long 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  n               8   50[BANK0 ] unsigned long long 
  1514 ;;  i               2   58[BANK0 ] int 
  1515 ;;  w               2   48[BANK0 ] int 
  1516 ;;  p               2   46[BANK0 ] int 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2   28[BANK0 ] int 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1526 ;;      Params:         0      10       0       0
  1527 ;;      Locals:         0      14       0       0
  1528 ;;      Temps:          0       8       0       0
  1529 ;;      Totals:         0      32       0       0
  1530 ;;Total ram usage:       32 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:   11
  1533 ;; This function calls:
  1534 ;;		___lodiv
  1535 ;;		___lomod
  1536 ;;		_pad
  1537 ;; This function is called by:
  1538 ;;		_vfpfcnvrt
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text4
  1543  000346                     __ptext4:
  1544                           	opt callstack 0
  1545  000346                     _utoa:
  1546                           	opt callstack 16
  1547                           
  1548                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1549                           
  1550                           ;incstack = 0
  1551  000346  0100               	movlb	0	; () banked
  1552  000348  AFCB               	btfss	(_prec+1)& (0+255),7,b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1556  00034A  93CC               	bcf	_flags& (0+255),1,b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1560  00034C  BFCB               	btfsc	(_prec+1)& (0+255),7,b
  1561  00034E  D005               	goto	u2090
  1562  000350  51CB               	movf	(_prec+1)& (0+255),w,b
  1563  000352  E108               	bnz	l333
  1564  000354  05CA               	decf	_prec& (0+255),w,b
  1565  000356  B0D8               	btfsc	status,0,c
  1566  000358  D005               	goto	l333
  1567  00035A                     u2090:
  1568                           
  1569                           ; BSR set to: 0
  1570  00035A  0E00               	movlw	0
  1571  00035C  6F8F               	movwf	(utoa@p+1)& (0+255),b
  1572  00035E  0E01               	movlw	1
  1573  000360  6F8E               	movwf	utoa@p& (0+255),b
  1574  000362  D004               	goto	l335
  1575  000364                     l333:
  1576                           
  1577                           ; BSR set to: 0
  1578  000364  C0CA  F08E         	movff	_prec,utoa@p
  1579  000368  C0CB  F08F         	movff	_prec+1,utoa@p+1
  1580  00036C                     l335:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1584  00036C  C0C8  F090         	movff	_width,utoa@w
  1585  000370  C0C9  F091         	movff	_width+1,utoa@w+1
  1586                           
  1587                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1588  000374  C07E  F092         	movff	utoa@d,utoa@n
  1589  000378  C07F  F093         	movff	utoa@d+1,utoa@n+1
  1590  00037C  C080  F094         	movff	utoa@d+2,utoa@n+2
  1591  000380  C081  F095         	movff	utoa@d+3,utoa@n+3
  1592  000384  C082  F096         	movff	utoa@d+4,utoa@n+4
  1593  000388  C083  F097         	movff	utoa@d+5,utoa@n+5
  1594  00038C  C084  F098         	movff	utoa@d+6,utoa@n+6
  1595  000390  C085  F099         	movff	utoa@d+7,utoa@n+7
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1599  000394  0E00               	movlw	0
  1600  000396  6F9B               	movwf	(utoa@i+1)& (0+255),b
  1601  000398  0E1F               	movlw	31
  1602  00039A  6F9A               	movwf	utoa@i& (0+255),b
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1606  00039C  0E00               	movlw	0
  1607  00039E  0101               	movlb	1	; () banked
  1608  0003A0  6F5C               	movwf	(_dbuf+31)& (0+255),b
  1609                           
  1610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1611  0003A2  D077               	goto	l2603
  1612  0003A4                     l2593:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1616  0003A4  079A               	decf	utoa@i& (0+255),f,b
  1617  0003A6  A0D8               	btfss	status,0,c
  1618  0003A8  079B               	decf	(utoa@i+1)& (0+255),f,b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1622  0003AA  0E3D               	movlw	low _dbuf
  1623  0003AC  259A               	addwf	utoa@i& (0+255),w,b
  1624  0003AE  6ED9               	movwf	fsr2l,c
  1625  0003B0  0E01               	movlw	high _dbuf
  1626  0003B2  219B               	addwfc	(utoa@i+1)& (0+255),w,b
  1627  0003B4  6EDA               	movwf	fsr2h,c
  1628  0003B6  C092  F061         	movff	utoa@n,___lomod@dividend
  1629  0003BA  C093  F062         	movff	utoa@n+1,___lomod@dividend+1
  1630  0003BE  C094  F063         	movff	utoa@n+2,___lomod@dividend+2
  1631  0003C2  C095  F064         	movff	utoa@n+3,___lomod@dividend+3
  1632  0003C6  C096  F065         	movff	utoa@n+4,___lomod@dividend+4
  1633  0003CA  C097  F066         	movff	utoa@n+5,___lomod@dividend+5
  1634  0003CE  C098  F067         	movff	utoa@n+6,___lomod@dividend+6
  1635  0003D2  C099  F068         	movff	utoa@n+7,___lomod@dividend+7
  1636  0003D6  0E0A               	movlw	10
  1637  0003D8  6F69               	movwf	___lomod@divisor& (0+255),b
  1638  0003DA  0E00               	movlw	0
  1639  0003DC  6F6A               	movwf	(___lomod@divisor+1)& (0+255),b
  1640  0003DE  0E00               	movlw	0
  1641  0003E0  6F6B               	movwf	(___lomod@divisor+2)& (0+255),b
  1642  0003E2  0E00               	movlw	0
  1643  0003E4  6F6C               	movwf	(___lomod@divisor+3)& (0+255),b
  1644  0003E6  0E00               	movlw	0
  1645  0003E8  6F6D               	movwf	(___lomod@divisor+4)& (0+255),b
  1646  0003EA  0E00               	movlw	0
  1647  0003EC  6F6E               	movwf	(___lomod@divisor+5)& (0+255),b
  1648  0003EE  0E00               	movlw	0
  1649  0003F0  6F6F               	movwf	(___lomod@divisor+6)& (0+255),b
  1650  0003F2  0E00               	movlw	0
  1651  0003F4  6F70               	movwf	(___lomod@divisor+7)& (0+255),b
  1652  0003F6  EC81  F006         	call	___lomod	;wreg free
  1653  0003FA  C061  F086         	movff	?___lomod,??_utoa
  1654  0003FE  C062  F087         	movff	?___lomod+1,??_utoa+1
  1655  000402  C063  F088         	movff	?___lomod+2,??_utoa+2
  1656  000406  C064  F089         	movff	?___lomod+3,??_utoa+3
  1657  00040A  C065  F08A         	movff	?___lomod+4,??_utoa+4
  1658  00040E  C066  F08B         	movff	?___lomod+5,??_utoa+5
  1659  000412  C067  F08C         	movff	?___lomod+6,??_utoa+6
  1660  000416  C068  F08D         	movff	?___lomod+7,??_utoa+7
  1661  00041A  0100               	movlb	0	; () banked
  1662  00041C  5186               	movf	??_utoa& (0+255),w,b
  1663  00041E  0F30               	addlw	48
  1664  000420  6EDF               	movwf	indf2,c
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1668  000422  078E               	decf	utoa@p& (0+255),f,b
  1669  000424  A0D8               	btfss	status,0,c
  1670  000426  078F               	decf	(utoa@p+1)& (0+255),f,b
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1674  000428  0790               	decf	utoa@w& (0+255),f,b
  1675  00042A  A0D8               	btfss	status,0,c
  1676  00042C  0791               	decf	(utoa@w+1)& (0+255),f,b
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1680  00042E  C092  F061         	movff	utoa@n,___lodiv@dividend
  1681  000432  C093  F062         	movff	utoa@n+1,___lodiv@dividend+1
  1682  000436  C094  F063         	movff	utoa@n+2,___lodiv@dividend+2
  1683  00043A  C095  F064         	movff	utoa@n+3,___lodiv@dividend+3
  1684  00043E  C096  F065         	movff	utoa@n+4,___lodiv@dividend+4
  1685  000442  C097  F066         	movff	utoa@n+5,___lodiv@dividend+5
  1686  000446  C098  F067         	movff	utoa@n+6,___lodiv@dividend+6
  1687  00044A  C099  F068         	movff	utoa@n+7,___lodiv@dividend+7
  1688  00044E  0E0A               	movlw	10
  1689  000450  6F69               	movwf	___lodiv@divisor& (0+255),b
  1690  000452  0E00               	movlw	0
  1691  000454  6F6A               	movwf	(___lodiv@divisor+1)& (0+255),b
  1692  000456  0E00               	movlw	0
  1693  000458  6F6B               	movwf	(___lodiv@divisor+2)& (0+255),b
  1694  00045A  0E00               	movlw	0
  1695  00045C  6F6C               	movwf	(___lodiv@divisor+3)& (0+255),b
  1696  00045E  0E00               	movlw	0
  1697  000460  6F6D               	movwf	(___lodiv@divisor+4)& (0+255),b
  1698  000462  0E00               	movlw	0
  1699  000464  6F6E               	movwf	(___lodiv@divisor+5)& (0+255),b
  1700  000466  0E00               	movlw	0
  1701  000468  6F6F               	movwf	(___lodiv@divisor+6)& (0+255),b
  1702  00046A  0E00               	movlw	0
  1703  00046C  6F70               	movwf	(___lodiv@divisor+7)& (0+255),b
  1704  00046E  EC19  F006         	call	___lodiv	;wreg free
  1705  000472  C061  F092         	movff	?___lodiv,utoa@n
  1706  000476  C062  F093         	movff	?___lodiv+1,utoa@n+1
  1707  00047A  C063  F094         	movff	?___lodiv+2,utoa@n+2
  1708  00047E  C064  F095         	movff	?___lodiv+3,utoa@n+3
  1709  000482  C065  F096         	movff	?___lodiv+4,utoa@n+4
  1710  000486  C066  F097         	movff	?___lodiv+5,utoa@n+5
  1711  00048A  C067  F098         	movff	?___lodiv+6,utoa@n+6
  1712  00048E  C068  F099         	movff	?___lodiv+7,utoa@n+7
  1713  000492                     l2603:
  1714                           
  1715                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1716  000492  0100               	movlb	0	; () banked
  1717  000494  519A               	movf	utoa@i& (0+255),w,b
  1718  000496  119B               	iorwf	(utoa@i+1)& (0+255),w,b
  1719  000498  B4D8               	btfsc	status,2,c
  1720  00049A  D01A               	goto	u2140
  1721                           
  1722                           ; BSR set to: 0
  1723  00049C  5192               	movf	utoa@n& (0+255),w,b
  1724  00049E  1193               	iorwf	(utoa@n+1)& (0+255),w,b
  1725  0004A0  1194               	iorwf	(utoa@n+2)& (0+255),w,b
  1726  0004A2  1195               	iorwf	(utoa@n+3)& (0+255),w,b
  1727  0004A4  1196               	iorwf	(utoa@n+4)& (0+255),w,b
  1728  0004A6  1197               	iorwf	(utoa@n+5)& (0+255),w,b
  1729  0004A8  1198               	iorwf	(utoa@n+6)& (0+255),w,b
  1730  0004AA  1199               	iorwf	(utoa@n+7)& (0+255),w,b
  1731  0004AC  A4D8               	btfss	status,2,c
  1732  0004AE  D77A               	goto	l2593
  1733                           
  1734                           ; BSR set to: 0
  1735  0004B0  BF8F               	btfsc	(utoa@p+1)& (0+255),7,b
  1736  0004B2  D005               	goto	u2120
  1737  0004B4  518F               	movf	(utoa@p+1)& (0+255),w,b
  1738  0004B6  E102               	bnz	u2121
  1739  0004B8  058E               	decf	utoa@p& (0+255),w,b
  1740  0004BA  B0D8               	btfsc	status,0,c
  1741  0004BC                     u2121:
  1742  0004BC  D773               	goto	l2593
  1743  0004BE                     u2120:
  1744                           
  1745                           ; BSR set to: 0
  1746  0004BE  BF91               	btfsc	(utoa@w+1)& (0+255),7,b
  1747  0004C0  D007               	goto	u2140
  1748  0004C2  5191               	movf	(utoa@w+1)& (0+255),w,b
  1749  0004C4  E103               	bnz	u2130
  1750  0004C6  0590               	decf	utoa@w& (0+255),w,b
  1751  0004C8  A0D8               	btfss	status,0,c
  1752  0004CA  D002               	goto	u2140
  1753  0004CC                     u2130:
  1754                           
  1755                           ; BSR set to: 0
  1756  0004CC  B3CC               	btfsc	_flags& (0+255),1,b
  1757  0004CE  D76A               	goto	l2593
  1758  0004D0                     u2140:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1762  0004D0  C07C  F071         	movff	utoa@fp,pad@fp
  1763  0004D4  C07D  F072         	movff	utoa@fp+1,pad@fp+1
  1764  0004D8  0E3D               	movlw	low _dbuf
  1765  0004DA  259A               	addwf	utoa@i& (0+255),w,b
  1766  0004DC  6F73               	movwf	pad@buf& (0+255),b
  1767  0004DE  0E01               	movlw	high _dbuf
  1768  0004E0  219B               	addwfc	(utoa@i+1)& (0+255),w,b
  1769  0004E2  6F74               	movwf	(pad@buf+1)& (0+255),b
  1770  0004E4  C090  F075         	movff	utoa@w,pad@p
  1771  0004E8  C091  F076         	movff	utoa@w+1,pad@p+1
  1772  0004EC  EC2A  F007         	call	_pad	;wreg free
  1773  0004F0  C071  F07C         	movff	?_pad,?_utoa
  1774  0004F4  C072  F07D         	movff	?_pad+1,?_utoa+1
  1775  0004F8  0012               	return		;funcret
  1776  0004FA                     __end_of_utoa:
  1777                           	opt callstack 0
  1778                           
  1779 ;; *************** function _pad *****************
  1780 ;; Defined at:
  1781 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  fp              2   17[BANK0 ] PTR struct _IO_FILE
  1784 ;;		 -> sprintf@f(6), 
  1785 ;;  buf             2   19[BANK0 ] PTR unsigned char 
  1786 ;;		 -> dbuf(32), 
  1787 ;;  p               2   21[BANK0 ] int 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  w               2   26[BANK0 ] int 
  1790 ;;  i               2   24[BANK0 ] int 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  2   17[BANK0 ] int 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1800 ;;      Params:         0       6       0       0
  1801 ;;      Locals:         0       4       0       0
  1802 ;;      Temps:          0       1       0       0
  1803 ;;      Totals:         0      11       0       0
  1804 ;;Total ram usage:       11 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:   10
  1807 ;; This function calls:
  1808 ;;		_fputc
  1809 ;;		_fputs
  1810 ;;		_strlen
  1811 ;; This function is called by:
  1812 ;;		_utoa
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           	psect	text5
  1817  000E54                     __ptext5:
  1818                           	opt callstack 0
  1819  000E54                     _pad:
  1820                           	opt callstack 16
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1823                           
  1824                           ;incstack = 0
  1825  000E54  0100               	movlb	0	; () banked
  1826  000E56  A1CC               	btfss	_flags& (0+255),0,b
  1827  000E58  D00A               	goto	l2513
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1831  000E5A  C073  F06A         	movff	pad@buf,fputs@s
  1832  000E5E  C074  F06B         	movff	pad@buf+1,fputs@s+1
  1833  000E62  C071  F06C         	movff	pad@fp,fputs@fp
  1834  000E66  C072  F06D         	movff	pad@fp+1,fputs@fp+1
  1835  000E6A  ECC0  F00A         	call	_fputs	;wreg free
  1836  000E6E                     l2513:
  1837                           
  1838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1839  000E6E  0100               	movlb	0	; () banked
  1840  000E70  BF76               	btfsc	(pad@p+1)& (0+255),7,b
  1841  000E72  D005               	goto	l2517
  1842                           
  1843                           ; BSR set to: 0
  1844  000E74  C075  F07A         	movff	pad@p,pad@w
  1845  000E78  C076  F07B         	movff	pad@p+1,pad@w+1
  1846  000E7C  D004               	goto	l323
  1847  000E7E                     l2517:
  1848                           
  1849                           ; BSR set to: 0
  1850  000E7E  0E00               	movlw	0
  1851  000E80  6F7B               	movwf	(pad@w+1)& (0+255),b
  1852  000E82  0E00               	movlw	0
  1853  000E84  6F7A               	movwf	pad@w& (0+255),b
  1854  000E86                     l323:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1858  000E86  0E00               	movlw	0
  1859  000E88  6F79               	movwf	(pad@i+1)& (0+255),b
  1860  000E8A  0E00               	movlw	0
  1861  000E8C  6F78               	movwf	pad@i& (0+255),b
  1862                           
  1863                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1864  000E8E  D00D               	goto	l2523
  1865  000E90                     l2519:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1869  000E90  0E00               	movlw	0
  1870  000E92  6F62               	movwf	(fputc@c+1)& (0+255),b
  1871  000E94  0E20               	movlw	32
  1872  000E96  6F61               	movwf	fputc@c& (0+255),b
  1873  000E98  C071  F063         	movff	pad@fp,fputc@fp
  1874  000E9C  C072  F064         	movff	pad@fp+1,fputc@fp+1
  1875  000EA0  ECD9  F006         	call	_fputc	;wreg free
  1876                           
  1877                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1878  000EA4  0100               	movlb	0	; () banked
  1879  000EA6  4B78               	infsnz	pad@i& (0+255),f,b
  1880  000EA8  2B79               	incf	(pad@i+1)& (0+255),f,b
  1881  000EAA                     l2523:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1885  000EAA  517A               	movf	pad@w& (0+255),w,b
  1886  000EAC  5D78               	subwf	pad@i& (0+255),w,b
  1887  000EAE  5179               	movf	(pad@i+1)& (0+255),w,b
  1888  000EB0  0A80               	xorlw	128
  1889  000EB2  6F77               	movwf	??_pad& (0+255),b
  1890  000EB4  517B               	movf	(pad@w+1)& (0+255),w,b
  1891  000EB6  0A80               	xorlw	128
  1892  000EB8  5977               	subwfb	??_pad& (0+255),w,b
  1893  000EBA  A0D8               	btfss	status,0,c
  1894  000EBC  D7E9               	goto	l2519
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1898  000EBE  B1CC               	btfsc	_flags& (0+255),0,b
  1899  000EC0  D00A               	goto	l2527
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1903  000EC2  C073  F06A         	movff	pad@buf,fputs@s
  1904  000EC6  C074  F06B         	movff	pad@buf+1,fputs@s+1
  1905  000ECA  C071  F06C         	movff	pad@fp,fputs@fp
  1906  000ECE  C072  F06D         	movff	pad@fp+1,fputs@fp+1
  1907  000ED2  ECC0  F00A         	call	_fputs	;wreg free
  1908  000ED6                     l2527:
  1909                           
  1910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1911  000ED6  C073  F061         	movff	pad@buf,strlen@s
  1912  000EDA  C074  F062         	movff	pad@buf+1,strlen@s+1
  1913  000EDE  EC5E  F00B         	call	_strlen	;wreg free
  1914  000EE2  0100               	movlb	0	; () banked
  1915  000EE4  517A               	movf	pad@w& (0+255),w,b
  1916  000EE6  2561               	addwf	?_strlen& (0+255),w,b
  1917  000EE8  6F71               	movwf	?_pad& (0+255),b
  1918  000EEA  517B               	movf	(pad@w+1)& (0+255),w,b
  1919  000EEC  2162               	addwfc	(?_strlen+1)& (0+255),w,b
  1920  000EEE  6F72               	movwf	(?_pad+1)& (0+255),b
  1921                           
  1922                           ; BSR set to: 0
  1923  000EF0  0012               	return		;funcret
  1924  000EF2                     __end_of_pad:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function _strlen *****************
  1928 ;; Defined at:
  1929 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  s               2    1[BANK0 ] PTR const unsigned char 
  1932 ;;		 -> dbuf(32), 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;  a               2    3[BANK0 ] PTR const unsigned char 
  1935 ;;		 -> dbuf(32), 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2    1[BANK0 ] unsigned int 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1945 ;;      Params:         0       2       0       0
  1946 ;;      Locals:         0       2       0       0
  1947 ;;      Temps:          0       0       0       0
  1948 ;;      Totals:         0       4       0       0
  1949 ;;Total ram usage:        4 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    7
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_pad
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           	psect	text6
  1960  0016BC                     __ptext6:
  1961                           	opt callstack 0
  1962  0016BC                     _strlen:
  1963                           	opt callstack 18
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;incstack = 0
  1967  0016BC  C061  F063         	movff	strlen@s,strlen@a
  1968  0016C0  C062  F064         	movff	strlen@s+1,strlen@a+1
  1969  0016C4  D003               	goto	l2497
  1970  0016C6                     l2495:
  1971  0016C6  0100               	movlb	0	; () banked
  1972  0016C8  4B61               	infsnz	strlen@s& (0+255),f,b
  1973  0016CA  2B62               	incf	(strlen@s+1)& (0+255),f,b
  1974  0016CC                     l2497:
  1975  0016CC  C061  FFD9         	movff	strlen@s,fsr2l
  1976  0016D0  C062  FFDA         	movff	strlen@s+1,fsr2h
  1977  0016D4  50DF               	movf	indf2,w,c
  1978  0016D6  A4D8               	btfss	status,2,c
  1979  0016D8  D7F6               	goto	l2495
  1980  0016DA  0100               	movlb	0	; () banked
  1981  0016DC  5163               	movf	strlen@a& (0+255),w,b
  1982  0016DE  5D61               	subwf	strlen@s& (0+255),w,b
  1983  0016E0  6F61               	movwf	?_strlen& (0+255),b
  1984  0016E2  5164               	movf	(strlen@a+1)& (0+255),w,b
  1985  0016E4  5962               	subwfb	(strlen@s+1)& (0+255),w,b
  1986  0016E6  6F62               	movwf	(?_strlen+1)& (0+255),b
  1987                           
  1988                           ; BSR set to: 0
  1989  0016E8  0012               	return		;funcret
  1990  0016EA                     __end_of_strlen:
  1991                           	opt callstack 0
  1992                           
  1993 ;; *************** function _fputs *****************
  1994 ;; Defined at:
  1995 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  s               2   10[BANK0 ] PTR const unsigned char 
  1998 ;;		 -> dbuf(32), 
  1999 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  2000 ;;		 -> sprintf@f(6), 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  i               2   15[BANK0 ] int 
  2003 ;;  c               1   14[BANK0 ] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  2   10[BANK0 ] int 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2013 ;;      Params:         0       4       0       0
  2014 ;;      Locals:         0       3       0       0
  2015 ;;      Temps:          0       0       0       0
  2016 ;;      Totals:         0       7       0       0
  2017 ;;Total ram usage:        7 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    9
  2020 ;; This function calls:
  2021 ;;		_fputc
  2022 ;; This function is called by:
  2023 ;;		_pad
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text7
  2028  001580                     __ptext7:
  2029                           	opt callstack 0
  2030  001580                     _fputs:
  2031                           	opt callstack 16
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;incstack = 0
  2035  001580  0E00               	movlw	0
  2036  001582  0100               	movlb	0	; () banked
  2037  001584  6F70               	movwf	(fputs@i+1)& (0+255),b
  2038  001586  0E00               	movlw	0
  2039  001588  6F6F               	movwf	fputs@i& (0+255),b
  2040  00158A  D00C               	goto	l2491
  2041  00158C                     l2487:
  2042                           
  2043                           ; BSR set to: 0
  2044  00158C  C06E  F061         	movff	fputs@c,fputc@c
  2045  001590  6B62               	clrf	(fputc@c+1)& (0+255),b
  2046  001592  C06C  F063         	movff	fputs@fp,fputc@fp
  2047  001596  C06D  F064         	movff	fputs@fp+1,fputc@fp+1
  2048  00159A  ECD9  F006         	call	_fputc	;wreg free
  2049  00159E  0100               	movlb	0	; () banked
  2050  0015A0  4B6F               	infsnz	fputs@i& (0+255),f,b
  2051  0015A2  2B70               	incf	(fputs@i+1)& (0+255),f,b
  2052  0015A4                     l2491:
  2053                           
  2054                           ; BSR set to: 0
  2055  0015A4  516F               	movf	fputs@i& (0+255),w,b
  2056  0015A6  256A               	addwf	fputs@s& (0+255),w,b
  2057  0015A8  6ED9               	movwf	fsr2l,c
  2058  0015AA  5170               	movf	(fputs@i+1)& (0+255),w,b
  2059  0015AC  216B               	addwfc	(fputs@s+1)& (0+255),w,b
  2060  0015AE  6EDA               	movwf	fsr2h,c
  2061  0015B0  50DF               	movf	indf2,w,c
  2062  0015B2  6F6E               	movwf	fputs@c& (0+255),b
  2063  0015B4  516E               	movf	fputs@c& (0+255),w,b
  2064  0015B6  B4D8               	btfsc	status,2,c
  2065  0015B8  0012               	return	
  2066  0015BA  D7E8               	goto	l2487
  2067  0015BC                     __end_of_fputs:
  2068                           	opt callstack 0
  2069                           
  2070 ;; *************** function _fputc *****************
  2071 ;; Defined at:
  2072 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  c               2    1[BANK0 ] int 
  2075 ;;  fp              2    3[BANK0 ] PTR struct _IO_FILE
  2076 ;;		 -> sprintf@f(6), 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  2    1[BANK0 ] int 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2088 ;;      Params:         0       4       0       0
  2089 ;;      Locals:         0       0       0       0
  2090 ;;      Temps:          0       5       0       0
  2091 ;;      Totals:         0       9       0       0
  2092 ;;Total ram usage:        9 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    8
  2095 ;; This function calls:
  2096 ;;		_putch
  2097 ;; This function is called by:
  2098 ;;		_pad
  2099 ;;		_vfpfcnvrt
  2100 ;;		_fputs
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text8
  2105  000DB2                     __ptext8:
  2106                           	opt callstack 0
  2107  000DB2                     _fputc:
  2108                           	opt callstack 16
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;incstack = 0
  2112  000DB2  0100               	movlb	0	; () banked
  2113  000DB4  5163               	movf	fputc@fp& (0+255),w,b
  2114  000DB6  1164               	iorwf	(fputc@fp+1)& (0+255),w,b
  2115  000DB8  B4D8               	btfsc	status,2,c
  2116  000DBA  D004               	goto	u1920
  2117                           
  2118                           ; BSR set to: 0
  2119  000DBC  5163               	movf	fputc@fp& (0+255),w,b
  2120  000DBE  1164               	iorwf	(fputc@fp+1)& (0+255),w,b
  2121  000DC0  A4D8               	btfss	status,2,c
  2122  000DC2  D004               	goto	l2477
  2123  000DC4                     u1920:
  2124                           
  2125                           ; BSR set to: 0
  2126  000DC4  5161               	movf	fputc@c& (0+255),w,b
  2127  000DC6  ECF5  F00B         	call	_putch
  2128  000DCA  0012               	return	
  2129  000DCC                     l2477:
  2130                           
  2131                           ; BSR set to: 0
  2132  000DCC  EE20 F004          	lfsr	2,4
  2133  000DD0  5163               	movf	fputc@fp& (0+255),w,b
  2134  000DD2  26D9               	addwf	fsr2l,f,c
  2135  000DD4  5164               	movf	(fputc@fp+1)& (0+255),w,b
  2136  000DD6  22DA               	addwfc	fsr2h,f,c
  2137  000DD8  50DE               	movf	postinc2,w,c
  2138  000DDA  10DE               	iorwf	postinc2,w,c
  2139  000DDC  B4D8               	btfsc	status,2,c
  2140  000DDE  D016               	goto	u1940
  2141                           
  2142                           ; BSR set to: 0
  2143  000DE0  EE20 F004          	lfsr	2,4
  2144  000DE4  5163               	movf	fputc@fp& (0+255),w,b
  2145  000DE6  26D9               	addwf	fsr2l,f,c
  2146  000DE8  5164               	movf	(fputc@fp+1)& (0+255),w,b
  2147  000DEA  22DA               	addwfc	fsr2h,f,c
  2148  000DEC  EE10 F002          	lfsr	1,2
  2149  000DF0  5163               	movf	fputc@fp& (0+255),w,b
  2150  000DF2  26E1               	addwf	fsr1l,f,c
  2151  000DF4  5164               	movf	(fputc@fp+1)& (0+255),w,b
  2152  000DF6  22E2               	addwfc	fsr1h,f,c
  2153  000DF8  50DE               	movf	postinc2,w,c
  2154  000DFA  5CE6               	subwf	postinc1,w,c
  2155  000DFC  50E6               	movf	postinc1,w,c
  2156  000DFE  0A80               	xorlw	128
  2157  000E00  6F69               	movwf	(??_fputc+4)& (0+255),b
  2158  000E02  50DE               	movf	postinc2,w,c
  2159  000E04  0A80               	xorlw	128
  2160  000E06  5969               	subwfb	(??_fputc+4)& (0+255),w,b
  2161  000E08  B0D8               	btfsc	status,0,c
  2162  000E0A  0012               	return	
  2163  000E0C                     u1940:
  2164                           
  2165                           ; BSR set to: 0
  2166  000E0C  EE20 F002          	lfsr	2,2
  2167  000E10  5163               	movf	fputc@fp& (0+255),w,b
  2168  000E12  26D9               	addwf	fsr2l,f,c
  2169  000E14  5164               	movf	(fputc@fp+1)& (0+255),w,b
  2170  000E16  22DA               	addwfc	fsr2h,f,c
  2171  000E18  CFDE F065          	movff	postinc2,??_fputc
  2172  000E1C  CFDD F066          	movff	postdec2,??_fputc+1
  2173  000E20  C063  FFD9         	movff	fputc@fp,fsr2l
  2174  000E24  C064  FFDA         	movff	fputc@fp+1,fsr2h
  2175  000E28  CFDE F067          	movff	postinc2,??_fputc+2
  2176  000E2C  CFDD F068          	movff	postdec2,??_fputc+3
  2177  000E30  5165               	movf	??_fputc& (0+255),w,b
  2178  000E32  2567               	addwf	(??_fputc+2)& (0+255),w,b
  2179  000E34  6ED9               	movwf	fsr2l,c
  2180  000E36  5166               	movf	(??_fputc+1)& (0+255),w,b
  2181  000E38  2168               	addwfc	(??_fputc+3)& (0+255),w,b
  2182  000E3A  6EDA               	movwf	fsr2h,c
  2183  000E3C  C061  FFDF         	movff	fputc@c,indf2
  2184  000E40  EE20 F002          	lfsr	2,2
  2185  000E44  5163               	movf	fputc@fp& (0+255),w,b
  2186  000E46  26D9               	addwf	fsr2l,f,c
  2187  000E48  5164               	movf	(fputc@fp+1)& (0+255),w,b
  2188  000E4A  22DA               	addwfc	fsr2h,f,c
  2189  000E4C  2ADE               	incf	postinc2,f,c
  2190  000E4E  0E00               	movlw	0
  2191  000E50  22DD               	addwfc	postdec2,f,c
  2192  000E52  0012               	return		;funcret
  2193  000E54                     __end_of_fputc:
  2194                           	opt callstack 0
  2195                           
  2196 ;; *************** function _putch *****************
  2197 ;; Defined at:
  2198 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  c               1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  c               1    0[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2212 ;;      Params:         0       0       0       0
  2213 ;;      Locals:         0       0       0       0
  2214 ;;      Temps:          0       0       0       0
  2215 ;;      Totals:         0       0       0       0
  2216 ;;Total ram usage:        0 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    7
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_fputc
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text9
  2227  0017EA                     __ptext9:
  2228                           	opt callstack 0
  2229  0017EA                     _putch:
  2230                           	opt callstack 16
  2231                           
  2232                           ;incstack = 0
  2233  0017EA  0012               	return		;funcret
  2234  0017EC                     __end_of_putch:
  2235                           	opt callstack 0
  2236                           
  2237 ;; *************** function ___lomod *****************
  2238 ;; Defined at:
  2239 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  dividend        8    1[BANK0 ] unsigned long long 
  2242 ;;  divisor         8    9[BANK0 ] unsigned long long 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  counter         1   17[BANK0 ] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  8    1[BANK0 ] unsigned long long 
  2247 ;; Registers used:
  2248 ;;		wreg, status,2, status,0
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2254 ;;      Params:         0      16       0       0
  2255 ;;      Locals:         0       1       0       0
  2256 ;;      Temps:          0       0       0       0
  2257 ;;      Totals:         0      17       0       0
  2258 ;;Total ram usage:       17 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    7
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_utoa
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text10
  2269  000D02                     __ptext10:
  2270                           	opt callstack 0
  2271  000D02                     ___lomod:
  2272                           	opt callstack 19
  2273                           
  2274                           ;incstack = 0
  2275  000D02  0100               	movlb	0	; () banked
  2276  000D04  5169               	movf	___lomod@divisor& (0+255),w,b
  2277  000D06  116A               	iorwf	(___lomod@divisor+1)& (0+255),w,b
  2278  000D08  116B               	iorwf	(___lomod@divisor+2)& (0+255),w,b
  2279  000D0A  116C               	iorwf	(___lomod@divisor+3)& (0+255),w,b
  2280  000D0C  116D               	iorwf	(___lomod@divisor+4)& (0+255),w,b
  2281  000D0E  116E               	iorwf	(___lomod@divisor+5)& (0+255),w,b
  2282  000D10  116F               	iorwf	(___lomod@divisor+6)& (0+255),w,b
  2283  000D12  1170               	iorwf	(___lomod@divisor+7)& (0+255),w,b
  2284  000D14  B4D8               	btfsc	status,2,c
  2285  000D16  D03C               	goto	l806
  2286                           
  2287                           ; BSR set to: 0
  2288  000D18  0E01               	movlw	1
  2289  000D1A  6F71               	movwf	___lomod@counter& (0+255),b
  2290  000D1C  D00A               	goto	l2559
  2291  000D1E                     l2557:
  2292                           
  2293                           ; BSR set to: 0
  2294  000D1E  90D8               	bcf	status,0,c
  2295  000D20  3769               	rlcf	___lomod@divisor& (0+255),f,b
  2296  000D22  376A               	rlcf	(___lomod@divisor+1)& (0+255),f,b
  2297  000D24  376B               	rlcf	(___lomod@divisor+2)& (0+255),f,b
  2298  000D26  376C               	rlcf	(___lomod@divisor+3)& (0+255),f,b
  2299  000D28  376D               	rlcf	(___lomod@divisor+4)& (0+255),f,b
  2300  000D2A  376E               	rlcf	(___lomod@divisor+5)& (0+255),f,b
  2301  000D2C  376F               	rlcf	(___lomod@divisor+6)& (0+255),f,b
  2302  000D2E  3770               	rlcf	(___lomod@divisor+7)& (0+255),f,b
  2303  000D30  2B71               	incf	___lomod@counter& (0+255),f,b
  2304  000D32                     l2559:
  2305                           
  2306                           ; BSR set to: 0
  2307  000D32  AF70               	btfss	(___lomod@divisor+7)& (0+255),7,b
  2308  000D34  D7F4               	goto	l2557
  2309  000D36                     u2060:
  2310                           
  2311                           ; BSR set to: 0
  2312  000D36  5169               	movf	___lomod@divisor& (0+255),w,b
  2313  000D38  5D61               	subwf	___lomod@dividend& (0+255),w,b
  2314  000D3A  516A               	movf	(___lomod@divisor+1)& (0+255),w,b
  2315  000D3C  5962               	subwfb	(___lomod@dividend+1)& (0+255),w,b
  2316  000D3E  516B               	movf	(___lomod@divisor+2)& (0+255),w,b
  2317  000D40  5963               	subwfb	(___lomod@dividend+2)& (0+255),w,b
  2318  000D42  516C               	movf	(___lomod@divisor+3)& (0+255),w,b
  2319  000D44  5964               	subwfb	(___lomod@dividend+3)& (0+255),w,b
  2320  000D46  516D               	movf	(___lomod@divisor+4)& (0+255),w,b
  2321  000D48  5965               	subwfb	(___lomod@dividend+4)& (0+255),w,b
  2322  000D4A  516E               	movf	(___lomod@divisor+5)& (0+255),w,b
  2323  000D4C  5966               	subwfb	(___lomod@dividend+5)& (0+255),w,b
  2324  000D4E  516F               	movf	(___lomod@divisor+6)& (0+255),w,b
  2325  000D50  5967               	subwfb	(___lomod@dividend+6)& (0+255),w,b
  2326  000D52  5170               	movf	(___lomod@divisor+7)& (0+255),w,b
  2327  000D54  5968               	subwfb	(___lomod@dividend+7)& (0+255),w,b
  2328  000D56  A0D8               	btfss	status,0,c
  2329  000D58  D010               	goto	l2565
  2330                           
  2331                           ; BSR set to: 0
  2332  000D5A  5169               	movf	___lomod@divisor& (0+255),w,b
  2333  000D5C  5F61               	subwf	___lomod@dividend& (0+255),f,b
  2334  000D5E  516A               	movf	(___lomod@divisor+1)& (0+255),w,b
  2335  000D60  5B62               	subwfb	(___lomod@dividend+1)& (0+255),f,b
  2336  000D62  516B               	movf	(___lomod@divisor+2)& (0+255),w,b
  2337  000D64  5B63               	subwfb	(___lomod@dividend+2)& (0+255),f,b
  2338  000D66  516C               	movf	(___lomod@divisor+3)& (0+255),w,b
  2339  000D68  5B64               	subwfb	(___lomod@dividend+3)& (0+255),f,b
  2340  000D6A  516D               	movf	(___lomod@divisor+4)& (0+255),w,b
  2341  000D6C  5B65               	subwfb	(___lomod@dividend+4)& (0+255),f,b
  2342  000D6E  516E               	movf	(___lomod@divisor+5)& (0+255),w,b
  2343  000D70  5B66               	subwfb	(___lomod@dividend+5)& (0+255),f,b
  2344  000D72  516F               	movf	(___lomod@divisor+6)& (0+255),w,b
  2345  000D74  5B67               	subwfb	(___lomod@dividend+6)& (0+255),f,b
  2346  000D76  5170               	movf	(___lomod@divisor+7)& (0+255),w,b
  2347  000D78  5B68               	subwfb	(___lomod@dividend+7)& (0+255),f,b
  2348  000D7A                     l2565:
  2349                           
  2350                           ; BSR set to: 0
  2351  000D7A  90D8               	bcf	status,0,c
  2352  000D7C  3370               	rrcf	(___lomod@divisor+7)& (0+255),f,b
  2353  000D7E  336F               	rrcf	(___lomod@divisor+6)& (0+255),f,b
  2354  000D80  336E               	rrcf	(___lomod@divisor+5)& (0+255),f,b
  2355  000D82  336D               	rrcf	(___lomod@divisor+4)& (0+255),f,b
  2356  000D84  336C               	rrcf	(___lomod@divisor+3)& (0+255),f,b
  2357  000D86  336B               	rrcf	(___lomod@divisor+2)& (0+255),f,b
  2358  000D88  336A               	rrcf	(___lomod@divisor+1)& (0+255),f,b
  2359  000D8A  3369               	rrcf	___lomod@divisor& (0+255),f,b
  2360                           
  2361                           ; BSR set to: 0
  2362  000D8C  2F71               	decfsz	___lomod@counter& (0+255),f,b
  2363  000D8E  D7D3               	goto	u2060
  2364  000D90                     l806:
  2365                           
  2366                           ; BSR set to: 0
  2367  000D90  C061  F061         	movff	___lomod@dividend,?___lomod
  2368  000D94  C062  F062         	movff	___lomod@dividend+1,?___lomod+1
  2369  000D98  C063  F063         	movff	___lomod@dividend+2,?___lomod+2
  2370  000D9C  C064  F064         	movff	___lomod@dividend+3,?___lomod+3
  2371  000DA0  C065  F065         	movff	___lomod@dividend+4,?___lomod+4
  2372  000DA4  C066  F066         	movff	___lomod@dividend+5,?___lomod+5
  2373  000DA8  C067  F067         	movff	___lomod@dividend+6,?___lomod+6
  2374  000DAC  C068  F068         	movff	___lomod@dividend+7,?___lomod+7
  2375                           
  2376                           ; BSR set to: 0
  2377  000DB0  0012               	return		;funcret
  2378  000DB2                     __end_of___lomod:
  2379                           	opt callstack 0
  2380                           
  2381 ;; *************** function ___lodiv *****************
  2382 ;; Defined at:
  2383 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  dividend        8    1[BANK0 ] unsigned long long 
  2386 ;;  divisor         8    9[BANK0 ] unsigned long long 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  quotient        8   17[BANK0 ] unsigned long long 
  2389 ;;  counter         1   25[BANK0 ] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  8    1[BANK0 ] unsigned long long 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2399 ;;      Params:         0      16       0       0
  2400 ;;      Locals:         0       9       0       0
  2401 ;;      Temps:          0       0       0       0
  2402 ;;      Totals:         0      25       0       0
  2403 ;;Total ram usage:       25 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    7
  2406 ;; This function calls:
  2407 ;;		Nothing
  2408 ;; This function is called by:
  2409 ;;		_utoa
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text11
  2414  000C32                     __ptext11:
  2415                           	opt callstack 0
  2416  000C32                     ___lodiv:
  2417                           	opt callstack 19
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;incstack = 0
  2421  000C32  EE20  F071         	lfsr	2,___lodiv@quotient
  2422  000C36  0E07               	movlw	7
  2423  000C38                     u2011:
  2424  000C38  6ADE               	clrf	postinc2,c
  2425  000C3A  06E8               	decf	wreg,f,c
  2426  000C3C  E2FD               	bc	u2011
  2427  000C3E  0100               	movlb	0	; () banked
  2428  000C40  5169               	movf	___lodiv@divisor& (0+255),w,b
  2429  000C42  116A               	iorwf	(___lodiv@divisor+1)& (0+255),w,b
  2430  000C44  116B               	iorwf	(___lodiv@divisor+2)& (0+255),w,b
  2431  000C46  116C               	iorwf	(___lodiv@divisor+3)& (0+255),w,b
  2432  000C48  116D               	iorwf	(___lodiv@divisor+4)& (0+255),w,b
  2433  000C4A  116E               	iorwf	(___lodiv@divisor+5)& (0+255),w,b
  2434  000C4C  116F               	iorwf	(___lodiv@divisor+6)& (0+255),w,b
  2435  000C4E  1170               	iorwf	(___lodiv@divisor+7)& (0+255),w,b
  2436  000C50  B4D8               	btfsc	status,2,c
  2437  000C52  D046               	goto	l796
  2438                           
  2439                           ; BSR set to: 0
  2440  000C54  0E01               	movlw	1
  2441  000C56  6F79               	movwf	___lodiv@counter& (0+255),b
  2442  000C58  D00A               	goto	l2539
  2443  000C5A                     l2537:
  2444                           
  2445                           ; BSR set to: 0
  2446  000C5A  90D8               	bcf	status,0,c
  2447  000C5C  3769               	rlcf	___lodiv@divisor& (0+255),f,b
  2448  000C5E  376A               	rlcf	(___lodiv@divisor+1)& (0+255),f,b
  2449  000C60  376B               	rlcf	(___lodiv@divisor+2)& (0+255),f,b
  2450  000C62  376C               	rlcf	(___lodiv@divisor+3)& (0+255),f,b
  2451  000C64  376D               	rlcf	(___lodiv@divisor+4)& (0+255),f,b
  2452  000C66  376E               	rlcf	(___lodiv@divisor+5)& (0+255),f,b
  2453  000C68  376F               	rlcf	(___lodiv@divisor+6)& (0+255),f,b
  2454  000C6A  3770               	rlcf	(___lodiv@divisor+7)& (0+255),f,b
  2455  000C6C  2B79               	incf	___lodiv@counter& (0+255),f,b
  2456  000C6E                     l2539:
  2457                           
  2458                           ; BSR set to: 0
  2459  000C6E  AF70               	btfss	(___lodiv@divisor+7)& (0+255),7,b
  2460  000C70  D7F4               	goto	l2537
  2461  000C72                     u2030:
  2462                           
  2463                           ; BSR set to: 0
  2464  000C72  90D8               	bcf	status,0,c
  2465  000C74  3771               	rlcf	___lodiv@quotient& (0+255),f,b
  2466  000C76  3772               	rlcf	(___lodiv@quotient+1)& (0+255),f,b
  2467  000C78  3773               	rlcf	(___lodiv@quotient+2)& (0+255),f,b
  2468  000C7A  3774               	rlcf	(___lodiv@quotient+3)& (0+255),f,b
  2469  000C7C  3775               	rlcf	(___lodiv@quotient+4)& (0+255),f,b
  2470  000C7E  3776               	rlcf	(___lodiv@quotient+5)& (0+255),f,b
  2471  000C80  3777               	rlcf	(___lodiv@quotient+6)& (0+255),f,b
  2472  000C82  3778               	rlcf	(___lodiv@quotient+7)& (0+255),f,b
  2473                           
  2474                           ; BSR set to: 0
  2475  000C84  5169               	movf	___lodiv@divisor& (0+255),w,b
  2476  000C86  5D61               	subwf	___lodiv@dividend& (0+255),w,b
  2477  000C88  516A               	movf	(___lodiv@divisor+1)& (0+255),w,b
  2478  000C8A  5962               	subwfb	(___lodiv@dividend+1)& (0+255),w,b
  2479  000C8C  516B               	movf	(___lodiv@divisor+2)& (0+255),w,b
  2480  000C8E  5963               	subwfb	(___lodiv@dividend+2)& (0+255),w,b
  2481  000C90  516C               	movf	(___lodiv@divisor+3)& (0+255),w,b
  2482  000C92  5964               	subwfb	(___lodiv@dividend+3)& (0+255),w,b
  2483  000C94  516D               	movf	(___lodiv@divisor+4)& (0+255),w,b
  2484  000C96  5965               	subwfb	(___lodiv@dividend+4)& (0+255),w,b
  2485  000C98  516E               	movf	(___lodiv@divisor+5)& (0+255),w,b
  2486  000C9A  5966               	subwfb	(___lodiv@dividend+5)& (0+255),w,b
  2487  000C9C  516F               	movf	(___lodiv@divisor+6)& (0+255),w,b
  2488  000C9E  5967               	subwfb	(___lodiv@dividend+6)& (0+255),w,b
  2489  000CA0  5170               	movf	(___lodiv@divisor+7)& (0+255),w,b
  2490  000CA2  5968               	subwfb	(___lodiv@dividend+7)& (0+255),w,b
  2491  000CA4  A0D8               	btfss	status,0,c
  2492  000CA6  D011               	goto	l2549
  2493                           
  2494                           ; BSR set to: 0
  2495  000CA8  5169               	movf	___lodiv@divisor& (0+255),w,b
  2496  000CAA  5F61               	subwf	___lodiv@dividend& (0+255),f,b
  2497  000CAC  516A               	movf	(___lodiv@divisor+1)& (0+255),w,b
  2498  000CAE  5B62               	subwfb	(___lodiv@dividend+1)& (0+255),f,b
  2499  000CB0  516B               	movf	(___lodiv@divisor+2)& (0+255),w,b
  2500  000CB2  5B63               	subwfb	(___lodiv@dividend+2)& (0+255),f,b
  2501  000CB4  516C               	movf	(___lodiv@divisor+3)& (0+255),w,b
  2502  000CB6  5B64               	subwfb	(___lodiv@dividend+3)& (0+255),f,b
  2503  000CB8  516D               	movf	(___lodiv@divisor+4)& (0+255),w,b
  2504  000CBA  5B65               	subwfb	(___lodiv@dividend+4)& (0+255),f,b
  2505  000CBC  516E               	movf	(___lodiv@divisor+5)& (0+255),w,b
  2506  000CBE  5B66               	subwfb	(___lodiv@dividend+5)& (0+255),f,b
  2507  000CC0  516F               	movf	(___lodiv@divisor+6)& (0+255),w,b
  2508  000CC2  5B67               	subwfb	(___lodiv@dividend+6)& (0+255),f,b
  2509  000CC4  5170               	movf	(___lodiv@divisor+7)& (0+255),w,b
  2510  000CC6  5B68               	subwfb	(___lodiv@dividend+7)& (0+255),f,b
  2511                           
  2512                           ; BSR set to: 0
  2513  000CC8  8171               	bsf	___lodiv@quotient& (0+255),0,b
  2514  000CCA                     l2549:
  2515                           
  2516                           ; BSR set to: 0
  2517  000CCA  90D8               	bcf	status,0,c
  2518  000CCC  3370               	rrcf	(___lodiv@divisor+7)& (0+255),f,b
  2519  000CCE  336F               	rrcf	(___lodiv@divisor+6)& (0+255),f,b
  2520  000CD0  336E               	rrcf	(___lodiv@divisor+5)& (0+255),f,b
  2521  000CD2  336D               	rrcf	(___lodiv@divisor+4)& (0+255),f,b
  2522  000CD4  336C               	rrcf	(___lodiv@divisor+3)& (0+255),f,b
  2523  000CD6  336B               	rrcf	(___lodiv@divisor+2)& (0+255),f,b
  2524  000CD8  336A               	rrcf	(___lodiv@divisor+1)& (0+255),f,b
  2525  000CDA  3369               	rrcf	___lodiv@divisor& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528  000CDC  2F79               	decfsz	___lodiv@counter& (0+255),f,b
  2529  000CDE  D7C9               	goto	u2030
  2530  000CE0                     l796:
  2531                           
  2532                           ; BSR set to: 0
  2533  000CE0  C071  F061         	movff	___lodiv@quotient,?___lodiv
  2534  000CE4  C072  F062         	movff	___lodiv@quotient+1,?___lodiv+1
  2535  000CE8  C073  F063         	movff	___lodiv@quotient+2,?___lodiv+2
  2536  000CEC  C074  F064         	movff	___lodiv@quotient+3,?___lodiv+3
  2537  000CF0  C075  F065         	movff	___lodiv@quotient+4,?___lodiv+4
  2538  000CF4  C076  F066         	movff	___lodiv@quotient+5,?___lodiv+5
  2539  000CF8  C077  F067         	movff	___lodiv@quotient+6,?___lodiv+6
  2540  000CFC  C078  F068         	movff	___lodiv@quotient+7,?___lodiv+7
  2541                           
  2542                           ; BSR set to: 0
  2543  000D00  0012               	return		;funcret
  2544  000D02                     __end_of___lodiv:
  2545                           	opt callstack 0
  2546                           
  2547 ;; *************** function _setup *****************
  2548 ;; Defined at:
  2549 ;;		line 33 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2563 ;;      Params:         0       0       0       0
  2564 ;;      Locals:         0       0       0       0
  2565 ;;      Temps:          0       0       0       0
  2566 ;;      Totals:         0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:   11
  2570 ;; This function calls:
  2571 ;;		_initPWM
  2572 ;;		_init_LCD
  2573 ;;		_init_RFID
  2574 ;;		_init_sensors
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text12
  2581  00165C                     __ptext12:
  2582                           	opt callstack 0
  2583  00165C                     _setup:
  2584                           	opt callstack 19
  2585                           
  2586                           ;main.c: 36:     OSCCON = 0x72;
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;incstack = 0
  2590  00165C  0E72               	movlw	114
  2591  00165E  6ED3               	movwf	4051,c	;volatile
  2592  001660                     l61:
  2593  001660  A4D3               	btfss	4051,2,c	;volatile
  2594  001662  D7FE               	goto	l61
  2595                           
  2596                           ;main.c: 38:     INTCONbits.GIEH = 1;
  2597  001664  8EF2               	bsf	4082,7,c	;volatile
  2598                           
  2599                           ;main.c: 39:     INTCONbits.GIEL = 1;
  2600  001666  8CF2               	bsf	4082,6,c	;volatile
  2601                           
  2602                           ;main.c: 40:     RCONbits.IPEN=1;
  2603  001668  8ED0               	bsf	4048,7,c	;volatile
  2604                           
  2605                           ;main.c: 43:     init_LCD();
  2606  00166A  EC42  F005         	call	_init_LCD	;wreg free
  2607                           
  2608                           ;main.c: 44:     init_RFID();
  2609  00166E  ECCD  F00B         	call	_init_RFID	;wreg free
  2610                           
  2611                           ;main.c: 45:     init_sensors();
  2612  001672  ECB0  F00B         	call	_init_sensors	;wreg free
  2613                           
  2614                           ;main.c: 46:     initPWM(199);
  2615  001676  0E00               	movlw	0
  2616  001678  0100               	movlb	0	; () banked
  2617  00167A  6F62               	movwf	(initPWM@PWMperiod+1)& (0+255),b
  2618  00167C  0EC7               	movlw	199
  2619  00167E  6F61               	movwf	initPWM@PWMperiod& (0+255),b
  2620  001680  ECBF  F00B         	call	_initPWM	;wreg free
  2621                           
  2622                           ;main.c: 48:     TRISBbits.RB0 = 0;
  2623  001684  9093               	bcf	3987,0,c	;volatile
  2624                           
  2625                           ;main.c: 49:     TRISBbits.RB2 = 0;
  2626  001686  9493               	bcf	3987,2,c	;volatile
  2627                           
  2628                           ;main.c: 50:     TRISDbits.RD2 = 1;
  2629  001688  8495               	bsf	3989,2,c	;volatile
  2630  00168A  0012               	return		;funcret
  2631  00168C                     __end_of_setup:
  2632                           	opt callstack 0
  2633                           
  2634 ;; *************** function _init_sensors *****************
  2635 ;; Defined at:
  2636 ;;		line 14 in file "signal_processing.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;		None
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2650 ;;      Params:         0       0       0       0
  2651 ;;      Locals:         0       0       0       0
  2652 ;;      Temps:          0       0       0       0
  2653 ;;      Totals:         0       0       0       0
  2654 ;;Total ram usage:        0 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    7
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_setup
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text13
  2665  001760                     __ptext13:
  2666                           	opt callstack 0
  2667  001760                     _init_sensors:
  2668                           	opt callstack 22
  2669                           
  2670                           ;signal_processing.c: 16:     T5CON =0b00011001;
  2671                           
  2672                           ;incstack = 0
  2673  001760  0E19               	movlw	25
  2674  001762  6EB7               	movwf	4023,c	;volatile
  2675                           
  2676                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2677  001764  8492               	bsf	3986,2,c	;volatile
  2678                           
  2679                           ;signal_processing.c: 18:     TRISAbits.RA3 = 1;
  2680  001766  8692               	bsf	3986,3,c	;volatile
  2681                           
  2682                           ;signal_processing.c: 21:     ANSEL0 = 0;
  2683  001768  0E00               	movlw	0
  2684  00176A  6EB8               	movwf	4024,c	;volatile
  2685                           
  2686                           ;signal_processing.c: 22:     ANSEL1 = 0;
  2687  00176C  0E00               	movlw	0
  2688  00176E  6EB9               	movwf	4025,c	;volatile
  2689                           
  2690                           ;signal_processing.c: 24:     DFLTCON = 0b00011000;
  2691  001770  0E18               	movlw	24
  2692  001772  6E60               	movwf	3936,c	;volatile
  2693                           
  2694                           ;signal_processing.c: 25:     CAP1CON = 0b01000110;
  2695  001774  0E46               	movlw	70
  2696  001776  6E63               	movwf	3939,c	;volatile
  2697                           
  2698                           ;signal_processing.c: 26:     CAP2CON = 0b01000110;
  2699  001778  0E46               	movlw	70
  2700  00177A  6E62               	movwf	3938,c	;volatile
  2701  00177C  0012               	return		;funcret
  2702  00177E                     __end_of_init_sensors:
  2703                           	opt callstack 0
  2704                           
  2705 ;; *************** function _init_RFID *****************
  2706 ;; Defined at:
  2707 ;;		line 13 in file "RFID.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2721 ;;      Params:         0       0       0       0
  2722 ;;      Locals:         0       0       0       0
  2723 ;;      Temps:          0       0       0       0
  2724 ;;      Totals:         0       0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    7
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_setup
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text14
  2736  00179A                     __ptext14:
  2737                           	opt callstack 0
  2738  00179A                     _init_RFID:
  2739                           	opt callstack 22
  2740                           
  2741                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2742                           
  2743                           ;incstack = 0
  2744  00179A  8E94               	bsf	3988,7,c	;volatile
  2745                           
  2746                           ;RFID.c: 19:     SPBRG = 203;
  2747  00179C  0ECB               	movlw	203
  2748  00179E  6EAF               	movwf	4015,c	;volatile
  2749                           
  2750                           ;RFID.c: 20:     SPBRGH = 0;
  2751  0017A0  0E00               	movlw	0
  2752  0017A2  6EB0               	movwf	4016,c	;volatile
  2753                           
  2754                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2755  0017A4  86AA               	bsf	4010,3,c	;volatile
  2756                           
  2757                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2758  0017A6  84AC               	bsf	4012,2,c	;volatile
  2759                           
  2760                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2761  0017A8  88AB               	bsf	4011,4,c	;volatile
  2762                           
  2763                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2764  0017AA  8EAB               	bsf	4011,7,c	;volatile
  2765                           
  2766                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2767  0017AC  8AAC               	bsf	4012,5,c	;volatile
  2768                           
  2769                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2770  0017AE  8A9D               	bsf	3997,5,c	;volatile
  2771                           
  2772                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2773  0017B0  8A9F               	bsf	3999,5,c	;volatile
  2774  0017B2  0012               	return		;funcret
  2775  0017B4                     __end_of_init_RFID:
  2776                           	opt callstack 0
  2777                           
  2778 ;; *************** function _init_LCD *****************
  2779 ;; Defined at:
  2780 ;;		line 56 in file "LCDIO.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2794 ;;      Params:         0       0       0       0
  2795 ;;      Locals:         0       0       0       0
  2796 ;;      Temps:          0       1       0       0
  2797 ;;      Totals:         0       1       0       0
  2798 ;;Total ram usage:        1 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:   10
  2801 ;; This function calls:
  2802 ;;		_LCDout
  2803 ;;		_SendLCD
  2804 ;; This function is called by:
  2805 ;;		_setup
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text15
  2810  000A84                     __ptext15:
  2811                           	opt callstack 0
  2812  000A84                     _init_LCD:
  2813                           	opt callstack 19
  2814                           
  2815                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2816                           
  2817                           ;incstack = 0
  2818  000A84  9094               	bcf	3988,0,c	;volatile
  2819                           
  2820                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2821  000A86  9E92               	bcf	3986,7,c	;volatile
  2822                           
  2823                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2824  000A88  9694               	bcf	3988,3,c	;volatile
  2825                           
  2826                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2827  000A8A  9095               	bcf	3989,0,c	;volatile
  2828                           
  2829                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2830  000A8C  9295               	bcf	3989,1,c	;volatile
  2831                           
  2832                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2833  000A8E  9C92               	bcf	3986,6,c	;volatile
  2834                           
  2835                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2836  000A90  908C               	bcf	3980,0,c	;volatile
  2837                           
  2838                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2839  000A92  928C               	bcf	3980,1,c	;volatile
  2840                           
  2841                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2842  000A94  968B               	bcf	3979,3,c	;volatile
  2843                           
  2844                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2845  000A96  908B               	bcf	3979,0,c	;volatile
  2846                           
  2847                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2848  000A98  9C89               	bcf	3977,6,c	;volatile
  2849                           
  2850                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2851  000A9A  9E89               	bcf	3977,7,c	;volatile
  2852                           
  2853                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2854  000A9C  0E27               	movlw	39
  2855  000A9E  0100               	movlb	0	; () banked
  2856  000AA0  6F65               	movwf	??_init_LCD& (0+255),b
  2857  000AA2  0EF5               	movlw	245
  2858  000AA4                     u2887:
  2859  000AA4  2EE8               	decfsz	wreg,f,c
  2860  000AA6  D7FE               	bra	u2887
  2861  000AA8  2F65               	decfsz	??_init_LCD& (0+255),f,b
  2862  000AAA  D7FC               	bra	u2887
  2863                           
  2864                           ;LCDIO.c: 76:  LCDout(0b0011);
  2865  000AAC  0E03               	movlw	3
  2866  000AAE  ECD3  F008         	call	_LCDout
  2867                           
  2868                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2869  000AB2  0E0D               	movlw	13
  2870  000AB4  0100               	movlb	0	; () banked
  2871  000AB6  6F65               	movwf	??_init_LCD& (0+255),b
  2872  000AB8  0EFB               	movlw	251
  2873  000ABA                     u2897:
  2874  000ABA  2EE8               	decfsz	wreg,f,c
  2875  000ABC  D7FE               	bra	u2897
  2876  000ABE  2F65               	decfsz	??_init_LCD& (0+255),f,b
  2877  000AC0  D7FC               	bra	u2897
  2878  000AC2  D000               	nop2	
  2879                           
  2880                           ;LCDIO.c: 78:  LCDout(0b0011);
  2881  000AC4  0E03               	movlw	3
  2882  000AC6  ECD3  F008         	call	_LCDout
  2883                           
  2884                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2885  000ACA  0E85               	movlw	133
  2886  000ACC                     u2907:
  2887  000ACC  2EE8               	decfsz	wreg,f,c
  2888  000ACE  D7FE               	bra	u2907
  2889  000AD0  F000               	nop	
  2890                           
  2891                           ;LCDIO.c: 80:  LCDout(0b0011);
  2892  000AD2  0E03               	movlw	3
  2893  000AD4  ECD3  F008         	call	_LCDout
  2894                           
  2895                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2896  000AD8  0E21               	movlw	33
  2897  000ADA                     u2917:
  2898  000ADA  2EE8               	decfsz	wreg,f,c
  2899  000ADC  D7FE               	bra	u2917
  2900  000ADE  F000               	nop	
  2901                           
  2902                           ;LCDIO.c: 82:  LCDout(0b0010);
  2903  000AE0  0E02               	movlw	2
  2904  000AE2  ECD3  F008         	call	_LCDout
  2905                           
  2906                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2907  000AE6  0E21               	movlw	33
  2908  000AE8                     u2927:
  2909  000AE8  2EE8               	decfsz	wreg,f,c
  2910  000AEA  D7FE               	bra	u2927
  2911  000AEC  F000               	nop	
  2912                           
  2913                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2914  000AEE  0E00               	movlw	0
  2915  000AF0  0100               	movlb	0	; () banked
  2916  000AF2  6F63               	movwf	SendLCD@type& (0+255),b
  2917  000AF4  0E28               	movlw	40
  2918  000AF6  ECDE  F00A         	call	_SendLCD
  2919                           
  2920                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2921  000AFA  0E21               	movlw	33
  2922  000AFC                     u2937:
  2923  000AFC  2EE8               	decfsz	wreg,f,c
  2924  000AFE  D7FE               	bra	u2937
  2925  000B00  F000               	nop	
  2926                           
  2927                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2928  000B02  0E00               	movlw	0
  2929  000B04  0100               	movlb	0	; () banked
  2930  000B06  6F63               	movwf	SendLCD@type& (0+255),b
  2931  000B08  0E08               	movlw	8
  2932  000B0A  ECDE  F00A         	call	_SendLCD
  2933                           
  2934                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2935  000B0E  0E21               	movlw	33
  2936  000B10                     u2947:
  2937  000B10  2EE8               	decfsz	wreg,f,c
  2938  000B12  D7FE               	bra	u2947
  2939  000B14  F000               	nop	
  2940                           
  2941                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2942  000B16  0E00               	movlw	0
  2943  000B18  0100               	movlb	0	; () banked
  2944  000B1A  6F63               	movwf	SendLCD@type& (0+255),b
  2945  000B1C  0E01               	movlw	1
  2946  000B1E  ECDE  F00A         	call	_SendLCD
  2947                           
  2948                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2949  000B22  0E0D               	movlw	13
  2950  000B24  0100               	movlb	0	; () banked
  2951  000B26  6F65               	movwf	??_init_LCD& (0+255),b
  2952  000B28  0EFB               	movlw	251
  2953  000B2A                     u2957:
  2954  000B2A  2EE8               	decfsz	wreg,f,c
  2955  000B2C  D7FE               	bra	u2957
  2956  000B2E  2F65               	decfsz	??_init_LCD& (0+255),f,b
  2957  000B30  D7FC               	bra	u2957
  2958  000B32  D000               	nop2	
  2959                           
  2960                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2961  000B34  0E00               	movlw	0
  2962  000B36  0100               	movlb	0	; () banked
  2963  000B38  6F63               	movwf	SendLCD@type& (0+255),b
  2964  000B3A  0E06               	movlw	6
  2965  000B3C  ECDE  F00A         	call	_SendLCD
  2966                           
  2967                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2968  000B40  0E21               	movlw	33
  2969  000B42                     u2967:
  2970  000B42  2EE8               	decfsz	wreg,f,c
  2971  000B44  D7FE               	bra	u2967
  2972  000B46  F000               	nop	
  2973                           
  2974                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2975  000B48  0E00               	movlw	0
  2976  000B4A  0100               	movlb	0	; () banked
  2977  000B4C  6F63               	movwf	SendLCD@type& (0+255),b
  2978  000B4E  0E0C               	movlw	12
  2979  000B50  ECDE  F00A         	call	_SendLCD
  2980                           
  2981                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2982  000B54  0E21               	movlw	33
  2983  000B56                     u2977:
  2984  000B56  2EE8               	decfsz	wreg,f,c
  2985  000B58  D7FE               	bra	u2977
  2986  000B5A  F000               	nop	
  2987  000B5C  0012               	return		;funcret
  2988  000B5E                     __end_of_init_LCD:
  2989                           	opt callstack 0
  2990                           
  2991 ;; *************** function _initPWM *****************
  2992 ;; Defined at:
  2993 ;;		line 5 in file "dc_motor.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  PWMperiod       2    1[BANK0 ] int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3007 ;;      Params:         0       2       0       0
  3008 ;;      Locals:         0       0       0       0
  3009 ;;      Temps:          0       0       0       0
  3010 ;;      Totals:         0       2       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    7
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_setup
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text16
  3022  00177E                     __ptext16:
  3023                           	opt callstack 0
  3024  00177E                     _initPWM:
  3025                           	opt callstack 22
  3026                           
  3027                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  3028                           
  3029                           ;incstack = 0
  3030  00177E  0E00               	movlw	0
  3031  001780  6E7F               	movwf	3967,c	;volatile
  3032                           
  3033                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  3034  001782  0E80               	movlw	128
  3035  001784  6E7E               	movwf	3966,c	;volatile
  3036                           
  3037                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  3038  001786  0E6F               	movlw	111
  3039  001788  6E6F               	movwf	3951,c	;volatile
  3040                           
  3041                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  3042  00178A  0E00               	movlw	0
  3043  00178C  6E6E               	movwf	3950,c	;volatile
  3044                           
  3045                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  3046  00178E  C061  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  3047                           
  3048                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  3049  001792  0100               	movlb	0	; () banked
  3050  001794  5162               	movf	(initPWM@PWMperiod+1)& (0+255),w,b
  3051  001796  6E7A               	movwf	3962,c	;volatile
  3052                           
  3053                           ; BSR set to: 0
  3054  001798  0012               	return		;funcret
  3055  00179A                     __end_of_initPWM:
  3056                           	opt callstack 0
  3057                           
  3058 ;; *************** function _process_signal *****************
  3059 ;; Defined at:
  3060 ;;		line 32 in file "signal_processing.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  S               2   15[BANK0 ] PTR struct Sensor
  3063 ;;		 -> main@sensorR(4), main@sensorL(4), 
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;  smoothing_co    1    0        unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3075 ;;      Params:         0       2       0       0
  3076 ;;      Locals:         0       1       0       0
  3077 ;;      Temps:          0       0       0       0
  3078 ;;      Totals:         0       3       0       0
  3079 ;;Total ram usage:        3 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    8
  3082 ;; This function calls:
  3083 ;;		___awdiv
  3084 ;;		___wmul
  3085 ;; This function is called by:
  3086 ;;		_main
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text17
  3091  000EF2                     __ptext17:
  3092                           	opt callstack 0
  3093  000EF2                     _process_signal:
  3094                           	opt callstack 22
  3095                           
  3096                           ;signal_processing.c: 36:     S->smoothed_signal *= (100-smoothing_constant)/100;
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;incstack = 0
  3100  000EF2  0100               	movlb	0	; () banked
  3101  000EF4  EE20 F002          	lfsr	2,2
  3102  000EF8  516F               	movf	process_signal@S& (0+255),w,b
  3103  000EFA  26D9               	addwf	fsr2l,f,c
  3104  000EFC  5170               	movf	(process_signal@S+1)& (0+255),w,b
  3105  000EFE  22DA               	addwfc	fsr2h,f,c
  3106  000F00  CFDE F069          	movff	postinc2,___wmul@multiplier
  3107  000F04  CFDD F06A          	movff	postdec2,___wmul@multiplier+1
  3108  000F08  0E00               	movlw	0
  3109  000F0A  6F64               	movwf	(___awdiv@divisor+1)& (0+255),b
  3110  000F0C  0E64               	movlw	100
  3111  000F0E  6F63               	movwf	___awdiv@divisor& (0+255),b
  3112  000F10  0E00               	movlw	0
  3113  000F12  6F62               	movwf	(___awdiv@dividend+1)& (0+255),b
  3114  000F14  0E32               	movlw	50
  3115  000F16  6F61               	movwf	___awdiv@dividend& (0+255),b
  3116  000F18  EC90  F008         	call	___awdiv	;wreg free
  3117  000F1C  C061  F06B         	movff	?___awdiv,___wmul@multiplicand
  3118  000F20  C062  F06C         	movff	?___awdiv+1,___wmul@multiplicand+1
  3119  000F24  EC8C  F00B         	call	___wmul	;wreg free
  3120  000F28  0100               	movlb	0	; () banked
  3121  000F2A  EE20 F002          	lfsr	2,2
  3122  000F2E  516F               	movf	process_signal@S& (0+255),w,b
  3123  000F30  26D9               	addwf	fsr2l,f,c
  3124  000F32  5170               	movf	(process_signal@S+1)& (0+255),w,b
  3125  000F34  22DA               	addwfc	fsr2h,f,c
  3126  000F36  C069  FFDE         	movff	?___wmul,postinc2
  3127  000F3A  C06A  FFDD         	movff	?___wmul+1,postdec2
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;signal_processing.c: 37:     S->smoothed_signal += (S->raw_data * smoothing_constant)/1
      +                          00;
  3131  000F3E  0E00               	movlw	0
  3132  000F40  6F6A               	movwf	(___wmul@multiplier+1)& (0+255),b
  3133  000F42  0E32               	movlw	50
  3134  000F44  6F69               	movwf	___wmul@multiplier& (0+255),b
  3135  000F46  C06F  FFD9         	movff	process_signal@S,fsr2l
  3136  000F4A  C070  FFDA         	movff	process_signal@S+1,fsr2h
  3137  000F4E  CFDE F06B          	movff	postinc2,___wmul@multiplicand
  3138  000F52  CFDD F06C          	movff	postdec2,___wmul@multiplicand+1
  3139  000F56  EC8C  F00B         	call	___wmul	;wreg free
  3140  000F5A  C069  F061         	movff	?___wmul,___awdiv@dividend
  3141  000F5E  C06A  F062         	movff	?___wmul+1,___awdiv@dividend+1
  3142  000F62  0E00               	movlw	0
  3143  000F64  0100               	movlb	0	; () banked
  3144  000F66  6F64               	movwf	(___awdiv@divisor+1)& (0+255),b
  3145  000F68  0E64               	movlw	100
  3146  000F6A  6F63               	movwf	___awdiv@divisor& (0+255),b
  3147  000F6C  EC90  F008         	call	___awdiv	;wreg free
  3148  000F70  0100               	movlb	0	; () banked
  3149  000F72  EE20 F002          	lfsr	2,2
  3150  000F76  516F               	movf	process_signal@S& (0+255),w,b
  3151  000F78  26D9               	addwf	fsr2l,f,c
  3152  000F7A  5170               	movf	(process_signal@S+1)& (0+255),w,b
  3153  000F7C  22DA               	addwfc	fsr2h,f,c
  3154  000F7E  5161               	movf	?___awdiv& (0+255),w,b
  3155  000F80  26DE               	addwf	postinc2,f,c
  3156  000F82  5162               	movf	(?___awdiv+1)& (0+255),w,b
  3157  000F84  22DD               	addwfc	postdec2,f,c
  3158                           
  3159                           ; BSR set to: 0
  3160  000F86  0012               	return		;funcret
  3161  000F88                     __end_of_process_signal:
  3162                           	opt callstack 0
  3163                           
  3164 ;; *************** function _moveToBeacon *****************
  3165 ;; Defined at:
  3166 ;;		line 117 in file "dc_motor.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  beacon_locat    1    wreg     unsigned char 
  3169 ;;  mL              2   31[BANK0 ] PTR struct DC_motor
  3170 ;;		 -> main@motorR(9), main@motorL(9), 
  3171 ;;  mR              2   33[BANK0 ] PTR struct DC_motor
  3172 ;;		 -> main@motorR(9), main@motorL(9), 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  beacon_locat    1   35[BANK0 ] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3184 ;;      Params:         0       4       0       0
  3185 ;;      Locals:         0       1       0       0
  3186 ;;      Temps:          0       0       0       0
  3187 ;;      Totals:         0       5       0       0
  3188 ;;Total ram usage:        5 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:   10
  3191 ;; This function calls:
  3192 ;;		_fullSpeedAhead
  3193 ;;		_stop
  3194 ;;		_turnLeft
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text18
  3201  000F88                     __ptext18:
  3202                           	opt callstack 0
  3203  000F88                     _moveToBeacon:
  3204                           	opt callstack 20
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;incstack = 0
  3208                           ;moveToBeacon@beacon_location stored from wreg
  3209  000F88  0100               	movlb	0	; () banked
  3210  000F8A  6F83               	movwf	moveToBeacon@beacon_location& (0+255),b
  3211                           
  3212                           ;dc_motor.c: 125:     if(beacon_location == 1)
  3213  000F8C  0100               	movlb	0	; () banked
  3214  000F8E  0583               	decf	moveToBeacon@beacon_location& (0+255),w,b
  3215  000F90  A4D8               	btfss	status,2,c
  3216  000F92  D015               	goto	l3025
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;dc_motor.c: 126:     {;dc_motor.c: 127:         stop(&mL,&mR);
  3220  000F94  0E7F               	movlw	low moveToBeacon@mL
  3221  000F96  6F78               	movwf	stop@mL& (0+255),b
  3222  000F98  0E00               	movlw	high moveToBeacon@mL
  3223  000F9A  6F79               	movwf	(stop@mL+1)& (0+255),b
  3224  000F9C  0E81               	movlw	low moveToBeacon@mR
  3225  000F9E  6F7A               	movwf	stop@mR& (0+255),b
  3226  000FA0  0E00               	movlw	high moveToBeacon@mR
  3227  000FA2  6F7B               	movwf	(stop@mR+1)& (0+255),b
  3228  000FA4  EC78  F00A         	call	_stop	;wreg free
  3229                           
  3230                           ;dc_motor.c: 128:         turnLeft(&mL, &mR);
  3231  000FA8  0E7F               	movlw	low moveToBeacon@mL
  3232  000FAA  0100               	movlb	0	; () banked
  3233  000FAC  6F78               	movwf	turnLeft@mL& (0+255),b
  3234  000FAE  0E00               	movlw	high moveToBeacon@mL
  3235  000FB0  6F79               	movwf	(turnLeft@mL+1)& (0+255),b
  3236  000FB2  0E81               	movlw	low moveToBeacon@mR
  3237  000FB4  6F7A               	movwf	turnLeft@mR& (0+255),b
  3238  000FB6  0E00               	movlw	high moveToBeacon@mR
  3239  000FB8  6F7B               	movwf	(turnLeft@mR+1)& (0+255),b
  3240  000FBA  EC4D  F008         	call	_turnLeft	;wreg free
  3241  000FBE                     l3025:
  3242                           
  3243                           ;dc_motor.c: 131:     if(beacon_location == 2)
  3244  000FBE  0E02               	movlw	2
  3245  000FC0  0100               	movlb	0	; () banked
  3246  000FC2  1983               	xorwf	moveToBeacon@beacon_location& (0+255),w,b
  3247  000FC4  A4D8               	btfss	status,2,c
  3248  000FC6  D015               	goto	l3029
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;dc_motor.c: 132:     {;dc_motor.c: 133:         stop(&mL,&mR);
  3252  000FC8  0E7F               	movlw	low moveToBeacon@mL
  3253  000FCA  6F78               	movwf	stop@mL& (0+255),b
  3254  000FCC  0E00               	movlw	high moveToBeacon@mL
  3255  000FCE  6F79               	movwf	(stop@mL+1)& (0+255),b
  3256  000FD0  0E81               	movlw	low moveToBeacon@mR
  3257  000FD2  6F7A               	movwf	stop@mR& (0+255),b
  3258  000FD4  0E00               	movlw	high moveToBeacon@mR
  3259  000FD6  6F7B               	movwf	(stop@mR+1)& (0+255),b
  3260  000FD8  EC78  F00A         	call	_stop	;wreg free
  3261                           
  3262                           ;dc_motor.c: 134:         turnLeft(&mL, &mR);
  3263  000FDC  0E7F               	movlw	low moveToBeacon@mL
  3264  000FDE  0100               	movlb	0	; () banked
  3265  000FE0  6F78               	movwf	turnLeft@mL& (0+255),b
  3266  000FE2  0E00               	movlw	high moveToBeacon@mL
  3267  000FE4  6F79               	movwf	(turnLeft@mL+1)& (0+255),b
  3268  000FE6  0E81               	movlw	low moveToBeacon@mR
  3269  000FE8  6F7A               	movwf	turnLeft@mR& (0+255),b
  3270  000FEA  0E00               	movlw	high moveToBeacon@mR
  3271  000FEC  6F7B               	movwf	(turnLeft@mR+1)& (0+255),b
  3272  000FEE  EC4D  F008         	call	_turnLeft	;wreg free
  3273  000FF2                     l3029:
  3274                           
  3275                           ;dc_motor.c: 137:     if(beacon_location == 3)
  3276  000FF2  0E03               	movlw	3
  3277  000FF4  0100               	movlb	0	; () banked
  3278  000FF6  1983               	xorwf	moveToBeacon@beacon_location& (0+255),w,b
  3279  000FF8  A4D8               	btfss	status,2,c
  3280  000FFA  0012               	return	
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;dc_motor.c: 138:     {;dc_motor.c: 140:         fullSpeedAhead(&mL,&mR);
  3284  000FFC  0E7F               	movlw	low moveToBeacon@mL
  3285  000FFE  6F78               	movwf	fullSpeedAhead@mL& (0+255),b
  3286  001000  0E00               	movlw	high moveToBeacon@mL
  3287  001002  6F79               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  3288  001004  0E81               	movlw	low moveToBeacon@mR
  3289  001006  6F7A               	movwf	fullSpeedAhead@mR& (0+255),b
  3290  001008  0E00               	movlw	high moveToBeacon@mR
  3291  00100A  6F7B               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  3292  00100C  EC8A  F009         	call	_fullSpeedAhead	;wreg free
  3293  001010  0012               	return		;funcret
  3294  001012                     __end_of_moveToBeacon:
  3295                           	opt callstack 0
  3296                           
  3297 ;; *************** function _turnLeft *****************
  3298 ;; Defined at:
  3299 ;;		line 70 in file "dc_motor.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  mL              2   24[BANK0 ] PTR struct DC_motor
  3302 ;;		 -> moveToBeacon@mL(2), 
  3303 ;;  mR              2   26[BANK0 ] PTR struct DC_motor
  3304 ;;		 -> moveToBeacon@mR(2), 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  i               2   29[BANK0 ] int 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3316 ;;      Params:         0       4       0       0
  3317 ;;      Locals:         0       2       0       0
  3318 ;;      Temps:          0       1       0       0
  3319 ;;      Totals:         0       7       0       0
  3320 ;;Total ram usage:        7 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    9
  3323 ;; This function calls:
  3324 ;;		_setMotorPWM
  3325 ;; This function is called by:
  3326 ;;		_moveToBeacon
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text19
  3331  00109A                     __ptext19:
  3332                           	opt callstack 0
  3333  00109A                     _turnLeft:
  3334                           	opt callstack 20
  3335                           
  3336                           ;dc_motor.c: 70: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 71:
      +                           {;dc_motor.c: 72:     mL->direction = 0;
  3337                           
  3338                           ;incstack = 0
  3339  00109A  0100               	movlb	0	; () banked
  3340  00109C  EE20 F001          	lfsr	2,1
  3341  0010A0  5178               	movf	turnLeft@mL& (0+255),w,b
  3342  0010A2  26D9               	addwf	fsr2l,f,c
  3343  0010A4  5179               	movf	(turnLeft@mL+1)& (0+255),w,b
  3344  0010A6  22DA               	addwfc	fsr2h,f,c
  3345  0010A8  0E00               	movlw	0
  3346  0010AA  6EDF               	movwf	indf2,c
  3347                           
  3348                           ;dc_motor.c: 73:     mR->direction = 1;
  3349  0010AC  EE20 F001          	lfsr	2,1
  3350  0010B0  517A               	movf	turnLeft@mR& (0+255),w,b
  3351  0010B2  26D9               	addwf	fsr2l,f,c
  3352  0010B4  517B               	movf	(turnLeft@mR+1)& (0+255),w,b
  3353  0010B6  22DA               	addwfc	fsr2h,f,c
  3354  0010B8  0E01               	movlw	1
  3355  0010BA  6EDF               	movwf	indf2,c
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;dc_motor.c: 75:     for(int i = 0; i<=100;i++){
  3359  0010BC  0E00               	movlw	0
  3360  0010BE  6F7E               	movwf	(turnLeft@i+1)& (0+255),b
  3361  0010C0  0E00               	movlw	0
  3362  0010C2  6F7D               	movwf	turnLeft@i& (0+255),b
  3363  0010C4                     l2817:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;dc_motor.c: 76:         mL->power = i;
  3367  0010C4  C078  FFD9         	movff	turnLeft@mL,fsr2l
  3368  0010C8  C079  FFDA         	movff	turnLeft@mL+1,fsr2h
  3369  0010CC  C07D  FFDF         	movff	turnLeft@i,indf2
  3370                           
  3371                           ;dc_motor.c: 77:         mR->power = i;
  3372  0010D0  C07A  FFD9         	movff	turnLeft@mR,fsr2l
  3373  0010D4  C07B  FFDA         	movff	turnLeft@mR+1,fsr2h
  3374  0010D8  C07D  FFDF         	movff	turnLeft@i,indf2
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;dc_motor.c: 79:         setMotorPWM(mL);
  3378  0010DC  C078  F06F         	movff	turnLeft@mL,setMotorPWM@m
  3379  0010E0  C079  F070         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3380  0010E4  ECAB  F004         	call	_setMotorPWM	;wreg free
  3381                           
  3382                           ;dc_motor.c: 80:         setMotorPWM(mR);
  3383  0010E8  C07A  F06F         	movff	turnLeft@mR,setMotorPWM@m
  3384  0010EC  C07B  F070         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3385  0010F0  ECAB  F004         	call	_setMotorPWM	;wreg free
  3386                           
  3387                           ;dc_motor.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3388  0010F4  0E03               	movlw	3
  3389  0010F6  0100               	movlb	0	; () banked
  3390  0010F8  6F7C               	movwf	??_turnLeft& (0+255),b
  3391  0010FA  0E97               	movlw	151
  3392  0010FC                     u2987:
  3393  0010FC  2EE8               	decfsz	wreg,f,c
  3394  0010FE  D7FE               	bra	u2987
  3395  001100  2F7C               	decfsz	??_turnLeft& (0+255),f,b
  3396  001102  D7FC               	bra	u2987
  3397  001104  D000               	nop2	
  3398                           
  3399                           ;dc_motor.c: 82:     }
  3400  001106  0100               	movlb	0	; () banked
  3401  001108  4B7D               	infsnz	turnLeft@i& (0+255),f,b
  3402  00110A  2B7E               	incf	(turnLeft@i+1)& (0+255),f,b
  3403                           
  3404                           ; BSR set to: 0
  3405  00110C  BF7E               	btfsc	(turnLeft@i+1)& (0+255),7,b
  3406  00110E  D7DA               	goto	l2817
  3407  001110  517E               	movf	(turnLeft@i+1)& (0+255),w,b
  3408  001112  E105               	bnz	u2310
  3409  001114  0E65               	movlw	101
  3410  001116  5D7D               	subwf	turnLeft@i& (0+255),w,b
  3411  001118  B0D8               	btfsc	status,0,c
  3412  00111A  0012               	return	
  3413  00111C  D7D3               	goto	l2817
  3414  00111E                     u2310:
  3415                           
  3416                           ; BSR set to: 0
  3417  00111E  0012               	return		;funcret
  3418  001120                     __end_of_turnLeft:
  3419                           	opt callstack 0
  3420                           
  3421 ;; *************** function _stop *****************
  3422 ;; Defined at:
  3423 ;;		line 58 in file "dc_motor.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  mL              2   24[BANK0 ] PTR struct DC_motor
  3426 ;;		 -> moveToBeacon@mL(2), 
  3427 ;;  mR              2   26[BANK0 ] PTR struct DC_motor
  3428 ;;		 -> moveToBeacon@mR(2), 
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;  i               2   28[BANK0 ] int 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3440 ;;      Params:         0       4       0       0
  3441 ;;      Locals:         0       2       0       0
  3442 ;;      Temps:          0       0       0       0
  3443 ;;      Totals:         0       6       0       0
  3444 ;;Total ram usage:        6 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    9
  3447 ;; This function calls:
  3448 ;;		_setMotorPWM
  3449 ;; This function is called by:
  3450 ;;		_moveToBeacon
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text20
  3455  0014F0                     __ptext20:
  3456                           	opt callstack 0
  3457  0014F0                     _stop:
  3458                           	opt callstack 20
  3459                           
  3460                           ;dc_motor.c: 58: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 59: {;d
      +                          c_motor.c: 60:  for(int i = 100; i > 0; i--)
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;incstack = 0
  3464  0014F0  0E00               	movlw	0
  3465  0014F2  0100               	movlb	0	; () banked
  3466  0014F4  6F7D               	movwf	(stop@i+1)& (0+255),b
  3467  0014F6  0E64               	movlw	100
  3468  0014F8  6F7C               	movwf	stop@i& (0+255),b
  3469  0014FA                     l2799:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;dc_motor.c: 61:     {;dc_motor.c: 62:         mL->power = i;
  3473  0014FA  C078  FFD9         	movff	stop@mL,fsr2l
  3474  0014FE  C079  FFDA         	movff	stop@mL+1,fsr2h
  3475  001502  C07C  FFDF         	movff	stop@i,indf2
  3476                           
  3477                           ;dc_motor.c: 63:         mR->power = i;
  3478  001506  C07A  FFD9         	movff	stop@mR,fsr2l
  3479  00150A  C07B  FFDA         	movff	stop@mR+1,fsr2h
  3480  00150E  C07C  FFDF         	movff	stop@i,indf2
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;dc_motor.c: 64:         setMotorPWM(mL);
  3484  001512  C078  F06F         	movff	stop@mL,setMotorPWM@m
  3485  001516  C079  F070         	movff	stop@mL+1,setMotorPWM@m+1
  3486  00151A  ECAB  F004         	call	_setMotorPWM	;wreg free
  3487                           
  3488                           ;dc_motor.c: 65:         setMotorPWM(mR);
  3489  00151E  C07A  F06F         	movff	stop@mR,setMotorPWM@m
  3490  001522  C07B  F070         	movff	stop@mR+1,setMotorPWM@m+1
  3491  001526  ECAB  F004         	call	_setMotorPWM	;wreg free
  3492                           
  3493                           ;dc_motor.c: 66:     }
  3494  00152A  0100               	movlb	0	; () banked
  3495  00152C  077C               	decf	stop@i& (0+255),f,b
  3496  00152E  A0D8               	btfss	status,0,c
  3497  001530  077D               	decf	(stop@i+1)& (0+255),f,b
  3498                           
  3499                           ; BSR set to: 0
  3500  001532  BF7D               	btfsc	(stop@i+1)& (0+255),7,b
  3501  001534  0012               	return	
  3502  001536  517D               	movf	(stop@i+1)& (0+255),w,b
  3503  001538  E1E0               	bnz	l2799
  3504  00153A  057C               	decf	stop@i& (0+255),w,b
  3505  00153C  A0D8               	btfss	status,0,c
  3506  00153E  0012               	return	
  3507  001540  D7DC               	goto	l2799
  3508  001542                     __end_of_stop:
  3509                           	opt callstack 0
  3510                           
  3511 ;; *************** function _fullSpeedAhead *****************
  3512 ;; Defined at:
  3513 ;;		line 103 in file "dc_motor.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  mL              2   24[BANK0 ] PTR struct DC_motor
  3516 ;;		 -> moveToBeacon@mL(2), 
  3517 ;;  mR              2   26[BANK0 ] PTR struct DC_motor
  3518 ;;		 -> moveToBeacon@mR(2), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  i               2   28[BANK0 ] int 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3530 ;;      Params:         0       4       0       0
  3531 ;;      Locals:         0       2       0       0
  3532 ;;      Temps:          0       0       0       0
  3533 ;;      Totals:         0       6       0       0
  3534 ;;Total ram usage:        6 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    9
  3537 ;; This function calls:
  3538 ;;		_setMotorPWM
  3539 ;; This function is called by:
  3540 ;;		_moveToBeacon
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text21
  3545  001314                     __ptext21:
  3546                           	opt callstack 0
  3547  001314                     _fullSpeedAhead:
  3548                           	opt callstack 20
  3549                           
  3550                           ;dc_motor.c: 103: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 104: {;dc_motor.c: 105:     mL->direction = 1;
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;incstack = 0
  3554  001314  0100               	movlb	0	; () banked
  3555  001316  EE20 F001          	lfsr	2,1
  3556  00131A  5178               	movf	fullSpeedAhead@mL& (0+255),w,b
  3557  00131C  26D9               	addwf	fsr2l,f,c
  3558  00131E  5179               	movf	(fullSpeedAhead@mL+1)& (0+255),w,b
  3559  001320  22DA               	addwfc	fsr2h,f,c
  3560  001322  0E01               	movlw	1
  3561  001324  6EDF               	movwf	indf2,c
  3562                           
  3563                           ;dc_motor.c: 106:     mR->direction = 1;
  3564  001326  EE20 F001          	lfsr	2,1
  3565  00132A  517A               	movf	fullSpeedAhead@mR& (0+255),w,b
  3566  00132C  26D9               	addwf	fsr2l,f,c
  3567  00132E  517B               	movf	(fullSpeedAhead@mR+1)& (0+255),w,b
  3568  001330  22DA               	addwfc	fsr2h,f,c
  3569  001332  0E01               	movlw	1
  3570  001334  6EDF               	movwf	indf2,c
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;dc_motor.c: 107:     for(int i = 0; i < 100; i++)
  3574  001336  0E00               	movlw	0
  3575  001338  6F7D               	movwf	(fullSpeedAhead@i+1)& (0+255),b
  3576  00133A  0E00               	movlw	0
  3577  00133C  6F7C               	movwf	fullSpeedAhead@i& (0+255),b
  3578  00133E                     l2837:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;dc_motor.c: 108:     {;dc_motor.c: 109:         mL->power = i;
  3582  00133E  C078  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3583  001342  C079  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3584  001346  C07C  FFDF         	movff	fullSpeedAhead@i,indf2
  3585                           
  3586                           ;dc_motor.c: 110:         mR->power = i;
  3587  00134A  C07A  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3588  00134E  C07B  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3589  001352  C07C  FFDF         	movff	fullSpeedAhead@i,indf2
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;dc_motor.c: 111:         setMotorPWM(mL);
  3593  001356  C078  F06F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3594  00135A  C079  F070         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3595  00135E  ECAB  F004         	call	_setMotorPWM	;wreg free
  3596                           
  3597                           ;dc_motor.c: 112:         setMotorPWM(mR);
  3598  001362  C07A  F06F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3599  001366  C07B  F070         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3600  00136A  ECAB  F004         	call	_setMotorPWM	;wreg free
  3601                           
  3602                           ;dc_motor.c: 113:     }
  3603  00136E  0100               	movlb	0	; () banked
  3604  001370  4B7C               	infsnz	fullSpeedAhead@i& (0+255),f,b
  3605  001372  2B7D               	incf	(fullSpeedAhead@i+1)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608  001374  BF7D               	btfsc	(fullSpeedAhead@i+1)& (0+255),7,b
  3609  001376  D7E3               	goto	l2837
  3610  001378  517D               	movf	(fullSpeedAhead@i+1)& (0+255),w,b
  3611  00137A  E105               	bnz	u2320
  3612  00137C  0E64               	movlw	100
  3613  00137E  5D7C               	subwf	fullSpeedAhead@i& (0+255),w,b
  3614  001380  B0D8               	btfsc	status,0,c
  3615  001382  0012               	return	
  3616  001384  D7DC               	goto	l2837
  3617  001386                     u2320:
  3618                           
  3619                           ; BSR set to: 0
  3620  001386  0012               	return		;funcret
  3621  001388                     __end_of_fullSpeedAhead:
  3622                           	opt callstack 0
  3623                           
  3624 ;; *************** function _setMotorPWM *****************
  3625 ;; Defined at:
  3626 ;;		line 18 in file "dc_motor.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  m               2   15[BANK0 ] PTR struct DC_motor
  3629 ;;		 -> moveToBeacon@mR(2), moveToBeacon@mL(2), 
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;  PWMduty         2   22[BANK0 ] int 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3641 ;;      Params:         0       2       0       0
  3642 ;;      Locals:         0       2       0       0
  3643 ;;      Temps:          0       5       0       0
  3644 ;;      Totals:         0       9       0       0
  3645 ;;Total ram usage:        9 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    8
  3648 ;; This function calls:
  3649 ;;		___awdiv
  3650 ;;		___wmul
  3651 ;; This function is called by:
  3652 ;;		_stop
  3653 ;;		_turnLeft
  3654 ;;		_fullSpeedAhead
  3655 ;;		_setMotorFullSpeed
  3656 ;;		_stopMotor
  3657 ;;		_turnRight
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text22
  3662  000956                     __ptext22:
  3663                           	opt callstack 0
  3664  000956                     _setMotorPWM:
  3665                           	opt callstack 20
  3666                           
  3667                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;incstack = 0
  3671  000956  C06F  FFD9         	movff	setMotorPWM@m,fsr2l
  3672  00095A  C070  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3673  00095E  50DF               	movf	indf2,w,c
  3674  000960  0100               	movlb	0	; () banked
  3675  000962  6F71               	movwf	??_setMotorPWM& (0+255),b
  3676  000964  5171               	movf	??_setMotorPWM& (0+255),w,b
  3677  000966  6F69               	movwf	___wmul@multiplier& (0+255),b
  3678  000968  6B6A               	clrf	(___wmul@multiplier+1)& (0+255),b
  3679  00096A  EE20 F007          	lfsr	2,7
  3680  00096E  516F               	movf	setMotorPWM@m& (0+255),w,b
  3681  000970  26D9               	addwf	fsr2l,f,c
  3682  000972  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3683  000974  22DA               	addwfc	fsr2h,f,c
  3684  000976  CFDE F06B          	movff	postinc2,___wmul@multiplicand
  3685  00097A  CFDD F06C          	movff	postdec2,___wmul@multiplicand+1
  3686  00097E  EC8C  F00B         	call	___wmul	;wreg free
  3687  000982  C069  F061         	movff	?___wmul,___awdiv@dividend
  3688  000986  C06A  F062         	movff	?___wmul+1,___awdiv@dividend+1
  3689  00098A  0E00               	movlw	0
  3690  00098C  0100               	movlb	0	; () banked
  3691  00098E  6F64               	movwf	(___awdiv@divisor+1)& (0+255),b
  3692  000990  0E64               	movlw	100
  3693  000992  6F63               	movwf	___awdiv@divisor& (0+255),b
  3694  000994  EC90  F008         	call	___awdiv	;wreg free
  3695  000998  C061  F076         	movff	?___awdiv,setMotorPWM@PWMduty
  3696  00099C  C062  F077         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3697                           
  3698                           ;dc_motor.c: 24:     if (m->direction)
  3699  0009A0  0100               	movlb	0	; () banked
  3700  0009A2  EE20 F001          	lfsr	2,1
  3701  0009A6  516F               	movf	setMotorPWM@m& (0+255),w,b
  3702  0009A8  26D9               	addwf	fsr2l,f,c
  3703  0009AA  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3704  0009AC  22DA               	addwfc	fsr2h,f,c
  3705  0009AE  50DF               	movf	indf2,w,c
  3706  0009B0  B4D8               	btfsc	status,2,c
  3707  0009B2  D025               	goto	l2679
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3711  0009B4  EE20 F006          	lfsr	2,6
  3712  0009B8  516F               	movf	setMotorPWM@m& (0+255),w,b
  3713  0009BA  26D9               	addwf	fsr2l,f,c
  3714  0009BC  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3715  0009BE  22DA               	addwfc	fsr2h,f,c
  3716  0009C0  50DF               	movf	indf2,w,c
  3717  0009C2  6F71               	movwf	??_setMotorPWM& (0+255),b
  3718  0009C4  0E01               	movlw	1
  3719  0009C6  6F72               	movwf	(??_setMotorPWM+1)& (0+255),b
  3720  0009C8  2B71               	incf	??_setMotorPWM& (0+255),f,b
  3721  0009CA  D002               	goto	u2224
  3722  0009CC                     u2225:
  3723  0009CC  90D8               	bcf	status,0,c
  3724  0009CE  3772               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3725  0009D0                     u2224:
  3726  0009D0  2F71               	decfsz	??_setMotorPWM& (0+255),f,b
  3727  0009D2  D7FC               	goto	u2225
  3728  0009D4  0100               	movlb	0	; () banked
  3729  0009D6  5172               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3730  0009D8  108A               	iorwf	3978,w,c	;volatile
  3731  0009DA  6E8A               	movwf	3978,c	;volatile
  3732                           
  3733                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3734  0009DC  EE20 F007          	lfsr	2,7
  3735  0009E0  516F               	movf	setMotorPWM@m& (0+255),w,b
  3736  0009E2  26D9               	addwf	fsr2l,f,c
  3737  0009E4  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3738  0009E6  22DA               	addwfc	fsr2h,f,c
  3739  0009E8  CFDE F071          	movff	postinc2,??_setMotorPWM
  3740  0009EC  CFDD F072          	movff	postdec2,??_setMotorPWM+1
  3741  0009F0  5176               	movf	setMotorPWM@PWMduty& (0+255),w,b
  3742  0009F2  5D71               	subwf	??_setMotorPWM& (0+255),w,b
  3743  0009F4  6F76               	movwf	setMotorPWM@PWMduty& (0+255),b
  3744  0009F6  5177               	movf	(setMotorPWM@PWMduty+1)& (0+255),w,b
  3745  0009F8  5972               	subwfb	(??_setMotorPWM+1)& (0+255),w,b
  3746  0009FA  6F77               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3747                           
  3748                           ;dc_motor.c: 28:     }
  3749  0009FC  D015               	goto	l132
  3750  0009FE                     l2679:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3754  0009FE  EE20 F006          	lfsr	2,6
  3755  000A02  516F               	movf	setMotorPWM@m& (0+255),w,b
  3756  000A04  26D9               	addwf	fsr2l,f,c
  3757  000A06  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3758  000A08  22DA               	addwfc	fsr2h,f,c
  3759  000A0A  50DF               	movf	indf2,w,c
  3760  000A0C  6F71               	movwf	??_setMotorPWM& (0+255),b
  3761  000A0E  0E01               	movlw	1
  3762  000A10  6F72               	movwf	(??_setMotorPWM+1)& (0+255),b
  3763  000A12  2B71               	incf	??_setMotorPWM& (0+255),f,b
  3764  000A14  D002               	goto	u2234
  3765  000A16                     u2235:
  3766  000A16  90D8               	bcf	status,0,c
  3767  000A18  3772               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  3768  000A1A                     u2234:
  3769  000A1A  2F71               	decfsz	??_setMotorPWM& (0+255),f,b
  3770  000A1C  D7FC               	goto	u2235
  3771  000A1E  0100               	movlb	0	; () banked
  3772  000A20  5172               	movf	(??_setMotorPWM+1)& (0+255),w,b
  3773  000A22  0AFF               	xorlw	255
  3774  000A24  148A               	andwf	3978,w,c	;volatile
  3775  000A26  6E8A               	movwf	3978,c	;volatile
  3776  000A28                     l132:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3780  000A28  EE20 F002          	lfsr	2,2
  3781  000A2C  516F               	movf	setMotorPWM@m& (0+255),w,b
  3782  000A2E  26D9               	addwf	fsr2l,f,c
  3783  000A30  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3784  000A32  22DA               	addwfc	fsr2h,f,c
  3785  000A34  CFDE F071          	movff	postinc2,??_setMotorPWM
  3786  000A38  CFDD F072          	movff	postdec2,??_setMotorPWM+1
  3787  000A3C  C071  FFD9         	movff	??_setMotorPWM,fsr2l
  3788  000A40  C072  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3789  000A44  4576               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  3790  000A46  46E8               	rlncf	wreg,f,c
  3791  000A48  0BFC               	andlw	252
  3792  000A4A  6EDF               	movwf	indf2,c
  3793                           
  3794                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3795  000A4C  EE20 F004          	lfsr	2,4
  3796  000A50  516F               	movf	setMotorPWM@m& (0+255),w,b
  3797  000A52  26D9               	addwf	fsr2l,f,c
  3798  000A54  5170               	movf	(setMotorPWM@m+1)& (0+255),w,b
  3799  000A56  22DA               	addwfc	fsr2h,f,c
  3800  000A58  CFDE F071          	movff	postinc2,??_setMotorPWM
  3801  000A5C  CFDD F072          	movff	postdec2,??_setMotorPWM+1
  3802  000A60  C071  FFD9         	movff	??_setMotorPWM,fsr2l
  3803  000A64  C072  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3804  000A68  C076  F073         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3805  000A6C  C077  F074         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3806  000A70  0E06               	movlw	6
  3807  000A72  6F75               	movwf	(??_setMotorPWM+4)& (0+255),b
  3808  000A74                     u2245:
  3809  000A74  3574               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  3810  000A76  3374               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  3811  000A78  3373               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  3812  000A7A  2F75               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  3813  000A7C  D7FB               	goto	u2245
  3814  000A7E  5173               	movf	(??_setMotorPWM+2)& (0+255),w,b
  3815  000A80  6EDF               	movwf	indf2,c
  3816                           
  3817                           ; BSR set to: 0
  3818  000A82  0012               	return		;funcret
  3819  000A84                     __end_of_setMotorPWM:
  3820                           	opt callstack 0
  3821                           
  3822 ;; *************** function ___wmul *****************
  3823 ;; Defined at:
  3824 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  multiplier      2    9[BANK0 ] unsigned int 
  3827 ;;  multiplicand    2   11[BANK0 ] unsigned int 
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  product         2   13[BANK0 ] unsigned int 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2    9[BANK0 ] unsigned int 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, prodl, prodh
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3839 ;;      Params:         0       4       0       0
  3840 ;;      Locals:         0       2       0       0
  3841 ;;      Temps:          0       0       0       0
  3842 ;;      Totals:         0       6       0       0
  3843 ;;Total ram usage:        6 bytes
  3844 ;; Hardware stack levels used:    1
  3845 ;; Hardware stack levels required when called:    7
  3846 ;; This function calls:
  3847 ;;		Nothing
  3848 ;; This function is called by:
  3849 ;;		_setMotorPWM
  3850 ;;		_process_signal
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text23
  3855  001718                     __ptext23:
  3856                           	opt callstack 0
  3857  001718                     ___wmul:
  3858                           	opt callstack 22
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;incstack = 0
  3862  001718  0100               	movlb	0	; () banked
  3863  00171A  5169               	movf	___wmul@multiplier& (0+255),w,b
  3864  00171C  036B               	mulwf	___wmul@multiplicand& (0+255),b
  3865  00171E  CFF3 F06D          	movff	prodl,___wmul@product
  3866  001722  CFF4 F06E          	movff	prodh,___wmul@product+1
  3867  001726  5169               	movf	___wmul@multiplier& (0+255),w,b
  3868  001728  036C               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3869  00172A  50F3               	movf	prodl,w,c
  3870  00172C  276E               	addwf	(___wmul@product+1)& (0+255),f,b
  3871  00172E  516A               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3872  001730  036B               	mulwf	___wmul@multiplicand& (0+255),b
  3873  001732  50F3               	movf	prodl,w,c
  3874  001734  276E               	addwf	(___wmul@product+1)& (0+255),f,b
  3875                           
  3876                           ; BSR set to: 0
  3877  001736  C06D  F069         	movff	___wmul@product,?___wmul
  3878  00173A  C06E  F06A         	movff	___wmul@product+1,?___wmul+1
  3879                           
  3880                           ; BSR set to: 0
  3881  00173E  0012               	return		;funcret
  3882  001740                     __end_of___wmul:
  3883                           	opt callstack 0
  3884                           
  3885 ;; *************** function ___awdiv *****************
  3886 ;; Defined at:
  3887 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  dividend        2    1[BANK0 ] int 
  3890 ;;  divisor         2    3[BANK0 ] int 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  quotient        2    7[BANK0 ] int 
  3893 ;;  sign            1    6[BANK0 ] unsigned char 
  3894 ;;  counter         1    5[BANK0 ] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  2    1[BANK0 ] int 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3904 ;;      Params:         0       4       0       0
  3905 ;;      Locals:         0       4       0       0
  3906 ;;      Temps:          0       0       0       0
  3907 ;;      Totals:         0       8       0       0
  3908 ;;Total ram usage:        8 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    7
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_setMotorPWM
  3915 ;;		_process_signal
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text24
  3920  001120                     __ptext24:
  3921                           	opt callstack 0
  3922  001120                     ___awdiv:
  3923                           	opt callstack 22
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;incstack = 0
  3927  001120  0E00               	movlw	0
  3928  001122  0100               	movlb	0	; () banked
  3929  001124  6F66               	movwf	___awdiv@sign& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932  001126  AF64               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3933  001128  D006               	goto	l2631
  3934                           
  3935                           ; BSR set to: 0
  3936  00112A  6D63               	negf	___awdiv@divisor& (0+255),b
  3937  00112C  1F64               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3938  00112E  B0D8               	btfsc	status,0,c
  3939  001130  2B64               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3940                           
  3941                           ; BSR set to: 0
  3942  001132  0E01               	movlw	1
  3943  001134  6F66               	movwf	___awdiv@sign& (0+255),b
  3944  001136                     l2631:
  3945                           
  3946                           ; BSR set to: 0
  3947  001136  AF62               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3948  001138  D006               	goto	l2637
  3949                           
  3950                           ; BSR set to: 0
  3951  00113A  6D61               	negf	___awdiv@dividend& (0+255),b
  3952  00113C  1F62               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3953  00113E  B0D8               	btfsc	status,0,c
  3954  001140  2B62               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3955                           
  3956                           ; BSR set to: 0
  3957  001142  0E01               	movlw	1
  3958  001144  1B66               	xorwf	___awdiv@sign& (0+255),f,b
  3959  001146                     l2637:
  3960                           
  3961                           ; BSR set to: 0
  3962  001146  0E00               	movlw	0
  3963  001148  6F68               	movwf	(___awdiv@quotient+1)& (0+255),b
  3964  00114A  0E00               	movlw	0
  3965  00114C  6F67               	movwf	___awdiv@quotient& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968  00114E  5163               	movf	___awdiv@divisor& (0+255),w,b
  3969  001150  1164               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3970  001152  B4D8               	btfsc	status,2,c
  3971  001154  D01C               	goto	l2659
  3972                           
  3973                           ; BSR set to: 0
  3974  001156  0E01               	movlw	1
  3975  001158  6F65               	movwf	___awdiv@counter& (0+255),b
  3976  00115A  D004               	goto	l2645
  3977  00115C                     l2643:
  3978                           
  3979                           ; BSR set to: 0
  3980  00115C  90D8               	bcf	status,0,c
  3981  00115E  3763               	rlcf	___awdiv@divisor& (0+255),f,b
  3982  001160  3764               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3983  001162  2B65               	incf	___awdiv@counter& (0+255),f,b
  3984  001164                     l2645:
  3985                           
  3986                           ; BSR set to: 0
  3987  001164  AF64               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3988  001166  D7FA               	goto	l2643
  3989  001168                     u2180:
  3990                           
  3991                           ; BSR set to: 0
  3992  001168  90D8               	bcf	status,0,c
  3993  00116A  3767               	rlcf	___awdiv@quotient& (0+255),f,b
  3994  00116C  3768               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3995                           
  3996                           ; BSR set to: 0
  3997  00116E  5163               	movf	___awdiv@divisor& (0+255),w,b
  3998  001170  5D61               	subwf	___awdiv@dividend& (0+255),w,b
  3999  001172  5164               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4000  001174  5962               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4001  001176  A0D8               	btfss	status,0,c
  4002  001178  D005               	goto	l2655
  4003                           
  4004                           ; BSR set to: 0
  4005  00117A  5163               	movf	___awdiv@divisor& (0+255),w,b
  4006  00117C  5F61               	subwf	___awdiv@dividend& (0+255),f,b
  4007  00117E  5164               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4008  001180  5B62               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4009                           
  4010                           ; BSR set to: 0
  4011  001182  8167               	bsf	___awdiv@quotient& (0+255),0,b
  4012  001184                     l2655:
  4013                           
  4014                           ; BSR set to: 0
  4015  001184  90D8               	bcf	status,0,c
  4016  001186  3364               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4017  001188  3363               	rrcf	___awdiv@divisor& (0+255),f,b
  4018                           
  4019                           ; BSR set to: 0
  4020  00118A  2F65               	decfsz	___awdiv@counter& (0+255),f,b
  4021  00118C  D7ED               	goto	u2180
  4022  00118E                     l2659:
  4023                           
  4024                           ; BSR set to: 0
  4025  00118E  5166               	movf	___awdiv@sign& (0+255),w,b
  4026  001190  B4D8               	btfsc	status,2,c
  4027  001192  D004               	goto	l2663
  4028                           
  4029                           ; BSR set to: 0
  4030  001194  6D67               	negf	___awdiv@quotient& (0+255),b
  4031  001196  1F68               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4032  001198  B0D8               	btfsc	status,0,c
  4033  00119A  2B68               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4034  00119C                     l2663:
  4035                           
  4036                           ; BSR set to: 0
  4037  00119C  C067  F061         	movff	___awdiv@quotient,?___awdiv
  4038  0011A0  C068  F062         	movff	___awdiv@quotient+1,?___awdiv+1
  4039                           
  4040                           ; BSR set to: 0
  4041  0011A4  0012               	return		;funcret
  4042  0011A6                     __end_of___awdiv:
  4043                           	opt callstack 0
  4044                           
  4045 ;; *************** function _init_motors *****************
  4046 ;; Defined at:
  4047 ;;		line 144 in file "dc_motor.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  mL              2    1[BANK0 ] PTR struct DC_motor
  4050 ;;		 -> main@motorL(9), 
  4051 ;;  mR              2    3[BANK0 ] PTR struct DC_motor
  4052 ;;		 -> main@motorR(9), 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;		None
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      void 
  4057 ;; Registers used:
  4058 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4064 ;;      Params:         0       4       0       0
  4065 ;;      Locals:         0       0       0       0
  4066 ;;      Temps:          0       0       0       0
  4067 ;;      Totals:         0       4       0       0
  4068 ;;Total ram usage:        4 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    7
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_main
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text25
  4079  000B5E                     __ptext25:
  4080                           	opt callstack 0
  4081  000B5E                     _init_motors:
  4082                           	opt callstack 23
  4083                           
  4084                           ;dc_motor.c: 144: void init_motors(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           145: {;dc_motor.c: 147: mL->power = 0;
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;incstack = 0
  4088  000B5E  C061  FFD9         	movff	init_motors@mL,fsr2l
  4089  000B62  C062  FFDA         	movff	init_motors@mL+1,fsr2h
  4090  000B66  0E00               	movlw	0
  4091  000B68  6EDF               	movwf	indf2,c
  4092                           
  4093                           ;dc_motor.c: 148: mL->direction = 1;
  4094  000B6A  0100               	movlb	0	; () banked
  4095  000B6C  EE20 F001          	lfsr	2,1
  4096  000B70  5161               	movf	init_motors@mL& (0+255),w,b
  4097  000B72  26D9               	addwf	fsr2l,f,c
  4098  000B74  5162               	movf	(init_motors@mL+1)& (0+255),w,b
  4099  000B76  22DA               	addwfc	fsr2h,f,c
  4100  000B78  0E01               	movlw	1
  4101  000B7A  6EDF               	movwf	indf2,c
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;dc_motor.c: 149: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  4105  000B7C  EE20 F002          	lfsr	2,2
  4106  000B80  5161               	movf	init_motors@mL& (0+255),w,b
  4107  000B82  26D9               	addwf	fsr2l,f,c
  4108  000B84  5162               	movf	(init_motors@mL+1)& (0+255),w,b
  4109  000B86  22DA               	addwfc	fsr2h,f,c
  4110  000B88  0E79               	movlw	121
  4111  000B8A  6EDE               	movwf	postinc2,c
  4112  000B8C  0E0F               	movlw	15
  4113  000B8E  6EDD               	movwf	postdec2,c
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;dc_motor.c: 150: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  4117  000B90  EE20 F004          	lfsr	2,4
  4118  000B94  5161               	movf	init_motors@mL& (0+255),w,b
  4119  000B96  26D9               	addwf	fsr2l,f,c
  4120  000B98  5162               	movf	(init_motors@mL+1)& (0+255),w,b
  4121  000B9A  22DA               	addwfc	fsr2h,f,c
  4122  000B9C  0E78               	movlw	120
  4123  000B9E  6EDE               	movwf	postinc2,c
  4124  000BA0  0E0F               	movlw	15
  4125  000BA2  6EDD               	movwf	postdec2,c
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;dc_motor.c: 151: mL->dir_pin=0;
  4129  000BA4  EE20 F006          	lfsr	2,6
  4130  000BA8  5161               	movf	init_motors@mL& (0+255),w,b
  4131  000BAA  26D9               	addwf	fsr2l,f,c
  4132  000BAC  5162               	movf	(init_motors@mL+1)& (0+255),w,b
  4133  000BAE  22DA               	addwfc	fsr2h,f,c
  4134  000BB0  0E00               	movlw	0
  4135  000BB2  6EDF               	movwf	indf2,c
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;dc_motor.c: 152: mL->PWMperiod=199;
  4139  000BB4  EE20 F007          	lfsr	2,7
  4140  000BB8  5161               	movf	init_motors@mL& (0+255),w,b
  4141  000BBA  26D9               	addwf	fsr2l,f,c
  4142  000BBC  5162               	movf	(init_motors@mL+1)& (0+255),w,b
  4143  000BBE  22DA               	addwfc	fsr2h,f,c
  4144  000BC0  0EC7               	movlw	199
  4145  000BC2  6EDE               	movwf	postinc2,c
  4146  000BC4  0E00               	movlw	0
  4147  000BC6  6EDD               	movwf	postdec2,c
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;dc_motor.c: 154: mR->power = 0;
  4151  000BC8  C063  FFD9         	movff	init_motors@mR,fsr2l
  4152  000BCC  C064  FFDA         	movff	init_motors@mR+1,fsr2h
  4153  000BD0  0E00               	movlw	0
  4154  000BD2  6EDF               	movwf	indf2,c
  4155                           
  4156                           ;dc_motor.c: 155: mR->direction = 1;
  4157  000BD4  EE20 F001          	lfsr	2,1
  4158  000BD8  5163               	movf	init_motors@mR& (0+255),w,b
  4159  000BDA  26D9               	addwf	fsr2l,f,c
  4160  000BDC  5164               	movf	(init_motors@mR+1)& (0+255),w,b
  4161  000BDE  22DA               	addwfc	fsr2h,f,c
  4162  000BE0  0E01               	movlw	1
  4163  000BE2  6EDF               	movwf	indf2,c
  4164                           
  4165                           ;dc_motor.c: 156: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  4166  000BE4  EE20 F002          	lfsr	2,2
  4167  000BE8  5163               	movf	init_motors@mR& (0+255),w,b
  4168  000BEA  26D9               	addwf	fsr2l,f,c
  4169  000BEC  5164               	movf	(init_motors@mR+1)& (0+255),w,b
  4170  000BEE  22DA               	addwfc	fsr2h,f,c
  4171  000BF0  0E77               	movlw	119
  4172  000BF2  6EDE               	movwf	postinc2,c
  4173  000BF4  0E0F               	movlw	15
  4174  000BF6  6EDD               	movwf	postdec2,c
  4175                           
  4176                           ;dc_motor.c: 157: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  4177  000BF8  EE20 F004          	lfsr	2,4
  4178  000BFC  5163               	movf	init_motors@mR& (0+255),w,b
  4179  000BFE  26D9               	addwf	fsr2l,f,c
  4180  000C00  5164               	movf	(init_motors@mR+1)& (0+255),w,b
  4181  000C02  22DA               	addwfc	fsr2h,f,c
  4182  000C04  0E76               	movlw	118
  4183  000C06  6EDE               	movwf	postinc2,c
  4184  000C08  0E0F               	movlw	15
  4185  000C0A  6EDD               	movwf	postdec2,c
  4186                           
  4187                           ;dc_motor.c: 158: mR->dir_pin=2;
  4188  000C0C  EE20 F006          	lfsr	2,6
  4189  000C10  5163               	movf	init_motors@mR& (0+255),w,b
  4190  000C12  26D9               	addwf	fsr2l,f,c
  4191  000C14  5164               	movf	(init_motors@mR+1)& (0+255),w,b
  4192  000C16  22DA               	addwfc	fsr2h,f,c
  4193  000C18  0E02               	movlw	2
  4194  000C1A  6EDF               	movwf	indf2,c
  4195                           
  4196                           ;dc_motor.c: 159: mR->PWMperiod=199;
  4197  000C1C  EE20 F007          	lfsr	2,7
  4198  000C20  5163               	movf	init_motors@mR& (0+255),w,b
  4199  000C22  26D9               	addwf	fsr2l,f,c
  4200  000C24  5164               	movf	(init_motors@mR+1)& (0+255),w,b
  4201  000C26  22DA               	addwfc	fsr2h,f,c
  4202  000C28  0EC7               	movlw	199
  4203  000C2A  6EDE               	movwf	postinc2,c
  4204  000C2C  0E00               	movlw	0
  4205  000C2E  6EDD               	movwf	postdec2,c
  4206                           
  4207                           ; BSR set to: 0
  4208  000C30  0012               	return		;funcret
  4209  000C32                     __end_of_init_motors:
  4210                           	opt callstack 0
  4211                           
  4212 ;; *************** function _classify_data *****************
  4213 ;; Defined at:
  4214 ;;		line 45 in file "signal_processing.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  left_smoothe    2    1[BANK0 ] int 
  4217 ;;  right_smooth    2    3[BANK0 ] int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  difference      2    5[BANK0 ] int 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      unsigned char 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4229 ;;      Params:         0       4       0       0
  4230 ;;      Locals:         0       2       0       0
  4231 ;;      Temps:          0       0       0       0
  4232 ;;      Totals:         0       6       0       0
  4233 ;;Total ram usage:        6 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    7
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_main
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text26
  4244  001542                     __ptext26:
  4245                           	opt callstack 0
  4246  001542                     _classify_data:
  4247                           	opt callstack 23
  4248                           
  4249                           ;signal_processing.c: 45: char classify_data(int left_smoothed, int right_smoothed);sign
      +                          al_processing.c: 46: {;signal_processing.c: 47:     int difference = left_smoothed - rig
      +                          ht_smoothed;
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;incstack = 0
  4253  001542  0100               	movlb	0	; () banked
  4254  001544  5163               	movf	classify_data@right_smoothed& (0+255),w,b
  4255  001546  5D61               	subwf	classify_data@left_smoothed& (0+255),w,b
  4256  001548  6F65               	movwf	classify_data@difference& (0+255),b
  4257  00154A  5164               	movf	(classify_data@right_smoothed+1)& (0+255),w,b
  4258  00154C  5962               	subwfb	(classify_data@left_smoothed+1)& (0+255),w,b
  4259  00154E  6F66               	movwf	(classify_data@difference+1)& (0+255),b
  4260                           
  4261                           ;signal_processing.c: 50:     if(difference < 5 && difference > -5)
  4262  001550  BF66               	btfsc	(classify_data@difference+1)& (0+255),7,b
  4263  001552  D006               	goto	u2640
  4264  001554  5166               	movf	(classify_data@difference+1)& (0+255),w,b
  4265  001556  E10E               	bnz	l3007
  4266  001558  0E05               	movlw	5
  4267  00155A  5D65               	subwf	classify_data@difference& (0+255),w,b
  4268  00155C  B0D8               	btfsc	status,0,c
  4269  00155E  D00A               	goto	l3007
  4270  001560                     u2640:
  4271                           
  4272                           ; BSR set to: 0
  4273  001560  AF66               	btfss	(classify_data@difference+1)& (0+255),7,b
  4274  001562  D006               	goto	u2650
  4275  001564  0EFC               	movlw	252
  4276  001566  5D65               	subwf	classify_data@difference& (0+255),w,b
  4277  001568  0EFF               	movlw	255
  4278  00156A  5966               	subwfb	(classify_data@difference+1)& (0+255),w,b
  4279  00156C  A0D8               	btfss	status,0,c
  4280  00156E  D002               	goto	l3007
  4281  001570                     u2650:
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;signal_processing.c: 51:     {;signal_processing.c: 52:         return 3;
  4285  001570  0E03               	movlw	3
  4286  001572  0012               	return	
  4287  001574                     l3007:
  4288                           
  4289                           ; BSR set to: 0
  4290  001574  AF66               	btfss	(classify_data@difference+1)& (0+255),7,b
  4291  001576  D002               	goto	l3015
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;signal_processing.c: 56:     {;signal_processing.c: 57:         return 2;
  4295  001578  0E02               	movlw	2
  4296  00157A  0012               	return	
  4297  00157C                     l3015:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;signal_processing.c: 61:     {;signal_processing.c: 62:         return 1;
  4301  00157C  0E01               	movlw	1
  4302                           
  4303                           ; BSR set to: 0
  4304  00157E  0012               	return		;funcret
  4305  001580                     __end_of_classify_data:
  4306                           	opt callstack 0
  4307                           
  4308 ;; *************** function _SetLine *****************
  4309 ;; Defined at:
  4310 ;;		line 107 in file "LCDIO.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  line            1    wreg     unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  line            1    5[BANK0 ] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      void 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4324 ;;      Params:         0       0       0       0
  4325 ;;      Locals:         0       1       0       0
  4326 ;;      Temps:          0       0       0       0
  4327 ;;      Totals:         0       1       0       0
  4328 ;;Total ram usage:        1 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:   10
  4331 ;; This function calls:
  4332 ;;		_SendLCD
  4333 ;; This function is called by:
  4334 ;;		_main
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text27
  4339  001628                     __ptext27:
  4340                           	opt callstack 0
  4341  001628                     _SetLine:
  4342                           	opt callstack 20
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;incstack = 0
  4346                           ;SetLine@line stored from wreg
  4347  001628  0100               	movlb	0	; () banked
  4348  00162A  6F65               	movwf	SetLine@line& (0+255),b
  4349                           
  4350                           ;LCDIO.c: 109:     if(line == 1){
  4351  00162C  0100               	movlb	0	; () banked
  4352  00162E  0565               	decf	SetLine@line& (0+255),w,b
  4353  001630  A4D8               	btfss	status,2,c
  4354  001632  D005               	goto	l3041
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4358  001634  0E00               	movlw	0
  4359  001636  6F63               	movwf	SendLCD@type& (0+255),b
  4360  001638  0E80               	movlw	128
  4361  00163A  ECDE  F00A         	call	_SendLCD
  4362  00163E                     l3041:
  4363                           
  4364                           ;LCDIO.c: 113:     if(line == 2){
  4365  00163E  0E02               	movlw	2
  4366  001640  0100               	movlb	0	; () banked
  4367  001642  1965               	xorwf	SetLine@line& (0+255),w,b
  4368  001644  A4D8               	btfss	status,2,c
  4369  001646  D005               	goto	l3045
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4373  001648  0E00               	movlw	0
  4374  00164A  6F63               	movwf	SendLCD@type& (0+255),b
  4375  00164C  0EC0               	movlw	192
  4376  00164E  ECDE  F00A         	call	_SendLCD
  4377  001652                     l3045:
  4378                           
  4379                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4380  001652  0E21               	movlw	33
  4381  001654                     u2997:
  4382  001654  2EE8               	decfsz	wreg,f,c
  4383  001656  D7FE               	bra	u2997
  4384  001658  F000               	nop	
  4385  00165A  0012               	return		;funcret
  4386  00165C                     __end_of_SetLine:
  4387                           	opt callstack 0
  4388                           
  4389 ;; *************** function _LCD_String *****************
  4390 ;; Defined at:
  4391 ;;		line 119 in file "LCDIO.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  string          2    5[BANK0 ] PTR unsigned char 
  4394 ;;		 -> STR_5(16), STR_4(16), STR_3(16), main@temp1(16), 
  4395 ;;		 -> main@temp2(16), 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4407 ;;      Params:         0       2       0       0
  4408 ;;      Locals:         0       0       0       0
  4409 ;;      Temps:          0       0       0       0
  4410 ;;      Totals:         0       2       0       0
  4411 ;;Total ram usage:        2 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:   10
  4414 ;; This function calls:
  4415 ;;		_SendLCD
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text28
  4422  001388                     __ptext28:
  4423                           	opt callstack 0
  4424  001388                     _LCD_String:
  4425                           	opt callstack 20
  4426                           
  4427                           ;LCDIO.c: 121: while(*string != 0){
  4428                           
  4429                           ;incstack = 0
  4430  001388  D01C               	goto	l3067
  4431  00138A                     l3061:
  4432                           
  4433                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4434  00138A  0E01               	movlw	1
  4435  00138C  0100               	movlb	0	; () banked
  4436  00138E  6F63               	movwf	SendLCD@type& (0+255),b
  4437  001390  C065  FFF6         	movff	LCD_String@string,tblptrl
  4438  001394  C066  FFF7         	movff	LCD_String@string+1,tblptrh
  4439  001398  6AF8               	clrf	tblptru,c
  4440  00139A  0E02               	movlw	(high __ramtop+-1)
  4441  00139C  64F7               	cpfsgt	tblptrh,c
  4442  00139E  D003               	bra	u2727
  4443  0013A0  0008               	tblrd		*
  4444  0013A2  50F5               	movf	tablat,w,c
  4445  0013A4  D005               	bra	u2720
  4446  0013A6                     u2727:
  4447  0013A6  CFF6 FFE1          	movff	tblptrl,fsr1l
  4448  0013AA  CFF7 FFE2          	movff	tblptrh,fsr1h
  4449  0013AE  50E7               	movf	indf1,w,c
  4450  0013B0                     u2720:
  4451  0013B0  ECDE  F00A         	call	_SendLCD
  4452  0013B4  0100               	movlb	0	; () banked
  4453  0013B6  4B65               	infsnz	LCD_String@string& (0+255),f,b
  4454  0013B8  2B66               	incf	(LCD_String@string+1)& (0+255),f,b
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4458  0013BA  0E21               	movlw	33
  4459  0013BC                     u3007:
  4460  0013BC  2EE8               	decfsz	wreg,f,c
  4461  0013BE  D7FE               	bra	u3007
  4462  0013C0  F000               	nop	
  4463  0013C2                     l3067:
  4464                           
  4465                           ;LCDIO.c: 121: while(*string != 0){
  4466  0013C2  C065  FFF6         	movff	LCD_String@string,tblptrl
  4467  0013C6  C066  FFF7         	movff	LCD_String@string+1,tblptrh
  4468  0013CA  6AF8               	clrf	tblptru,c
  4469  0013CC  0E02               	movlw	(high __ramtop+-1)
  4470  0013CE  64F7               	cpfsgt	tblptrh,c
  4471  0013D0  D003               	bra	u2737
  4472  0013D2  0008               	tblrd		*
  4473  0013D4  50F5               	movf	tablat,w,c
  4474  0013D6  D005               	bra	u2730
  4475  0013D8                     u2737:
  4476  0013D8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4477  0013DC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4478  0013E0  50E7               	movf	indf1,w,c
  4479  0013E2                     u2730:
  4480  0013E2  0900               	iorlw	0
  4481  0013E4  B4D8               	btfsc	status,2,c
  4482  0013E6  0012               	return	
  4483  0013E8  D7D0               	goto	l3061
  4484  0013EA                     __end_of_LCD_String:
  4485                           	opt callstack 0
  4486                           
  4487 ;; *************** function _ClearLCD *****************
  4488 ;; Defined at:
  4489 ;;		line 137 in file "LCDIO.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      void 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4503 ;;      Params:         0       0       0       0
  4504 ;;      Locals:         0       0       0       0
  4505 ;;      Temps:          0       1       0       0
  4506 ;;      Totals:         0       1       0       0
  4507 ;;Total ram usage:        1 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:   10
  4510 ;; This function calls:
  4511 ;;		_SendLCD
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text29
  4518  001740                     __ptext29:
  4519                           	opt callstack 0
  4520  001740                     _ClearLCD:
  4521                           	opt callstack 20
  4522                           
  4523                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  4524                           
  4525                           ;incstack = 0
  4526  001740  0E00               	movlw	0
  4527  001742  0100               	movlb	0	; () banked
  4528  001744  6F63               	movwf	SendLCD@type& (0+255),b
  4529  001746  0E01               	movlw	1
  4530  001748  ECDE  F00A         	call	_SendLCD
  4531                           
  4532                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  4533  00174C  0E0D               	movlw	13
  4534  00174E  0100               	movlb	0	; () banked
  4535  001750  6F65               	movwf	??_ClearLCD& (0+255),b
  4536  001752  0EFB               	movlw	251
  4537  001754                     u3017:
  4538  001754  2EE8               	decfsz	wreg,f,c
  4539  001756  D7FE               	bra	u3017
  4540  001758  2F65               	decfsz	??_ClearLCD& (0+255),f,b
  4541  00175A  D7FC               	bra	u3017
  4542  00175C  D000               	nop2	
  4543  00175E  0012               	return		;funcret
  4544  001760                     __end_of_ClearLCD:
  4545                           	opt callstack 0
  4546                           
  4547 ;; *************** function _SendLCD *****************
  4548 ;; Defined at:
  4549 ;;		line 44 in file "LCDIO.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  Byte            1    wreg     unsigned char 
  4552 ;;  type            1    3[BANK0 ] unsigned char 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  Byte            1    4[BANK0 ] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4564 ;;      Params:         0       1       0       0
  4565 ;;      Locals:         0       1       0       0
  4566 ;;      Temps:          0       0       0       0
  4567 ;;      Totals:         0       2       0       0
  4568 ;;Total ram usage:        2 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    9
  4571 ;; This function calls:
  4572 ;;		_LCDout
  4573 ;; This function is called by:
  4574 ;;		_init_LCD
  4575 ;;		_SetLine
  4576 ;;		_LCD_String
  4577 ;;		_ClearLCD
  4578 ;;		_ShiftLeft
  4579 ;;		_ShiftRight
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text30
  4584  0015BC                     __ptext30:
  4585                           	opt callstack 0
  4586  0015BC                     _SendLCD:
  4587                           	opt callstack 19
  4588                           
  4589                           ;incstack = 0
  4590                           ;SendLCD@Byte stored from wreg
  4591  0015BC  0100               	movlb	0	; () banked
  4592  0015BE  6F64               	movwf	SendLCD@Byte& (0+255),b
  4593                           
  4594                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4595  0015C0  0100               	movlb	0	; () banked
  4596  0015C2  B163               	btfsc	SendLCD@type& (0+255),0,b
  4597  0015C4  D002               	bra	u2255
  4598  0015C6  9E89               	bcf	3977,7,c	;volatile
  4599  0015C8  D001               	bra	u2256
  4600  0015CA                     u2255:
  4601  0015CA  8E89               	bsf	3977,7,c	;volatile
  4602  0015CC                     u2256:
  4603                           
  4604                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4605  0015CC  0100               	movlb	0	; () banked
  4606  0015CE  3964               	swapf	SendLCD@Byte& (0+255),w,b
  4607  0015D0  0B0F               	andlw	15
  4608  0015D2  0B0F               	andlw	15
  4609  0015D4  ECD3  F008         	call	_LCDout
  4610                           
  4611                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4612  0015D8  0E06               	movlw	6
  4613  0015DA                     u3027:
  4614  0015DA  2EE8               	decfsz	wreg,f,c
  4615  0015DC  D7FE               	bra	u3027
  4616  0015DE  D000               	nop2	
  4617                           
  4618                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4619  0015E0  0100               	movlb	0	; () banked
  4620  0015E2  5164               	movf	SendLCD@Byte& (0+255),w,b
  4621  0015E4  0B0F               	andlw	15
  4622  0015E6  ECD3  F008         	call	_LCDout
  4623                           
  4624                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4625  0015EA  0E21               	movlw	33
  4626  0015EC                     u3037:
  4627  0015EC  2EE8               	decfsz	wreg,f,c
  4628  0015EE  D7FE               	bra	u3037
  4629  0015F0  F000               	nop	
  4630  0015F2  0012               	return		;funcret
  4631  0015F4                     __end_of_SendLCD:
  4632                           	opt callstack 0
  4633                           
  4634 ;; *************** function _LCDout *****************
  4635 ;; Defined at:
  4636 ;;		line 31 in file "LCDIO.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  number          1    wreg     unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  number          1    2[BANK0 ] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4650 ;;      Params:         0       0       0       0
  4651 ;;      Locals:         0       1       0       0
  4652 ;;      Temps:          0       1       0       0
  4653 ;;      Totals:         0       2       0       0
  4654 ;;Total ram usage:        2 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    8
  4657 ;; This function calls:
  4658 ;;		_E_TOG
  4659 ;; This function is called by:
  4660 ;;		_SendLCD
  4661 ;;		_init_LCD
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text31
  4666  0011A6                     __ptext31:
  4667                           	opt callstack 0
  4668  0011A6                     _LCDout:
  4669                           	opt callstack 19
  4670                           
  4671                           ;incstack = 0
  4672                           ;LCDout@number stored from wreg
  4673  0011A6  0100               	movlb	0	; () banked
  4674  0011A8  6F62               	movwf	LCDout@number& (0+255),b
  4675                           
  4676                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4677  0011AA  C062  F061         	movff	LCDout@number,??_LCDout
  4678  0011AE  0E01               	movlw	1
  4679  0011B0  0100               	movlb	0	; () banked
  4680  0011B2  1761               	andwf	??_LCDout& (0+255),f,b
  4681  0011B4  508B               	movf	3979,w,c	;volatile
  4682  0011B6  1961               	xorwf	??_LCDout& (0+255),w,b
  4683  0011B8  0BFE               	andlw	-2
  4684  0011BA  1961               	xorwf	??_LCDout& (0+255),w,b
  4685  0011BC  6E8B               	movwf	3979,c	;volatile
  4686                           
  4687                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4688  0011BE  C062  F061         	movff	LCDout@number,??_LCDout
  4689  0011C2  90D8               	bcf	status,0,c
  4690  0011C4  3361               	rrcf	??_LCDout& (0+255),f,b
  4691  0011C6  0E01               	movlw	1
  4692  0011C8  1761               	andwf	??_LCDout& (0+255),f,b
  4693  0011CA  4761               	rlncf	??_LCDout& (0+255),f,b
  4694  0011CC  4761               	rlncf	??_LCDout& (0+255),f,b
  4695  0011CE  4761               	rlncf	??_LCDout& (0+255),f,b
  4696  0011D0  508B               	movf	3979,w,c	;volatile
  4697  0011D2  1961               	xorwf	??_LCDout& (0+255),w,b
  4698  0011D4  0BF7               	andlw	-9
  4699  0011D6  1961               	xorwf	??_LCDout& (0+255),w,b
  4700  0011D8  6E8B               	movwf	3979,c	;volatile
  4701                           
  4702                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4703  0011DA  C062  F061         	movff	LCDout@number,??_LCDout
  4704  0011DE  90D8               	bcf	status,0,c
  4705  0011E0  3361               	rrcf	??_LCDout& (0+255),f,b
  4706  0011E2  90D8               	bcf	status,0,c
  4707  0011E4  3361               	rrcf	??_LCDout& (0+255),f,b
  4708  0011E6  0E01               	movlw	1
  4709  0011E8  1761               	andwf	??_LCDout& (0+255),f,b
  4710  0011EA  508C               	movf	3980,w,c	;volatile
  4711  0011EC  1961               	xorwf	??_LCDout& (0+255),w,b
  4712  0011EE  0BFE               	andlw	-2
  4713  0011F0  1961               	xorwf	??_LCDout& (0+255),w,b
  4714  0011F2  6E8C               	movwf	3980,c	;volatile
  4715                           
  4716                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4717  0011F4  C062  F061         	movff	LCDout@number,??_LCDout
  4718  0011F8  90D8               	bcf	status,0,c
  4719  0011FA  3361               	rrcf	??_LCDout& (0+255),f,b
  4720  0011FC  90D8               	bcf	status,0,c
  4721  0011FE  3361               	rrcf	??_LCDout& (0+255),f,b
  4722  001200  90D8               	bcf	status,0,c
  4723  001202  3361               	rrcf	??_LCDout& (0+255),f,b
  4724  001204  0E01               	movlw	1
  4725  001206  1761               	andwf	??_LCDout& (0+255),f,b
  4726  001208  4761               	rlncf	??_LCDout& (0+255),f,b
  4727  00120A  508C               	movf	3980,w,c	;volatile
  4728  00120C  1961               	xorwf	??_LCDout& (0+255),w,b
  4729  00120E  0BFD               	andlw	-3
  4730  001210  1961               	xorwf	??_LCDout& (0+255),w,b
  4731  001212  6E8C               	movwf	3980,c	;volatile
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;LCDIO.c: 39:  E_TOG();
  4735  001214  ECE7  F00B         	call	_E_TOG	;wreg free
  4736                           
  4737                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4738  001218  0E03               	movlw	3
  4739  00121A                     u3047:
  4740  00121A  2EE8               	decfsz	wreg,f,c
  4741  00121C  D7FE               	bra	u3047
  4742  00121E  F000               	nop	
  4743  001220  0012               	return		;funcret
  4744  001222                     __end_of_LCDout:
  4745                           	opt callstack 0
  4746                           
  4747 ;; *************** function _E_TOG *****************
  4748 ;; Defined at:
  4749 ;;		line 23 in file "LCDIO.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;		None
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4763 ;;      Params:         0       0       0       0
  4764 ;;      Locals:         0       0       0       0
  4765 ;;      Temps:          0       0       0       0
  4766 ;;      Totals:         0       0       0       0
  4767 ;;Total ram usage:        0 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    7
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_LCDout
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           	psect	text32
  4778  0017CE                     __ptext32:
  4779                           	opt callstack 0
  4780  0017CE                     _E_TOG:
  4781                           	opt callstack 19
  4782                           
  4783                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4784                           
  4785                           ;incstack = 0
  4786  0017CE  8C89               	bsf	3977,6,c	;volatile
  4787                           
  4788                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4789  0017D0  0E03               	movlw	3
  4790  0017D2                     u3057:
  4791  0017D2  2EE8               	decfsz	wreg,f,c
  4792  0017D4  D7FE               	bra	u3057
  4793  0017D6  F000               	nop	
  4794                           
  4795                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4796  0017D8  9C89               	bcf	3977,6,c	;volatile
  4797  0017DA  0012               	return		;funcret
  4798  0017DC                     __end_of_E_TOG:
  4799                           	opt callstack 0
  4800                           
  4801 ;; *************** function _InterruptHandlerLow *****************
  4802 ;; Defined at:
  4803 ;;		line 86 in file "main.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      void 
  4810 ;; Registers used:
  4811 ;;		None
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4817 ;;      Params:         0       0       0       0
  4818 ;;      Locals:         0       0       0       0
  4819 ;;      Temps:          0       1       0       0
  4820 ;;      Totals:         0       1       0       0
  4821 ;;Total ram usage:        1 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    6
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		Interrupt level 1
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	intcodelo
  4832  000018                     __pintcodelo:
  4833                           	opt callstack 0
  4834  000018                     _InterruptHandlerLow:
  4835                           	opt callstack 16
  4836                           
  4837                           ;incstack = 0
  4838  000018  8039               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4839  00001A  CFE0 F060          	movff	bsr,??_InterruptHandlerLow
  4840  00001E  C060  FFE0         	movff	??_InterruptHandlerLow,bsr
  4841  000022  9039               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4842  000024  0010               	retfie	
  4843  000026                     __end_of_InterruptHandlerLow:
  4844                           	opt callstack 0
  4845                           
  4846 ;; *************** function _InterruptHandlerHigh *****************
  4847 ;; Defined at:
  4848 ;;		line 54 in file "main.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  throwaway       1    0        unsigned char 
  4853 ;;  RFID_flag       1   39[COMRAM] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4863 ;;      Params:         0       0       0       0
  4864 ;;      Locals:         2       0       0       0
  4865 ;;      Temps:          8       0       0       0
  4866 ;;      Totals:        10       0       0       0
  4867 ;;Total ram usage:       10 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    5
  4870 ;; This function calls:
  4871 ;;		_check_RFID
  4872 ;;		_processRFID
  4873 ;; This function is called by:
  4874 ;;		Interrupt level 2
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	intcode
  4879  000008                     __pintcode:
  4880                           	opt callstack 0
  4881  000008                     _InterruptHandlerHigh:
  4882                           	opt callstack 16
  4883                           
  4884                           ;incstack = 0
  4885  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4886  00000A  EF11  F009         	goto	int_func
  4887                           
  4888                           	psect	intcode_body
  4889  001222                     __pintcode_body:
  4890                           	opt callstack 16
  4891  001222                     int_func:
  4892                           	opt callstack 16
  4893  001222  CFE1 F01F          	movff	fsr1l,??_InterruptHandlerHigh
  4894  001226  CFE2 F020          	movff	fsr1h,??_InterruptHandlerHigh+1
  4895  00122A  CFD9 F021          	movff	fsr2l,??_InterruptHandlerHigh+2
  4896  00122E  CFDA F022          	movff	fsr2h,??_InterruptHandlerHigh+3
  4897  001232  CFF6 F023          	movff	tblptrl,??_InterruptHandlerHigh+4
  4898  001236  CFF7 F024          	movff	tblptrh,??_InterruptHandlerHigh+5
  4899  00123A  CFF8 F025          	movff	tblptru,??_InterruptHandlerHigh+6
  4900  00123E  CFF5 F026          	movff	tablat,??_InterruptHandlerHigh+7
  4901                           
  4902                           ;main.c: 58:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4903  001242  AA9E               	btfss	3998,5,c	;volatile
  4904  001244  D018               	goto	i2l69
  4905  001246  502C               	movf	_robot_mode,w,c	;volatile
  4906  001248  A4D8               	btfss	status,2,c
  4907  00124A  D015               	goto	i2l69
  4908                           
  4909                           ;main.c: 59:     {;main.c: 63:         static char RFIDbuf[12];;main.c: 67:         char
      +                           RFID_flag = processRFID(RFIDbuf, RCREG);
  4910  00124C  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  4911  00124E  6E06               	movwf	processRFID@RFIDbuf,c
  4912  001250  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  4913  001252  6E07               	movwf	processRFID@RFIDbuf+1,c
  4914  001254  CFAE F008          	movff	4014,processRFID@latestChar	;volatile
  4915  001258  EC09  F008         	call	_processRFID	;wreg free
  4916  00125C  6E28               	movwf	InterruptHandlerHigh@RFID_flag,c
  4917                           
  4918                           ;main.c: 71:         if(RFID_flag == 1)
  4919  00125E  0428               	decf	InterruptHandlerHigh@RFID_flag,w,c
  4920  001260  A4D8               	btfss	status,2,c
  4921  001262  D00A               	goto	i2l74
  4922                           
  4923                           ;main.c: 72:         {;main.c: 73:             check_RFID(RFIDbuf);
  4924  001264  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  4925  001266  6E07               	movwf	check_RFID@dataBuf,c
  4926  001268  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  4927  00126A  6E08               	movwf	check_RFID@dataBuf+1,c
  4928  00126C  EC03  F004         	call	_check_RFID	;wreg free
  4929                           
  4930                           ;main.c: 74:             robot_mode = 1;
  4931  001270  0E01               	movlw	1
  4932  001272  6E2C               	movwf	_robot_mode,c	;volatile
  4933  001274  D001               	goto	i2l74
  4934  001276                     i2l69:
  4935  001276  50AE               	movf	4014,w,c	;volatile
  4936  001278                     i2l74:
  4937  001278  C026  FFF5         	movff	??_InterruptHandlerHigh+7,tablat
  4938  00127C  C025  FFF8         	movff	??_InterruptHandlerHigh+6,tblptru
  4939  001280  C024  FFF7         	movff	??_InterruptHandlerHigh+5,tblptrh
  4940  001284  C023  FFF6         	movff	??_InterruptHandlerHigh+4,tblptrl
  4941  001288  C022  FFDA         	movff	??_InterruptHandlerHigh+3,fsr2h
  4942  00128C  C021  FFD9         	movff	??_InterruptHandlerHigh+2,fsr2l
  4943  001290  C020  FFE2         	movff	??_InterruptHandlerHigh+1,fsr1h
  4944  001294  C01F  FFE1         	movff	??_InterruptHandlerHigh,fsr1l
  4945  001298  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4946  00129A  0011               	retfie		f
  4947  00129C                     __end_of_InterruptHandlerHigh:
  4948                           	opt callstack 0
  4949                           
  4950 ;; *************** function _processRFID *****************
  4951 ;; Defined at:
  4952 ;;		line 34 in file "RFID.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;  RFIDbuf         2    5[COMRAM] PTR unsigned char 
  4955 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  4956 ;;  latestChar      1    7[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  i               1   10[COMRAM] unsigned char 
  4959 ;;  i               2    8[COMRAM] int 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      unsigned char 
  4962 ;; Registers used:
  4963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4969 ;;      Params:         3       0       0       0
  4970 ;;      Locals:         3       0       0       0
  4971 ;;      Temps:          0       0       0       0
  4972 ;;      Totals:         6       0       0       0
  4973 ;;Total ram usage:        6 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    4
  4976 ;; This function calls:
  4977 ;;		i2_ClearLCD
  4978 ;;		i2_SendLCD
  4979 ;;		i2_SetLine
  4980 ;; This function is called by:
  4981 ;;		_InterruptHandlerHigh
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text35
  4986  001012                     __ptext35:
  4987                           	opt callstack 0
  4988  001012                     _processRFID:
  4989                           	opt callstack 16
  4990                           
  4991                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4992                           
  4993                           ;incstack = 0
  4994  001012  0E03               	movlw	3
  4995  001014  1808               	xorwf	processRFID@latestChar,w,c
  4996  001016  A4D8               	btfss	status,2,c
  4997  001018  D020               	goto	i2l2917
  4998                           
  4999                           ;RFID.c: 43:     {;RFID.c: 44:         ClearLCD();
  5000  00101A  ECDA  F00B         	call	i2_ClearLCD	;wreg free
  5001                           
  5002                           ;RFID.c: 45:         SetLine(1);
  5003  00101E  0E01               	movlw	1
  5004  001020  EC75  F00B         	call	i2_SetLine
  5005                           
  5006                           ;RFID.c: 46:         for(int i=0;i<10;i++)
  5007  001024  0E00               	movlw	0
  5008  001026  6E0A               	movwf	processRFID@i+1,c
  5009  001028  0E00               	movlw	0
  5010  00102A  6E09               	movwf	processRFID@i,c
  5011  00102C                     i2l2905:
  5012                           
  5013                           ;RFID.c: 47:         {;RFID.c: 48:             SendLCD(RFIDbuf[i],1);
  5014  00102C  0E01               	movlw	1
  5015  00102E  6E03               	movwf	i2SendLCD@type,c
  5016  001030  5009               	movf	processRFID@i,w,c
  5017  001032  2406               	addwf	processRFID@RFIDbuf,w,c
  5018  001034  6ED9               	movwf	fsr2l,c
  5019  001036  500A               	movf	processRFID@i+1,w,c
  5020  001038  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  5021  00103A  6EDA               	movwf	fsr2h,c
  5022  00103C  50DF               	movf	indf2,w,c
  5023  00103E  EC46  F00B         	call	i2_SendLCD
  5024                           
  5025                           ;RFID.c: 49:         }
  5026  001042  4A09               	infsnz	processRFID@i,f,c
  5027  001044  2A0A               	incf	processRFID@i+1,f,c
  5028  001046  BE0A               	btfsc	processRFID@i+1,7,c
  5029  001048  D7F1               	goto	i2l2905
  5030  00104A  500A               	movf	processRFID@i+1,w,c
  5031  00104C  E104               	bnz	i2u241_40
  5032  00104E  0E0A               	movlw	10
  5033  001050  5C09               	subwf	processRFID@i,w,c
  5034  001052  A0D8               	btfss	status,0,c
  5035  001054  D7EB               	goto	i2l2905
  5036  001056                     i2u241_40:
  5037                           
  5038                           ;RFID.c: 51:         return 1;
  5039  001056  0E01               	movlw	1
  5040  001058  0012               	return	
  5041  00105A                     i2l2917:
  5042                           
  5043                           ;RFID.c: 54:     {;RFID.c: 57:        if(latestChar == 0x02)
  5044  00105A  0E02               	movlw	2
  5045  00105C  1808               	xorwf	processRFID@latestChar,w,c
  5046  00105E  A4D8               	btfss	status,2,c
  5047  001060  D012               	goto	i2l2937
  5048                           
  5049                           ;RFID.c: 58:         {;RFID.c: 59:            position_in_buf = 0;
  5050  001062  0E00               	movlw	0
  5051  001064  6E2B               	movwf	processRFID@position_in_buf,c
  5052                           
  5053                           ;RFID.c: 60:            for(char i=0 ;i<12 ;i++)
  5054  001066  0E00               	movlw	0
  5055  001068  6E0B               	movwf	processRFID@i_1218,c
  5056  00106A                     i2l2925:
  5057                           
  5058                           ;RFID.c: 61:            {;RFID.c: 62:                RFIDbuf[i] = 0;
  5059  00106A  500B               	movf	processRFID@i_1218,w,c
  5060  00106C  2406               	addwf	processRFID@RFIDbuf,w,c
  5061  00106E  6ED9               	movwf	fsr2l,c
  5062  001070  0E00               	movlw	0
  5063  001072  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  5064  001074  6EDA               	movwf	fsr2h,c
  5065  001076  0E00               	movlw	0
  5066  001078  6EDF               	movwf	indf2,c
  5067                           
  5068                           ;RFID.c: 63:            }
  5069  00107A  2A0B               	incf	processRFID@i_1218,f,c
  5070  00107C  0E0B               	movlw	11
  5071  00107E  640B               	cpfsgt	processRFID@i_1218,c
  5072  001080  D7F4               	goto	i2l2925
  5073  001082                     i2u243_40:
  5074                           
  5075                           ;RFID.c: 65:            return 0;
  5076  001082  0E00               	movlw	0
  5077  001084  0012               	return	
  5078  001086                     i2l2937:
  5079                           
  5080                           ;RFID.c: 69:         {;RFID.c: 70:             RFIDbuf[position_in_buf] = latestChar;
  5081  001086  502B               	movf	processRFID@position_in_buf,w,c
  5082  001088  2406               	addwf	processRFID@RFIDbuf,w,c
  5083  00108A  6ED9               	movwf	fsr2l,c
  5084  00108C  0E00               	movlw	0
  5085  00108E  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  5086  001090  6EDA               	movwf	fsr2h,c
  5087  001092  C008  FFDF         	movff	processRFID@latestChar,indf2
  5088                           
  5089                           ;RFID.c: 71:             position_in_buf++;
  5090  001096  2A2B               	incf	processRFID@position_in_buf,f,c
  5091  001098  D7F4               	goto	i2u243_40
  5092  00109A                     __end_of_processRFID:
  5093                           	opt callstack 0
  5094                           
  5095 ;; *************** function i2_ClearLCD *****************
  5096 ;; Defined at:
  5097 ;;		line 137 in file "LCDIO.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      void 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5111 ;;      Params:         0       0       0       0
  5112 ;;      Locals:         0       0       0       0
  5113 ;;      Temps:          1       0       0       0
  5114 ;;      Totals:         1       0       0       0
  5115 ;;Total ram usage:        1 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    3
  5118 ;; This function calls:
  5119 ;;		i2_SendLCD
  5120 ;; This function is called by:
  5121 ;;		_processRFID
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text36
  5126  0017B4                     __ptext36:
  5127                           	opt callstack 0
  5128  0017B4                     i2_ClearLCD:
  5129                           	opt callstack 16
  5130                           
  5131                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  5132                           
  5133                           ;incstack = 0
  5134  0017B4  0E00               	movlw	0
  5135  0017B6  6E03               	movwf	i2SendLCD@type,c
  5136  0017B8  0E01               	movlw	1
  5137  0017BA  EC46  F00B         	call	i2_SendLCD
  5138                           
  5139                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  5140  0017BE  0E0D               	movlw	13
  5141  0017C0  6E05               	movwf	??i2_ClearLCD& (0+255),c
  5142  0017C2  0EFC               	movlw	252
  5143  0017C4                     i2u306_47:
  5144  0017C4  2EE8               	decfsz	wreg,f,c
  5145  0017C6  D7FE               	bra	i2u306_47
  5146  0017C8  2E05               	decfsz	??i2_ClearLCD& (0+255),f,c
  5147  0017CA  D7FC               	bra	i2u306_47
  5148  0017CC  0012               	return		;funcret
  5149  0017CE                     __end_ofi2_ClearLCD:
  5150                           	opt callstack 0
  5151                           
  5152 ;; *************** function _check_RFID *****************
  5153 ;; Defined at:
  5154 ;;		line 79 in file "RFID.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  dataBuf         2    6[COMRAM] PTR unsigned char 
  5157 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  i               2   28[COMRAM] int 
  5160 ;;  hexBuf         12   10[COMRAM] unsigned char [12]
  5161 ;;  checksum        1   27[COMRAM] unsigned char 
  5162 ;;  byte5           1   26[COMRAM] unsigned char 
  5163 ;;  byte4           1   25[COMRAM] unsigned char 
  5164 ;;  byte3           1   24[COMRAM] unsigned char 
  5165 ;;  byte2           1   23[COMRAM] unsigned char 
  5166 ;;  byte1           1   22[COMRAM] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5176 ;;      Params:         2       0       0       0
  5177 ;;      Locals:        20       0       0       0
  5178 ;;      Temps:          2       0       0       0
  5179 ;;      Totals:        24       0       0       0
  5180 ;;Total ram usage:       24 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    4
  5183 ;; This function calls:
  5184 ;;		i2_LCD_String
  5185 ;;		i2_SetLine
  5186 ;; This function is called by:
  5187 ;;		_InterruptHandlerHigh
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text37
  5192  000806                     __ptext37:
  5193                           	opt callstack 0
  5194  000806                     _check_RFID:
  5195                           	opt callstack 16
  5196                           
  5197                           ;RFID.c: 79: void check_RFID(char dataBuf[]);RFID.c: 80: {;RFID.c: 82:     char hexBuf[1
      +                          2];;RFID.c: 84:     for(int i=0; i<12;i++)
  5198                           
  5199                           ;incstack = 0
  5200  000806  0E00               	movlw	0
  5201  000808  6E1E               	movwf	check_RFID@i+1,c
  5202  00080A  0E00               	movlw	0
  5203  00080C  6E1D               	movwf	check_RFID@i,c
  5204  00080E                     i2l2951:
  5205                           
  5206                           ;RFID.c: 85:     {;RFID.c: 86:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  5207  00080E  501D               	movf	check_RFID@i,w,c
  5208  000810  2407               	addwf	check_RFID@dataBuf,w,c
  5209  000812  6ED9               	movwf	fsr2l,c
  5210  000814  501E               	movf	check_RFID@i+1,w,c
  5211  000816  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5212  000818  6EDA               	movwf	fsr2h,c
  5213  00081A  0E2F               	movlw	47
  5214  00081C  64DF               	cpfsgt	indf2,c
  5215  00081E  D018               	goto	i2l2957
  5216  000820  501D               	movf	check_RFID@i,w,c
  5217  000822  2407               	addwf	check_RFID@dataBuf,w,c
  5218  000824  6ED9               	movwf	fsr2l,c
  5219  000826  501E               	movf	check_RFID@i+1,w,c
  5220  000828  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5221  00082A  6EDA               	movwf	fsr2h,c
  5222  00082C  0E3A               	movlw	58
  5223  00082E  60DF               	cpfslt	indf2,c
  5224  000830  D00F               	goto	i2l2957
  5225                           
  5226                           ;RFID.c: 87:         {;RFID.c: 88:             hexBuf[i] = dataBuf[i] - '0';
  5227  000832  0E0B               	movlw	low check_RFID@hexBuf
  5228  000834  241D               	addwf	check_RFID@i,w,c
  5229  000836  6ED9               	movwf	fsr2l,c
  5230  000838  0E00               	movlw	high check_RFID@hexBuf
  5231  00083A  201E               	addwfc	check_RFID@i+1,w,c
  5232  00083C  6EDA               	movwf	fsr2h,c
  5233  00083E  501D               	movf	check_RFID@i,w,c
  5234  000840  2407               	addwf	check_RFID@dataBuf,w,c
  5235  000842  6EE1               	movwf	fsr1l,c
  5236  000844  501E               	movf	check_RFID@i+1,w,c
  5237  000846  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5238  000848  6EE2               	movwf	fsr1h,c
  5239  00084A  50E7               	movf	indf1,w,c
  5240  00084C  0FD0               	addlw	208
  5241  00084E  D020               	goto	L1
  5242  000850                     i2l2957:
  5243  000850  501D               	movf	check_RFID@i,w,c
  5244  000852  2407               	addwf	check_RFID@dataBuf,w,c
  5245  000854  6ED9               	movwf	fsr2l,c
  5246  000856  501E               	movf	check_RFID@i+1,w,c
  5247  000858  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5248  00085A  6EDA               	movwf	fsr2h,c
  5249  00085C  0E40               	movlw	64
  5250  00085E  64DF               	cpfsgt	indf2,c
  5251  000860  D018               	goto	i2l2963
  5252  000862  501D               	movf	check_RFID@i,w,c
  5253  000864  2407               	addwf	check_RFID@dataBuf,w,c
  5254  000866  6ED9               	movwf	fsr2l,c
  5255  000868  501E               	movf	check_RFID@i+1,w,c
  5256  00086A  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5257  00086C  6EDA               	movwf	fsr2h,c
  5258  00086E  0E47               	movlw	71
  5259  000870  60DF               	cpfslt	indf2,c
  5260  000872  D00F               	goto	i2l2963
  5261                           
  5262                           ;RFID.c: 90:         {;RFID.c: 91:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  5263  000874  0E0B               	movlw	low check_RFID@hexBuf
  5264  000876  241D               	addwf	check_RFID@i,w,c
  5265  000878  6ED9               	movwf	fsr2l,c
  5266  00087A  0E00               	movlw	high check_RFID@hexBuf
  5267  00087C  201E               	addwfc	check_RFID@i+1,w,c
  5268  00087E  6EDA               	movwf	fsr2h,c
  5269  000880  501D               	movf	check_RFID@i,w,c
  5270  000882  2407               	addwf	check_RFID@dataBuf,w,c
  5271  000884  6EE1               	movwf	fsr1l,c
  5272  000886  501E               	movf	check_RFID@i+1,w,c
  5273  000888  2008               	addwfc	check_RFID@dataBuf+1,w,c
  5274  00088A  6EE2               	movwf	fsr1h,c
  5275  00088C  50E7               	movf	indf1,w,c
  5276  00088E  0FC9               	addlw	201
  5277  000890                     L1:
  5278  000890  6EDF               	movwf	indf2,c
  5279  000892                     i2l2963:
  5280                           
  5281                           ;RFID.c: 93:     }
  5282  000892  4A1D               	infsnz	check_RFID@i,f,c
  5283  000894  2A1E               	incf	check_RFID@i+1,f,c
  5284  000896  BE1E               	btfsc	check_RFID@i+1,7,c
  5285  000898  D7BA               	goto	i2l2951
  5286  00089A  501E               	movf	check_RFID@i+1,w,c
  5287  00089C  E104               	bnz	i2u248_40
  5288  00089E  0E0C               	movlw	12
  5289  0008A0  5C1D               	subwf	check_RFID@i,w,c
  5290  0008A2  A0D8               	btfss	status,0,c
  5291  0008A4  D7B4               	goto	i2l2951
  5292  0008A6                     i2u248_40:
  5293                           
  5294                           ;RFID.c: 95:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  5295  0008A6  500B               	movf	check_RFID@hexBuf,w,c
  5296  0008A8  A4D8               	btfss	status,2,c
  5297  0008AA  D002               	goto	i2u249_40
  5298  0008AC  0E01               	movlw	1
  5299  0008AE  D001               	goto	i2u250_40
  5300  0008B0                     i2u249_40:
  5301  0008B0  0E00               	movlw	0
  5302  0008B2                     i2u250_40:
  5303  0008B2  100C               	iorwf	check_RFID@hexBuf+1,w,c
  5304  0008B4  6E17               	movwf	check_RFID@byte1,c
  5305                           
  5306                           ;RFID.c: 96:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  5307  0008B6  500D               	movf	check_RFID@hexBuf+2,w,c
  5308  0008B8  A4D8               	btfss	status,2,c
  5309  0008BA  D002               	goto	i2u251_40
  5310  0008BC  0E01               	movlw	1
  5311  0008BE  D001               	goto	i2u252_40
  5312  0008C0                     i2u251_40:
  5313  0008C0  0E00               	movlw	0
  5314  0008C2                     i2u252_40:
  5315  0008C2  100E               	iorwf	check_RFID@hexBuf+3,w,c
  5316  0008C4  6E18               	movwf	check_RFID@byte2,c
  5317                           
  5318                           ;RFID.c: 97:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  5319  0008C6  500F               	movf	check_RFID@hexBuf+4,w,c
  5320  0008C8  A4D8               	btfss	status,2,c
  5321  0008CA  D002               	goto	i2u253_40
  5322  0008CC  0E01               	movlw	1
  5323  0008CE  D001               	goto	i2u254_40
  5324  0008D0                     i2u253_40:
  5325  0008D0  0E00               	movlw	0
  5326  0008D2                     i2u254_40:
  5327  0008D2  1010               	iorwf	check_RFID@hexBuf+5,w,c
  5328  0008D4  6E19               	movwf	check_RFID@byte3,c
  5329                           
  5330                           ;RFID.c: 98:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  5331  0008D6  5011               	movf	check_RFID@hexBuf+6,w,c
  5332  0008D8  A4D8               	btfss	status,2,c
  5333  0008DA  D002               	goto	i2u255_40
  5334  0008DC  0E01               	movlw	1
  5335  0008DE  D001               	goto	i2u256_40
  5336  0008E0                     i2u255_40:
  5337  0008E0  0E00               	movlw	0
  5338  0008E2                     i2u256_40:
  5339  0008E2  1012               	iorwf	check_RFID@hexBuf+7,w,c
  5340  0008E4  6E1A               	movwf	check_RFID@byte4,c
  5341                           
  5342                           ;RFID.c: 99:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  5343  0008E6  5013               	movf	check_RFID@hexBuf+8,w,c
  5344  0008E8  A4D8               	btfss	status,2,c
  5345  0008EA  D002               	goto	i2u257_40
  5346  0008EC  0E01               	movlw	1
  5347  0008EE  D001               	goto	i2u258_40
  5348  0008F0                     i2u257_40:
  5349  0008F0  0E00               	movlw	0
  5350  0008F2                     i2u258_40:
  5351  0008F2  1014               	iorwf	check_RFID@hexBuf+9,w,c
  5352  0008F4  6E1B               	movwf	check_RFID@byte5,c
  5353                           
  5354                           ;RFID.c: 100:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  5355  0008F6  5015               	movf	check_RFID@hexBuf+10,w,c
  5356  0008F8  A4D8               	btfss	status,2,c
  5357  0008FA  D002               	goto	i2u259_40
  5358  0008FC  0E01               	movlw	1
  5359  0008FE  D001               	goto	i2u260_40
  5360  000900                     i2u259_40:
  5361  000900  0E00               	movlw	0
  5362  000902                     i2u260_40:
  5363  000902  1016               	iorwf	check_RFID@hexBuf+11,w,c
  5364  000904  6E1C               	movwf	check_RFID@checksum,c
  5365                           
  5366                           ;RFID.c: 103:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  5367  000906  5017               	movf	check_RFID@byte1,w,c
  5368  000908  1818               	xorwf	check_RFID@byte2,w,c
  5369  00090A  1819               	xorwf	check_RFID@byte3,w,c
  5370  00090C  181A               	xorwf	check_RFID@byte4,w,c
  5371  00090E  6E09               	movwf	??_check_RFID& (0+255),c
  5372  000910  6A0A               	clrf	(??_check_RFID+1)& (0+255),c
  5373  000912  501C               	movf	check_RFID@checksum,w,c
  5374  000914  181B               	xorwf	check_RFID@byte5,w,c
  5375  000916  A4D8               	btfss	status,2,c
  5376  000918  D002               	goto	i2u261_40
  5377  00091A  0E01               	movlw	1
  5378  00091C  D001               	goto	i2u262_40
  5379  00091E                     i2u261_40:
  5380  00091E  0E00               	movlw	0
  5381  000920                     i2u262_40:
  5382  000920  1A09               	xorwf	??_check_RFID,f,c
  5383  000922  0E00               	movlw	0
  5384  000924  1A0A               	xorwf	??_check_RFID+1,f,c
  5385  000926  5009               	movf	??_check_RFID,w,c
  5386  000928  100A               	iorwf	??_check_RFID+1,w,c
  5387  00092A  B4D8               	btfsc	status,2,c
  5388  00092C  D00A               	goto	i2l2973
  5389                           
  5390                           ;RFID.c: 104:     {;RFID.c: 106:         SetLine(2);
  5391  00092E  0E02               	movlw	2
  5392  000930  EC75  F00B         	call	i2_SetLine
  5393                           
  5394                           ;RFID.c: 107:         LCD_String("CHECKSUM PASSED");
  5395  000934  0E11               	movlw	low STR_4
  5396  000936  6E05               	movwf	i2LCD_String@string,c
  5397  000938  0E03               	movlw	high STR_4
  5398  00093A  6E06               	movwf	i2LCD_String@string+1,c
  5399  00093C  ECF5  F009         	call	i2_LCD_String	;wreg free
  5400                           
  5401                           ;RFID.c: 108:     }
  5402  000940  0012               	return	
  5403  000942                     i2l2973:
  5404                           
  5405                           ;RFID.c: 111:         SetLine(2);
  5406  000942  0E02               	movlw	2
  5407  000944  EC75  F00B         	call	i2_SetLine
  5408                           
  5409                           ;RFID.c: 112:         LCD_String("CHECKSUM FAILED");
  5410  000948  0E01               	movlw	low STR_5
  5411  00094A  6E05               	movwf	i2LCD_String@string,c
  5412  00094C  0E03               	movlw	high STR_5
  5413  00094E  6E06               	movwf	i2LCD_String@string+1,c
  5414  000950  ECF5  F009         	call	i2_LCD_String	;wreg free
  5415  000954  0012               	return		;funcret
  5416  000956                     __end_of_check_RFID:
  5417                           	opt callstack 0
  5418                           
  5419 ;; *************** function i2_SetLine *****************
  5420 ;; Defined at:
  5421 ;;		line 107 in file "LCDIO.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  line            1    wreg     unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  line            1    4[COMRAM] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      void 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5435 ;;      Params:         0       0       0       0
  5436 ;;      Locals:         1       0       0       0
  5437 ;;      Temps:          0       0       0       0
  5438 ;;      Totals:         1       0       0       0
  5439 ;;Total ram usage:        1 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    3
  5442 ;; This function calls:
  5443 ;;		i2_SendLCD
  5444 ;; This function is called by:
  5445 ;;		_processRFID
  5446 ;;		_check_RFID
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text38
  5451  0016EA                     __ptext38:
  5452                           	opt callstack 0
  5453  0016EA                     i2_SetLine:
  5454                           	opt callstack 16
  5455                           
  5456                           ;incstack = 0
  5457                           ;i2SetLine@line stored from wreg
  5458  0016EA  6E05               	movwf	i2SetLine@line,c
  5459                           
  5460                           ;LCDIO.c: 109:     if(line == 1){
  5461  0016EC  0405               	decf	i2SetLine@line,w,c
  5462  0016EE  A4D8               	btfss	status,2,c
  5463  0016F0  D005               	goto	i2l2859
  5464                           
  5465                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  5466  0016F2  0E00               	movlw	0
  5467  0016F4  6E03               	movwf	i2SendLCD@type,c
  5468  0016F6  0E80               	movlw	128
  5469  0016F8  EC46  F00B         	call	i2_SendLCD
  5470  0016FC                     i2l2859:
  5471                           
  5472                           ;LCDIO.c: 113:     if(line == 2){
  5473  0016FC  0E02               	movlw	2
  5474  0016FE  1805               	xorwf	i2SetLine@line,w,c
  5475  001700  A4D8               	btfss	status,2,c
  5476  001702  D005               	goto	i2l2863
  5477                           
  5478                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  5479  001704  0E00               	movlw	0
  5480  001706  6E03               	movwf	i2SendLCD@type,c
  5481  001708  0EC0               	movlw	192
  5482  00170A  EC46  F00B         	call	i2_SendLCD
  5483  00170E                     i2l2863:
  5484                           
  5485                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  5486  00170E  0E21               	movlw	33
  5487  001710                     i2u307_47:
  5488  001710  2EE8               	decfsz	wreg,f,c
  5489  001712  D7FE               	bra	i2u307_47
  5490  001714  F000               	nop	
  5491  001716  0012               	return		;funcret
  5492  001718                     __end_ofi2_SetLine:
  5493                           	opt callstack 0
  5494                           
  5495 ;; *************** function i2_LCD_String *****************
  5496 ;; Defined at:
  5497 ;;		line 119 in file "LCDIO.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  string          2    4[COMRAM] PTR unsigned char 
  5500 ;;		 -> STR_5(16), STR_4(16), STR_3(16), main@temp1(16), 
  5501 ;;		 -> main@temp2(16), 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5513 ;;      Params:         2       0       0       0
  5514 ;;      Locals:         0       0       0       0
  5515 ;;      Temps:          0       0       0       0
  5516 ;;      Totals:         2       0       0       0
  5517 ;;Total ram usage:        2 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    3
  5520 ;; This function calls:
  5521 ;;		i2_SendLCD
  5522 ;; This function is called by:
  5523 ;;		_check_RFID
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text39
  5528  0013EA                     __ptext39:
  5529                           	opt callstack 0
  5530  0013EA                     i2_LCD_String:
  5531                           	opt callstack 16
  5532                           
  5533                           ;LCDIO.c: 121: while(*string != 0){
  5534                           
  5535                           ;incstack = 0
  5536  0013EA  D01A               	goto	i2l2873
  5537  0013EC                     i2l2867:
  5538                           
  5539                           ;LCDIO.c: 124: SendLCD(*string++,1);
  5540  0013EC  0E01               	movlw	1
  5541  0013EE  6E03               	movwf	i2SendLCD@type,c
  5542  0013F0  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  5543  0013F4  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  5544  0013F8  6AF8               	clrf	tblptru,c
  5545  0013FA  0E02               	movlw	(high __ramtop+-1)
  5546  0013FC  64F7               	cpfsgt	tblptrh,c
  5547  0013FE  D003               	bra	i2u236_47
  5548  001400  0008               	tblrd		*
  5549  001402  50F5               	movf	tablat,w,c
  5550  001404  D005               	bra	i2u236_40
  5551  001406                     i2u236_47:
  5552  001406  CFF6 FFE1          	movff	tblptrl,fsr1l
  5553  00140A  CFF7 FFE2          	movff	tblptrh,fsr1h
  5554  00140E  50E7               	movf	indf1,w,c
  5555  001410                     i2u236_40:
  5556  001410  EC46  F00B         	call	i2_SendLCD
  5557  001414  4A05               	infsnz	i2LCD_String@string,f,c
  5558  001416  2A06               	incf	i2LCD_String@string+1,f,c
  5559                           
  5560                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  5561  001418  0E21               	movlw	33
  5562  00141A                     i2u308_47:
  5563  00141A  2EE8               	decfsz	wreg,f,c
  5564  00141C  D7FE               	bra	i2u308_47
  5565  00141E  F000               	nop	
  5566  001420                     i2l2873:
  5567                           
  5568                           ;LCDIO.c: 121: while(*string != 0){
  5569  001420  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  5570  001424  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  5571  001428  6AF8               	clrf	tblptru,c
  5572  00142A  0E02               	movlw	(high __ramtop+-1)
  5573  00142C  64F7               	cpfsgt	tblptrh,c
  5574  00142E  D003               	bra	i2u237_47
  5575  001430  0008               	tblrd		*
  5576  001432  50F5               	movf	tablat,w,c
  5577  001434  D005               	bra	i2u237_40
  5578  001436                     i2u237_47:
  5579  001436  CFF6 FFE1          	movff	tblptrl,fsr1l
  5580  00143A  CFF7 FFE2          	movff	tblptrh,fsr1h
  5581  00143E  50E7               	movf	indf1,w,c
  5582  001440                     i2u237_40:
  5583  001440  0900               	iorlw	0
  5584  001442  B4D8               	btfsc	status,2,c
  5585  001444  0012               	return	
  5586  001446  D7D2               	goto	i2l2867
  5587  001448                     __end_ofi2_LCD_String:
  5588                           	opt callstack 0
  5589                           
  5590 ;; *************** function i2_SendLCD *****************
  5591 ;; Defined at:
  5592 ;;		line 44 in file "LCDIO.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  Byte            1    wreg     unsigned char 
  5595 ;;  type            1    2[COMRAM] unsigned char 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  Byte            1    3[COMRAM] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5607 ;;      Params:         1       0       0       0
  5608 ;;      Locals:         1       0       0       0
  5609 ;;      Temps:          0       0       0       0
  5610 ;;      Totals:         2       0       0       0
  5611 ;;Total ram usage:        2 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    2
  5614 ;; This function calls:
  5615 ;;		i2_LCDout
  5616 ;; This function is called by:
  5617 ;;		_processRFID
  5618 ;;		i2_SetLine
  5619 ;;		i2_LCD_String
  5620 ;;		i2_ClearLCD
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text40
  5625  00168C                     __ptext40:
  5626                           	opt callstack 0
  5627  00168C                     i2_SendLCD:
  5628                           	opt callstack 16
  5629                           
  5630                           ;incstack = 0
  5631                           ;i2SendLCD@Byte stored from wreg
  5632  00168C  6E04               	movwf	i2SendLCD@Byte,c
  5633                           
  5634                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  5635  00168E  B003               	btfsc	i2SendLCD@type,0,c
  5636  001690  D002               	bra	i2u229_45
  5637  001692  9E89               	bcf	3977,7,c	;volatile
  5638  001694  D001               	bra	i2u229_46
  5639  001696                     i2u229_45:
  5640  001696  8E89               	bsf	3977,7,c	;volatile
  5641  001698                     i2u229_46:
  5642                           
  5643                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  5644  001698  3804               	swapf	i2SendLCD@Byte,w,c
  5645  00169A  0B0F               	andlw	15
  5646  00169C  0B0F               	andlw	15
  5647  00169E  EC4E  F009         	call	i2_LCDout
  5648                           
  5649                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  5650  0016A2  0E06               	movlw	6
  5651  0016A4                     i2u309_47:
  5652  0016A4  2EE8               	decfsz	wreg,f,c
  5653  0016A6  D7FE               	bra	i2u309_47
  5654  0016A8  D000               	nop2	
  5655                           
  5656                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  5657  0016AA  5004               	movf	i2SendLCD@Byte,w,c
  5658  0016AC  0B0F               	andlw	15
  5659  0016AE  EC4E  F009         	call	i2_LCDout
  5660                           
  5661                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  5662  0016B2  0E21               	movlw	33
  5663  0016B4                     i2u310_47:
  5664  0016B4  2EE8               	decfsz	wreg,f,c
  5665  0016B6  D7FE               	bra	i2u310_47
  5666  0016B8  F000               	nop	
  5667  0016BA  0012               	return		;funcret
  5668  0016BC                     __end_ofi2_SendLCD:
  5669                           	opt callstack 0
  5670                           
  5671 ;; *************** function i2_LCDout *****************
  5672 ;; Defined at:
  5673 ;;		line 31 in file "LCDIO.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  number          1    wreg     unsigned char 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  number          1    1[COMRAM] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;                  1    wreg      void 
  5680 ;; Registers used:
  5681 ;;		wreg, status,2, status,0, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5687 ;;      Params:         0       0       0       0
  5688 ;;      Locals:         1       0       0       0
  5689 ;;      Temps:          1       0       0       0
  5690 ;;      Totals:         2       0       0       0
  5691 ;;Total ram usage:        2 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    1
  5694 ;; This function calls:
  5695 ;;		i2_E_TOG
  5696 ;; This function is called by:
  5697 ;;		i2_SendLCD
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text41
  5702  00129C                     __ptext41:
  5703                           	opt callstack 0
  5704  00129C                     i2_LCDout:
  5705                           	opt callstack 16
  5706                           
  5707                           ;incstack = 0
  5708                           ;i2LCDout@number stored from wreg
  5709  00129C  6E02               	movwf	i2LCDout@number,c
  5710                           
  5711                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  5712  00129E  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  5713  0012A2  0E01               	movlw	1
  5714  0012A4  1601               	andwf	??i2_LCDout,f,c
  5715  0012A6  508B               	movf	3979,w,c	;volatile
  5716  0012A8  1801               	xorwf	??i2_LCDout,w,c
  5717  0012AA  0BFE               	andlw	-2
  5718  0012AC  1801               	xorwf	??i2_LCDout,w,c
  5719  0012AE  6E8B               	movwf	3979,c	;volatile
  5720                           
  5721                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  5722  0012B0  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  5723  0012B4  90D8               	bcf	status,0,c
  5724  0012B6  3201               	rrcf	??i2_LCDout,f,c
  5725  0012B8  0E01               	movlw	1
  5726  0012BA  1601               	andwf	??i2_LCDout,f,c
  5727  0012BC  4601               	rlncf	??i2_LCDout,f,c
  5728  0012BE  4601               	rlncf	??i2_LCDout,f,c
  5729  0012C0  4601               	rlncf	??i2_LCDout,f,c
  5730  0012C2  508B               	movf	3979,w,c	;volatile
  5731  0012C4  1801               	xorwf	??i2_LCDout,w,c
  5732  0012C6  0BF7               	andlw	-9
  5733  0012C8  1801               	xorwf	??i2_LCDout,w,c
  5734  0012CA  6E8B               	movwf	3979,c	;volatile
  5735                           
  5736                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  5737  0012CC  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  5738  0012D0  90D8               	bcf	status,0,c
  5739  0012D2  3201               	rrcf	??i2_LCDout,f,c
  5740  0012D4  90D8               	bcf	status,0,c
  5741  0012D6  3201               	rrcf	??i2_LCDout,f,c
  5742  0012D8  0E01               	movlw	1
  5743  0012DA  1601               	andwf	??i2_LCDout,f,c
  5744  0012DC  508C               	movf	3980,w,c	;volatile
  5745  0012DE  1801               	xorwf	??i2_LCDout,w,c
  5746  0012E0  0BFE               	andlw	-2
  5747  0012E2  1801               	xorwf	??i2_LCDout,w,c
  5748  0012E4  6E8C               	movwf	3980,c	;volatile
  5749                           
  5750                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  5751  0012E6  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  5752  0012EA  90D8               	bcf	status,0,c
  5753  0012EC  3201               	rrcf	??i2_LCDout,f,c
  5754  0012EE  90D8               	bcf	status,0,c
  5755  0012F0  3201               	rrcf	??i2_LCDout,f,c
  5756  0012F2  90D8               	bcf	status,0,c
  5757  0012F4  3201               	rrcf	??i2_LCDout,f,c
  5758  0012F6  0E01               	movlw	1
  5759  0012F8  1601               	andwf	??i2_LCDout,f,c
  5760  0012FA  4601               	rlncf	??i2_LCDout,f,c
  5761  0012FC  508C               	movf	3980,w,c	;volatile
  5762  0012FE  1801               	xorwf	??i2_LCDout,w,c
  5763  001300  0BFD               	andlw	-3
  5764  001302  1801               	xorwf	??i2_LCDout,w,c
  5765  001304  6E8C               	movwf	3980,c	;volatile
  5766                           
  5767                           ;LCDIO.c: 39:  E_TOG();
  5768  001306  ECEE  F00B         	call	i2_E_TOG	;wreg free
  5769                           
  5770                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5771  00130A  0E03               	movlw	3
  5772  00130C                     i2u311_47:
  5773  00130C  2EE8               	decfsz	wreg,f,c
  5774  00130E  D7FE               	bra	i2u311_47
  5775  001310  F000               	nop	
  5776  001312  0012               	return		;funcret
  5777  001314                     __end_ofi2_LCDout:
  5778                           	opt callstack 0
  5779                           
  5780 ;; *************** function i2_E_TOG *****************
  5781 ;; Defined at:
  5782 ;;		line 23 in file "LCDIO.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5796 ;;      Params:         0       0       0       0
  5797 ;;      Locals:         0       0       0       0
  5798 ;;      Temps:          0       0       0       0
  5799 ;;      Totals:         0       0       0       0
  5800 ;;Total ram usage:        0 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		i2_LCDout
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text42
  5810  0017DC                     __ptext42:
  5811                           	opt callstack 0
  5812  0017DC                     i2_E_TOG:
  5813                           	opt callstack 16
  5814                           
  5815                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  5816                           
  5817                           ;incstack = 0
  5818  0017DC  8C89               	bsf	3977,6,c	;volatile
  5819                           
  5820                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5821  0017DE  0E03               	movlw	3
  5822  0017E0                     i2u312_47:
  5823  0017E0  2EE8               	decfsz	wreg,f,c
  5824  0017E2  D7FE               	bra	i2u312_47
  5825  0017E4  F000               	nop	
  5826                           
  5827                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  5828  0017E6  9C89               	bcf	3977,6,c	;volatile
  5829  0017E8  0012               	return		;funcret
  5830  0017EA                     __end_ofi2_E_TOG:
  5831                           	opt callstack 0
  5832                           
  5833                           	psect	rparam
  5834  0000                     
  5835                           	psect	temp
  5836  000039                     btemp:
  5837                           	opt callstack 0
  5838  000039                     	ds	1
  5839  0000                     int$flags	set	btemp
  5840  0000                     wtemp8	set	btemp+1
  5841  0000                     ttemp5	set	btemp+1
  5842  0000                     ttemp6	set	btemp+4
  5843  0000                     ttemp7	set	btemp+8
  5844                           tosu	equ	0xFFF
  5845                           tosh	equ	0xFFE
  5846                           tosl	equ	0xFFD
  5847                           stkptr	equ	0xFFC
  5848                           pclatu	equ	0xFFB
  5849                           pclath	equ	0xFFA
  5850                           pcl	equ	0xFF9
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           indf0	equ	0xFEF
  5858                           postinc0	equ	0xFEE
  5859                           postdec0	equ	0xFED
  5860                           preinc0	equ	0xFEC
  5861                           plusw0	equ	0xFEB
  5862                           fsr0h	equ	0xFEA
  5863                           fsr0l	equ	0xFE9
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           postinc1	equ	0xFE6
  5867                           postdec1	equ	0xFE5
  5868                           preinc1	equ	0xFE4
  5869                           plusw1	equ	0xFE3
  5870                           fsr1h	equ	0xFE2
  5871                           fsr1l	equ	0xFE1
  5872                           bsr	equ	0xFE0
  5873                           indf2	equ	0xFDF
  5874                           postinc2	equ	0xFDE
  5875                           postdec2	equ	0xFDD
  5876                           preinc2	equ	0xFDC
  5877                           plusw2	equ	0xFDB
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      56
    BANK0           160    104     110
    BANK1           256     61      93
    BANK2           256      0       0

Pointer List with Targets:

    moveToBeacon@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveToBeacon@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveToBeacon@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveToBeacon@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK1[16]), main@temp2(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK1[16]), main@temp2(BANK1[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1771_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK1[16]), main@temp2(BANK1[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK1[16]), main@temp2(BANK1[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    process_signal@S	PTR struct Sensor size(2) Largest target is 4
		 -> main@sensorR(BANK1[4]), main@sensorL(BANK1[4]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[16]), main@temp1(BANK1[16]), 
		 -> main@temp2(BANK1[16]), 

    init_motors@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    init_motors@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mR(BANK0[2]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mL(BANK0[2]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mR(BANK0[2]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mL(BANK0[2]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mR(BANK0[2]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mL(BANK0[2]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 2
		 -> moveToBeacon@mR(BANK0[2]), moveToBeacon@mL(BANK0[2]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S331DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S331DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_check_RFID
    _processRFID->i2_ClearLCD
    _processRFID->i2_SetLine
    i2_ClearLCD->i2_SendLCD
    _check_RFID->i2_LCD_String
    i2_SetLine->i2_SendLCD
    i2_LCD_String->i2_SendLCD
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _process_signal->___wmul
    _moveToBeacon->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___wmul
    ___wmul->___awdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0   27786
                                            102 BANK0      2     2      0
                                              0 BANK1     61    61      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
                        _init_motors
                       _moveToBeacon
                     _process_signal
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7709
                                             86 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                             78 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             60 BANK0     18    12      6
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             28 BANK0     32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             17 BANK0     11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             10 BANK0      7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              1 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              1 BANK0     17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              1 BANK0     25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1538
                            _initPWM
                           _init_LCD
                          _init_RFID
                       _init_sensors
 ---------------------------------------------------------------------------------
 (2) _init_sensors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1386
                                              5 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _process_signal                                       3     1      2    1876
                                             15 BANK0      3     1      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                         5     1      4   10770
                                             31 BANK0      5     1      4
                     _fullSpeedAhead
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             7     3      4    3430
                                             24 BANK0      7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    3368
                                             24 BANK0      6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     2      4    3250
                                             24 BANK0      6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2754
                                             15 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     642
                                              9 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     865
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _init_motors                                          4     0      4     552
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        6     2      4     338
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1324
                                              5 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1707
                                              5 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _ClearLCD                                             1     1      0    1262
                                              5 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1262
                                              3 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                              1 BANK0      2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerLow                                  1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                               10    10      0    4095
                                             30 COMRAM    10    10      0
                         _check_RFID
                        _processRFID
 ---------------------------------------------------------------------------------
 (11) _processRFID                                         6     3      3    1802
                                              5 COMRAM     6     3      3
                         i2_ClearLCD
                          i2_SendLCD
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (12) i2_ClearLCD                                          1     1      0     392
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (11) _check_RFID                                         24    22      2    2256
                                              6 COMRAM    24    22      2
                       i2_LCD_String
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (12) i2_SetLine                                           1     1      0     454
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (12) i2_LCD_String                                        2     0      2     527
                                              4 COMRAM     2     0      2
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (13) i2_SendLCD                                           2     1      1     392
                                              2 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (14) i2_LCDout                                            2     2      0     124
                                              0 COMRAM     2     2      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (15) i2_E_TOG                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _classify_data
   _init_motors
   _moveToBeacon
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
     _stop
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
     _turnLeft
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
   _process_signal
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensors
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _check_RFID
     i2_LCD_String
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
   _processRFID
     i2_ClearLCD
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SendLCD
       i2_LCDout
         i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     3D      5D       7       36.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     68      6E       5       68.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      38       1       59.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     103       3        0.0%
DATA                 0      0     103      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 02 17:37:05 2020

                           l61 1660                   ___awdiv@sign 0066                             bsr 000FE0  
          ___wmul@multiplicand 006B                    ?_LCD_String 0065                            l132 0A28  
                          l323 0E86                            l333 0364                            l335 036C  
                          l806 0D90                            l796 0CE0                            _pad 0E54  
               moveToBeacon@mL 007F                 moveToBeacon@mR 0081                            wreg 000FE8  
                 processRFID@i 0009                   __CFG_LVP$OFF 000000                           l3015 157C  
                         l3007 1574                           l3111 0622                           l3041 163E  
                         l3025 0FBE                           l3113 062A                           l3115 062E  
                         l3061 138A                           l3045 1652                           l3029 0FF2  
                         l3117 0636                           l3135 068A                           l3127 0652  
                         l2513 0E6E                           l3067 13C2                           l2523 0EAA  
                         l2603 0492                           l2517 0E7E                           l3085 0516  
                         l2631 1136                           l2527 0ED6                           l2519 0E90  
                         l2711 07AC                           l2537 0C5A                           l2705 0770  
                         l2721 07D0                           l2643 115C                           l2539 0C6E  
                         l2491 15A4                           l2715 07B8                           l2645 1164  
                         l2637 1146                           l2549 0CCA                           l2565 0D7A  
                         l2557 0D1E                           l2477 0DCC                           l2663 119C  
                         l2655 1184                           l2559 0D32                           l2487 158C  
                         l2495 16C6                           l2817 10C4                           l2497 16CC  
                         l2593 03A4                           l2659 118E                           l2851 145A  
                         l2837 133E                           l2853 1482                           ?_pad 0071  
                         l2679 09FE                           l2799 14FA                           STR_1 033B  
                         STR_2 0331                           STR_3 0321                           STR_4 0311  
                         STR_5 0301                           u2011 0C38                           u2030 0C72  
                         u2120 04BE                           u2121 04BC                           u2130 04CC  
                         u2060 0D36                           u2140 04D0                           u2310 111E  
                         _LATB 000F8A                           u3007 13BC                           u2224 09D0  
                         u2320 1386                           u3017 1754                           u2225 09CC  
                         u2234 0A1A                           u2090 035A                           u3027 15DA  
                         u2235 0A16                           u2180 1168                           u3037 15EC  
                         u2245 0A74                           u3047 121A                           u2255 15CA  
                         u2256 15CC                           u3057 17D2                           u2720 13B0  
                         u2640 1560                           u1920 0DC4                           u2800 0682  
                         u2730 13E2                           u2650 1570                           u2810 068E  
                         u1940 0E0C                           u2727 13A6                           u2737 13D8  
                         u2907 0ACC                           u2917 0ADA                           u2927 0AE8  
                         u2937 0AFC                           u2947 0B10                           u2867 0614  
                         u2957 0B2A                           u2877 065E                           u2967 0B42  
                         u2887 0AA4                           u2977 0B56                           u2897 0ABA  
                         u2987 10FC                           u2997 1654                           i2l74 1278  
                         i2l69 1276                __end_ofi2_E_TOG 17EA                           _dbuf 013D  
                         _main 04FA                           _prec 00CA                           _nout 0029  
                         pad@i 0078                           pad@p 0075                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 007A                           fsr2l 000FD9  
                         btemp 0039                           _stop 14F0                           _utoa 0346  
                  main@sensorL 0135                    main@sensorR 0139                           prodh 000FF4  
                         prodl 000FF3                           start 0026                   ___param_bank 000000  
            processRFID@i_1218 000B                __end_of_SendLCD 15F4                          ??_pad 0077  
              __end_of_SetLine 165C                          ?_main 0001                __end_of___awdiv 11A6  
                        ?_stop 0078                          ?_utoa 007C                __end_of___lodiv 0D02  
              ___awdiv@divisor 0063                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                __end_of___lomod 0DB2                          _PDC1L 000F77  
                        _T5CON 000FB7                ___awdiv@counter 0065                          _RCREG 000FAE  
                        _E_TOG 17CE                   vfpfcnvrt@fmt 009E                   vfpfcnvrt@llu 00A6  
             __end_ofi2_LCDout 1314                          _SPBRG 000FAF                    ?i2_ClearLCD 0001  
                 ?_init_motors 0061                __end_of_initPWM 179A                          _flags 00CC  
                        _fputc 0DB2                          _fputs 1580                          _setup 165C  
                        pad@fp 0071                          _width 00C8                          _putch 17EA  
                        main@i 0121             __size_ofi2_SendLCD 0030                          tablat 000FF5  
           __size_ofi2_SetLine 002E             processRFID@RFIDbuf 0006                          ttemp5 003A  
                        ttemp6 003D                          ttemp7 0041                          utoa@d 007E  
                        stop@i 007C                          utoa@i 009A                          utoa@n 0092  
                        utoa@p 008E                          utoa@w 0090                          status 000FD8  
                        wtemp8 003A            __size_of_LCD_String 0062                __end_of_sprintf 14F0  
             __end_of_ClearLCD 1760               ___lodiv@dividend 0061                 __CFG_MCLRE$OFF 000000  
              __initialization 15F4                   __end_of_main 0698                   __end_of_stop 1542  
                 __end_of_utoa 04FA                 __CFG_OSC$IRCIO 000000               LCD_String@string 0065  
                       ??_main 00C6    moveToBeacon@beacon_location 0083                         ??_stop 007C  
                       ??_utoa 0086                  __activetblptr 000002                         ?_E_TOG 0001  
             ___lodiv@quotient 0071                      ??i2_E_TOG 0001                   ?_setMotorPWM 006F  
                       ?_fputc 0061                         ?_fputs 006A               ___awdiv@dividend 0061  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       ?_putch 0001                         i2l2905 102C                         i2l2925 106A  
                       i2l2917 105A                         i2l2863 170E                         i2l2951 080E  
                       i2l2873 1420                         i2l2937 1086                         i2l2867 13EC  
                       i2l2859 16FC                         i2l2963 0892                         i2l2973 0942  
                       i2l2957 0850                         _LCDout 11A6                    SendLCD@Byte 0064  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 0063            main@beacon_location 0120                      ??_SendLCD 0064  
                ?_init_sensors 0001                      ??_SetLine 0065            __size_ofi2_ClearLCD 001A  
                 vfprintf@cfmt 00B4                         ___wmul 1718        classify_data@difference 0065  
                    ??___awdiv 0065                      ??___lodiv 0071                      ??___lomod 0071  
             __end_of_init_LCD 0B5E                         clear_0 15FA                         clear_1 1614  
             ___awdiv@quotient 0067              __end_ofi2_SendLCD 16BC                  ?i2_LCD_String 0005  
            __end_ofi2_SetLine 1718                         pad@buf 0073                         _strlen 16BC  
                    ??_initPWM 0063                         fputc@c 0061                         fputs@c 006E  
                       fputs@i 006F                         fputs@s 006A               ??_process_signal 0071  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         putch@c 0001               __end_of_vfprintf 149E  
                       stop@mL 0078                         stop@mR 007A                         utoa@fp 007C  
                    ??_sprintf 00BC                   ?_processRFID 0006               __end_of_turnLeft 1120  
                   __accesstop 0060        __end_of__initialization 161A                fullSpeedAhead@i 007C  
                ___rparam_used 000001                 ??_init_sensors 0061                    SetLine@line 0065  
                __end_of_E_TOG 17DC                      ?i2_LCDout 0001                 __pcstackCOMRAM 0001  
                __end_of_fputc 0E54                  __end_of_fputs 15BC                  __end_of_setup 168C  
                __end_of_putch 17EC                 ??i2_LCD_String 0007                   ??_LCD_String 0067  
                      ??_E_TOG 0061  __size_of_InterruptHandlerHigh 1294                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 0026          __end_of_classify_data 1580                        ??_fputc 0065  
                   _check_RFID 0806                        ??_fputs 006E           __size_of_init_motors 00D4  
                      ??_setup 0066                        ??_putch 0061                     __pbssBANK0 00C8  
                   __pbssBANK1 013D                        ?_LCDout 0001             __size_of_init_RFID 001A  
           __end_of_LCD_String 13EA                     ??i2_LCDout 0001                        ?___wmul 0069  
                ?_moveToBeacon 007F                        _CAP1CON 000F63                        _CAP2CON 000F62  
      __size_of_fullSpeedAhead 0074                        _DFLTCON 000F60                        ?_strlen 0061  
                 ??i2_ClearLCD 0005                     ??_ClearLCD 0065             __size_of_vfpfcnvrt 016E  
                      i2_E_TOG 17DC                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
             ___lomod@dividend 0061           __size_of_setMotorPWM 012E                      ?_init_LCD 0001  
              __size_of_LCDout 007C                        _SendLCD 15BC                        __Hparam 0000  
                      _SetLine 1628                        __Lparam 0000             __end_ofi2_ClearLCD 17CE  
               ??_moveToBeacon 0083          processRFID@latestChar 0008                        ___awdiv 1120  
              __size_of___wmul 0028                        ___lodiv 0C32                        ___lomod 0D02  
                    ?_vfprintf 00AE                   __psmallconst 0300               initPWM@PWMperiod 0061  
                      __pcinit 15F4                        __ramtop 0300                      ?_turnLeft 0078  
                      __ptext0 04FA                        __ptext1 149E                        __ptext2 1448  
                      __ptext3 0698                        __ptext4 0346                        __ptext5 0E54  
                      __ptext6 16BC                        __ptext7 1580                        __ptext8 0DB2  
                      __ptext9 17EA              __end_of_init_RFID 17B4               check_RFID@hexBuf 000B  
              __size_of_strlen 002E                        _initPWM 177E                   __size_of_pad 009E  
         __end_of_init_sensors 177E                   LCDout@number 0062                    ?_check_RFID 0007  
                      _sprintf 149E                 __pintcode_body 1222           end_of_initialization 161A  
           setMotorPWM@PWMduty 0076                     ??_init_LCD 0065           __end_ofi2_LCD_String 1448  
         __size_of_processRFID 0088                        fputc@fp 0063                  __Lmediumconst 0000  
                      int_func 1222                        fputs@fp 006C              __end_of_vfpfcnvrt 0806  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                     ??_vfprintf 00B4  
                      strlen@a 0063                        strlen@s 0061                     _robot_mode 002C  
              process_signal@S 006F                     ??_turnLeft 007C                      _PORTDbits 000F83  
                    i2_SendLCD 168C                      i2_SetLine 16EA             i2LCD_String@string 0005  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95               fullSpeedAhead@mL 0078               fullSpeedAhead@mR 007A  
               __end_of_LCDout 1222                      _TXSTAbits 000FAC                     main@motorL 0123  
                   main@motorR 012C              __size_ofi2_LCDout 0078                 _fullSpeedAhead 1314  
          __size_of_check_RFID 0150                    vfpfcnvrt@ap 00A0                    vfpfcnvrt@fp 009C  
               __end_of___wmul 1740                    _BAUDCONbits 000FAA                 __end_of_strlen 16EA  
                   ?i2_SendLCD 0003            start_initialization 15F4                ___lodiv@divisor 0069  
                   ?i2_SetLine 0001                ___lodiv@counter 0079                    __end_of_pad 0EF2  
            __size_of_ClearLCD 0020           __end_of_moveToBeacon 1012                       ??_LCDout 0061  
InterruptHandlerHigh@RFID_flag 0028   __end_of_InterruptHandlerHigh 129C                    vfprintf@fmt 00B0  
       __end_of_fullSpeedAhead 1388                       ??___wmul 006D          __size_of_init_sensors 001E  
                     ??_strlen 0063                    __pbssCOMRAM 0029                  ??_init_motors 0065  
                __pcstackBANK0 0060                  __pcstackBANK1 0100                       ?i2_E_TOG 0001  
        __size_ofi2_LCD_String 005E                 i2LCDout@number 0002   __size_of_InterruptHandlerLow 000E  
      __size_of_process_signal 0096              __size_of_init_LCD 00DA                       ?_SendLCD 0063  
                     ?_SetLine 0001                   _init_sensors 1760                ?_fullSpeedAhead 0078  
                    __pintcode 0008                       ?___awdiv 0061         __size_of_classify_data 003E  
                     ?___lodiv 0061                       ?___lomod 0061             check_RFID@checksum 001C  
                  __pintcodelo 0018                   i2_LCD_String 13EA              __size_of_vfprintf 0056  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                       _CAP2BUFH 000F67  
                     _CAP2BUFL 000F66                ___lomod@divisor 0069                       ?_initPWM 0061  
                  __smallconst 0300                ___lomod@counter 0071                 __size_of_E_TOG 000E  
            __size_of_turnLeft 0086                    ??i2_SendLCD 0004                    ??i2_SetLine 0005  
                    _init_RFID 179A                  ??_setMotorPWM 0071                   ??_check_RFID 0009  
                     ?_sprintf 00B6                 __size_of_fputc 00A2                 __size_of_fputs 003C  
               __size_of_setup 0030                 __size_of_putch 0002                check_RFID@byte1 0017  
              check_RFID@byte2 0018                check_RFID@byte3 0019                check_RFID@byte4 001A  
              check_RFID@byte5 001B            __end_of_init_motors 0C32                 ___wmul@product 006D  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       i2u310_47 16B4  
                     i2u311_47 130C                       i2u312_47 17E0                       i2u241_40 1056  
                     i2u250_40 08B2                       i2u306_47 17C4                       i2u251_40 08C0  
                     i2u243_40 1082                       i2u307_47 1710                       i2u236_40 1410  
                     i2u260_40 0902                       i2u252_40 08C2                       i2u308_47 141A  
                     i2u236_47 1406                       i2u237_40 1440                       i2u261_40 091E  
                     i2u253_40 08D0                       i2u229_45 1696                       i2u229_46 1698  
                     i2u309_47 16A4                       i2u237_47 1436                       i2u262_40 0920  
                     i2u254_40 08D2                       i2u255_40 08E0                       i2u256_40 08E2  
                     i2u248_40 08A6                       i2u257_40 08F0                       i2u249_40 08B0  
                     _PIR1bits 000F9E                       i2u258_40 08F2                       i2_LCDout 129C  
                     i2u259_40 0900                       _RCONbits 000FD0                      _vfpfcnvrt 0698  
           __end_of_check_RFID 0956              ___wmul@multiplier 0069                   setMotorPWM@m 006F  
        __size_of_moveToBeacon 008A           _InterruptHandlerHigh 0008                       _ClearLCD 1740  
                    main@temp1 0110                      main@temp2 0100                     ?_init_RFID 0001  
             __size_ofi2_E_TOG 000E                  ??_processRFID 0009                  _classify_data 1542  
                i2SendLCD@Byte 0004            __end_of_setMotorPWM 0A84                  i2SendLCD@type 0003  
                  check_RFID@i 001D                       __Hrparam 0000               __size_of_SendLCD 0038  
                   vfprintf@ap 00B2                       __Lrparam 0000                     vfprintf@fp 00AE  
             __size_of_SetLine 0034                   _moveToBeacon 0F88               __size_of___awdiv 0086  
             __size_of___lodiv 00D0               __size_of___lomod 00B0                     ?_vfpfcnvrt 009C  
        ?_InterruptHandlerHigh 0001                     sprintf@fmt 00B8               __size_of_initPWM 001C  
                  _init_motors 0B5E                 ?_classify_data 0061              check_RFID@dataBuf 0007  
                     __ptext10 0D02                       __ptext11 0C32                       __ptext20 14F0  
                     __ptext12 165C                       __ptext21 1314                       __ptext13 1760  
                     __ptext30 15BC                       __ptext22 0956                       __ptext14 179A  
                     __ptext31 11A6                       __ptext23 1718                       __ptext15 0A84  
                     __ptext40 168C                       __ptext32 17CE                       __ptext24 1120  
                     __ptext16 177E                       __ptext41 129C                       __ptext25 0B5E  
                     __ptext17 0EF2                       __ptext42 17DC                       __ptext26 1542  
                     __ptext18 0F88                       __ptext35 1012                       __ptext27 1628  
                     __ptext19 109A                       __ptext36 17B4                       __ptext28 1388  
                     __ptext37 0806                       __ptext29 1740                       __ptext38 16EA  
                     __ptext39 13EA               __size_of_sprintf 0052                       _init_LCD 0A84  
               _process_signal 0EF2    InterruptHandlerHigh@RFIDbuf 002D                  __size_of_main 019E  
                __size_of_stop 0052                  __size_of_utoa 01B4                     turnLeft@mL 0078  
                   turnLeft@mR 007A            __end_of_processRFID 109A                  i2SetLine@line 0005  
                     int$flags 0039                       _vfprintf 1448            _InterruptHandlerLow 0018  
                   _LCD_String 1388                       _turnLeft 109A                     _INTCONbits 000FF2  
  classify_data@right_smoothed 0063                    ??_init_RFID 0061                    _setMotorPWM 0956  
       __end_of_process_signal 0F88                       intlevel1 0000                       intlevel2 0000  
                    sprintf@ap 00BE           ?_InterruptHandlerLow 0001               ??_fullSpeedAhead 007C  
                init_motors@mL 0061                  init_motors@mR 0063                      turnLeft@i 007D  
                   _OSCCONbits 000FD3     classify_data@left_smoothed 0061     processRFID@position_in_buf 002B  
                  ??_vfpfcnvrt 00A2         ??_InterruptHandlerHigh 001F                       sprintf@f 00C0  
                     sprintf@s 00B6                ??_classify_data 0065                     i2_ClearLCD 17B4  
                  _processRFID 1012                ?_process_signal 006F          ??_InterruptHandlerLow 0060  
