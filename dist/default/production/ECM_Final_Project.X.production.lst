

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Mar 06 12:43:29 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _DFLTCON	set	3936
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _INTCON2bits	set	4081
   111  0000                     _T0CON	set	4053
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TRISBbits	set	3987
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCONbits	set	4082
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _PDC1H	set	3958
   119  0000                     _PDC1L	set	3959
   120  0000                     _PDC0H	set	3960
   121  0000                     _PDC0L	set	3961
   122                           
   123                           	psect	smallconst
   124  000300                     __psmallconst:
   125                           	opt callstack 0
   126  000300  00                 	db	0
   127  000301                     STR_12:
   128  000301  53                 	db	83	;'S'
   129  000302  54                 	db	84	;'T'
   130  000303  41                 	db	65	;'A'
   131  000304  52                 	db	82	;'R'
   132  000305  54                 	db	84	;'T'
   133  000306  49                 	db	73	;'I'
   134  000307  4E                 	db	78	;'N'
   135  000308  47                 	db	71	;'G'
   136  000309  20                 	db	32
   137  00030A  53                 	db	83	;'S'
   138  00030B  45                 	db	69	;'E'
   139  00030C  41                 	db	65	;'A'
   140  00030D  52                 	db	82	;'R'
   141  00030E  43                 	db	67	;'C'
   142  00030F  48                 	db	72	;'H'
   143  000310  00                 	db	0
   144  000311                     STR_11:
   145  000311  54                 	db	84	;'T'
   146  000312  4F                 	db	79	;'O'
   147  000313  20                 	db	32
   148  000314  53                 	db	83	;'S'
   149  000315  54                 	db	84	;'T'
   150  000316  41                 	db	65	;'A'
   151  000317  52                 	db	82	;'R'
   152  000318  54                 	db	84	;'T'
   153  000319  20                 	db	32
   154  00031A  53                 	db	83	;'S'
   155  00031B  45                 	db	69	;'E'
   156  00031C  41                 	db	65	;'A'
   157  00031D  52                 	db	82	;'R'
   158  00031E  43                 	db	67	;'C'
   159  00031F  48                 	db	72	;'H'
   160  000320  00                 	db	0
   161  000321                     STR_7:
   162  000321  52                 	db	82	;'R'
   163  000322  45                 	db	69	;'E'
   164  000323  53                 	db	83	;'S'
   165  000324  45                 	db	69	;'E'
   166  000325  54                 	db	84	;'T'
   167  000326  54                 	db	84	;'T'
   168  000327  49                 	db	73	;'I'
   169  000328  4E                 	db	78	;'N'
   170  000329  47                 	db	71	;'G'
   171  00032A  20                 	db	32
   172  00032B  52                 	db	82	;'R'
   173  00032C  4F                 	db	79	;'O'
   174  00032D  42                 	db	66	;'B'
   175  00032E  4F                 	db	79	;'O'
   176  00032F  54                 	db	84	;'T'
   177  000330  00                 	db	0
   178  000331                     STR_3:
   179  000331  43                 	db	67	;'C'
   180  000332  48                 	db	72	;'H'
   181  000333  45                 	db	69	;'E'
   182  000334  43                 	db	67	;'C'
   183  000335  4B                 	db	75	;'K'
   184  000336  53                 	db	83	;'S'
   185  000337  55                 	db	85	;'U'
   186  000338  4D                 	db	77	;'M'
   187  000339  20                 	db	32
   188  00033A  46                 	db	70	;'F'
   189  00033B  41                 	db	65	;'A'
   190  00033C  49                 	db	73	;'I'
   191  00033D  4C                 	db	76	;'L'
   192  00033E  45                 	db	69	;'E'
   193  00033F  44                 	db	68	;'D'
   194  000340  00                 	db	0
   195  000341                     STR_2:
   196  000341  43                 	db	67	;'C'
   197  000342  48                 	db	72	;'H'
   198  000343  45                 	db	69	;'E'
   199  000344  43                 	db	67	;'C'
   200  000345  4B                 	db	75	;'K'
   201  000346  53                 	db	83	;'S'
   202  000347  55                 	db	85	;'U'
   203  000348  4D                 	db	77	;'M'
   204  000349  20                 	db	32
   205  00034A  50                 	db	80	;'P'
   206  00034B  41                 	db	65	;'A'
   207  00034C  53                 	db	83	;'S'
   208  00034D  53                 	db	83	;'S'
   209  00034E  45                 	db	69	;'E'
   210  00034F  44                 	db	68	;'D'
   211  000350  00                 	db	0
   212  000351                     STR_5:
   213  000351  4D                 	db	77	;'M'
   214  000352  4F                 	db	79	;'O'
   215  000353  56                 	db	86	;'V'
   216  000354  49                 	db	73	;'I'
   217  000355  4E                 	db	78	;'N'
   218  000356  47                 	db	71	;'G'
   219  000357  20                 	db	32
   220  000358  54                 	db	84	;'T'
   221  000359  4F                 	db	79	;'O'
   222  00035A  20                 	db	32
   223  00035B  42                 	db	66	;'B'
   224  00035C  4F                 	db	79	;'O'
   225  00035D  4D                 	db	77	;'M'
   226  00035E  42                 	db	66	;'B'
   227  00035F  00                 	db	0
   228  000360                     STR_6:
   229  000360  52                 	db	82	;'R'
   230  000361  45                 	db	69	;'E'
   231  000362  54                 	db	84	;'T'
   232  000363  55                 	db	85	;'U'
   233  000364  52                 	db	82	;'R'
   234  000365  4E                 	db	78	;'N'
   235  000366  49                 	db	73	;'I'
   236  000367  4E                 	db	78	;'N'
   237  000368  47                 	db	71	;'G'
   238  000369  20                 	db	32
   239  00036A  48                 	db	72	;'H'
   240  00036B  4F                 	db	79	;'O'
   241  00036C  4D                 	db	77	;'M'
   242  00036D  45                 	db	69	;'E'
   243  00036E  00                 	db	0
   244  00036F                     STR_1:
   245  00036F  43                 	db	67	;'C'
   246  000370  72                 	db	114	;'r'
   247  000371  69                 	db	105	;'i'
   248  000372  74                 	db	116	;'t'
   249  000373  69                 	db	105	;'i'
   250  000374  63                 	db	99	;'c'
   251  000375  61                 	db	97	;'a'
   252  000376  6C                 	db	108	;'l'
   253  000377  20                 	db	32
   254  000378  45                 	db	69	;'E'
   255  000379  72                 	db	114	;'r'
   256  00037A  72                 	db	114	;'r'
   257  00037B  6F                 	db	111	;'o'
   258  00037C  72                 	db	114	;'r'
   259  00037D  00                 	db	0
   260  00037E                     STR_10:
   261  00037E  50                 	db	80	;'P'
   262  00037F  52                 	db	82	;'R'
   263  000380  45                 	db	69	;'E'
   264  000381  53                 	db	83	;'S'
   265  000382  53                 	db	83	;'S'
   266  000383  20                 	db	32
   267  000384  42                 	db	66	;'B'
   268  000385  55                 	db	85	;'U'
   269  000386  54                 	db	84	;'T'
   270  000387  54                 	db	84	;'T'
   271  000388  4F                 	db	79	;'O'
   272  000389  4E                 	db	78	;'N'
   273  00038A  00                 	db	0
   274  00038B                     STR_4:
   275  00038B  53                 	db	83	;'S'
   276  00038C  45                 	db	69	;'E'
   277  00038D  41                 	db	65	;'A'
   278  00038E  52                 	db	82	;'R'
   279  00038F  43                 	db	67	;'C'
   280  000390  48                 	db	72	;'H'
   281  000391  49                 	db	73	;'I'
   282  000392  4E                 	db	78	;'N'
   283  000393  47                 	db	71	;'G'
   284  000394  00                 	db	0
   285  000395                     STR_8:
   286  000395  25                 	db	37
   287  000396  75                 	db	117	;'u'
   288  000397  00                 	db	0
   289  0000                     
   290                           ; #config settings
   291  000398  00                 	db	0	; dummy byte at the end
   292  0000                     
   293                           	psect	cinit
   294  000FF4                     __pcinit:
   295                           	opt callstack 0
   296  000FF4                     start_initialization:
   297                           	opt callstack 0
   298  000FF4                     __initialization:
   299                           	opt callstack 0
   300                           
   301                           ; Clear objects allocated to BANK0 (46 bytes)
   302  000FF4  EE00  F060         	lfsr	0,__pbssBANK0
   303  000FF8  0E2E               	movlw	46
   304  000FFA                     clear_0:
   305  000FFA  6AEE               	clrf	postinc0,c
   306  000FFC  06E8               	decf	wreg,f,c
   307  000FFE  E1FD               	bnz	clear_0
   308                           
   309                           ; Clear objects allocated to COMRAM (15 bytes)
   310  001000  EE00  F039         	lfsr	0,__pbssCOMRAM
   311  001004  0E0F               	movlw	15
   312  001006                     clear_1:
   313  001006  6AEE               	clrf	postinc0,c
   314  001008  06E8               	decf	wreg,f,c
   315  00100A  E1FD               	bnz	clear_1
   316  00100C                     end_of_initialization:
   317                           	opt callstack 0
   318  00100C                     __end_of__initialization:
   319                           	opt callstack 0
   320  00100C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321  00100E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322  001010  0E00               	movlw	low (__Lmediumconst shr (0+16))
   323  001012  6EF8               	movwf	tblptru,c
   324  001014  0100               	movlb	0
   325  001016  EF07  F003         	goto	_main	;jump to C main() function
   326                           
   327                           	psect	bssCOMRAM
   328  000039                     __pbssCOMRAM:
   329                           	opt callstack 0
   330  000039                     	ds	2
   331  00003B                     	ds	2
   332  00003D                     	ds	2
   333  00003F                     debug@smoothed_data:
   334                           	opt callstack 0
   335  00003F                     	ds	2
   336  000041                     processRFID@position_in_buf:
   337                           	opt callstack 0
   338  000041                     	ds	1
   339  000042                     _robot_mode:
   340                           	opt callstack 0
   341  000042                     	ds	1
   342  000043                     _movement_time:
   343                           	opt callstack 0
   344  000043                     	ds	4
   345  000047                     _RFID_flag:
   346                           	opt callstack 0
   347  000047                     	ds	1
   348                           
   349                           	psect	bssBANK0
   350  000060                     __pbssBANK0:
   351                           	opt callstack 0
   352  000060                     	ds	2
   353  000062                     	ds	32
   354  000082                     _RFIDbuf:
   355                           	opt callstack 0
   356  000082                     	ds	12
   357                           
   358                           	psect	cstackBANK0
   359  00008E                     __pcstackBANK0:
   360                           	opt callstack 0
   361  00008E                     main@searching_speed:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x0
   365  00008E                     	ds	2
   366  000090                     main@moving_speed:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x2
   370  000090                     	ds	2
   371  000092                     main@motorL:
   372                           	opt callstack 0
   373                           
   374                           ; 9 bytes @ 0x4
   375  000092                     	ds	9
   376  00009B                     main@motorR:
   377                           	opt callstack 0
   378                           
   379                           ; 9 bytes @ 0xD
   380  00009B                     	ds	9
   381                           
   382                           	psect	cstackCOMRAM
   383  000001                     __pcstackCOMRAM:
   384                           	opt callstack 0
   385  000001                     processRFID@RFIDbuf:
   386                           	opt callstack 0
   387                           
   388                           ; 2 bytes @ 0x0
   389  000001                     	ds	2
   390  000003                     processRFID@latestChar:
   391                           	opt callstack 0
   392                           
   393                           ; 1 bytes @ 0x2
   394  000003                     	ds	1
   395  000004                     processRFID@i:
   396                           	opt callstack 0
   397                           
   398                           ; 1 bytes @ 0x3
   399  000004                     	ds	1
   400  000005                     ??_InterruptHandlerHigh:
   401                           
   402                           ; 1 bytes @ 0x4
   403  000005                     	ds	3
   404  000008                     ??_InterruptHandlerLow:
   405                           
   406                           ; 1 bytes @ 0x7
   407  000008                     	ds	3
   408  00000B                     ??_LCDout:
   409  00000B                     ?___wmul:
   410                           	opt callstack 0
   411  00000B                     initPWM@PWMperiod:
   412                           	opt callstack 0
   413  00000B                     classify_data@raw_data:
   414                           	opt callstack 0
   415  00000B                     ___wmul@multiplier:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0xA
   419  00000B                     	ds	1
   420  00000C                     LCDout@number:
   421                           	opt callstack 0
   422                           
   423                           ; 1 bytes @ 0xB
   424  00000C                     	ds	1
   425  00000D                     SendLCD@type:
   426                           	opt callstack 0
   427  00000D                     classify_data@smoothed:
   428                           	opt callstack 0
   429  00000D                     ___wmul@multiplicand:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0xC
   433  00000D                     	ds	1
   434  00000E                     SendLCD@Byte:
   435                           	opt callstack 0
   436                           
   437                           ; 1 bytes @ 0xD
   438  00000E                     	ds	1
   439  00000F                     ??_init_LCD:
   440  00000F                     ??_ClearLCD:
   441  00000F                     ??_classify_data:
   442  00000F                     SetLine@line:
   443                           	opt callstack 0
   444  00000F                     LCD_String@string:
   445                           	opt callstack 0
   446  00000F                     ___wmul@product:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0xE
   450  00000F                     	ds	1
   451  000010                     display_RFID@dataBuf:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0xF
   455  000010                     	ds	1
   456  000011                     ??_waitForInput:
   457  000011                     ?___awdiv:
   458                           	opt callstack 0
   459  000011                     check_RFID@dataBuf:
   460                           	opt callstack 0
   461  000011                     ___awdiv@dividend:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x10
   465  000011                     	ds	1
   466  000012                     display_RFID@i:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x11
   470  000012                     	ds	1
   471  000013                     ??_check_RFID:
   472  000013                     waitForInput@i:
   473                           	opt callstack 0
   474  000013                     ___awdiv@divisor:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x12
   478  000013                     	ds	2
   479  000015                     ___awdiv@counter:
   480                           	opt callstack 0
   481  000015                     check_RFID@hexBuf:
   482                           	opt callstack 0
   483                           
   484                           ; 12 bytes @ 0x14
   485  000015                     	ds	1
   486  000016                     ___awdiv@sign:
   487                           	opt callstack 0
   488  000016                     classify_data@filtered:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x15
   492  000016                     	ds	1
   493  000017                     ___awdiv@quotient:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x16
   497  000017                     	ds	2
   498  000019                     setMotorPWM@m:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x18
   502  000019                     	ds	2
   503  00001B                     ??_setMotorPWM:
   504                           
   505                           ; 1 bytes @ 0x1A
   506  00001B                     	ds	5
   507  000020                     setMotorPWM@PWMduty:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x1F
   511  000020                     	ds	1
   512  000021                     check_RFID@byte1:
   513                           	opt callstack 0
   514                           
   515                           ; 1 bytes @ 0x20
   516  000021                     	ds	1
   517  000022                     check_RFID@byte2:
   518                           	opt callstack 0
   519  000022                     stop@mL:
   520                           	opt callstack 0
   521  000022                     turnRight@mL:
   522                           	opt callstack 0
   523  000022                     moveForward@mL:
   524                           	opt callstack 0
   525  000022                     moveBackward@mL:
   526                           	opt callstack 0
   527  000022                     init_motor_struct@mL:
   528                           	opt callstack 0
   529                           
   530                           ; 2 bytes @ 0x21
   531  000022                     	ds	1
   532  000023                     check_RFID@byte3:
   533                           	opt callstack 0
   534                           
   535                           ; 1 bytes @ 0x22
   536  000023                     	ds	1
   537  000024                     check_RFID@byte4:
   538                           	opt callstack 0
   539  000024                     stop@mR:
   540                           	opt callstack 0
   541  000024                     turnRight@mR:
   542                           	opt callstack 0
   543  000024                     moveForward@mR:
   544                           	opt callstack 0
   545  000024                     moveBackward@mR:
   546                           	opt callstack 0
   547  000024                     init_motor_struct@mR:
   548                           	opt callstack 0
   549                           
   550                           ; 2 bytes @ 0x23
   551  000024                     	ds	1
   552  000025                     check_RFID@byte5:
   553                           	opt callstack 0
   554                           
   555                           ; 1 bytes @ 0x24
   556  000025                     	ds	1
   557  000026                     check_RFID@checksum:
   558                           	opt callstack 0
   559  000026                     stop@initial_speed:
   560                           	opt callstack 0
   561  000026                     turnRight@max_power:
   562                           	opt callstack 0
   563  000026                     moveForward@max_power:
   564                           	opt callstack 0
   565  000026                     moveBackward@max_power:
   566                           	opt callstack 0
   567                           
   568                           ; 2 bytes @ 0x25
   569  000026                     	ds	1
   570  000027                     check_RFID@i:
   571                           	opt callstack 0
   572                           
   573                           ; 2 bytes @ 0x26
   574  000027                     	ds	1
   575  000028                     ??_stop:
   576  000028                     ??_turnRight:
   577  000028                     ??_moveForward:
   578  000028                     ??_moveBackward:
   579                           
   580                           ; 1 bytes @ 0x27
   581  000028                     	ds	1
   582  000029                     stop@i:
   583                           	opt callstack 0
   584  000029                     turnRight@i:
   585                           	opt callstack 0
   586  000029                     moveForward@i:
   587                           	opt callstack 0
   588  000029                     moveBackward@i:
   589                           	opt callstack 0
   590                           
   591                           ; 2 bytes @ 0x28
   592  000029                     	ds	2
   593  00002B                     scanForBeacon@mL:
   594                           	opt callstack 0
   595  00002B                     moveToBeacon@mL:
   596                           	opt callstack 0
   597  00002B                     returnHome@mL:
   598                           	opt callstack 0
   599  00002B                     stopAndDisplay@mL:
   600                           	opt callstack 0
   601                           
   602                           ; 2 bytes @ 0x2A
   603  00002B                     	ds	2
   604  00002D                     scanForBeacon@mR:
   605                           	opt callstack 0
   606  00002D                     moveToBeacon@mR:
   607                           	opt callstack 0
   608  00002D                     returnHome@mR:
   609                           	opt callstack 0
   610  00002D                     stopAndDisplay@mR:
   611                           	opt callstack 0
   612                           
   613                           ; 2 bytes @ 0x2C
   614  00002D                     	ds	2
   615  00002F                     scanForBeacon@speed:
   616                           	opt callstack 0
   617  00002F                     moveToBeacon@speed:
   618                           	opt callstack 0
   619  00002F                     returnHome@speed:
   620                           	opt callstack 0
   621  00002F                     stopAndDisplay@speed:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x2E
   625  00002F                     	ds	2
   626  000031                     ??_scanForBeacon:
   627  000031                     moveToBeacon@time:
   628                           	opt callstack 0
   629  000031                     returnHome@time:
   630                           	opt callstack 0
   631  000031                     stopAndDisplay@RFID_buffer:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x30
   635  000031                     	ds	2
   636  000033                     ??_stopAndDisplay:
   637  000033                     scanForBeacon@raw_data:
   638                           	opt callstack 0
   639  000033                     moveToBeacon@exit_flag:
   640                           	opt callstack 0
   641                           
   642                           ; 2 bytes @ 0x32
   643  000033                     	ds	2
   644  000035                     scanForBeacon@beacon_location:
   645                           	opt callstack 0
   646  000035                     stopAndDisplay@i:
   647                           	opt callstack 0
   648                           
   649                           ; 2 bytes @ 0x34
   650  000035                     	ds	1
   651  000036                     scanForBeacon@smoothed_data:
   652                           	opt callstack 0
   653                           
   654                           ; 2 bytes @ 0x35
   655  000036                     	ds	3
   656  000039                     
   657                           ; 1 bytes @ 0x38
   658 ;;
   659 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   660 ;;
   661 ;; *************** function _main *****************
   662 ;; Defined at:
   663 ;;		line 115 in file "main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  motorR          9   13[BANK0 ] struct DC_motor
   668 ;;  motorL          9    4[BANK0 ] struct DC_motor
   669 ;;  moving_speed    2    2[BANK0 ] int 
   670 ;;  searching_sp    2    0[BANK0 ] int 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   680 ;;      Params:         0       0       0       0
   681 ;;      Locals:         0      22       0       0
   682 ;;      Temps:          0       0       0       0
   683 ;;      Totals:         0      22       0       0
   684 ;;Total ram usage:       22 bytes
   685 ;; Hardware stack levels required when called:    9
   686 ;; This function calls:
   687 ;;		_LCD_String
   688 ;;		_init_motor_struct
   689 ;;		_moveToBeacon
   690 ;;		_returnHome
   691 ;;		_scanForBeacon
   692 ;;		_setup
   693 ;;		_stopAndDisplay
   694 ;;		_waitForInput
   695 ;; This function is called by:
   696 ;;		Startup code after reset
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text0
   701  00060E                     __ptext0:
   702                           	opt callstack 0
   703  00060E                     _main:
   704                           	opt callstack 22
   705                           
   706                           ;main.c: 118:   setup();
   707                           
   708                           ;incstack = 0
   709  00060E  EC96  F007         	call	_setup	;wreg free
   710                           
   711                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   712  000612  0E92               	movlw	low main@motorL
   713  000614  6E22               	movwf	init_motor_struct@mL,c
   714  000616  0E00               	movlw	high main@motorL
   715  000618  6E23               	movwf	init_motor_struct@mL+1,c
   716  00061A  0E9B               	movlw	low main@motorR
   717  00061C  6E24               	movwf	init_motor_struct@mR,c
   718  00061E  0E00               	movlw	high main@motorR
   719  000620  6E25               	movwf	init_motor_struct@mR+1,c
   720  000622  EC80  F003         	call	_init_motor_struct	;wreg free
   721                           
   722                           ;main.c: 125:   int searching_speed = 60;
   723  000626  0E00               	movlw	0
   724  000628  0100               	movlb	0	; () banked
   725  00062A  6F8F               	movwf	(main@searching_speed+1)& (0+255),b
   726  00062C  0E3C               	movlw	60
   727  00062E  6F8E               	movwf	main@searching_speed& (0+255),b
   728                           
   729                           ; BSR set to: 0
   730                           ;main.c: 126:   int moving_speed = 100;
   731  000630  0E00               	movlw	0
   732  000632  6F91               	movwf	(main@moving_speed+1)& (0+255),b
   733  000634  0E64               	movlw	100
   734  000636  6F90               	movwf	main@moving_speed& (0+255),b
   735                           
   736                           ; BSR set to: 0
   737                           ;main.c: 128:   waitForInput();
   738  000638  EC28  F006         	call	_waitForInput	;wreg free
   739  00063C                     l2579:
   740                           
   741                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   742  00063C  5042               	movf	_robot_mode,w,c	;volatile
   743  00063E  A4D8               	btfss	status,2,c
   744  000640  D00F               	goto	l2583
   745                           
   746                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed);
   747  000642  0E92               	movlw	low main@motorL
   748  000644  6E2B               	movwf	scanForBeacon@mL,c
   749  000646  0E00               	movlw	high main@motorL
   750  000648  6E2C               	movwf	scanForBeacon@mL+1,c
   751  00064A  0E9B               	movlw	low main@motorR
   752  00064C  6E2D               	movwf	scanForBeacon@mR,c
   753  00064E  0E00               	movlw	high main@motorR
   754  000650  6E2E               	movwf	scanForBeacon@mR+1,c
   755  000652  C08E  F02F         	movff	main@searching_speed,scanForBeacon@speed
   756  000656  C08F  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   757  00065A  EC59  F004         	call	_scanForBeacon	;wreg free
   758  00065E  D047               	goto	L3
   759  000660                     l2583:
   760  000660  0442               	decf	_robot_mode,w,c	;volatile
   761  000662  A4D8               	btfss	status,2,c
   762  000664  D017               	goto	l2587
   763                           
   764                           ;main.c: 142:       {;main.c: 143:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   765  000666  0E92               	movlw	low main@motorL
   766  000668  6E2B               	movwf	moveToBeacon@mL,c
   767  00066A  0E00               	movlw	high main@motorL
   768  00066C  6E2C               	movwf	moveToBeacon@mL+1,c
   769  00066E  0E9B               	movlw	low main@motorR
   770  000670  6E2D               	movwf	moveToBeacon@mR,c
   771  000672  0E00               	movlw	high main@motorR
   772  000674  6E2E               	movwf	moveToBeacon@mR+1,c
   773  000676  C090  F02F         	movff	main@moving_speed,moveToBeacon@speed
   774  00067A  C091  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   775  00067E  0E43               	movlw	low _movement_time
   776  000680  6E31               	movwf	moveToBeacon@time,c
   777  000682  0E00               	movlw	high _movement_time
   778  000684  6E32               	movwf	moveToBeacon@time+1,c
   779  000686  0E47               	movlw	low _RFID_flag
   780  000688  6E33               	movwf	moveToBeacon@exit_flag,c
   781  00068A  0E00               	movlw	high _RFID_flag
   782  00068C  6E34               	movwf	moveToBeacon@exit_flag+1,c
   783  00068E  ECA2  F006         	call	_moveToBeacon	;wreg free
   784  000692  D02D               	goto	L3
   785  000694                     l2587:
   786  000694  0E02               	movlw	2
   787  000696  1842               	xorwf	_robot_mode,w,c	;volatile
   788  000698  A4D8               	btfss	status,2,c
   789  00069A  D013               	goto	l2591
   790                           
   791                           ;main.c: 149:       {;main.c: 150:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   792  00069C  0E92               	movlw	low main@motorL
   793  00069E  6E2B               	movwf	returnHome@mL,c
   794  0006A0  0E00               	movlw	high main@motorL
   795  0006A2  6E2C               	movwf	returnHome@mL+1,c
   796  0006A4  0E9B               	movlw	low main@motorR
   797  0006A6  6E2D               	movwf	returnHome@mR,c
   798  0006A8  0E00               	movlw	high main@motorR
   799  0006AA  6E2E               	movwf	returnHome@mR+1,c
   800  0006AC  C090  F02F         	movff	main@moving_speed,returnHome@speed
   801  0006B0  C091  F030         	movff	main@moving_speed+1,returnHome@speed+1
   802  0006B4  0E43               	movlw	low _movement_time
   803  0006B6  6E31               	movwf	returnHome@time,c
   804  0006B8  0E00               	movlw	high _movement_time
   805  0006BA  6E32               	movwf	returnHome@time+1,c
   806  0006BC  EC54  F007         	call	_returnHome	;wreg free
   807  0006C0  D016               	goto	L3
   808  0006C2                     l2591:
   809  0006C2  0E03               	movlw	3
   810  0006C4  1842               	xorwf	_robot_mode,w,c	;volatile
   811  0006C6  A4D8               	btfss	status,2,c
   812  0006C8  D014               	goto	l2595
   813                           
   814                           ;main.c: 156:       {;main.c: 157:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   815  0006CA  0E92               	movlw	low main@motorL
   816  0006CC  6E2B               	movwf	stopAndDisplay@mL,c
   817  0006CE  0E00               	movlw	high main@motorL
   818  0006D0  6E2C               	movwf	stopAndDisplay@mL+1,c
   819  0006D2  0E9B               	movlw	low main@motorR
   820  0006D4  6E2D               	movwf	stopAndDisplay@mR,c
   821  0006D6  0E00               	movlw	high main@motorR
   822  0006D8  6E2E               	movwf	stopAndDisplay@mR+1,c
   823  0006DA  C090  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   824  0006DE  C091  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   825  0006E2  0E82               	movlw	low _RFIDbuf
   826  0006E4  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   827  0006E6  0E00               	movlw	high _RFIDbuf
   828  0006E8  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   829  0006EA  EC9D  F004         	call	_stopAndDisplay	;wreg free
   830  0006EE                     L3:
   831  0006EE  6E42               	movwf	_robot_mode,c	;volatile
   832                           
   833                           ;main.c: 158:       }
   834  0006F0  D7A5               	goto	l2579
   835  0006F2                     l2595:
   836                           
   837                           ;main.c: 161:       {;main.c: 162:           LCD_String("Critical Error");
   838  0006F2  0E6F               	movlw	low STR_1
   839  0006F4  6E0F               	movwf	LCD_String@string,c
   840  0006F6  0E03               	movlw	high STR_1
   841  0006F8  6E10               	movwf	LCD_String@string+1,c
   842  0006FA  ECD1  F006         	call	_LCD_String	;wreg free
   843  0006FE  D79E               	goto	l2579
   844  000700                     __end_of_main:
   845                           	opt callstack 0
   846                           
   847 ;; *************** function _waitForInput *****************
   848 ;; Defined at:
   849 ;;		line 141 in file "subroutines.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  i               2   18[COMRAM] int 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   863 ;;      Params:         0       0       0       0
   864 ;;      Locals:         2       0       0       0
   865 ;;      Temps:          2       0       0       0
   866 ;;      Totals:         4       0       0       0
   867 ;;Total ram usage:        4 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    7
   870 ;; This function calls:
   871 ;;		_ClearLCD
   872 ;;		_LCD_String
   873 ;;		_SetLine
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text1
   880  000C50                     __ptext1:
   881                           	opt callstack 0
   882  000C50                     _waitForInput:
   883                           	opt callstack 23
   884                           
   885                           ;subroutines.c: 144:     ClearLCD();
   886                           
   887                           ;incstack = 0
   888  000C50  EC48  F008         	call	_ClearLCD	;wreg free
   889                           
   890                           ;subroutines.c: 145:     SetLine(1);
   891  000C54  0E01               	movlw	1
   892  000C56  ECE3  F007         	call	_SetLine
   893                           
   894                           ;subroutines.c: 146:     LCD_String("PRESS BUTTON");
   895  000C5A  0E7E               	movlw	low STR_10
   896  000C5C  6E0F               	movwf	LCD_String@string,c
   897  000C5E  0E03               	movlw	high STR_10
   898  000C60  6E10               	movwf	LCD_String@string+1,c
   899  000C62  ECD1  F006         	call	_LCD_String	;wreg free
   900                           
   901                           ;subroutines.c: 147:     SetLine(2);
   902  000C66  0E02               	movlw	2
   903  000C68  ECE3  F007         	call	_SetLine
   904                           
   905                           ;subroutines.c: 148:     LCD_String("TO START SEARCH");
   906  000C6C  0E11               	movlw	low STR_11
   907  000C6E  6E0F               	movwf	LCD_String@string,c
   908  000C70  0E03               	movlw	high STR_11
   909  000C72  6E10               	movwf	LCD_String@string+1,c
   910  000C74  ECD1  F006         	call	_LCD_String	;wreg free
   911  000C78                     l339:
   912  000C78  A483               	btfss	3971,2,c	;volatile
   913  000C7A  D7FE               	goto	l339
   914                           
   915                           ;subroutines.c: 154:     ClearLCD();
   916  000C7C  EC48  F008         	call	_ClearLCD	;wreg free
   917                           
   918                           ;subroutines.c: 155:     SetLine(1);
   919  000C80  0E01               	movlw	1
   920  000C82  ECE3  F007         	call	_SetLine
   921                           
   922                           ;subroutines.c: 156:     LCD_String("STARTING SEARCH");
   923  000C86  0E01               	movlw	low STR_12
   924  000C88  6E0F               	movwf	LCD_String@string,c
   925  000C8A  0E03               	movlw	high STR_12
   926  000C8C  6E10               	movwf	LCD_String@string+1,c
   927  000C8E  ECD1  F006         	call	_LCD_String	;wreg free
   928                           
   929                           ;subroutines.c: 157:     for(int i=0; i<10;i++)
   930  000C92  0E00               	movlw	0
   931  000C94  6E14               	movwf	waitForInput@i+1,c
   932  000C96  0E00               	movlw	0
   933  000C98  6E13               	movwf	waitForInput@i,c
   934  000C9A                     l2485:
   935                           
   936                           ;subroutines.c: 158:     {;subroutines.c: 159:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   937  000C9A  0E02               	movlw	2
   938  000C9C  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   939  000C9E  0E04               	movlw	4
   940  000CA0  6E11               	movwf	??_waitForInput& (0+255),c
   941  000CA2  0EBA               	movlw	186
   942  000CA4                     u1837:
   943  000CA4  2EE8               	decfsz	wreg,f,c
   944  000CA6  D7FE               	bra	u1837
   945  000CA8  2E11               	decfsz	??_waitForInput& (0+255),f,c
   946  000CAA  D7FC               	bra	u1837
   947  000CAC  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
   948  000CAE  D7FA               	bra	u1837
   949  000CB0  D000               	nop2	
   950                           
   951                           ;subroutines.c: 160:     }
   952  000CB2  4A13               	infsnz	waitForInput@i,f,c
   953  000CB4  2A14               	incf	waitForInput@i+1,f,c
   954  000CB6  BE14               	btfsc	waitForInput@i+1,7,c
   955  000CB8  D7F0               	goto	l2485
   956  000CBA  5014               	movf	waitForInput@i+1,w,c
   957  000CBC  E104               	bnz	u1720
   958  000CBE  0E0A               	movlw	10
   959  000CC0  5C13               	subwf	waitForInput@i,w,c
   960  000CC2  A0D8               	btfss	status,0,c
   961  000CC4  D7EA               	goto	l2485
   962  000CC6                     u1720:
   963                           
   964                           ;subroutines.c: 161:     ClearLCD();
   965  000CC6  EC48  F008         	call	_ClearLCD	;wreg free
   966  000CCA  0012               	return		;funcret
   967  000CCC                     __end_of_waitForInput:
   968                           	opt callstack 0
   969                           
   970 ;; *************** function _stopAndDisplay *****************
   971 ;; Defined at:
   972 ;;		line 86 in file "subroutines.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   975 ;;		 -> main@motorL(9), 
   976 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   977 ;;		 -> main@motorR(9), 
   978 ;;  speed           2   46[COMRAM] int 
   979 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
   980 ;;		 -> RFIDbuf(12), 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  i               2   52[COMRAM] int 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      unsigned char 
   985 ;; Registers used:
   986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   992 ;;      Params:         8       0       0       0
   993 ;;      Locals:         2       0       0       0
   994 ;;      Temps:          2       0       0       0
   995 ;;      Totals:        12       0       0       0
   996 ;;Total ram usage:       12 bytes
   997 ;; Hardware stack levels used:    1
   998 ;; Hardware stack levels required when called:    8
   999 ;; This function calls:
  1000 ;;		_ClearLCD
  1001 ;;		_LCD_String
  1002 ;;		_check_RFID
  1003 ;;		_display_RFID
  1004 ;;		_stop
  1005 ;; This function is called by:
  1006 ;;		_main
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text2
  1011  00093A                     __ptext2:
  1012                           	opt callstack 0
  1013  00093A                     _stopAndDisplay:
  1014                           	opt callstack 22
  1015                           
  1016                           ;subroutines.c: 86: volatile char stopAndDisplay(struct DC_motor *mL, struct DC_motor *m
      +                          R, int speed,;subroutines.c: 87: volatile char RFID_buffer[]);subroutines.c: 88: {;subro
      +                          utines.c: 89:     stop(mL, mR,speed);
  1017                           
  1018                           ;incstack = 0
  1019  00093A  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1020  00093E  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1021  000942  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1022  000946  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1023  00094A  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1024  00094E  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1025  000952  EC00  F007         	call	_stop	;wreg free
  1026                           
  1027                           ;subroutines.c: 91:     display_RFID(RFID_buffer);
  1028  000956  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1029  00095A  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1030  00095E  EC76  F007         	call	_display_RFID	;wreg free
  1031                           
  1032                           ;subroutines.c: 92:     check_RFID(RFID_buffer);
  1033  000962  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1034  000966  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1035  00096A  ECCD  F001         	call	_check_RFID	;wreg free
  1036  00096E  D025               	goto	l2567
  1037  000970                     l2551:
  1038                           
  1039                           ;subroutines.c: 97:             {;subroutines.c: 98:                 ClearLCD();
  1040  000970  EC48  F008         	call	_ClearLCD	;wreg free
  1041                           
  1042                           ;subroutines.c: 99:                 LCD_String("RESETTING ROBOT");
  1043  000974  0E21               	movlw	low STR_7
  1044  000976  6E0F               	movwf	LCD_String@string,c
  1045  000978  0E03               	movlw	high STR_7
  1046  00097A  6E10               	movwf	LCD_String@string+1,c
  1047  00097C  ECD1  F006         	call	_LCD_String	;wreg free
  1048                           
  1049                           ;subroutines.c: 100:                 for(int i=0; i<10;i++)
  1050  000980  0E00               	movlw	0
  1051  000982  6E36               	movwf	stopAndDisplay@i+1,c
  1052  000984  0E00               	movlw	0
  1053  000986  6E35               	movwf	stopAndDisplay@i,c
  1054  000988                     l2561:
  1055                           
  1056                           ;subroutines.c: 101:                 {;subroutines.c: 102:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1057  000988  0E02               	movlw	2
  1058  00098A  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1059  00098C  0E04               	movlw	4
  1060  00098E  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1061  000990  0EBA               	movlw	186
  1062  000992                     u1847:
  1063  000992  2EE8               	decfsz	wreg,f,c
  1064  000994  D7FE               	bra	u1847
  1065  000996  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1066  000998  D7FC               	bra	u1847
  1067  00099A  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1068  00099C  D7FA               	bra	u1847
  1069  00099E  D000               	nop2	
  1070                           
  1071                           ;subroutines.c: 103:                 }
  1072  0009A0  4A35               	infsnz	stopAndDisplay@i,f,c
  1073  0009A2  2A36               	incf	stopAndDisplay@i+1,f,c
  1074  0009A4  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1075  0009A6  D7F0               	goto	l2561
  1076  0009A8  5036               	movf	stopAndDisplay@i+1,w,c
  1077  0009AA  E104               	bnz	u1770
  1078  0009AC  0E0A               	movlw	10
  1079  0009AE  5C35               	subwf	stopAndDisplay@i,w,c
  1080  0009B0  A0D8               	btfss	status,0,c
  1081  0009B2  D7EA               	goto	l2561
  1082  0009B4                     u1770:
  1083                           
  1084                           ;subroutines.c: 104:                 ClearLCD();
  1085  0009B4  EC48  F008         	call	_ClearLCD	;wreg free
  1086  0009B8  00FF               	reset		;# 
  1087  0009BA                     l2567:
  1088                           
  1089                           ;subroutines.c: 96:             while(PORTDbits.RD2 == 1)
  1090  0009BA  A483               	btfss	3971,2,c	;volatile
  1091  0009BC  D7FE               	goto	l2567
  1092  0009BE  D7D8               	goto	l2551
  1093  0009C0                     __end_of_stopAndDisplay:
  1094                           	opt callstack 0
  1095                           
  1096 ;; *************** function _stop *****************
  1097 ;; Defined at:
  1098 ;;		line 40 in file "dc_motor.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1101 ;;		 -> main@motorL(9), 
  1102 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1103 ;;		 -> main@motorR(9), 
  1104 ;;  initial_spee    2   37[COMRAM] int 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  i               2   40[COMRAM] int 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1116 ;;      Params:         6       0       0       0
  1117 ;;      Locals:         2       0       0       0
  1118 ;;      Temps:          1       0       0       0
  1119 ;;      Totals:         9       0       0       0
  1120 ;;Total ram usage:        9 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    5
  1123 ;; This function calls:
  1124 ;;		_setMotorPWM
  1125 ;; This function is called by:
  1126 ;;		_stopAndDisplay
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text3
  1131  000E00                     __ptext3:
  1132                           	opt callstack 0
  1133  000E00                     _stop:
  1134                           	opt callstack 24
  1135                           
  1136                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1137                           
  1138                           ;incstack = 0
  1139  000E00  C026  F029         	movff	stop@initial_speed,stop@i
  1140  000E04  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  1141  000E08                     l2307:
  1142  000E08  BE2A               	btfsc	stop@i+1,7,c
  1143  000E0A  0012               	return	
  1144  000E0C  502A               	movf	stop@i+1,w,c
  1145  000E0E  E103               	bnz	l2311
  1146  000E10  0429               	decf	stop@i,w,c
  1147  000E12  A0D8               	btfss	status,0,c
  1148  000E14  0012               	return	
  1149  000E16                     l2311:
  1150                           
  1151                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1152  000E16  C022  FFD9         	movff	stop@mL,fsr2l
  1153  000E1A  C023  FFDA         	movff	stop@mL+1,fsr2h
  1154  000E1E  C029  FFDF         	movff	stop@i,indf2
  1155                           
  1156                           ;dc_motor.c: 45:         mR->power = i;
  1157  000E22  C024  FFD9         	movff	stop@mR,fsr2l
  1158  000E26  C025  FFDA         	movff	stop@mR+1,fsr2h
  1159  000E2A  C029  FFDF         	movff	stop@i,indf2
  1160                           
  1161                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1162  000E2E  C022  F019         	movff	stop@mL,setMotorPWM@m
  1163  000E32  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  1164  000E36  EC75  F002         	call	_setMotorPWM	;wreg free
  1165                           
  1166                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1167  000E3A  C024  F019         	movff	stop@mR,setMotorPWM@m
  1168  000E3E  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  1169  000E42  EC75  F002         	call	_setMotorPWM	;wreg free
  1170                           
  1171                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1172  000E46  0E03               	movlw	3
  1173  000E48  6E28               	movwf	??_stop& (0+255),c
  1174  000E4A  0E98               	movlw	152
  1175  000E4C                     u1857:
  1176  000E4C  2EE8               	decfsz	wreg,f,c
  1177  000E4E  D7FE               	bra	u1857
  1178  000E50  2E28               	decfsz	??_stop& (0+255),f,c
  1179  000E52  D7FC               	bra	u1857
  1180                           
  1181                           ;dc_motor.c: 49:     }
  1182  000E54  0629               	decf	stop@i,f,c
  1183  000E56  A0D8               	btfss	status,0,c
  1184  000E58  062A               	decf	stop@i+1,f,c
  1185  000E5A  D7D6               	goto	l2307
  1186  000E5C                     __end_of_stop:
  1187                           	opt callstack 0
  1188                           
  1189 ;; *************** function _display_RFID *****************
  1190 ;; Defined at:
  1191 ;;		line 107 in file "RFID.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1194 ;;		 -> RFIDbuf(12), 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  i               2   17[COMRAM] int 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1206 ;;      Params:         2       0       0       0
  1207 ;;      Locals:         2       0       0       0
  1208 ;;      Temps:          0       0       0       0
  1209 ;;      Totals:         4       0       0       0
  1210 ;;Total ram usage:        4 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    7
  1213 ;; This function calls:
  1214 ;;		_ClearLCD
  1215 ;;		_SendLCD
  1216 ;;		_SetLine
  1217 ;; This function is called by:
  1218 ;;		_stopAndDisplay
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text4
  1223  000EEC                     __ptext4:
  1224                           	opt callstack 0
  1225  000EEC                     _display_RFID:
  1226                           	opt callstack 22
  1227                           
  1228                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1229                           
  1230                           ;incstack = 0
  1231  000EEC  EC48  F008         	call	_ClearLCD	;wreg free
  1232                           
  1233                           ;RFID.c: 110:     SetLine(1);
  1234  000EF0  0E01               	movlw	1
  1235  000EF2  ECE3  F007         	call	_SetLine
  1236                           
  1237                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1238  000EF6  0E00               	movlw	0
  1239  000EF8  6E13               	movwf	display_RFID@i+1,c
  1240  000EFA  0E00               	movlw	0
  1241  000EFC  6E12               	movwf	display_RFID@i,c
  1242  000EFE                     l2411:
  1243                           
  1244                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1245  000EFE  0E01               	movlw	1
  1246  000F00  6E0D               	movwf	SendLCD@type,c
  1247  000F02  5012               	movf	display_RFID@i,w,c
  1248  000F04  2410               	addwf	display_RFID@dataBuf,w,c
  1249  000F06  6ED9               	movwf	fsr2l,c
  1250  000F08  5013               	movf	display_RFID@i+1,w,c
  1251  000F0A  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1252  000F0C  6EDA               	movwf	fsr2h,c
  1253  000F0E  50DF               	movf	indf2,w,c
  1254  000F10  ECCB  F007         	call	_SendLCD
  1255                           
  1256                           ;RFID.c: 114:     }
  1257  000F14  4A12               	infsnz	display_RFID@i,f,c
  1258  000F16  2A13               	incf	display_RFID@i+1,f,c
  1259  000F18  BE13               	btfsc	display_RFID@i+1,7,c
  1260  000F1A  D7F1               	goto	l2411
  1261  000F1C  5013               	movf	display_RFID@i+1,w,c
  1262  000F1E  E105               	bnz	u1670
  1263  000F20  0E0A               	movlw	10
  1264  000F22  5C12               	subwf	display_RFID@i,w,c
  1265  000F24  B0D8               	btfsc	status,0,c
  1266  000F26  0012               	return	
  1267  000F28  D7EA               	goto	l2411
  1268  000F2A                     u1670:
  1269  000F2A  0012               	return		;funcret
  1270  000F2C                     __end_of_display_RFID:
  1271                           	opt callstack 0
  1272                           
  1273 ;; *************** function _check_RFID *****************
  1274 ;; Defined at:
  1275 ;;		line 70 in file "RFID.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1278 ;;		 -> RFIDbuf(12), 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  i               2   38[COMRAM] int 
  1281 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1282 ;;  checksum        1   37[COMRAM] unsigned char 
  1283 ;;  byte5           1   36[COMRAM] unsigned char 
  1284 ;;  byte4           1   35[COMRAM] unsigned char 
  1285 ;;  byte3           1   34[COMRAM] unsigned char 
  1286 ;;  byte2           1   33[COMRAM] unsigned char 
  1287 ;;  byte1           1   32[COMRAM] unsigned char 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1297 ;;      Params:         2       0       0       0
  1298 ;;      Locals:        20       0       0       0
  1299 ;;      Temps:          2       0       0       0
  1300 ;;      Totals:        24       0       0       0
  1301 ;;Total ram usage:       24 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    7
  1304 ;; This function calls:
  1305 ;;		_LCD_String
  1306 ;;		_SetLine
  1307 ;; This function is called by:
  1308 ;;		_stopAndDisplay
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text5
  1313  00039A                     __ptext5:
  1314                           	opt callstack 0
  1315  00039A                     _check_RFID:
  1316                           	opt callstack 22
  1317                           
  1318                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1319                           
  1320                           ;incstack = 0
  1321  00039A  0E00               	movlw	0
  1322  00039C  6E28               	movwf	check_RFID@i+1,c
  1323  00039E  0E00               	movlw	0
  1324  0003A0  6E27               	movwf	check_RFID@i,c
  1325  0003A2                     l2377:
  1326                           
  1327                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1328  0003A2  5027               	movf	check_RFID@i,w,c
  1329  0003A4  2411               	addwf	check_RFID@dataBuf,w,c
  1330  0003A6  6ED9               	movwf	fsr2l,c
  1331  0003A8  5028               	movf	check_RFID@i+1,w,c
  1332  0003AA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1333  0003AC  6EDA               	movwf	fsr2h,c
  1334  0003AE  0E2F               	movlw	47
  1335  0003B0  64DF               	cpfsgt	indf2,c
  1336  0003B2  D018               	goto	l2383
  1337  0003B4  5027               	movf	check_RFID@i,w,c
  1338  0003B6  2411               	addwf	check_RFID@dataBuf,w,c
  1339  0003B8  6ED9               	movwf	fsr2l,c
  1340  0003BA  5028               	movf	check_RFID@i+1,w,c
  1341  0003BC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1342  0003BE  6EDA               	movwf	fsr2h,c
  1343  0003C0  0E3A               	movlw	58
  1344  0003C2  60DF               	cpfslt	indf2,c
  1345  0003C4  D00F               	goto	l2383
  1346                           
  1347                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1348  0003C6  0E15               	movlw	low check_RFID@hexBuf
  1349  0003C8  2427               	addwf	check_RFID@i,w,c
  1350  0003CA  6ED9               	movwf	fsr2l,c
  1351  0003CC  0E00               	movlw	high check_RFID@hexBuf
  1352  0003CE  2028               	addwfc	check_RFID@i+1,w,c
  1353  0003D0  6EDA               	movwf	fsr2h,c
  1354  0003D2  5027               	movf	check_RFID@i,w,c
  1355  0003D4  2411               	addwf	check_RFID@dataBuf,w,c
  1356  0003D6  6EE1               	movwf	fsr1l,c
  1357  0003D8  5028               	movf	check_RFID@i+1,w,c
  1358  0003DA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1359  0003DC  6EE2               	movwf	fsr1h,c
  1360  0003DE  50E7               	movf	indf1,w,c
  1361  0003E0  0FD0               	addlw	208
  1362  0003E2  D020               	goto	L4
  1363  0003E4                     l2383:
  1364  0003E4  5027               	movf	check_RFID@i,w,c
  1365  0003E6  2411               	addwf	check_RFID@dataBuf,w,c
  1366  0003E8  6ED9               	movwf	fsr2l,c
  1367  0003EA  5028               	movf	check_RFID@i+1,w,c
  1368  0003EC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1369  0003EE  6EDA               	movwf	fsr2h,c
  1370  0003F0  0E40               	movlw	64
  1371  0003F2  64DF               	cpfsgt	indf2,c
  1372  0003F4  D018               	goto	l2389
  1373  0003F6  5027               	movf	check_RFID@i,w,c
  1374  0003F8  2411               	addwf	check_RFID@dataBuf,w,c
  1375  0003FA  6ED9               	movwf	fsr2l,c
  1376  0003FC  5028               	movf	check_RFID@i+1,w,c
  1377  0003FE  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1378  000400  6EDA               	movwf	fsr2h,c
  1379  000402  0E47               	movlw	71
  1380  000404  60DF               	cpfslt	indf2,c
  1381  000406  D00F               	goto	l2389
  1382                           
  1383                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1384  000408  0E15               	movlw	low check_RFID@hexBuf
  1385  00040A  2427               	addwf	check_RFID@i,w,c
  1386  00040C  6ED9               	movwf	fsr2l,c
  1387  00040E  0E00               	movlw	high check_RFID@hexBuf
  1388  000410  2028               	addwfc	check_RFID@i+1,w,c
  1389  000412  6EDA               	movwf	fsr2h,c
  1390  000414  5027               	movf	check_RFID@i,w,c
  1391  000416  2411               	addwf	check_RFID@dataBuf,w,c
  1392  000418  6EE1               	movwf	fsr1l,c
  1393  00041A  5028               	movf	check_RFID@i+1,w,c
  1394  00041C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1395  00041E  6EE2               	movwf	fsr1h,c
  1396  000420  50E7               	movf	indf1,w,c
  1397  000422  0FC9               	addlw	201
  1398  000424                     L4:
  1399  000424  6EDF               	movwf	indf2,c
  1400  000426                     l2389:
  1401                           
  1402                           ;RFID.c: 84:     }
  1403  000426  4A27               	infsnz	check_RFID@i,f,c
  1404  000428  2A28               	incf	check_RFID@i+1,f,c
  1405  00042A  BE28               	btfsc	check_RFID@i+1,7,c
  1406  00042C  D7BA               	goto	l2377
  1407  00042E  5028               	movf	check_RFID@i+1,w,c
  1408  000430  E104               	bnz	u1510
  1409  000432  0E0C               	movlw	12
  1410  000434  5C27               	subwf	check_RFID@i,w,c
  1411  000436  A0D8               	btfss	status,0,c
  1412  000438  D7B4               	goto	l2377
  1413  00043A                     u1510:
  1414                           
  1415                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1416  00043A  5015               	movf	check_RFID@hexBuf,w,c
  1417  00043C  A4D8               	btfss	status,2,c
  1418  00043E  D002               	goto	u1520
  1419  000440  0E01               	movlw	1
  1420  000442  D001               	goto	u1530
  1421  000444                     u1520:
  1422  000444  0E00               	movlw	0
  1423  000446                     u1530:
  1424  000446  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1425  000448  6E21               	movwf	check_RFID@byte1,c
  1426                           
  1427                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1428  00044A  5017               	movf	check_RFID@hexBuf+2,w,c
  1429  00044C  A4D8               	btfss	status,2,c
  1430  00044E  D002               	goto	u1540
  1431  000450  0E01               	movlw	1
  1432  000452  D001               	goto	u1550
  1433  000454                     u1540:
  1434  000454  0E00               	movlw	0
  1435  000456                     u1550:
  1436  000456  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1437  000458  6E22               	movwf	check_RFID@byte2,c
  1438                           
  1439                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1440  00045A  5019               	movf	check_RFID@hexBuf+4,w,c
  1441  00045C  A4D8               	btfss	status,2,c
  1442  00045E  D002               	goto	u1560
  1443  000460  0E01               	movlw	1
  1444  000462  D001               	goto	u1570
  1445  000464                     u1560:
  1446  000464  0E00               	movlw	0
  1447  000466                     u1570:
  1448  000466  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1449  000468  6E23               	movwf	check_RFID@byte3,c
  1450                           
  1451                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1452  00046A  501B               	movf	check_RFID@hexBuf+6,w,c
  1453  00046C  A4D8               	btfss	status,2,c
  1454  00046E  D002               	goto	u1580
  1455  000470  0E01               	movlw	1
  1456  000472  D001               	goto	u1590
  1457  000474                     u1580:
  1458  000474  0E00               	movlw	0
  1459  000476                     u1590:
  1460  000476  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1461  000478  6E24               	movwf	check_RFID@byte4,c
  1462                           
  1463                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1464  00047A  501D               	movf	check_RFID@hexBuf+8,w,c
  1465  00047C  A4D8               	btfss	status,2,c
  1466  00047E  D002               	goto	u1600
  1467  000480  0E01               	movlw	1
  1468  000482  D001               	goto	u1610
  1469  000484                     u1600:
  1470  000484  0E00               	movlw	0
  1471  000486                     u1610:
  1472  000486  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1473  000488  6E25               	movwf	check_RFID@byte5,c
  1474                           
  1475                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1476  00048A  501F               	movf	check_RFID@hexBuf+10,w,c
  1477  00048C  A4D8               	btfss	status,2,c
  1478  00048E  D002               	goto	u1620
  1479  000490  0E01               	movlw	1
  1480  000492  D001               	goto	u1630
  1481  000494                     u1620:
  1482  000494  0E00               	movlw	0
  1483  000496                     u1630:
  1484  000496  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1485  000498  6E26               	movwf	check_RFID@checksum,c
  1486                           
  1487                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1488  00049A  5021               	movf	check_RFID@byte1,w,c
  1489  00049C  1822               	xorwf	check_RFID@byte2,w,c
  1490  00049E  1823               	xorwf	check_RFID@byte3,w,c
  1491  0004A0  1824               	xorwf	check_RFID@byte4,w,c
  1492  0004A2  6E13               	movwf	??_check_RFID& (0+255),c
  1493  0004A4  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1494  0004A6  5026               	movf	check_RFID@checksum,w,c
  1495  0004A8  1825               	xorwf	check_RFID@byte5,w,c
  1496  0004AA  A4D8               	btfss	status,2,c
  1497  0004AC  D002               	goto	u1640
  1498  0004AE  0E01               	movlw	1
  1499  0004B0  D001               	goto	u1650
  1500  0004B2                     u1640:
  1501  0004B2  0E00               	movlw	0
  1502  0004B4                     u1650:
  1503  0004B4  1A13               	xorwf	??_check_RFID,f,c
  1504  0004B6  0E00               	movlw	0
  1505  0004B8  1A14               	xorwf	??_check_RFID+1,f,c
  1506  0004BA  5013               	movf	??_check_RFID,w,c
  1507  0004BC  1014               	iorwf	??_check_RFID+1,w,c
  1508  0004BE  B4D8               	btfsc	status,2,c
  1509  0004C0  D00A               	goto	l2399
  1510                           
  1511                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1512  0004C2  0E02               	movlw	2
  1513  0004C4  ECE3  F007         	call	_SetLine
  1514                           
  1515                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1516  0004C8  0E41               	movlw	low STR_2
  1517  0004CA  6E0F               	movwf	LCD_String@string,c
  1518  0004CC  0E03               	movlw	high STR_2
  1519  0004CE  6E10               	movwf	LCD_String@string+1,c
  1520  0004D0  ECD1  F006         	call	_LCD_String	;wreg free
  1521                           
  1522                           ;RFID.c: 99:     }
  1523  0004D4  0012               	return	
  1524  0004D6                     l2399:
  1525                           
  1526                           ;RFID.c: 102:         SetLine(2);
  1527  0004D6  0E02               	movlw	2
  1528  0004D8  ECE3  F007         	call	_SetLine
  1529                           
  1530                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1531  0004DC  0E31               	movlw	low STR_3
  1532  0004DE  6E0F               	movwf	LCD_String@string,c
  1533  0004E0  0E03               	movlw	high STR_3
  1534  0004E2  6E10               	movwf	LCD_String@string+1,c
  1535  0004E4  ECD1  F006         	call	_LCD_String	;wreg free
  1536  0004E8  0012               	return		;funcret
  1537  0004EA                     __end_of_check_RFID:
  1538                           	opt callstack 0
  1539                           
  1540 ;; *************** function _SetLine *****************
  1541 ;; Defined at:
  1542 ;;		line 107 in file "LCDIO.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  line            1    wreg     unsigned char 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  line            1   14[COMRAM] unsigned char 
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg, status,2, status,0, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1556 ;;      Params:         0       0       0       0
  1557 ;;      Locals:         1       0       0       0
  1558 ;;      Temps:          0       0       0       0
  1559 ;;      Totals:         1       0       0       0
  1560 ;;Total ram usage:        1 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; Hardware stack levels required when called:    6
  1563 ;; This function calls:
  1564 ;;		_SendLCD
  1565 ;; This function is called by:
  1566 ;;		_check_RFID
  1567 ;;		_display_RFID
  1568 ;;		_waitForInput
  1569 ;;		_debug
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text6
  1574  000FC6                     __ptext6:
  1575                           	opt callstack 0
  1576  000FC6                     _SetLine:
  1577                           	opt callstack 23
  1578                           
  1579                           ;incstack = 0
  1580                           ;SetLine@line stored from wreg
  1581  000FC6  6E0F               	movwf	SetLine@line,c
  1582                           
  1583                           ;LCDIO.c: 109:     if(line == 1){
  1584  000FC8  040F               	decf	SetLine@line,w,c
  1585  000FCA  A4D8               	btfss	status,2,c
  1586  000FCC  D005               	goto	l2239
  1587                           
  1588                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1589  000FCE  0E00               	movlw	0
  1590  000FD0  6E0D               	movwf	SendLCD@type,c
  1591  000FD2  0E80               	movlw	128
  1592  000FD4  ECCB  F007         	call	_SendLCD
  1593  000FD8                     l2239:
  1594                           
  1595                           ;LCDIO.c: 113:     if(line == 2){
  1596  000FD8  0E02               	movlw	2
  1597  000FDA  180F               	xorwf	SetLine@line,w,c
  1598  000FDC  A4D8               	btfss	status,2,c
  1599  000FDE  D005               	goto	l2243
  1600                           
  1601                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1602  000FE0  0E00               	movlw	0
  1603  000FE2  6E0D               	movwf	SendLCD@type,c
  1604  000FE4  0EC0               	movlw	192
  1605  000FE6  ECCB  F007         	call	_SendLCD
  1606  000FEA                     l2243:
  1607                           
  1608                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1609  000FEA  0E21               	movlw	33
  1610  000FEC                     u1867:
  1611  000FEC  2EE8               	decfsz	wreg,f,c
  1612  000FEE  D7FE               	bra	u1867
  1613  000FF0  F000               	nop	
  1614  000FF2  0012               	return		;funcret
  1615  000FF4                     __end_of_SetLine:
  1616                           	opt callstack 0
  1617                           
  1618 ;; *************** function _setup *****************
  1619 ;; Defined at:
  1620 ;;		line 45 in file "main.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1634 ;;      Params:         0       0       0       0
  1635 ;;      Locals:         0       0       0       0
  1636 ;;      Temps:          0       0       0       0
  1637 ;;      Totals:         0       0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    7
  1641 ;; This function calls:
  1642 ;;		_initPWM
  1643 ;;		_init_LCD
  1644 ;;		_init_RFID
  1645 ;;		_init_sensor
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text7
  1652  000F2C                     __ptext7:
  1653                           	opt callstack 0
  1654  000F2C                     _setup:
  1655                           	opt callstack 23
  1656                           
  1657                           ;main.c: 48:     OSCCON = 0x72;
  1658                           
  1659                           ;incstack = 0
  1660  000F2C  0E72               	movlw	114
  1661  000F2E  6ED3               	movwf	4051,c	;volatile
  1662  000F30                     l55:
  1663  000F30  A4D3               	btfss	4051,2,c	;volatile
  1664  000F32  D7FE               	goto	l55
  1665                           
  1666                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1667  000F34  8EF2               	bsf	4082,7,c	;volatile
  1668                           
  1669                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1670  000F36  8CF2               	bsf	4082,6,c	;volatile
  1671                           
  1672                           ;main.c: 52:     RCONbits.IPEN=1;
  1673  000F38  8ED0               	bsf	4048,7,c	;volatile
  1674                           
  1675                           ;main.c: 55:     init_LCD();
  1676  000F3A  ECF5  F003         	call	_init_LCD	;wreg free
  1677                           
  1678                           ;main.c: 56:     init_RFID();
  1679  000F3E  EC2E  F008         	call	_init_RFID	;wreg free
  1680                           
  1681                           ;main.c: 57:     init_sensor();
  1682  000F42  EC20  F008         	call	_init_sensor	;wreg free
  1683                           
  1684                           ;main.c: 58:     initPWM(199);
  1685  000F46  0E00               	movlw	0
  1686  000F48  6E0C               	movwf	initPWM@PWMperiod+1,c
  1687  000F4A  0EC7               	movlw	199
  1688  000F4C  6E0B               	movwf	initPWM@PWMperiod,c
  1689  000F4E  EC3B  F008         	call	_initPWM	;wreg free
  1690                           
  1691                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1692  000F52  9093               	bcf	3987,0,c	;volatile
  1693                           
  1694                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1695  000F54  9493               	bcf	3987,2,c	;volatile
  1696                           
  1697                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1698  000F56  8495               	bsf	3989,2,c	;volatile
  1699                           
  1700                           ;main.c: 66:     T0CON = 0b11001000;
  1701  000F58  0EC8               	movlw	200
  1702  000F5A  6ED5               	movwf	4053,c	;volatile
  1703                           
  1704                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1705  000F5C  8AF2               	bsf	4082,5,c	;volatile
  1706                           
  1707                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1708  000F5E  94F1               	bcf	4081,2,c	;volatile
  1709  000F60  0012               	return		;funcret
  1710  000F62                     __end_of_setup:
  1711                           	opt callstack 0
  1712                           
  1713 ;; *************** function _init_sensor *****************
  1714 ;; Defined at:
  1715 ;;		line 17 in file "signal_processing.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  throwaway       2    0        unsigned int 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1729 ;;      Params:         0       0       0       0
  1730 ;;      Locals:         2       0       0       0
  1731 ;;      Temps:          0       0       0       0
  1732 ;;      Totals:         2       0       0       0
  1733 ;;Total ram usage:        2 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    3
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_setup
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text8
  1744  001040                     __ptext8:
  1745                           	opt callstack 0
  1746  001040                     _init_sensor:
  1747                           	opt callstack 26
  1748                           
  1749                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1750                           
  1751                           ;incstack = 0
  1752  001040  0E01               	movlw	1
  1753  001042  6EB7               	movwf	4023,c	;volatile
  1754                           
  1755                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1756  001044  8492               	bsf	3986,2,c	;volatile
  1757                           
  1758                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1759  001046  0E00               	movlw	0
  1760  001048  6EB8               	movwf	4024,c	;volatile
  1761                           
  1762                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1763  00104A  0E00               	movlw	0
  1764  00104C  6EB9               	movwf	4025,c	;volatile
  1765                           
  1766                           ;signal_processing.c: 26:     DFLTCON = 0b00001000;
  1767  00104E  0E08               	movlw	8
  1768  001050  6E60               	movwf	3936,c	;volatile
  1769                           
  1770                           ;signal_processing.c: 27:     CAP1CON = 0b01000111;
  1771  001052  0E47               	movlw	71
  1772  001054  6E63               	movwf	3939,c	;volatile
  1773  001056  5069               	movf	3945,w,c	;volatile
  1774  001058  5068               	movf	3944,w,c	;volatile
  1775  00105A  0012               	return		;funcret
  1776  00105C                     __end_of_init_sensor:
  1777                           	opt callstack 0
  1778                           
  1779 ;; *************** function _init_RFID *****************
  1780 ;; Defined at:
  1781 ;;		line 13 in file "RFID.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1795 ;;      Params:         0       0       0       0
  1796 ;;      Locals:         0       0       0       0
  1797 ;;      Temps:          0       0       0       0
  1798 ;;      Totals:         0       0       0       0
  1799 ;;Total ram usage:        0 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    3
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_setup
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text9
  1810  00105C                     __ptext9:
  1811                           	opt callstack 0
  1812  00105C                     _init_RFID:
  1813                           	opt callstack 26
  1814                           
  1815                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1816                           
  1817                           ;incstack = 0
  1818  00105C  8E94               	bsf	3988,7,c	;volatile
  1819                           
  1820                           ;RFID.c: 19:     SPBRG = 203;
  1821  00105E  0ECB               	movlw	203
  1822  001060  6EAF               	movwf	4015,c	;volatile
  1823                           
  1824                           ;RFID.c: 20:     SPBRGH = 0;
  1825  001062  0E00               	movlw	0
  1826  001064  6EB0               	movwf	4016,c	;volatile
  1827                           
  1828                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1829  001066  86AA               	bsf	4010,3,c	;volatile
  1830                           
  1831                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1832  001068  84AC               	bsf	4012,2,c	;volatile
  1833                           
  1834                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1835  00106A  88AB               	bsf	4011,4,c	;volatile
  1836                           
  1837                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1838  00106C  8EAB               	bsf	4011,7,c	;volatile
  1839                           
  1840                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1841  00106E  8AAC               	bsf	4012,5,c	;volatile
  1842                           
  1843                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1844  001070  8A9D               	bsf	3997,5,c	;volatile
  1845                           
  1846                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1847  001072  8A9F               	bsf	3999,5,c	;volatile
  1848  001074  0012               	return		;funcret
  1849  001076                     __end_of_init_RFID:
  1850                           	opt callstack 0
  1851                           
  1852 ;; *************** function _init_LCD *****************
  1853 ;; Defined at:
  1854 ;;		line 56 in file "LCDIO.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0       0       0       0
  1870 ;;      Temps:          1       0       0       0
  1871 ;;      Totals:         1       0       0       0
  1872 ;;Total ram usage:        1 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    6
  1875 ;; This function calls:
  1876 ;;		_LCDout
  1877 ;;		_SendLCD
  1878 ;; This function is called by:
  1879 ;;		_setup
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text10
  1884  0007EA                     __ptext10:
  1885                           	opt callstack 0
  1886  0007EA                     _init_LCD:
  1887                           	opt callstack 23
  1888                           
  1889                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1890                           
  1891                           ;incstack = 0
  1892  0007EA  9094               	bcf	3988,0,c	;volatile
  1893                           
  1894                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1895  0007EC  9E92               	bcf	3986,7,c	;volatile
  1896                           
  1897                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1898  0007EE  9694               	bcf	3988,3,c	;volatile
  1899                           
  1900                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1901  0007F0  9095               	bcf	3989,0,c	;volatile
  1902                           
  1903                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1904  0007F2  9295               	bcf	3989,1,c	;volatile
  1905                           
  1906                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1907  0007F4  9C92               	bcf	3986,6,c	;volatile
  1908                           
  1909                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1910  0007F6  908C               	bcf	3980,0,c	;volatile
  1911                           
  1912                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1913  0007F8  928C               	bcf	3980,1,c	;volatile
  1914                           
  1915                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1916  0007FA  968B               	bcf	3979,3,c	;volatile
  1917                           
  1918                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1919  0007FC  908B               	bcf	3979,0,c	;volatile
  1920                           
  1921                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1922  0007FE  9C89               	bcf	3977,6,c	;volatile
  1923                           
  1924                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1925  000800  9E89               	bcf	3977,7,c	;volatile
  1926                           
  1927                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1928  000802  0E27               	movlw	39
  1929  000804  6E0F               	movwf	??_init_LCD& (0+255),c
  1930  000806  0EF5               	movlw	245
  1931  000808                     u1877:
  1932  000808  2EE8               	decfsz	wreg,f,c
  1933  00080A  D7FE               	bra	u1877
  1934  00080C  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1935  00080E  D7FC               	bra	u1877
  1936  000810  F000               	nop	
  1937                           
  1938                           ;LCDIO.c: 76:  LCDout(0b0011);
  1939  000812  0E03               	movlw	3
  1940  000814  EC66  F006         	call	_LCDout
  1941                           
  1942                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1943  000818  0E0D               	movlw	13
  1944  00081A  6E0F               	movwf	??_init_LCD& (0+255),c
  1945  00081C  0EFC               	movlw	252
  1946  00081E                     u1887:
  1947  00081E  2EE8               	decfsz	wreg,f,c
  1948  000820  D7FE               	bra	u1887
  1949  000822  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1950  000824  D7FC               	bra	u1887
  1951                           
  1952                           ;LCDIO.c: 78:  LCDout(0b0011);
  1953  000826  0E03               	movlw	3
  1954  000828  EC66  F006         	call	_LCDout
  1955                           
  1956                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1957  00082C  0E85               	movlw	133
  1958  00082E                     u1897:
  1959  00082E  2EE8               	decfsz	wreg,f,c
  1960  000830  D7FE               	bra	u1897
  1961  000832  F000               	nop	
  1962                           
  1963                           ;LCDIO.c: 80:  LCDout(0b0011);
  1964  000834  0E03               	movlw	3
  1965  000836  EC66  F006         	call	_LCDout
  1966                           
  1967                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1968  00083A  0E21               	movlw	33
  1969  00083C                     u1907:
  1970  00083C  2EE8               	decfsz	wreg,f,c
  1971  00083E  D7FE               	bra	u1907
  1972  000840  F000               	nop	
  1973                           
  1974                           ;LCDIO.c: 82:  LCDout(0b0010);
  1975  000842  0E02               	movlw	2
  1976  000844  EC66  F006         	call	_LCDout
  1977                           
  1978                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1979  000848  0E21               	movlw	33
  1980  00084A                     u1917:
  1981  00084A  2EE8               	decfsz	wreg,f,c
  1982  00084C  D7FE               	bra	u1917
  1983  00084E  F000               	nop	
  1984                           
  1985                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1986  000850  0E00               	movlw	0
  1987  000852  6E0D               	movwf	SendLCD@type,c
  1988  000854  0E28               	movlw	40
  1989  000856  ECCB  F007         	call	_SendLCD
  1990                           
  1991                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1992  00085A  0E21               	movlw	33
  1993  00085C                     u1927:
  1994  00085C  2EE8               	decfsz	wreg,f,c
  1995  00085E  D7FE               	bra	u1927
  1996  000860  F000               	nop	
  1997                           
  1998                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1999  000862  0E00               	movlw	0
  2000  000864  6E0D               	movwf	SendLCD@type,c
  2001  000866  0E08               	movlw	8
  2002  000868  ECCB  F007         	call	_SendLCD
  2003                           
  2004                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2005  00086C  0E21               	movlw	33
  2006  00086E                     u1937:
  2007  00086E  2EE8               	decfsz	wreg,f,c
  2008  000870  D7FE               	bra	u1937
  2009  000872  F000               	nop	
  2010                           
  2011                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2012  000874  0E00               	movlw	0
  2013  000876  6E0D               	movwf	SendLCD@type,c
  2014  000878  0E01               	movlw	1
  2015  00087A  ECCB  F007         	call	_SendLCD
  2016                           
  2017                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2018  00087E  0E0D               	movlw	13
  2019  000880  6E0F               	movwf	??_init_LCD& (0+255),c
  2020  000882  0EFC               	movlw	252
  2021  000884                     u1947:
  2022  000884  2EE8               	decfsz	wreg,f,c
  2023  000886  D7FE               	bra	u1947
  2024  000888  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2025  00088A  D7FC               	bra	u1947
  2026                           
  2027                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2028  00088C  0E00               	movlw	0
  2029  00088E  6E0D               	movwf	SendLCD@type,c
  2030  000890  0E06               	movlw	6
  2031  000892  ECCB  F007         	call	_SendLCD
  2032                           
  2033                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2034  000896  0E21               	movlw	33
  2035  000898                     u1957:
  2036  000898  2EE8               	decfsz	wreg,f,c
  2037  00089A  D7FE               	bra	u1957
  2038  00089C  F000               	nop	
  2039                           
  2040                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2041  00089E  0E00               	movlw	0
  2042  0008A0  6E0D               	movwf	SendLCD@type,c
  2043  0008A2  0E0C               	movlw	12
  2044  0008A4  ECCB  F007         	call	_SendLCD
  2045                           
  2046                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2047  0008A8  0E21               	movlw	33
  2048  0008AA                     u1967:
  2049  0008AA  2EE8               	decfsz	wreg,f,c
  2050  0008AC  D7FE               	bra	u1967
  2051  0008AE  F000               	nop	
  2052  0008B0  0012               	return		;funcret
  2053  0008B2                     __end_of_init_LCD:
  2054                           	opt callstack 0
  2055                           
  2056 ;; *************** function _initPWM *****************
  2057 ;; Defined at:
  2058 ;;		line 5 in file "dc_motor.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  PWMperiod       2   10[COMRAM] int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;		None
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, status,2
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2072 ;;      Params:         2       0       0       0
  2073 ;;      Locals:         0       0       0       0
  2074 ;;      Temps:          0       0       0       0
  2075 ;;      Totals:         2       0       0       0
  2076 ;;Total ram usage:        2 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    3
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_setup
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text11
  2087  001076                     __ptext11:
  2088                           	opt callstack 0
  2089  001076                     _initPWM:
  2090                           	opt callstack 26
  2091                           
  2092                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2093                           
  2094                           ;incstack = 0
  2095  001076  0E00               	movlw	0
  2096  001078  6E7F               	movwf	3967,c	;volatile
  2097                           
  2098                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2099  00107A  0E80               	movlw	128
  2100  00107C  6E7E               	movwf	3966,c	;volatile
  2101                           
  2102                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2103  00107E  0E6F               	movlw	111
  2104  001080  6E6F               	movwf	3951,c	;volatile
  2105                           
  2106                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2107  001082  0E00               	movlw	0
  2108  001084  6E6E               	movwf	3950,c	;volatile
  2109                           
  2110                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2111  001086  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2112                           
  2113                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2114  00108A  500C               	movf	initPWM@PWMperiod+1,w,c
  2115  00108C  6E7A               	movwf	3962,c	;volatile
  2116  00108E  0012               	return		;funcret
  2117  001090                     __end_of_initPWM:
  2118                           	opt callstack 0
  2119                           
  2120 ;; *************** function _scanForBeacon *****************
  2121 ;; Defined at:
  2122 ;;		line 18 in file "subroutines.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2125 ;;		 -> main@motorL(9), 
  2126 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2127 ;;		 -> main@motorR(9), 
  2128 ;;  speed           2   46[COMRAM] int 
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;  raw_data        2   50[COMRAM] unsigned int 
  2131 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2132 ;;  smoothed_dat    2   53[COMRAM] unsigned int 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      unsigned char 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2142 ;;      Params:         6       0       0       0
  2143 ;;      Locals:         5       0       0       0
  2144 ;;      Temps:          2       0       0       0
  2145 ;;      Totals:        13       0       0       0
  2146 ;;Total ram usage:       13 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    7
  2149 ;; This function calls:
  2150 ;;		_ClearLCD
  2151 ;;		_LCD_String
  2152 ;;		_classify_data
  2153 ;;		_turnRight
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text12
  2160  0008B2                     __ptext12:
  2161                           	opt callstack 0
  2162  0008B2                     _scanForBeacon:
  2163                           	opt callstack 23
  2164                           
  2165                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 19: {;subroutines.c: 20:     turnRight(mL,mR,speed);
  2166                           
  2167                           ;incstack = 0
  2168  0008B2  C02B  F022         	movff	scanForBeacon@mL,turnRight@mL
  2169  0008B6  C02C  F023         	movff	scanForBeacon@mL+1,turnRight@mL+1
  2170  0008BA  C02D  F024         	movff	scanForBeacon@mR,turnRight@mR
  2171  0008BE  C02E  F025         	movff	scanForBeacon@mR+1,turnRight@mR+1
  2172  0008C2  C02F  F026         	movff	scanForBeacon@speed,turnRight@max_power
  2173  0008C6  C030  F027         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  2174  0008CA  EC65  F005         	call	_turnRight	;wreg free
  2175                           
  2176                           ;subroutines.c: 21:     ClearLCD();
  2177  0008CE  EC48  F008         	call	_ClearLCD	;wreg free
  2178                           
  2179                           ;subroutines.c: 22:     LCD_String("SEARCHING");
  2180  0008D2  0E8B               	movlw	low STR_4
  2181  0008D4  6E0F               	movwf	LCD_String@string,c
  2182  0008D6  0E03               	movlw	high STR_4
  2183  0008D8  6E10               	movwf	LCD_String@string+1,c
  2184  0008DA  ECD1  F006         	call	_LCD_String	;wreg free
  2185                           
  2186                           ;subroutines.c: 25:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  2187  0008DE  5068               	movf	3944,w,c	;volatile
  2188  0008E0  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2189  0008E4  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2190  0008E6  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2191  0008EA  6A31               	clrf	??_scanForBeacon,c
  2192  0008EC  1031               	iorwf	??_scanForBeacon,w,c
  2193  0008EE  6E36               	movwf	scanForBeacon@smoothed_data,c
  2194  0008F0  5032               	movf	??_scanForBeacon+1,w,c
  2195  0008F2  6E37               	movwf	scanForBeacon@smoothed_data+1,c
  2196  0008F4                     l2499:
  2197                           
  2198                           ;subroutines.c: 29:     {;subroutines.c: 31:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2199  0008F4  5068               	movf	3944,w,c	;volatile
  2200  0008F6  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2201  0008FA  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2202  0008FC  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2203  000900  6A31               	clrf	??_scanForBeacon,c
  2204  000902  1031               	iorwf	??_scanForBeacon,w,c
  2205  000904  6E33               	movwf	scanForBeacon@raw_data,c
  2206  000906  5032               	movf	??_scanForBeacon+1,w,c
  2207  000908  6E34               	movwf	scanForBeacon@raw_data+1,c
  2208                           
  2209                           ;subroutines.c: 34:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  2210  00090A  C033  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2211  00090E  C034  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2212  000912  0E36               	movlw	low scanForBeacon@smoothed_data
  2213  000914  6E0D               	movwf	classify_data@smoothed,c
  2214  000916  0E00               	movlw	high scanForBeacon@smoothed_data
  2215  000918  6E0E               	movwf	classify_data@smoothed+1,c
  2216  00091A  ECE0  F004         	call	_classify_data	;wreg free
  2217  00091E  6E35               	movwf	scanForBeacon@beacon_location,c
  2218                           
  2219                           ;subroutines.c: 38:         if(beacon_location == 1)
  2220  000920  0435               	decf	scanForBeacon@beacon_location,w,c
  2221  000922  A4D8               	btfss	status,2,c
  2222  000924  D002               	goto	l2509
  2223                           
  2224                           ;subroutines.c: 39:         {;subroutines.c: 40:             return 1;
  2225  000926  0E01               	movlw	1
  2226  000928  0012               	return	
  2227  00092A                     l2509:
  2228                           
  2229                           ;subroutines.c: 42:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2230  00092A  0E03               	movlw	3
  2231  00092C  6E31               	movwf	??_scanForBeacon& (0+255),c
  2232  00092E  0E98               	movlw	152
  2233  000930                     u1977:
  2234  000930  2EE8               	decfsz	wreg,f,c
  2235  000932  D7FE               	bra	u1977
  2236  000934  2E31               	decfsz	??_scanForBeacon& (0+255),f,c
  2237  000936  D7FC               	bra	u1977
  2238  000938  D7DD               	goto	l2499
  2239  00093A                     __end_of_scanForBeacon:
  2240                           	opt callstack 0
  2241                           
  2242 ;; *************** function _turnRight *****************
  2243 ;; Defined at:
  2244 ;;		line 53 in file "dc_motor.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2247 ;;		 -> main@motorL(9), 
  2248 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2249 ;;		 -> main@motorR(9), 
  2250 ;;  max_power       2   37[COMRAM] int 
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  i               2   40[COMRAM] int 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2262 ;;      Params:         6       0       0       0
  2263 ;;      Locals:         2       0       0       0
  2264 ;;      Temps:          1       0       0       0
  2265 ;;      Totals:         9       0       0       0
  2266 ;;Total ram usage:        9 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    5
  2269 ;; This function calls:
  2270 ;;		_setMotorPWM
  2271 ;; This function is called by:
  2272 ;;		_scanForBeacon
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           	psect	text13
  2277  000ACA                     __ptext13:
  2278                           	opt callstack 0
  2279  000ACA                     _turnRight:
  2280                           	opt callstack 24
  2281                           
  2282                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 1;
  2283                           
  2284                           ;incstack = 0
  2285  000ACA  EE20 F001          	lfsr	2,1
  2286  000ACE  5022               	movf	turnRight@mL,w,c
  2287  000AD0  26D9               	addwf	fsr2l,f,c
  2288  000AD2  5023               	movf	turnRight@mL+1,w,c
  2289  000AD4  22DA               	addwfc	fsr2h,f,c
  2290  000AD6  0E01               	movlw	1
  2291  000AD8  6EDF               	movwf	indf2,c
  2292                           
  2293                           ;dc_motor.c: 57:     mR->direction = 0;
  2294  000ADA  EE20 F001          	lfsr	2,1
  2295  000ADE  5024               	movf	turnRight@mR,w,c
  2296  000AE0  26D9               	addwf	fsr2l,f,c
  2297  000AE2  5025               	movf	turnRight@mR+1,w,c
  2298  000AE4  22DA               	addwfc	fsr2h,f,c
  2299  000AE6  0E00               	movlw	0
  2300  000AE8  6EDF               	movwf	indf2,c
  2301                           
  2302                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2303  000AEA  0E00               	movlw	0
  2304  000AEC  6E2A               	movwf	turnRight@i+1,c
  2305  000AEE  0E00               	movlw	0
  2306  000AF0  6E29               	movwf	turnRight@i,c
  2307  000AF2  D021               	goto	l2337
  2308  000AF4                     l2327:
  2309                           
  2310                           ;dc_motor.c: 60:         mL->power = i;
  2311  000AF4  C022  FFD9         	movff	turnRight@mL,fsr2l
  2312  000AF8  C023  FFDA         	movff	turnRight@mL+1,fsr2h
  2313  000AFC  C029  FFDF         	movff	turnRight@i,indf2
  2314                           
  2315                           ;dc_motor.c: 61:         mR->power = i;
  2316  000B00  C024  FFD9         	movff	turnRight@mR,fsr2l
  2317  000B04  C025  FFDA         	movff	turnRight@mR+1,fsr2h
  2318  000B08  C029  FFDF         	movff	turnRight@i,indf2
  2319                           
  2320                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2321  000B0C  C022  F019         	movff	turnRight@mL,setMotorPWM@m
  2322  000B10  C023  F01A         	movff	turnRight@mL+1,setMotorPWM@m+1
  2323  000B14  EC75  F002         	call	_setMotorPWM	;wreg free
  2324                           
  2325                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2326  000B18  C024  F019         	movff	turnRight@mR,setMotorPWM@m
  2327  000B1C  C025  F01A         	movff	turnRight@mR+1,setMotorPWM@m+1
  2328  000B20  EC75  F002         	call	_setMotorPWM	;wreg free
  2329                           
  2330                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2331  000B24  0E03               	movlw	3
  2332  000B26  6E28               	movwf	??_turnRight& (0+255),c
  2333  000B28  0E98               	movlw	152
  2334  000B2A                     u1987:
  2335  000B2A  2EE8               	decfsz	wreg,f,c
  2336  000B2C  D7FE               	bra	u1987
  2337  000B2E  2E28               	decfsz	??_turnRight& (0+255),f,c
  2338  000B30  D7FC               	bra	u1987
  2339                           
  2340                           ;dc_motor.c: 66:     }
  2341  000B32  4A29               	infsnz	turnRight@i,f,c
  2342  000B34  2A2A               	incf	turnRight@i+1,f,c
  2343  000B36                     l2337:
  2344  000B36  5026               	movf	turnRight@max_power,w,c
  2345  000B38  5C29               	subwf	turnRight@i,w,c
  2346  000B3A  502A               	movf	turnRight@i+1,w,c
  2347  000B3C  0A80               	xorlw	128
  2348  000B3E  6E28               	movwf	??_turnRight& (0+255),c
  2349  000B40  5027               	movf	turnRight@max_power+1,w,c
  2350  000B42  0A80               	xorlw	128
  2351  000B44  5828               	subwfb	??_turnRight& (0+255),w,c
  2352  000B46  B0D8               	btfsc	status,0,c
  2353  000B48  0012               	return	
  2354  000B4A  D7D4               	goto	l2327
  2355  000B4C                     __end_of_turnRight:
  2356                           	opt callstack 0
  2357                           
  2358 ;; *************** function _classify_data *****************
  2359 ;; Defined at:
  2360 ;;		line 36 in file "signal_processing.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  raw_data        2   10[COMRAM] unsigned int 
  2363 ;;  smoothed        2   12[COMRAM] PTR unsigned int 
  2364 ;;		 -> scanForBeacon@smoothed_data(2), 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  filtered        2   21[COMRAM] unsigned int 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2376 ;;      Params:         4       0       0       0
  2377 ;;      Locals:         2       0       0       0
  2378 ;;      Temps:          7       0       0       0
  2379 ;;      Totals:        13       0       0       0
  2380 ;;Total ram usage:       13 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    3
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_scanForBeacon
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text14
  2391  0009C0                     __ptext14:
  2392                           	opt callstack 0
  2393  0009C0                     _classify_data:
  2394                           	opt callstack 26
  2395                           
  2396                           ;signal_processing.c: 36: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 37: {;signal_processing.c: 40:     *smoothed = *smoothed + ((ra
      +                          w_data - *smoothed) >> 5);
  2397                           
  2398                           ;incstack = 0
  2399  0009C0  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2400  0009C4  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2401  0009C8  CFDE F00F          	movff	postinc2,??_classify_data
  2402  0009CC  CFDD F010          	movff	postdec2,??_classify_data+1
  2403  0009D0  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2404  0009D4  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2405  0009D8  CFDE F011          	movff	postinc2,??_classify_data+2
  2406  0009DC  CFDD F012          	movff	postdec2,??_classify_data+3
  2407  0009E0  C00B  F013         	movff	classify_data@raw_data,??_classify_data+4
  2408  0009E4  C00C  F014         	movff	classify_data@raw_data+1,??_classify_data+5
  2409  0009E8  5011               	movf	??_classify_data+2,w,c
  2410  0009EA  5E13               	subwf	??_classify_data+4,f,c
  2411  0009EC  5012               	movf	??_classify_data+3,w,c
  2412  0009EE  5A14               	subwfb	??_classify_data+5,f,c
  2413  0009F0  0E05               	movlw	5
  2414  0009F2  6E15               	movwf	(??_classify_data+6)& (0+255),c
  2415  0009F4                     u1685:
  2416  0009F4  90D8               	bcf	status,0,c
  2417  0009F6  3214               	rrcf	??_classify_data+5,f,c
  2418  0009F8  3213               	rrcf	??_classify_data+4,f,c
  2419  0009FA  2E15               	decfsz	(??_classify_data+6)& (0+255),f,c
  2420  0009FC  D7FB               	goto	u1685
  2421  0009FE  500F               	movf	??_classify_data,w,c
  2422  000A00  2613               	addwf	??_classify_data+4,f,c
  2423  000A02  5010               	movf	??_classify_data+1,w,c
  2424  000A04  2214               	addwfc	??_classify_data+5,f,c
  2425  000A06  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2426  000A0A  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2427  000A0E  C013  FFDE         	movff	??_classify_data+4,postinc2
  2428  000A12  C014  FFDD         	movff	??_classify_data+5,postdec2
  2429                           
  2430                           ;signal_processing.c: 41:     unsigned int filtered = raw_data - *smoothed;
  2431  000A16  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2432  000A1A  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2433  000A1E  CFDE F00F          	movff	postinc2,??_classify_data
  2434  000A22  CFDD F010          	movff	postdec2,??_classify_data+1
  2435  000A26  500F               	movf	??_classify_data,w,c
  2436  000A28  5C0B               	subwf	classify_data@raw_data,w,c
  2437  000A2A  6E16               	movwf	classify_data@filtered,c
  2438  000A2C  5010               	movf	??_classify_data+1,w,c
  2439  000A2E  580C               	subwfb	classify_data@raw_data+1,w,c
  2440  000A30  6E17               	movwf	classify_data@filtered+1,c
  2441                           
  2442                           ;signal_processing.c: 44:     if(filtered >= 100)
  2443  000A32  5017               	movf	classify_data@filtered+1,w,c
  2444  000A34  E104               	bnz	u1690
  2445  000A36  0E64               	movlw	100
  2446  000A38  5C16               	subwf	classify_data@filtered,w,c
  2447  000A3A  A0D8               	btfss	status,0,c
  2448  000A3C  D002               	goto	l2427
  2449  000A3E                     u1690:
  2450                           
  2451                           ;signal_processing.c: 45:     {;signal_processing.c: 46:         return 1;
  2452  000A3E  0E01               	movlw	1
  2453  000A40  0012               	return	
  2454  000A42                     l2427:
  2455                           
  2456                           ;signal_processing.c: 49:     {;signal_processing.c: 50:         return 0;
  2457  000A42  0E00               	movlw	0
  2458  000A44  0012               	return		;funcret
  2459  000A46                     __end_of_classify_data:
  2460                           	opt callstack 0
  2461                           
  2462 ;; *************** function _returnHome *****************
  2463 ;; Defined at:
  2464 ;;		line 74 in file "subroutines.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2467 ;;		 -> main@motorL(9), 
  2468 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2469 ;;		 -> main@motorR(9), 
  2470 ;;  speed           2   46[COMRAM] int 
  2471 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2472 ;;		 -> movement_time(4), 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;		None
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      unsigned char 
  2477 ;; Registers used:
  2478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2484 ;;      Params:         8       0       0       0
  2485 ;;      Locals:         0       0       0       0
  2486 ;;      Temps:          4       0       0       0
  2487 ;;      Totals:        12       0       0       0
  2488 ;;Total ram usage:       12 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    7
  2491 ;; This function calls:
  2492 ;;		_ClearLCD
  2493 ;;		_LCD_String
  2494 ;;		_moveBackward
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text15
  2501  000EA8                     __ptext15:
  2502                           	opt callstack 0
  2503  000EA8                     _returnHome:
  2504                           	opt callstack 23
  2505                           
  2506                           ;subroutines.c: 74: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 75:                             volatile unsigned long *time);s
      +                          ubroutines.c: 76: {;subroutines.c: 77:     moveBackward(mL,mR,speed);
  2507                           
  2508                           ;incstack = 0
  2509  000EA8  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2510  000EAC  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2511  000EB0  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2512  000EB4  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2513  000EB8  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2514  000EBC  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2515  000EC0  ECA6  F005         	call	_moveBackward	;wreg free
  2516                           
  2517                           ;subroutines.c: 79:     ClearLCD();
  2518  000EC4  EC48  F008         	call	_ClearLCD	;wreg free
  2519                           
  2520                           ;subroutines.c: 80:     LCD_String("RETURNING HOME");
  2521  000EC8  0E60               	movlw	low STR_6
  2522  000ECA  6E0F               	movwf	LCD_String@string,c
  2523  000ECC  0E03               	movlw	high STR_6
  2524  000ECE  6E10               	movwf	LCD_String@string+1,c
  2525  000ED0  ECD1  F006         	call	_LCD_String	;wreg free
  2526  000ED4                     l2539:
  2527  000ED4  C031  FFD9         	movff	returnHome@time,fsr2l
  2528  000ED8  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2529  000EDC  50DE               	movf	postinc2,w,c
  2530  000EDE  10DE               	iorwf	postinc2,w,c
  2531  000EE0  10DE               	iorwf	postinc2,w,c
  2532  000EE2  10DE               	iorwf	postinc2,w,c
  2533  000EE4  A4D8               	btfss	status,2,c
  2534  000EE6  D7F6               	goto	l2539
  2535                           
  2536                           ;subroutines.c: 82:     return 3;
  2537  000EE8  0E03               	movlw	3
  2538  000EEA  0012               	return		;funcret
  2539  000EEC                     __end_of_returnHome:
  2540                           	opt callstack 0
  2541                           
  2542 ;; *************** function _moveBackward *****************
  2543 ;; Defined at:
  2544 ;;		line 85 in file "dc_motor.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2547 ;;		 -> main@motorL(9), 
  2548 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2549 ;;		 -> main@motorR(9), 
  2550 ;;  max_power       2   37[COMRAM] int 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  i               2   40[COMRAM] int 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2562 ;;      Params:         6       0       0       0
  2563 ;;      Locals:         2       0       0       0
  2564 ;;      Temps:          1       0       0       0
  2565 ;;      Totals:         9       0       0       0
  2566 ;;Total ram usage:        9 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    5
  2569 ;; This function calls:
  2570 ;;		_setMotorPWM
  2571 ;; This function is called by:
  2572 ;;		_returnHome
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text16
  2577  000B4C                     __ptext16:
  2578                           	opt callstack 0
  2579  000B4C                     _moveBackward:
  2580                           	opt callstack 24
  2581                           
  2582                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2583                           
  2584                           ;incstack = 0
  2585  000B4C  EE20 F001          	lfsr	2,1
  2586  000B50  5022               	movf	moveBackward@mL,w,c
  2587  000B52  26D9               	addwf	fsr2l,f,c
  2588  000B54  5023               	movf	moveBackward@mL+1,w,c
  2589  000B56  22DA               	addwfc	fsr2h,f,c
  2590  000B58  0E00               	movlw	0
  2591  000B5A  6EDF               	movwf	indf2,c
  2592                           
  2593                           ;dc_motor.c: 88:     mR->direction = 0;
  2594  000B5C  EE20 F001          	lfsr	2,1
  2595  000B60  5024               	movf	moveBackward@mR,w,c
  2596  000B62  26D9               	addwf	fsr2l,f,c
  2597  000B64  5025               	movf	moveBackward@mR+1,w,c
  2598  000B66  22DA               	addwfc	fsr2h,f,c
  2599  000B68  0E00               	movlw	0
  2600  000B6A  6EDF               	movwf	indf2,c
  2601                           
  2602                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2603  000B6C  0E00               	movlw	0
  2604  000B6E  6E2A               	movwf	moveBackward@i+1,c
  2605  000B70  0E00               	movlw	0
  2606  000B72  6E29               	movwf	moveBackward@i,c
  2607  000B74  D021               	goto	l2369
  2608  000B76                     l2359:
  2609                           
  2610                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2611  000B76  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2612  000B7A  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2613  000B7E  C029  FFDF         	movff	moveBackward@i,indf2
  2614                           
  2615                           ;dc_motor.c: 92:         mR->power = i;
  2616  000B82  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2617  000B86  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2618  000B8A  C029  FFDF         	movff	moveBackward@i,indf2
  2619                           
  2620                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2621  000B8E  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2622  000B92  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2623  000B96  EC75  F002         	call	_setMotorPWM	;wreg free
  2624                           
  2625                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2626  000B9A  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2627  000B9E  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2628  000BA2  EC75  F002         	call	_setMotorPWM	;wreg free
  2629                           
  2630                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2631  000BA6  0E03               	movlw	3
  2632  000BA8  6E28               	movwf	??_moveBackward& (0+255),c
  2633  000BAA  0E98               	movlw	152
  2634  000BAC                     u1997:
  2635  000BAC  2EE8               	decfsz	wreg,f,c
  2636  000BAE  D7FE               	bra	u1997
  2637  000BB0  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2638  000BB2  D7FC               	bra	u1997
  2639                           
  2640                           ;dc_motor.c: 96:     }
  2641  000BB4  4A29               	infsnz	moveBackward@i,f,c
  2642  000BB6  2A2A               	incf	moveBackward@i+1,f,c
  2643  000BB8                     l2369:
  2644  000BB8  5026               	movf	moveBackward@max_power,w,c
  2645  000BBA  5C29               	subwf	moveBackward@i,w,c
  2646  000BBC  502A               	movf	moveBackward@i+1,w,c
  2647  000BBE  0A80               	xorlw	128
  2648  000BC0  6E28               	movwf	??_moveBackward& (0+255),c
  2649  000BC2  5027               	movf	moveBackward@max_power+1,w,c
  2650  000BC4  0A80               	xorlw	128
  2651  000BC6  5828               	subwfb	??_moveBackward& (0+255),w,c
  2652  000BC8  B0D8               	btfsc	status,0,c
  2653  000BCA  0012               	return	
  2654  000BCC  D7D4               	goto	l2359
  2655  000BCE                     __end_of_moveBackward:
  2656                           	opt callstack 0
  2657                           
  2658 ;; *************** function _moveToBeacon *****************
  2659 ;; Defined at:
  2660 ;;		line 48 in file "subroutines.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2663 ;;		 -> main@motorL(9), 
  2664 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2665 ;;		 -> main@motorR(9), 
  2666 ;;  speed           2   46[COMRAM] int 
  2667 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2668 ;;		 -> movement_time(4), 
  2669 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2670 ;;		 -> NULL(0), RFID_flag(1), 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  1    wreg      unsigned char 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2682 ;;      Params:        10       0       0       0
  2683 ;;      Locals:         0       0       0       0
  2684 ;;      Temps:          4       0       0       0
  2685 ;;      Totals:        14       0       0       0
  2686 ;;Total ram usage:       14 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    7
  2689 ;; This function calls:
  2690 ;;		_ClearLCD
  2691 ;;		_LCD_String
  2692 ;;		_moveForward
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text17
  2699  000D44                     __ptext17:
  2700                           	opt callstack 0
  2701  000D44                     _moveToBeacon:
  2702                           	opt callstack 23
  2703                           
  2704                           ;subroutines.c: 48: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 49:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 50: {;subroutines.c: 51:     moveForward(mL,mR,spe
      +                          ed);
  2705                           
  2706                           ;incstack = 0
  2707  000D44  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2708  000D48  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2709  000D4C  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2710  000D50  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2711  000D54  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2712  000D58  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2713  000D5C  ECE7  F005         	call	_moveForward	;wreg free
  2714                           
  2715                           ;subroutines.c: 52:     ClearLCD();
  2716  000D60  EC48  F008         	call	_ClearLCD	;wreg free
  2717                           
  2718                           ;subroutines.c: 53:     LCD_String("MOVING TO BOMB");
  2719  000D64  0E51               	movlw	low STR_5
  2720  000D66  6E0F               	movwf	LCD_String@string,c
  2721  000D68  0E03               	movlw	high STR_5
  2722  000D6A  6E10               	movwf	LCD_String@string+1,c
  2723  000D6C  ECD1  F006         	call	_LCD_String	;wreg free
  2724  000D70                     l2517:
  2725                           
  2726                           ;subroutines.c: 57:           {;subroutines.c: 60:               if(*exit_flag == 1)
  2727  000D70  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2728  000D74  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2729  000D78  04DE               	decf	postinc2,w,c
  2730  000D7A  A4D8               	btfss	status,2,c
  2731  000D7C  D002               	goto	l2527
  2732  000D7E                     u1740:
  2733  000D7E                     l2521:
  2734                           
  2735                           ;subroutines.c: 63:                   return 2;
  2736  000D7E  0E02               	movlw	2
  2737  000D80  0012               	return	
  2738  000D82                     l2527:
  2739  000D82  C031  FFD9         	movff	moveToBeacon@time,fsr2l
  2740  000D86  C032  FFDA         	movff	moveToBeacon@time+1,fsr2h
  2741  000D8A  0E03               	movlw	3
  2742  000D8C  50DB               	movf	plusw2,w,c
  2743  000D8E  E1F7               	bnz	l2521
  2744  000D90  0EC3               	movlw	195
  2745  000D92  5CDE               	subwf	postinc2,w,c
  2746  000D94  0EC9               	movlw	201
  2747  000D96  58DE               	subwfb	postinc2,w,c
  2748  000D98  0E01               	movlw	1
  2749  000D9A  58DE               	subwfb	postinc2,w,c
  2750  000D9C  B0D8               	btfsc	status,0,c
  2751  000D9E  D7EF               	goto	u1740
  2752  000DA0  D7E7               	goto	l2517
  2753  000DA2                     __end_of_moveToBeacon:
  2754                           	opt callstack 0
  2755                           
  2756 ;; *************** function _moveForward *****************
  2757 ;; Defined at:
  2758 ;;		line 70 in file "dc_motor.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2761 ;;		 -> main@motorL(9), 
  2762 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2763 ;;		 -> main@motorR(9), 
  2764 ;;  max_power       2   37[COMRAM] int 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  i               2   40[COMRAM] int 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2776 ;;      Params:         6       0       0       0
  2777 ;;      Locals:         2       0       0       0
  2778 ;;      Temps:          1       0       0       0
  2779 ;;      Totals:         9       0       0       0
  2780 ;;Total ram usage:        9 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    5
  2783 ;; This function calls:
  2784 ;;		_setMotorPWM
  2785 ;; This function is called by:
  2786 ;;		_moveToBeacon
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text18
  2791  000BCE                     __ptext18:
  2792                           	opt callstack 0
  2793  000BCE                     _moveForward:
  2794                           	opt callstack 24
  2795                           
  2796                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2797                           
  2798                           ;incstack = 0
  2799  000BCE  EE20 F001          	lfsr	2,1
  2800  000BD2  5022               	movf	moveForward@mL,w,c
  2801  000BD4  26D9               	addwf	fsr2l,f,c
  2802  000BD6  5023               	movf	moveForward@mL+1,w,c
  2803  000BD8  22DA               	addwfc	fsr2h,f,c
  2804  000BDA  0E01               	movlw	1
  2805  000BDC  6EDF               	movwf	indf2,c
  2806                           
  2807                           ;dc_motor.c: 73:     mR->direction = 1;
  2808  000BDE  EE20 F001          	lfsr	2,1
  2809  000BE2  5024               	movf	moveForward@mR,w,c
  2810  000BE4  26D9               	addwf	fsr2l,f,c
  2811  000BE6  5025               	movf	moveForward@mR+1,w,c
  2812  000BE8  22DA               	addwfc	fsr2h,f,c
  2813  000BEA  0E01               	movlw	1
  2814  000BEC  6EDF               	movwf	indf2,c
  2815                           
  2816                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2817  000BEE  0E00               	movlw	0
  2818  000BF0  6E2A               	movwf	moveForward@i+1,c
  2819  000BF2  0E00               	movlw	0
  2820  000BF4  6E29               	movwf	moveForward@i,c
  2821  000BF6  D021               	goto	l2353
  2822  000BF8                     l2343:
  2823                           
  2824                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2825  000BF8  C022  FFD9         	movff	moveForward@mL,fsr2l
  2826  000BFC  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2827  000C00  C029  FFDF         	movff	moveForward@i,indf2
  2828                           
  2829                           ;dc_motor.c: 77:         mR->power = i;
  2830  000C04  C024  FFD9         	movff	moveForward@mR,fsr2l
  2831  000C08  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2832  000C0C  C029  FFDF         	movff	moveForward@i,indf2
  2833                           
  2834                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2835  000C10  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2836  000C14  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2837  000C18  EC75  F002         	call	_setMotorPWM	;wreg free
  2838                           
  2839                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2840  000C1C  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2841  000C20  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2842  000C24  EC75  F002         	call	_setMotorPWM	;wreg free
  2843                           
  2844                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2845  000C28  0E03               	movlw	3
  2846  000C2A  6E28               	movwf	??_moveForward& (0+255),c
  2847  000C2C  0E98               	movlw	152
  2848  000C2E                     u2007:
  2849  000C2E  2EE8               	decfsz	wreg,f,c
  2850  000C30  D7FE               	bra	u2007
  2851  000C32  2E28               	decfsz	??_moveForward& (0+255),f,c
  2852  000C34  D7FC               	bra	u2007
  2853                           
  2854                           ;dc_motor.c: 81:     }
  2855  000C36  4A29               	infsnz	moveForward@i,f,c
  2856  000C38  2A2A               	incf	moveForward@i+1,f,c
  2857  000C3A                     l2353:
  2858  000C3A  5026               	movf	moveForward@max_power,w,c
  2859  000C3C  5C29               	subwf	moveForward@i,w,c
  2860  000C3E  502A               	movf	moveForward@i+1,w,c
  2861  000C40  0A80               	xorlw	128
  2862  000C42  6E28               	movwf	??_moveForward& (0+255),c
  2863  000C44  5027               	movf	moveForward@max_power+1,w,c
  2864  000C46  0A80               	xorlw	128
  2865  000C48  5828               	subwfb	??_moveForward& (0+255),w,c
  2866  000C4A  B0D8               	btfsc	status,0,c
  2867  000C4C  0012               	return	
  2868  000C4E  D7D4               	goto	l2343
  2869  000C50                     __end_of_moveForward:
  2870                           	opt callstack 0
  2871                           
  2872 ;; *************** function _LCD_String *****************
  2873 ;; Defined at:
  2874 ;;		line 119 in file "LCDIO.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  string          2   14[COMRAM] PTR unsigned char 
  2877 ;;		 -> STR_12(16), STR_11(16), STR_10(13), debug@buf2(16), 
  2878 ;;		 -> debug@buf(16), STR_7(16), STR_6(15), STR_5(15), 
  2879 ;;		 -> STR_4(10), STR_3(16), STR_2(16), STR_1(15), 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2891 ;;      Params:         2       0       0       0
  2892 ;;      Locals:         0       0       0       0
  2893 ;;      Temps:          0       0       0       0
  2894 ;;      Totals:         2       0       0       0
  2895 ;;Total ram usage:        2 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    6
  2898 ;; This function calls:
  2899 ;;		_SendLCD
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;;		_check_RFID
  2903 ;;		_scanForBeacon
  2904 ;;		_moveToBeacon
  2905 ;;		_returnHome
  2906 ;;		_stopAndDisplay
  2907 ;;		_waitForInput
  2908 ;;		_debug
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text19
  2913  000DA2                     __ptext19:
  2914                           	opt callstack 0
  2915  000DA2                     _LCD_String:
  2916                           	opt callstack 23
  2917                           
  2918                           ;LCDIO.c: 121: while(*string != 0){
  2919                           
  2920                           ;incstack = 0
  2921  000DA2  D01A               	goto	l2225
  2922  000DA4                     l2219:
  2923                           
  2924                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2925  000DA4  0E01               	movlw	1
  2926  000DA6  6E0D               	movwf	SendLCD@type,c
  2927  000DA8  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2928  000DAC  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2929  000DB0  6AF8               	clrf	tblptru,c
  2930  000DB2  0E02               	movlw	(high __ramtop+-1)
  2931  000DB4  64F7               	cpfsgt	tblptrh,c
  2932  000DB6  D003               	bra	u1347
  2933  000DB8  0008               	tblrd		*
  2934  000DBA  50F5               	movf	tablat,w,c
  2935  000DBC  D005               	bra	u1340
  2936  000DBE                     u1347:
  2937  000DBE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2938  000DC2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2939  000DC6  50EF               	movf	indf0,w,c
  2940  000DC8                     u1340:
  2941  000DC8  ECCB  F007         	call	_SendLCD
  2942  000DCC  4A0F               	infsnz	LCD_String@string,f,c
  2943  000DCE  2A10               	incf	LCD_String@string+1,f,c
  2944                           
  2945                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2946  000DD0  0E21               	movlw	33
  2947  000DD2                     u2017:
  2948  000DD2  2EE8               	decfsz	wreg,f,c
  2949  000DD4  D7FE               	bra	u2017
  2950  000DD6  F000               	nop	
  2951  000DD8                     l2225:
  2952                           
  2953                           ;LCDIO.c: 121: while(*string != 0){
  2954  000DD8  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2955  000DDC  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2956  000DE0  6AF8               	clrf	tblptru,c
  2957  000DE2  0E02               	movlw	(high __ramtop+-1)
  2958  000DE4  64F7               	cpfsgt	tblptrh,c
  2959  000DE6  D003               	bra	u1357
  2960  000DE8  0008               	tblrd		*
  2961  000DEA  50F5               	movf	tablat,w,c
  2962  000DEC  D005               	bra	u1350
  2963  000DEE                     u1357:
  2964  000DEE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2965  000DF2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2966  000DF6  50EF               	movf	indf0,w,c
  2967  000DF8                     u1350:
  2968  000DF8  0900               	iorlw	0
  2969  000DFA  B4D8               	btfsc	status,2,c
  2970  000DFC  0012               	return	
  2971  000DFE  D7D2               	goto	l2219
  2972  000E00                     __end_of_LCD_String:
  2973                           	opt callstack 0
  2974                           
  2975 ;; *************** function _ClearLCD *****************
  2976 ;; Defined at:
  2977 ;;		line 131 in file "LCDIO.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2991 ;;      Params:         0       0       0       0
  2992 ;;      Locals:         0       0       0       0
  2993 ;;      Temps:          1       0       0       0
  2994 ;;      Totals:         1       0       0       0
  2995 ;;Total ram usage:        1 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    6
  2998 ;; This function calls:
  2999 ;;		_SendLCD
  3000 ;; This function is called by:
  3001 ;;		_display_RFID
  3002 ;;		_scanForBeacon
  3003 ;;		_moveToBeacon
  3004 ;;		_returnHome
  3005 ;;		_stopAndDisplay
  3006 ;;		_waitForInput
  3007 ;;		_debug
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text20
  3012  001090                     __ptext20:
  3013                           	opt callstack 0
  3014  001090                     _ClearLCD:
  3015                           	opt callstack 23
  3016                           
  3017                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3018                           
  3019                           ;incstack = 0
  3020  001090  0E00               	movlw	0
  3021  001092  6E0D               	movwf	SendLCD@type,c
  3022  001094  0E01               	movlw	1
  3023  001096  ECCB  F007         	call	_SendLCD
  3024                           
  3025                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3026  00109A  0E0D               	movlw	13
  3027  00109C  6E0F               	movwf	??_ClearLCD& (0+255),c
  3028  00109E  0EFC               	movlw	252
  3029  0010A0                     u2027:
  3030  0010A0  2EE8               	decfsz	wreg,f,c
  3031  0010A2  D7FE               	bra	u2027
  3032  0010A4  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3033  0010A6  D7FC               	bra	u2027
  3034  0010A8  0012               	return		;funcret
  3035  0010AA                     __end_of_ClearLCD:
  3036                           	opt callstack 0
  3037                           
  3038 ;; *************** function _SendLCD *****************
  3039 ;; Defined at:
  3040 ;;		line 44 in file "LCDIO.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  Byte            1    wreg     unsigned char 
  3043 ;;  type            1   12[COMRAM] unsigned char 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  Byte            1   13[COMRAM] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3055 ;;      Params:         1       0       0       0
  3056 ;;      Locals:         1       0       0       0
  3057 ;;      Temps:          0       0       0       0
  3058 ;;      Totals:         2       0       0       0
  3059 ;;Total ram usage:        2 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    5
  3062 ;; This function calls:
  3063 ;;		_LCDout
  3064 ;; This function is called by:
  3065 ;;		_init_LCD
  3066 ;;		_SetLine
  3067 ;;		_LCD_String
  3068 ;;		_ClearLCD
  3069 ;;		_display_RFID
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text21
  3074  000F96                     __ptext21:
  3075                           	opt callstack 0
  3076  000F96                     _SendLCD:
  3077                           	opt callstack 23
  3078                           
  3079                           ;incstack = 0
  3080                           ;SendLCD@Byte stored from wreg
  3081  000F96  6E0E               	movwf	SendLCD@Byte,c
  3082                           
  3083                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3084  000F98  B00D               	btfsc	SendLCD@type,0,c
  3085  000F9A  D002               	bra	u1275
  3086  000F9C  9E89               	bcf	3977,7,c	;volatile
  3087  000F9E  D001               	bra	u1276
  3088  000FA0                     u1275:
  3089  000FA0  8E89               	bsf	3977,7,c	;volatile
  3090  000FA2                     u1276:
  3091                           
  3092                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3093  000FA2  380E               	swapf	SendLCD@Byte,w,c
  3094  000FA4  0B0F               	andlw	15
  3095  000FA6  0B0F               	andlw	15
  3096  000FA8  EC66  F006         	call	_LCDout
  3097                           
  3098                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3099  000FAC  0E06               	movlw	6
  3100  000FAE                     u2037:
  3101  000FAE  2EE8               	decfsz	wreg,f,c
  3102  000FB0  D7FE               	bra	u2037
  3103  000FB2  D000               	nop2	
  3104                           
  3105                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3106  000FB4  500E               	movf	SendLCD@Byte,w,c
  3107  000FB6  0B0F               	andlw	15
  3108  000FB8  EC66  F006         	call	_LCDout
  3109                           
  3110                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3111  000FBC  0E21               	movlw	33
  3112  000FBE                     u2047:
  3113  000FBE  2EE8               	decfsz	wreg,f,c
  3114  000FC0  D7FE               	bra	u2047
  3115  000FC2  F000               	nop	
  3116  000FC4  0012               	return		;funcret
  3117  000FC6                     __end_of_SendLCD:
  3118                           	opt callstack 0
  3119                           
  3120 ;; *************** function _LCDout *****************
  3121 ;; Defined at:
  3122 ;;		line 31 in file "LCDIO.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  number          1    wreg     unsigned char 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  number          1   11[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3136 ;;      Params:         0       0       0       0
  3137 ;;      Locals:         1       0       0       0
  3138 ;;      Temps:          1       0       0       0
  3139 ;;      Totals:         2       0       0       0
  3140 ;;Total ram usage:        2 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    4
  3143 ;; This function calls:
  3144 ;;		_E_TOG
  3145 ;; This function is called by:
  3146 ;;		_SendLCD
  3147 ;;		_init_LCD
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text22
  3152  000CCC                     __ptext22:
  3153                           	opt callstack 0
  3154  000CCC                     _LCDout:
  3155                           	opt callstack 23
  3156                           
  3157                           ;incstack = 0
  3158                           ;LCDout@number stored from wreg
  3159  000CCC  6E0C               	movwf	LCDout@number,c
  3160                           
  3161                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3162  000CCE  C00C  F00B         	movff	LCDout@number,??_LCDout
  3163  000CD2  0E01               	movlw	1
  3164  000CD4  160B               	andwf	??_LCDout,f,c
  3165  000CD6  508B               	movf	3979,w,c	;volatile
  3166  000CD8  180B               	xorwf	??_LCDout,w,c
  3167  000CDA  0BFE               	andlw	-2
  3168  000CDC  180B               	xorwf	??_LCDout,w,c
  3169  000CDE  6E8B               	movwf	3979,c	;volatile
  3170                           
  3171                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3172  000CE0  C00C  F00B         	movff	LCDout@number,??_LCDout
  3173  000CE4  90D8               	bcf	status,0,c
  3174  000CE6  320B               	rrcf	??_LCDout,f,c
  3175  000CE8  0E01               	movlw	1
  3176  000CEA  160B               	andwf	??_LCDout,f,c
  3177  000CEC  460B               	rlncf	??_LCDout,f,c
  3178  000CEE  460B               	rlncf	??_LCDout,f,c
  3179  000CF0  460B               	rlncf	??_LCDout,f,c
  3180  000CF2  508B               	movf	3979,w,c	;volatile
  3181  000CF4  180B               	xorwf	??_LCDout,w,c
  3182  000CF6  0BF7               	andlw	-9
  3183  000CF8  180B               	xorwf	??_LCDout,w,c
  3184  000CFA  6E8B               	movwf	3979,c	;volatile
  3185                           
  3186                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3187  000CFC  C00C  F00B         	movff	LCDout@number,??_LCDout
  3188  000D00  90D8               	bcf	status,0,c
  3189  000D02  320B               	rrcf	??_LCDout,f,c
  3190  000D04  90D8               	bcf	status,0,c
  3191  000D06  320B               	rrcf	??_LCDout,f,c
  3192  000D08  0E01               	movlw	1
  3193  000D0A  160B               	andwf	??_LCDout,f,c
  3194  000D0C  508C               	movf	3980,w,c	;volatile
  3195  000D0E  180B               	xorwf	??_LCDout,w,c
  3196  000D10  0BFE               	andlw	-2
  3197  000D12  180B               	xorwf	??_LCDout,w,c
  3198  000D14  6E8C               	movwf	3980,c	;volatile
  3199                           
  3200                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3201  000D16  C00C  F00B         	movff	LCDout@number,??_LCDout
  3202  000D1A  90D8               	bcf	status,0,c
  3203  000D1C  320B               	rrcf	??_LCDout,f,c
  3204  000D1E  90D8               	bcf	status,0,c
  3205  000D20  320B               	rrcf	??_LCDout,f,c
  3206  000D22  90D8               	bcf	status,0,c
  3207  000D24  320B               	rrcf	??_LCDout,f,c
  3208  000D26  0E01               	movlw	1
  3209  000D28  160B               	andwf	??_LCDout,f,c
  3210  000D2A  460B               	rlncf	??_LCDout,f,c
  3211  000D2C  508C               	movf	3980,w,c	;volatile
  3212  000D2E  180B               	xorwf	??_LCDout,w,c
  3213  000D30  0BFD               	andlw	-3
  3214  000D32  180B               	xorwf	??_LCDout,w,c
  3215  000D34  6E8C               	movwf	3980,c	;volatile
  3216                           
  3217                           ;LCDIO.c: 39:  E_TOG();
  3218  000D36  EC55  F008         	call	_E_TOG	;wreg free
  3219                           
  3220                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3221  000D3A  0E03               	movlw	3
  3222  000D3C                     u2057:
  3223  000D3C  2EE8               	decfsz	wreg,f,c
  3224  000D3E  D7FE               	bra	u2057
  3225  000D40  F000               	nop	
  3226  000D42  0012               	return		;funcret
  3227  000D44                     __end_of_LCDout:
  3228                           	opt callstack 0
  3229                           
  3230 ;; *************** function _E_TOG *****************
  3231 ;; Defined at:
  3232 ;;		line 23 in file "LCDIO.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;		None
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;		None
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3246 ;;      Params:         0       0       0       0
  3247 ;;      Locals:         0       0       0       0
  3248 ;;      Temps:          0       0       0       0
  3249 ;;      Totals:         0       0       0       0
  3250 ;;Total ram usage:        0 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    3
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_LCDout
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text23
  3261  0010AA                     __ptext23:
  3262                           	opt callstack 0
  3263  0010AA                     _E_TOG:
  3264                           	opt callstack 23
  3265                           
  3266                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3267                           
  3268                           ;incstack = 0
  3269  0010AA  8C89               	bsf	3977,6,c	;volatile
  3270                           
  3271                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3272  0010AC  0E03               	movlw	3
  3273  0010AE                     u2067:
  3274  0010AE  2EE8               	decfsz	wreg,f,c
  3275  0010B0  D7FE               	bra	u2067
  3276  0010B2  F000               	nop	
  3277                           
  3278                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3279  0010B4  9C89               	bcf	3977,6,c	;volatile
  3280  0010B6  0012               	return		;funcret
  3281  0010B8                     __end_of_E_TOG:
  3282                           	opt callstack 0
  3283                           
  3284 ;; *************** function _init_motor_struct *****************
  3285 ;; Defined at:
  3286 ;;		line 99 in file "dc_motor.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3289 ;;		 -> main@motorL(9), 
  3290 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3291 ;;		 -> main@motorR(9), 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3303 ;;      Params:         4       0       0       0
  3304 ;;      Locals:         0       0       0       0
  3305 ;;      Temps:          0       0       0       0
  3306 ;;      Totals:         4       0       0       0
  3307 ;;Total ram usage:        4 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    5
  3310 ;; This function calls:
  3311 ;;		_setMotorPWM
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text24
  3318  000700                     __ptext24:
  3319                           	opt callstack 0
  3320  000700                     _init_motor_struct:
  3321                           	opt callstack 25
  3322                           
  3323                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3324                           
  3325                           ;incstack = 0
  3326  000700  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3327  000704  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3328  000708  0E00               	movlw	0
  3329  00070A  6EDF               	movwf	indf2,c
  3330                           
  3331                           ;dc_motor.c: 103: mL->direction = 1;
  3332  00070C  EE20 F001          	lfsr	2,1
  3333  000710  5022               	movf	init_motor_struct@mL,w,c
  3334  000712  26D9               	addwf	fsr2l,f,c
  3335  000714  5023               	movf	init_motor_struct@mL+1,w,c
  3336  000716  22DA               	addwfc	fsr2h,f,c
  3337  000718  0E01               	movlw	1
  3338  00071A  6EDF               	movwf	indf2,c
  3339                           
  3340                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3341  00071C  EE20 F002          	lfsr	2,2
  3342  000720  5022               	movf	init_motor_struct@mL,w,c
  3343  000722  26D9               	addwf	fsr2l,f,c
  3344  000724  5023               	movf	init_motor_struct@mL+1,w,c
  3345  000726  22DA               	addwfc	fsr2h,f,c
  3346  000728  0E79               	movlw	121
  3347  00072A  6EDE               	movwf	postinc2,c
  3348  00072C  0E0F               	movlw	15
  3349  00072E  6EDD               	movwf	postdec2,c
  3350                           
  3351                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3352  000730  EE20 F004          	lfsr	2,4
  3353  000734  5022               	movf	init_motor_struct@mL,w,c
  3354  000736  26D9               	addwf	fsr2l,f,c
  3355  000738  5023               	movf	init_motor_struct@mL+1,w,c
  3356  00073A  22DA               	addwfc	fsr2h,f,c
  3357  00073C  0E78               	movlw	120
  3358  00073E  6EDE               	movwf	postinc2,c
  3359  000740  0E0F               	movlw	15
  3360  000742  6EDD               	movwf	postdec2,c
  3361                           
  3362                           ;dc_motor.c: 106: mL->dir_pin=0;
  3363  000744  EE20 F006          	lfsr	2,6
  3364  000748  5022               	movf	init_motor_struct@mL,w,c
  3365  00074A  26D9               	addwf	fsr2l,f,c
  3366  00074C  5023               	movf	init_motor_struct@mL+1,w,c
  3367  00074E  22DA               	addwfc	fsr2h,f,c
  3368  000750  0E00               	movlw	0
  3369  000752  6EDF               	movwf	indf2,c
  3370                           
  3371                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3372  000754  EE20 F007          	lfsr	2,7
  3373  000758  5022               	movf	init_motor_struct@mL,w,c
  3374  00075A  26D9               	addwf	fsr2l,f,c
  3375  00075C  5023               	movf	init_motor_struct@mL+1,w,c
  3376  00075E  22DA               	addwfc	fsr2h,f,c
  3377  000760  0EC7               	movlw	199
  3378  000762  6EDE               	movwf	postinc2,c
  3379  000764  0E00               	movlw	0
  3380  000766  6EDD               	movwf	postdec2,c
  3381                           
  3382                           ;dc_motor.c: 109: mR->power = 0;
  3383  000768  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3384  00076C  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3385  000770  0E00               	movlw	0
  3386  000772  6EDF               	movwf	indf2,c
  3387                           
  3388                           ;dc_motor.c: 110: mR->direction = 1;
  3389  000774  EE20 F001          	lfsr	2,1
  3390  000778  5024               	movf	init_motor_struct@mR,w,c
  3391  00077A  26D9               	addwf	fsr2l,f,c
  3392  00077C  5025               	movf	init_motor_struct@mR+1,w,c
  3393  00077E  22DA               	addwfc	fsr2h,f,c
  3394  000780  0E01               	movlw	1
  3395  000782  6EDF               	movwf	indf2,c
  3396                           
  3397                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3398  000784  EE20 F002          	lfsr	2,2
  3399  000788  5024               	movf	init_motor_struct@mR,w,c
  3400  00078A  26D9               	addwf	fsr2l,f,c
  3401  00078C  5025               	movf	init_motor_struct@mR+1,w,c
  3402  00078E  22DA               	addwfc	fsr2h,f,c
  3403  000790  0E77               	movlw	119
  3404  000792  6EDE               	movwf	postinc2,c
  3405  000794  0E0F               	movlw	15
  3406  000796  6EDD               	movwf	postdec2,c
  3407                           
  3408                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3409  000798  EE20 F004          	lfsr	2,4
  3410  00079C  5024               	movf	init_motor_struct@mR,w,c
  3411  00079E  26D9               	addwf	fsr2l,f,c
  3412  0007A0  5025               	movf	init_motor_struct@mR+1,w,c
  3413  0007A2  22DA               	addwfc	fsr2h,f,c
  3414  0007A4  0E76               	movlw	118
  3415  0007A6  6EDE               	movwf	postinc2,c
  3416  0007A8  0E0F               	movlw	15
  3417  0007AA  6EDD               	movwf	postdec2,c
  3418                           
  3419                           ;dc_motor.c: 113: mR->dir_pin=2;
  3420  0007AC  EE20 F006          	lfsr	2,6
  3421  0007B0  5024               	movf	init_motor_struct@mR,w,c
  3422  0007B2  26D9               	addwf	fsr2l,f,c
  3423  0007B4  5025               	movf	init_motor_struct@mR+1,w,c
  3424  0007B6  22DA               	addwfc	fsr2h,f,c
  3425  0007B8  0E02               	movlw	2
  3426  0007BA  6EDF               	movwf	indf2,c
  3427                           
  3428                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3429  0007BC  EE20 F007          	lfsr	2,7
  3430  0007C0  5024               	movf	init_motor_struct@mR,w,c
  3431  0007C2  26D9               	addwf	fsr2l,f,c
  3432  0007C4  5025               	movf	init_motor_struct@mR+1,w,c
  3433  0007C6  22DA               	addwfc	fsr2h,f,c
  3434  0007C8  0EC7               	movlw	199
  3435  0007CA  6EDE               	movwf	postinc2,c
  3436  0007CC  0E00               	movlw	0
  3437  0007CE  6EDD               	movwf	postdec2,c
  3438                           
  3439                           ;dc_motor.c: 116: setMotorPWM(mL);
  3440  0007D0  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3441  0007D4  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3442  0007D8  EC75  F002         	call	_setMotorPWM	;wreg free
  3443                           
  3444                           ;dc_motor.c: 117: setMotorPWM(mR);
  3445  0007DC  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3446  0007E0  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3447  0007E4  EC75  F002         	call	_setMotorPWM	;wreg free
  3448  0007E8  0012               	return		;funcret
  3449  0007EA                     __end_of_init_motor_struct:
  3450                           	opt callstack 0
  3451                           
  3452 ;; *************** function _setMotorPWM *****************
  3453 ;; Defined at:
  3454 ;;		line 18 in file "dc_motor.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3457 ;;		 -> main@motorR(9), main@motorL(9), 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  PWMduty         2   31[COMRAM] int 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      void 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3469 ;;      Params:         2       0       0       0
  3470 ;;      Locals:         2       0       0       0
  3471 ;;      Temps:          5       0       0       0
  3472 ;;      Totals:         9       0       0       0
  3473 ;;Total ram usage:        9 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    4
  3476 ;; This function calls:
  3477 ;;		___awdiv
  3478 ;;		___wmul
  3479 ;; This function is called by:
  3480 ;;		_stop
  3481 ;;		_turnRight
  3482 ;;		_moveForward
  3483 ;;		_moveBackward
  3484 ;;		_init_motor_struct
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text25
  3489  0004EA                     __ptext25:
  3490                           	opt callstack 0
  3491  0004EA                     _setMotorPWM:
  3492                           	opt callstack 24
  3493                           
  3494                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3495                           
  3496                           ;incstack = 0
  3497  0004EA  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3498  0004EE  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3499  0004F2  50DF               	movf	indf2,w,c
  3500  0004F4  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3501  0004F6  501B               	movf	??_setMotorPWM,w,c
  3502  0004F8  6E0B               	movwf	___wmul@multiplier,c
  3503  0004FA  6A0C               	clrf	___wmul@multiplier+1,c
  3504  0004FC  EE20 F007          	lfsr	2,7
  3505  000500  5019               	movf	setMotorPWM@m,w,c
  3506  000502  26D9               	addwf	fsr2l,f,c
  3507  000504  501A               	movf	setMotorPWM@m+1,w,c
  3508  000506  22DA               	addwfc	fsr2h,f,c
  3509  000508  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3510  00050C  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3511  000510  EC0D  F008         	call	___wmul	;wreg free
  3512  000514  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3513  000518  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3514  00051C  0E00               	movlw	0
  3515  00051E  6E14               	movwf	___awdiv@divisor+1,c
  3516  000520  0E64               	movlw	100
  3517  000522  6E13               	movwf	___awdiv@divisor,c
  3518  000524  EC23  F005         	call	___awdiv	;wreg free
  3519  000528  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3520  00052C  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3521                           
  3522                           ;dc_motor.c: 24:     if (m->direction)
  3523  000530  EE20 F001          	lfsr	2,1
  3524  000534  5019               	movf	setMotorPWM@m,w,c
  3525  000536  26D9               	addwf	fsr2l,f,c
  3526  000538  501A               	movf	setMotorPWM@m+1,w,c
  3527  00053A  22DA               	addwfc	fsr2h,f,c
  3528  00053C  50DF               	movf	indf2,w,c
  3529  00053E  B4D8               	btfsc	status,2,c
  3530  000540  D024               	goto	l2233
  3531                           
  3532                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3533  000542  EE20 F006          	lfsr	2,6
  3534  000546  5019               	movf	setMotorPWM@m,w,c
  3535  000548  26D9               	addwf	fsr2l,f,c
  3536  00054A  501A               	movf	setMotorPWM@m+1,w,c
  3537  00054C  22DA               	addwfc	fsr2h,f,c
  3538  00054E  50DF               	movf	indf2,w,c
  3539  000550  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3540  000552  0E01               	movlw	1
  3541  000554  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3542  000556  2A1B               	incf	??_setMotorPWM,f,c
  3543  000558  D002               	goto	u1384
  3544  00055A                     u1385:
  3545  00055A  90D8               	bcf	status,0,c
  3546  00055C  361C               	rlcf	??_setMotorPWM+1,f,c
  3547  00055E                     u1384:
  3548  00055E  2E1B               	decfsz	??_setMotorPWM,f,c
  3549  000560  D7FC               	goto	u1385
  3550  000562  501C               	movf	??_setMotorPWM+1,w,c
  3551  000564  108A               	iorwf	3978,w,c	;volatile
  3552  000566  6E8A               	movwf	3978,c	;volatile
  3553                           
  3554                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3555  000568  EE20 F007          	lfsr	2,7
  3556  00056C  5019               	movf	setMotorPWM@m,w,c
  3557  00056E  26D9               	addwf	fsr2l,f,c
  3558  000570  501A               	movf	setMotorPWM@m+1,w,c
  3559  000572  22DA               	addwfc	fsr2h,f,c
  3560  000574  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3561  000578  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3562  00057C  5020               	movf	setMotorPWM@PWMduty,w,c
  3563  00057E  5C1B               	subwf	??_setMotorPWM,w,c
  3564  000580  6E20               	movwf	setMotorPWM@PWMduty,c
  3565  000582  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3566  000584  581C               	subwfb	??_setMotorPWM+1,w,c
  3567  000586  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3568                           
  3569                           ;dc_motor.c: 28:     }
  3570  000588  D014               	goto	l121
  3571  00058A                     l2233:
  3572                           
  3573                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3574  00058A  EE20 F006          	lfsr	2,6
  3575  00058E  5019               	movf	setMotorPWM@m,w,c
  3576  000590  26D9               	addwf	fsr2l,f,c
  3577  000592  501A               	movf	setMotorPWM@m+1,w,c
  3578  000594  22DA               	addwfc	fsr2h,f,c
  3579  000596  50DF               	movf	indf2,w,c
  3580  000598  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3581  00059A  0E01               	movlw	1
  3582  00059C  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3583  00059E  2A1B               	incf	??_setMotorPWM,f,c
  3584  0005A0  D002               	goto	u1394
  3585  0005A2                     u1395:
  3586  0005A2  90D8               	bcf	status,0,c
  3587  0005A4  361C               	rlcf	??_setMotorPWM+1,f,c
  3588  0005A6                     u1394:
  3589  0005A6  2E1B               	decfsz	??_setMotorPWM,f,c
  3590  0005A8  D7FC               	goto	u1395
  3591  0005AA  501C               	movf	??_setMotorPWM+1,w,c
  3592  0005AC  0AFF               	xorlw	255
  3593  0005AE  148A               	andwf	3978,w,c	;volatile
  3594  0005B0  6E8A               	movwf	3978,c	;volatile
  3595  0005B2                     l121:
  3596                           
  3597                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3598  0005B2  EE20 F002          	lfsr	2,2
  3599  0005B6  5019               	movf	setMotorPWM@m,w,c
  3600  0005B8  26D9               	addwf	fsr2l,f,c
  3601  0005BA  501A               	movf	setMotorPWM@m+1,w,c
  3602  0005BC  22DA               	addwfc	fsr2h,f,c
  3603  0005BE  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3604  0005C2  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3605  0005C6  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3606  0005CA  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3607  0005CE  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3608  0005D0  46E8               	rlncf	wreg,f,c
  3609  0005D2  0BFC               	andlw	252
  3610  0005D4  6EDF               	movwf	indf2,c
  3611                           
  3612                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3613  0005D6  EE20 F004          	lfsr	2,4
  3614  0005DA  5019               	movf	setMotorPWM@m,w,c
  3615  0005DC  26D9               	addwf	fsr2l,f,c
  3616  0005DE  501A               	movf	setMotorPWM@m+1,w,c
  3617  0005E0  22DA               	addwfc	fsr2h,f,c
  3618  0005E2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3619  0005E6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3620  0005EA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3621  0005EE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3622  0005F2  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3623  0005F6  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3624  0005FA  0E06               	movlw	6
  3625  0005FC  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3626  0005FE                     u1405:
  3627  0005FE  341E               	rlcf	??_setMotorPWM+3,w,c
  3628  000600  321E               	rrcf	??_setMotorPWM+3,f,c
  3629  000602  321D               	rrcf	??_setMotorPWM+2,f,c
  3630  000604  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3631  000606  D7FB               	goto	u1405
  3632  000608  501D               	movf	??_setMotorPWM+2,w,c
  3633  00060A  6EDF               	movwf	indf2,c
  3634  00060C  0012               	return		;funcret
  3635  00060E                     __end_of_setMotorPWM:
  3636                           	opt callstack 0
  3637                           
  3638 ;; *************** function ___wmul *****************
  3639 ;; Defined at:
  3640 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  multiplier      2   10[COMRAM] unsigned int 
  3643 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  product         2   14[COMRAM] unsigned int 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  2   10[COMRAM] unsigned int 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, prodl, prodh
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3655 ;;      Params:         4       0       0       0
  3656 ;;      Locals:         2       0       0       0
  3657 ;;      Temps:          0       0       0       0
  3658 ;;      Totals:         6       0       0       0
  3659 ;;Total ram usage:        6 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    3
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_setMotorPWM
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text26
  3670  00101A                     __ptext26:
  3671                           	opt callstack 0
  3672  00101A                     ___wmul:
  3673                           	opt callstack 24
  3674                           
  3675                           ;incstack = 0
  3676  00101A  500B               	movf	___wmul@multiplier,w,c
  3677  00101C  020D               	mulwf	___wmul@multiplicand,c
  3678  00101E  CFF3 F00F          	movff	prodl,___wmul@product
  3679  001022  CFF4 F010          	movff	prodh,___wmul@product+1
  3680  001026  500B               	movf	___wmul@multiplier,w,c
  3681  001028  020E               	mulwf	___wmul@multiplicand+1,c
  3682  00102A  50F3               	movf	prodl,w,c
  3683  00102C  2610               	addwf	___wmul@product+1,f,c
  3684  00102E  500C               	movf	___wmul@multiplier+1,w,c
  3685  001030  020D               	mulwf	___wmul@multiplicand,c
  3686  001032  50F3               	movf	prodl,w,c
  3687  001034  2610               	addwf	___wmul@product+1,f,c
  3688  001036  C00F  F00B         	movff	___wmul@product,?___wmul
  3689  00103A  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3690  00103E  0012               	return		;funcret
  3691  001040                     __end_of___wmul:
  3692                           	opt callstack 0
  3693                           
  3694 ;; *************** function ___awdiv *****************
  3695 ;; Defined at:
  3696 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  dividend        2   16[COMRAM] int 
  3699 ;;  divisor         2   18[COMRAM] int 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  quotient        2   22[COMRAM] int 
  3702 ;;  sign            1   21[COMRAM] unsigned char 
  3703 ;;  counter         1   20[COMRAM] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  2   16[COMRAM] int 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3713 ;;      Params:         4       0       0       0
  3714 ;;      Locals:         4       0       0       0
  3715 ;;      Temps:          0       0       0       0
  3716 ;;      Totals:         8       0       0       0
  3717 ;;Total ram usage:        8 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    3
  3720 ;; This function calls:
  3721 ;;		Nothing
  3722 ;; This function is called by:
  3723 ;;		_setMotorPWM
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text27
  3728  000A46                     __ptext27:
  3729                           	opt callstack 0
  3730  000A46                     ___awdiv:
  3731                           	opt callstack 24
  3732                           
  3733                           ;incstack = 0
  3734  000A46  0E00               	movlw	0
  3735  000A48  6E16               	movwf	___awdiv@sign,c
  3736  000A4A  AE14               	btfss	___awdiv@divisor+1,7,c
  3737  000A4C  D006               	goto	l2181
  3738  000A4E  6C13               	negf	___awdiv@divisor,c
  3739  000A50  1E14               	comf	___awdiv@divisor+1,f,c
  3740  000A52  B0D8               	btfsc	status,0,c
  3741  000A54  2A14               	incf	___awdiv@divisor+1,f,c
  3742  000A56  0E01               	movlw	1
  3743  000A58  6E16               	movwf	___awdiv@sign,c
  3744  000A5A                     l2181:
  3745  000A5A  AE12               	btfss	___awdiv@dividend+1,7,c
  3746  000A5C  D006               	goto	l2187
  3747  000A5E  6C11               	negf	___awdiv@dividend,c
  3748  000A60  1E12               	comf	___awdiv@dividend+1,f,c
  3749  000A62  B0D8               	btfsc	status,0,c
  3750  000A64  2A12               	incf	___awdiv@dividend+1,f,c
  3751  000A66  0E01               	movlw	1
  3752  000A68  1A16               	xorwf	___awdiv@sign,f,c
  3753  000A6A                     l2187:
  3754  000A6A  0E00               	movlw	0
  3755  000A6C  6E18               	movwf	___awdiv@quotient+1,c
  3756  000A6E  0E00               	movlw	0
  3757  000A70  6E17               	movwf	___awdiv@quotient,c
  3758  000A72  5013               	movf	___awdiv@divisor,w,c
  3759  000A74  1014               	iorwf	___awdiv@divisor+1,w,c
  3760  000A76  B4D8               	btfsc	status,2,c
  3761  000A78  D01C               	goto	l2209
  3762  000A7A  0E01               	movlw	1
  3763  000A7C  6E15               	movwf	___awdiv@counter,c
  3764  000A7E  D004               	goto	l2195
  3765  000A80                     l2193:
  3766  000A80  90D8               	bcf	status,0,c
  3767  000A82  3613               	rlcf	___awdiv@divisor,f,c
  3768  000A84  3614               	rlcf	___awdiv@divisor+1,f,c
  3769  000A86  2A15               	incf	___awdiv@counter,f,c
  3770  000A88                     l2195:
  3771  000A88  AE14               	btfss	___awdiv@divisor+1,7,c
  3772  000A8A  D7FA               	goto	l2193
  3773  000A8C                     u1310:
  3774  000A8C  90D8               	bcf	status,0,c
  3775  000A8E  3617               	rlcf	___awdiv@quotient,f,c
  3776  000A90  3618               	rlcf	___awdiv@quotient+1,f,c
  3777  000A92  5013               	movf	___awdiv@divisor,w,c
  3778  000A94  5C11               	subwf	___awdiv@dividend,w,c
  3779  000A96  5014               	movf	___awdiv@divisor+1,w,c
  3780  000A98  5812               	subwfb	___awdiv@dividend+1,w,c
  3781  000A9A  A0D8               	btfss	status,0,c
  3782  000A9C  D005               	goto	l2205
  3783  000A9E  5013               	movf	___awdiv@divisor,w,c
  3784  000AA0  5E11               	subwf	___awdiv@dividend,f,c
  3785  000AA2  5014               	movf	___awdiv@divisor+1,w,c
  3786  000AA4  5A12               	subwfb	___awdiv@dividend+1,f,c
  3787  000AA6  8017               	bsf	___awdiv@quotient,0,c
  3788  000AA8                     l2205:
  3789  000AA8  90D8               	bcf	status,0,c
  3790  000AAA  3214               	rrcf	___awdiv@divisor+1,f,c
  3791  000AAC  3213               	rrcf	___awdiv@divisor,f,c
  3792  000AAE  2E15               	decfsz	___awdiv@counter,f,c
  3793  000AB0  D7ED               	goto	u1310
  3794  000AB2                     l2209:
  3795  000AB2  5016               	movf	___awdiv@sign,w,c
  3796  000AB4  B4D8               	btfsc	status,2,c
  3797  000AB6  D004               	goto	l2213
  3798  000AB8  6C17               	negf	___awdiv@quotient,c
  3799  000ABA  1E18               	comf	___awdiv@quotient+1,f,c
  3800  000ABC  B0D8               	btfsc	status,0,c
  3801  000ABE  2A18               	incf	___awdiv@quotient+1,f,c
  3802  000AC0                     l2213:
  3803  000AC0  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3804  000AC4  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3805  000AC8  0012               	return		;funcret
  3806  000ACA                     __end_of___awdiv:
  3807                           	opt callstack 0
  3808                           
  3809 ;; *************** function _InterruptHandlerLow *****************
  3810 ;; Defined at:
  3811 ;;		line 93 in file "main.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;		None
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;		None
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3825 ;;      Params:         0       0       0       0
  3826 ;;      Locals:         0       0       0       0
  3827 ;;      Temps:          3       0       0       0
  3828 ;;      Totals:         3       0       0       0
  3829 ;;Total ram usage:        3 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		Interrupt level 1
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	intcodelo
  3840  000018                     __pintcodelo:
  3841                           	opt callstack 0
  3842  000018                     _InterruptHandlerLow:
  3843                           	opt callstack 22
  3844                           
  3845                           ;incstack = 0
  3846  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3847  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3848  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3849  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3850                           
  3851                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1))
  3852  000026  A4F2               	btfss	4082,2,c	;volatile
  3853  000028  D00A               	goto	i1l70
  3854  00002A  0442               	decf	_robot_mode,w,c	;volatile
  3855  00002C  A4D8               	btfss	status,2,c
  3856  00002E  D007               	goto	i1l70
  3857                           
  3858                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3859  000030  0E01               	movlw	1
  3860  000032  2643               	addwf	_movement_time,f,c	;volatile
  3861  000034  0E00               	movlw	0
  3862  000036  2244               	addwfc	_movement_time+1,f,c	;volatile
  3863  000038  2245               	addwfc	_movement_time+2,f,c	;volatile
  3864  00003A  2246               	addwfc	_movement_time+3,f,c	;volatile
  3865  00003C  D00B               	goto	i1l1589
  3866  00003E                     i1l70:
  3867  00003E  A4F2               	btfss	4082,2,c	;volatile
  3868  000040  D009               	goto	i1l1589
  3869  000042  0E02               	movlw	2
  3870  000044  1842               	xorwf	_robot_mode,w,c	;volatile
  3871  000046  A4D8               	btfss	status,2,c
  3872  000048  D005               	goto	i1l1589
  3873                           
  3874                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  3875  00004A  0643               	decf	_movement_time,f,c	;volatile
  3876  00004C  0E00               	movlw	0
  3877  00004E  5A44               	subwfb	_movement_time+1,f,c	;volatile
  3878  000050  5A45               	subwfb	_movement_time+2,f,c	;volatile
  3879  000052  5A46               	subwfb	_movement_time+3,f,c	;volatile
  3880  000054                     i1l1589:
  3881                           
  3882                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  3883                           
  3884                           ;main.c: 108:     else
  3885                           
  3886                           ;main.c: 106:     }
  3887                           
  3888                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  3889  000054  94F2               	bcf	4082,2,c	;volatile
  3890  000056  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  3891  00005A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  3892  00005E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  3893  000062  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3894  000064  0010               	retfie	
  3895  000066                     __end_of_InterruptHandlerLow:
  3896                           	opt callstack 0
  3897                           
  3898 ;; *************** function _InterruptHandlerHigh *****************
  3899 ;; Defined at:
  3900 ;;		line 75 in file "main.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  throwaway       1    0        unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3914 ;;      Params:         0       0       0       0
  3915 ;;      Locals:         1       0       0       0
  3916 ;;      Temps:          2       0       0       0
  3917 ;;      Totals:         3       0       0       0
  3918 ;;Total ram usage:        3 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    1
  3921 ;; This function calls:
  3922 ;;		_processRFID
  3923 ;; This function is called by:
  3924 ;;		Interrupt level 2
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	intcode
  3929  000008                     __pintcode:
  3930                           	opt callstack 0
  3931  000008                     _InterruptHandlerHigh:
  3932                           	opt callstack 22
  3933                           
  3934                           ;incstack = 0
  3935  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3936  00000A  EFB1  F007         	goto	int_func
  3937                           
  3938                           	psect	intcode_body
  3939  000F62                     __pintcode_body:
  3940                           	opt callstack 22
  3941  000F62                     int_func:
  3942                           	opt callstack 22
  3943  000F62  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3944  000F66  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3945                           
  3946                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3947  000F6A  AA9E               	btfss	3998,5,c	;volatile
  3948  000F6C  D00D               	goto	i2l63
  3949  000F6E  0442               	decf	_robot_mode,w,c	;volatile
  3950  000F70  A4D8               	btfss	status,2,c
  3951  000F72  D00A               	goto	i2l63
  3952                           
  3953                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3954  000F74  0E82               	movlw	low _RFIDbuf
  3955  000F76  6E01               	movwf	processRFID@RFIDbuf,c
  3956  000F78  0E00               	movlw	high _RFIDbuf
  3957  000F7A  6E02               	movwf	processRFID@RFIDbuf+1,c
  3958  000F7C  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3959  000F80  EC2E  F007         	call	_processRFID	;wreg free
  3960  000F84  6E47               	movwf	_RFID_flag,c	;volatile
  3961                           
  3962                           ;main.c: 83:     }
  3963  000F86  D001               	goto	i2l65
  3964  000F88                     i2l63:
  3965  000F88  50AE               	movf	4014,w,c	;volatile
  3966  000F8A                     i2l65:
  3967  000F8A  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3968  000F8E  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3969  000F92  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3970  000F94  0011               	retfie		f
  3971  000F96                     __end_of_InterruptHandlerHigh:
  3972                           	opt callstack 0
  3973                           
  3974 ;; *************** function _processRFID *****************
  3975 ;; Defined at:
  3976 ;;		line 34 in file "RFID.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3979 ;;		 -> RFIDbuf(12), 
  3980 ;;  latestChar      1    2[COMRAM] unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  i               1    3[COMRAM] unsigned char 
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      unsigned char 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3992 ;;      Params:         3       0       0       0
  3993 ;;      Locals:         1       0       0       0
  3994 ;;      Temps:          0       0       0       0
  3995 ;;      Totals:         4       0       0       0
  3996 ;;Total ram usage:        4 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_InterruptHandlerHigh
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text30
  4006  000E5C                     __ptext30:
  4007                           	opt callstack 0
  4008  000E5C                     _processRFID:
  4009                           	opt callstack 22
  4010                           
  4011                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4012                           
  4013                           ;incstack = 0
  4014  000E5C  0E03               	movlw	3
  4015  000E5E  1803               	xorwf	processRFID@latestChar,w,c
  4016  000E60  A4D8               	btfss	status,2,c
  4017  000E62  D002               	goto	i2l1949
  4018                           
  4019                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4020  000E64  0E01               	movlw	1
  4021  000E66  0012               	return	
  4022  000E68                     i2l1949:
  4023                           
  4024                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4025  000E68  0E02               	movlw	2
  4026  000E6A  1803               	xorwf	processRFID@latestChar,w,c
  4027  000E6C  A4D8               	btfss	status,2,c
  4028  000E6E  D012               	goto	i2l1969
  4029                           
  4030                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4031  000E70  0E00               	movlw	0
  4032  000E72  6E41               	movwf	processRFID@position_in_buf,c
  4033                           
  4034                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4035  000E74  0E00               	movlw	0
  4036  000E76  6E04               	movwf	processRFID@i,c
  4037  000E78                     i2l1957:
  4038                           
  4039                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4040  000E78  5004               	movf	processRFID@i,w,c
  4041  000E7A  2401               	addwf	processRFID@RFIDbuf,w,c
  4042  000E7C  6ED9               	movwf	fsr2l,c
  4043  000E7E  0E00               	movlw	0
  4044  000E80  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4045  000E82  6EDA               	movwf	fsr2h,c
  4046  000E84  0E00               	movlw	0
  4047  000E86  6EDF               	movwf	indf2,c
  4048                           
  4049                           ;RFID.c: 56:            }
  4050  000E88  2A04               	incf	processRFID@i,f,c
  4051  000E8A  0E0B               	movlw	11
  4052  000E8C  6404               	cpfsgt	processRFID@i,c
  4053  000E8E  D7F4               	goto	i2l1957
  4054  000E90                     i2u112_40:
  4055                           
  4056                           ;RFID.c: 57:            return 0;
  4057  000E90  0E00               	movlw	0
  4058  000E92  0012               	return	
  4059  000E94                     i2l1969:
  4060                           
  4061                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4062  000E94  5041               	movf	processRFID@position_in_buf,w,c
  4063  000E96  2401               	addwf	processRFID@RFIDbuf,w,c
  4064  000E98  6ED9               	movwf	fsr2l,c
  4065  000E9A  0E00               	movlw	0
  4066  000E9C  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4067  000E9E  6EDA               	movwf	fsr2h,c
  4068  000EA0  C003  FFDF         	movff	processRFID@latestChar,indf2
  4069                           
  4070                           ;RFID.c: 63:             position_in_buf++;
  4071  000EA4  2A41               	incf	processRFID@position_in_buf,f,c
  4072  000EA6  D7F4               	goto	i2u112_40
  4073  000EA8                     __end_of_processRFID:
  4074                           	opt callstack 0
  4075                           
  4076                           	psect	rparam
  4077  0000                     
  4078                           	psect	temp
  4079  000048                     btemp:
  4080                           	opt callstack 0
  4081  000048                     	ds	1
  4082  0000                     int$flags	set	btemp
  4083  0000                     wtemp8	set	btemp+1
  4084  0000                     ttemp5	set	btemp+1
  4085  0000                     ttemp6	set	btemp+4
  4086  0000                     ttemp7	set	btemp+8
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           stkptr	equ	0xFFC
  4091                           pclatu	equ	0xFFB
  4092                           pclath	equ	0xFFA
  4093                           pcl	equ	0xFF9
  4094                           tblptru	equ	0xFF8
  4095                           tblptrh	equ	0xFF7
  4096                           tblptrl	equ	0xFF6
  4097                           tablat	equ	0xFF5
  4098                           prodh	equ	0xFF4
  4099                           prodl	equ	0xFF3
  4100                           indf0	equ	0xFEF
  4101                           postinc0	equ	0xFEE
  4102                           postdec0	equ	0xFED
  4103                           preinc0	equ	0xFEC
  4104                           plusw0	equ	0xFEB
  4105                           fsr0h	equ	0xFEA
  4106                           fsr0l	equ	0xFE9
  4107                           wreg	equ	0xFE8
  4108                           indf1	equ	0xFE7
  4109                           postinc1	equ	0xFE6
  4110                           postdec1	equ	0xFE5
  4111                           preinc1	equ	0xFE4
  4112                           plusw1	equ	0xFE3
  4113                           fsr1h	equ	0xFE2
  4114                           fsr1l	equ	0xFE1
  4115                           bsr	equ	0xFE0
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           preinc2	equ	0xFDC
  4120                           plusw2	equ	0xFDB
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8


Data Sizes:
    Strings     151
    Constant    0
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      71
    BANK0           160     22      68
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1860_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_7(CODE[16]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[10]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _waitForInput->_LCD_String
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   47345
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4626
                                             16 COMRAM     4     4      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15080
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4716
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     7      6    7059
                                             42 COMRAM    13     7      6
                           _ClearLCD
                         _LCD_String
                      _classify_data
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       13     9      4     400
                                             10 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6663
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        14     4     10    6787
                                             42 COMRAM    14     4     10
                           _ClearLCD
                         _LCD_String
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2262
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      44       5       42.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      47       1       75.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8B       3        0.0%
DATA                 0      0      8B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Mar 06 12:43:29 2020

                           l55 0F30                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l121 05B2                            l339 0C78            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0086  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2213 0AC0                           l2205 0AA8                           l2311 0E16  
                         l2209 0AB2                           l2233 058A                           l2225 0DD8  
                         l2219 0DA4                           l2243 0FEA                           l2411 0EFE  
                         l2307 0E08                           l2181 0A5A                           l2343 0BF8  
                         l2327 0AF4                           l2239 0FD8                           l2193 0A80  
                         l2353 0C3A                           l2521 0D7E                           l2337 0B36  
                         l2195 0A88                           l2187 0A6A                           l2427 0A42  
                         l2517 0D70                           l2509 092A                           l2527 0D82  
                         l2359 0B76                           l2383 03E4                           l2551 0970  
                         l2369 0BB8                           l2377 03A2                           l2561 0988  
                         l2539 0ED4                           l2389 0426                           l2485 0C9A  
                         l2399 04D6                           l2567 09BA                           l2591 06C2  
                         l2583 0660                           l2499 08F4                           l2595 06F2  
                         l2587 0694                           l2579 063C                           STR_1 036F  
                         STR_2 0341                           STR_3 0331                           STR_4 038B  
                         STR_5 0351                           STR_6 0360                           STR_7 0321  
                         STR_8 0395                           u1310 0A8C                           u2007 0C2E  
                         u2017 0DD2                           u2027 10A0                           u1340 0DC8  
                         u1405 05FE                           u2037 0FAE                           u1350 0DF8  
                         u1510 043A                           _LATB 000F8A                           u2047 0FBE  
                         u1600 0484                           u1520 0444                           u2057 0D3C  
                         u1610 0486                           u1530 0446                           u2067 10AE  
                         u1275 0FA0                           u1347 0DBE                           u1276 0FA2  
                         u1620 0494                           u1540 0454                           u1357 0DEE  
                         u1630 0496                           u1550 0456                           u1384 055E  
                         u1640 04B2                           u1560 0464                           u1720 0CC6  
                         u1385 055A                           u1394 05A6                           u1650 04B4  
                         u1570 0466                           u1395 05A2                           u1740 0D7E  
                         u1580 0474                           u1590 0476                           u1670 0F2A  
                         u1690 0A3E                           u1770 09B4                           u1907 083C  
                         u1685 09F4                           u1917 084A                           u1837 0CA4  
                         u1927 085C                           u1847 0992                           u1937 086E  
                         u1857 0E4C                           u1947 0884                           u1867 0FEC  
                         u1957 0898                           u1877 0808                           u1967 08AA  
                         u1887 081E                           u1977 0930                           u1897 082E  
                         u1987 0B2A                           u1997 0BAC                           i1l70 003E  
                         i2l63 0F88                           i2l65 0F8A                           _dbuf 0062  
                         _main 060E                           _prec 003B                           _nout 0060  
                         fsr0h 000FEA                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0048  
                         _stop 0E00                           prodh 000FF4                           prodl 000FF3  
                         start 0066                   ___param_bank 000000                __end_of_SendLCD 0FC6  
              __end_of_SetLine 0FF4                 ??_display_RFID 0012                          ?_main 0001  
          main@searching_speed 008E                __end_of___awdiv 0ACA                          STR_10 037E  
                        STR_11 0311                          STR_12 0301                          ?_stop 0022  
                        _T0CON 000FD5                ___awdiv@divisor 0013                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                ___awdiv@counter 0015                          _RCREG 000FAE  
                        _E_TOG 10AA                          _SPBRG 000FAF                   ?_init_sensor 0001  
              __end_of_initPWM 1090                          _flags 003D                          _setup 0F2C  
                        _width 0039               moveToBeacon@time 0031                          tablat 000FF5  
                        plusw2 000FDB             processRFID@RFIDbuf 0001                          ttemp5 0049  
                        ttemp6 004C                          ttemp7 0050                          stop@i 0029  
                        status 000FD8                          wtemp8 0049            __size_of_LCD_String 005E  
             __end_of_ClearLCD 10AA           moveForward@max_power 0026                 __CFG_MCLRE$OFF 000000  
              __initialization 0FF4                   __end_of_main 0700                   __end_of_stop 0E5C  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000F                         ??_main 0039  
                       ??_stop 0028                  __activetblptr 000002                         ?_E_TOG 0001  
                 ?_setMotorPWM 0019                   ?_moveForward 0022   scanForBeacon@beacon_location 0035  
             ___awdiv@dividend 0011                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i1l1589 0054                         i2l1957 0E78  
                       i2l1949 0E68                         i2l1969 0E94                         _LCDout 0CCC  
                  SendLCD@Byte 000E                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000D                      ??_SendLCD 000E  
                    ??_SetLine 000F                  display_RFID@i 0012                         ___wmul 101A  
                    ??___awdiv 0015               __end_of_init_LCD 08B2            init_motor_struct@mL 0022  
          init_motor_struct@mR 0024                         clear_0 0FFA                         clear_1 1006  
             ___awdiv@quotient 0017         __size_of_scanForBeacon 0088              moveToBeacon@speed 002F  
                    ??_initPWM 000D                 _stopAndDisplay 093A                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0022                         stop@mR 0024                   ?_processRFID 0001  
            _init_motor_struct 0700           __end_of_display_RFID 0F2C             ?_init_motor_struct 0022  
                   __accesstop 0060        __end_of__initialization 100C                  ___rparam_used 000001  
                  SetLine@line 000F                  __end_of_E_TOG 10B8            ??_init_motor_struct 0026  
               __pcstackCOMRAM 0001                  __end_of_setup 0F62                   ??_LCD_String 0011  
       __end_of_stopAndDisplay 09C0                        ??_E_TOG 000B  __size_of_InterruptHandlerHigh 0F8E  
                    ?_ClearLCD 0001    __end_of_InterruptHandlerLow 0066      __end_of_init_motor_struct 07EA  
        __end_of_classify_data 0A46                     _check_RFID 039A           __size_of_init_sensor 001C  
                      ??_setup 0010                  ?_moveBackward 0022                     __pbssBANK0 0060  
                      ?_LCDout 0001                  _scanForBeacon 08B2             __size_of_init_RFID 001A  
           __end_of_LCD_String 0E00                        ?___wmul 000B                  ?_moveToBeacon 002B  
                      _CAP1CON 000F63                        _DFLTCON 000F60                ?_stopAndDisplay 002B  
                   ??_ClearLCD 000F                        _RFIDbuf 0082                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                 ??_moveBackward 0028                 ?_scanForBeacon 002B  
         __size_of_setMotorPWM 0124           __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0031  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 0029  
                ?_waitForInput 0001             __size_of_turnRight 0082                        _SendLCD 0F96  
                      __Hparam 0000                        _SetLine 0FC6                        __Lparam 0000  
               ??_moveToBeacon 0035          processRFID@latestChar 0003                        ___awdiv 0A46  
              __size_of___wmul 0026                   __psmallconst 0300               initPWM@PWMperiod 000B  
                      __pcinit 0FF4                        __ramtop 0300                        __ptext0 060E  
                      __ptext1 0C50                        __ptext2 093A                        __ptext3 0E00  
                      __ptext4 0EEC                        __ptext5 039A                        __ptext6 0FC6  
                      __ptext7 0F2C                        __ptext8 1040                        __ptext9 105C  
            __end_of_init_RFID 1076               check_RFID@hexBuf 0015                        _initPWM 1076  
                 LCDout@number 000C     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
            stop@initial_speed 0026                    ?_check_RFID 0011                 __pintcode_body 0F62  
         end_of_initialization 100C             setMotorPWM@PWMduty 0020                     ??_init_LCD 000F  
         __size_of_processRFID 004C                 ??_waitForInput 0011                  __Lmediumconst 0000  
                      int_func 0F62                      _RFID_flag 0047                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0033                     _robot_mode 0042                     _returnHome 0EA8  
                 _display_RFID 0EEC                      _PORTDbits 000F83              __end_of_turnRight 0B4C  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                ??_scanForBeacon 0031             debug@smoothed_data 003F  
                moveForward@mL 0022                  moveForward@mR 0024                 __end_of_LCDout 0D44  
                    _TXSTAbits 000FAC                     main@motorL 0092                     main@motorR 009B  
         __end_of_moveBackward 0BCE            __size_of_check_RFID 0150                 __end_of___wmul 1040  
                  _BAUDCONbits 000FAA          classify_data@filtered 0016            start_initialization 0FF4  
            __size_of_ClearLCD 001A           __end_of_moveToBeacon 0DA2          classify_data@raw_data 000B  
                     ??_LCDout 000B          moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 0F96  
        classify_data@smoothed 000D               ??_stopAndDisplay 0033                       ??___wmul 000F  
              scanForBeacon@mL 002B                scanForBeacon@mR 002D             turnRight@max_power 0026  
                  ?_returnHome 002B           __end_of_waitForInput 0CCC                    __pbssCOMRAM 0039  
                ??_init_sensor 000B                  __pcstackBANK0 008E   __size_of_InterruptHandlerLow 004E  
            __size_of_init_LCD 00C8                       ?_SendLCD 000D                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 0011         __size_of_classify_data 0086  
           check_RFID@checksum 0026                    __pintcodelo 0018                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       ?_initPWM 000B                    __smallconst 0300  
               __size_of_E_TOG 000E                  waitForInput@i 0013                      _init_RFID 105C  
          stopAndDisplay@speed 002F                  ??_setMotorPWM 001B                  ??_moveForward 0028  
                 ??_check_RFID 0013                 __size_of_setup 0036                check_RFID@byte1 0021  
              check_RFID@byte2 0022                check_RFID@byte3 0023                check_RFID@byte4 0024  
              check_RFID@byte5 0025            __end_of_init_sensor 105C                 ___wmul@product 000F  
          __size_of_returnHome 0044                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u112_40 0E90          __size_of_moveBackward 0082                    turnRight@mL 0022  
                  turnRight@mR 0024                       _PIR1bits 000F9E                       _RCONbits 000FD0  
           __end_of_check_RFID 04EA              ___wmul@multiplier 000B                   setMotorPWM@m 0019  
                 moveForward@i 0029               main@moving_speed 0090          __size_of_moveToBeacon 005E  
         _InterruptHandlerHigh 0008                       _ClearLCD 1090                  _movement_time 0043  
                   ?_init_RFID 0001                      _turnRight 0ACA                  ??_processRFID 0004  
                _classify_data 09C0                    _INTCON2bits 000FF1                 moveBackward@mL 0022  
               moveBackward@mR 0024                   _moveBackward 0B4C            __end_of_setMotorPWM 060E  
          __end_of_moveForward 0C50                    check_RFID@i 0027                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
        __size_of_waitForInput 007C                   _moveToBeacon 0D44               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 1040  
               ?_classify_data 000B              check_RFID@dataBuf 0011                     ?_turnRight 0022  
                     __ptext10 07EA                       __ptext11 1076                       __ptext20 1090  
                     __ptext12 08B2                       __ptext21 0F96                       __ptext13 0ACA  
                     __ptext30 0E5C                       __ptext22 0CCC                       __ptext14 09C0  
                     __ptext23 10AA                       __ptext15 0EA8                       __ptext24 0700  
                     __ptext16 0B4C                       __ptext25 04EA                       __ptext17 0D44  
                     __ptext26 101A                       __ptext18 0BCE                       __ptext27 0A46  
                     __ptext19 0DA2          __end_of_scanForBeacon 093A                       _init_LCD 07EA  
                __size_of_main 00F2                  __size_of_stop 005C            __end_of_processRFID 0EA8  
                 _waitForInput 0C50             scanForBeacon@speed 002F                     turnRight@i 0029  
                     int$flags 0048                   ??_returnHome 0033            _InterruptHandlerLow 0018  
                   _LCD_String 0DA2          scanForBeacon@raw_data 0033                     _INTCONbits 000FF2  
                  ??_init_RFID 000B                    _setMotorPWM 04EA                    _moveForward 0BCE  
                     intlevel1 0000                       intlevel2 0000     scanForBeacon@smoothed_data 0036  
         ?_InterruptHandlerLow 0001             __end_of_returnHome 0EEC                     _OSCCONbits 000FD3  
   processRFID@position_in_buf 0041         ??_InterruptHandlerHigh 0005                ??_classify_data 000F  
             stopAndDisplay@mL 002B               stopAndDisplay@mR 002D                returnHome@speed 002F  
                  ??_turnRight 0028                    _processRFID 0E5C          ??_InterruptHandlerLow 0008  
              stopAndDisplay@i 0035                 returnHome@time 0031                   returnHome@mL 002B  
                 returnHome@mR 002D  
