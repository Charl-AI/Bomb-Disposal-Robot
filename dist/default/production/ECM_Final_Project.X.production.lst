

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 09:41:39 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 2.05
    55                           ; Generated 20/12/2018 GMT
    56                           ; 
    57                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4331 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     _CAP2CON	set	3938
    89  0000                     _CAP1CON	set	3939
    90  0000                     _ANSEL1	set	4025
    91  0000                     _ANSEL0	set	4024
    92  0000                     _T5CON	set	4023
    93  0000                     _IPR1bits	set	3999
    94  0000                     _PIE1bits	set	3997
    95  0000                     _RCSTAbits	set	4011
    96  0000                     _TXSTAbits	set	4012
    97  0000                     _BAUDCONbits	set	4010
    98  0000                     _SPBRGH	set	4016
    99  0000                     _SPBRG	set	4015
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISCbits	set	3988
   102  0000                     _LATDbits	set	3980
   103  0000                     _LATCbits	set	3979
   104  0000                     _LATAbits	set	3977
   105  0000                     _LATB	set	3978
   106  0000                     _PTPERH	set	3962
   107  0000                     _PTPERL	set	3963
   108  0000                     _PWMCON1	set	3950
   109  0000                     _PWMCON0	set	3951
   110  0000                     _PTCON1	set	3966
   111  0000                     _PTCON0	set	3967
   112  0000                     _PORTDbits	set	3971
   113  0000                     _CAP1BUFL	set	3944
   114  0000                     _CAP1BUFH	set	3945
   115  0000                     _CAP2BUFL	set	3942
   116  0000                     _CAP2BUFH	set	3943
   117  0000                     _RCREG	set	4014
   118  0000                     _PIR1bits	set	3998
   119  0000                     _TRISDbits	set	3989
   120  0000                     _TRISBbits	set	3987
   121  0000                     _RCONbits	set	4048
   122  0000                     _INTCONbits	set	4082
   123  0000                     _OSCCONbits	set	4051
   124  0000                     _OSCCON	set	4051
   125  0000                     _PDC1H	set	3958
   126  0000                     _PDC1L	set	3959
   127  0000                     _PDC0H	set	3960
   128  0000                     _PDC0L	set	3961
   129                           
   130                           	psect	smallconst
   131  000300                     __psmallconst:
   132                           	opt callstack 0
   133  000300  00                 	db	0
   134  000301                     STR_5:
   135  000301  43                 	db	67	;'C'
   136  000302  48                 	db	72	;'H'
   137  000303  45                 	db	69	;'E'
   138  000304  43                 	db	67	;'C'
   139  000305  4B                 	db	75	;'K'
   140  000306  53                 	db	83	;'S'
   141  000307  55                 	db	85	;'U'
   142  000308  4D                 	db	77	;'M'
   143  000309  20                 	db	32
   144  00030A  46                 	db	70	;'F'
   145  00030B  41                 	db	65	;'A'
   146  00030C  49                 	db	73	;'I'
   147  00030D  4C                 	db	76	;'L'
   148  00030E  45                 	db	69	;'E'
   149  00030F  44                 	db	68	;'D'
   150  000310  00                 	db	0
   151  000311                     STR_4:
   152  000311  43                 	db	67	;'C'
   153  000312  48                 	db	72	;'H'
   154  000313  45                 	db	69	;'E'
   155  000314  43                 	db	67	;'C'
   156  000315  4B                 	db	75	;'K'
   157  000316  53                 	db	83	;'S'
   158  000317  55                 	db	85	;'U'
   159  000318  4D                 	db	77	;'M'
   160  000319  20                 	db	32
   161  00031A  50                 	db	80	;'P'
   162  00031B  41                 	db	65	;'A'
   163  00031C  53                 	db	83	;'S'
   164  00031D  53                 	db	83	;'S'
   165  00031E  45                 	db	69	;'E'
   166  00031F  44                 	db	68	;'D'
   167  000320  00                 	db	0
   168  000321                     STR_3:
   169  000321  52                 	db	82	;'R'
   170  000322  45                 	db	69	;'E'
   171  000323  53                 	db	83	;'S'
   172  000324  45                 	db	69	;'E'
   173  000325  54                 	db	84	;'T'
   174  000326  54                 	db	84	;'T'
   175  000327  49                 	db	73	;'I'
   176  000328  4E                 	db	78	;'N'
   177  000329  47                 	db	71	;'G'
   178  00032A  20                 	db	32
   179  00032B  52                 	db	82	;'R'
   180  00032C  4F                 	db	79	;'O'
   181  00032D  42                 	db	66	;'B'
   182  00032E  4F                 	db	79	;'O'
   183  00032F  54                 	db	84	;'T'
   184  000330  00                 	db	0
   185  000331                     STR_2:
   186  000331  52                 	db	82	;'R'
   187  000332  49                 	db	73	;'I'
   188  000333  47                 	db	71	;'G'
   189  000334  48                 	db	72	;'H'
   190  000335  54                 	db	84	;'T'
   191  000336  20                 	db	32
   192  000337  25                 	db	37
   193  000338  75                 	db	117	;'u'
   194  000339  20                 	db	32
   195  00033A  00                 	db	0
   196  00033B                     STR_1:
   197  00033B  4C                 	db	76	;'L'
   198  00033C  45                 	db	69	;'E'
   199  00033D  46                 	db	70	;'F'
   200  00033E  54                 	db	84	;'T'
   201  00033F  20                 	db	32
   202  000340  25                 	db	37
   203  000341  75                 	db	117	;'u'
   204  000342  20                 	db	32
   205  000343  00                 	db	0
   206                           
   207                           ; #config settings
   208  000344  00                 	db	0	; dummy byte at the end
   209  0000                     
   210                           	psect	cinit
   211  00153E                     __pcinit:
   212                           	opt callstack 0
   213  00153E                     start_initialization:
   214                           	opt callstack 0
   215  00153E                     __initialization:
   216                           	opt callstack 0
   217                           
   218                           ; Clear objects allocated to BANK0 (48 bytes)
   219  00153E  EE00  F0BF         	lfsr	0,__pbssBANK0
   220  001542  0E30               	movlw	48
   221  001544                     clear_0:
   222  001544  6AEE               	clrf	postinc0,c
   223  001546  06E8               	decf	wreg,f,c
   224  001548  E1FD               	bnz	clear_0
   225                           
   226                           ; Clear objects allocated to COMRAM (8 bytes)
   227  00154A  EE00  F04E         	lfsr	0,__pbssCOMRAM
   228  00154E  0E08               	movlw	8
   229  001550                     clear_1:
   230  001550  6AEE               	clrf	postinc0,c
   231  001552  06E8               	decf	wreg,f,c
   232  001554  E1FD               	bnz	clear_1
   233  001556                     end_of_initialization:
   234                           	opt callstack 0
   235  001556                     __end_of__initialization:
   236                           	opt callstack 0
   237  001556  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   238  001558  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   239  00155A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   240  00155C  6EF8               	movwf	tblptru,c
   241  00155E  0100               	movlb	0
   242  001560  EFA3  F001         	goto	_main	;jump to C main() function
   243                           
   244                           	psect	bssCOMRAM
   245  00004E                     __pbssCOMRAM:
   246                           	opt callstack 0
   247  00004E                     _width:
   248                           	opt callstack 0
   249  00004E                     	ds	2
   250  000050                     _prec:
   251                           	opt callstack 0
   252  000050                     	ds	2
   253  000052                     _flags:
   254                           	opt callstack 0
   255  000052                     	ds	2
   256  000054                     processRFID@position_in_buf:
   257                           	opt callstack 0
   258  000054                     	ds	1
   259  000055                     _robot_mode:
   260                           	opt callstack 0
   261  000055                     	ds	1
   262                           
   263                           	psect	bssBANK0
   264  0000BF                     __pbssBANK0:
   265                           	opt callstack 0
   266  0000BF                     _nout:
   267                           	opt callstack 0
   268  0000BF                     	ds	2
   269  0000C1                     main@beacon_location:
   270                           	opt callstack 0
   271  0000C1                     	ds	1
   272  0000C2                     _RFID_flag:
   273                           	opt callstack 0
   274  0000C2                     	ds	1
   275  0000C3                     _dbuf:
   276                           	opt callstack 0
   277  0000C3                     	ds	32
   278  0000E3                     _RFIDbuf:
   279                           	opt callstack 0
   280  0000E3                     	ds	12
   281                           
   282                           	psect	cstackBANK0
   283  000060                     __pcstackBANK0:
   284                           	opt callstack 0
   285  000060                     vfpfcnvrt@llu:
   286                           	opt callstack 0
   287                           
   288                           ; 8 bytes @ 0x0
   289  000060                     	ds	8
   290  000068                     ?_vfprintf:
   291                           	opt callstack 0
   292  000068                     vfprintf@fp:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0x8
   296  000068                     	ds	2
   297  00006A                     vfprintf@fmt:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0xA
   301  00006A                     	ds	2
   302  00006C                     vfprintf@ap:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0xC
   306  00006C                     	ds	2
   307  00006E                     vfprintf@cfmt:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0xE
   311  00006E                     	ds	2
   312  000070                     ?_sprintf:
   313                           	opt callstack 0
   314  000070                     sprintf@s:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x10
   318  000070                     	ds	2
   319  000072                     sprintf@fmt:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0x12
   323  000072                     	ds	6
   324  000078                     sprintf@ap:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x18
   328  000078                     	ds	2
   329  00007A                     sprintf@f:
   330                           	opt callstack 0
   331                           
   332                           ; 6 bytes @ 0x1A
   333  00007A                     	ds	6
   334  000080                     ??_main:
   335                           
   336                           ; 1 bytes @ 0x20
   337  000080                     	ds	2
   338  000082                     main@temp2:
   339                           	opt callstack 0
   340                           
   341                           ; 16 bytes @ 0x22
   342  000082                     	ds	16
   343  000092                     main@temp1:
   344                           	opt callstack 0
   345                           
   346                           ; 16 bytes @ 0x32
   347  000092                     	ds	16
   348  0000A2                     main@previous_location:
   349                           	opt callstack 0
   350                           
   351                           ; 1 bytes @ 0x42
   352  0000A2                     	ds	1
   353  0000A3                     main@i:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x43
   357  0000A3                     	ds	2
   358  0000A5                     main@sensorL:
   359                           	opt callstack 0
   360                           
   361                           ; 4 bytes @ 0x45
   362  0000A5                     	ds	4
   363  0000A9                     main@sensorR:
   364                           	opt callstack 0
   365                           
   366                           ; 4 bytes @ 0x49
   367  0000A9                     	ds	4
   368  0000AD                     main@motorL:
   369                           	opt callstack 0
   370                           
   371                           ; 9 bytes @ 0x4D
   372  0000AD                     	ds	9
   373  0000B6                     main@motorR:
   374                           	opt callstack 0
   375                           
   376                           ; 9 bytes @ 0x56
   377  0000B6                     	ds	9
   378                           
   379                           	psect	cstackCOMRAM
   380  000001                     __pcstackCOMRAM:
   381                           	opt callstack 0
   382  000001                     processRFID@RFIDbuf:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x0
   386  000001                     	ds	2
   387  000003                     processRFID@latestChar:
   388                           	opt callstack 0
   389                           
   390                           ; 1 bytes @ 0x2
   391  000003                     	ds	1
   392  000004                     processRFID@i:
   393                           	opt callstack 0
   394                           
   395                           ; 1 bytes @ 0x3
   396  000004                     	ds	1
   397  000005                     ??_InterruptHandlerHigh:
   398                           
   399                           ; 1 bytes @ 0x4
   400  000005                     	ds	3
   401  000008                     ??_InterruptHandlerLow:
   402                           
   403                           ; 1 bytes @ 0x7
   404  000008                     	ds	1
   405  000009                     ??_LCDout:
   406  000009                     ?_strlen:
   407                           	opt callstack 0
   408  000009                     ?___awdiv:
   409                           	opt callstack 0
   410  000009                     ?___lodiv:
   411                           	opt callstack 0
   412  000009                     ?___lomod:
   413                           	opt callstack 0
   414  000009                     initPWM@PWMperiod:
   415                           	opt callstack 0
   416  000009                     classify_data@left_smoothed:
   417                           	opt callstack 0
   418  000009                     ___awdiv@dividend:
   419                           	opt callstack 0
   420  000009                     fputc@c:
   421                           	opt callstack 0
   422  000009                     strlen@s:
   423                           	opt callstack 0
   424  000009                     ___lodiv@dividend:
   425                           	opt callstack 0
   426  000009                     ___lomod@dividend:
   427                           	opt callstack 0
   428                           
   429                           ; 8 bytes @ 0x8
   430  000009                     	ds	1
   431  00000A                     LCDout@number:
   432                           	opt callstack 0
   433                           
   434                           ; 1 bytes @ 0x9
   435  00000A                     	ds	1
   436  00000B                     SendLCD@type:
   437                           	opt callstack 0
   438  00000B                     classify_data@right_smoothed:
   439                           	opt callstack 0
   440  00000B                     ___awdiv@divisor:
   441                           	opt callstack 0
   442  00000B                     fputc@fp:
   443                           	opt callstack 0
   444  00000B                     strlen@a:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0xA
   448  00000B                     	ds	1
   449  00000C                     SendLCD@Byte:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0xB
   453  00000C                     	ds	1
   454  00000D                     ??_init_LCD:
   455  00000D                     ??_ClearLCD:
   456  00000D                     ??_fputc:
   457  00000D                     SetLine@line:
   458                           	opt callstack 0
   459  00000D                     ___awdiv@counter:
   460                           	opt callstack 0
   461  00000D                     LCD_String@string:
   462                           	opt callstack 0
   463  00000D                     classify_data@difference:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0xC
   467  00000D                     	ds	1
   468  00000E                     ___awdiv@sign:
   469                           	opt callstack 0
   470  00000E                     display_RFID@dataBuf:
   471                           	opt callstack 0
   472                           
   473                           ; 2 bytes @ 0xD
   474  00000E                     	ds	1
   475  00000F                     check_RFID@dataBuf:
   476                           	opt callstack 0
   477  00000F                     ___awdiv@quotient:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0xE
   481  00000F                     	ds	1
   482  000010                     display_RFID@i:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0xF
   486  000010                     	ds	1
   487  000011                     ??_check_RFID:
   488  000011                     ?___wmul:
   489                           	opt callstack 0
   490  000011                     ___wmul@multiplier:
   491                           	opt callstack 0
   492  000011                     ___lodiv@divisor:
   493                           	opt callstack 0
   494  000011                     ___lomod@divisor:
   495                           	opt callstack 0
   496                           
   497                           ; 8 bytes @ 0x10
   498  000011                     	ds	1
   499  000012                     fputs@s:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x11
   503  000012                     	ds	1
   504  000013                     ___wmul@multiplicand:
   505                           	opt callstack 0
   506  000013                     check_RFID@hexBuf:
   507                           	opt callstack 0
   508                           
   509                           ; 12 bytes @ 0x12
   510  000013                     	ds	1
   511  000014                     fputs@fp:
   512                           	opt callstack 0
   513                           
   514                           ; 2 bytes @ 0x13
   515  000014                     	ds	1
   516  000015                     ___wmul@product:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x14
   520  000015                     	ds	1
   521  000016                     fputs@c:
   522                           	opt callstack 0
   523                           
   524                           ; 1 bytes @ 0x15
   525  000016                     	ds	1
   526  000017                     setMotorPWM@m:
   527                           	opt callstack 0
   528  000017                     process_signal@S:
   529                           	opt callstack 0
   530  000017                     fputs@i:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x16
   534  000017                     	ds	2
   535  000019                     ??_setMotorPWM:
   536  000019                     ?_pad:
   537                           	opt callstack 0
   538  000019                     ___lomod@counter:
   539                           	opt callstack 0
   540  000019                     pad@fp:
   541                           	opt callstack 0
   542  000019                     ___lodiv@quotient:
   543                           	opt callstack 0
   544                           
   545                           ; 8 bytes @ 0x18
   546  000019                     	ds	2
   547  00001B                     pad@buf:
   548                           	opt callstack 0
   549                           
   550                           ; 2 bytes @ 0x1A
   551  00001B                     	ds	2
   552  00001D                     pad@p:
   553                           	opt callstack 0
   554                           
   555                           ; 2 bytes @ 0x1C
   556  00001D                     	ds	1
   557  00001E                     setMotorPWM@PWMduty:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x1D
   561  00001E                     	ds	1
   562  00001F                     ??_pad:
   563  00001F                     check_RFID@byte1:
   564                           	opt callstack 0
   565                           
   566                           ; 1 bytes @ 0x1E
   567  00001F                     	ds	1
   568  000020                     check_RFID@byte2:
   569                           	opt callstack 0
   570  000020                     turnLeft@mL:
   571                           	opt callstack 0
   572  000020                     turnRight@mL:
   573                           	opt callstack 0
   574  000020                     fullSpeedAhead@mL:
   575                           	opt callstack 0
   576  000020                     init_motors@mL:
   577                           	opt callstack 0
   578  000020                     pad@i:
   579                           	opt callstack 0
   580                           
   581                           ; 2 bytes @ 0x1F
   582  000020                     	ds	1
   583  000021                     check_RFID@byte3:
   584                           	opt callstack 0
   585  000021                     ___lodiv@counter:
   586                           	opt callstack 0
   587                           
   588                           ; 1 bytes @ 0x20
   589  000021                     	ds	1
   590  000022                     check_RFID@byte4:
   591                           	opt callstack 0
   592  000022                     turnLeft@mR:
   593                           	opt callstack 0
   594  000022                     turnRight@mR:
   595                           	opt callstack 0
   596  000022                     fullSpeedAhead@mR:
   597                           	opt callstack 0
   598  000022                     init_motors@mR:
   599                           	opt callstack 0
   600  000022                     pad@w:
   601                           	opt callstack 0
   602                           
   603                           ; 2 bytes @ 0x21
   604  000022                     	ds	1
   605  000023                     check_RFID@byte5:
   606                           	opt callstack 0
   607                           
   608                           ; 1 bytes @ 0x22
   609  000023                     	ds	1
   610  000024                     ??_turnLeft:
   611  000024                     ??_turnRight:
   612  000024                     ?_utoa:
   613                           	opt callstack 0
   614  000024                     check_RFID@checksum:
   615                           	opt callstack 0
   616  000024                     fullSpeedAhead@i:
   617                           	opt callstack 0
   618  000024                     utoa@fp:
   619                           	opt callstack 0
   620                           
   621                           ; 2 bytes @ 0x23
   622  000024                     	ds	1
   623  000025                     turnLeft@i:
   624                           	opt callstack 0
   625  000025                     turnRight@i:
   626                           	opt callstack 0
   627  000025                     check_RFID@i:
   628                           	opt callstack 0
   629                           
   630                           ; 2 bytes @ 0x24
   631  000025                     	ds	1
   632  000026                     utoa@d:
   633                           	opt callstack 0
   634                           
   635                           ; 8 bytes @ 0x25
   636  000026                     	ds	1
   637  000027                     moveToBeacon@prev_location:
   638                           	opt callstack 0
   639                           
   640                           ; 1 bytes @ 0x26
   641  000027                     	ds	1
   642  000028                     moveToBeacon@mL:
   643                           	opt callstack 0
   644                           
   645                           ; 2 bytes @ 0x27
   646  000028                     	ds	2
   647  00002A                     moveToBeacon@mR:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x29
   651  00002A                     	ds	2
   652  00002C                     moveToBeacon@beacon_location:
   653                           	opt callstack 0
   654                           
   655                           ; 1 bytes @ 0x2B
   656  00002C                     	ds	2
   657  00002E                     ??_utoa:
   658                           
   659                           ; 1 bytes @ 0x2D
   660  00002E                     	ds	8
   661  000036                     utoa@p:
   662                           	opt callstack 0
   663                           
   664                           ; 2 bytes @ 0x35
   665  000036                     	ds	2
   666  000038                     utoa@w:
   667                           	opt callstack 0
   668                           
   669                           ; 2 bytes @ 0x37
   670  000038                     	ds	2
   671  00003A                     utoa@n:
   672                           	opt callstack 0
   673                           
   674                           ; 8 bytes @ 0x39
   675  00003A                     	ds	8
   676  000042                     utoa@i:
   677                           	opt callstack 0
   678                           
   679                           ; 2 bytes @ 0x41
   680  000042                     	ds	2
   681  000044                     ?_vfpfcnvrt:
   682                           	opt callstack 0
   683  000044                     vfpfcnvrt@fp:
   684                           	opt callstack 0
   685                           
   686                           ; 2 bytes @ 0x43
   687  000044                     	ds	2
   688  000046                     vfpfcnvrt@fmt:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0x45
   692  000046                     	ds	2
   693  000048                     vfpfcnvrt@ap:
   694                           	opt callstack 0
   695                           
   696                           ; 2 bytes @ 0x47
   697  000048                     	ds	2
   698  00004A                     ??_vfpfcnvrt:
   699                           
   700                           ; 1 bytes @ 0x49
   701  00004A                     	ds	4
   702  00004E                     
   703                           ; 1 bytes @ 0x4D
   704 ;;
   705 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   706 ;;
   707 ;; *************** function _main *****************
   708 ;; Defined at:
   709 ;;		line 84 in file "main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  i               2   67[BANK0 ] int 
   714 ;;  temp1          16   50[BANK0 ] unsigned char [16]
   715 ;;  temp2          16   34[BANK0 ] unsigned char [16]
   716 ;;  previous_loc    1   66[BANK0 ] unsigned char 
   717 ;;  motorR          9   86[BANK0 ] struct DC_motor
   718 ;;  motorL          9   77[BANK0 ] struct DC_motor
   719 ;;  sensorR         4   73[BANK0 ] struct Sensor
   720 ;;  sensorL         4   69[BANK0 ] struct Sensor
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   730 ;;      Params:         0       0       0       0
   731 ;;      Locals:         0      61       0       0
   732 ;;      Temps:          0       2       0       0
   733 ;;      Totals:         0      63       0       0
   734 ;;Total ram usage:       63 bytes
   735 ;; Hardware stack levels required when called:   11
   736 ;; This function calls:
   737 ;;		_ClearLCD
   738 ;;		_LCD_String
   739 ;;		_SetLine
   740 ;;		_check_RFID
   741 ;;		_classify_data
   742 ;;		_display_RFID
   743 ;;		_init_motors
   744 ;;		_moveToBeacon
   745 ;;		_process_signal
   746 ;;		_setup
   747 ;;		_sprintf
   748 ;; This function is called by:
   749 ;;		Startup code after reset
   750 ;; This function uses a non-reentrant model
   751 ;;
   752                           
   753                           	psect	text0
   754  000346                     __ptext0:
   755                           	opt callstack 0
   756  000346                     _main:
   757                           	opt callstack 20
   758                           
   759                           ;main.c: 87:   setup();
   760                           
   761                           ;incstack = 0
   762  000346  EC5C  F00A         	call	_setup	;wreg free
   763                           
   764                           ;main.c: 90:   struct DC_motor motorL, motorR;;main.c: 91:   init_motors(&motorL, &motor
      +                          R);
   765  00034A  0EAD               	movlw	low main@motorL
   766  00034C  6E20               	movwf	init_motors@mL,c
   767  00034E  0E00               	movlw	high main@motorL
   768  000350  6E21               	movwf	init_motors@mL+1,c
   769  000352  0EB6               	movlw	low main@motorR
   770  000354  6E22               	movwf	init_motors@mR,c
   771  000356  0E00               	movlw	high main@motorR
   772  000358  6E23               	movwf	init_motors@mR+1,c
   773  00035A  EC42  F005         	call	_init_motors	;wreg free
   774  00035E  D092               	goto	l2659
   775  000360                     l2621:
   776                           
   777                           ;main.c: 100:       {;main.c: 101:           static char beacon_location;;main.c: 104:  
      +                                   sensorL.raw_data = (int)((CAP2BUFH << 8) | CAP2BUFL);
   778  000360  5066               	movf	3942,w,c	;volatile
   779  000362  CF67 F080          	movff	3943,??_main	;volatile
   780  000366  0100               	movlb	0	; () banked
   781  000368  6B81               	clrf	(??_main+1)& (0+255),b
   782  00036A  C080  F081         	movff	??_main,??_main+1
   783  00036E  6B80               	clrf	??_main& (0+255),b
   784  000370  1180               	iorwf	??_main& (0+255),w,b
   785  000372  6FA5               	movwf	main@sensorL& (0+255),b
   786  000374  5181               	movf	(??_main+1)& (0+255),w,b
   787  000376  6FA6               	movwf	(main@sensorL+1)& (0+255),b
   788                           
   789                           ;main.c: 105:           sensorR.raw_data = (int)((CAP1BUFH << 8) | CAP1BUFL);
   790  000378  5068               	movf	3944,w,c	;volatile
   791  00037A  CF69 F080          	movff	3945,??_main	;volatile
   792  00037E  6B81               	clrf	(??_main+1)& (0+255),b
   793  000380  C080  F081         	movff	??_main,??_main+1
   794  000384  6B80               	clrf	??_main& (0+255),b
   795  000386  1180               	iorwf	??_main& (0+255),w,b
   796  000388  6FA9               	movwf	main@sensorR& (0+255),b
   797  00038A  5181               	movf	(??_main+1)& (0+255),w,b
   798  00038C  6FAA               	movwf	(main@sensorR+1)& (0+255),b
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 108:           process_signal(&sensorL);
   802  00038E  0EA5               	movlw	low main@sensorL
   803  000390  6E17               	movwf	process_signal@S,c
   804  000392  0E00               	movlw	high main@sensorL
   805  000394  6E18               	movwf	process_signal@S+1,c
   806  000396  EC74  F007         	call	_process_signal	;wreg free
   807                           
   808                           ;main.c: 109:           process_signal(&sensorR);
   809  00039A  0EA9               	movlw	low main@sensorR
   810  00039C  6E17               	movwf	process_signal@S,c
   811  00039E  0E00               	movlw	high main@sensorR
   812  0003A0  6E18               	movwf	process_signal@S+1,c
   813  0003A2  EC74  F007         	call	_process_signal	;wreg free
   814                           
   815                           ;main.c: 111:           char previous_location = beacon_location;
   816  0003A6  C0C1  F0A2         	movff	main@beacon_location,main@previous_location
   817                           
   818                           ;main.c: 114:           beacon_location = classify_data(sensorL.smoothed_signal,
   819  0003AA  C0A7  F009         	movff	main@sensorL+2,classify_data@left_smoothed
   820  0003AE  C0A8  F00A         	movff	main@sensorL+3,classify_data@left_smoothed+1
   821  0003B2  C0AB  F00B         	movff	main@sensorR+2,classify_data@right_smoothed
   822  0003B6  C0AC  F00C         	movff	main@sensorR+3,classify_data@right_smoothed+1
   823  0003BA  ECEF  F009         	call	_classify_data	;wreg free
   824  0003BE  0100               	movlb	0	; () banked
   825  0003C0  6FC1               	movwf	main@beacon_location& (0+255),b
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 119:           moveToBeacon(beacon_location, previous_location, &motorL, &motor
      +                          R);
   829  0003C2  C0A2  F027         	movff	main@previous_location,moveToBeacon@prev_location
   830  0003C6  0EAD               	movlw	low main@motorL
   831  0003C8  6E28               	movwf	moveToBeacon@mL,c
   832  0003CA  0E00               	movlw	high main@motorL
   833  0003CC  6E29               	movwf	moveToBeacon@mL+1,c
   834  0003CE  0EB6               	movlw	low main@motorR
   835  0003D0  6E2A               	movwf	moveToBeacon@mR,c
   836  0003D2  0E00               	movlw	high main@motorR
   837  0003D4  6E2B               	movwf	moveToBeacon@mR+1,c
   838  0003D6  51C1               	movf	main@beacon_location& (0+255),w,b
   839  0003D8  ECEF  F008         	call	_moveToBeacon
   840                           
   841                           ;main.c: 122:           ClearLCD();
   842  0003DC  ECEC  F00A         	call	_ClearLCD	;wreg free
   843                           
   844                           ;main.c: 123:           SetLine(1);
   845  0003E0  0E01               	movlw	1
   846  0003E2  EC73  F00A         	call	_SetLine
   847                           
   848                           ;main.c: 124:           char temp2[16];;main.c: 125:           sprintf(temp2,"LEFT %u ",
      +                          sensorL.smoothed_signal);
   849  0003E6  0E82               	movlw	low main@temp2
   850  0003E8  0100               	movlb	0	; () banked
   851  0003EA  6F70               	movwf	sprintf@s& (0+255),b
   852  0003EC  0E00               	movlw	high main@temp2
   853  0003EE  6F71               	movwf	(sprintf@s+1)& (0+255),b
   854  0003F0  0E3B               	movlw	low STR_1
   855  0003F2  6F72               	movwf	sprintf@fmt& (0+255),b
   856  0003F4  0E03               	movlw	high STR_1
   857  0003F6  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   858  0003F8  C0A7  F074         	movff	main@sensorL+2,?_sprintf+4
   859  0003FC  C0A8  F075         	movff	main@sensorL+3,?_sprintf+5
   860  000400  EC80  F009         	call	_sprintf	;wreg free
   861                           
   862                           ;main.c: 126:           LCD_String(temp2);
   863  000404  0E82               	movlw	low main@temp2
   864  000406  6E0D               	movwf	LCD_String@string,c
   865  000408  0E00               	movlw	high main@temp2
   866  00040A  6E0E               	movwf	LCD_String@string+1,c
   867  00040C  EC26  F009         	call	_LCD_String	;wreg free
   868                           
   869                           ;main.c: 127:           SetLine(2);
   870  000410  0E02               	movlw	2
   871  000412  EC73  F00A         	call	_SetLine
   872                           
   873                           ;main.c: 128:           char temp1[16];;main.c: 129:           sprintf(temp1,"RIGHT %u "
      +                          ,sensorR.smoothed_signal);
   874  000416  0E92               	movlw	low main@temp1
   875  000418  0100               	movlb	0	; () banked
   876  00041A  6F70               	movwf	sprintf@s& (0+255),b
   877  00041C  0E00               	movlw	high main@temp1
   878  00041E  6F71               	movwf	(sprintf@s+1)& (0+255),b
   879  000420  0E31               	movlw	low STR_2
   880  000422  6F72               	movwf	sprintf@fmt& (0+255),b
   881  000424  0E03               	movlw	high STR_2
   882  000426  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   883  000428  C0AB  F074         	movff	main@sensorR+2,?_sprintf+4
   884  00042C  C0AC  F075         	movff	main@sensorR+3,?_sprintf+5
   885  000430  EC80  F009         	call	_sprintf	;wreg free
   886                           
   887                           ;main.c: 130:           LCD_String(temp1);
   888  000434  0E92               	movlw	low main@temp1
   889  000436  6E0D               	movwf	LCD_String@string,c
   890  000438  0E00               	movlw	high main@temp1
   891  00043A  6E0E               	movwf	LCD_String@string+1,c
   892  00043C  EC26  F009         	call	_LCD_String	;wreg free
   893                           
   894                           ;main.c: 131:           _delay((unsigned long)((100)*(8000000/4000.0)));
   895  000440  0E02               	movlw	2
   896  000442  0100               	movlb	0	; () banked
   897  000444  6F81               	movwf	(??_main+1)& (0+255),b
   898  000446  0E04               	movlw	4
   899  000448  6F80               	movwf	??_main& (0+255),b
   900  00044A  0EBA               	movlw	186
   901  00044C                     u2197:
   902  00044C  2EE8               	decfsz	wreg,f,c
   903  00044E  D7FE               	bra	u2197
   904  000450  2F80               	decfsz	??_main& (0+255),f,b
   905  000452  D7FC               	bra	u2197
   906  000454  2F81               	decfsz	(??_main+1)& (0+255),f,b
   907  000456  D7FA               	bra	u2197
   908  000458  F000               	nop	
   909                           
   910                           ;main.c: 135:           if(RFID_flag == 1)
   911  00045A  0100               	movlb	0	; () banked
   912  00045C  05C2               	decf	_RFID_flag& (0+255),w,b	;volatile
   913  00045E  A4D8               	btfss	status,2,c
   914  000460  D011               	goto	l2659
   915                           
   916                           ; BSR set to: 0
   917                           ;main.c: 136:           {;main.c: 137:               display_RFID(RFIDbuf);
   918  000462  0EE3               	movlw	low _RFIDbuf
   919  000464  6E0E               	movwf	display_RFID@dataBuf,c
   920  000466  0E00               	movlw	high _RFIDbuf
   921  000468  6E0F               	movwf	display_RFID@dataBuf+1,c
   922  00046A  ECCF  F009         	call	_display_RFID	;wreg free
   923                           
   924                           ;main.c: 138:               check_RFID(RFIDbuf);
   925  00046E  0EE3               	movlw	low _RFIDbuf
   926  000470  6E0F               	movwf	check_RFID@dataBuf,c
   927  000472  0E00               	movlw	high _RFIDbuf
   928  000474  6E10               	movwf	check_RFID@dataBuf+1,c
   929  000476  EC08  F004         	call	_check_RFID	;wreg free
   930                           
   931                           ;main.c: 139:               robot_mode = 1;
   932  00047A  0E01               	movlw	1
   933  00047C  6E55               	movwf	_robot_mode,c	;volatile
   934                           
   935                           ;main.c: 140:               RFID_flag = 0;
   936  00047E  0E00               	movlw	0
   937  000480  0100               	movlb	0	; () banked
   938  000482  6FC2               	movwf	_RFID_flag& (0+255),b	;volatile
   939  000484                     l2659:
   940                           
   941                           ;main.c: 99:       while(robot_mode == 0)
   942  000484  5055               	movf	_robot_mode,w,c	;volatile
   943  000486  A4D8               	btfss	status,2,c
   944  000488  D003               	goto	l2663
   945  00048A  D76A               	goto	l2621
   946  00048C                     l2661:
   947                           
   948                           ;main.c: 146:       {;main.c: 148:           robot_mode = 2;
   949  00048C  0E02               	movlw	2
   950  00048E  6E55               	movwf	_robot_mode,c	;volatile
   951  000490                     l2663:
   952                           
   953                           ;main.c: 145:       while(robot_mode == 1)
   954  000490  0455               	decf	_robot_mode,w,c	;volatile
   955  000492  A4D8               	btfss	status,2,c
   956  000494  D02C               	goto	u2170
   957  000496  D7FA               	goto	l2661
   958  000498                     l2665:
   959                           
   960                           ;main.c: 155:           {;main.c: 156:               ClearLCD();
   961  000498  ECEC  F00A         	call	_ClearLCD	;wreg free
   962                           
   963                           ;main.c: 157:               LCD_String("RESETTING ROBOT");
   964  00049C  0E21               	movlw	low STR_3
   965  00049E  6E0D               	movwf	LCD_String@string,c
   966  0004A0  0E03               	movlw	high STR_3
   967  0004A2  6E0E               	movwf	LCD_String@string+1,c
   968  0004A4  EC26  F009         	call	_LCD_String	;wreg free
   969                           
   970                           ;main.c: 158:               for(int i=0; i<10;i++)
   971  0004A8  0E00               	movlw	0
   972  0004AA  0100               	movlb	0	; () banked
   973  0004AC  6FA4               	movwf	(main@i+1)& (0+255),b
   974  0004AE  0E00               	movlw	0
   975  0004B0  6FA3               	movwf	main@i& (0+255),b
   976  0004B2                     l2675:
   977                           
   978                           ; BSR set to: 0
   979                           ;main.c: 159:               {;main.c: 160:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   980  0004B2  0E02               	movlw	2
   981  0004B4  0100               	movlb	0	; () banked
   982  0004B6  6F81               	movwf	(??_main+1)& (0+255),b
   983  0004B8  0E04               	movlw	4
   984  0004BA  6F80               	movwf	??_main& (0+255),b
   985  0004BC  0EBA               	movlw	186
   986  0004BE                     u2207:
   987  0004BE  2EE8               	decfsz	wreg,f,c
   988  0004C0  D7FE               	bra	u2207
   989  0004C2  2F80               	decfsz	??_main& (0+255),f,b
   990  0004C4  D7FC               	bra	u2207
   991  0004C6  2F81               	decfsz	(??_main+1)& (0+255),f,b
   992  0004C8  D7FA               	bra	u2207
   993  0004CA  F000               	nop	
   994                           
   995                           ;main.c: 161:               }
   996  0004CC  0100               	movlb	0	; () banked
   997  0004CE  4BA3               	infsnz	main@i& (0+255),f,b
   998  0004D0  2BA4               	incf	(main@i+1)& (0+255),f,b
   999  0004D2  BFA4               	btfsc	(main@i+1)& (0+255),7,b
  1000  0004D4  D7EE               	goto	l2675
  1001  0004D6  51A4               	movf	(main@i+1)& (0+255),w,b
  1002  0004D8  E104               	bnz	u2160
  1003  0004DA  0E0A               	movlw	10
  1004  0004DC  5DA3               	subwf	main@i& (0+255),w,b
  1005  0004DE  A0D8               	btfss	status,0,c
  1006  0004E0  D7E8               	goto	l2675
  1007  0004E2                     u2160:
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;main.c: 162:               ClearLCD();
  1011  0004E2  ECEC  F00A         	call	_ClearLCD	;wreg free
  1012                           
  1013                           ;main.c: 163:               robot_mode = 0;
  1014  0004E6  0E00               	movlw	0
  1015  0004E8  6E55               	movwf	_robot_mode,c	;volatile
  1016  0004EA                     l2683:
  1017                           
  1018                           ;main.c: 154:           while(PORTDbits.RD2 == 1)
  1019  0004EA  B483               	btfsc	3971,2,c	;volatile
  1020  0004EC  D7D5               	goto	l2665
  1021  0004EE                     u2170:
  1022                           
  1023                           ;main.c: 152:       while(robot_mode == 2)
  1024  0004EE  0E02               	movlw	2
  1025  0004F0  1855               	xorwf	_robot_mode,w,c	;volatile
  1026  0004F2  A4D8               	btfss	status,2,c
  1027  0004F4  D7C7               	goto	l2659
  1028  0004F6  D7F9               	goto	l2683
  1029  0004F8                     __end_of_main:
  1030                           	opt callstack 0
  1031                           
  1032 ;; *************** function _sprintf *****************
  1033 ;; Defined at:
  1034 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;  s               2   16[BANK0 ] PTR unsigned char 
  1037 ;;		 -> main@temp1(16), main@temp2(16), 
  1038 ;;  fmt             2   18[BANK0 ] PTR const unsigned char 
  1039 ;;		 -> STR_2(10), STR_1(9), 
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  f               6   26[BANK0 ] struct _IO_FILE
  1042 ;;  ap              2   24[BANK0 ] PTR void [1]
  1043 ;;		 -> ?_sprintf(2), 
  1044 ;;  ret             2    0        int 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2   16[BANK0 ] int 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1054 ;;      Params:         0       6       0       0
  1055 ;;      Locals:         0      10       0       0
  1056 ;;      Temps:          0       0       0       0
  1057 ;;      Totals:         0      16       0       0
  1058 ;;Total ram usage:       16 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:   10
  1061 ;; This function calls:
  1062 ;;		_vfprintf
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text1
  1069  001300                     __ptext1:
  1070                           	opt callstack 0
  1071  001300                     _sprintf:
  1072                           	opt callstack 20
  1073                           
  1074                           ;incstack = 0
  1075  001300  0E74               	movlw	low (?_sprintf+4)
  1076  001302  0100               	movlb	0	; () banked
  1077  001304  6F78               	movwf	sprintf@ap& (0+255),b
  1078  001306  0E00               	movlw	high (?_sprintf+4)
  1079  001308  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  1080  00130A  C070  F07A         	movff	sprintf@s,sprintf@f
  1081  00130E  C071  F07B         	movff	sprintf@s+1,sprintf@f+1
  1082                           
  1083                           ; BSR set to: 0
  1084  001312  0E00               	movlw	0
  1085  001314  6F7D               	movwf	(sprintf@f+3)& (0+255),b
  1086  001316  0E00               	movlw	0
  1087  001318  6F7C               	movwf	(sprintf@f+2)& (0+255),b
  1088                           
  1089                           ; BSR set to: 0
  1090  00131A  0E00               	movlw	0
  1091  00131C  6F7F               	movwf	(sprintf@f+5)& (0+255),b
  1092  00131E  0E00               	movlw	0
  1093  001320  6F7E               	movwf	(sprintf@f+4)& (0+255),b
  1094                           
  1095                           ; BSR set to: 0
  1096  001322  0E7A               	movlw	low sprintf@f
  1097  001324  6F68               	movwf	vfprintf@fp& (0+255),b
  1098  001326  0E00               	movlw	high sprintf@f
  1099  001328  6F69               	movwf	(vfprintf@fp+1)& (0+255),b
  1100  00132A  C072  F06A         	movff	sprintf@fmt,vfprintf@fmt
  1101  00132E  C073  F06B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1102  001332  0E78               	movlw	low sprintf@ap
  1103  001334  6F6C               	movwf	vfprintf@ap& (0+255),b
  1104  001336  0E00               	movlw	high sprintf@ap
  1105  001338  6F6D               	movwf	(vfprintf@ap+1)& (0+255),b
  1106  00133A  EC55  F009         	call	_vfprintf	;wreg free
  1107  00133E  0100               	movlb	0	; () banked
  1108  001340  517C               	movf	(sprintf@f+2)& (0+255),w,b
  1109  001342  2570               	addwf	sprintf@s& (0+255),w,b
  1110  001344  6ED9               	movwf	fsr2l,c
  1111  001346  517D               	movf	(sprintf@f+3)& (0+255),w,b
  1112  001348  2171               	addwfc	(sprintf@s+1)& (0+255),w,b
  1113  00134A  6EDA               	movwf	fsr2h,c
  1114  00134C  0E00               	movlw	0
  1115  00134E  6EDF               	movwf	indf2,c
  1116                           
  1117                           ; BSR set to: 0
  1118  001350  0012               	return		;funcret
  1119  001352                     __end_of_sprintf:
  1120                           	opt callstack 0
  1121                           
  1122 ;; *************** function _vfprintf *****************
  1123 ;; Defined at:
  1124 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  1127 ;;		 -> sprintf@f(6), 
  1128 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  1129 ;;		 -> STR_2(10), STR_1(9), 
  1130 ;;  ap              2   12[BANK0 ] PTR PTR void 
  1131 ;;		 -> sprintf@ap(2), 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  cfmt            2   14[BANK0 ] PTR unsigned char 
  1134 ;;		 -> STR_2(10), STR_1(9), 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  2    8[BANK0 ] int 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1144 ;;      Params:         0       6       0       0
  1145 ;;      Locals:         0       2       0       0
  1146 ;;      Temps:          0       0       0       0
  1147 ;;      Totals:         0       8       0       0
  1148 ;;Total ram usage:        8 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    9
  1151 ;; This function calls:
  1152 ;;		_vfpfcnvrt
  1153 ;; This function is called by:
  1154 ;;		_sprintf
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text2
  1159  0012AA                     __ptext2:
  1160                           	opt callstack 0
  1161  0012AA                     _vfprintf:
  1162                           	opt callstack 20
  1163                           
  1164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;incstack = 0
  1168  0012AA  C06A  F06E         	movff	vfprintf@fmt,vfprintf@cfmt
  1169  0012AE  C06B  F06F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1170                           
  1171                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1172  0012B2  0E00               	movlw	0
  1173  0012B4  0100               	movlb	0	; () banked
  1174  0012B6  6FC0               	movwf	(_nout+1)& (0+255),b
  1175  0012B8  0E00               	movlw	0
  1176  0012BA  6FBF               	movwf	_nout& (0+255),b
  1177                           
  1178                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1179  0012BC  D013               	goto	l2603
  1180  0012BE                     l2601:
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1184  0012BE  C068  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1185  0012C2  C069  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1186  0012C6  0E6E               	movlw	low vfprintf@cfmt
  1187  0012C8  6E46               	movwf	vfpfcnvrt@fmt,c
  1188  0012CA  0E00               	movlw	high vfprintf@cfmt
  1189  0012CC  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1190  0012CE  C06C  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1191  0012D2  C06D  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1192  0012D6  EC53  F003         	call	_vfpfcnvrt	;wreg free
  1193  0012DA  5044               	movf	?_vfpfcnvrt,w,c
  1194  0012DC  0100               	movlb	0	; () banked
  1195  0012DE  27BF               	addwf	_nout& (0+255),f,b
  1196  0012E0  5045               	movf	?_vfpfcnvrt+1,w,c
  1197  0012E2  23C0               	addwfc	(_nout+1)& (0+255),f,b
  1198  0012E4                     l2603:
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1202  0012E4  C06E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1203  0012E8  C06F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1204  0012EC                     	if	0	;tblptru may be non-zero
  1205  0012EC                     	endif
  1206  0012EC                     	if	0	;tblptru may be non-zero
  1207  0012EC                     	endif
  1208  0012EC  0008               	tblrd		*
  1209  0012EE  50F5               	movf	tablat,w,c
  1210  0012F0  0900               	iorlw	0
  1211  0012F2  A4D8               	btfss	status,2,c
  1212  0012F4  D7E4               	goto	l2601
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1216  0012F6  C0BF  F068         	movff	_nout,?_vfprintf
  1217  0012FA  C0C0  F069         	movff	_nout+1,?_vfprintf+1
  1218                           
  1219                           ; BSR set to: 0
  1220  0012FE  0012               	return		;funcret
  1221  001300                     __end_of_vfprintf:
  1222                           	opt callstack 0
  1223                           
  1224 ;; *************** function _vfpfcnvrt *****************
  1225 ;; Defined at:
  1226 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1229 ;;		 -> sprintf@f(6), 
  1230 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1231 ;;		 -> vfprintf@cfmt(2), 
  1232 ;;  ap              2   71[COMRAM] PTR PTR void 
  1233 ;;		 -> sprintf@ap(2), 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  llu             8    0[BANK0 ] unsigned long long 
  1236 ;;  ll              8    0        long long 
  1237 ;;  f               4    0        long long 
  1238 ;;  vp              3    0        PTR void 
  1239 ;;  ct              3    0        unsigned char [3]
  1240 ;;  cp              3    0        PTR unsigned char 
  1241 ;;  i               2    0        int 
  1242 ;;  done            2    0        int 
  1243 ;;  c               1    0        unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   67[COMRAM] int 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1253 ;;      Params:         6       0       0       0
  1254 ;;      Locals:         0       8       0       0
  1255 ;;      Temps:          4       0       0       0
  1256 ;;      Totals:        10       8       0       0
  1257 ;;Total ram usage:       18 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    8
  1260 ;; This function calls:
  1261 ;;		_fputc
  1262 ;;		_utoa
  1263 ;; This function is called by:
  1264 ;;		_vfprintf
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text3
  1269  0006A6                     __ptext3:
  1270                           	opt callstack 0
  1271  0006A6                     _vfpfcnvrt:
  1272                           	opt callstack 20
  1273                           
  1274                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;incstack = 0
  1278  0006A6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1279  0006AA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1280  0006AE  CFDE FFF6          	movff	postinc2,tblptrl
  1281  0006B2  CFDD FFF7          	movff	postdec2,tblptrh
  1282  0006B6                     	if	0	;tblptru may be non-zero
  1283  0006B6                     	endif
  1284  0006B6                     	if	0	;tblptru may be non-zero
  1285  0006B6                     	endif
  1286  0006B6  0008               	tblrd		*
  1287  0006B8  50F5               	movf	tablat,w,c
  1288  0006BA  0A25               	xorlw	37
  1289  0006BC  A4D8               	btfss	status,2,c
  1290  0006BE  D08E               	goto	l2589
  1291                           
  1292                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1293  0006C0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1294  0006C4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1295  0006C8  2ADE               	incf	postinc2,f,c
  1296  0006CA  0E00               	movlw	0
  1297  0006CC  22DD               	addwfc	postdec2,f,c
  1298                           
  1299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1300  0006CE  0E00               	movlw	0
  1301  0006D0  6E4F               	movwf	_width+1,c
  1302  0006D2  0E00               	movlw	0
  1303  0006D4  6E4E               	movwf	_width,c
  1304  0006D6  C04E  F052         	movff	_width,_flags
  1305  0006DA  C04F  F053         	movff	_width+1,_flags+1
  1306                           
  1307                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1308  0006DE  6850               	setf	_prec,c
  1309  0006E0  6851               	setf	_prec+1,c
  1310                           
  1311                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1312  0006E2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1313  0006E6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1314  0006EA  CFDE FFF6          	movff	postinc2,tblptrl
  1315  0006EE  CFDD FFF7          	movff	postdec2,tblptrh
  1316  0006F2                     	if	0	;tblptru may be non-zero
  1317  0006F2                     	endif
  1318  0006F2                     	if	0	;tblptru may be non-zero
  1319  0006F2                     	endif
  1320  0006F2  0008               	tblrd		*
  1321  0006F4  50F5               	movf	tablat,w,c
  1322  0006F6  0A75               	xorlw	117
  1323  0006F8  A4D8               	btfss	status,2,c
  1324  0006FA  D041               	goto	l2573
  1325                           
  1326                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1327  0006FC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1328  000700  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1329  000704  2ADE               	incf	postinc2,f,c
  1330  000706  0E00               	movlw	0
  1331  000708  22DD               	addwfc	postdec2,f,c
  1332                           
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1334  00070A  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1335  00070E  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1336  000712  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1337  000716  0E02               	movlw	2
  1338  000718  26DE               	addwf	postinc2,f,c
  1339  00071A  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1340  00071E  0E00               	movlw	0
  1341  000720  22DD               	addwfc	postdec2,f,c
  1342  000722  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1343  000726  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1344  00072A  CFDE F04C          	movff	postinc2,??_vfpfcnvrt+2
  1345  00072E  CFDD F04D          	movff	postdec2,??_vfpfcnvrt+3
  1346  000732  C04C  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1347  000736  C04D  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1348  00073A  0100               	movlb	0	; () banked
  1349  00073C  6B62               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1350  00073E  6B63               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1351  000740  6B64               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1352  000742  6B65               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1353  000744  6B66               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1354  000746  6B67               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1358  000748  C044  F024         	movff	vfpfcnvrt@fp,utoa@fp
  1359  00074C  C045  F025         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1360  000750  C060  F026         	movff	vfpfcnvrt@llu,utoa@d
  1361  000754  C061  F027         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1362  000758  C062  F028         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1363  00075C  C063  F029         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1364  000760  C064  F02A         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1365  000764  C065  F02B         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1366  000768  C066  F02C         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1367  00076C  C067  F02D         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1368  000770  EC7C  F002         	call	_utoa	;wreg free
  1369  000774  C024  F044         	movff	?_utoa,?_vfpfcnvrt
  1370  000778  C025  F045         	movff	?_utoa+1,?_vfpfcnvrt+1
  1371  00077C  0012               	return	
  1372  00077E                     l2573:
  1373                           
  1374                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1375  00077E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1376  000782  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1377  000786  CFDE FFF6          	movff	postinc2,tblptrl
  1378  00078A  CFDD FFF7          	movff	postdec2,tblptrh
  1379  00078E                     	if	0	;tblptru may be non-zero
  1380  00078E                     	endif
  1381  00078E                     	if	0	;tblptru may be non-zero
  1382  00078E                     	endif
  1383  00078E  0008               	tblrd		*
  1384  000790  50F5               	movf	tablat,w,c
  1385  000792  0A25               	xorlw	37
  1386  000794  A4D8               	btfss	status,2,c
  1387  000796  D016               	goto	l2583
  1388                           
  1389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1390  000798  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1391  00079C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1392  0007A0  2ADE               	incf	postinc2,f,c
  1393  0007A2  0E00               	movlw	0
  1394  0007A4  22DD               	addwfc	postdec2,f,c
  1395                           
  1396                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1397  0007A6  0E00               	movlw	0
  1398  0007A8  6E0A               	movwf	fputc@c+1,c
  1399  0007AA  0E25               	movlw	37
  1400  0007AC  6E09               	movwf	fputc@c,c
  1401  0007AE  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1402  0007B2  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1403  0007B6  ECD9  F006         	call	_fputc	;wreg free
  1404  0007BA                     l2579:
  1405                           
  1406                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1407  0007BA  0E00               	movlw	0
  1408  0007BC  6E45               	movwf	?_vfpfcnvrt+1,c
  1409  0007BE  0E01               	movlw	1
  1410  0007C0  6E44               	movwf	?_vfpfcnvrt,c
  1411  0007C2  0012               	return	
  1412  0007C4                     l2583:
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1415  0007C4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1416  0007C8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1417  0007CC  2ADE               	incf	postinc2,f,c
  1418  0007CE  0E00               	movlw	0
  1419  0007D0  22DD               	addwfc	postdec2,f,c
  1420                           
  1421                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1422  0007D2  0E00               	movlw	0
  1423  0007D4  6E45               	movwf	?_vfpfcnvrt+1,c
  1424  0007D6  0E00               	movlw	0
  1425  0007D8  6E44               	movwf	?_vfpfcnvrt,c
  1426  0007DA  0012               	return	
  1427  0007DC                     l2589:
  1428                           
  1429                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1430  0007DC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1431  0007E0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1432  0007E4  CFDE FFF6          	movff	postinc2,tblptrl
  1433  0007E8  CFDD FFF7          	movff	postdec2,tblptrh
  1434  0007EC                     	if	0	;tblptru may be non-zero
  1435  0007EC                     	endif
  1436  0007EC                     	if	0	;tblptru may be non-zero
  1437  0007EC                     	endif
  1438  0007EC  0008               	tblrd		*
  1439  0007EE  50F5               	movf	tablat,w,c
  1440  0007F0  6E09               	movwf	fputc@c,c
  1441  0007F2  6A0A               	clrf	fputc@c+1,c
  1442  0007F4  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1443  0007F8  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1444  0007FC  ECD9  F006         	call	_fputc	;wreg free
  1445                           
  1446                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1447  000800  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1448  000804  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1449  000808  2ADE               	incf	postinc2,f,c
  1450  00080A  0E00               	movlw	0
  1451  00080C  22DD               	addwfc	postdec2,f,c
  1452  00080E  D7D5               	goto	l2579
  1453  000810                     __end_of_vfpfcnvrt:
  1454                           	opt callstack 0
  1455                           
  1456 ;; *************** function _utoa *****************
  1457 ;; Defined at:
  1458 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
  1461 ;;		 -> sprintf@f(6), 
  1462 ;;  d               8   37[COMRAM] unsigned long long 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  n               8   57[COMRAM] unsigned long long 
  1465 ;;  i               2   65[COMRAM] int 
  1466 ;;  w               2   55[COMRAM] int 
  1467 ;;  p               2   53[COMRAM] int 
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  2   35[COMRAM] int 
  1470 ;; Registers used:
  1471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1477 ;;      Params:        10       0       0       0
  1478 ;;      Locals:        14       0       0       0
  1479 ;;      Temps:          8       0       0       0
  1480 ;;      Totals:        32       0       0       0
  1481 ;;Total ram usage:       32 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    7
  1484 ;; This function calls:
  1485 ;;		___lodiv
  1486 ;;		___lomod
  1487 ;;		_pad
  1488 ;; This function is called by:
  1489 ;;		_vfpfcnvrt
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text4
  1494  0004F8                     __ptext4:
  1495                           	opt callstack 0
  1496  0004F8                     _utoa:
  1497                           	opt callstack 20
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1500                           
  1501                           ;incstack = 0
  1502  0004F8  AE51               	btfss	_prec+1,7,c
  1503                           
  1504                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1505  0004FA  9252               	bcf	_flags,1,c
  1506                           
  1507                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1508  0004FC  BE51               	btfsc	_prec+1,7,c
  1509  0004FE  D005               	goto	u2030
  1510  000500  5051               	movf	_prec+1,w,c
  1511  000502  E108               	bnz	l343
  1512  000504  0450               	decf	_prec,w,c
  1513  000506  B0D8               	btfsc	status,0,c
  1514  000508  D005               	goto	l343
  1515  00050A                     u2030:
  1516  00050A  0E00               	movlw	0
  1517  00050C  6E37               	movwf	utoa@p+1,c
  1518  00050E  0E01               	movlw	1
  1519  000510  6E36               	movwf	utoa@p,c
  1520  000512  D004               	goto	l345
  1521  000514                     l343:
  1522  000514  C050  F036         	movff	_prec,utoa@p
  1523  000518  C051  F037         	movff	_prec+1,utoa@p+1
  1524  00051C                     l345:
  1525                           
  1526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1527  00051C  C04E  F038         	movff	_width,utoa@w
  1528  000520  C04F  F039         	movff	_width+1,utoa@w+1
  1529                           
  1530                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1531  000524  C026  F03A         	movff	utoa@d,utoa@n
  1532  000528  C027  F03B         	movff	utoa@d+1,utoa@n+1
  1533  00052C  C028  F03C         	movff	utoa@d+2,utoa@n+2
  1534  000530  C029  F03D         	movff	utoa@d+3,utoa@n+3
  1535  000534  C02A  F03E         	movff	utoa@d+4,utoa@n+4
  1536  000538  C02B  F03F         	movff	utoa@d+5,utoa@n+5
  1537  00053C  C02C  F040         	movff	utoa@d+6,utoa@n+6
  1538  000540  C02D  F041         	movff	utoa@d+7,utoa@n+7
  1539                           
  1540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1541  000544  0E00               	movlw	0
  1542  000546  6E43               	movwf	utoa@i+1,c
  1543  000548  0E1F               	movlw	31
  1544  00054A  6E42               	movwf	utoa@i,c
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1547  00054C  0E00               	movlw	0
  1548  00054E  0100               	movlb	0	; () banked
  1549  000550  6FE2               	movwf	(_dbuf+31)& (0+255),b
  1550                           
  1551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1552  000552  D076               	goto	l2543
  1553  000554                     l2533:
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1556  000554  0642               	decf	utoa@i,f,c
  1557  000556  A0D8               	btfss	status,0,c
  1558  000558  0643               	decf	utoa@i+1,f,c
  1559                           
  1560                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1561  00055A  0EC3               	movlw	low _dbuf
  1562  00055C  2442               	addwf	utoa@i,w,c
  1563  00055E  6ED9               	movwf	fsr2l,c
  1564  000560  0E00               	movlw	high _dbuf
  1565  000562  2043               	addwfc	utoa@i+1,w,c
  1566  000564  6EDA               	movwf	fsr2h,c
  1567  000566  C03A  F009         	movff	utoa@n,___lomod@dividend
  1568  00056A  C03B  F00A         	movff	utoa@n+1,___lomod@dividend+1
  1569  00056E  C03C  F00B         	movff	utoa@n+2,___lomod@dividend+2
  1570  000572  C03D  F00C         	movff	utoa@n+3,___lomod@dividend+3
  1571  000576  C03E  F00D         	movff	utoa@n+4,___lomod@dividend+4
  1572  00057A  C03F  F00E         	movff	utoa@n+5,___lomod@dividend+5
  1573  00057E  C040  F00F         	movff	utoa@n+6,___lomod@dividend+6
  1574  000582  C041  F010         	movff	utoa@n+7,___lomod@dividend+7
  1575  000586  0E0A               	movlw	10
  1576  000588  6E11               	movwf	___lomod@divisor,c
  1577  00058A  0E00               	movlw	0
  1578  00058C  6E12               	movwf	___lomod@divisor+1,c
  1579  00058E  0E00               	movlw	0
  1580  000590  6E13               	movwf	___lomod@divisor+2,c
  1581  000592  0E00               	movlw	0
  1582  000594  6E14               	movwf	___lomod@divisor+3,c
  1583  000596  0E00               	movlw	0
  1584  000598  6E15               	movwf	___lomod@divisor+4,c
  1585  00059A  0E00               	movlw	0
  1586  00059C  6E16               	movwf	___lomod@divisor+5,c
  1587  00059E  0E00               	movlw	0
  1588  0005A0  6E17               	movwf	___lomod@divisor+6,c
  1589  0005A2  0E00               	movlw	0
  1590  0005A4  6E18               	movwf	___lomod@divisor+7,c
  1591  0005A6  EC82  F006         	call	___lomod	;wreg free
  1592  0005AA  C009  F02E         	movff	?___lomod,??_utoa
  1593  0005AE  C00A  F02F         	movff	?___lomod+1,??_utoa+1
  1594  0005B2  C00B  F030         	movff	?___lomod+2,??_utoa+2
  1595  0005B6  C00C  F031         	movff	?___lomod+3,??_utoa+3
  1596  0005BA  C00D  F032         	movff	?___lomod+4,??_utoa+4
  1597  0005BE  C00E  F033         	movff	?___lomod+5,??_utoa+5
  1598  0005C2  C00F  F034         	movff	?___lomod+6,??_utoa+6
  1599  0005C6  C010  F035         	movff	?___lomod+7,??_utoa+7
  1600  0005CA  502E               	movf	??_utoa,w,c
  1601  0005CC  0F30               	addlw	48
  1602  0005CE  6EDF               	movwf	indf2,c
  1603                           
  1604                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1605  0005D0  0636               	decf	utoa@p,f,c
  1606  0005D2  A0D8               	btfss	status,0,c
  1607  0005D4  0637               	decf	utoa@p+1,f,c
  1608                           
  1609                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1610  0005D6  0638               	decf	utoa@w,f,c
  1611  0005D8  A0D8               	btfss	status,0,c
  1612  0005DA  0639               	decf	utoa@w+1,f,c
  1613                           
  1614                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1615  0005DC  C03A  F009         	movff	utoa@n,___lodiv@dividend
  1616  0005E0  C03B  F00A         	movff	utoa@n+1,___lodiv@dividend+1
  1617  0005E4  C03C  F00B         	movff	utoa@n+2,___lodiv@dividend+2
  1618  0005E8  C03D  F00C         	movff	utoa@n+3,___lodiv@dividend+3
  1619  0005EC  C03E  F00D         	movff	utoa@n+4,___lodiv@dividend+4
  1620  0005F0  C03F  F00E         	movff	utoa@n+5,___lodiv@dividend+5
  1621  0005F4  C040  F00F         	movff	utoa@n+6,___lodiv@dividend+6
  1622  0005F8  C041  F010         	movff	utoa@n+7,___lodiv@dividend+7
  1623  0005FC  0E0A               	movlw	10
  1624  0005FE  6E11               	movwf	___lodiv@divisor,c
  1625  000600  0E00               	movlw	0
  1626  000602  6E12               	movwf	___lodiv@divisor+1,c
  1627  000604  0E00               	movlw	0
  1628  000606  6E13               	movwf	___lodiv@divisor+2,c
  1629  000608  0E00               	movlw	0
  1630  00060A  6E14               	movwf	___lodiv@divisor+3,c
  1631  00060C  0E00               	movlw	0
  1632  00060E  6E15               	movwf	___lodiv@divisor+4,c
  1633  000610  0E00               	movlw	0
  1634  000612  6E16               	movwf	___lodiv@divisor+5,c
  1635  000614  0E00               	movlw	0
  1636  000616  6E17               	movwf	___lodiv@divisor+6,c
  1637  000618  0E00               	movlw	0
  1638  00061A  6E18               	movwf	___lodiv@divisor+7,c
  1639  00061C  ECB7  F005         	call	___lodiv	;wreg free
  1640  000620  C009  F03A         	movff	?___lodiv,utoa@n
  1641  000624  C00A  F03B         	movff	?___lodiv+1,utoa@n+1
  1642  000628  C00B  F03C         	movff	?___lodiv+2,utoa@n+2
  1643  00062C  C00C  F03D         	movff	?___lodiv+3,utoa@n+3
  1644  000630  C00D  F03E         	movff	?___lodiv+4,utoa@n+4
  1645  000634  C00E  F03F         	movff	?___lodiv+5,utoa@n+5
  1646  000638  C00F  F040         	movff	?___lodiv+6,utoa@n+6
  1647  00063C  C010  F041         	movff	?___lodiv+7,utoa@n+7
  1648  000640                     l2543:
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1651  000640  5042               	movf	utoa@i,w,c
  1652  000642  1043               	iorwf	utoa@i+1,w,c
  1653  000644  B4D8               	btfsc	status,2,c
  1654  000646  D01A               	goto	u2080
  1655  000648  503A               	movf	utoa@n,w,c
  1656  00064A  103B               	iorwf	utoa@n+1,w,c
  1657  00064C  103C               	iorwf	utoa@n+2,w,c
  1658  00064E  103D               	iorwf	utoa@n+3,w,c
  1659  000650  103E               	iorwf	utoa@n+4,w,c
  1660  000652  103F               	iorwf	utoa@n+5,w,c
  1661  000654  1040               	iorwf	utoa@n+6,w,c
  1662  000656  1041               	iorwf	utoa@n+7,w,c
  1663  000658  A4D8               	btfss	status,2,c
  1664  00065A  D77C               	goto	l2533
  1665  00065C  BE37               	btfsc	utoa@p+1,7,c
  1666  00065E  D005               	goto	u2060
  1667  000660  5037               	movf	utoa@p+1,w,c
  1668  000662  E102               	bnz	u2061
  1669  000664  0436               	decf	utoa@p,w,c
  1670  000666  B0D8               	btfsc	status,0,c
  1671  000668                     u2061:
  1672  000668  D775               	goto	l2533
  1673  00066A                     u2060:
  1674  00066A  BE39               	btfsc	utoa@w+1,7,c
  1675  00066C  D007               	goto	u2080
  1676  00066E  5039               	movf	utoa@w+1,w,c
  1677  000670  E103               	bnz	u2070
  1678  000672  0438               	decf	utoa@w,w,c
  1679  000674  A0D8               	btfss	status,0,c
  1680  000676  D002               	goto	u2080
  1681  000678                     u2070:
  1682  000678  B252               	btfsc	_flags,1,c
  1683  00067A  D76C               	goto	l2533
  1684  00067C                     u2080:
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1687  00067C  C024  F019         	movff	utoa@fp,pad@fp
  1688  000680  C025  F01A         	movff	utoa@fp+1,pad@fp+1
  1689  000684  0EC3               	movlw	low _dbuf
  1690  000686  2442               	addwf	utoa@i,w,c
  1691  000688  6E1B               	movwf	pad@buf,c
  1692  00068A  0E00               	movlw	high _dbuf
  1693  00068C  2043               	addwfc	utoa@i+1,w,c
  1694  00068E  6E1C               	movwf	pad@buf+1,c
  1695  000690  C038  F01D         	movff	utoa@w,pad@p
  1696  000694  C039  F01E         	movff	utoa@w+1,pad@p+1
  1697  000698  EC29  F007         	call	_pad	;wreg free
  1698  00069C  C019  F024         	movff	?_pad,?_utoa
  1699  0006A0  C01A  F025         	movff	?_pad+1,?_utoa+1
  1700  0006A4  0012               	return		;funcret
  1701  0006A6                     __end_of_utoa:
  1702                           	opt callstack 0
  1703                           
  1704 ;; *************** function _pad *****************
  1705 ;; Defined at:
  1706 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
  1709 ;;		 -> sprintf@f(6), 
  1710 ;;  buf             2   26[COMRAM] PTR unsigned char 
  1711 ;;		 -> dbuf(32), 
  1712 ;;  p               2   28[COMRAM] int 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  w               2   33[COMRAM] int 
  1715 ;;  i               2   31[COMRAM] int 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  2   24[COMRAM] int 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1725 ;;      Params:         6       0       0       0
  1726 ;;      Locals:         4       0       0       0
  1727 ;;      Temps:          1       0       0       0
  1728 ;;      Totals:        11       0       0       0
  1729 ;;Total ram usage:       11 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    6
  1732 ;; This function calls:
  1733 ;;		_fputc
  1734 ;;		_fputs
  1735 ;;		_strlen
  1736 ;; This function is called by:
  1737 ;;		_utoa
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text5
  1742  000E52                     __ptext5:
  1743                           	opt callstack 0
  1744  000E52                     _pad:
  1745                           	opt callstack 20
  1746                           
  1747                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1748                           
  1749                           ;incstack = 0
  1750  000E52  A052               	btfss	_flags,0,c
  1751  000E54  D00A               	goto	l2465
  1752                           
  1753                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1754  000E56  C01B  F012         	movff	pad@buf,fputs@s
  1755  000E5A  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1756  000E5E  C019  F014         	movff	pad@fp,fputs@fp
  1757  000E62  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1758  000E66  EC0D  F00A         	call	_fputs	;wreg free
  1759  000E6A                     l2465:
  1760                           
  1761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1762  000E6A  BE1E               	btfsc	pad@p+1,7,c
  1763  000E6C  D005               	goto	l2469
  1764  000E6E  C01D  F022         	movff	pad@p,pad@w
  1765  000E72  C01E  F023         	movff	pad@p+1,pad@w+1
  1766  000E76  D004               	goto	l333
  1767  000E78                     l2469:
  1768  000E78  0E00               	movlw	0
  1769  000E7A  6E23               	movwf	pad@w+1,c
  1770  000E7C  0E00               	movlw	0
  1771  000E7E  6E22               	movwf	pad@w,c
  1772  000E80                     l333:
  1773                           
  1774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1775  000E80  0E00               	movlw	0
  1776  000E82  6E21               	movwf	pad@i+1,c
  1777  000E84  0E00               	movlw	0
  1778  000E86  6E20               	movwf	pad@i,c
  1779                           
  1780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1781  000E88  D00C               	goto	l2475
  1782  000E8A                     l2471:
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1785  000E8A  0E00               	movlw	0
  1786  000E8C  6E0A               	movwf	fputc@c+1,c
  1787  000E8E  0E20               	movlw	32
  1788  000E90  6E09               	movwf	fputc@c,c
  1789  000E92  C019  F00B         	movff	pad@fp,fputc@fp
  1790  000E96  C01A  F00C         	movff	pad@fp+1,fputc@fp+1
  1791  000E9A  ECD9  F006         	call	_fputc	;wreg free
  1792                           
  1793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1794  000E9E  4A20               	infsnz	pad@i,f,c
  1795  000EA0  2A21               	incf	pad@i+1,f,c
  1796  000EA2                     l2475:
  1797                           
  1798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1799  000EA2  5022               	movf	pad@w,w,c
  1800  000EA4  5C20               	subwf	pad@i,w,c
  1801  000EA6  5021               	movf	pad@i+1,w,c
  1802  000EA8  0A80               	xorlw	128
  1803  000EAA  6E1F               	movwf	??_pad& (0+255),c
  1804  000EAC  5023               	movf	pad@w+1,w,c
  1805  000EAE  0A80               	xorlw	128
  1806  000EB0  581F               	subwfb	??_pad& (0+255),w,c
  1807  000EB2  A0D8               	btfss	status,0,c
  1808  000EB4  D7EA               	goto	l2471
  1809                           
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1811  000EB6  B052               	btfsc	_flags,0,c
  1812  000EB8  D00A               	goto	l2479
  1813                           
  1814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1815  000EBA  C01B  F012         	movff	pad@buf,fputs@s
  1816  000EBE  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1817  000EC2  C019  F014         	movff	pad@fp,fputs@fp
  1818  000EC6  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1819  000ECA  EC0D  F00A         	call	_fputs	;wreg free
  1820  000ECE                     l2479:
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1823  000ECE  C01B  F009         	movff	pad@buf,strlen@s
  1824  000ED2  C01C  F00A         	movff	pad@buf+1,strlen@s+1
  1825  000ED6  EC8A  F00A         	call	_strlen	;wreg free
  1826  000EDA  5022               	movf	pad@w,w,c
  1827  000EDC  2409               	addwf	?_strlen,w,c
  1828  000EDE  6E19               	movwf	?_pad,c
  1829  000EE0  5023               	movf	pad@w+1,w,c
  1830  000EE2  200A               	addwfc	?_strlen+1,w,c
  1831  000EE4  6E1A               	movwf	?_pad+1,c
  1832  000EE6  0012               	return		;funcret
  1833  000EE8                     __end_of_pad:
  1834                           	opt callstack 0
  1835                           
  1836 ;; *************** function _strlen *****************
  1837 ;; Defined at:
  1838 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1841 ;;		 -> dbuf(32), 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  a               2   10[COMRAM] PTR const unsigned char 
  1844 ;;		 -> dbuf(32), 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  2    8[COMRAM] unsigned int 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1854 ;;      Params:         2       0       0       0
  1855 ;;      Locals:         2       0       0       0
  1856 ;;      Temps:          0       0       0       0
  1857 ;;      Totals:         4       0       0       0
  1858 ;;Total ram usage:        4 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    3
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_pad
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text6
  1869  001514                     __ptext6:
  1870                           	opt callstack 0
  1871  001514                     _strlen:
  1872                           	opt callstack 22
  1873                           
  1874                           ;incstack = 0
  1875  001514  C009  F00B         	movff	strlen@s,strlen@a
  1876  001518  C00A  F00C         	movff	strlen@s+1,strlen@a+1
  1877  00151C  D002               	goto	l2455
  1878  00151E                     l2453:
  1879  00151E  4A09               	infsnz	strlen@s,f,c
  1880  001520  2A0A               	incf	strlen@s+1,f,c
  1881  001522                     l2455:
  1882  001522  C009  FFD9         	movff	strlen@s,fsr2l
  1883  001526  C00A  FFDA         	movff	strlen@s+1,fsr2h
  1884  00152A  50DF               	movf	indf2,w,c
  1885  00152C  A4D8               	btfss	status,2,c
  1886  00152E  D7F7               	goto	l2453
  1887  001530  500B               	movf	strlen@a,w,c
  1888  001532  5C09               	subwf	strlen@s,w,c
  1889  001534  6E09               	movwf	?_strlen,c
  1890  001536  500C               	movf	strlen@a+1,w,c
  1891  001538  580A               	subwfb	strlen@s+1,w,c
  1892  00153A  6E0A               	movwf	?_strlen+1,c
  1893  00153C  0012               	return		;funcret
  1894  00153E                     __end_of_strlen:
  1895                           	opt callstack 0
  1896                           
  1897 ;; *************** function _fputs *****************
  1898 ;; Defined at:
  1899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  s               2   17[COMRAM] PTR const unsigned char 
  1902 ;;		 -> dbuf(32), 
  1903 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1904 ;;		 -> sprintf@f(6), 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  i               2   22[COMRAM] int 
  1907 ;;  c               1   21[COMRAM] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  2   17[COMRAM] int 
  1910 ;; Registers used:
  1911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1917 ;;      Params:         4       0       0       0
  1918 ;;      Locals:         3       0       0       0
  1919 ;;      Temps:          0       0       0       0
  1920 ;;      Totals:         7       0       0       0
  1921 ;;Total ram usage:        7 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    5
  1924 ;; This function calls:
  1925 ;;		_fputc
  1926 ;; This function is called by:
  1927 ;;		_pad
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text7
  1932  00141A                     __ptext7:
  1933                           	opt callstack 0
  1934  00141A                     _fputs:
  1935                           	opt callstack 20
  1936                           
  1937                           ;incstack = 0
  1938  00141A  0E00               	movlw	0
  1939  00141C  6E18               	movwf	fputs@i+1,c
  1940  00141E  0E00               	movlw	0
  1941  001420  6E17               	movwf	fputs@i,c
  1942  001422  D00B               	goto	l2449
  1943  001424                     l2445:
  1944  001424  C016  F009         	movff	fputs@c,fputc@c
  1945  001428  6A0A               	clrf	fputc@c+1,c
  1946  00142A  C014  F00B         	movff	fputs@fp,fputc@fp
  1947  00142E  C015  F00C         	movff	fputs@fp+1,fputc@fp+1
  1948  001432  ECD9  F006         	call	_fputc	;wreg free
  1949  001436  4A17               	infsnz	fputs@i,f,c
  1950  001438  2A18               	incf	fputs@i+1,f,c
  1951  00143A                     l2449:
  1952  00143A  5017               	movf	fputs@i,w,c
  1953  00143C  2412               	addwf	fputs@s,w,c
  1954  00143E  6ED9               	movwf	fsr2l,c
  1955  001440  5018               	movf	fputs@i+1,w,c
  1956  001442  2013               	addwfc	fputs@s+1,w,c
  1957  001444  6EDA               	movwf	fsr2h,c
  1958  001446  50DF               	movf	indf2,w,c
  1959  001448  6E16               	movwf	fputs@c,c
  1960  00144A  5016               	movf	fputs@c,w,c
  1961  00144C  B4D8               	btfsc	status,2,c
  1962  00144E  0012               	return	
  1963  001450  D7E9               	goto	l2445
  1964  001452                     __end_of_fputs:
  1965                           	opt callstack 0
  1966                           
  1967 ;; *************** function _fputc *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  c               2    8[COMRAM] int 
  1972 ;;  fp              2   10[COMRAM] PTR struct _IO_FILE
  1973 ;;		 -> sprintf@f(6), 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  2    8[COMRAM] int 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1985 ;;      Params:         4       0       0       0
  1986 ;;      Locals:         0       0       0       0
  1987 ;;      Temps:          5       0       0       0
  1988 ;;      Totals:         9       0       0       0
  1989 ;;Total ram usage:        9 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    4
  1992 ;; This function calls:
  1993 ;;		_putch
  1994 ;; This function is called by:
  1995 ;;		_pad
  1996 ;;		_vfpfcnvrt
  1997 ;;		_fputs
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text8
  2002  000DB2                     __ptext8:
  2003                           	opt callstack 0
  2004  000DB2                     _fputc:
  2005                           	opt callstack 20
  2006                           
  2007                           ;incstack = 0
  2008  000DB2  500B               	movf	fputc@fp,w,c
  2009  000DB4  100C               	iorwf	fputc@fp+1,w,c
  2010  000DB6  B4D8               	btfsc	status,2,c
  2011  000DB8  D004               	goto	u1860
  2012  000DBA  500B               	movf	fputc@fp,w,c
  2013  000DBC  100C               	iorwf	fputc@fp+1,w,c
  2014  000DBE  A4D8               	btfss	status,2,c
  2015  000DC0  D004               	goto	l2435
  2016  000DC2                     u1860:
  2017  000DC2  5009               	movf	fputc@c,w,c
  2018  000DC4  EC00  F00B         	call	_putch
  2019  000DC8  0012               	return	
  2020  000DCA                     l2435:
  2021  000DCA  EE20 F004          	lfsr	2,4
  2022  000DCE  500B               	movf	fputc@fp,w,c
  2023  000DD0  26D9               	addwf	fsr2l,f,c
  2024  000DD2  500C               	movf	fputc@fp+1,w,c
  2025  000DD4  22DA               	addwfc	fsr2h,f,c
  2026  000DD6  50DE               	movf	postinc2,w,c
  2027  000DD8  10DE               	iorwf	postinc2,w,c
  2028  000DDA  B4D8               	btfsc	status,2,c
  2029  000DDC  D016               	goto	u1880
  2030  000DDE  EE20 F004          	lfsr	2,4
  2031  000DE2  500B               	movf	fputc@fp,w,c
  2032  000DE4  26D9               	addwf	fsr2l,f,c
  2033  000DE6  500C               	movf	fputc@fp+1,w,c
  2034  000DE8  22DA               	addwfc	fsr2h,f,c
  2035  000DEA  EE10 F002          	lfsr	1,2
  2036  000DEE  500B               	movf	fputc@fp,w,c
  2037  000DF0  26E1               	addwf	fsr1l,f,c
  2038  000DF2  500C               	movf	fputc@fp+1,w,c
  2039  000DF4  22E2               	addwfc	fsr1h,f,c
  2040  000DF6  50DE               	movf	postinc2,w,c
  2041  000DF8  5CE6               	subwf	postinc1,w,c
  2042  000DFA  50E6               	movf	postinc1,w,c
  2043  000DFC  0A80               	xorlw	128
  2044  000DFE  6E11               	movwf	(??_fputc+4)& (0+255),c
  2045  000E00  50DE               	movf	postinc2,w,c
  2046  000E02  0A80               	xorlw	128
  2047  000E04  5811               	subwfb	(??_fputc+4)& (0+255),w,c
  2048  000E06  B0D8               	btfsc	status,0,c
  2049  000E08  0012               	return	
  2050  000E0A                     u1880:
  2051  000E0A  EE20 F002          	lfsr	2,2
  2052  000E0E  500B               	movf	fputc@fp,w,c
  2053  000E10  26D9               	addwf	fsr2l,f,c
  2054  000E12  500C               	movf	fputc@fp+1,w,c
  2055  000E14  22DA               	addwfc	fsr2h,f,c
  2056  000E16  CFDE F00D          	movff	postinc2,??_fputc
  2057  000E1A  CFDD F00E          	movff	postdec2,??_fputc+1
  2058  000E1E  C00B  FFD9         	movff	fputc@fp,fsr2l
  2059  000E22  C00C  FFDA         	movff	fputc@fp+1,fsr2h
  2060  000E26  CFDE F00F          	movff	postinc2,??_fputc+2
  2061  000E2A  CFDD F010          	movff	postdec2,??_fputc+3
  2062  000E2E  500D               	movf	??_fputc,w,c
  2063  000E30  240F               	addwf	??_fputc+2,w,c
  2064  000E32  6ED9               	movwf	fsr2l,c
  2065  000E34  500E               	movf	??_fputc+1,w,c
  2066  000E36  2010               	addwfc	??_fputc+3,w,c
  2067  000E38  6EDA               	movwf	fsr2h,c
  2068  000E3A  C009  FFDF         	movff	fputc@c,indf2
  2069  000E3E  EE20 F002          	lfsr	2,2
  2070  000E42  500B               	movf	fputc@fp,w,c
  2071  000E44  26D9               	addwf	fsr2l,f,c
  2072  000E46  500C               	movf	fputc@fp+1,w,c
  2073  000E48  22DA               	addwfc	fsr2h,f,c
  2074  000E4A  2ADE               	incf	postinc2,f,c
  2075  000E4C  0E00               	movlw	0
  2076  000E4E  22DD               	addwfc	postdec2,f,c
  2077  000E50  0012               	return		;funcret
  2078  000E52                     __end_of_fputc:
  2079                           	opt callstack 0
  2080                           
  2081 ;; *************** function _putch *****************
  2082 ;; Defined at:
  2083 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  c               1    wreg     unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  c               1    0[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  1    wreg      void 
  2090 ;; Registers used:
  2091 ;;		wreg
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2097 ;;      Params:         0       0       0       0
  2098 ;;      Locals:         0       0       0       0
  2099 ;;      Temps:          0       0       0       0
  2100 ;;      Totals:         0       0       0       0
  2101 ;;Total ram usage:        0 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    3
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_fputc
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text9
  2112  001600                     __ptext9:
  2113                           	opt callstack 0
  2114  001600                     _putch:
  2115                           	opt callstack 20
  2116                           
  2117                           ;incstack = 0
  2118  001600  0012               	return		;funcret
  2119  001602                     __end_of_putch:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function ___lomod *****************
  2123 ;; Defined at:
  2124 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  dividend        8    8[COMRAM] unsigned long long 
  2127 ;;  divisor         8   16[COMRAM] unsigned long long 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  counter         1   24[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  8    8[COMRAM] unsigned long long 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2139 ;;      Params:        16       0       0       0
  2140 ;;      Locals:         1       0       0       0
  2141 ;;      Temps:          0       0       0       0
  2142 ;;      Totals:        17       0       0       0
  2143 ;;Total ram usage:       17 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    3
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_utoa
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text10
  2154  000D04                     __ptext10:
  2155                           	opt callstack 0
  2156  000D04                     ___lomod:
  2157                           	opt callstack 23
  2158                           
  2159                           ;incstack = 0
  2160  000D04  5011               	movf	___lomod@divisor,w,c
  2161  000D06  1012               	iorwf	___lomod@divisor+1,w,c
  2162  000D08  1013               	iorwf	___lomod@divisor+2,w,c
  2163  000D0A  1014               	iorwf	___lomod@divisor+3,w,c
  2164  000D0C  1015               	iorwf	___lomod@divisor+4,w,c
  2165  000D0E  1016               	iorwf	___lomod@divisor+5,w,c
  2166  000D10  1017               	iorwf	___lomod@divisor+6,w,c
  2167  000D12  1018               	iorwf	___lomod@divisor+7,w,c
  2168  000D14  B4D8               	btfsc	status,2,c
  2169  000D16  D03C               	goto	l816
  2170  000D18  0E01               	movlw	1
  2171  000D1A  6E19               	movwf	___lomod@counter,c
  2172  000D1C  D00A               	goto	l2511
  2173  000D1E                     l2509:
  2174  000D1E  90D8               	bcf	status,0,c
  2175  000D20  3611               	rlcf	___lomod@divisor,f,c
  2176  000D22  3612               	rlcf	___lomod@divisor+1,f,c
  2177  000D24  3613               	rlcf	___lomod@divisor+2,f,c
  2178  000D26  3614               	rlcf	___lomod@divisor+3,f,c
  2179  000D28  3615               	rlcf	___lomod@divisor+4,f,c
  2180  000D2A  3616               	rlcf	___lomod@divisor+5,f,c
  2181  000D2C  3617               	rlcf	___lomod@divisor+6,f,c
  2182  000D2E  3618               	rlcf	___lomod@divisor+7,f,c
  2183  000D30  2A19               	incf	___lomod@counter,f,c
  2184  000D32                     l2511:
  2185  000D32  AE18               	btfss	___lomod@divisor+7,7,c
  2186  000D34  D7F4               	goto	l2509
  2187  000D36                     u2000:
  2188  000D36  5011               	movf	___lomod@divisor,w,c
  2189  000D38  5C09               	subwf	___lomod@dividend,w,c
  2190  000D3A  5012               	movf	___lomod@divisor+1,w,c
  2191  000D3C  580A               	subwfb	___lomod@dividend+1,w,c
  2192  000D3E  5013               	movf	___lomod@divisor+2,w,c
  2193  000D40  580B               	subwfb	___lomod@dividend+2,w,c
  2194  000D42  5014               	movf	___lomod@divisor+3,w,c
  2195  000D44  580C               	subwfb	___lomod@dividend+3,w,c
  2196  000D46  5015               	movf	___lomod@divisor+4,w,c
  2197  000D48  580D               	subwfb	___lomod@dividend+4,w,c
  2198  000D4A  5016               	movf	___lomod@divisor+5,w,c
  2199  000D4C  580E               	subwfb	___lomod@dividend+5,w,c
  2200  000D4E  5017               	movf	___lomod@divisor+6,w,c
  2201  000D50  580F               	subwfb	___lomod@dividend+6,w,c
  2202  000D52  5018               	movf	___lomod@divisor+7,w,c
  2203  000D54  5810               	subwfb	___lomod@dividend+7,w,c
  2204  000D56  A0D8               	btfss	status,0,c
  2205  000D58  D010               	goto	l2517
  2206  000D5A  5011               	movf	___lomod@divisor,w,c
  2207  000D5C  5E09               	subwf	___lomod@dividend,f,c
  2208  000D5E  5012               	movf	___lomod@divisor+1,w,c
  2209  000D60  5A0A               	subwfb	___lomod@dividend+1,f,c
  2210  000D62  5013               	movf	___lomod@divisor+2,w,c
  2211  000D64  5A0B               	subwfb	___lomod@dividend+2,f,c
  2212  000D66  5014               	movf	___lomod@divisor+3,w,c
  2213  000D68  5A0C               	subwfb	___lomod@dividend+3,f,c
  2214  000D6A  5015               	movf	___lomod@divisor+4,w,c
  2215  000D6C  5A0D               	subwfb	___lomod@dividend+4,f,c
  2216  000D6E  5016               	movf	___lomod@divisor+5,w,c
  2217  000D70  5A0E               	subwfb	___lomod@dividend+5,f,c
  2218  000D72  5017               	movf	___lomod@divisor+6,w,c
  2219  000D74  5A0F               	subwfb	___lomod@dividend+6,f,c
  2220  000D76  5018               	movf	___lomod@divisor+7,w,c
  2221  000D78  5A10               	subwfb	___lomod@dividend+7,f,c
  2222  000D7A                     l2517:
  2223  000D7A  90D8               	bcf	status,0,c
  2224  000D7C  3218               	rrcf	___lomod@divisor+7,f,c
  2225  000D7E  3217               	rrcf	___lomod@divisor+6,f,c
  2226  000D80  3216               	rrcf	___lomod@divisor+5,f,c
  2227  000D82  3215               	rrcf	___lomod@divisor+4,f,c
  2228  000D84  3214               	rrcf	___lomod@divisor+3,f,c
  2229  000D86  3213               	rrcf	___lomod@divisor+2,f,c
  2230  000D88  3212               	rrcf	___lomod@divisor+1,f,c
  2231  000D8A  3211               	rrcf	___lomod@divisor,f,c
  2232  000D8C  2E19               	decfsz	___lomod@counter,f,c
  2233  000D8E  D7D3               	goto	u2000
  2234  000D90                     l816:
  2235  000D90  C009  F009         	movff	___lomod@dividend,?___lomod
  2236  000D94  C00A  F00A         	movff	___lomod@dividend+1,?___lomod+1
  2237  000D98  C00B  F00B         	movff	___lomod@dividend+2,?___lomod+2
  2238  000D9C  C00C  F00C         	movff	___lomod@dividend+3,?___lomod+3
  2239  000DA0  C00D  F00D         	movff	___lomod@dividend+4,?___lomod+4
  2240  000DA4  C00E  F00E         	movff	___lomod@dividend+5,?___lomod+5
  2241  000DA8  C00F  F00F         	movff	___lomod@dividend+6,?___lomod+6
  2242  000DAC  C010  F010         	movff	___lomod@dividend+7,?___lomod+7
  2243  000DB0  0012               	return		;funcret
  2244  000DB2                     __end_of___lomod:
  2245                           	opt callstack 0
  2246                           
  2247 ;; *************** function ___lodiv *****************
  2248 ;; Defined at:
  2249 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  dividend        8    8[COMRAM] unsigned long long 
  2252 ;;  divisor         8   16[COMRAM] unsigned long long 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  quotient        8   24[COMRAM] unsigned long long 
  2255 ;;  counter         1   32[COMRAM] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  8    8[COMRAM] unsigned long long 
  2258 ;; Registers used:
  2259 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2265 ;;      Params:        16       0       0       0
  2266 ;;      Locals:         9       0       0       0
  2267 ;;      Temps:          0       0       0       0
  2268 ;;      Totals:        25       0       0       0
  2269 ;;Total ram usage:       25 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    3
  2272 ;; This function calls:
  2273 ;;		Nothing
  2274 ;; This function is called by:
  2275 ;;		_utoa
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text11
  2280  000B6E                     __ptext11:
  2281                           	opt callstack 0
  2282  000B6E                     ___lodiv:
  2283                           	opt callstack 23
  2284                           
  2285                           ;incstack = 0
  2286  000B6E  EE20  F019         	lfsr	2,___lodiv@quotient
  2287  000B72  0E07               	movlw	7
  2288  000B74                     u1951:
  2289  000B74  6ADE               	clrf	postinc2,c
  2290  000B76  06E8               	decf	wreg,f,c
  2291  000B78  E2FD               	bc	u1951
  2292  000B7A  5011               	movf	___lodiv@divisor,w,c
  2293  000B7C  1012               	iorwf	___lodiv@divisor+1,w,c
  2294  000B7E  1013               	iorwf	___lodiv@divisor+2,w,c
  2295  000B80  1014               	iorwf	___lodiv@divisor+3,w,c
  2296  000B82  1015               	iorwf	___lodiv@divisor+4,w,c
  2297  000B84  1016               	iorwf	___lodiv@divisor+5,w,c
  2298  000B86  1017               	iorwf	___lodiv@divisor+6,w,c
  2299  000B88  1018               	iorwf	___lodiv@divisor+7,w,c
  2300  000B8A  B4D8               	btfsc	status,2,c
  2301  000B8C  D046               	goto	l806
  2302  000B8E  0E01               	movlw	1
  2303  000B90  6E21               	movwf	___lodiv@counter,c
  2304  000B92  D00A               	goto	l2491
  2305  000B94                     l2489:
  2306  000B94  90D8               	bcf	status,0,c
  2307  000B96  3611               	rlcf	___lodiv@divisor,f,c
  2308  000B98  3612               	rlcf	___lodiv@divisor+1,f,c
  2309  000B9A  3613               	rlcf	___lodiv@divisor+2,f,c
  2310  000B9C  3614               	rlcf	___lodiv@divisor+3,f,c
  2311  000B9E  3615               	rlcf	___lodiv@divisor+4,f,c
  2312  000BA0  3616               	rlcf	___lodiv@divisor+5,f,c
  2313  000BA2  3617               	rlcf	___lodiv@divisor+6,f,c
  2314  000BA4  3618               	rlcf	___lodiv@divisor+7,f,c
  2315  000BA6  2A21               	incf	___lodiv@counter,f,c
  2316  000BA8                     l2491:
  2317  000BA8  AE18               	btfss	___lodiv@divisor+7,7,c
  2318  000BAA  D7F4               	goto	l2489
  2319  000BAC                     u1970:
  2320  000BAC  90D8               	bcf	status,0,c
  2321  000BAE  3619               	rlcf	___lodiv@quotient,f,c
  2322  000BB0  361A               	rlcf	___lodiv@quotient+1,f,c
  2323  000BB2  361B               	rlcf	___lodiv@quotient+2,f,c
  2324  000BB4  361C               	rlcf	___lodiv@quotient+3,f,c
  2325  000BB6  361D               	rlcf	___lodiv@quotient+4,f,c
  2326  000BB8  361E               	rlcf	___lodiv@quotient+5,f,c
  2327  000BBA  361F               	rlcf	___lodiv@quotient+6,f,c
  2328  000BBC  3620               	rlcf	___lodiv@quotient+7,f,c
  2329  000BBE  5011               	movf	___lodiv@divisor,w,c
  2330  000BC0  5C09               	subwf	___lodiv@dividend,w,c
  2331  000BC2  5012               	movf	___lodiv@divisor+1,w,c
  2332  000BC4  580A               	subwfb	___lodiv@dividend+1,w,c
  2333  000BC6  5013               	movf	___lodiv@divisor+2,w,c
  2334  000BC8  580B               	subwfb	___lodiv@dividend+2,w,c
  2335  000BCA  5014               	movf	___lodiv@divisor+3,w,c
  2336  000BCC  580C               	subwfb	___lodiv@dividend+3,w,c
  2337  000BCE  5015               	movf	___lodiv@divisor+4,w,c
  2338  000BD0  580D               	subwfb	___lodiv@dividend+4,w,c
  2339  000BD2  5016               	movf	___lodiv@divisor+5,w,c
  2340  000BD4  580E               	subwfb	___lodiv@dividend+5,w,c
  2341  000BD6  5017               	movf	___lodiv@divisor+6,w,c
  2342  000BD8  580F               	subwfb	___lodiv@dividend+6,w,c
  2343  000BDA  5018               	movf	___lodiv@divisor+7,w,c
  2344  000BDC  5810               	subwfb	___lodiv@dividend+7,w,c
  2345  000BDE  A0D8               	btfss	status,0,c
  2346  000BE0  D011               	goto	l2501
  2347  000BE2  5011               	movf	___lodiv@divisor,w,c
  2348  000BE4  5E09               	subwf	___lodiv@dividend,f,c
  2349  000BE6  5012               	movf	___lodiv@divisor+1,w,c
  2350  000BE8  5A0A               	subwfb	___lodiv@dividend+1,f,c
  2351  000BEA  5013               	movf	___lodiv@divisor+2,w,c
  2352  000BEC  5A0B               	subwfb	___lodiv@dividend+2,f,c
  2353  000BEE  5014               	movf	___lodiv@divisor+3,w,c
  2354  000BF0  5A0C               	subwfb	___lodiv@dividend+3,f,c
  2355  000BF2  5015               	movf	___lodiv@divisor+4,w,c
  2356  000BF4  5A0D               	subwfb	___lodiv@dividend+4,f,c
  2357  000BF6  5016               	movf	___lodiv@divisor+5,w,c
  2358  000BF8  5A0E               	subwfb	___lodiv@dividend+5,f,c
  2359  000BFA  5017               	movf	___lodiv@divisor+6,w,c
  2360  000BFC  5A0F               	subwfb	___lodiv@dividend+6,f,c
  2361  000BFE  5018               	movf	___lodiv@divisor+7,w,c
  2362  000C00  5A10               	subwfb	___lodiv@dividend+7,f,c
  2363  000C02  8019               	bsf	___lodiv@quotient,0,c
  2364  000C04                     l2501:
  2365  000C04  90D8               	bcf	status,0,c
  2366  000C06  3218               	rrcf	___lodiv@divisor+7,f,c
  2367  000C08  3217               	rrcf	___lodiv@divisor+6,f,c
  2368  000C0A  3216               	rrcf	___lodiv@divisor+5,f,c
  2369  000C0C  3215               	rrcf	___lodiv@divisor+4,f,c
  2370  000C0E  3214               	rrcf	___lodiv@divisor+3,f,c
  2371  000C10  3213               	rrcf	___lodiv@divisor+2,f,c
  2372  000C12  3212               	rrcf	___lodiv@divisor+1,f,c
  2373  000C14  3211               	rrcf	___lodiv@divisor,f,c
  2374  000C16  2E21               	decfsz	___lodiv@counter,f,c
  2375  000C18  D7C9               	goto	u1970
  2376  000C1A                     l806:
  2377  000C1A  C019  F009         	movff	___lodiv@quotient,?___lodiv
  2378  000C1E  C01A  F00A         	movff	___lodiv@quotient+1,?___lodiv+1
  2379  000C22  C01B  F00B         	movff	___lodiv@quotient+2,?___lodiv+2
  2380  000C26  C01C  F00C         	movff	___lodiv@quotient+3,?___lodiv+3
  2381  000C2A  C01D  F00D         	movff	___lodiv@quotient+4,?___lodiv+4
  2382  000C2E  C01E  F00E         	movff	___lodiv@quotient+5,?___lodiv+5
  2383  000C32  C01F  F00F         	movff	___lodiv@quotient+6,?___lodiv+6
  2384  000C36  C020  F010         	movff	___lodiv@quotient+7,?___lodiv+7
  2385  000C3A  0012               	return		;funcret
  2386  000C3C                     __end_of___lodiv:
  2387                           	opt callstack 0
  2388                           
  2389 ;; *************** function _setup *****************
  2390 ;; Defined at:
  2391 ;;		line 38 in file "main.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2405 ;;      Params:         0       0       0       0
  2406 ;;      Locals:         0       0       0       0
  2407 ;;      Temps:          0       0       0       0
  2408 ;;      Totals:         0       0       0       0
  2409 ;;Total ram usage:        0 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    7
  2412 ;; This function calls:
  2413 ;;		_initPWM
  2414 ;;		_init_LCD
  2415 ;;		_init_RFID
  2416 ;;		_init_sensors
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text12
  2423  0014B8                     __ptext12:
  2424                           	opt callstack 0
  2425  0014B8                     _setup:
  2426                           	opt callstack 23
  2427                           
  2428                           ;main.c: 41:     OSCCON = 0x72;
  2429                           
  2430                           ;incstack = 0
  2431  0014B8  0E72               	movlw	114
  2432  0014BA  6ED3               	movwf	4051,c	;volatile
  2433  0014BC                     l67:
  2434  0014BC  A4D3               	btfss	4051,2,c	;volatile
  2435  0014BE  D7FE               	goto	l67
  2436                           
  2437                           ;main.c: 43:     INTCONbits.GIEH = 1;
  2438  0014C0  8EF2               	bsf	4082,7,c	;volatile
  2439                           
  2440                           ;main.c: 44:     INTCONbits.GIEL = 1;
  2441  0014C2  8CF2               	bsf	4082,6,c	;volatile
  2442                           
  2443                           ;main.c: 45:     RCONbits.IPEN=1;
  2444  0014C4  8ED0               	bsf	4048,7,c	;volatile
  2445                           
  2446                           ;main.c: 48:     init_LCD();
  2447  0014C6  EC1E  F006         	call	_init_LCD	;wreg free
  2448                           
  2449                           ;main.c: 49:     init_RFID();
  2450  0014CA  ECD2  F00A         	call	_init_RFID	;wreg free
  2451                           
  2452                           ;main.c: 50:     init_sensors();
  2453  0014CE  ECC5  F00A         	call	_init_sensors	;wreg free
  2454                           
  2455                           ;main.c: 51:     initPWM(199);
  2456  0014D2  0E00               	movlw	0
  2457  0014D4  6E0A               	movwf	initPWM@PWMperiod+1,c
  2458  0014D6  0EC7               	movlw	199
  2459  0014D8  6E09               	movwf	initPWM@PWMperiod,c
  2460  0014DA  ECDF  F00A         	call	_initPWM	;wreg free
  2461                           
  2462                           ;main.c: 53:     TRISBbits.RB0 = 0;
  2463  0014DE  9093               	bcf	3987,0,c	;volatile
  2464                           
  2465                           ;main.c: 54:     TRISBbits.RB2 = 0;
  2466  0014E0  9493               	bcf	3987,2,c	;volatile
  2467                           
  2468                           ;main.c: 55:     TRISDbits.RD2 = 1;
  2469  0014E2  8495               	bsf	3989,2,c	;volatile
  2470  0014E4  0012               	return		;funcret
  2471  0014E6                     __end_of_setup:
  2472                           	opt callstack 0
  2473                           
  2474 ;; *************** function _init_sensors *****************
  2475 ;; Defined at:
  2476 ;;		line 14 in file "signal_processing.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2490 ;;      Params:         0       0       0       0
  2491 ;;      Locals:         0       0       0       0
  2492 ;;      Temps:          0       0       0       0
  2493 ;;      Totals:         0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    3
  2497 ;; This function calls:
  2498 ;;		Nothing
  2499 ;; This function is called by:
  2500 ;;		_setup
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text13
  2505  00158A                     __ptext13:
  2506                           	opt callstack 0
  2507  00158A                     _init_sensors:
  2508                           	opt callstack 26
  2509                           
  2510                           ;signal_processing.c: 16:     T5CON =0b00000001;
  2511                           
  2512                           ;incstack = 0
  2513  00158A  0E01               	movlw	1
  2514  00158C  6EB7               	movwf	4023,c	;volatile
  2515                           
  2516                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2517  00158E  8492               	bsf	3986,2,c	;volatile
  2518                           
  2519                           ;signal_processing.c: 18:     TRISAbits.RA3 = 1;
  2520  001590  8692               	bsf	3986,3,c	;volatile
  2521                           
  2522                           ;signal_processing.c: 21:     ANSEL0 = 0;
  2523  001592  0E00               	movlw	0
  2524  001594  6EB8               	movwf	4024,c	;volatile
  2525                           
  2526                           ;signal_processing.c: 22:     ANSEL1 = 0;
  2527  001596  0E00               	movlw	0
  2528  001598  6EB9               	movwf	4025,c	;volatile
  2529                           
  2530                           ;signal_processing.c: 25:     CAP1CON = 0b01000111;
  2531  00159A  0E47               	movlw	71
  2532  00159C  6E63               	movwf	3939,c	;volatile
  2533                           
  2534                           ;signal_processing.c: 26:     CAP2CON = 0b01000111;
  2535  00159E  0E47               	movlw	71
  2536  0015A0  6E62               	movwf	3938,c	;volatile
  2537  0015A2  0012               	return		;funcret
  2538  0015A4                     __end_of_init_sensors:
  2539                           	opt callstack 0
  2540                           
  2541 ;; *************** function _init_RFID *****************
  2542 ;; Defined at:
  2543 ;;		line 13 in file "RFID.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2557 ;;      Params:         0       0       0       0
  2558 ;;      Locals:         0       0       0       0
  2559 ;;      Temps:          0       0       0       0
  2560 ;;      Totals:         0       0       0       0
  2561 ;;Total ram usage:        0 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    3
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_setup
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text14
  2572  0015A4                     __ptext14:
  2573                           	opt callstack 0
  2574  0015A4                     _init_RFID:
  2575                           	opt callstack 26
  2576                           
  2577                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2578                           
  2579                           ;incstack = 0
  2580  0015A4  8E94               	bsf	3988,7,c	;volatile
  2581                           
  2582                           ;RFID.c: 19:     SPBRG = 203;
  2583  0015A6  0ECB               	movlw	203
  2584  0015A8  6EAF               	movwf	4015,c	;volatile
  2585                           
  2586                           ;RFID.c: 20:     SPBRGH = 0;
  2587  0015AA  0E00               	movlw	0
  2588  0015AC  6EB0               	movwf	4016,c	;volatile
  2589                           
  2590                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2591  0015AE  86AA               	bsf	4010,3,c	;volatile
  2592                           
  2593                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2594  0015B0  84AC               	bsf	4012,2,c	;volatile
  2595                           
  2596                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2597  0015B2  88AB               	bsf	4011,4,c	;volatile
  2598                           
  2599                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2600  0015B4  8EAB               	bsf	4011,7,c	;volatile
  2601                           
  2602                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2603  0015B6  8AAC               	bsf	4012,5,c	;volatile
  2604                           
  2605                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2606  0015B8  8A9D               	bsf	3997,5,c	;volatile
  2607                           
  2608                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2609  0015BA  8A9F               	bsf	3999,5,c	;volatile
  2610  0015BC  0012               	return		;funcret
  2611  0015BE                     __end_of_init_RFID:
  2612                           	opt callstack 0
  2613                           
  2614 ;; *************** function _init_LCD *****************
  2615 ;; Defined at:
  2616 ;;		line 56 in file "LCDIO.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;		None
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;		None
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2630 ;;      Params:         0       0       0       0
  2631 ;;      Locals:         0       0       0       0
  2632 ;;      Temps:          1       0       0       0
  2633 ;;      Totals:         1       0       0       0
  2634 ;;Total ram usage:        1 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    6
  2637 ;; This function calls:
  2638 ;;		_LCDout
  2639 ;;		_SendLCD
  2640 ;; This function is called by:
  2641 ;;		_setup
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text15
  2646  000C3C                     __ptext15:
  2647                           	opt callstack 0
  2648  000C3C                     _init_LCD:
  2649                           	opt callstack 23
  2650                           
  2651                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2652                           
  2653                           ;incstack = 0
  2654  000C3C  9094               	bcf	3988,0,c	;volatile
  2655                           
  2656                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2657  000C3E  9E92               	bcf	3986,7,c	;volatile
  2658                           
  2659                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2660  000C40  9694               	bcf	3988,3,c	;volatile
  2661                           
  2662                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2663  000C42  9095               	bcf	3989,0,c	;volatile
  2664                           
  2665                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2666  000C44  9295               	bcf	3989,1,c	;volatile
  2667                           
  2668                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2669  000C46  9C92               	bcf	3986,6,c	;volatile
  2670                           
  2671                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2672  000C48  908C               	bcf	3980,0,c	;volatile
  2673                           
  2674                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2675  000C4A  928C               	bcf	3980,1,c	;volatile
  2676                           
  2677                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2678  000C4C  968B               	bcf	3979,3,c	;volatile
  2679                           
  2680                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2681  000C4E  908B               	bcf	3979,0,c	;volatile
  2682                           
  2683                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2684  000C50  9C89               	bcf	3977,6,c	;volatile
  2685                           
  2686                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2687  000C52  9E89               	bcf	3977,7,c	;volatile
  2688                           
  2689                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2690  000C54  0E27               	movlw	39
  2691  000C56  6E0D               	movwf	??_init_LCD& (0+255),c
  2692  000C58  0EF5               	movlw	245
  2693  000C5A                     u2217:
  2694  000C5A  2EE8               	decfsz	wreg,f,c
  2695  000C5C  D7FE               	bra	u2217
  2696  000C5E  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2697  000C60  D7FC               	bra	u2217
  2698  000C62  F000               	nop	
  2699                           
  2700                           ;LCDIO.c: 76:  LCDout(0b0011);
  2701  000C64  0E03               	movlw	3
  2702  000C66  EC7B  F008         	call	_LCDout
  2703                           
  2704                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2705  000C6A  0E0D               	movlw	13
  2706  000C6C  6E0D               	movwf	??_init_LCD& (0+255),c
  2707  000C6E  0EFC               	movlw	252
  2708  000C70                     u2227:
  2709  000C70  2EE8               	decfsz	wreg,f,c
  2710  000C72  D7FE               	bra	u2227
  2711  000C74  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2712  000C76  D7FC               	bra	u2227
  2713                           
  2714                           ;LCDIO.c: 78:  LCDout(0b0011);
  2715  000C78  0E03               	movlw	3
  2716  000C7A  EC7B  F008         	call	_LCDout
  2717                           
  2718                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2719  000C7E  0E85               	movlw	133
  2720  000C80                     u2237:
  2721  000C80  2EE8               	decfsz	wreg,f,c
  2722  000C82  D7FE               	bra	u2237
  2723  000C84  F000               	nop	
  2724                           
  2725                           ;LCDIO.c: 80:  LCDout(0b0011);
  2726  000C86  0E03               	movlw	3
  2727  000C88  EC7B  F008         	call	_LCDout
  2728                           
  2729                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2730  000C8C  0E21               	movlw	33
  2731  000C8E                     u2247:
  2732  000C8E  2EE8               	decfsz	wreg,f,c
  2733  000C90  D7FE               	bra	u2247
  2734  000C92  F000               	nop	
  2735                           
  2736                           ;LCDIO.c: 82:  LCDout(0b0010);
  2737  000C94  0E02               	movlw	2
  2738  000C96  EC7B  F008         	call	_LCDout
  2739                           
  2740                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2741  000C9A  0E21               	movlw	33
  2742  000C9C                     u2257:
  2743  000C9C  2EE8               	decfsz	wreg,f,c
  2744  000C9E  D7FE               	bra	u2257
  2745  000CA0  F000               	nop	
  2746                           
  2747                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2748  000CA2  0E00               	movlw	0
  2749  000CA4  6E0B               	movwf	SendLCD@type,c
  2750  000CA6  0E28               	movlw	40
  2751  000CA8  EC44  F00A         	call	_SendLCD
  2752                           
  2753                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2754  000CAC  0E21               	movlw	33
  2755  000CAE                     u2267:
  2756  000CAE  2EE8               	decfsz	wreg,f,c
  2757  000CB0  D7FE               	bra	u2267
  2758  000CB2  F000               	nop	
  2759                           
  2760                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2761  000CB4  0E00               	movlw	0
  2762  000CB6  6E0B               	movwf	SendLCD@type,c
  2763  000CB8  0E08               	movlw	8
  2764  000CBA  EC44  F00A         	call	_SendLCD
  2765                           
  2766                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2767  000CBE  0E21               	movlw	33
  2768  000CC0                     u2277:
  2769  000CC0  2EE8               	decfsz	wreg,f,c
  2770  000CC2  D7FE               	bra	u2277
  2771  000CC4  F000               	nop	
  2772                           
  2773                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2774  000CC6  0E00               	movlw	0
  2775  000CC8  6E0B               	movwf	SendLCD@type,c
  2776  000CCA  0E01               	movlw	1
  2777  000CCC  EC44  F00A         	call	_SendLCD
  2778                           
  2779                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2780  000CD0  0E0D               	movlw	13
  2781  000CD2  6E0D               	movwf	??_init_LCD& (0+255),c
  2782  000CD4  0EFC               	movlw	252
  2783  000CD6                     u2287:
  2784  000CD6  2EE8               	decfsz	wreg,f,c
  2785  000CD8  D7FE               	bra	u2287
  2786  000CDA  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2787  000CDC  D7FC               	bra	u2287
  2788                           
  2789                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2790  000CDE  0E00               	movlw	0
  2791  000CE0  6E0B               	movwf	SendLCD@type,c
  2792  000CE2  0E06               	movlw	6
  2793  000CE4  EC44  F00A         	call	_SendLCD
  2794                           
  2795                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2796  000CE8  0E21               	movlw	33
  2797  000CEA                     u2297:
  2798  000CEA  2EE8               	decfsz	wreg,f,c
  2799  000CEC  D7FE               	bra	u2297
  2800  000CEE  F000               	nop	
  2801                           
  2802                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2803  000CF0  0E00               	movlw	0
  2804  000CF2  6E0B               	movwf	SendLCD@type,c
  2805  000CF4  0E0C               	movlw	12
  2806  000CF6  EC44  F00A         	call	_SendLCD
  2807                           
  2808                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2809  000CFA  0E21               	movlw	33
  2810  000CFC                     u2307:
  2811  000CFC  2EE8               	decfsz	wreg,f,c
  2812  000CFE  D7FE               	bra	u2307
  2813  000D00  F000               	nop	
  2814  000D02  0012               	return		;funcret
  2815  000D04                     __end_of_init_LCD:
  2816                           	opt callstack 0
  2817                           
  2818 ;; *************** function _initPWM *****************
  2819 ;; Defined at:
  2820 ;;		line 5 in file "dc_motor.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  PWMperiod       2    8[COMRAM] int 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2834 ;;      Params:         2       0       0       0
  2835 ;;      Locals:         0       0       0       0
  2836 ;;      Temps:          0       0       0       0
  2837 ;;      Totals:         2       0       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    3
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_setup
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text16
  2849  0015BE                     __ptext16:
  2850                           	opt callstack 0
  2851  0015BE                     _initPWM:
  2852                           	opt callstack 26
  2853                           
  2854                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2855                           
  2856                           ;incstack = 0
  2857  0015BE  0E00               	movlw	0
  2858  0015C0  6E7F               	movwf	3967,c	;volatile
  2859                           
  2860                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2861  0015C2  0E80               	movlw	128
  2862  0015C4  6E7E               	movwf	3966,c	;volatile
  2863                           
  2864                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2865  0015C6  0E6F               	movlw	111
  2866  0015C8  6E6F               	movwf	3951,c	;volatile
  2867                           
  2868                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2869  0015CA  0E00               	movlw	0
  2870  0015CC  6E6E               	movwf	3950,c	;volatile
  2871                           
  2872                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2873  0015CE  C009  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2874                           
  2875                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2876  0015D2  500A               	movf	initPWM@PWMperiod+1,w,c
  2877  0015D4  6E7A               	movwf	3962,c	;volatile
  2878  0015D6  0012               	return		;funcret
  2879  0015D8                     __end_of_initPWM:
  2880                           	opt callstack 0
  2881                           
  2882 ;; *************** function _process_signal *****************
  2883 ;; Defined at:
  2884 ;;		line 32 in file "signal_processing.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  S               2   22[COMRAM] PTR struct Sensor
  2887 ;;		 -> main@sensorR(4), main@sensorL(4), 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  smoothing_co    2    0        int 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2899 ;;      Params:         2       0       0       0
  2900 ;;      Locals:         2       0       0       0
  2901 ;;      Temps:          0       0       0       0
  2902 ;;      Totals:         4       0       0       0
  2903 ;;Total ram usage:        4 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    4
  2906 ;; This function calls:
  2907 ;;		___awdiv
  2908 ;;		___wmul
  2909 ;; This function is called by:
  2910 ;;		_main
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           	psect	text17
  2915  000EE8                     __ptext17:
  2916                           	opt callstack 0
  2917  000EE8                     _process_signal:
  2918                           	opt callstack 26
  2919                           
  2920                           ;signal_processing.c: 36:     S->smoothed_signal *= (100-smoothing_constant)/100;
  2921                           
  2922                           ;incstack = 0
  2923  000EE8  EE20 F002          	lfsr	2,2
  2924  000EEC  5017               	movf	process_signal@S,w,c
  2925  000EEE  26D9               	addwf	fsr2l,f,c
  2926  000EF0  5018               	movf	process_signal@S+1,w,c
  2927  000EF2  22DA               	addwfc	fsr2h,f,c
  2928  000EF4  CFDE F011          	movff	postinc2,___wmul@multiplier
  2929  000EF8  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  2930  000EFC  0E00               	movlw	0
  2931  000EFE  6E0C               	movwf	___awdiv@divisor+1,c
  2932  000F00  0E64               	movlw	100
  2933  000F02  6E0B               	movwf	___awdiv@divisor,c
  2934  000F04  0E00               	movlw	0
  2935  000F06  6E0A               	movwf	___awdiv@dividend+1,c
  2936  000F08  0E5A               	movlw	90
  2937  000F0A  6E09               	movwf	___awdiv@dividend,c
  2938  000F0C  ECBB  F007         	call	___awdiv	;wreg free
  2939  000F10  C009  F013         	movff	?___awdiv,___wmul@multiplicand
  2940  000F14  C00A  F014         	movff	?___awdiv+1,___wmul@multiplicand+1
  2941  000F18  ECB2  F00A         	call	___wmul	;wreg free
  2942  000F1C  EE20 F002          	lfsr	2,2
  2943  000F20  5017               	movf	process_signal@S,w,c
  2944  000F22  26D9               	addwf	fsr2l,f,c
  2945  000F24  5018               	movf	process_signal@S+1,w,c
  2946  000F26  22DA               	addwfc	fsr2h,f,c
  2947  000F28  C011  FFDE         	movff	?___wmul,postinc2
  2948  000F2C  C012  FFDD         	movff	?___wmul+1,postdec2
  2949                           
  2950                           ;signal_processing.c: 37:     S->smoothed_signal += (S->raw_data * smoothing_constant)/1
      +                          00;
  2951  000F30  C017  FFD9         	movff	process_signal@S,fsr2l
  2952  000F34  C018  FFDA         	movff	process_signal@S+1,fsr2h
  2953  000F38  CFDE F011          	movff	postinc2,___wmul@multiplier
  2954  000F3C  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  2955  000F40  0E00               	movlw	0
  2956  000F42  6E14               	movwf	___wmul@multiplicand+1,c
  2957  000F44  0E0A               	movlw	10
  2958  000F46  6E13               	movwf	___wmul@multiplicand,c
  2959  000F48  ECB2  F00A         	call	___wmul	;wreg free
  2960  000F4C  C011  F009         	movff	?___wmul,___awdiv@dividend
  2961  000F50  C012  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  2962  000F54  0E00               	movlw	0
  2963  000F56  6E0C               	movwf	___awdiv@divisor+1,c
  2964  000F58  0E64               	movlw	100
  2965  000F5A  6E0B               	movwf	___awdiv@divisor,c
  2966  000F5C  ECBB  F007         	call	___awdiv	;wreg free
  2967  000F60  EE20 F002          	lfsr	2,2
  2968  000F64  5017               	movf	process_signal@S,w,c
  2969  000F66  26D9               	addwf	fsr2l,f,c
  2970  000F68  5018               	movf	process_signal@S+1,w,c
  2971  000F6A  22DA               	addwfc	fsr2h,f,c
  2972  000F6C  5009               	movf	?___awdiv,w,c
  2973  000F6E  26DE               	addwf	postinc2,f,c
  2974  000F70  500A               	movf	?___awdiv+1,w,c
  2975  000F72  22DD               	addwfc	postdec2,f,c
  2976  000F74  0012               	return		;funcret
  2977  000F76                     __end_of_process_signal:
  2978                           	opt callstack 0
  2979                           
  2980 ;; *************** function _moveToBeacon *****************
  2981 ;; Defined at:
  2982 ;;		line 117 in file "dc_motor.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  beacon_locat    1    wreg     unsigned char 
  2985 ;;  prev_locatio    1   38[COMRAM] unsigned char 
  2986 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  2987 ;;		 -> main@motorL(9), 
  2988 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  2989 ;;		 -> main@motorR(9), 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  beacon_locat    1   43[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3001 ;;      Params:         5       0       0       0
  3002 ;;      Locals:         1       0       0       0
  3003 ;;      Temps:          0       0       0       0
  3004 ;;      Totals:         6       0       0       0
  3005 ;;Total ram usage:        6 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    6
  3008 ;; This function calls:
  3009 ;;		_fullSpeedAhead
  3010 ;;		_turnLeft
  3011 ;;		_turnRight
  3012 ;; This function is called by:
  3013 ;;		_main
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text18
  3018  0011DE                     __ptext18:
  3019                           	opt callstack 0
  3020  0011DE                     _moveToBeacon:
  3021                           	opt callstack 24
  3022                           
  3023                           ;incstack = 0
  3024                           ;moveToBeacon@beacon_location stored from wreg
  3025  0011DE  6E2C               	movwf	moveToBeacon@beacon_location,c
  3026                           
  3027                           ;dc_motor.c: 126:     if(beacon_location == 1)
  3028  0011E0  042C               	decf	moveToBeacon@beacon_location,w,c
  3029  0011E2  A4D8               	btfss	status,2,c
  3030  0011E4  D00E               	goto	l2251
  3031                           
  3032                           ;dc_motor.c: 127:     {;dc_motor.c: 128:         if(prev_location != beacon_location)
  3033  0011E6  502C               	movf	moveToBeacon@beacon_location,w,c
  3034  0011E8  1827               	xorwf	moveToBeacon@prev_location,w,c
  3035  0011EA  B4D8               	btfsc	status,2,c
  3036  0011EC  D00A               	goto	l2251
  3037                           
  3038                           ;dc_motor.c: 129:         {;dc_motor.c: 130:         turnLeft(mL, mR);
  3039  0011EE  C028  F020         	movff	moveToBeacon@mL,turnLeft@mL
  3040  0011F2  C029  F021         	movff	moveToBeacon@mL+1,turnLeft@mL+1
  3041  0011F6  C02A  F022         	movff	moveToBeacon@mR,turnLeft@mR
  3042  0011FA  C02B  F023         	movff	moveToBeacon@mR+1,turnLeft@mR+1
  3043  0011FE  EC3C  F008         	call	_turnLeft	;wreg free
  3044  001202                     l2251:
  3045                           
  3046                           ;dc_motor.c: 135:     if(beacon_location == 2)
  3047  001202  0E02               	movlw	2
  3048  001204  182C               	xorwf	moveToBeacon@beacon_location,w,c
  3049  001206  A4D8               	btfss	status,2,c
  3050  001208  D00E               	goto	l2257
  3051                           
  3052                           ;dc_motor.c: 136:     {;dc_motor.c: 137:         if(prev_location != beacon_location)
  3053  00120A  502C               	movf	moveToBeacon@beacon_location,w,c
  3054  00120C  1827               	xorwf	moveToBeacon@prev_location,w,c
  3055  00120E  B4D8               	btfsc	status,2,c
  3056  001210  D00A               	goto	l2257
  3057                           
  3058                           ;dc_motor.c: 138:         {;dc_motor.c: 139:         turnRight(mL, mR);
  3059  001212  C028  F020         	movff	moveToBeacon@mL,turnRight@mL
  3060  001216  C029  F021         	movff	moveToBeacon@mL+1,turnRight@mL+1
  3061  00121A  C02A  F022         	movff	moveToBeacon@mR,turnRight@mR
  3062  00121E  C02B  F023         	movff	moveToBeacon@mR+1,turnRight@mR+1
  3063  001222  ECFD  F007         	call	_turnRight	;wreg free
  3064  001226                     l2257:
  3065                           
  3066                           ;dc_motor.c: 144:     if(beacon_location == 3)
  3067  001226  0E03               	movlw	3
  3068  001228  182C               	xorwf	moveToBeacon@beacon_location,w,c
  3069  00122A  A4D8               	btfss	status,2,c
  3070  00122C  0012               	return	
  3071                           
  3072                           ;dc_motor.c: 145:     {;dc_motor.c: 146:         if(prev_location != beacon_location)
  3073  00122E  502C               	movf	moveToBeacon@beacon_location,w,c
  3074  001230  1827               	xorwf	moveToBeacon@prev_location,w,c
  3075  001232  B4D8               	btfsc	status,2,c
  3076  001234  0012               	return	
  3077                           
  3078                           ;dc_motor.c: 147:         {;dc_motor.c: 148:         fullSpeedAhead(mL,mR);
  3079  001236  C028  F020         	movff	moveToBeacon@mL,fullSpeedAhead@mL
  3080  00123A  C029  F021         	movff	moveToBeacon@mL+1,fullSpeedAhead@mL+1
  3081  00123E  C02A  F022         	movff	moveToBeacon@mR,fullSpeedAhead@mR
  3082  001242  C02B  F023         	movff	moveToBeacon@mR+1,fullSpeedAhead@mR+1
  3083  001246  ECB7  F008         	call	_fullSpeedAhead	;wreg free
  3084  00124A  0012               	return		;funcret
  3085  00124C                     __end_of_moveToBeacon:
  3086                           	opt callstack 0
  3087                           
  3088 ;; *************** function _turnRight *****************
  3089 ;; Defined at:
  3090 ;;		line 86 in file "dc_motor.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3093 ;;		 -> main@motorL(9), 
  3094 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3095 ;;		 -> main@motorR(9), 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  i               2   36[COMRAM] int 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      void 
  3100 ;; Registers used:
  3101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3107 ;;      Params:         4       0       0       0
  3108 ;;      Locals:         2       0       0       0
  3109 ;;      Temps:          1       0       0       0
  3110 ;;      Totals:         7       0       0       0
  3111 ;;Total ram usage:        7 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    5
  3114 ;; This function calls:
  3115 ;;		_setMotorPWM
  3116 ;; This function is called by:
  3117 ;;		_moveToBeacon
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text19
  3122  000FFA                     __ptext19:
  3123                           	opt callstack 0
  3124  000FFA                     _turnRight:
  3125                           	opt callstack 24
  3126                           
  3127                           ;dc_motor.c: 86: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 87
      +                          : {;dc_motor.c: 89:     mL->direction = 1;
  3128                           
  3129                           ;incstack = 0
  3130  000FFA  EE20 F001          	lfsr	2,1
  3131  000FFE  5020               	movf	turnRight@mL,w,c
  3132  001000  26D9               	addwf	fsr2l,f,c
  3133  001002  5021               	movf	turnRight@mL+1,w,c
  3134  001004  22DA               	addwfc	fsr2h,f,c
  3135  001006  0E01               	movlw	1
  3136  001008  6EDF               	movwf	indf2,c
  3137                           
  3138                           ;dc_motor.c: 90:     mR->direction = 0;
  3139  00100A  EE20 F001          	lfsr	2,1
  3140  00100E  5022               	movf	turnRight@mR,w,c
  3141  001010  26D9               	addwf	fsr2l,f,c
  3142  001012  5023               	movf	turnRight@mR+1,w,c
  3143  001014  22DA               	addwfc	fsr2h,f,c
  3144  001016  0E00               	movlw	0
  3145  001018  6EDF               	movwf	indf2,c
  3146                           
  3147                           ;dc_motor.c: 92:     for(int i = 0; i<50;i++){
  3148  00101A  0E00               	movlw	0
  3149  00101C  6E26               	movwf	turnRight@i+1,c
  3150  00101E  0E00               	movlw	0
  3151  001020  6E25               	movwf	turnRight@i,c
  3152  001022                     l2107:
  3153                           
  3154                           ;dc_motor.c: 93:         mL->power = i;
  3155  001022  C020  FFD9         	movff	turnRight@mL,fsr2l
  3156  001026  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3157  00102A  C025  FFDF         	movff	turnRight@i,indf2
  3158                           
  3159                           ;dc_motor.c: 94:         mR->power = i;
  3160  00102E  C022  FFD9         	movff	turnRight@mR,fsr2l
  3161  001032  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3162  001036  C025  FFDF         	movff	turnRight@i,indf2
  3163                           
  3164                           ;dc_motor.c: 96:         setMotorPWM(mL);
  3165  00103A  C020  F017         	movff	turnRight@mL,setMotorPWM@m
  3166  00103E  C021  F018         	movff	turnRight@mL+1,setMotorPWM@m+1
  3167  001042  ECB0  F004         	call	_setMotorPWM	;wreg free
  3168                           
  3169                           ;dc_motor.c: 97:         setMotorPWM(mR);
  3170  001046  C022  F017         	movff	turnRight@mR,setMotorPWM@m
  3171  00104A  C023  F018         	movff	turnRight@mR+1,setMotorPWM@m+1
  3172  00104E  ECB0  F004         	call	_setMotorPWM	;wreg free
  3173                           
  3174                           ;dc_motor.c: 98:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3175  001052  0E03               	movlw	3
  3176  001054  6E24               	movwf	??_turnRight& (0+255),c
  3177  001056  0E98               	movlw	152
  3178  001058                     u2317:
  3179  001058  2EE8               	decfsz	wreg,f,c
  3180  00105A  D7FE               	bra	u2317
  3181  00105C  2E24               	decfsz	??_turnRight& (0+255),f,c
  3182  00105E  D7FC               	bra	u2317
  3183                           
  3184                           ;dc_motor.c: 99:     }
  3185  001060  4A25               	infsnz	turnRight@i,f,c
  3186  001062  2A26               	incf	turnRight@i+1,f,c
  3187  001064  BE26               	btfsc	turnRight@i+1,7,c
  3188  001066  D7DD               	goto	l2107
  3189  001068  5026               	movf	turnRight@i+1,w,c
  3190  00106A  E105               	bnz	u1370
  3191  00106C  0E32               	movlw	50
  3192  00106E  5C25               	subwf	turnRight@i,w,c
  3193  001070  B0D8               	btfsc	status,0,c
  3194  001072  0012               	return	
  3195  001074  D7D6               	goto	l2107
  3196  001076                     u1370:
  3197  001076  0012               	return		;funcret
  3198  001078                     __end_of_turnRight:
  3199                           	opt callstack 0
  3200                           
  3201 ;; *************** function _turnLeft *****************
  3202 ;; Defined at:
  3203 ;;		line 70 in file "dc_motor.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3206 ;;		 -> main@motorL(9), 
  3207 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3208 ;;		 -> main@motorR(9), 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  i               2   36[COMRAM] int 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3220 ;;      Params:         4       0       0       0
  3221 ;;      Locals:         2       0       0       0
  3222 ;;      Temps:          1       0       0       0
  3223 ;;      Totals:         7       0       0       0
  3224 ;;Total ram usage:        7 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    5
  3227 ;; This function calls:
  3228 ;;		_setMotorPWM
  3229 ;; This function is called by:
  3230 ;;		_moveToBeacon
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text20
  3235  001078                     __ptext20:
  3236                           	opt callstack 0
  3237  001078                     _turnLeft:
  3238                           	opt callstack 24
  3239                           
  3240                           ;dc_motor.c: 70: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 71:
      +                           {;dc_motor.c: 72:     mL->direction = 0;
  3241                           
  3242                           ;incstack = 0
  3243  001078  EE20 F001          	lfsr	2,1
  3244  00107C  5020               	movf	turnLeft@mL,w,c
  3245  00107E  26D9               	addwf	fsr2l,f,c
  3246  001080  5021               	movf	turnLeft@mL+1,w,c
  3247  001082  22DA               	addwfc	fsr2h,f,c
  3248  001084  0E00               	movlw	0
  3249  001086  6EDF               	movwf	indf2,c
  3250                           
  3251                           ;dc_motor.c: 73:     mR->direction = 1;
  3252  001088  EE20 F001          	lfsr	2,1
  3253  00108C  5022               	movf	turnLeft@mR,w,c
  3254  00108E  26D9               	addwf	fsr2l,f,c
  3255  001090  5023               	movf	turnLeft@mR+1,w,c
  3256  001092  22DA               	addwfc	fsr2h,f,c
  3257  001094  0E01               	movlw	1
  3258  001096  6EDF               	movwf	indf2,c
  3259                           
  3260                           ;dc_motor.c: 75:     for(int i = 0; i<50;i++){
  3261  001098  0E00               	movlw	0
  3262  00109A  6E26               	movwf	turnLeft@i+1,c
  3263  00109C  0E00               	movlw	0
  3264  00109E  6E25               	movwf	turnLeft@i,c
  3265  0010A0                     l2087:
  3266                           
  3267                           ;dc_motor.c: 76:         mL->power = i;
  3268  0010A0  C020  FFD9         	movff	turnLeft@mL,fsr2l
  3269  0010A4  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  3270  0010A8  C025  FFDF         	movff	turnLeft@i,indf2
  3271                           
  3272                           ;dc_motor.c: 77:         mR->power = i;
  3273  0010AC  C022  FFD9         	movff	turnLeft@mR,fsr2l
  3274  0010B0  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  3275  0010B4  C025  FFDF         	movff	turnLeft@i,indf2
  3276                           
  3277                           ;dc_motor.c: 79:         setMotorPWM(mL);
  3278  0010B8  C020  F017         	movff	turnLeft@mL,setMotorPWM@m
  3279  0010BC  C021  F018         	movff	turnLeft@mL+1,setMotorPWM@m+1
  3280  0010C0  ECB0  F004         	call	_setMotorPWM	;wreg free
  3281                           
  3282                           ;dc_motor.c: 80:         setMotorPWM(mR);
  3283  0010C4  C022  F017         	movff	turnLeft@mR,setMotorPWM@m
  3284  0010C8  C023  F018         	movff	turnLeft@mR+1,setMotorPWM@m+1
  3285  0010CC  ECB0  F004         	call	_setMotorPWM	;wreg free
  3286                           
  3287                           ;dc_motor.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3288  0010D0  0E03               	movlw	3
  3289  0010D2  6E24               	movwf	??_turnLeft& (0+255),c
  3290  0010D4  0E98               	movlw	152
  3291  0010D6                     u2327:
  3292  0010D6  2EE8               	decfsz	wreg,f,c
  3293  0010D8  D7FE               	bra	u2327
  3294  0010DA  2E24               	decfsz	??_turnLeft& (0+255),f,c
  3295  0010DC  D7FC               	bra	u2327
  3296                           
  3297                           ;dc_motor.c: 82:     }
  3298  0010DE  4A25               	infsnz	turnLeft@i,f,c
  3299  0010E0  2A26               	incf	turnLeft@i+1,f,c
  3300  0010E2  BE26               	btfsc	turnLeft@i+1,7,c
  3301  0010E4  D7DD               	goto	l2087
  3302  0010E6  5026               	movf	turnLeft@i+1,w,c
  3303  0010E8  E105               	bnz	u1360
  3304  0010EA  0E32               	movlw	50
  3305  0010EC  5C25               	subwf	turnLeft@i,w,c
  3306  0010EE  B0D8               	btfsc	status,0,c
  3307  0010F0  0012               	return	
  3308  0010F2  D7D6               	goto	l2087
  3309  0010F4                     u1360:
  3310  0010F4  0012               	return		;funcret
  3311  0010F6                     __end_of_turnLeft:
  3312                           	opt callstack 0
  3313                           
  3314 ;; *************** function _fullSpeedAhead *****************
  3315 ;; Defined at:
  3316 ;;		line 103 in file "dc_motor.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3319 ;;		 -> main@motorL(9), 
  3320 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3321 ;;		 -> main@motorR(9), 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  i               2   35[COMRAM] int 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3333 ;;      Params:         4       0       0       0
  3334 ;;      Locals:         2       0       0       0
  3335 ;;      Temps:          0       0       0       0
  3336 ;;      Totals:         6       0       0       0
  3337 ;;Total ram usage:        6 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    5
  3340 ;; This function calls:
  3341 ;;		_setMotorPWM
  3342 ;; This function is called by:
  3343 ;;		_moveToBeacon
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text21
  3348  00116E                     __ptext21:
  3349                           	opt callstack 0
  3350  00116E                     _fullSpeedAhead:
  3351                           	opt callstack 24
  3352                           
  3353                           ;dc_motor.c: 103: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 104: {;dc_motor.c: 105:     mL->direction = 1;
  3354                           
  3355                           ;incstack = 0
  3356  00116E  EE20 F001          	lfsr	2,1
  3357  001172  5020               	movf	fullSpeedAhead@mL,w,c
  3358  001174  26D9               	addwf	fsr2l,f,c
  3359  001176  5021               	movf	fullSpeedAhead@mL+1,w,c
  3360  001178  22DA               	addwfc	fsr2h,f,c
  3361  00117A  0E01               	movlw	1
  3362  00117C  6EDF               	movwf	indf2,c
  3363                           
  3364                           ;dc_motor.c: 106:     mR->direction = 1;
  3365  00117E  EE20 F001          	lfsr	2,1
  3366  001182  5022               	movf	fullSpeedAhead@mR,w,c
  3367  001184  26D9               	addwf	fsr2l,f,c
  3368  001186  5023               	movf	fullSpeedAhead@mR+1,w,c
  3369  001188  22DA               	addwfc	fsr2h,f,c
  3370  00118A  0E01               	movlw	1
  3371  00118C  6EDF               	movwf	indf2,c
  3372                           
  3373                           ;dc_motor.c: 107:     for(int i = 0; i < 50; i++)
  3374  00118E  0E00               	movlw	0
  3375  001190  6E25               	movwf	fullSpeedAhead@i+1,c
  3376  001192  0E00               	movlw	0
  3377  001194  6E24               	movwf	fullSpeedAhead@i,c
  3378  001196                     l2127:
  3379                           
  3380                           ;dc_motor.c: 108:     {;dc_motor.c: 109:         mL->power = i;
  3381  001196  C020  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3382  00119A  C021  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3383  00119E  C024  FFDF         	movff	fullSpeedAhead@i,indf2
  3384                           
  3385                           ;dc_motor.c: 110:         mR->power = i;
  3386  0011A2  C022  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3387  0011A6  C023  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3388  0011AA  C024  FFDF         	movff	fullSpeedAhead@i,indf2
  3389                           
  3390                           ;dc_motor.c: 111:         setMotorPWM(mL);
  3391  0011AE  C020  F017         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3392  0011B2  C021  F018         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3393  0011B6  ECB0  F004         	call	_setMotorPWM	;wreg free
  3394                           
  3395                           ;dc_motor.c: 112:         setMotorPWM(mR);
  3396  0011BA  C022  F017         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3397  0011BE  C023  F018         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3398  0011C2  ECB0  F004         	call	_setMotorPWM	;wreg free
  3399                           
  3400                           ;dc_motor.c: 113:     }
  3401  0011C6  4A24               	infsnz	fullSpeedAhead@i,f,c
  3402  0011C8  2A25               	incf	fullSpeedAhead@i+1,f,c
  3403  0011CA  BE25               	btfsc	fullSpeedAhead@i+1,7,c
  3404  0011CC  D7E4               	goto	l2127
  3405  0011CE  5025               	movf	fullSpeedAhead@i+1,w,c
  3406  0011D0  E105               	bnz	u1380
  3407  0011D2  0E32               	movlw	50
  3408  0011D4  5C24               	subwf	fullSpeedAhead@i,w,c
  3409  0011D6  B0D8               	btfsc	status,0,c
  3410  0011D8  0012               	return	
  3411  0011DA  D7DD               	goto	l2127
  3412  0011DC                     u1380:
  3413  0011DC  0012               	return		;funcret
  3414  0011DE                     __end_of_fullSpeedAhead:
  3415                           	opt callstack 0
  3416                           
  3417 ;; *************** function _init_motors *****************
  3418 ;; Defined at:
  3419 ;;		line 154 in file "dc_motor.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3422 ;;		 -> main@motorL(9), 
  3423 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3424 ;;		 -> main@motorR(9), 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3436 ;;      Params:         4       0       0       0
  3437 ;;      Locals:         0       0       0       0
  3438 ;;      Temps:          0       0       0       0
  3439 ;;      Totals:         4       0       0       0
  3440 ;;Total ram usage:        4 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    5
  3443 ;; This function calls:
  3444 ;;		_setMotorPWM
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text22
  3451  000A84                     __ptext22:
  3452                           	opt callstack 0
  3453  000A84                     _init_motors:
  3454                           	opt callstack 25
  3455                           
  3456                           ;dc_motor.c: 154: void init_motors(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           155: {;dc_motor.c: 157: mL->power = 0;
  3457                           
  3458                           ;incstack = 0
  3459  000A84  C020  FFD9         	movff	init_motors@mL,fsr2l
  3460  000A88  C021  FFDA         	movff	init_motors@mL+1,fsr2h
  3461  000A8C  0E00               	movlw	0
  3462  000A8E  6EDF               	movwf	indf2,c
  3463                           
  3464                           ;dc_motor.c: 158: mL->direction = 1;
  3465  000A90  EE20 F001          	lfsr	2,1
  3466  000A94  5020               	movf	init_motors@mL,w,c
  3467  000A96  26D9               	addwf	fsr2l,f,c
  3468  000A98  5021               	movf	init_motors@mL+1,w,c
  3469  000A9A  22DA               	addwfc	fsr2h,f,c
  3470  000A9C  0E01               	movlw	1
  3471  000A9E  6EDF               	movwf	indf2,c
  3472                           
  3473                           ;dc_motor.c: 159: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3474  000AA0  EE20 F002          	lfsr	2,2
  3475  000AA4  5020               	movf	init_motors@mL,w,c
  3476  000AA6  26D9               	addwf	fsr2l,f,c
  3477  000AA8  5021               	movf	init_motors@mL+1,w,c
  3478  000AAA  22DA               	addwfc	fsr2h,f,c
  3479  000AAC  0E79               	movlw	121
  3480  000AAE  6EDE               	movwf	postinc2,c
  3481  000AB0  0E0F               	movlw	15
  3482  000AB2  6EDD               	movwf	postdec2,c
  3483                           
  3484                           ;dc_motor.c: 160: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3485  000AB4  EE20 F004          	lfsr	2,4
  3486  000AB8  5020               	movf	init_motors@mL,w,c
  3487  000ABA  26D9               	addwf	fsr2l,f,c
  3488  000ABC  5021               	movf	init_motors@mL+1,w,c
  3489  000ABE  22DA               	addwfc	fsr2h,f,c
  3490  000AC0  0E78               	movlw	120
  3491  000AC2  6EDE               	movwf	postinc2,c
  3492  000AC4  0E0F               	movlw	15
  3493  000AC6  6EDD               	movwf	postdec2,c
  3494                           
  3495                           ;dc_motor.c: 161: mL->dir_pin=0;
  3496  000AC8  EE20 F006          	lfsr	2,6
  3497  000ACC  5020               	movf	init_motors@mL,w,c
  3498  000ACE  26D9               	addwf	fsr2l,f,c
  3499  000AD0  5021               	movf	init_motors@mL+1,w,c
  3500  000AD2  22DA               	addwfc	fsr2h,f,c
  3501  000AD4  0E00               	movlw	0
  3502  000AD6  6EDF               	movwf	indf2,c
  3503                           
  3504                           ;dc_motor.c: 162: mL->PWMperiod=199;
  3505  000AD8  EE20 F007          	lfsr	2,7
  3506  000ADC  5020               	movf	init_motors@mL,w,c
  3507  000ADE  26D9               	addwf	fsr2l,f,c
  3508  000AE0  5021               	movf	init_motors@mL+1,w,c
  3509  000AE2  22DA               	addwfc	fsr2h,f,c
  3510  000AE4  0EC7               	movlw	199
  3511  000AE6  6EDE               	movwf	postinc2,c
  3512  000AE8  0E00               	movlw	0
  3513  000AEA  6EDD               	movwf	postdec2,c
  3514                           
  3515                           ;dc_motor.c: 164: mR->power = 0;
  3516  000AEC  C022  FFD9         	movff	init_motors@mR,fsr2l
  3517  000AF0  C023  FFDA         	movff	init_motors@mR+1,fsr2h
  3518  000AF4  0E00               	movlw	0
  3519  000AF6  6EDF               	movwf	indf2,c
  3520                           
  3521                           ;dc_motor.c: 165: mR->direction = 1;
  3522  000AF8  EE20 F001          	lfsr	2,1
  3523  000AFC  5022               	movf	init_motors@mR,w,c
  3524  000AFE  26D9               	addwf	fsr2l,f,c
  3525  000B00  5023               	movf	init_motors@mR+1,w,c
  3526  000B02  22DA               	addwfc	fsr2h,f,c
  3527  000B04  0E01               	movlw	1
  3528  000B06  6EDF               	movwf	indf2,c
  3529                           
  3530                           ;dc_motor.c: 166: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3531  000B08  EE20 F002          	lfsr	2,2
  3532  000B0C  5022               	movf	init_motors@mR,w,c
  3533  000B0E  26D9               	addwf	fsr2l,f,c
  3534  000B10  5023               	movf	init_motors@mR+1,w,c
  3535  000B12  22DA               	addwfc	fsr2h,f,c
  3536  000B14  0E77               	movlw	119
  3537  000B16  6EDE               	movwf	postinc2,c
  3538  000B18  0E0F               	movlw	15
  3539  000B1A  6EDD               	movwf	postdec2,c
  3540                           
  3541                           ;dc_motor.c: 167: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3542  000B1C  EE20 F004          	lfsr	2,4
  3543  000B20  5022               	movf	init_motors@mR,w,c
  3544  000B22  26D9               	addwf	fsr2l,f,c
  3545  000B24  5023               	movf	init_motors@mR+1,w,c
  3546  000B26  22DA               	addwfc	fsr2h,f,c
  3547  000B28  0E76               	movlw	118
  3548  000B2A  6EDE               	movwf	postinc2,c
  3549  000B2C  0E0F               	movlw	15
  3550  000B2E  6EDD               	movwf	postdec2,c
  3551                           
  3552                           ;dc_motor.c: 168: mR->dir_pin=2;
  3553  000B30  EE20 F006          	lfsr	2,6
  3554  000B34  5022               	movf	init_motors@mR,w,c
  3555  000B36  26D9               	addwf	fsr2l,f,c
  3556  000B38  5023               	movf	init_motors@mR+1,w,c
  3557  000B3A  22DA               	addwfc	fsr2h,f,c
  3558  000B3C  0E02               	movlw	2
  3559  000B3E  6EDF               	movwf	indf2,c
  3560                           
  3561                           ;dc_motor.c: 169: mR->PWMperiod=199;
  3562  000B40  EE20 F007          	lfsr	2,7
  3563  000B44  5022               	movf	init_motors@mR,w,c
  3564  000B46  26D9               	addwf	fsr2l,f,c
  3565  000B48  5023               	movf	init_motors@mR+1,w,c
  3566  000B4A  22DA               	addwfc	fsr2h,f,c
  3567  000B4C  0EC7               	movlw	199
  3568  000B4E  6EDE               	movwf	postinc2,c
  3569  000B50  0E00               	movlw	0
  3570  000B52  6EDD               	movwf	postdec2,c
  3571                           
  3572                           ;dc_motor.c: 171: setMotorPWM(mL);
  3573  000B54  C020  F017         	movff	init_motors@mL,setMotorPWM@m
  3574  000B58  C021  F018         	movff	init_motors@mL+1,setMotorPWM@m+1
  3575  000B5C  ECB0  F004         	call	_setMotorPWM	;wreg free
  3576                           
  3577                           ;dc_motor.c: 172: setMotorPWM(mR);
  3578  000B60  C022  F017         	movff	init_motors@mR,setMotorPWM@m
  3579  000B64  C023  F018         	movff	init_motors@mR+1,setMotorPWM@m+1
  3580  000B68  ECB0  F004         	call	_setMotorPWM	;wreg free
  3581  000B6C  0012               	return		;funcret
  3582  000B6E                     __end_of_init_motors:
  3583                           	opt callstack 0
  3584                           
  3585 ;; *************** function _setMotorPWM *****************
  3586 ;; Defined at:
  3587 ;;		line 18 in file "dc_motor.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  m               2   22[COMRAM] PTR struct DC_motor
  3590 ;;		 -> main@motorR(9), main@motorL(9), 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;  PWMduty         2   29[COMRAM] int 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3602 ;;      Params:         2       0       0       0
  3603 ;;      Locals:         2       0       0       0
  3604 ;;      Temps:          5       0       0       0
  3605 ;;      Totals:         9       0       0       0
  3606 ;;Total ram usage:        9 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    4
  3609 ;; This function calls:
  3610 ;;		___awdiv
  3611 ;;		___wmul
  3612 ;; This function is called by:
  3613 ;;		_turnLeft
  3614 ;;		_turnRight
  3615 ;;		_fullSpeedAhead
  3616 ;;		_init_motors
  3617 ;;		_setMotorFullSpeed
  3618 ;;		_stopMotor
  3619 ;;		_stop
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text23
  3624  000960                     __ptext23:
  3625                           	opt callstack 0
  3626  000960                     _setMotorPWM:
  3627                           	opt callstack 24
  3628                           
  3629                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3630                           
  3631                           ;incstack = 0
  3632  000960  C017  FFD9         	movff	setMotorPWM@m,fsr2l
  3633  000964  C018  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3634  000968  50DF               	movf	indf2,w,c
  3635  00096A  6E19               	movwf	??_setMotorPWM& (0+255),c
  3636  00096C  5019               	movf	??_setMotorPWM,w,c
  3637  00096E  6E11               	movwf	___wmul@multiplier,c
  3638  000970  6A12               	clrf	___wmul@multiplier+1,c
  3639  000972  EE20 F007          	lfsr	2,7
  3640  000976  5017               	movf	setMotorPWM@m,w,c
  3641  000978  26D9               	addwf	fsr2l,f,c
  3642  00097A  5018               	movf	setMotorPWM@m+1,w,c
  3643  00097C  22DA               	addwfc	fsr2h,f,c
  3644  00097E  CFDE F013          	movff	postinc2,___wmul@multiplicand
  3645  000982  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  3646  000986  ECB2  F00A         	call	___wmul	;wreg free
  3647  00098A  C011  F009         	movff	?___wmul,___awdiv@dividend
  3648  00098E  C012  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  3649  000992  0E00               	movlw	0
  3650  000994  6E0C               	movwf	___awdiv@divisor+1,c
  3651  000996  0E64               	movlw	100
  3652  000998  6E0B               	movwf	___awdiv@divisor,c
  3653  00099A  ECBB  F007         	call	___awdiv	;wreg free
  3654  00099E  C009  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
  3655  0009A2  C00A  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3656                           
  3657                           ;dc_motor.c: 24:     if (m->direction)
  3658  0009A6  EE20 F001          	lfsr	2,1
  3659  0009AA  5017               	movf	setMotorPWM@m,w,c
  3660  0009AC  26D9               	addwf	fsr2l,f,c
  3661  0009AE  5018               	movf	setMotorPWM@m+1,w,c
  3662  0009B0  22DA               	addwfc	fsr2h,f,c
  3663  0009B2  50DF               	movf	indf2,w,c
  3664  0009B4  B4D8               	btfsc	status,2,c
  3665  0009B6  D024               	goto	l1949
  3666                           
  3667                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3668  0009B8  EE20 F006          	lfsr	2,6
  3669  0009BC  5017               	movf	setMotorPWM@m,w,c
  3670  0009BE  26D9               	addwf	fsr2l,f,c
  3671  0009C0  5018               	movf	setMotorPWM@m+1,w,c
  3672  0009C2  22DA               	addwfc	fsr2h,f,c
  3673  0009C4  50DF               	movf	indf2,w,c
  3674  0009C6  6E19               	movwf	??_setMotorPWM& (0+255),c
  3675  0009C8  0E01               	movlw	1
  3676  0009CA  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3677  0009CC  2A19               	incf	??_setMotorPWM,f,c
  3678  0009CE  D002               	goto	u1244
  3679  0009D0                     u1245:
  3680  0009D0  90D8               	bcf	status,0,c
  3681  0009D2  361A               	rlcf	??_setMotorPWM+1,f,c
  3682  0009D4                     u1244:
  3683  0009D4  2E19               	decfsz	??_setMotorPWM,f,c
  3684  0009D6  D7FC               	goto	u1245
  3685  0009D8  501A               	movf	??_setMotorPWM+1,w,c
  3686  0009DA  108A               	iorwf	3978,w,c	;volatile
  3687  0009DC  6E8A               	movwf	3978,c	;volatile
  3688                           
  3689                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3690  0009DE  EE20 F007          	lfsr	2,7
  3691  0009E2  5017               	movf	setMotorPWM@m,w,c
  3692  0009E4  26D9               	addwf	fsr2l,f,c
  3693  0009E6  5018               	movf	setMotorPWM@m+1,w,c
  3694  0009E8  22DA               	addwfc	fsr2h,f,c
  3695  0009EA  CFDE F019          	movff	postinc2,??_setMotorPWM
  3696  0009EE  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3697  0009F2  501E               	movf	setMotorPWM@PWMduty,w,c
  3698  0009F4  5C19               	subwf	??_setMotorPWM,w,c
  3699  0009F6  6E1E               	movwf	setMotorPWM@PWMduty,c
  3700  0009F8  501F               	movf	setMotorPWM@PWMduty+1,w,c
  3701  0009FA  581A               	subwfb	??_setMotorPWM+1,w,c
  3702  0009FC  6E1F               	movwf	setMotorPWM@PWMduty+1,c
  3703                           
  3704                           ;dc_motor.c: 28:     }
  3705  0009FE  D014               	goto	l138
  3706  000A00                     l1949:
  3707                           
  3708                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3709  000A00  EE20 F006          	lfsr	2,6
  3710  000A04  5017               	movf	setMotorPWM@m,w,c
  3711  000A06  26D9               	addwf	fsr2l,f,c
  3712  000A08  5018               	movf	setMotorPWM@m+1,w,c
  3713  000A0A  22DA               	addwfc	fsr2h,f,c
  3714  000A0C  50DF               	movf	indf2,w,c
  3715  000A0E  6E19               	movwf	??_setMotorPWM& (0+255),c
  3716  000A10  0E01               	movlw	1
  3717  000A12  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3718  000A14  2A19               	incf	??_setMotorPWM,f,c
  3719  000A16  D002               	goto	u1254
  3720  000A18                     u1255:
  3721  000A18  90D8               	bcf	status,0,c
  3722  000A1A  361A               	rlcf	??_setMotorPWM+1,f,c
  3723  000A1C                     u1254:
  3724  000A1C  2E19               	decfsz	??_setMotorPWM,f,c
  3725  000A1E  D7FC               	goto	u1255
  3726  000A20  501A               	movf	??_setMotorPWM+1,w,c
  3727  000A22  0AFF               	xorlw	255
  3728  000A24  148A               	andwf	3978,w,c	;volatile
  3729  000A26  6E8A               	movwf	3978,c	;volatile
  3730  000A28                     l138:
  3731                           
  3732                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3733  000A28  EE20 F002          	lfsr	2,2
  3734  000A2C  5017               	movf	setMotorPWM@m,w,c
  3735  000A2E  26D9               	addwf	fsr2l,f,c
  3736  000A30  5018               	movf	setMotorPWM@m+1,w,c
  3737  000A32  22DA               	addwfc	fsr2h,f,c
  3738  000A34  CFDE F019          	movff	postinc2,??_setMotorPWM
  3739  000A38  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3740  000A3C  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3741  000A40  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3742  000A44  441E               	rlncf	setMotorPWM@PWMduty,w,c
  3743  000A46  46E8               	rlncf	wreg,f,c
  3744  000A48  0BFC               	andlw	252
  3745  000A4A  6EDF               	movwf	indf2,c
  3746                           
  3747                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3748  000A4C  EE20 F004          	lfsr	2,4
  3749  000A50  5017               	movf	setMotorPWM@m,w,c
  3750  000A52  26D9               	addwf	fsr2l,f,c
  3751  000A54  5018               	movf	setMotorPWM@m+1,w,c
  3752  000A56  22DA               	addwfc	fsr2h,f,c
  3753  000A58  CFDE F019          	movff	postinc2,??_setMotorPWM
  3754  000A5C  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3755  000A60  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3756  000A64  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3757  000A68  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3758  000A6C  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3759  000A70  0E06               	movlw	6
  3760  000A72  6E1D               	movwf	(??_setMotorPWM+4)& (0+255),c
  3761  000A74                     u1265:
  3762  000A74  341C               	rlcf	??_setMotorPWM+3,w,c
  3763  000A76  321C               	rrcf	??_setMotorPWM+3,f,c
  3764  000A78  321B               	rrcf	??_setMotorPWM+2,f,c
  3765  000A7A  2E1D               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3766  000A7C  D7FB               	goto	u1265
  3767  000A7E  501B               	movf	??_setMotorPWM+2,w,c
  3768  000A80  6EDF               	movwf	indf2,c
  3769  000A82  0012               	return		;funcret
  3770  000A84                     __end_of_setMotorPWM:
  3771                           	opt callstack 0
  3772                           
  3773 ;; *************** function ___wmul *****************
  3774 ;; Defined at:
  3775 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  multiplier      2   16[COMRAM] unsigned int 
  3778 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  product         2   20[COMRAM] unsigned int 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  2   16[COMRAM] unsigned int 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, prodl, prodh
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3790 ;;      Params:         4       0       0       0
  3791 ;;      Locals:         2       0       0       0
  3792 ;;      Temps:          0       0       0       0
  3793 ;;      Totals:         6       0       0       0
  3794 ;;Total ram usage:        6 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    3
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_setMotorPWM
  3801 ;;		_process_signal
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text24
  3806  001564                     __ptext24:
  3807                           	opt callstack 0
  3808  001564                     ___wmul:
  3809                           	opt callstack 26
  3810                           
  3811                           ;incstack = 0
  3812  001564  5011               	movf	___wmul@multiplier,w,c
  3813  001566  0213               	mulwf	___wmul@multiplicand,c
  3814  001568  CFF3 F015          	movff	prodl,___wmul@product
  3815  00156C  CFF4 F016          	movff	prodh,___wmul@product+1
  3816  001570  5011               	movf	___wmul@multiplier,w,c
  3817  001572  0214               	mulwf	___wmul@multiplicand+1,c
  3818  001574  50F3               	movf	prodl,w,c
  3819  001576  2616               	addwf	___wmul@product+1,f,c
  3820  001578  5012               	movf	___wmul@multiplier+1,w,c
  3821  00157A  0213               	mulwf	___wmul@multiplicand,c
  3822  00157C  50F3               	movf	prodl,w,c
  3823  00157E  2616               	addwf	___wmul@product+1,f,c
  3824  001580  C015  F011         	movff	___wmul@product,?___wmul
  3825  001584  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3826  001588  0012               	return		;funcret
  3827  00158A                     __end_of___wmul:
  3828                           	opt callstack 0
  3829                           
  3830 ;; *************** function ___awdiv *****************
  3831 ;; Defined at:
  3832 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  dividend        2    8[COMRAM] int 
  3835 ;;  divisor         2   10[COMRAM] int 
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;  quotient        2   14[COMRAM] int 
  3838 ;;  sign            1   13[COMRAM] unsigned char 
  3839 ;;  counter         1   12[COMRAM] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2    8[COMRAM] int 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3849 ;;      Params:         4       0       0       0
  3850 ;;      Locals:         4       0       0       0
  3851 ;;      Temps:          0       0       0       0
  3852 ;;      Totals:         8       0       0       0
  3853 ;;Total ram usage:        8 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    3
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_setMotorPWM
  3860 ;;		_process_signal
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text25
  3865  000F76                     __ptext25:
  3866                           	opt callstack 0
  3867  000F76                     ___awdiv:
  3868                           	opt callstack 26
  3869                           
  3870                           ;incstack = 0
  3871  000F76  0E00               	movlw	0
  3872  000F78  6E0E               	movwf	___awdiv@sign,c
  3873  000F7A  AE0C               	btfss	___awdiv@divisor+1,7,c
  3874  000F7C  D006               	goto	l1907
  3875  000F7E  6C0B               	negf	___awdiv@divisor,c
  3876  000F80  1E0C               	comf	___awdiv@divisor+1,f,c
  3877  000F82  B0D8               	btfsc	status,0,c
  3878  000F84  2A0C               	incf	___awdiv@divisor+1,f,c
  3879  000F86  0E01               	movlw	1
  3880  000F88  6E0E               	movwf	___awdiv@sign,c
  3881  000F8A                     l1907:
  3882  000F8A  AE0A               	btfss	___awdiv@dividend+1,7,c
  3883  000F8C  D006               	goto	l1913
  3884  000F8E  6C09               	negf	___awdiv@dividend,c
  3885  000F90  1E0A               	comf	___awdiv@dividend+1,f,c
  3886  000F92  B0D8               	btfsc	status,0,c
  3887  000F94  2A0A               	incf	___awdiv@dividend+1,f,c
  3888  000F96  0E01               	movlw	1
  3889  000F98  1A0E               	xorwf	___awdiv@sign,f,c
  3890  000F9A                     l1913:
  3891  000F9A  0E00               	movlw	0
  3892  000F9C  6E10               	movwf	___awdiv@quotient+1,c
  3893  000F9E  0E00               	movlw	0
  3894  000FA0  6E0F               	movwf	___awdiv@quotient,c
  3895  000FA2  500B               	movf	___awdiv@divisor,w,c
  3896  000FA4  100C               	iorwf	___awdiv@divisor+1,w,c
  3897  000FA6  B4D8               	btfsc	status,2,c
  3898  000FA8  D01C               	goto	l1935
  3899  000FAA  0E01               	movlw	1
  3900  000FAC  6E0D               	movwf	___awdiv@counter,c
  3901  000FAE  D004               	goto	l1921
  3902  000FB0                     l1919:
  3903  000FB0  90D8               	bcf	status,0,c
  3904  000FB2  360B               	rlcf	___awdiv@divisor,f,c
  3905  000FB4  360C               	rlcf	___awdiv@divisor+1,f,c
  3906  000FB6  2A0D               	incf	___awdiv@counter,f,c
  3907  000FB8                     l1921:
  3908  000FB8  AE0C               	btfss	___awdiv@divisor+1,7,c
  3909  000FBA  D7FA               	goto	l1919
  3910  000FBC                     u1200:
  3911  000FBC  90D8               	bcf	status,0,c
  3912  000FBE  360F               	rlcf	___awdiv@quotient,f,c
  3913  000FC0  3610               	rlcf	___awdiv@quotient+1,f,c
  3914  000FC2  500B               	movf	___awdiv@divisor,w,c
  3915  000FC4  5C09               	subwf	___awdiv@dividend,w,c
  3916  000FC6  500C               	movf	___awdiv@divisor+1,w,c
  3917  000FC8  580A               	subwfb	___awdiv@dividend+1,w,c
  3918  000FCA  A0D8               	btfss	status,0,c
  3919  000FCC  D005               	goto	l1931
  3920  000FCE  500B               	movf	___awdiv@divisor,w,c
  3921  000FD0  5E09               	subwf	___awdiv@dividend,f,c
  3922  000FD2  500C               	movf	___awdiv@divisor+1,w,c
  3923  000FD4  5A0A               	subwfb	___awdiv@dividend+1,f,c
  3924  000FD6  800F               	bsf	___awdiv@quotient,0,c
  3925  000FD8                     l1931:
  3926  000FD8  90D8               	bcf	status,0,c
  3927  000FDA  320C               	rrcf	___awdiv@divisor+1,f,c
  3928  000FDC  320B               	rrcf	___awdiv@divisor,f,c
  3929  000FDE  2E0D               	decfsz	___awdiv@counter,f,c
  3930  000FE0  D7ED               	goto	u1200
  3931  000FE2                     l1935:
  3932  000FE2  500E               	movf	___awdiv@sign,w,c
  3933  000FE4  B4D8               	btfsc	status,2,c
  3934  000FE6  D004               	goto	l1939
  3935  000FE8  6C0F               	negf	___awdiv@quotient,c
  3936  000FEA  1E10               	comf	___awdiv@quotient+1,f,c
  3937  000FEC  B0D8               	btfsc	status,0,c
  3938  000FEE  2A10               	incf	___awdiv@quotient+1,f,c
  3939  000FF0                     l1939:
  3940  000FF0  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  3941  000FF4  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  3942  000FF8  0012               	return		;funcret
  3943  000FFA                     __end_of___awdiv:
  3944                           	opt callstack 0
  3945                           
  3946 ;; *************** function _display_RFID *****************
  3947 ;; Defined at:
  3948 ;;		line 109 in file "RFID.c"
  3949 ;; Parameters:    Size  Location     Type
  3950 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  3951 ;;		 -> RFIDbuf(12), 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  i               2   15[COMRAM] int 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3963 ;;      Params:         2       0       0       0
  3964 ;;      Locals:         2       0       0       0
  3965 ;;      Temps:          0       0       0       0
  3966 ;;      Totals:         4       0       0       0
  3967 ;;Total ram usage:        4 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    7
  3970 ;; This function calls:
  3971 ;;		_ClearLCD
  3972 ;;		_SendLCD
  3973 ;;		_SetLine
  3974 ;; This function is called by:
  3975 ;;		_main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text26
  3980  00139E                     __ptext26:
  3981                           	opt callstack 0
  3982  00139E                     _display_RFID:
  3983                           	opt callstack 23
  3984                           
  3985                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  3986                           
  3987                           ;incstack = 0
  3988  00139E  ECEC  F00A         	call	_ClearLCD	;wreg free
  3989                           
  3990                           ;RFID.c: 112:     SetLine(1);
  3991  0013A2  0E01               	movlw	1
  3992  0013A4  EC73  F00A         	call	_SetLine
  3993                           
  3994                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  3995  0013A8  0E00               	movlw	0
  3996  0013AA  6E11               	movwf	display_RFID@i+1,c
  3997  0013AC  0E00               	movlw	0
  3998  0013AE  6E10               	movwf	display_RFID@i,c
  3999  0013B0                     l2283:
  4000                           
  4001                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  4002  0013B0  0E01               	movlw	1
  4003  0013B2  6E0B               	movwf	SendLCD@type,c
  4004  0013B4  5010               	movf	display_RFID@i,w,c
  4005  0013B6  240E               	addwf	display_RFID@dataBuf,w,c
  4006  0013B8  6ED9               	movwf	fsr2l,c
  4007  0013BA  5011               	movf	display_RFID@i+1,w,c
  4008  0013BC  200F               	addwfc	display_RFID@dataBuf+1,w,c
  4009  0013BE  6EDA               	movwf	fsr2h,c
  4010  0013C0  50DF               	movf	indf2,w,c
  4011  0013C2  EC44  F00A         	call	_SendLCD
  4012                           
  4013                           ;RFID.c: 116:     }
  4014  0013C6  4A10               	infsnz	display_RFID@i,f,c
  4015  0013C8  2A11               	incf	display_RFID@i+1,f,c
  4016  0013CA  BE11               	btfsc	display_RFID@i+1,7,c
  4017  0013CC  D7F1               	goto	l2283
  4018  0013CE  5011               	movf	display_RFID@i+1,w,c
  4019  0013D0  E105               	bnz	u1530
  4020  0013D2  0E0A               	movlw	10
  4021  0013D4  5C10               	subwf	display_RFID@i,w,c
  4022  0013D6  B0D8               	btfsc	status,0,c
  4023  0013D8  0012               	return	
  4024  0013DA  D7EA               	goto	l2283
  4025  0013DC                     u1530:
  4026  0013DC  0012               	return		;funcret
  4027  0013DE                     __end_of_display_RFID:
  4028                           	opt callstack 0
  4029                           
  4030 ;; *************** function _ClearLCD *****************
  4031 ;; Defined at:
  4032 ;;		line 137 in file "LCDIO.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4046 ;;      Params:         0       0       0       0
  4047 ;;      Locals:         0       0       0       0
  4048 ;;      Temps:          1       0       0       0
  4049 ;;      Totals:         1       0       0       0
  4050 ;;Total ram usage:        1 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    6
  4053 ;; This function calls:
  4054 ;;		_SendLCD
  4055 ;; This function is called by:
  4056 ;;		_main
  4057 ;;		_display_RFID
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text27
  4062  0015D8                     __ptext27:
  4063                           	opt callstack 0
  4064  0015D8                     _ClearLCD:
  4065                           	opt callstack 23
  4066                           
  4067                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  4068                           
  4069                           ;incstack = 0
  4070  0015D8  0E00               	movlw	0
  4071  0015DA  6E0B               	movwf	SendLCD@type,c
  4072  0015DC  0E01               	movlw	1
  4073  0015DE  EC44  F00A         	call	_SendLCD
  4074                           
  4075                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  4076  0015E2  0E0D               	movlw	13
  4077  0015E4  6E0D               	movwf	??_ClearLCD& (0+255),c
  4078  0015E6  0EFC               	movlw	252
  4079  0015E8                     u2337:
  4080  0015E8  2EE8               	decfsz	wreg,f,c
  4081  0015EA  D7FE               	bra	u2337
  4082  0015EC  2E0D               	decfsz	??_ClearLCD& (0+255),f,c
  4083  0015EE  D7FC               	bra	u2337
  4084  0015F0  0012               	return		;funcret
  4085  0015F2                     __end_of_ClearLCD:
  4086                           	opt callstack 0
  4087                           
  4088 ;; *************** function _classify_data *****************
  4089 ;; Defined at:
  4090 ;;		line 45 in file "signal_processing.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  left_smoothe    2    8[COMRAM] int 
  4093 ;;  right_smooth    2   10[COMRAM] int 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  difference      2   12[COMRAM] int 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      unsigned char 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4105 ;;      Params:         4       0       0       0
  4106 ;;      Locals:         2       0       0       0
  4107 ;;      Temps:          0       0       0       0
  4108 ;;      Totals:         6       0       0       0
  4109 ;;Total ram usage:        6 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    3
  4112 ;; This function calls:
  4113 ;;		Nothing
  4114 ;; This function is called by:
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text28
  4120  0013DE                     __ptext28:
  4121                           	opt callstack 0
  4122  0013DE                     _classify_data:
  4123                           	opt callstack 27
  4124                           
  4125                           ;signal_processing.c: 45: char classify_data(int left_smoothed, int right_smoothed);sign
      +                          al_processing.c: 46: {;signal_processing.c: 47:     int difference = left_smoothed - rig
      +                          ht_smoothed;
  4126                           
  4127                           ;incstack = 0
  4128  0013DE  500B               	movf	classify_data@right_smoothed,w,c
  4129  0013E0  5C09               	subwf	classify_data@left_smoothed,w,c
  4130  0013E2  6E0D               	movwf	classify_data@difference,c
  4131  0013E4  500C               	movf	classify_data@right_smoothed+1,w,c
  4132  0013E6  580A               	subwfb	classify_data@left_smoothed+1,w,c
  4133  0013E8  6E0E               	movwf	classify_data@difference+1,c
  4134                           
  4135                           ;signal_processing.c: 50:     if(difference < 50 && difference > -50)
  4136  0013EA  BE0E               	btfsc	classify_data@difference+1,7,c
  4137  0013EC  D006               	goto	u1440
  4138  0013EE  500E               	movf	classify_data@difference+1,w,c
  4139  0013F0  E10E               	bnz	l2231
  4140  0013F2  0E32               	movlw	50
  4141  0013F4  5C0D               	subwf	classify_data@difference,w,c
  4142  0013F6  B0D8               	btfsc	status,0,c
  4143  0013F8  D00A               	goto	l2231
  4144  0013FA                     u1440:
  4145  0013FA  AE0E               	btfss	classify_data@difference+1,7,c
  4146  0013FC  D006               	goto	u1450
  4147  0013FE  0ECF               	movlw	207
  4148  001400  5C0D               	subwf	classify_data@difference,w,c
  4149  001402  0EFF               	movlw	255
  4150  001404  580E               	subwfb	classify_data@difference+1,w,c
  4151  001406  A0D8               	btfss	status,0,c
  4152  001408  D002               	goto	l2231
  4153  00140A                     u1450:
  4154                           
  4155                           ;signal_processing.c: 51:     {;signal_processing.c: 52:         return 3;
  4156  00140A  0E03               	movlw	3
  4157  00140C  0012               	return	
  4158  00140E                     l2231:
  4159  00140E  AE0E               	btfss	classify_data@difference+1,7,c
  4160  001410  D002               	goto	l2239
  4161                           
  4162                           ;signal_processing.c: 56:     {;signal_processing.c: 57:         return 2;
  4163  001412  0E02               	movlw	2
  4164  001414  0012               	return	
  4165  001416                     l2239:
  4166                           
  4167                           ;signal_processing.c: 61:     {;signal_processing.c: 62:         return 1;
  4168  001416  0E01               	movlw	1
  4169  001418  0012               	return		;funcret
  4170  00141A                     __end_of_classify_data:
  4171                           	opt callstack 0
  4172                           
  4173 ;; *************** function _check_RFID *****************
  4174 ;; Defined at:
  4175 ;;		line 72 in file "RFID.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  dataBuf         2   14[COMRAM] PTR unsigned char 
  4178 ;;		 -> RFIDbuf(12), 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  i               2   36[COMRAM] int 
  4181 ;;  hexBuf         12   18[COMRAM] unsigned char [12]
  4182 ;;  checksum        1   35[COMRAM] unsigned char 
  4183 ;;  byte5           1   34[COMRAM] unsigned char 
  4184 ;;  byte4           1   33[COMRAM] unsigned char 
  4185 ;;  byte3           1   32[COMRAM] unsigned char 
  4186 ;;  byte2           1   31[COMRAM] unsigned char 
  4187 ;;  byte1           1   30[COMRAM] unsigned char 
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4197 ;;      Params:         2       0       0       0
  4198 ;;      Locals:        20       0       0       0
  4199 ;;      Temps:          2       0       0       0
  4200 ;;      Totals:        24       0       0       0
  4201 ;;Total ram usage:       24 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    7
  4204 ;; This function calls:
  4205 ;;		_LCD_String
  4206 ;;		_SetLine
  4207 ;; This function is called by:
  4208 ;;		_main
  4209 ;; This function uses a non-reentrant model
  4210 ;;
  4211                           
  4212                           	psect	text29
  4213  000810                     __ptext29:
  4214                           	opt callstack 0
  4215  000810                     _check_RFID:
  4216                           	opt callstack 23
  4217                           
  4218                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  4219                           
  4220                           ;incstack = 0
  4221  000810  0E00               	movlw	0
  4222  000812  6E26               	movwf	check_RFID@i+1,c
  4223  000814  0E00               	movlw	0
  4224  000816  6E25               	movwf	check_RFID@i,c
  4225  000818                     l2295:
  4226                           
  4227                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  4228  000818  5025               	movf	check_RFID@i,w,c
  4229  00081A  240F               	addwf	check_RFID@dataBuf,w,c
  4230  00081C  6ED9               	movwf	fsr2l,c
  4231  00081E  5026               	movf	check_RFID@i+1,w,c
  4232  000820  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4233  000822  6EDA               	movwf	fsr2h,c
  4234  000824  0E2F               	movlw	47
  4235  000826  64DF               	cpfsgt	indf2,c
  4236  000828  D018               	goto	l2301
  4237  00082A  5025               	movf	check_RFID@i,w,c
  4238  00082C  240F               	addwf	check_RFID@dataBuf,w,c
  4239  00082E  6ED9               	movwf	fsr2l,c
  4240  000830  5026               	movf	check_RFID@i+1,w,c
  4241  000832  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4242  000834  6EDA               	movwf	fsr2h,c
  4243  000836  0E3A               	movlw	58
  4244  000838  60DF               	cpfslt	indf2,c
  4245  00083A  D00F               	goto	l2301
  4246                           
  4247                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  4248  00083C  0E13               	movlw	low check_RFID@hexBuf
  4249  00083E  2425               	addwf	check_RFID@i,w,c
  4250  000840  6ED9               	movwf	fsr2l,c
  4251  000842  0E00               	movlw	high check_RFID@hexBuf
  4252  000844  2026               	addwfc	check_RFID@i+1,w,c
  4253  000846  6EDA               	movwf	fsr2h,c
  4254  000848  5025               	movf	check_RFID@i,w,c
  4255  00084A  240F               	addwf	check_RFID@dataBuf,w,c
  4256  00084C  6EE1               	movwf	fsr1l,c
  4257  00084E  5026               	movf	check_RFID@i+1,w,c
  4258  000850  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4259  000852  6EE2               	movwf	fsr1h,c
  4260  000854  50E7               	movf	indf1,w,c
  4261  000856  0FD0               	addlw	208
  4262  000858  D020               	goto	L1
  4263  00085A                     l2301:
  4264  00085A  5025               	movf	check_RFID@i,w,c
  4265  00085C  240F               	addwf	check_RFID@dataBuf,w,c
  4266  00085E  6ED9               	movwf	fsr2l,c
  4267  000860  5026               	movf	check_RFID@i+1,w,c
  4268  000862  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4269  000864  6EDA               	movwf	fsr2h,c
  4270  000866  0E40               	movlw	64
  4271  000868  64DF               	cpfsgt	indf2,c
  4272  00086A  D018               	goto	l2307
  4273  00086C  5025               	movf	check_RFID@i,w,c
  4274  00086E  240F               	addwf	check_RFID@dataBuf,w,c
  4275  000870  6ED9               	movwf	fsr2l,c
  4276  000872  5026               	movf	check_RFID@i+1,w,c
  4277  000874  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4278  000876  6EDA               	movwf	fsr2h,c
  4279  000878  0E47               	movlw	71
  4280  00087A  60DF               	cpfslt	indf2,c
  4281  00087C  D00F               	goto	l2307
  4282                           
  4283                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  4284  00087E  0E13               	movlw	low check_RFID@hexBuf
  4285  000880  2425               	addwf	check_RFID@i,w,c
  4286  000882  6ED9               	movwf	fsr2l,c
  4287  000884  0E00               	movlw	high check_RFID@hexBuf
  4288  000886  2026               	addwfc	check_RFID@i+1,w,c
  4289  000888  6EDA               	movwf	fsr2h,c
  4290  00088A  5025               	movf	check_RFID@i,w,c
  4291  00088C  240F               	addwf	check_RFID@dataBuf,w,c
  4292  00088E  6EE1               	movwf	fsr1l,c
  4293  000890  5026               	movf	check_RFID@i+1,w,c
  4294  000892  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4295  000894  6EE2               	movwf	fsr1h,c
  4296  000896  50E7               	movf	indf1,w,c
  4297  000898  0FC9               	addlw	201
  4298  00089A                     L1:
  4299  00089A  6EDF               	movwf	indf2,c
  4300  00089C                     l2307:
  4301                           
  4302                           ;RFID.c: 86:     }
  4303  00089C  4A25               	infsnz	check_RFID@i,f,c
  4304  00089E  2A26               	incf	check_RFID@i+1,f,c
  4305  0008A0  BE26               	btfsc	check_RFID@i+1,7,c
  4306  0008A2  D7BA               	goto	l2295
  4307  0008A4  5026               	movf	check_RFID@i+1,w,c
  4308  0008A6  E104               	bnz	u1580
  4309  0008A8  0E0C               	movlw	12
  4310  0008AA  5C25               	subwf	check_RFID@i,w,c
  4311  0008AC  A0D8               	btfss	status,0,c
  4312  0008AE  D7B4               	goto	l2295
  4313  0008B0                     u1580:
  4314                           
  4315                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  4316  0008B0  5013               	movf	check_RFID@hexBuf,w,c
  4317  0008B2  A4D8               	btfss	status,2,c
  4318  0008B4  D002               	goto	u1590
  4319  0008B6  0E01               	movlw	1
  4320  0008B8  D001               	goto	u1600
  4321  0008BA                     u1590:
  4322  0008BA  0E00               	movlw	0
  4323  0008BC                     u1600:
  4324  0008BC  1014               	iorwf	check_RFID@hexBuf+1,w,c
  4325  0008BE  6E1F               	movwf	check_RFID@byte1,c
  4326                           
  4327                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  4328  0008C0  5015               	movf	check_RFID@hexBuf+2,w,c
  4329  0008C2  A4D8               	btfss	status,2,c
  4330  0008C4  D002               	goto	u1610
  4331  0008C6  0E01               	movlw	1
  4332  0008C8  D001               	goto	u1620
  4333  0008CA                     u1610:
  4334  0008CA  0E00               	movlw	0
  4335  0008CC                     u1620:
  4336  0008CC  1016               	iorwf	check_RFID@hexBuf+3,w,c
  4337  0008CE  6E20               	movwf	check_RFID@byte2,c
  4338                           
  4339                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  4340  0008D0  5017               	movf	check_RFID@hexBuf+4,w,c
  4341  0008D2  A4D8               	btfss	status,2,c
  4342  0008D4  D002               	goto	u1630
  4343  0008D6  0E01               	movlw	1
  4344  0008D8  D001               	goto	u1640
  4345  0008DA                     u1630:
  4346  0008DA  0E00               	movlw	0
  4347  0008DC                     u1640:
  4348  0008DC  1018               	iorwf	check_RFID@hexBuf+5,w,c
  4349  0008DE  6E21               	movwf	check_RFID@byte3,c
  4350                           
  4351                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  4352  0008E0  5019               	movf	check_RFID@hexBuf+6,w,c
  4353  0008E2  A4D8               	btfss	status,2,c
  4354  0008E4  D002               	goto	u1650
  4355  0008E6  0E01               	movlw	1
  4356  0008E8  D001               	goto	u1660
  4357  0008EA                     u1650:
  4358  0008EA  0E00               	movlw	0
  4359  0008EC                     u1660:
  4360  0008EC  101A               	iorwf	check_RFID@hexBuf+7,w,c
  4361  0008EE  6E22               	movwf	check_RFID@byte4,c
  4362                           
  4363                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  4364  0008F0  501B               	movf	check_RFID@hexBuf+8,w,c
  4365  0008F2  A4D8               	btfss	status,2,c
  4366  0008F4  D002               	goto	u1670
  4367  0008F6  0E01               	movlw	1
  4368  0008F8  D001               	goto	u1680
  4369  0008FA                     u1670:
  4370  0008FA  0E00               	movlw	0
  4371  0008FC                     u1680:
  4372  0008FC  101C               	iorwf	check_RFID@hexBuf+9,w,c
  4373  0008FE  6E23               	movwf	check_RFID@byte5,c
  4374                           
  4375                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  4376  000900  501D               	movf	check_RFID@hexBuf+10,w,c
  4377  000902  A4D8               	btfss	status,2,c
  4378  000904  D002               	goto	u1690
  4379  000906  0E01               	movlw	1
  4380  000908  D001               	goto	u1700
  4381  00090A                     u1690:
  4382  00090A  0E00               	movlw	0
  4383  00090C                     u1700:
  4384  00090C  101E               	iorwf	check_RFID@hexBuf+11,w,c
  4385  00090E  6E24               	movwf	check_RFID@checksum,c
  4386                           
  4387                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  4388  000910  501F               	movf	check_RFID@byte1,w,c
  4389  000912  1820               	xorwf	check_RFID@byte2,w,c
  4390  000914  1821               	xorwf	check_RFID@byte3,w,c
  4391  000916  1822               	xorwf	check_RFID@byte4,w,c
  4392  000918  6E11               	movwf	??_check_RFID& (0+255),c
  4393  00091A  6A12               	clrf	(??_check_RFID+1)& (0+255),c
  4394  00091C  5024               	movf	check_RFID@checksum,w,c
  4395  00091E  1823               	xorwf	check_RFID@byte5,w,c
  4396  000920  A4D8               	btfss	status,2,c
  4397  000922  D002               	goto	u1710
  4398  000924  0E01               	movlw	1
  4399  000926  D001               	goto	u1720
  4400  000928                     u1710:
  4401  000928  0E00               	movlw	0
  4402  00092A                     u1720:
  4403  00092A  1A11               	xorwf	??_check_RFID,f,c
  4404  00092C  0E00               	movlw	0
  4405  00092E  1A12               	xorwf	??_check_RFID+1,f,c
  4406  000930  5011               	movf	??_check_RFID,w,c
  4407  000932  1012               	iorwf	??_check_RFID+1,w,c
  4408  000934  B4D8               	btfsc	status,2,c
  4409  000936  D00A               	goto	l2317
  4410                           
  4411                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  4412  000938  0E02               	movlw	2
  4413  00093A  EC73  F00A         	call	_SetLine
  4414                           
  4415                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  4416  00093E  0E11               	movlw	low STR_4
  4417  000940  6E0D               	movwf	LCD_String@string,c
  4418  000942  0E03               	movlw	high STR_4
  4419  000944  6E0E               	movwf	LCD_String@string+1,c
  4420  000946  EC26  F009         	call	_LCD_String	;wreg free
  4421                           
  4422                           ;RFID.c: 101:     }
  4423  00094A  0012               	return	
  4424  00094C                     l2317:
  4425                           
  4426                           ;RFID.c: 104:         SetLine(2);
  4427  00094C  0E02               	movlw	2
  4428  00094E  EC73  F00A         	call	_SetLine
  4429                           
  4430                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  4431  000952  0E01               	movlw	low STR_5
  4432  000954  6E0D               	movwf	LCD_String@string,c
  4433  000956  0E03               	movlw	high STR_5
  4434  000958  6E0E               	movwf	LCD_String@string+1,c
  4435  00095A  EC26  F009         	call	_LCD_String	;wreg free
  4436  00095E  0012               	return		;funcret
  4437  000960                     __end_of_check_RFID:
  4438                           	opt callstack 0
  4439                           
  4440 ;; *************** function _SetLine *****************
  4441 ;; Defined at:
  4442 ;;		line 107 in file "LCDIO.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  line            1    wreg     unsigned char 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  line            1   12[COMRAM] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      void 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4456 ;;      Params:         0       0       0       0
  4457 ;;      Locals:         1       0       0       0
  4458 ;;      Temps:          0       0       0       0
  4459 ;;      Totals:         1       0       0       0
  4460 ;;Total ram usage:        1 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    6
  4463 ;; This function calls:
  4464 ;;		_SendLCD
  4465 ;; This function is called by:
  4466 ;;		_main
  4467 ;;		_check_RFID
  4468 ;;		_display_RFID
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text30
  4473  0014E6                     __ptext30:
  4474                           	opt callstack 0
  4475  0014E6                     _SetLine:
  4476                           	opt callstack 23
  4477                           
  4478                           ;incstack = 0
  4479                           ;SetLine@line stored from wreg
  4480  0014E6  6E0D               	movwf	SetLine@line,c
  4481                           
  4482                           ;LCDIO.c: 109:     if(line == 1){
  4483  0014E8  040D               	decf	SetLine@line,w,c
  4484  0014EA  A4D8               	btfss	status,2,c
  4485  0014EC  D005               	goto	l2063
  4486                           
  4487                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4488  0014EE  0E00               	movlw	0
  4489  0014F0  6E0B               	movwf	SendLCD@type,c
  4490  0014F2  0E80               	movlw	128
  4491  0014F4  EC44  F00A         	call	_SendLCD
  4492  0014F8                     l2063:
  4493                           
  4494                           ;LCDIO.c: 113:     if(line == 2){
  4495  0014F8  0E02               	movlw	2
  4496  0014FA  180D               	xorwf	SetLine@line,w,c
  4497  0014FC  A4D8               	btfss	status,2,c
  4498  0014FE  D005               	goto	l2067
  4499                           
  4500                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4501  001500  0E00               	movlw	0
  4502  001502  6E0B               	movwf	SendLCD@type,c
  4503  001504  0EC0               	movlw	192
  4504  001506  EC44  F00A         	call	_SendLCD
  4505  00150A                     l2067:
  4506                           
  4507                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4508  00150A  0E21               	movlw	33
  4509  00150C                     u2347:
  4510  00150C  2EE8               	decfsz	wreg,f,c
  4511  00150E  D7FE               	bra	u2347
  4512  001510  F000               	nop	
  4513  001512  0012               	return		;funcret
  4514  001514                     __end_of_SetLine:
  4515                           	opt callstack 0
  4516                           
  4517 ;; *************** function _LCD_String *****************
  4518 ;; Defined at:
  4519 ;;		line 119 in file "LCDIO.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  string          2   12[COMRAM] PTR unsigned char 
  4522 ;;		 -> STR_5(16), STR_4(16), STR_3(16), main@temp1(16), 
  4523 ;;		 -> main@temp2(16), 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4535 ;;      Params:         2       0       0       0
  4536 ;;      Locals:         0       0       0       0
  4537 ;;      Temps:          0       0       0       0
  4538 ;;      Totals:         2       0       0       0
  4539 ;;Total ram usage:        2 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    6
  4542 ;; This function calls:
  4543 ;;		_SendLCD
  4544 ;; This function is called by:
  4545 ;;		_main
  4546 ;;		_check_RFID
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text31
  4551  00124C                     __ptext31:
  4552                           	opt callstack 0
  4553  00124C                     _LCD_String:
  4554                           	opt callstack 23
  4555                           
  4556                           ;LCDIO.c: 121: while(*string != 0){
  4557                           
  4558                           ;incstack = 0
  4559  00124C  D01A               	goto	l2077
  4560  00124E                     l2071:
  4561                           
  4562                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4563  00124E  0E01               	movlw	1
  4564  001250  6E0B               	movwf	SendLCD@type,c
  4565  001252  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4566  001256  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4567  00125A  6AF8               	clrf	tblptru,c
  4568  00125C  0E02               	movlw	(high __ramtop+-1)
  4569  00125E  64F7               	cpfsgt	tblptrh,c
  4570  001260  D003               	bra	u1337
  4571  001262  0008               	tblrd		*
  4572  001264  50F5               	movf	tablat,w,c
  4573  001266  D005               	bra	u1330
  4574  001268                     u1337:
  4575  001268  CFF6 FFE1          	movff	tblptrl,fsr1l
  4576  00126C  CFF7 FFE2          	movff	tblptrh,fsr1h
  4577  001270  50E7               	movf	indf1,w,c
  4578  001272                     u1330:
  4579  001272  EC44  F00A         	call	_SendLCD
  4580  001276  4A0D               	infsnz	LCD_String@string,f,c
  4581  001278  2A0E               	incf	LCD_String@string+1,f,c
  4582                           
  4583                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4584  00127A  0E21               	movlw	33
  4585  00127C                     u2357:
  4586  00127C  2EE8               	decfsz	wreg,f,c
  4587  00127E  D7FE               	bra	u2357
  4588  001280  F000               	nop	
  4589  001282                     l2077:
  4590                           
  4591                           ;LCDIO.c: 121: while(*string != 0){
  4592  001282  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4593  001286  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4594  00128A  6AF8               	clrf	tblptru,c
  4595  00128C  0E02               	movlw	(high __ramtop+-1)
  4596  00128E  64F7               	cpfsgt	tblptrh,c
  4597  001290  D003               	bra	u1347
  4598  001292  0008               	tblrd		*
  4599  001294  50F5               	movf	tablat,w,c
  4600  001296  D005               	bra	u1340
  4601  001298                     u1347:
  4602  001298  CFF6 FFE1          	movff	tblptrl,fsr1l
  4603  00129C  CFF7 FFE2          	movff	tblptrh,fsr1h
  4604  0012A0  50E7               	movf	indf1,w,c
  4605  0012A2                     u1340:
  4606  0012A2  0900               	iorlw	0
  4607  0012A4  B4D8               	btfsc	status,2,c
  4608  0012A6  0012               	return	
  4609  0012A8  D7D2               	goto	l2071
  4610  0012AA                     __end_of_LCD_String:
  4611                           	opt callstack 0
  4612                           
  4613 ;; *************** function _SendLCD *****************
  4614 ;; Defined at:
  4615 ;;		line 44 in file "LCDIO.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  Byte            1    wreg     unsigned char 
  4618 ;;  type            1   10[COMRAM] unsigned char 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  Byte            1   11[COMRAM] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4630 ;;      Params:         1       0       0       0
  4631 ;;      Locals:         1       0       0       0
  4632 ;;      Temps:          0       0       0       0
  4633 ;;      Totals:         2       0       0       0
  4634 ;;Total ram usage:        2 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    5
  4637 ;; This function calls:
  4638 ;;		_LCDout
  4639 ;; This function is called by:
  4640 ;;		_init_LCD
  4641 ;;		_SetLine
  4642 ;;		_LCD_String
  4643 ;;		_ClearLCD
  4644 ;;		_display_RFID
  4645 ;;		_ShiftLeft
  4646 ;;		_ShiftRight
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text32
  4651  001488                     __ptext32:
  4652                           	opt callstack 0
  4653  001488                     _SendLCD:
  4654                           	opt callstack 23
  4655                           
  4656                           ;incstack = 0
  4657                           ;SendLCD@Byte stored from wreg
  4658  001488  6E0C               	movwf	SendLCD@Byte,c
  4659                           
  4660                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4661  00148A  B00B               	btfsc	SendLCD@type,0,c
  4662  00148C  D002               	bra	u1275
  4663  00148E  9E89               	bcf	3977,7,c	;volatile
  4664  001490  D001               	bra	u1276
  4665  001492                     u1275:
  4666  001492  8E89               	bsf	3977,7,c	;volatile
  4667  001494                     u1276:
  4668                           
  4669                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4670  001494  380C               	swapf	SendLCD@Byte,w,c
  4671  001496  0B0F               	andlw	15
  4672  001498  0B0F               	andlw	15
  4673  00149A  EC7B  F008         	call	_LCDout
  4674                           
  4675                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4676  00149E  0E06               	movlw	6
  4677  0014A0                     u2367:
  4678  0014A0  2EE8               	decfsz	wreg,f,c
  4679  0014A2  D7FE               	bra	u2367
  4680  0014A4  D000               	nop2	
  4681                           
  4682                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4683  0014A6  500C               	movf	SendLCD@Byte,w,c
  4684  0014A8  0B0F               	andlw	15
  4685  0014AA  EC7B  F008         	call	_LCDout
  4686                           
  4687                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4688  0014AE  0E21               	movlw	33
  4689  0014B0                     u2377:
  4690  0014B0  2EE8               	decfsz	wreg,f,c
  4691  0014B2  D7FE               	bra	u2377
  4692  0014B4  F000               	nop	
  4693  0014B6  0012               	return		;funcret
  4694  0014B8                     __end_of_SendLCD:
  4695                           	opt callstack 0
  4696                           
  4697 ;; *************** function _LCDout *****************
  4698 ;; Defined at:
  4699 ;;		line 31 in file "LCDIO.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  number          1    wreg     unsigned char 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  number          1    9[COMRAM] unsigned char 
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4713 ;;      Params:         0       0       0       0
  4714 ;;      Locals:         1       0       0       0
  4715 ;;      Temps:          1       0       0       0
  4716 ;;      Totals:         2       0       0       0
  4717 ;;Total ram usage:        2 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    4
  4720 ;; This function calls:
  4721 ;;		_E_TOG
  4722 ;; This function is called by:
  4723 ;;		_SendLCD
  4724 ;;		_init_LCD
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text33
  4729  0010F6                     __ptext33:
  4730                           	opt callstack 0
  4731  0010F6                     _LCDout:
  4732                           	opt callstack 23
  4733                           
  4734                           ;incstack = 0
  4735                           ;LCDout@number stored from wreg
  4736  0010F6  6E0A               	movwf	LCDout@number,c
  4737                           
  4738                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4739  0010F8  C00A  F009         	movff	LCDout@number,??_LCDout
  4740  0010FC  0E01               	movlw	1
  4741  0010FE  1609               	andwf	??_LCDout,f,c
  4742  001100  508B               	movf	3979,w,c	;volatile
  4743  001102  1809               	xorwf	??_LCDout,w,c
  4744  001104  0BFE               	andlw	-2
  4745  001106  1809               	xorwf	??_LCDout,w,c
  4746  001108  6E8B               	movwf	3979,c	;volatile
  4747                           
  4748                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4749  00110A  C00A  F009         	movff	LCDout@number,??_LCDout
  4750  00110E  90D8               	bcf	status,0,c
  4751  001110  3209               	rrcf	??_LCDout,f,c
  4752  001112  0E01               	movlw	1
  4753  001114  1609               	andwf	??_LCDout,f,c
  4754  001116  4609               	rlncf	??_LCDout,f,c
  4755  001118  4609               	rlncf	??_LCDout,f,c
  4756  00111A  4609               	rlncf	??_LCDout,f,c
  4757  00111C  508B               	movf	3979,w,c	;volatile
  4758  00111E  1809               	xorwf	??_LCDout,w,c
  4759  001120  0BF7               	andlw	-9
  4760  001122  1809               	xorwf	??_LCDout,w,c
  4761  001124  6E8B               	movwf	3979,c	;volatile
  4762                           
  4763                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4764  001126  C00A  F009         	movff	LCDout@number,??_LCDout
  4765  00112A  90D8               	bcf	status,0,c
  4766  00112C  3209               	rrcf	??_LCDout,f,c
  4767  00112E  90D8               	bcf	status,0,c
  4768  001130  3209               	rrcf	??_LCDout,f,c
  4769  001132  0E01               	movlw	1
  4770  001134  1609               	andwf	??_LCDout,f,c
  4771  001136  508C               	movf	3980,w,c	;volatile
  4772  001138  1809               	xorwf	??_LCDout,w,c
  4773  00113A  0BFE               	andlw	-2
  4774  00113C  1809               	xorwf	??_LCDout,w,c
  4775  00113E  6E8C               	movwf	3980,c	;volatile
  4776                           
  4777                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4778  001140  C00A  F009         	movff	LCDout@number,??_LCDout
  4779  001144  90D8               	bcf	status,0,c
  4780  001146  3209               	rrcf	??_LCDout,f,c
  4781  001148  90D8               	bcf	status,0,c
  4782  00114A  3209               	rrcf	??_LCDout,f,c
  4783  00114C  90D8               	bcf	status,0,c
  4784  00114E  3209               	rrcf	??_LCDout,f,c
  4785  001150  0E01               	movlw	1
  4786  001152  1609               	andwf	??_LCDout,f,c
  4787  001154  4609               	rlncf	??_LCDout,f,c
  4788  001156  508C               	movf	3980,w,c	;volatile
  4789  001158  1809               	xorwf	??_LCDout,w,c
  4790  00115A  0BFD               	andlw	-3
  4791  00115C  1809               	xorwf	??_LCDout,w,c
  4792  00115E  6E8C               	movwf	3980,c	;volatile
  4793                           
  4794                           ;LCDIO.c: 39:  E_TOG();
  4795  001160  ECF9  F00A         	call	_E_TOG	;wreg free
  4796                           
  4797                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4798  001164  0E03               	movlw	3
  4799  001166                     u2387:
  4800  001166  2EE8               	decfsz	wreg,f,c
  4801  001168  D7FE               	bra	u2387
  4802  00116A  F000               	nop	
  4803  00116C  0012               	return		;funcret
  4804  00116E                     __end_of_LCDout:
  4805                           	opt callstack 0
  4806                           
  4807 ;; *************** function _E_TOG *****************
  4808 ;; Defined at:
  4809 ;;		line 23 in file "LCDIO.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;                  1    wreg      void 
  4816 ;; Registers used:
  4817 ;;		wreg
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4823 ;;      Params:         0       0       0       0
  4824 ;;      Locals:         0       0       0       0
  4825 ;;      Temps:          0       0       0       0
  4826 ;;      Totals:         0       0       0       0
  4827 ;;Total ram usage:        0 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    3
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_LCDout
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text34
  4838  0015F2                     __ptext34:
  4839                           	opt callstack 0
  4840  0015F2                     _E_TOG:
  4841                           	opt callstack 23
  4842                           
  4843                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4844                           
  4845                           ;incstack = 0
  4846  0015F2  8C89               	bsf	3977,6,c	;volatile
  4847                           
  4848                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4849  0015F4  0E03               	movlw	3
  4850  0015F6                     u2397:
  4851  0015F6  2EE8               	decfsz	wreg,f,c
  4852  0015F8  D7FE               	bra	u2397
  4853  0015FA  F000               	nop	
  4854                           
  4855                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4856  0015FC  9C89               	bcf	3977,6,c	;volatile
  4857  0015FE  0012               	return		;funcret
  4858  001600                     __end_of_E_TOG:
  4859                           	opt callstack 0
  4860                           
  4861 ;; *************** function _InterruptHandlerLow *****************
  4862 ;; Defined at:
  4863 ;;		line 77 in file "main.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;		None
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;		None
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		None
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       0       0       0
  4878 ;;      Locals:         0       0       0       0
  4879 ;;      Temps:          1       0       0       0
  4880 ;;      Totals:         1       0       0       0
  4881 ;;Total ram usage:        1 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    2
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		Interrupt level 1
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	intcodelo
  4892  000018                     __pintcodelo:
  4893                           	opt callstack 0
  4894  000018                     _InterruptHandlerLow:
  4895                           	opt callstack 20
  4896                           
  4897                           ;incstack = 0
  4898  000018  8056               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4899  00001A  CFE0 F008          	movff	bsr,??_InterruptHandlerLow
  4900  00001E  C008  FFE0         	movff	??_InterruptHandlerLow,bsr
  4901  000022  9056               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4902  000024  0010               	retfie	
  4903  000026                     __end_of_InterruptHandlerLow:
  4904                           	opt callstack 0
  4905                           
  4906 ;; *************** function _InterruptHandlerHigh *****************
  4907 ;; Defined at:
  4908 ;;		line 59 in file "main.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  throwaway       1    0        unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4922 ;;      Params:         0       0       0       0
  4923 ;;      Locals:         1       0       0       0
  4924 ;;      Temps:          2       0       0       0
  4925 ;;      Totals:         3       0       0       0
  4926 ;;Total ram usage:        3 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    1
  4929 ;; This function calls:
  4930 ;;		_processRFID
  4931 ;; This function is called by:
  4932 ;;		Interrupt level 2
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	intcode
  4937  000008                     __pintcode:
  4938                           	opt callstack 0
  4939  000008                     _InterruptHandlerHigh:
  4940                           	opt callstack 20
  4941                           
  4942                           ;incstack = 0
  4943  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4944  00000A  EF29  F00A         	goto	int_func
  4945                           
  4946                           	psect	intcode_body
  4947  001452                     __pintcode_body:
  4948                           	opt callstack 20
  4949  001452                     int_func:
  4950                           	opt callstack 20
  4951  001452  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4952  001456  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4953                           
  4954                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4955  00145A  AA9E               	btfss	3998,5,c	;volatile
  4956  00145C  D00E               	goto	i2l75
  4957  00145E  5055               	movf	_robot_mode,w,c	;volatile
  4958  001460  A4D8               	btfss	status,2,c
  4959  001462  D00B               	goto	i2l75
  4960                           
  4961                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4962  001464  0EE3               	movlw	low _RFIDbuf
  4963  001466  6E01               	movwf	processRFID@RFIDbuf,c
  4964  001468  0E00               	movlw	high _RFIDbuf
  4965  00146A  6E02               	movwf	processRFID@RFIDbuf+1,c
  4966  00146C  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4967  001470  ECA9  F009         	call	_processRFID	;wreg free
  4968  001474  0100               	movlb	0	; () banked
  4969  001476  6FC2               	movwf	_RFID_flag& (0+255),b	;volatile
  4970                           
  4971                           ;main.c: 67:     }
  4972  001478  D001               	goto	i2l77
  4973  00147A                     i2l75:
  4974  00147A  50AE               	movf	4014,w,c	;volatile
  4975  00147C                     i2l77:
  4976  00147C  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4977  001480  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4978  001484  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4979  001486  0011               	retfie		f
  4980  001488                     __end_of_InterruptHandlerHigh:
  4981                           	opt callstack 0
  4982                           
  4983 ;; *************** function _processRFID *****************
  4984 ;; Defined at:
  4985 ;;		line 34 in file "RFID.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  4988 ;;		 -> RFIDbuf(12), 
  4989 ;;  latestChar      1    2[COMRAM] unsigned char 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  i               1    3[COMRAM] unsigned char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      unsigned char 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5001 ;;      Params:         3       0       0       0
  5002 ;;      Locals:         1       0       0       0
  5003 ;;      Temps:          0       0       0       0
  5004 ;;      Totals:         4       0       0       0
  5005 ;;Total ram usage:        4 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_InterruptHandlerHigh
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text37
  5015  001352                     __ptext37:
  5016                           	opt callstack 0
  5017  001352                     _processRFID:
  5018                           	opt callstack 20
  5019                           
  5020                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  5021                           
  5022                           ;incstack = 0
  5023  001352  0E03               	movlw	3
  5024  001354  1803               	xorwf	processRFID@latestChar,w,c
  5025  001356  A4D8               	btfss	status,2,c
  5026  001358  D002               	goto	i2l2169
  5027                           
  5028                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  5029  00135A  0E01               	movlw	1
  5030  00135C  0012               	return	
  5031  00135E                     i2l2169:
  5032                           
  5033                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  5034  00135E  0E02               	movlw	2
  5035  001360  1803               	xorwf	processRFID@latestChar,w,c
  5036  001362  A4D8               	btfss	status,2,c
  5037  001364  D012               	goto	i2l2189
  5038                           
  5039                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  5040  001366  0E00               	movlw	0
  5041  001368  6E54               	movwf	processRFID@position_in_buf,c
  5042                           
  5043                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  5044  00136A  0E00               	movlw	0
  5045  00136C  6E04               	movwf	processRFID@i,c
  5046  00136E                     i2l2177:
  5047                           
  5048                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  5049  00136E  5004               	movf	processRFID@i,w,c
  5050  001370  2401               	addwf	processRFID@RFIDbuf,w,c
  5051  001372  6ED9               	movwf	fsr2l,c
  5052  001374  0E00               	movlw	0
  5053  001376  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  5054  001378  6EDA               	movwf	fsr2h,c
  5055  00137A  0E00               	movlw	0
  5056  00137C  6EDF               	movwf	indf2,c
  5057                           
  5058                           ;RFID.c: 56:            }
  5059  00137E  2A04               	incf	processRFID@i,f,c
  5060  001380  0E0B               	movlw	11
  5061  001382  6404               	cpfsgt	processRFID@i,c
  5062  001384  D7F4               	goto	i2l2177
  5063  001386                     i2u143_40:
  5064                           
  5065                           ;RFID.c: 58:            return 0;
  5066  001386  0E00               	movlw	0
  5067  001388  0012               	return	
  5068  00138A                     i2l2189:
  5069                           
  5070                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  5071  00138A  5054               	movf	processRFID@position_in_buf,w,c
  5072  00138C  2401               	addwf	processRFID@RFIDbuf,w,c
  5073  00138E  6ED9               	movwf	fsr2l,c
  5074  001390  0E00               	movlw	0
  5075  001392  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  5076  001394  6EDA               	movwf	fsr2h,c
  5077  001396  C003  FFDF         	movff	processRFID@latestChar,indf2
  5078                           
  5079                           ;RFID.c: 64:             position_in_buf++;
  5080  00139A  2A54               	incf	processRFID@position_in_buf,f,c
  5081  00139C  D7F4               	goto	i2u143_40
  5082  00139E                     __end_of_processRFID:
  5083                           	opt callstack 0
  5084                           
  5085                           	psect	rparam
  5086  0000                     
  5087                           	psect	temp
  5088  000056                     btemp:
  5089                           	opt callstack 0
  5090  000056                     	ds	1
  5091  0000                     int$flags	set	btemp
  5092  0000                     wtemp8	set	btemp+1
  5093  0000                     ttemp5	set	btemp+1
  5094  0000                     ttemp6	set	btemp+4
  5095  0000                     ttemp7	set	btemp+8
  5096                           tosu	equ	0xFFF
  5097                           tosh	equ	0xFFE
  5098                           tosl	equ	0xFFD
  5099                           stkptr	equ	0xFFC
  5100                           pclatu	equ	0xFFB
  5101                           pclath	equ	0xFFA
  5102                           pcl	equ	0xFF9
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           indf0	equ	0xFEF
  5110                           postinc0	equ	0xFEE
  5111                           postdec0	equ	0xFED
  5112                           preinc0	equ	0xFEC
  5113                           plusw0	equ	0xFEB
  5114                           fsr0h	equ	0xFEA
  5115                           fsr0l	equ	0xFE9
  5116                           wreg	equ	0xFE8
  5117                           indf1	equ	0xFE7
  5118                           postinc1	equ	0xFE6
  5119                           postdec1	equ	0xFE5
  5120                           preinc1	equ	0xFE4
  5121                           plusw1	equ	0xFE3
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           bsr	equ	0xFE0
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           preinc2	equ	0xFDC
  5129                           plusw2	equ	0xFDB
  5130                           fsr2h	equ	0xFDA
  5131                           fsr2l	equ	0xFD9
  5132                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     77      85
    BANK0           160     95     143
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1780_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    process_signal@S	PTR struct Sensor size(2) Largest target is 4
		 -> main@sensorR(BANK0[4]), main@sensorL(BANK0[4]), 

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[16]), main@temp1(BANK0[16]), 
		 -> main@temp2(BANK0[16]), 

    init_motors@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motors@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _process_signal->___wmul
    _moveToBeacon->_turnLeft
    _moveToBeacon->_turnRight
    _turnRight->_setMotorPWM
    _turnLeft->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _init_motors->_setMotorPWM
    _setMotorPWM->___wmul
    ___wmul->___awdiv
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0   33437
                                             32 BANK0     63    63      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                         _check_RFID
                      _classify_data
                       _display_RFID
                        _init_motors
                       _moveToBeacon
                     _process_signal
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7709
                                             16 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                              8 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             67 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             35 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             24 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              8 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             17 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              8 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              8 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              8 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1274
                            _initPWM
                           _init_LCD
                          _init_RFID
                       _init_sensors
 ---------------------------------------------------------------------------------
 (2) _init_sensors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1154
                                             12 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _process_signal                                       4     2      2    1432
                                             22 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                         6     1      5    8611
                                             38 COMRAM     6     1      5
                     _fullSpeedAhead
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     3      4    2677
                                             31 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             7     3      4    2677
                                             31 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     2      4    2677
                                             31 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motors                                          4     0      4    2763
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2303
                                             22 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     499
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     648
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3408
                                             13 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1066
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        6     2      4     263
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3492
                                             14 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1110
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1491
                                             12 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1066
                                             10 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              8 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerLow                                  1     1      0       0
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                                3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (11) _processRFID                                         4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motors
     _setMotorPWM
       ___awdiv
       ___wmul
         ___awdiv (ARG)
   _moveToBeacon
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
     _turnLeft
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
     _turnRight
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
   _process_signal
     ___awdiv
     ___wmul
       ___awdiv (ARG)
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensors
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      8F       5       89.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4D      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      E4      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 09:41:39 2020

                           l67 14BC                   ___awdiv@sign 000E                             bsr 000FE0  
          ___wmul@multiplicand 0013                  ?_display_RFID 000E                    ?_LCD_String 000D  
                          l138 0A28                            l333 0E80                            l343 0514  
                          l345 051C                            l806 0C1A            display_RFID@dataBuf 000E  
                          l816 0D90                            _pad 0E52                 moveToBeacon@mL 0028  
               moveToBeacon@mR 002A                            wreg 000FE8                   processRFID@i 0004  
                 __CFG_LVP$OFF 000000                           l2107 1022                           l2301 085A  
                         l2071 124E                           l2063 14F8                           l2231 140E  
                         l2127 1196                           l2067 150A                           l2307 089C  
                         l2251 1202                           l2077 1282                           l2317 094C  
                         l2501 0C04                           l2239 1416                           l2087 10A0  
                         l2511 0D32                           l2257 1226                           l2601 12BE  
                         l2283 13B0                           l2435 0DCA                           l2603 12E4  
                         l2517 0D7A                           l2509 0D1E                           l2445 1424  
                         l2453 151E                           l2533 0554                           l2621 0360  
                         l2295 0818                           l2455 1522                           l2471 0E8A  
                         l2543 0640                           l1921 0FB8                           l1913 0F9A  
                         l2449 143A                           l2465 0E6A                           l1931 0FD8  
                         l1907 0F8A                           l2491 0BA8                           l2475 0EA2  
                         l2469 0E78                           l2573 077E                           l2661 048C  
                         l1919 0FB0                           l1935 0FE2                           l2479 0ECE  
                         l2583 07C4                           l2663 0490                           l2489 0B94  
                         l2665 0498                           l1939 0FF0                           l2579 07BA  
                         l2683 04EA                           l2675 04B2                           l2659 0484  
                         l1949 0A00                           l2589 07DC                           ?_pad 0019  
                         STR_1 033B                           STR_2 0331                           STR_3 0321  
                         STR_4 0311                           STR_5 0301                           u1200 0FBC  
                         u2000 0D36                           u2030 050A                           u1330 1272  
                         u1340 12A2                           u1244 09D4                           u2060 066A  
                         u1245 09D0                           u2061 0668                           u1254 0A1C  
                         u2070 0678                           _LATB 000F8A                           u1255 0A18  
                         u2207 04BE                           u1600 08BC                           u1440 13FA  
                         u1360 10F4                           u2080 067C                           u2160 04E2  
                         u1337 1268                           u1265 0A74                           u2217 0C5A  
                         u1610 08CA                           u1450 140A                           u1530 13DC  
                         u1370 1076                           u2170 04EE                           u1275 1492  
                         u1347 1298                           u2307 0CFC                           u2227 0C70  
                         u1276 1494                           u1700 090C                           u1620 08CC  
                         u1380 11DC                           u2317 1058                           u2237 0C80  
                         u1710 0928                           u1630 08DA                           u2327 10D6  
                         u2247 0C8E                           u1720 092A                           u1640 08DC  
                         u2337 15E8                           u2257 0C9C                           u1650 08EA  
                         u2347 150C                           u2267 0CAE                           u1660 08EC  
                         u1580 08B0                           u2357 127C                           u2277 0CC0  
                         u2197 044C                           u1670 08FA                           u1590 08BA  
                         u2367 14A0                           u2287 0CD6                           u1680 08FC  
                         u2377 14B0                           u2297 0CEA                           u1690 090A  
                         u2387 1166                           u1860 0DC2                           u2397 15F6  
                         u1951 0B74                           u1880 0E0A                           u1970 0BAC  
                         i2l75 147A                           i2l77 147C                           _dbuf 00C3  
                         _main 0346                           _prec 0050                           _nout 00BF  
                         pad@i 0020                           pad@p 001D                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 0022                           fsr2l 000FD9  
                         btemp 0056                           _utoa 04F8                    main@sensorL 00A5  
                  main@sensorR 00A9                           prodh 000FF4                           prodl 000FF3  
                         start 0026                   ___param_bank 000000                __end_of_SendLCD 14B8  
                        ??_pad 001F                __end_of_SetLine 1514                 ??_display_RFID 0010  
                        ?_main 0001                __end_of___awdiv 0FFA                          ?_utoa 0024  
              __end_of___lodiv 0C3C                ___awdiv@divisor 000B                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                __end_of___lomod 0DB2  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 000D  
                        _RCREG 000FAE                          _E_TOG 15F2                   vfpfcnvrt@fmt 0046  
                 vfpfcnvrt@llu 0060                          _SPBRG 000FAF                   ?_init_motors 0020  
              __end_of_initPWM 15D8                          _flags 0052                          _fputc 0DB2  
                        _fputs 141A                          _setup 14B8                          pad@fp 0019  
                        _width 004E                          _putch 1600                          main@i 00A3  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0057  
                        ttemp6 005A                          ttemp7 005E                          utoa@d 0026  
                        utoa@i 0042                          utoa@n 003A                          utoa@p 0036  
                        utoa@w 0038                          status 000FD8                          wtemp8 0057  
          __size_of_LCD_String 005E                __end_of_sprintf 1352               __end_of_ClearLCD 15F2  
             ___lodiv@dividend 0009                 __CFG_MCLRE$OFF 000000                __initialization 153E  
                 __end_of_main 04F8                   __end_of_utoa 06A6                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000D                         ??_main 0080    moveToBeacon@beacon_location 002C  
                       ??_utoa 002E                  __activetblptr 000002                         ?_E_TOG 0001  
             ___lodiv@quotient 0019                   ?_setMotorPWM 0017                         ?_fputc 0009  
                       ?_fputs 0012               ___awdiv@dividend 0009                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         ?_putch 0001  
                       i2l2177 136E                         i2l2169 135E                         i2l2189 138A  
                       _LCDout 10F6                    SendLCD@Byte 000C                         _OSCCON 000FD3  
                       _PTCON0 000F7F                         _PTCON1 000F7E                         _SPBRGH 000FB0  
                       _PTPERH 000F7A                         _PTPERL 000F7B                    SendLCD@type 000B  
          main@beacon_location 00C1                      ??_SendLCD 000C                  ?_init_sensors 0001  
                    ??_SetLine 000D                   vfprintf@cfmt 006E                  display_RFID@i 0010  
                       ___wmul 1564        classify_data@difference 000D                      ??___awdiv 000D  
                    ??___lodiv 0019                      ??___lomod 0019               __end_of_init_LCD 0D04  
                       clear_0 1544                         clear_1 1550               ___awdiv@quotient 000F  
                       pad@buf 001B                         _strlen 1514                      ??_initPWM 000B  
                       fputc@c 0009                         fputs@c 0016                         fputs@i 0017  
                       fputs@s 0012               ??_process_signal 0019                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 1300                         utoa@fp 0024  
                    ??_sprintf 004E                   ?_processRFID 0001               __end_of_turnLeft 10F6  
         __end_of_display_RFID 13DE                     __accesstop 0060        __end_of__initialization 1556  
              fullSpeedAhead@i 0024                  ___rparam_used 000001                 ??_init_sensors 0009  
                  SetLine@line 000D                  __end_of_E_TOG 1600                 __pcstackCOMRAM 0001  
                __end_of_fputc 0E52                  __end_of_fputs 1452                  __end_of_setup 14E6  
                __end_of_putch 1602                   ??_LCD_String 000F                        ??_E_TOG 0009  
__size_of_InterruptHandlerHigh 1480                      ?_ClearLCD 0001    __end_of_InterruptHandlerLow 0026  
        __end_of_classify_data 141A                        ??_fputc 000D                     _check_RFID 0810  
                      ??_fputs 0016           __size_of_init_motors 00EA                        ??_setup 000E  
                      ??_putch 0009                     __pbssBANK0 00BF                        ?_LCDout 0001  
           __size_of_init_RFID 001A             __end_of_LCD_String 12AA                        ?___wmul 0011  
                ?_moveToBeacon 0027                        _CAP1CON 000F63                        _CAP2CON 000F62  
      __size_of_fullSpeedAhead 0070                        ?_strlen 0009                     ??_ClearLCD 000D  
           __size_of_vfpfcnvrt 016A                        _RFIDbuf 00E3                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E               ___lomod@dividend 0009           __size_of_setMotorPWM 0124  
                    ?_init_LCD 0001                __size_of_LCDout 0078             __size_of_turnRight 007E  
                      _SendLCD 1488                        __Hparam 0000                        _SetLine 14E6  
                      __Lparam 0000                 ??_moveToBeacon 002C          processRFID@latestChar 0003  
                      ___awdiv 0F76                __size_of___wmul 0026                        ___lodiv 0B6E  
                      ___lomod 0D04                      ?_vfprintf 0068                   __psmallconst 0300  
             initPWM@PWMperiod 0009                        __pcinit 153E                        __ramtop 0300  
                    ?_turnLeft 0020                        __ptext0 0346                        __ptext1 1300  
                      __ptext2 12AA                        __ptext3 06A6                        __ptext4 04F8  
                      __ptext5 0E52                        __ptext6 1514                        __ptext7 141A  
                      __ptext8 0DB2                        __ptext9 1600              __end_of_init_RFID 15BE  
             check_RFID@hexBuf 0013                __size_of_strlen 002A                        _initPWM 15BE  
                 __size_of_pad 0096           __end_of_init_sensors 15A4                   LCDout@number 000A  
        __size_of_display_RFID 0040                    ?_check_RFID 000F                        _sprintf 1300  
               __pintcode_body 1452           end_of_initialization 1556             setMotorPWM@PWMduty 001E  
                   ??_init_LCD 000D           __size_of_processRFID 004C                        fputc@fp 000B  
                __Lmediumconst 0000                        int_func 1452                        fputs@fp 0014  
                    _RFID_flag 00C2              __end_of_vfpfcnvrt 0810                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_vfprintf 004E                        strlen@a 000B  
                      strlen@s 0009                     _robot_mode 0055                   _display_RFID 139E  
              process_signal@S 0017                     ??_turnLeft 0024                      _PORTDbits 000F83  
            __end_of_turnRight 1078                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95               fullSpeedAhead@mL 0020  
             fullSpeedAhead@mR 0022                 __end_of_LCDout 116E                      _TXSTAbits 000FAC  
                   main@motorL 00AD                     main@motorR 00B6                 _fullSpeedAhead 116E  
          __size_of_check_RFID 0150                    vfpfcnvrt@ap 0048                    vfpfcnvrt@fp 0044  
               __end_of___wmul 158A                    _BAUDCONbits 000FAA                 __end_of_strlen 153E  
          start_initialization 153E                ___lodiv@divisor 0011                ___lodiv@counter 0021  
                  __end_of_pad 0EE8              __size_of_ClearLCD 001A           __end_of_moveToBeacon 124C  
                     ??_LCDout 0009   __end_of_InterruptHandlerHigh 1488                    vfprintf@fmt 006A  
       __end_of_fullSpeedAhead 11DE                       ??___wmul 0015          __size_of_init_sensors 001A  
                     ??_strlen 000B                    __pbssCOMRAM 004E                  ??_init_motors 0024  
                __pcstackBANK0 0060          main@previous_location 00A2   __size_of_InterruptHandlerLow 000E  
      __size_of_process_signal 008E              __size_of_init_LCD 00C8                       ?_SendLCD 000B  
                     ?_SetLine 0001                   _init_sensors 158A                ?_fullSpeedAhead 0020  
                    __pintcode 0008                       ?___awdiv 0009         __size_of_classify_data 003C  
                     ?___lodiv 0009                       ?___lomod 0009             check_RFID@checksum 0024  
                  __pintcodelo 0018              __size_of_vfprintf 0056                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       _CAP2BUFH 000F67                       _CAP2BUFL 000F66  
              ___lomod@divisor 0011                       ?_initPWM 0009                    __smallconst 0300  
              ___lomod@counter 0019                 __size_of_E_TOG 000E              __size_of_turnLeft 007E  
                    _init_RFID 15A4                  ??_setMotorPWM 0019                   ??_check_RFID 0011  
                     ?_sprintf 0070                 __size_of_fputc 00A0                 __size_of_fputs 0038  
               __size_of_setup 002E                 __size_of_putch 0002                check_RFID@byte1 001F  
              check_RFID@byte2 0020                check_RFID@byte3 0021                check_RFID@byte4 0022  
              check_RFID@byte5 0023            __end_of_init_motors 0B6E                 ___wmul@product 0015  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 0020  
                     i2u143_40 1386                    turnRight@mR 0022                       _PIR1bits 000F9E  
                     _RCONbits 000FD0                      _vfpfcnvrt 06A6             __end_of_check_RFID 0960  
            ___wmul@multiplier 0011                   setMotorPWM@m 0017          __size_of_moveToBeacon 006E  
         _InterruptHandlerHigh 0008                       _ClearLCD 15D8                      main@temp1 0092  
                    main@temp2 0082                     ?_init_RFID 0001                      _turnRight 0FFA  
                ??_processRFID 0004                  _classify_data 13DE            __end_of_setMotorPWM 0A84  
                  check_RFID@i 0025                       __Hrparam 0000      moveToBeacon@prev_location 0027  
             __size_of_SendLCD 0030                     vfprintf@ap 006C                       __Lrparam 0000  
                   vfprintf@fp 0068               __size_of_SetLine 002E                   _moveToBeacon 11DE  
             __size_of___awdiv 0084               __size_of___lodiv 00CE               __size_of___lomod 00AE  
                   ?_vfpfcnvrt 0044          ?_InterruptHandlerHigh 0001                     sprintf@fmt 0072  
             __size_of_initPWM 001A                    _init_motors 0A84                 ?_classify_data 0009  
            check_RFID@dataBuf 000F                     ?_turnRight 0020                       __ptext10 0D04  
                     __ptext11 0B6E                       __ptext20 1078                       __ptext12 14B8  
                     __ptext21 116E                       __ptext13 158A                       __ptext30 14E6  
                     __ptext22 0A84                       __ptext14 15A4                       __ptext31 124C  
                     __ptext23 0960                       __ptext15 0C3C                       __ptext32 1488  
                     __ptext24 1564                       __ptext16 15BE                       __ptext33 10F6  
                     __ptext25 0F76                       __ptext17 0EE8                       __ptext34 15F2  
                     __ptext26 139E                       __ptext18 11DE                       __ptext27 15D8  
                     __ptext19 0FFA                       __ptext28 13DE                       __ptext37 1352  
                     __ptext29 0810               __size_of_sprintf 0052                       _init_LCD 0C3C  
               _process_signal 0EE8                  __size_of_main 01B2                  __size_of_utoa 01AE  
                   turnLeft@mL 0020                     turnLeft@mR 0022            __end_of_processRFID 139E  
                   turnRight@i 0025                       int$flags 0056                       _vfprintf 12AA  
          _InterruptHandlerLow 0018                     _LCD_String 124C                       _turnLeft 1078  
                   _INTCONbits 000FF2    classify_data@right_smoothed 000B                    ??_init_RFID 0009  
                  _setMotorPWM 0960         __end_of_process_signal 0F76                       intlevel1 0000  
                     intlevel2 0000                      sprintf@ap 0078           ?_InterruptHandlerLow 0001  
             ??_fullSpeedAhead 0024                  init_motors@mL 0020                  init_motors@mR 0022  
                    turnLeft@i 0025                     _OSCCONbits 000FD3     classify_data@left_smoothed 0009  
   processRFID@position_in_buf 0054                    ??_vfpfcnvrt 004A         ??_InterruptHandlerHigh 0005  
                     sprintf@f 007A                       sprintf@s 0070                ??_classify_data 000D  
                  ??_turnRight 0024                    _processRFID 1352                ?_process_signal 0017  
        ??_InterruptHandlerLow 0008  
