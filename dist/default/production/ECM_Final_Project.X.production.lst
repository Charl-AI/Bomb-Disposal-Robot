

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 10:41:15 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 2.05
    55                           ; Generated 20/12/2018 GMT
    56                           ; 
    57                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4331 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     _CAP1CON	set	3939
    89  0000                     _ANSEL1	set	4025
    90  0000                     _ANSEL0	set	4024
    91  0000                     _T5CON	set	4023
    92  0000                     _IPR1bits	set	3999
    93  0000                     _PIE1bits	set	3997
    94  0000                     _RCSTAbits	set	4011
    95  0000                     _TXSTAbits	set	4012
    96  0000                     _BAUDCONbits	set	4010
    97  0000                     _SPBRGH	set	4016
    98  0000                     _SPBRG	set	4015
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISCbits	set	3988
   101  0000                     _LATDbits	set	3980
   102  0000                     _LATCbits	set	3979
   103  0000                     _LATAbits	set	3977
   104  0000                     _LATB	set	3978
   105  0000                     _PTPERH	set	3962
   106  0000                     _PTPERL	set	3963
   107  0000                     _PWMCON1	set	3950
   108  0000                     _PWMCON0	set	3951
   109  0000                     _PTCON1	set	3966
   110  0000                     _PTCON0	set	3967
   111  0000                     _PORTDbits	set	3971
   112  0000                     _CAP1BUFL	set	3944
   113  0000                     _CAP1BUFH	set	3945
   114  0000                     _RCREG	set	4014
   115  0000                     _PIR1bits	set	3998
   116  0000                     _TRISDbits	set	3989
   117  0000                     _TRISBbits	set	3987
   118  0000                     _RCONbits	set	4048
   119  0000                     _INTCONbits	set	4082
   120  0000                     _OSCCONbits	set	4051
   121  0000                     _OSCCON	set	4051
   122  0000                     _PDC1H	set	3958
   123  0000                     _PDC1L	set	3959
   124  0000                     _PDC0H	set	3960
   125  0000                     _PDC0L	set	3961
   126                           
   127                           	psect	smallconst
   128  000300                     __psmallconst:
   129                           	opt callstack 0
   130  000300  00                 	db	0
   131  000301                     STR_5:
   132  000301  43                 	db	67	;'C'
   133  000302  48                 	db	72	;'H'
   134  000303  45                 	db	69	;'E'
   135  000304  43                 	db	67	;'C'
   136  000305  4B                 	db	75	;'K'
   137  000306  53                 	db	83	;'S'
   138  000307  55                 	db	85	;'U'
   139  000308  4D                 	db	77	;'M'
   140  000309  20                 	db	32
   141  00030A  46                 	db	70	;'F'
   142  00030B  41                 	db	65	;'A'
   143  00030C  49                 	db	73	;'I'
   144  00030D  4C                 	db	76	;'L'
   145  00030E  45                 	db	69	;'E'
   146  00030F  44                 	db	68	;'D'
   147  000310  00                 	db	0
   148  000311                     STR_4:
   149  000311  43                 	db	67	;'C'
   150  000312  48                 	db	72	;'H'
   151  000313  45                 	db	69	;'E'
   152  000314  43                 	db	67	;'C'
   153  000315  4B                 	db	75	;'K'
   154  000316  53                 	db	83	;'S'
   155  000317  55                 	db	85	;'U'
   156  000318  4D                 	db	77	;'M'
   157  000319  20                 	db	32
   158  00031A  50                 	db	80	;'P'
   159  00031B  41                 	db	65	;'A'
   160  00031C  53                 	db	83	;'S'
   161  00031D  53                 	db	83	;'S'
   162  00031E  45                 	db	69	;'E'
   163  00031F  44                 	db	68	;'D'
   164  000320  00                 	db	0
   165  000321                     STR_3:
   166  000321  52                 	db	82	;'R'
   167  000322  45                 	db	69	;'E'
   168  000323  53                 	db	83	;'S'
   169  000324  45                 	db	69	;'E'
   170  000325  54                 	db	84	;'T'
   171  000326  54                 	db	84	;'T'
   172  000327  49                 	db	73	;'I'
   173  000328  4E                 	db	78	;'N'
   174  000329  47                 	db	71	;'G'
   175  00032A  20                 	db	32
   176  00032B  52                 	db	82	;'R'
   177  00032C  4F                 	db	79	;'O'
   178  00032D  42                 	db	66	;'B'
   179  00032E  4F                 	db	79	;'O'
   180  00032F  54                 	db	84	;'T'
   181  000330  00                 	db	0
   182  000331                     STR_1:
   183  000331  73                 	db	115	;'s'
   184  000332  6D                 	db	109	;'m'
   185  000333  6F                 	db	111	;'o'
   186  000334  6F                 	db	111	;'o'
   187  000335  74                 	db	116	;'t'
   188  000336  68                 	db	104	;'h'
   189  000337  65                 	db	101	;'e'
   190  000338  64                 	db	100	;'d'
   191  000339  20                 	db	32
   192  00033A  25                 	db	37
   193  00033B  75                 	db	117	;'u'
   194  00033C  20                 	db	32
   195  00033D  00                 	db	0
   196  00033E                     STR_2:
   197  00033E  72                 	db	114	;'r'
   198  00033F  61                 	db	97	;'a'
   199  000340  77                 	db	119	;'w'
   200  000341  20                 	db	32
   201  000342  25                 	db	37
   202  000343  75                 	db	117	;'u'
   203  000344  20                 	db	32
   204  000345  00                 	db	0
   205                           
   206                           ; #config settings
   207  000346  00                 	db	0	; dummy byte at the end
   208  0000                     
   209                           	psect	cinit
   210  001488                     __pcinit:
   211                           	opt callstack 0
   212  001488                     start_initialization:
   213                           	opt callstack 0
   214  001488                     __initialization:
   215                           	opt callstack 0
   216                           
   217                           ; Clear objects allocated to BANK0 (48 bytes)
   218  001488  EE00  F0BB         	lfsr	0,__pbssBANK0
   219  00148C  0E30               	movlw	48
   220  00148E                     clear_0:
   221  00148E  6AEE               	clrf	postinc0,c
   222  001490  06E8               	decf	wreg,f,c
   223  001492  E1FD               	bnz	clear_0
   224                           
   225                           ; Clear objects allocated to COMRAM (8 bytes)
   226  001494  EE00  F04E         	lfsr	0,__pbssCOMRAM
   227  001498  0E08               	movlw	8
   228  00149A                     clear_1:
   229  00149A  6AEE               	clrf	postinc0,c
   230  00149C  06E8               	decf	wreg,f,c
   231  00149E  E1FD               	bnz	clear_1
   232  0014A0                     end_of_initialization:
   233                           	opt callstack 0
   234  0014A0                     __end_of__initialization:
   235                           	opt callstack 0
   236  0014A0  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   237  0014A2  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   238  0014A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   239  0014A6  6EF8               	movwf	tblptru,c
   240  0014A8  0100               	movlb	0
   241  0014AA  EF7B  F002         	goto	_main	;jump to C main() function
   242                           
   243                           	psect	bssCOMRAM
   244  00004E                     __pbssCOMRAM:
   245                           	opt callstack 0
   246  00004E                     _width:
   247                           	opt callstack 0
   248  00004E                     	ds	2
   249  000050                     _prec:
   250                           	opt callstack 0
   251  000050                     	ds	2
   252  000052                     _flags:
   253                           	opt callstack 0
   254  000052                     	ds	2
   255  000054                     processRFID@position_in_buf:
   256                           	opt callstack 0
   257  000054                     	ds	1
   258  000055                     _robot_mode:
   259                           	opt callstack 0
   260  000055                     	ds	1
   261                           
   262                           	psect	bssBANK0
   263  0000BB                     __pbssBANK0:
   264                           	opt callstack 0
   265  0000BB                     _nout:
   266                           	opt callstack 0
   267  0000BB                     	ds	2
   268  0000BD                     main@beacon_location:
   269                           	opt callstack 0
   270  0000BD                     	ds	1
   271  0000BE                     _RFID_flag:
   272                           	opt callstack 0
   273  0000BE                     	ds	1
   274  0000BF                     _dbuf:
   275                           	opt callstack 0
   276  0000BF                     	ds	32
   277  0000DF                     _RFIDbuf:
   278                           	opt callstack 0
   279  0000DF                     	ds	12
   280                           
   281                           	psect	cstackBANK0
   282  000060                     __pcstackBANK0:
   283                           	opt callstack 0
   284  000060                     vfpfcnvrt@llu:
   285                           	opt callstack 0
   286                           
   287                           ; 8 bytes @ 0x0
   288  000060                     	ds	8
   289  000068                     ?_vfprintf:
   290                           	opt callstack 0
   291  000068                     vfprintf@fp:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0x8
   295  000068                     	ds	2
   296  00006A                     vfprintf@fmt:
   297                           	opt callstack 0
   298                           
   299                           ; 2 bytes @ 0xA
   300  00006A                     	ds	2
   301  00006C                     vfprintf@ap:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0xC
   305  00006C                     	ds	2
   306  00006E                     vfprintf@cfmt:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0xE
   310  00006E                     	ds	2
   311  000070                     ?_sprintf:
   312                           	opt callstack 0
   313  000070                     sprintf@s:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x10
   317  000070                     	ds	2
   318  000072                     sprintf@fmt:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0x12
   322  000072                     	ds	6
   323  000078                     sprintf@ap:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0x18
   327  000078                     	ds	2
   328  00007A                     sprintf@f:
   329                           	opt callstack 0
   330                           
   331                           ; 6 bytes @ 0x1A
   332  00007A                     	ds	6
   333  000080                     ??_main:
   334                           
   335                           ; 1 bytes @ 0x20
   336  000080                     	ds	2
   337  000082                     main@temp2:
   338                           	opt callstack 0
   339                           
   340                           ; 16 bytes @ 0x22
   341  000082                     	ds	16
   342  000092                     main@temp1:
   343                           	opt callstack 0
   344                           
   345                           ; 16 bytes @ 0x32
   346  000092                     	ds	16
   347  0000A2                     main@previous_location:
   348                           	opt callstack 0
   349                           
   350                           ; 1 bytes @ 0x42
   351  0000A2                     	ds	1
   352  0000A3                     main@i:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x43
   356  0000A3                     	ds	2
   357  0000A5                     main@sensor:
   358                           	opt callstack 0
   359                           
   360                           ; 4 bytes @ 0x45
   361  0000A5                     	ds	4
   362  0000A9                     main@motorL:
   363                           	opt callstack 0
   364                           
   365                           ; 9 bytes @ 0x49
   366  0000A9                     	ds	9
   367  0000B2                     main@motorR:
   368                           	opt callstack 0
   369                           
   370                           ; 9 bytes @ 0x52
   371  0000B2                     	ds	9
   372                           
   373                           	psect	cstackCOMRAM
   374  000001                     __pcstackCOMRAM:
   375                           	opt callstack 0
   376  000001                     processRFID@RFIDbuf:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x0
   380  000001                     	ds	2
   381  000003                     processRFID@latestChar:
   382                           	opt callstack 0
   383                           
   384                           ; 1 bytes @ 0x2
   385  000003                     	ds	1
   386  000004                     processRFID@i:
   387                           	opt callstack 0
   388                           
   389                           ; 1 bytes @ 0x3
   390  000004                     	ds	1
   391  000005                     ??_InterruptHandlerHigh:
   392                           
   393                           ; 1 bytes @ 0x4
   394  000005                     	ds	3
   395  000008                     ??_InterruptHandlerLow:
   396                           
   397                           ; 1 bytes @ 0x7
   398  000008                     	ds	1
   399  000009                     ??_LCDout:
   400  000009                     ?_strlen:
   401                           	opt callstack 0
   402  000009                     ?___awdiv:
   403                           	opt callstack 0
   404  000009                     ?___lodiv:
   405                           	opt callstack 0
   406  000009                     ?___lomod:
   407                           	opt callstack 0
   408  000009                     initPWM@PWMperiod:
   409                           	opt callstack 0
   410  000009                     classify_data@smoothed_data:
   411                           	opt callstack 0
   412  000009                     ___awdiv@dividend:
   413                           	opt callstack 0
   414  000009                     fputc@c:
   415                           	opt callstack 0
   416  000009                     strlen@s:
   417                           	opt callstack 0
   418  000009                     ___lodiv@dividend:
   419                           	opt callstack 0
   420  000009                     ___lomod@dividend:
   421                           	opt callstack 0
   422                           
   423                           ; 8 bytes @ 0x8
   424  000009                     	ds	1
   425  00000A                     LCDout@number:
   426                           	opt callstack 0
   427                           
   428                           ; 1 bytes @ 0x9
   429  00000A                     	ds	1
   430  00000B                     SendLCD@type:
   431                           	opt callstack 0
   432  00000B                     ___awdiv@divisor:
   433                           	opt callstack 0
   434  00000B                     fputc@fp:
   435                           	opt callstack 0
   436  00000B                     strlen@a:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0xA
   440  00000B                     	ds	1
   441  00000C                     SendLCD@Byte:
   442                           	opt callstack 0
   443                           
   444                           ; 1 bytes @ 0xB
   445  00000C                     	ds	1
   446  00000D                     ??_init_LCD:
   447  00000D                     ??_ClearLCD:
   448  00000D                     ??_fputc:
   449  00000D                     SetLine@line:
   450                           	opt callstack 0
   451  00000D                     ___awdiv@counter:
   452                           	opt callstack 0
   453  00000D                     LCD_String@string:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0xC
   457  00000D                     	ds	1
   458  00000E                     ___awdiv@sign:
   459                           	opt callstack 0
   460  00000E                     display_RFID@dataBuf:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0xD
   464  00000E                     	ds	1
   465  00000F                     check_RFID@dataBuf:
   466                           	opt callstack 0
   467  00000F                     ___awdiv@quotient:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0xE
   471  00000F                     	ds	1
   472  000010                     display_RFID@i:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0xF
   476  000010                     	ds	1
   477  000011                     ??_check_RFID:
   478  000011                     ?___wmul:
   479                           	opt callstack 0
   480  000011                     ___wmul@multiplier:
   481                           	opt callstack 0
   482  000011                     ___lodiv@divisor:
   483                           	opt callstack 0
   484  000011                     ___lomod@divisor:
   485                           	opt callstack 0
   486                           
   487                           ; 8 bytes @ 0x10
   488  000011                     	ds	1
   489  000012                     fputs@s:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x11
   493  000012                     	ds	1
   494  000013                     ___wmul@multiplicand:
   495                           	opt callstack 0
   496  000013                     check_RFID@hexBuf:
   497                           	opt callstack 0
   498                           
   499                           ; 12 bytes @ 0x12
   500  000013                     	ds	1
   501  000014                     fputs@fp:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x13
   505  000014                     	ds	1
   506  000015                     ___wmul@product:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x14
   510  000015                     	ds	1
   511  000016                     fputs@c:
   512                           	opt callstack 0
   513                           
   514                           ; 1 bytes @ 0x15
   515  000016                     	ds	1
   516  000017                     ?___lwdiv:
   517                           	opt callstack 0
   518  000017                     setMotorPWM@m:
   519                           	opt callstack 0
   520  000017                     ___lwdiv@dividend:
   521                           	opt callstack 0
   522  000017                     fputs@i:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x16
   526  000017                     	ds	2
   527  000019                     ??_setMotorPWM:
   528  000019                     ?_pad:
   529                           	opt callstack 0
   530  000019                     ___lomod@counter:
   531                           	opt callstack 0
   532  000019                     pad@fp:
   533                           	opt callstack 0
   534  000019                     ___lwdiv@divisor:
   535                           	opt callstack 0
   536  000019                     ___lodiv@quotient:
   537                           	opt callstack 0
   538                           
   539                           ; 8 bytes @ 0x18
   540  000019                     	ds	2
   541  00001B                     pad@buf:
   542                           	opt callstack 0
   543  00001B                     ___lwdiv@quotient:
   544                           	opt callstack 0
   545                           
   546                           ; 2 bytes @ 0x1A
   547  00001B                     	ds	2
   548  00001D                     ___lwdiv@counter:
   549                           	opt callstack 0
   550  00001D                     pad@p:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x1C
   554  00001D                     	ds	1
   555  00001E                     setMotorPWM@PWMduty:
   556                           	opt callstack 0
   557  00001E                     process_signal@S:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x1D
   561  00001E                     	ds	1
   562  00001F                     ??_pad:
   563  00001F                     check_RFID@byte1:
   564                           	opt callstack 0
   565                           
   566                           ; 1 bytes @ 0x1E
   567  00001F                     	ds	1
   568  000020                     check_RFID@byte2:
   569                           	opt callstack 0
   570  000020                     turnRight@mL:
   571                           	opt callstack 0
   572  000020                     fullSpeedAhead@mL:
   573                           	opt callstack 0
   574  000020                     init_motors@mL:
   575                           	opt callstack 0
   576  000020                     pad@i:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0x1F
   580  000020                     	ds	1
   581  000021                     check_RFID@byte3:
   582                           	opt callstack 0
   583  000021                     ___lodiv@counter:
   584                           	opt callstack 0
   585                           
   586                           ; 1 bytes @ 0x20
   587  000021                     	ds	1
   588  000022                     check_RFID@byte4:
   589                           	opt callstack 0
   590  000022                     turnRight@mR:
   591                           	opt callstack 0
   592  000022                     fullSpeedAhead@mR:
   593                           	opt callstack 0
   594  000022                     init_motors@mR:
   595                           	opt callstack 0
   596  000022                     pad@w:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x21
   600  000022                     	ds	1
   601  000023                     check_RFID@byte5:
   602                           	opt callstack 0
   603                           
   604                           ; 1 bytes @ 0x22
   605  000023                     	ds	1
   606  000024                     ??_turnRight:
   607  000024                     ?_utoa:
   608                           	opt callstack 0
   609  000024                     check_RFID@checksum:
   610                           	opt callstack 0
   611  000024                     fullSpeedAhead@i:
   612                           	opt callstack 0
   613  000024                     utoa@fp:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x23
   617  000024                     	ds	1
   618  000025                     turnRight@i:
   619                           	opt callstack 0
   620  000025                     check_RFID@i:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x24
   624  000025                     	ds	1
   625  000026                     utoa@d:
   626                           	opt callstack 0
   627                           
   628                           ; 8 bytes @ 0x25
   629  000026                     	ds	1
   630  000027                     moveToBeacon@prev_location:
   631                           	opt callstack 0
   632                           
   633                           ; 1 bytes @ 0x26
   634  000027                     	ds	1
   635  000028                     moveToBeacon@mL:
   636                           	opt callstack 0
   637                           
   638                           ; 2 bytes @ 0x27
   639  000028                     	ds	2
   640  00002A                     moveToBeacon@mR:
   641                           	opt callstack 0
   642                           
   643                           ; 2 bytes @ 0x29
   644  00002A                     	ds	2
   645  00002C                     moveToBeacon@beacon_location:
   646                           	opt callstack 0
   647                           
   648                           ; 1 bytes @ 0x2B
   649  00002C                     	ds	2
   650  00002E                     ??_utoa:
   651                           
   652                           ; 1 bytes @ 0x2D
   653  00002E                     	ds	8
   654  000036                     utoa@p:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x35
   658  000036                     	ds	2
   659  000038                     utoa@w:
   660                           	opt callstack 0
   661                           
   662                           ; 2 bytes @ 0x37
   663  000038                     	ds	2
   664  00003A                     utoa@n:
   665                           	opt callstack 0
   666                           
   667                           ; 8 bytes @ 0x39
   668  00003A                     	ds	8
   669  000042                     utoa@i:
   670                           	opt callstack 0
   671                           
   672                           ; 2 bytes @ 0x41
   673  000042                     	ds	2
   674  000044                     ?_vfpfcnvrt:
   675                           	opt callstack 0
   676  000044                     vfpfcnvrt@fp:
   677                           	opt callstack 0
   678                           
   679                           ; 2 bytes @ 0x43
   680  000044                     	ds	2
   681  000046                     vfpfcnvrt@fmt:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0x45
   685  000046                     	ds	2
   686  000048                     vfpfcnvrt@ap:
   687                           	opt callstack 0
   688                           
   689                           ; 2 bytes @ 0x47
   690  000048                     	ds	2
   691  00004A                     ??_vfpfcnvrt:
   692                           
   693                           ; 1 bytes @ 0x49
   694  00004A                     	ds	4
   695  00004E                     
   696                           ; 1 bytes @ 0x4D
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 84 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  i               2   67[BANK0 ] int 
   707 ;;  temp1          16   50[BANK0 ] unsigned char [16]
   708 ;;  temp2          16   34[BANK0 ] unsigned char [16]
   709 ;;  previous_loc    1   66[BANK0 ] unsigned char 
   710 ;;  motorR          9   82[BANK0 ] struct DC_motor
   711 ;;  motorL          9   73[BANK0 ] struct DC_motor
   712 ;;  sensor          4   69[BANK0 ] struct Sensor
   713 ;; Return value:  Size  Location     Type
   714 ;;                  1    wreg      void 
   715 ;; Registers used:
   716 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   717 ;; Tracked objects:
   718 ;;		On entry : 0/0
   719 ;;		On exit  : 0/0
   720 ;;		Unchanged: 0/0
   721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   722 ;;      Params:         0       0       0       0
   723 ;;      Locals:         0      57       0       0
   724 ;;      Temps:          0       2       0       0
   725 ;;      Totals:         0      59       0       0
   726 ;;Total ram usage:       59 bytes
   727 ;; Hardware stack levels required when called:   11
   728 ;; This function calls:
   729 ;;		_ClearLCD
   730 ;;		_LCD_String
   731 ;;		_SetLine
   732 ;;		_check_RFID
   733 ;;		_classify_data
   734 ;;		_display_RFID
   735 ;;		_init_motors
   736 ;;		_moveToBeacon
   737 ;;		_process_signal
   738 ;;		_setup
   739 ;;		_sprintf
   740 ;; This function is called by:
   741 ;;		Startup code after reset
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text0
   746  0004F6                     __ptext0:
   747                           	opt callstack 0
   748  0004F6                     _main:
   749                           	opt callstack 20
   750                           
   751                           ;main.c: 87:   setup();
   752                           
   753                           ;incstack = 0
   754  0004F6  EC01  F00A         	call	_setup	;wreg free
   755                           
   756                           ;main.c: 90:   struct DC_motor motorL, motorR;;main.c: 91:   init_motors(&motorL, &motor
      +                          R);
   757  0004FA  0EA9               	movlw	low main@motorL
   758  0004FC  6E20               	movwf	init_motors@mL,c
   759  0004FE  0E00               	movlw	high main@motorL
   760  000500  6E21               	movwf	init_motors@mL+1,c
   761  000502  0EB2               	movlw	low main@motorR
   762  000504  6E22               	movwf	init_motors@mR,c
   763  000506  0E00               	movlw	high main@motorR
   764  000508  6E23               	movwf	init_motors@mR+1,c
   765  00050A  EC2E  F005         	call	_init_motors	;wreg free
   766  00050E  D07D               	goto	l2634
   767  000510                     l2598:
   768                           
   769                           ;main.c: 100:       {;main.c: 101:           static char beacon_location;;main.c: 104:  
      +                                   sensor.raw_data = (unsigned int)((CAP1BUFH << 8) | CAP1BUFL);
   770  000510  5068               	movf	3944,w,c	;volatile
   771  000512  CF69 F080          	movff	3945,??_main	;volatile
   772  000516  0100               	movlb	0	; () banked
   773  000518  6B81               	clrf	(??_main+1)& (0+255),b
   774  00051A  C080  F081         	movff	??_main,??_main+1
   775  00051E  6B80               	clrf	??_main& (0+255),b
   776  000520  1180               	iorwf	??_main& (0+255),w,b
   777  000522  6FA5               	movwf	main@sensor& (0+255),b
   778  000524  5181               	movf	(??_main+1)& (0+255),w,b
   779  000526  6FA6               	movwf	(main@sensor+1)& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 107:           process_signal(&sensor);
   783  000528  0EA5               	movlw	low main@sensor
   784  00052A  6E1E               	movwf	process_signal@S,c
   785  00052C  0E00               	movlw	high main@sensor
   786  00052E  6E1F               	movwf	process_signal@S+1,c
   787  000530  EC60  F007         	call	_process_signal	;wreg free
   788                           
   789                           ;main.c: 110:           char previous_location = beacon_location;
   790  000534  C0BD  F0A2         	movff	main@beacon_location,main@previous_location
   791                           
   792                           ;main.c: 113:           beacon_location = classify_data(sensor.raw_data);
   793  000538  C0A5  F009         	movff	main@sensor,classify_data@smoothed_data
   794  00053C  C0A6  F00A         	movff	main@sensor+1,classify_data@smoothed_data+1
   795  000540  EC91  F00A         	call	_classify_data	;wreg free
   796  000544  0100               	movlb	0	; () banked
   797  000546  6FBD               	movwf	main@beacon_location& (0+255),b
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 117:           moveToBeacon(beacon_location, previous_location, &motorL, &motor
      +                          R);
   801  000548  C0A2  F027         	movff	main@previous_location,moveToBeacon@prev_location
   802  00054C  0EA9               	movlw	low main@motorL
   803  00054E  6E28               	movwf	moveToBeacon@mL,c
   804  000550  0E00               	movlw	high main@motorL
   805  000552  6E29               	movwf	moveToBeacon@mL+1,c
   806  000554  0EB2               	movlw	low main@motorR
   807  000556  6E2A               	movwf	moveToBeacon@mR,c
   808  000558  0E00               	movlw	high main@motorR
   809  00055A  6E2B               	movwf	moveToBeacon@mR+1,c
   810  00055C  51BD               	movf	main@beacon_location& (0+255),w,b
   811  00055E  EC6E  F009         	call	_moveToBeacon
   812                           
   813                           ;main.c: 120:           ClearLCD();
   814  000562  EC84  F00A         	call	_ClearLCD	;wreg free
   815                           
   816                           ;main.c: 121:           SetLine(1);
   817  000566  0E01               	movlw	1
   818  000568  EC18  F00A         	call	_SetLine
   819                           
   820                           ;main.c: 122:           char temp2[16];;main.c: 123:           sprintf(temp2,"smoothed %
      +                          u ",sensor.smoothed_signal);
   821  00056C  0E82               	movlw	low main@temp2
   822  00056E  0100               	movlb	0	; () banked
   823  000570  6F70               	movwf	sprintf@s& (0+255),b
   824  000572  0E00               	movlw	high main@temp2
   825  000574  6F71               	movwf	(sprintf@s+1)& (0+255),b
   826  000576  0E31               	movlw	low STR_1
   827  000578  6F72               	movwf	sprintf@fmt& (0+255),b
   828  00057A  0E03               	movlw	high STR_1
   829  00057C  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   830  00057E  C0A7  F074         	movff	main@sensor+2,?_sprintf+4
   831  000582  C0A8  F075         	movff	main@sensor+3,?_sprintf+5
   832  000586  ECF6  F008         	call	_sprintf	;wreg free
   833                           
   834                           ;main.c: 124:           LCD_String(temp2);
   835  00058A  0E82               	movlw	low main@temp2
   836  00058C  6E0D               	movwf	LCD_String@string,c
   837  00058E  0E00               	movlw	high main@temp2
   838  000590  6E0E               	movwf	LCD_String@string+1,c
   839  000592  EC9C  F008         	call	_LCD_String	;wreg free
   840                           
   841                           ;main.c: 125:           SetLine(2);
   842  000596  0E02               	movlw	2
   843  000598  EC18  F00A         	call	_SetLine
   844                           
   845                           ;main.c: 126:           char temp1[16];;main.c: 127:           sprintf(temp1,"raw %u ",s
      +                          ensor.raw_data);
   846  00059C  0E92               	movlw	low main@temp1
   847  00059E  0100               	movlb	0	; () banked
   848  0005A0  6F70               	movwf	sprintf@s& (0+255),b
   849  0005A2  0E00               	movlw	high main@temp1
   850  0005A4  6F71               	movwf	(sprintf@s+1)& (0+255),b
   851  0005A6  0E3E               	movlw	low STR_2
   852  0005A8  6F72               	movwf	sprintf@fmt& (0+255),b
   853  0005AA  0E03               	movlw	high STR_2
   854  0005AC  6F73               	movwf	(sprintf@fmt+1)& (0+255),b
   855  0005AE  C0A5  F074         	movff	main@sensor,?_sprintf+4
   856  0005B2  C0A6  F075         	movff	main@sensor+1,?_sprintf+5
   857  0005B6  ECF6  F008         	call	_sprintf	;wreg free
   858                           
   859                           ;main.c: 128:           LCD_String(temp1);
   860  0005BA  0E92               	movlw	low main@temp1
   861  0005BC  6E0D               	movwf	LCD_String@string,c
   862  0005BE  0E00               	movlw	high main@temp1
   863  0005C0  6E0E               	movwf	LCD_String@string+1,c
   864  0005C2  EC9C  F008         	call	_LCD_String	;wreg free
   865                           
   866                           ;main.c: 129:           _delay((unsigned long)((100)*(8000000/4000.0)));
   867  0005C6  0E02               	movlw	2
   868  0005C8  0100               	movlb	0	; () banked
   869  0005CA  6F81               	movwf	(??_main+1)& (0+255),b
   870  0005CC  0E04               	movlw	4
   871  0005CE  6F80               	movwf	??_main& (0+255),b
   872  0005D0  0EBA               	movlw	186
   873  0005D2                     u2177:
   874  0005D2  2EE8               	decfsz	wreg,f,c
   875  0005D4  D7FE               	bra	u2177
   876  0005D6  2F80               	decfsz	??_main& (0+255),f,b
   877  0005D8  D7FC               	bra	u2177
   878  0005DA  2F81               	decfsz	(??_main+1)& (0+255),f,b
   879  0005DC  D7FA               	bra	u2177
   880  0005DE  F000               	nop	
   881                           
   882                           ;main.c: 133:           if(RFID_flag == 1)
   883  0005E0  0100               	movlb	0	; () banked
   884  0005E2  05BE               	decf	_RFID_flag& (0+255),w,b	;volatile
   885  0005E4  A4D8               	btfss	status,2,c
   886  0005E6  D011               	goto	l2634
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 134:           {;main.c: 135:               display_RFID(RFIDbuf);
   890  0005E8  0EDF               	movlw	low _RFIDbuf
   891  0005EA  6E0E               	movwf	display_RFID@dataBuf,c
   892  0005EC  0E00               	movlw	high _RFIDbuf
   893  0005EE  6E0F               	movwf	display_RFID@dataBuf+1,c
   894  0005F0  EC92  F009         	call	_display_RFID	;wreg free
   895                           
   896                           ;main.c: 136:               check_RFID(RFIDbuf);
   897  0005F4  0EDF               	movlw	low _RFIDbuf
   898  0005F6  6E0F               	movwf	check_RFID@dataBuf,c
   899  0005F8  0E00               	movlw	high _RFIDbuf
   900  0005FA  6E10               	movwf	check_RFID@dataBuf+1,c
   901  0005FC  ECF4  F003         	call	_check_RFID	;wreg free
   902                           
   903                           ;main.c: 137:               robot_mode = 1;
   904  000600  0E01               	movlw	1
   905  000602  6E55               	movwf	_robot_mode,c	;volatile
   906                           
   907                           ;main.c: 138:               RFID_flag = 0;
   908  000604  0E00               	movlw	0
   909  000606  0100               	movlb	0	; () banked
   910  000608  6FBE               	movwf	_RFID_flag& (0+255),b	;volatile
   911  00060A                     l2634:
   912                           
   913                           ;main.c: 99:       while(robot_mode == 0)
   914  00060A  5055               	movf	_robot_mode,w,c	;volatile
   915  00060C  A4D8               	btfss	status,2,c
   916  00060E  D003               	goto	l2638
   917  000610  D77F               	goto	l2598
   918  000612                     l2636:
   919                           
   920                           ;main.c: 144:       {;main.c: 146:           robot_mode = 2;
   921  000612  0E02               	movlw	2
   922  000614  6E55               	movwf	_robot_mode,c	;volatile
   923  000616                     l2638:
   924                           
   925                           ;main.c: 143:       while(robot_mode == 1)
   926  000616  0455               	decf	_robot_mode,w,c	;volatile
   927  000618  A4D8               	btfss	status,2,c
   928  00061A  D02C               	goto	u2150
   929  00061C  D7FA               	goto	l2636
   930  00061E                     l2640:
   931                           
   932                           ;main.c: 153:           {;main.c: 154:               ClearLCD();
   933  00061E  EC84  F00A         	call	_ClearLCD	;wreg free
   934                           
   935                           ;main.c: 155:               LCD_String("RESETTING ROBOT");
   936  000622  0E21               	movlw	low STR_3
   937  000624  6E0D               	movwf	LCD_String@string,c
   938  000626  0E03               	movlw	high STR_3
   939  000628  6E0E               	movwf	LCD_String@string+1,c
   940  00062A  EC9C  F008         	call	_LCD_String	;wreg free
   941                           
   942                           ;main.c: 156:               for(int i=0; i<10;i++)
   943  00062E  0E00               	movlw	0
   944  000630  0100               	movlb	0	; () banked
   945  000632  6FA4               	movwf	(main@i+1)& (0+255),b
   946  000634  0E00               	movlw	0
   947  000636  6FA3               	movwf	main@i& (0+255),b
   948  000638                     l2650:
   949                           
   950                           ; BSR set to: 0
   951                           ;main.c: 157:               {;main.c: 158:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   952  000638  0E02               	movlw	2
   953  00063A  0100               	movlb	0	; () banked
   954  00063C  6F81               	movwf	(??_main+1)& (0+255),b
   955  00063E  0E04               	movlw	4
   956  000640  6F80               	movwf	??_main& (0+255),b
   957  000642  0EBA               	movlw	186
   958  000644                     u2187:
   959  000644  2EE8               	decfsz	wreg,f,c
   960  000646  D7FE               	bra	u2187
   961  000648  2F80               	decfsz	??_main& (0+255),f,b
   962  00064A  D7FC               	bra	u2187
   963  00064C  2F81               	decfsz	(??_main+1)& (0+255),f,b
   964  00064E  D7FA               	bra	u2187
   965  000650  F000               	nop	
   966                           
   967                           ;main.c: 159:               }
   968  000652  0100               	movlb	0	; () banked
   969  000654  4BA3               	infsnz	main@i& (0+255),f,b
   970  000656  2BA4               	incf	(main@i+1)& (0+255),f,b
   971  000658  BFA4               	btfsc	(main@i+1)& (0+255),7,b
   972  00065A  D7EE               	goto	l2650
   973  00065C  51A4               	movf	(main@i+1)& (0+255),w,b
   974  00065E  E104               	bnz	u2140
   975  000660  0E0A               	movlw	10
   976  000662  5DA3               	subwf	main@i& (0+255),w,b
   977  000664  A0D8               	btfss	status,0,c
   978  000666  D7E8               	goto	l2650
   979  000668                     u2140:
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 160:               ClearLCD();
   983  000668  EC84  F00A         	call	_ClearLCD	;wreg free
   984                           
   985                           ;main.c: 161:               robot_mode = 0;
   986  00066C  0E00               	movlw	0
   987  00066E  6E55               	movwf	_robot_mode,c	;volatile
   988  000670                     l2658:
   989                           
   990                           ;main.c: 152:           while(PORTDbits.RD2 == 1)
   991  000670  B483               	btfsc	3971,2,c	;volatile
   992  000672  D7D5               	goto	l2640
   993  000674                     u2150:
   994                           
   995                           ;main.c: 150:       while(robot_mode == 2)
   996  000674  0E02               	movlw	2
   997  000676  1855               	xorwf	_robot_mode,w,c	;volatile
   998  000678  A4D8               	btfss	status,2,c
   999  00067A  D7C7               	goto	l2634
  1000  00067C  D7F9               	goto	l2658
  1001  00067E                     __end_of_main:
  1002                           	opt callstack 0
  1003                           
  1004 ;; *************** function _sprintf *****************
  1005 ;; Defined at:
  1006 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;  s               2   16[BANK0 ] PTR unsigned char 
  1009 ;;		 -> main@temp1(16), main@temp2(16), 
  1010 ;;  fmt             2   18[BANK0 ] PTR const unsigned char 
  1011 ;;		 -> STR_2(8), STR_1(13), 
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;  f               6   26[BANK0 ] struct _IO_FILE
  1014 ;;  ap              2   24[BANK0 ] PTR void [1]
  1015 ;;		 -> ?_sprintf(2), 
  1016 ;;  ret             2    0        int 
  1017 ;; Return value:  Size  Location     Type
  1018 ;;                  2   16[BANK0 ] int 
  1019 ;; Registers used:
  1020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1021 ;; Tracked objects:
  1022 ;;		On entry : 0/0
  1023 ;;		On exit  : 0/0
  1024 ;;		Unchanged: 0/0
  1025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1026 ;;      Params:         0       6       0       0
  1027 ;;      Locals:         0      10       0       0
  1028 ;;      Temps:          0       0       0       0
  1029 ;;      Totals:         0      16       0       0
  1030 ;;Total ram usage:       16 bytes
  1031 ;; Hardware stack levels used:    1
  1032 ;; Hardware stack levels required when called:   10
  1033 ;; This function calls:
  1034 ;;		_vfprintf
  1035 ;; This function is called by:
  1036 ;;		_main
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text1
  1041  0011EC                     __ptext1:
  1042                           	opt callstack 0
  1043  0011EC                     _sprintf:
  1044                           	opt callstack 20
  1045                           
  1046                           ;incstack = 0
  1047  0011EC  0E74               	movlw	low (?_sprintf+4)
  1048  0011EE  0100               	movlb	0	; () banked
  1049  0011F0  6F78               	movwf	sprintf@ap& (0+255),b
  1050  0011F2  0E00               	movlw	high (?_sprintf+4)
  1051  0011F4  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  1052  0011F6  C070  F07A         	movff	sprintf@s,sprintf@f
  1053  0011FA  C071  F07B         	movff	sprintf@s+1,sprintf@f+1
  1054                           
  1055                           ; BSR set to: 0
  1056  0011FE  0E00               	movlw	0
  1057  001200  6F7D               	movwf	(sprintf@f+3)& (0+255),b
  1058  001202  0E00               	movlw	0
  1059  001204  6F7C               	movwf	(sprintf@f+2)& (0+255),b
  1060                           
  1061                           ; BSR set to: 0
  1062  001206  0E00               	movlw	0
  1063  001208  6F7F               	movwf	(sprintf@f+5)& (0+255),b
  1064  00120A  0E00               	movlw	0
  1065  00120C  6F7E               	movwf	(sprintf@f+4)& (0+255),b
  1066                           
  1067                           ; BSR set to: 0
  1068  00120E  0E7A               	movlw	low sprintf@f
  1069  001210  6F68               	movwf	vfprintf@fp& (0+255),b
  1070  001212  0E00               	movlw	high sprintf@f
  1071  001214  6F69               	movwf	(vfprintf@fp+1)& (0+255),b
  1072  001216  C072  F06A         	movff	sprintf@fmt,vfprintf@fmt
  1073  00121A  C073  F06B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1074  00121E  0E78               	movlw	low sprintf@ap
  1075  001220  6F6C               	movwf	vfprintf@ap& (0+255),b
  1076  001222  0E00               	movlw	high sprintf@ap
  1077  001224  6F6D               	movwf	(vfprintf@ap+1)& (0+255),b
  1078  001226  ECCB  F008         	call	_vfprintf	;wreg free
  1079  00122A  0100               	movlb	0	; () banked
  1080  00122C  517C               	movf	(sprintf@f+2)& (0+255),w,b
  1081  00122E  2570               	addwf	sprintf@s& (0+255),w,b
  1082  001230  6ED9               	movwf	fsr2l,c
  1083  001232  517D               	movf	(sprintf@f+3)& (0+255),w,b
  1084  001234  2171               	addwfc	(sprintf@s+1)& (0+255),w,b
  1085  001236  6EDA               	movwf	fsr2h,c
  1086  001238  0E00               	movlw	0
  1087  00123A  6EDF               	movwf	indf2,c
  1088                           
  1089                           ; BSR set to: 0
  1090  00123C  0012               	return		;funcret
  1091  00123E                     __end_of_sprintf:
  1092                           	opt callstack 0
  1093                           
  1094 ;; *************** function _vfprintf *****************
  1095 ;; Defined at:
  1096 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  1099 ;;		 -> sprintf@f(6), 
  1100 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  1101 ;;		 -> STR_2(8), STR_1(13), 
  1102 ;;  ap              2   12[BANK0 ] PTR PTR void 
  1103 ;;		 -> sprintf@ap(2), 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  cfmt            2   14[BANK0 ] PTR unsigned char 
  1106 ;;		 -> STR_2(8), STR_1(13), 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  2    8[BANK0 ] int 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1116 ;;      Params:         0       6       0       0
  1117 ;;      Locals:         0       2       0       0
  1118 ;;      Temps:          0       0       0       0
  1119 ;;      Totals:         0       8       0       0
  1120 ;;Total ram usage:        8 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    9
  1123 ;; This function calls:
  1124 ;;		_vfpfcnvrt
  1125 ;; This function is called by:
  1126 ;;		_sprintf
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text2
  1131  001196                     __ptext2:
  1132                           	opt callstack 0
  1133  001196                     _vfprintf:
  1134                           	opt callstack 20
  1135                           
  1136                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;incstack = 0
  1140  001196  C06A  F06E         	movff	vfprintf@fmt,vfprintf@cfmt
  1141  00119A  C06B  F06F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1142                           
  1143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1144  00119E  0E00               	movlw	0
  1145  0011A0  0100               	movlb	0	; () banked
  1146  0011A2  6FBC               	movwf	(_nout+1)& (0+255),b
  1147  0011A4  0E00               	movlw	0
  1148  0011A6  6FBB               	movwf	_nout& (0+255),b
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1151  0011A8  D013               	goto	l2580
  1152  0011AA                     l2578:
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1156  0011AA  C068  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1157  0011AE  C069  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1158  0011B2  0E6E               	movlw	low vfprintf@cfmt
  1159  0011B4  6E46               	movwf	vfpfcnvrt@fmt,c
  1160  0011B6  0E00               	movlw	high vfprintf@cfmt
  1161  0011B8  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1162  0011BA  C06C  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1163  0011BE  C06D  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1164  0011C2  EC3F  F003         	call	_vfpfcnvrt	;wreg free
  1165  0011C6  5044               	movf	?_vfpfcnvrt,w,c
  1166  0011C8  0100               	movlb	0	; () banked
  1167  0011CA  27BB               	addwf	_nout& (0+255),f,b
  1168  0011CC  5045               	movf	?_vfpfcnvrt+1,w,c
  1169  0011CE  23BC               	addwfc	(_nout+1)& (0+255),f,b
  1170  0011D0                     l2580:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1174  0011D0  C06E  FFF6         	movff	vfprintf@cfmt,tblptrl
  1175  0011D4  C06F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1176  0011D8                     	if	0	;tblptru may be non-zero
  1177  0011D8                     	endif
  1178  0011D8                     	if	0	;tblptru may be non-zero
  1179  0011D8                     	endif
  1180  0011D8  0008               	tblrd		*
  1181  0011DA  50F5               	movf	tablat,w,c
  1182  0011DC  0900               	iorlw	0
  1183  0011DE  A4D8               	btfss	status,2,c
  1184  0011E0  D7E4               	goto	l2578
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1188  0011E2  C0BB  F068         	movff	_nout,?_vfprintf
  1189  0011E6  C0BC  F069         	movff	_nout+1,?_vfprintf+1
  1190                           
  1191                           ; BSR set to: 0
  1192  0011EA  0012               	return		;funcret
  1193  0011EC                     __end_of_vfprintf:
  1194                           	opt callstack 0
  1195                           
  1196 ;; *************** function _vfpfcnvrt *****************
  1197 ;; Defined at:
  1198 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1201 ;;		 -> sprintf@f(6), 
  1202 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1203 ;;		 -> vfprintf@cfmt(2), 
  1204 ;;  ap              2   71[COMRAM] PTR PTR void 
  1205 ;;		 -> sprintf@ap(2), 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  llu             8    0[BANK0 ] unsigned long long 
  1208 ;;  ll              8    0        long long 
  1209 ;;  f               4    0        long long 
  1210 ;;  vp              3    0        PTR void 
  1211 ;;  ct              3    0        unsigned char [3]
  1212 ;;  cp              3    0        PTR unsigned char 
  1213 ;;  i               2    0        int 
  1214 ;;  done            2    0        int 
  1215 ;;  c               1    0        unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  2   67[COMRAM] int 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1225 ;;      Params:         6       0       0       0
  1226 ;;      Locals:         0       8       0       0
  1227 ;;      Temps:          4       0       0       0
  1228 ;;      Totals:        10       8       0       0
  1229 ;;Total ram usage:       18 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    8
  1232 ;; This function calls:
  1233 ;;		_fputc
  1234 ;;		_utoa
  1235 ;; This function is called by:
  1236 ;;		_vfprintf
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text3
  1241  00067E                     __ptext3:
  1242                           	opt callstack 0
  1243  00067E                     _vfpfcnvrt:
  1244                           	opt callstack 20
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;incstack = 0
  1250  00067E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1251  000682  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1252  000686  CFDE FFF6          	movff	postinc2,tblptrl
  1253  00068A  CFDD FFF7          	movff	postdec2,tblptrh
  1254  00068E                     	if	0	;tblptru may be non-zero
  1255  00068E                     	endif
  1256  00068E                     	if	0	;tblptru may be non-zero
  1257  00068E                     	endif
  1258  00068E  0008               	tblrd		*
  1259  000690  50F5               	movf	tablat,w,c
  1260  000692  0A25               	xorlw	37
  1261  000694  A4D8               	btfss	status,2,c
  1262  000696  D08E               	goto	l2566
  1263                           
  1264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1265  000698  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1266  00069C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1267  0006A0  2ADE               	incf	postinc2,f,c
  1268  0006A2  0E00               	movlw	0
  1269  0006A4  22DD               	addwfc	postdec2,f,c
  1270                           
  1271                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1272  0006A6  0E00               	movlw	0
  1273  0006A8  6E4F               	movwf	_width+1,c
  1274  0006AA  0E00               	movlw	0
  1275  0006AC  6E4E               	movwf	_width,c
  1276  0006AE  C04E  F052         	movff	_width,_flags
  1277  0006B2  C04F  F053         	movff	_width+1,_flags+1
  1278                           
  1279                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1280  0006B6  6850               	setf	_prec,c
  1281  0006B8  6851               	setf	_prec+1,c
  1282                           
  1283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1284  0006BA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1285  0006BE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1286  0006C2  CFDE FFF6          	movff	postinc2,tblptrl
  1287  0006C6  CFDD FFF7          	movff	postdec2,tblptrh
  1288  0006CA                     	if	0	;tblptru may be non-zero
  1289  0006CA                     	endif
  1290  0006CA                     	if	0	;tblptru may be non-zero
  1291  0006CA                     	endif
  1292  0006CA  0008               	tblrd		*
  1293  0006CC  50F5               	movf	tablat,w,c
  1294  0006CE  0A75               	xorlw	117
  1295  0006D0  A4D8               	btfss	status,2,c
  1296  0006D2  D041               	goto	l2550
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1299  0006D4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1300  0006D8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1301  0006DC  2ADE               	incf	postinc2,f,c
  1302  0006DE  0E00               	movlw	0
  1303  0006E0  22DD               	addwfc	postdec2,f,c
  1304                           
  1305                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1306  0006E2  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1307  0006E6  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1308  0006EA  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1309  0006EE  0E02               	movlw	2
  1310  0006F0  26DE               	addwf	postinc2,f,c
  1311  0006F2  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1312  0006F6  0E00               	movlw	0
  1313  0006F8  22DD               	addwfc	postdec2,f,c
  1314  0006FA  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1315  0006FE  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1316  000702  CFDE F04C          	movff	postinc2,??_vfpfcnvrt+2
  1317  000706  CFDD F04D          	movff	postdec2,??_vfpfcnvrt+3
  1318  00070A  C04C  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1319  00070E  C04D  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1320  000712  0100               	movlb	0	; () banked
  1321  000714  6B62               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1322  000716  6B63               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1323  000718  6B64               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1324  00071A  6B65               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1325  00071C  6B66               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1326  00071E  6B67               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1330  000720  C044  F024         	movff	vfpfcnvrt@fp,utoa@fp
  1331  000724  C045  F025         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1332  000728  C060  F026         	movff	vfpfcnvrt@llu,utoa@d
  1333  00072C  C061  F027         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1334  000730  C062  F028         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1335  000734  C063  F029         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1336  000738  C064  F02A         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1337  00073C  C065  F02B         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1338  000740  C066  F02C         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1339  000744  C067  F02D         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1340  000748  ECA4  F001         	call	_utoa	;wreg free
  1341  00074C  C024  F044         	movff	?_utoa,?_vfpfcnvrt
  1342  000750  C025  F045         	movff	?_utoa+1,?_vfpfcnvrt+1
  1343  000754  0012               	return	
  1344  000756                     l2550:
  1345                           
  1346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1347  000756  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1348  00075A  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1349  00075E  CFDE FFF6          	movff	postinc2,tblptrl
  1350  000762  CFDD FFF7          	movff	postdec2,tblptrh
  1351  000766                     	if	0	;tblptru may be non-zero
  1352  000766                     	endif
  1353  000766                     	if	0	;tblptru may be non-zero
  1354  000766                     	endif
  1355  000766  0008               	tblrd		*
  1356  000768  50F5               	movf	tablat,w,c
  1357  00076A  0A25               	xorlw	37
  1358  00076C  A4D8               	btfss	status,2,c
  1359  00076E  D016               	goto	l2560
  1360                           
  1361                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1362  000770  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1363  000774  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1364  000778  2ADE               	incf	postinc2,f,c
  1365  00077A  0E00               	movlw	0
  1366  00077C  22DD               	addwfc	postdec2,f,c
  1367                           
  1368                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1369  00077E  0E00               	movlw	0
  1370  000780  6E0A               	movwf	fputc@c+1,c
  1371  000782  0E25               	movlw	37
  1372  000784  6E09               	movwf	fputc@c,c
  1373  000786  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1374  00078A  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1375  00078E  ECC5  F006         	call	_fputc	;wreg free
  1376  000792                     l2556:
  1377                           
  1378                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1379  000792  0E00               	movlw	0
  1380  000794  6E45               	movwf	?_vfpfcnvrt+1,c
  1381  000796  0E01               	movlw	1
  1382  000798  6E44               	movwf	?_vfpfcnvrt,c
  1383  00079A  0012               	return	
  1384  00079C                     l2560:
  1385                           
  1386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1387  00079C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1388  0007A0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1389  0007A4  2ADE               	incf	postinc2,f,c
  1390  0007A6  0E00               	movlw	0
  1391  0007A8  22DD               	addwfc	postdec2,f,c
  1392                           
  1393                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1394  0007AA  0E00               	movlw	0
  1395  0007AC  6E45               	movwf	?_vfpfcnvrt+1,c
  1396  0007AE  0E00               	movlw	0
  1397  0007B0  6E44               	movwf	?_vfpfcnvrt,c
  1398  0007B2  0012               	return	
  1399  0007B4                     l2566:
  1400                           
  1401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1402  0007B4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1403  0007B8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1404  0007BC  CFDE FFF6          	movff	postinc2,tblptrl
  1405  0007C0  CFDD FFF7          	movff	postdec2,tblptrh
  1406  0007C4                     	if	0	;tblptru may be non-zero
  1407  0007C4                     	endif
  1408  0007C4                     	if	0	;tblptru may be non-zero
  1409  0007C4                     	endif
  1410  0007C4  0008               	tblrd		*
  1411  0007C6  50F5               	movf	tablat,w,c
  1412  0007C8  6E09               	movwf	fputc@c,c
  1413  0007CA  6A0A               	clrf	fputc@c+1,c
  1414  0007CC  C044  F00B         	movff	vfpfcnvrt@fp,fputc@fp
  1415  0007D0  C045  F00C         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1416  0007D4  ECC5  F006         	call	_fputc	;wreg free
  1417                           
  1418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1419  0007D8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1420  0007DC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1421  0007E0  2ADE               	incf	postinc2,f,c
  1422  0007E2  0E00               	movlw	0
  1423  0007E4  22DD               	addwfc	postdec2,f,c
  1424  0007E6  D7D5               	goto	l2556
  1425  0007E8                     __end_of_vfpfcnvrt:
  1426                           	opt callstack 0
  1427                           
  1428 ;; *************** function _utoa *****************
  1429 ;; Defined at:
  1430 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
  1433 ;;		 -> sprintf@f(6), 
  1434 ;;  d               8   37[COMRAM] unsigned long long 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  n               8   57[COMRAM] unsigned long long 
  1437 ;;  i               2   65[COMRAM] int 
  1438 ;;  w               2   55[COMRAM] int 
  1439 ;;  p               2   53[COMRAM] int 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   35[COMRAM] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1449 ;;      Params:        10       0       0       0
  1450 ;;      Locals:        14       0       0       0
  1451 ;;      Temps:          8       0       0       0
  1452 ;;      Totals:        32       0       0       0
  1453 ;;Total ram usage:       32 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    7
  1456 ;; This function calls:
  1457 ;;		___lodiv
  1458 ;;		___lomod
  1459 ;;		_pad
  1460 ;; This function is called by:
  1461 ;;		_vfpfcnvrt
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text4
  1466  000348                     __ptext4:
  1467                           	opt callstack 0
  1468  000348                     _utoa:
  1469                           	opt callstack 20
  1470                           
  1471                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1472                           
  1473                           ;incstack = 0
  1474  000348  AE51               	btfss	_prec+1,7,c
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1477  00034A  9252               	bcf	_flags,1,c
  1478                           
  1479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1480  00034C  BE51               	btfsc	_prec+1,7,c
  1481  00034E  D005               	goto	u2010
  1482  000350  5051               	movf	_prec+1,w,c
  1483  000352  E108               	bnz	l332
  1484  000354  0450               	decf	_prec,w,c
  1485  000356  B0D8               	btfsc	status,0,c
  1486  000358  D005               	goto	l332
  1487  00035A                     u2010:
  1488  00035A  0E00               	movlw	0
  1489  00035C  6E37               	movwf	utoa@p+1,c
  1490  00035E  0E01               	movlw	1
  1491  000360  6E36               	movwf	utoa@p,c
  1492  000362  D004               	goto	l334
  1493  000364                     l332:
  1494  000364  C050  F036         	movff	_prec,utoa@p
  1495  000368  C051  F037         	movff	_prec+1,utoa@p+1
  1496  00036C                     l334:
  1497                           
  1498                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1499  00036C  C04E  F038         	movff	_width,utoa@w
  1500  000370  C04F  F039         	movff	_width+1,utoa@w+1
  1501                           
  1502                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1503  000374  C026  F03A         	movff	utoa@d,utoa@n
  1504  000378  C027  F03B         	movff	utoa@d+1,utoa@n+1
  1505  00037C  C028  F03C         	movff	utoa@d+2,utoa@n+2
  1506  000380  C029  F03D         	movff	utoa@d+3,utoa@n+3
  1507  000384  C02A  F03E         	movff	utoa@d+4,utoa@n+4
  1508  000388  C02B  F03F         	movff	utoa@d+5,utoa@n+5
  1509  00038C  C02C  F040         	movff	utoa@d+6,utoa@n+6
  1510  000390  C02D  F041         	movff	utoa@d+7,utoa@n+7
  1511                           
  1512                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1513  000394  0E00               	movlw	0
  1514  000396  6E43               	movwf	utoa@i+1,c
  1515  000398  0E1F               	movlw	31
  1516  00039A  6E42               	movwf	utoa@i,c
  1517                           
  1518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1519  00039C  0E00               	movlw	0
  1520  00039E  0100               	movlb	0	; () banked
  1521  0003A0  6FDE               	movwf	(_dbuf+31)& (0+255),b
  1522                           
  1523                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1524  0003A2  D076               	goto	l2520
  1525  0003A4                     l2510:
  1526                           
  1527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1528  0003A4  0642               	decf	utoa@i,f,c
  1529  0003A6  A0D8               	btfss	status,0,c
  1530  0003A8  0643               	decf	utoa@i+1,f,c
  1531                           
  1532                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1533  0003AA  0EBF               	movlw	low _dbuf
  1534  0003AC  2442               	addwf	utoa@i,w,c
  1535  0003AE  6ED9               	movwf	fsr2l,c
  1536  0003B0  0E00               	movlw	high _dbuf
  1537  0003B2  2043               	addwfc	utoa@i+1,w,c
  1538  0003B4  6EDA               	movwf	fsr2h,c
  1539  0003B6  C03A  F009         	movff	utoa@n,___lomod@dividend
  1540  0003BA  C03B  F00A         	movff	utoa@n+1,___lomod@dividend+1
  1541  0003BE  C03C  F00B         	movff	utoa@n+2,___lomod@dividend+2
  1542  0003C2  C03D  F00C         	movff	utoa@n+3,___lomod@dividend+3
  1543  0003C6  C03E  F00D         	movff	utoa@n+4,___lomod@dividend+4
  1544  0003CA  C03F  F00E         	movff	utoa@n+5,___lomod@dividend+5
  1545  0003CE  C040  F00F         	movff	utoa@n+6,___lomod@dividend+6
  1546  0003D2  C041  F010         	movff	utoa@n+7,___lomod@dividend+7
  1547  0003D6  0E0A               	movlw	10
  1548  0003D8  6E11               	movwf	___lomod@divisor,c
  1549  0003DA  0E00               	movlw	0
  1550  0003DC  6E12               	movwf	___lomod@divisor+1,c
  1551  0003DE  0E00               	movlw	0
  1552  0003E0  6E13               	movwf	___lomod@divisor+2,c
  1553  0003E2  0E00               	movlw	0
  1554  0003E4  6E14               	movwf	___lomod@divisor+3,c
  1555  0003E6  0E00               	movlw	0
  1556  0003E8  6E15               	movwf	___lomod@divisor+4,c
  1557  0003EA  0E00               	movlw	0
  1558  0003EC  6E16               	movwf	___lomod@divisor+5,c
  1559  0003EE  0E00               	movlw	0
  1560  0003F0  6E17               	movwf	___lomod@divisor+6,c
  1561  0003F2  0E00               	movlw	0
  1562  0003F4  6E18               	movwf	___lomod@divisor+7,c
  1563  0003F6  EC6E  F006         	call	___lomod	;wreg free
  1564  0003FA  C009  F02E         	movff	?___lomod,??_utoa
  1565  0003FE  C00A  F02F         	movff	?___lomod+1,??_utoa+1
  1566  000402  C00B  F030         	movff	?___lomod+2,??_utoa+2
  1567  000406  C00C  F031         	movff	?___lomod+3,??_utoa+3
  1568  00040A  C00D  F032         	movff	?___lomod+4,??_utoa+4
  1569  00040E  C00E  F033         	movff	?___lomod+5,??_utoa+5
  1570  000412  C00F  F034         	movff	?___lomod+6,??_utoa+6
  1571  000416  C010  F035         	movff	?___lomod+7,??_utoa+7
  1572  00041A  502E               	movf	??_utoa,w,c
  1573  00041C  0F30               	addlw	48
  1574  00041E  6EDF               	movwf	indf2,c
  1575                           
  1576                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1577  000420  0636               	decf	utoa@p,f,c
  1578  000422  A0D8               	btfss	status,0,c
  1579  000424  0637               	decf	utoa@p+1,f,c
  1580                           
  1581                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1582  000426  0638               	decf	utoa@w,f,c
  1583  000428  A0D8               	btfss	status,0,c
  1584  00042A  0639               	decf	utoa@w+1,f,c
  1585                           
  1586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1587  00042C  C03A  F009         	movff	utoa@n,___lodiv@dividend
  1588  000430  C03B  F00A         	movff	utoa@n+1,___lodiv@dividend+1
  1589  000434  C03C  F00B         	movff	utoa@n+2,___lodiv@dividend+2
  1590  000438  C03D  F00C         	movff	utoa@n+3,___lodiv@dividend+3
  1591  00043C  C03E  F00D         	movff	utoa@n+4,___lodiv@dividend+4
  1592  000440  C03F  F00E         	movff	utoa@n+5,___lodiv@dividend+5
  1593  000444  C040  F00F         	movff	utoa@n+6,___lodiv@dividend+6
  1594  000448  C041  F010         	movff	utoa@n+7,___lodiv@dividend+7
  1595  00044C  0E0A               	movlw	10
  1596  00044E  6E11               	movwf	___lodiv@divisor,c
  1597  000450  0E00               	movlw	0
  1598  000452  6E12               	movwf	___lodiv@divisor+1,c
  1599  000454  0E00               	movlw	0
  1600  000456  6E13               	movwf	___lodiv@divisor+2,c
  1601  000458  0E00               	movlw	0
  1602  00045A  6E14               	movwf	___lodiv@divisor+3,c
  1603  00045C  0E00               	movlw	0
  1604  00045E  6E15               	movwf	___lodiv@divisor+4,c
  1605  000460  0E00               	movlw	0
  1606  000462  6E16               	movwf	___lodiv@divisor+5,c
  1607  000464  0E00               	movlw	0
  1608  000466  6E17               	movwf	___lodiv@divisor+6,c
  1609  000468  0E00               	movlw	0
  1610  00046A  6E18               	movwf	___lodiv@divisor+7,c
  1611  00046C  ECA3  F005         	call	___lodiv	;wreg free
  1612  000470  C009  F03A         	movff	?___lodiv,utoa@n
  1613  000474  C00A  F03B         	movff	?___lodiv+1,utoa@n+1
  1614  000478  C00B  F03C         	movff	?___lodiv+2,utoa@n+2
  1615  00047C  C00C  F03D         	movff	?___lodiv+3,utoa@n+3
  1616  000480  C00D  F03E         	movff	?___lodiv+4,utoa@n+4
  1617  000484  C00E  F03F         	movff	?___lodiv+5,utoa@n+5
  1618  000488  C00F  F040         	movff	?___lodiv+6,utoa@n+6
  1619  00048C  C010  F041         	movff	?___lodiv+7,utoa@n+7
  1620  000490                     l2520:
  1621                           
  1622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1623  000490  5042               	movf	utoa@i,w,c
  1624  000492  1043               	iorwf	utoa@i+1,w,c
  1625  000494  B4D8               	btfsc	status,2,c
  1626  000496  D01A               	goto	u2060
  1627  000498  503A               	movf	utoa@n,w,c
  1628  00049A  103B               	iorwf	utoa@n+1,w,c
  1629  00049C  103C               	iorwf	utoa@n+2,w,c
  1630  00049E  103D               	iorwf	utoa@n+3,w,c
  1631  0004A0  103E               	iorwf	utoa@n+4,w,c
  1632  0004A2  103F               	iorwf	utoa@n+5,w,c
  1633  0004A4  1040               	iorwf	utoa@n+6,w,c
  1634  0004A6  1041               	iorwf	utoa@n+7,w,c
  1635  0004A8  A4D8               	btfss	status,2,c
  1636  0004AA  D77C               	goto	l2510
  1637  0004AC  BE37               	btfsc	utoa@p+1,7,c
  1638  0004AE  D005               	goto	u2040
  1639  0004B0  5037               	movf	utoa@p+1,w,c
  1640  0004B2  E102               	bnz	u2041
  1641  0004B4  0436               	decf	utoa@p,w,c
  1642  0004B6  B0D8               	btfsc	status,0,c
  1643  0004B8                     u2041:
  1644  0004B8  D775               	goto	l2510
  1645  0004BA                     u2040:
  1646  0004BA  BE39               	btfsc	utoa@w+1,7,c
  1647  0004BC  D007               	goto	u2060
  1648  0004BE  5039               	movf	utoa@w+1,w,c
  1649  0004C0  E103               	bnz	u2050
  1650  0004C2  0438               	decf	utoa@w,w,c
  1651  0004C4  A0D8               	btfss	status,0,c
  1652  0004C6  D002               	goto	u2060
  1653  0004C8                     u2050:
  1654  0004C8  B252               	btfsc	_flags,1,c
  1655  0004CA  D76C               	goto	l2510
  1656  0004CC                     u2060:
  1657                           
  1658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1659  0004CC  C024  F019         	movff	utoa@fp,pad@fp
  1660  0004D0  C025  F01A         	movff	utoa@fp+1,pad@fp+1
  1661  0004D4  0EBF               	movlw	low _dbuf
  1662  0004D6  2442               	addwf	utoa@i,w,c
  1663  0004D8  6E1B               	movwf	pad@buf,c
  1664  0004DA  0E00               	movlw	high _dbuf
  1665  0004DC  2043               	addwfc	utoa@i+1,w,c
  1666  0004DE  6E1C               	movwf	pad@buf+1,c
  1667  0004E0  C038  F01D         	movff	utoa@w,pad@p
  1668  0004E4  C039  F01E         	movff	utoa@w+1,pad@p+1
  1669  0004E8  EC15  F007         	call	_pad	;wreg free
  1670  0004EC  C019  F024         	movff	?_pad,?_utoa
  1671  0004F0  C01A  F025         	movff	?_pad+1,?_utoa+1
  1672  0004F4  0012               	return		;funcret
  1673  0004F6                     __end_of_utoa:
  1674                           	opt callstack 0
  1675                           
  1676 ;; *************** function _pad *****************
  1677 ;; Defined at:
  1678 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
  1681 ;;		 -> sprintf@f(6), 
  1682 ;;  buf             2   26[COMRAM] PTR unsigned char 
  1683 ;;		 -> dbuf(32), 
  1684 ;;  p               2   28[COMRAM] int 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  w               2   33[COMRAM] int 
  1687 ;;  i               2   31[COMRAM] int 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  2   24[COMRAM] int 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1697 ;;      Params:         6       0       0       0
  1698 ;;      Locals:         4       0       0       0
  1699 ;;      Temps:          1       0       0       0
  1700 ;;      Totals:        11       0       0       0
  1701 ;;Total ram usage:       11 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    6
  1704 ;; This function calls:
  1705 ;;		_fputc
  1706 ;;		_fputs
  1707 ;;		_strlen
  1708 ;; This function is called by:
  1709 ;;		_utoa
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text5
  1714  000E2A                     __ptext5:
  1715                           	opt callstack 0
  1716  000E2A                     _pad:
  1717                           	opt callstack 20
  1718                           
  1719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1720                           
  1721                           ;incstack = 0
  1722  000E2A  A052               	btfss	_flags,0,c
  1723  000E2C  D00A               	goto	l2442
  1724                           
  1725                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1726  000E2E  C01B  F012         	movff	pad@buf,fputs@s
  1727  000E32  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1728  000E36  C019  F014         	movff	pad@fp,fputs@fp
  1729  000E3A  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1730  000E3E  ECB2  F009         	call	_fputs	;wreg free
  1731  000E42                     l2442:
  1732                           
  1733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1734  000E42  BE1E               	btfsc	pad@p+1,7,c
  1735  000E44  D005               	goto	l2446
  1736  000E46  C01D  F022         	movff	pad@p,pad@w
  1737  000E4A  C01E  F023         	movff	pad@p+1,pad@w+1
  1738  000E4E  D004               	goto	l322
  1739  000E50                     l2446:
  1740  000E50  0E00               	movlw	0
  1741  000E52  6E23               	movwf	pad@w+1,c
  1742  000E54  0E00               	movlw	0
  1743  000E56  6E22               	movwf	pad@w,c
  1744  000E58                     l322:
  1745                           
  1746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1747  000E58  0E00               	movlw	0
  1748  000E5A  6E21               	movwf	pad@i+1,c
  1749  000E5C  0E00               	movlw	0
  1750  000E5E  6E20               	movwf	pad@i,c
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1753  000E60  D00C               	goto	l2452
  1754  000E62                     l2448:
  1755                           
  1756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1757  000E62  0E00               	movlw	0
  1758  000E64  6E0A               	movwf	fputc@c+1,c
  1759  000E66  0E20               	movlw	32
  1760  000E68  6E09               	movwf	fputc@c,c
  1761  000E6A  C019  F00B         	movff	pad@fp,fputc@fp
  1762  000E6E  C01A  F00C         	movff	pad@fp+1,fputc@fp+1
  1763  000E72  ECC5  F006         	call	_fputc	;wreg free
  1764                           
  1765                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1766  000E76  4A20               	infsnz	pad@i,f,c
  1767  000E78  2A21               	incf	pad@i+1,f,c
  1768  000E7A                     l2452:
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1771  000E7A  5022               	movf	pad@w,w,c
  1772  000E7C  5C20               	subwf	pad@i,w,c
  1773  000E7E  5021               	movf	pad@i+1,w,c
  1774  000E80  0A80               	xorlw	128
  1775  000E82  6E1F               	movwf	??_pad& (0+255),c
  1776  000E84  5023               	movf	pad@w+1,w,c
  1777  000E86  0A80               	xorlw	128
  1778  000E88  581F               	subwfb	??_pad& (0+255),w,c
  1779  000E8A  A0D8               	btfss	status,0,c
  1780  000E8C  D7EA               	goto	l2448
  1781                           
  1782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1783  000E8E  B052               	btfsc	_flags,0,c
  1784  000E90  D00A               	goto	l2456
  1785                           
  1786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1787  000E92  C01B  F012         	movff	pad@buf,fputs@s
  1788  000E96  C01C  F013         	movff	pad@buf+1,fputs@s+1
  1789  000E9A  C019  F014         	movff	pad@fp,fputs@fp
  1790  000E9E  C01A  F015         	movff	pad@fp+1,fputs@fp+1
  1791  000EA2  ECB2  F009         	call	_fputs	;wreg free
  1792  000EA6                     l2456:
  1793                           
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1795  000EA6  C01B  F009         	movff	pad@buf,strlen@s
  1796  000EAA  C01C  F00A         	movff	pad@buf+1,strlen@s+1
  1797  000EAE  EC2F  F00A         	call	_strlen	;wreg free
  1798  000EB2  5022               	movf	pad@w,w,c
  1799  000EB4  2409               	addwf	?_strlen,w,c
  1800  000EB6  6E19               	movwf	?_pad,c
  1801  000EB8  5023               	movf	pad@w+1,w,c
  1802  000EBA  200A               	addwfc	?_strlen+1,w,c
  1803  000EBC  6E1A               	movwf	?_pad+1,c
  1804  000EBE  0012               	return		;funcret
  1805  000EC0                     __end_of_pad:
  1806                           	opt callstack 0
  1807                           
  1808 ;; *************** function _strlen *****************
  1809 ;; Defined at:
  1810 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1813 ;;		 -> dbuf(32), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  a               2   10[COMRAM] PTR const unsigned char 
  1816 ;;		 -> dbuf(32), 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2    8[COMRAM] unsigned int 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1826 ;;      Params:         2       0       0       0
  1827 ;;      Locals:         2       0       0       0
  1828 ;;      Temps:          0       0       0       0
  1829 ;;      Totals:         4       0       0       0
  1830 ;;Total ram usage:        4 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    3
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		_pad
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text6
  1841  00145E                     __ptext6:
  1842                           	opt callstack 0
  1843  00145E                     _strlen:
  1844                           	opt callstack 22
  1845                           
  1846                           ;incstack = 0
  1847  00145E  C009  F00B         	movff	strlen@s,strlen@a
  1848  001462  C00A  F00C         	movff	strlen@s+1,strlen@a+1
  1849  001466  D002               	goto	l2432
  1850  001468                     l2430:
  1851  001468  4A09               	infsnz	strlen@s,f,c
  1852  00146A  2A0A               	incf	strlen@s+1,f,c
  1853  00146C                     l2432:
  1854  00146C  C009  FFD9         	movff	strlen@s,fsr2l
  1855  001470  C00A  FFDA         	movff	strlen@s+1,fsr2h
  1856  001474  50DF               	movf	indf2,w,c
  1857  001476  A4D8               	btfss	status,2,c
  1858  001478  D7F7               	goto	l2430
  1859  00147A  500B               	movf	strlen@a,w,c
  1860  00147C  5C09               	subwf	strlen@s,w,c
  1861  00147E  6E09               	movwf	?_strlen,c
  1862  001480  500C               	movf	strlen@a+1,w,c
  1863  001482  580A               	subwfb	strlen@s+1,w,c
  1864  001484  6E0A               	movwf	?_strlen+1,c
  1865  001486  0012               	return		;funcret
  1866  001488                     __end_of_strlen:
  1867                           	opt callstack 0
  1868                           
  1869 ;; *************** function _fputs *****************
  1870 ;; Defined at:
  1871 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  s               2   17[COMRAM] PTR const unsigned char 
  1874 ;;		 -> dbuf(32), 
  1875 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1876 ;;		 -> sprintf@f(6), 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  i               2   22[COMRAM] int 
  1879 ;;  c               1   21[COMRAM] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  2   17[COMRAM] int 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1889 ;;      Params:         4       0       0       0
  1890 ;;      Locals:         3       0       0       0
  1891 ;;      Temps:          0       0       0       0
  1892 ;;      Totals:         7       0       0       0
  1893 ;;Total ram usage:        7 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    5
  1896 ;; This function calls:
  1897 ;;		_fputc
  1898 ;; This function is called by:
  1899 ;;		_pad
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text7
  1904  001364                     __ptext7:
  1905                           	opt callstack 0
  1906  001364                     _fputs:
  1907                           	opt callstack 20
  1908                           
  1909                           ;incstack = 0
  1910  001364  0E00               	movlw	0
  1911  001366  6E18               	movwf	fputs@i+1,c
  1912  001368  0E00               	movlw	0
  1913  00136A  6E17               	movwf	fputs@i,c
  1914  00136C  D00B               	goto	l2426
  1915  00136E                     l2422:
  1916  00136E  C016  F009         	movff	fputs@c,fputc@c
  1917  001372  6A0A               	clrf	fputc@c+1,c
  1918  001374  C014  F00B         	movff	fputs@fp,fputc@fp
  1919  001378  C015  F00C         	movff	fputs@fp+1,fputc@fp+1
  1920  00137C  ECC5  F006         	call	_fputc	;wreg free
  1921  001380  4A17               	infsnz	fputs@i,f,c
  1922  001382  2A18               	incf	fputs@i+1,f,c
  1923  001384                     l2426:
  1924  001384  5017               	movf	fputs@i,w,c
  1925  001386  2412               	addwf	fputs@s,w,c
  1926  001388  6ED9               	movwf	fsr2l,c
  1927  00138A  5018               	movf	fputs@i+1,w,c
  1928  00138C  2013               	addwfc	fputs@s+1,w,c
  1929  00138E  6EDA               	movwf	fsr2h,c
  1930  001390  50DF               	movf	indf2,w,c
  1931  001392  6E16               	movwf	fputs@c,c
  1932  001394  5016               	movf	fputs@c,w,c
  1933  001396  B4D8               	btfsc	status,2,c
  1934  001398  0012               	return	
  1935  00139A  D7E9               	goto	l2422
  1936  00139C                     __end_of_fputs:
  1937                           	opt callstack 0
  1938                           
  1939 ;; *************** function _fputc *****************
  1940 ;; Defined at:
  1941 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  c               2    8[COMRAM] int 
  1944 ;;  fp              2   10[COMRAM] PTR struct _IO_FILE
  1945 ;;		 -> sprintf@f(6), 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  2    8[COMRAM] int 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1957 ;;      Params:         4       0       0       0
  1958 ;;      Locals:         0       0       0       0
  1959 ;;      Temps:          5       0       0       0
  1960 ;;      Totals:         9       0       0       0
  1961 ;;Total ram usage:        9 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    4
  1964 ;; This function calls:
  1965 ;;		_putch
  1966 ;; This function is called by:
  1967 ;;		_pad
  1968 ;;		_vfpfcnvrt
  1969 ;;		_fputs
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text8
  1974  000D8A                     __ptext8:
  1975                           	opt callstack 0
  1976  000D8A                     _fputc:
  1977                           	opt callstack 20
  1978                           
  1979                           ;incstack = 0
  1980  000D8A  500B               	movf	fputc@fp,w,c
  1981  000D8C  100C               	iorwf	fputc@fp+1,w,c
  1982  000D8E  B4D8               	btfsc	status,2,c
  1983  000D90  D004               	goto	u1840
  1984  000D92  500B               	movf	fputc@fp,w,c
  1985  000D94  100C               	iorwf	fputc@fp+1,w,c
  1986  000D96  A4D8               	btfss	status,2,c
  1987  000D98  D004               	goto	l2412
  1988  000D9A                     u1840:
  1989  000D9A  5009               	movf	fputc@c,w,c
  1990  000D9C  ECAE  F00A         	call	_putch
  1991  000DA0  0012               	return	
  1992  000DA2                     l2412:
  1993  000DA2  EE20 F004          	lfsr	2,4
  1994  000DA6  500B               	movf	fputc@fp,w,c
  1995  000DA8  26D9               	addwf	fsr2l,f,c
  1996  000DAA  500C               	movf	fputc@fp+1,w,c
  1997  000DAC  22DA               	addwfc	fsr2h,f,c
  1998  000DAE  50DE               	movf	postinc2,w,c
  1999  000DB0  10DE               	iorwf	postinc2,w,c
  2000  000DB2  B4D8               	btfsc	status,2,c
  2001  000DB4  D016               	goto	u1860
  2002  000DB6  EE20 F004          	lfsr	2,4
  2003  000DBA  500B               	movf	fputc@fp,w,c
  2004  000DBC  26D9               	addwf	fsr2l,f,c
  2005  000DBE  500C               	movf	fputc@fp+1,w,c
  2006  000DC0  22DA               	addwfc	fsr2h,f,c
  2007  000DC2  EE10 F002          	lfsr	1,2
  2008  000DC6  500B               	movf	fputc@fp,w,c
  2009  000DC8  26E1               	addwf	fsr1l,f,c
  2010  000DCA  500C               	movf	fputc@fp+1,w,c
  2011  000DCC  22E2               	addwfc	fsr1h,f,c
  2012  000DCE  50DE               	movf	postinc2,w,c
  2013  000DD0  5CE6               	subwf	postinc1,w,c
  2014  000DD2  50E6               	movf	postinc1,w,c
  2015  000DD4  0A80               	xorlw	128
  2016  000DD6  6E11               	movwf	(??_fputc+4)& (0+255),c
  2017  000DD8  50DE               	movf	postinc2,w,c
  2018  000DDA  0A80               	xorlw	128
  2019  000DDC  5811               	subwfb	(??_fputc+4)& (0+255),w,c
  2020  000DDE  B0D8               	btfsc	status,0,c
  2021  000DE0  0012               	return	
  2022  000DE2                     u1860:
  2023  000DE2  EE20 F002          	lfsr	2,2
  2024  000DE6  500B               	movf	fputc@fp,w,c
  2025  000DE8  26D9               	addwf	fsr2l,f,c
  2026  000DEA  500C               	movf	fputc@fp+1,w,c
  2027  000DEC  22DA               	addwfc	fsr2h,f,c
  2028  000DEE  CFDE F00D          	movff	postinc2,??_fputc
  2029  000DF2  CFDD F00E          	movff	postdec2,??_fputc+1
  2030  000DF6  C00B  FFD9         	movff	fputc@fp,fsr2l
  2031  000DFA  C00C  FFDA         	movff	fputc@fp+1,fsr2h
  2032  000DFE  CFDE F00F          	movff	postinc2,??_fputc+2
  2033  000E02  CFDD F010          	movff	postdec2,??_fputc+3
  2034  000E06  500D               	movf	??_fputc,w,c
  2035  000E08  240F               	addwf	??_fputc+2,w,c
  2036  000E0A  6ED9               	movwf	fsr2l,c
  2037  000E0C  500E               	movf	??_fputc+1,w,c
  2038  000E0E  2010               	addwfc	??_fputc+3,w,c
  2039  000E10  6EDA               	movwf	fsr2h,c
  2040  000E12  C009  FFDF         	movff	fputc@c,indf2
  2041  000E16  EE20 F002          	lfsr	2,2
  2042  000E1A  500B               	movf	fputc@fp,w,c
  2043  000E1C  26D9               	addwf	fsr2l,f,c
  2044  000E1E  500C               	movf	fputc@fp+1,w,c
  2045  000E20  22DA               	addwfc	fsr2h,f,c
  2046  000E22  2ADE               	incf	postinc2,f,c
  2047  000E24  0E00               	movlw	0
  2048  000E26  22DD               	addwfc	postdec2,f,c
  2049  000E28  0012               	return		;funcret
  2050  000E2A                     __end_of_fputc:
  2051                           	opt callstack 0
  2052                           
  2053 ;; *************** function _putch *****************
  2054 ;; Defined at:
  2055 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  c               1    wreg     unsigned char 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  c               1    0[COMRAM] unsigned char 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2069 ;;      Params:         0       0       0       0
  2070 ;;      Locals:         0       0       0       0
  2071 ;;      Temps:          0       0       0       0
  2072 ;;      Totals:         0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    3
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_fputc
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text9
  2084  00155C                     __ptext9:
  2085                           	opt callstack 0
  2086  00155C                     _putch:
  2087                           	opt callstack 20
  2088                           
  2089                           ;incstack = 0
  2090  00155C  0012               	return		;funcret
  2091  00155E                     __end_of_putch:
  2092                           	opt callstack 0
  2093                           
  2094 ;; *************** function ___lomod *****************
  2095 ;; Defined at:
  2096 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  dividend        8    8[COMRAM] unsigned long long 
  2099 ;;  divisor         8   16[COMRAM] unsigned long long 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  counter         1   24[COMRAM] unsigned char 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  8    8[COMRAM] unsigned long long 
  2104 ;; Registers used:
  2105 ;;		wreg, status,2, status,0
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2111 ;;      Params:        16       0       0       0
  2112 ;;      Locals:         1       0       0       0
  2113 ;;      Temps:          0       0       0       0
  2114 ;;      Totals:        17       0       0       0
  2115 ;;Total ram usage:       17 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    3
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_utoa
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text10
  2126  000CDC                     __ptext10:
  2127                           	opt callstack 0
  2128  000CDC                     ___lomod:
  2129                           	opt callstack 23
  2130                           
  2131                           ;incstack = 0
  2132  000CDC  5011               	movf	___lomod@divisor,w,c
  2133  000CDE  1012               	iorwf	___lomod@divisor+1,w,c
  2134  000CE0  1013               	iorwf	___lomod@divisor+2,w,c
  2135  000CE2  1014               	iorwf	___lomod@divisor+3,w,c
  2136  000CE4  1015               	iorwf	___lomod@divisor+4,w,c
  2137  000CE6  1016               	iorwf	___lomod@divisor+5,w,c
  2138  000CE8  1017               	iorwf	___lomod@divisor+6,w,c
  2139  000CEA  1018               	iorwf	___lomod@divisor+7,w,c
  2140  000CEC  B4D8               	btfsc	status,2,c
  2141  000CEE  D03C               	goto	l805
  2142  000CF0  0E01               	movlw	1
  2143  000CF2  6E19               	movwf	___lomod@counter,c
  2144  000CF4  D00A               	goto	l2488
  2145  000CF6                     l2486:
  2146  000CF6  90D8               	bcf	status,0,c
  2147  000CF8  3611               	rlcf	___lomod@divisor,f,c
  2148  000CFA  3612               	rlcf	___lomod@divisor+1,f,c
  2149  000CFC  3613               	rlcf	___lomod@divisor+2,f,c
  2150  000CFE  3614               	rlcf	___lomod@divisor+3,f,c
  2151  000D00  3615               	rlcf	___lomod@divisor+4,f,c
  2152  000D02  3616               	rlcf	___lomod@divisor+5,f,c
  2153  000D04  3617               	rlcf	___lomod@divisor+6,f,c
  2154  000D06  3618               	rlcf	___lomod@divisor+7,f,c
  2155  000D08  2A19               	incf	___lomod@counter,f,c
  2156  000D0A                     l2488:
  2157  000D0A  AE18               	btfss	___lomod@divisor+7,7,c
  2158  000D0C  D7F4               	goto	l2486
  2159  000D0E                     u1980:
  2160  000D0E  5011               	movf	___lomod@divisor,w,c
  2161  000D10  5C09               	subwf	___lomod@dividend,w,c
  2162  000D12  5012               	movf	___lomod@divisor+1,w,c
  2163  000D14  580A               	subwfb	___lomod@dividend+1,w,c
  2164  000D16  5013               	movf	___lomod@divisor+2,w,c
  2165  000D18  580B               	subwfb	___lomod@dividend+2,w,c
  2166  000D1A  5014               	movf	___lomod@divisor+3,w,c
  2167  000D1C  580C               	subwfb	___lomod@dividend+3,w,c
  2168  000D1E  5015               	movf	___lomod@divisor+4,w,c
  2169  000D20  580D               	subwfb	___lomod@dividend+4,w,c
  2170  000D22  5016               	movf	___lomod@divisor+5,w,c
  2171  000D24  580E               	subwfb	___lomod@dividend+5,w,c
  2172  000D26  5017               	movf	___lomod@divisor+6,w,c
  2173  000D28  580F               	subwfb	___lomod@dividend+6,w,c
  2174  000D2A  5018               	movf	___lomod@divisor+7,w,c
  2175  000D2C  5810               	subwfb	___lomod@dividend+7,w,c
  2176  000D2E  A0D8               	btfss	status,0,c
  2177  000D30  D010               	goto	l2494
  2178  000D32  5011               	movf	___lomod@divisor,w,c
  2179  000D34  5E09               	subwf	___lomod@dividend,f,c
  2180  000D36  5012               	movf	___lomod@divisor+1,w,c
  2181  000D38  5A0A               	subwfb	___lomod@dividend+1,f,c
  2182  000D3A  5013               	movf	___lomod@divisor+2,w,c
  2183  000D3C  5A0B               	subwfb	___lomod@dividend+2,f,c
  2184  000D3E  5014               	movf	___lomod@divisor+3,w,c
  2185  000D40  5A0C               	subwfb	___lomod@dividend+3,f,c
  2186  000D42  5015               	movf	___lomod@divisor+4,w,c
  2187  000D44  5A0D               	subwfb	___lomod@dividend+4,f,c
  2188  000D46  5016               	movf	___lomod@divisor+5,w,c
  2189  000D48  5A0E               	subwfb	___lomod@dividend+5,f,c
  2190  000D4A  5017               	movf	___lomod@divisor+6,w,c
  2191  000D4C  5A0F               	subwfb	___lomod@dividend+6,f,c
  2192  000D4E  5018               	movf	___lomod@divisor+7,w,c
  2193  000D50  5A10               	subwfb	___lomod@dividend+7,f,c
  2194  000D52                     l2494:
  2195  000D52  90D8               	bcf	status,0,c
  2196  000D54  3218               	rrcf	___lomod@divisor+7,f,c
  2197  000D56  3217               	rrcf	___lomod@divisor+6,f,c
  2198  000D58  3216               	rrcf	___lomod@divisor+5,f,c
  2199  000D5A  3215               	rrcf	___lomod@divisor+4,f,c
  2200  000D5C  3214               	rrcf	___lomod@divisor+3,f,c
  2201  000D5E  3213               	rrcf	___lomod@divisor+2,f,c
  2202  000D60  3212               	rrcf	___lomod@divisor+1,f,c
  2203  000D62  3211               	rrcf	___lomod@divisor,f,c
  2204  000D64  2E19               	decfsz	___lomod@counter,f,c
  2205  000D66  D7D3               	goto	u1980
  2206  000D68                     l805:
  2207  000D68  C009  F009         	movff	___lomod@dividend,?___lomod
  2208  000D6C  C00A  F00A         	movff	___lomod@dividend+1,?___lomod+1
  2209  000D70  C00B  F00B         	movff	___lomod@dividend+2,?___lomod+2
  2210  000D74  C00C  F00C         	movff	___lomod@dividend+3,?___lomod+3
  2211  000D78  C00D  F00D         	movff	___lomod@dividend+4,?___lomod+4
  2212  000D7C  C00E  F00E         	movff	___lomod@dividend+5,?___lomod+5
  2213  000D80  C00F  F00F         	movff	___lomod@dividend+6,?___lomod+6
  2214  000D84  C010  F010         	movff	___lomod@dividend+7,?___lomod+7
  2215  000D88  0012               	return		;funcret
  2216  000D8A                     __end_of___lomod:
  2217                           	opt callstack 0
  2218                           
  2219 ;; *************** function ___lodiv *****************
  2220 ;; Defined at:
  2221 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  dividend        8    8[COMRAM] unsigned long long 
  2224 ;;  divisor         8   16[COMRAM] unsigned long long 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  quotient        8   24[COMRAM] unsigned long long 
  2227 ;;  counter         1   32[COMRAM] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  8    8[COMRAM] unsigned long long 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2237 ;;      Params:        16       0       0       0
  2238 ;;      Locals:         9       0       0       0
  2239 ;;      Temps:          0       0       0       0
  2240 ;;      Totals:        25       0       0       0
  2241 ;;Total ram usage:       25 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    3
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_utoa
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text11
  2252  000B46                     __ptext11:
  2253                           	opt callstack 0
  2254  000B46                     ___lodiv:
  2255                           	opt callstack 23
  2256                           
  2257                           ;incstack = 0
  2258  000B46  EE20  F019         	lfsr	2,___lodiv@quotient
  2259  000B4A  0E07               	movlw	7
  2260  000B4C                     u1931:
  2261  000B4C  6ADE               	clrf	postinc2,c
  2262  000B4E  06E8               	decf	wreg,f,c
  2263  000B50  E2FD               	bc	u1931
  2264  000B52  5011               	movf	___lodiv@divisor,w,c
  2265  000B54  1012               	iorwf	___lodiv@divisor+1,w,c
  2266  000B56  1013               	iorwf	___lodiv@divisor+2,w,c
  2267  000B58  1014               	iorwf	___lodiv@divisor+3,w,c
  2268  000B5A  1015               	iorwf	___lodiv@divisor+4,w,c
  2269  000B5C  1016               	iorwf	___lodiv@divisor+5,w,c
  2270  000B5E  1017               	iorwf	___lodiv@divisor+6,w,c
  2271  000B60  1018               	iorwf	___lodiv@divisor+7,w,c
  2272  000B62  B4D8               	btfsc	status,2,c
  2273  000B64  D046               	goto	l795
  2274  000B66  0E01               	movlw	1
  2275  000B68  6E21               	movwf	___lodiv@counter,c
  2276  000B6A  D00A               	goto	l2468
  2277  000B6C                     l2466:
  2278  000B6C  90D8               	bcf	status,0,c
  2279  000B6E  3611               	rlcf	___lodiv@divisor,f,c
  2280  000B70  3612               	rlcf	___lodiv@divisor+1,f,c
  2281  000B72  3613               	rlcf	___lodiv@divisor+2,f,c
  2282  000B74  3614               	rlcf	___lodiv@divisor+3,f,c
  2283  000B76  3615               	rlcf	___lodiv@divisor+4,f,c
  2284  000B78  3616               	rlcf	___lodiv@divisor+5,f,c
  2285  000B7A  3617               	rlcf	___lodiv@divisor+6,f,c
  2286  000B7C  3618               	rlcf	___lodiv@divisor+7,f,c
  2287  000B7E  2A21               	incf	___lodiv@counter,f,c
  2288  000B80                     l2468:
  2289  000B80  AE18               	btfss	___lodiv@divisor+7,7,c
  2290  000B82  D7F4               	goto	l2466
  2291  000B84                     u1950:
  2292  000B84  90D8               	bcf	status,0,c
  2293  000B86  3619               	rlcf	___lodiv@quotient,f,c
  2294  000B88  361A               	rlcf	___lodiv@quotient+1,f,c
  2295  000B8A  361B               	rlcf	___lodiv@quotient+2,f,c
  2296  000B8C  361C               	rlcf	___lodiv@quotient+3,f,c
  2297  000B8E  361D               	rlcf	___lodiv@quotient+4,f,c
  2298  000B90  361E               	rlcf	___lodiv@quotient+5,f,c
  2299  000B92  361F               	rlcf	___lodiv@quotient+6,f,c
  2300  000B94  3620               	rlcf	___lodiv@quotient+7,f,c
  2301  000B96  5011               	movf	___lodiv@divisor,w,c
  2302  000B98  5C09               	subwf	___lodiv@dividend,w,c
  2303  000B9A  5012               	movf	___lodiv@divisor+1,w,c
  2304  000B9C  580A               	subwfb	___lodiv@dividend+1,w,c
  2305  000B9E  5013               	movf	___lodiv@divisor+2,w,c
  2306  000BA0  580B               	subwfb	___lodiv@dividend+2,w,c
  2307  000BA2  5014               	movf	___lodiv@divisor+3,w,c
  2308  000BA4  580C               	subwfb	___lodiv@dividend+3,w,c
  2309  000BA6  5015               	movf	___lodiv@divisor+4,w,c
  2310  000BA8  580D               	subwfb	___lodiv@dividend+4,w,c
  2311  000BAA  5016               	movf	___lodiv@divisor+5,w,c
  2312  000BAC  580E               	subwfb	___lodiv@dividend+5,w,c
  2313  000BAE  5017               	movf	___lodiv@divisor+6,w,c
  2314  000BB0  580F               	subwfb	___lodiv@dividend+6,w,c
  2315  000BB2  5018               	movf	___lodiv@divisor+7,w,c
  2316  000BB4  5810               	subwfb	___lodiv@dividend+7,w,c
  2317  000BB6  A0D8               	btfss	status,0,c
  2318  000BB8  D011               	goto	l2478
  2319  000BBA  5011               	movf	___lodiv@divisor,w,c
  2320  000BBC  5E09               	subwf	___lodiv@dividend,f,c
  2321  000BBE  5012               	movf	___lodiv@divisor+1,w,c
  2322  000BC0  5A0A               	subwfb	___lodiv@dividend+1,f,c
  2323  000BC2  5013               	movf	___lodiv@divisor+2,w,c
  2324  000BC4  5A0B               	subwfb	___lodiv@dividend+2,f,c
  2325  000BC6  5014               	movf	___lodiv@divisor+3,w,c
  2326  000BC8  5A0C               	subwfb	___lodiv@dividend+3,f,c
  2327  000BCA  5015               	movf	___lodiv@divisor+4,w,c
  2328  000BCC  5A0D               	subwfb	___lodiv@dividend+4,f,c
  2329  000BCE  5016               	movf	___lodiv@divisor+5,w,c
  2330  000BD0  5A0E               	subwfb	___lodiv@dividend+5,f,c
  2331  000BD2  5017               	movf	___lodiv@divisor+6,w,c
  2332  000BD4  5A0F               	subwfb	___lodiv@dividend+6,f,c
  2333  000BD6  5018               	movf	___lodiv@divisor+7,w,c
  2334  000BD8  5A10               	subwfb	___lodiv@dividend+7,f,c
  2335  000BDA  8019               	bsf	___lodiv@quotient,0,c
  2336  000BDC                     l2478:
  2337  000BDC  90D8               	bcf	status,0,c
  2338  000BDE  3218               	rrcf	___lodiv@divisor+7,f,c
  2339  000BE0  3217               	rrcf	___lodiv@divisor+6,f,c
  2340  000BE2  3216               	rrcf	___lodiv@divisor+5,f,c
  2341  000BE4  3215               	rrcf	___lodiv@divisor+4,f,c
  2342  000BE6  3214               	rrcf	___lodiv@divisor+3,f,c
  2343  000BE8  3213               	rrcf	___lodiv@divisor+2,f,c
  2344  000BEA  3212               	rrcf	___lodiv@divisor+1,f,c
  2345  000BEC  3211               	rrcf	___lodiv@divisor,f,c
  2346  000BEE  2E21               	decfsz	___lodiv@counter,f,c
  2347  000BF0  D7C9               	goto	u1950
  2348  000BF2                     l795:
  2349  000BF2  C019  F009         	movff	___lodiv@quotient,?___lodiv
  2350  000BF6  C01A  F00A         	movff	___lodiv@quotient+1,?___lodiv+1
  2351  000BFA  C01B  F00B         	movff	___lodiv@quotient+2,?___lodiv+2
  2352  000BFE  C01C  F00C         	movff	___lodiv@quotient+3,?___lodiv+3
  2353  000C02  C01D  F00D         	movff	___lodiv@quotient+4,?___lodiv+4
  2354  000C06  C01E  F00E         	movff	___lodiv@quotient+5,?___lodiv+5
  2355  000C0A  C01F  F00F         	movff	___lodiv@quotient+6,?___lodiv+6
  2356  000C0E  C020  F010         	movff	___lodiv@quotient+7,?___lodiv+7
  2357  000C12  0012               	return		;funcret
  2358  000C14                     __end_of___lodiv:
  2359                           	opt callstack 0
  2360                           
  2361 ;; *************** function _setup *****************
  2362 ;; Defined at:
  2363 ;;		line 38 in file "main.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;		None
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;		None
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  1    wreg      void 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2377 ;;      Params:         0       0       0       0
  2378 ;;      Locals:         0       0       0       0
  2379 ;;      Temps:          0       0       0       0
  2380 ;;      Totals:         0       0       0       0
  2381 ;;Total ram usage:        0 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    7
  2384 ;; This function calls:
  2385 ;;		_initPWM
  2386 ;;		_init_LCD
  2387 ;;		_init_RFID
  2388 ;;		_init_sensor
  2389 ;; This function is called by:
  2390 ;;		_main
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text12
  2395  001402                     __ptext12:
  2396                           	opt callstack 0
  2397  001402                     _setup:
  2398                           	opt callstack 23
  2399                           
  2400                           ;main.c: 41:     OSCCON = 0x72;
  2401                           
  2402                           ;incstack = 0
  2403  001402  0E72               	movlw	114
  2404  001404  6ED3               	movwf	4051,c	;volatile
  2405  001406                     l63:
  2406  001406  A4D3               	btfss	4051,2,c	;volatile
  2407  001408  D7FE               	goto	l63
  2408                           
  2409                           ;main.c: 43:     INTCONbits.GIEH = 1;
  2410  00140A  8EF2               	bsf	4082,7,c	;volatile
  2411                           
  2412                           ;main.c: 44:     INTCONbits.GIEL = 1;
  2413  00140C  8CF2               	bsf	4082,6,c	;volatile
  2414                           
  2415                           ;main.c: 45:     RCONbits.IPEN=1;
  2416  00140E  8ED0               	bsf	4048,7,c	;volatile
  2417                           
  2418                           ;main.c: 48:     init_LCD();
  2419  001410  EC0A  F006         	call	_init_LCD	;wreg free
  2420                           
  2421                           ;main.c: 49:     init_RFID();
  2422  001414  EC6A  F00A         	call	_init_RFID	;wreg free
  2423                           
  2424                           ;main.c: 50:     init_sensor();
  2425  001418  EC9D  F00A         	call	_init_sensor	;wreg free
  2426                           
  2427                           ;main.c: 51:     initPWM(199);
  2428  00141C  0E00               	movlw	0
  2429  00141E  6E0A               	movwf	initPWM@PWMperiod+1,c
  2430  001420  0EC7               	movlw	199
  2431  001422  6E09               	movwf	initPWM@PWMperiod,c
  2432  001424  EC77  F00A         	call	_initPWM	;wreg free
  2433                           
  2434                           ;main.c: 53:     TRISBbits.RB0 = 0;
  2435  001428  9093               	bcf	3987,0,c	;volatile
  2436                           
  2437                           ;main.c: 54:     TRISBbits.RB2 = 0;
  2438  00142A  9493               	bcf	3987,2,c	;volatile
  2439                           
  2440                           ;main.c: 55:     TRISDbits.RD2 = 1;
  2441  00142C  8495               	bsf	3989,2,c	;volatile
  2442  00142E  0012               	return		;funcret
  2443  001430                     __end_of_setup:
  2444                           	opt callstack 0
  2445                           
  2446 ;; *************** function _init_sensor *****************
  2447 ;; Defined at:
  2448 ;;		line 14 in file "signal_processing.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2462 ;;      Params:         0       0       0       0
  2463 ;;      Locals:         0       0       0       0
  2464 ;;      Temps:          0       0       0       0
  2465 ;;      Totals:         0       0       0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    3
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_setup
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text13
  2477  00153A                     __ptext13:
  2478                           	opt callstack 0
  2479  00153A                     _init_sensor:
  2480                           	opt callstack 26
  2481                           
  2482                           ;signal_processing.c: 16:     T5CON =0b00000001;
  2483                           
  2484                           ;incstack = 0
  2485  00153A  0E01               	movlw	1
  2486  00153C  6EB7               	movwf	4023,c	;volatile
  2487                           
  2488                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2489  00153E  8492               	bsf	3986,2,c	;volatile
  2490                           
  2491                           ;signal_processing.c: 20:     ANSEL0 = 0;
  2492  001540  0E00               	movlw	0
  2493  001542  6EB8               	movwf	4024,c	;volatile
  2494                           
  2495                           ;signal_processing.c: 21:     ANSEL1 = 0;
  2496  001544  0E00               	movlw	0
  2497  001546  6EB9               	movwf	4025,c	;volatile
  2498                           
  2499                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  2500  001548  0E47               	movlw	71
  2501  00154A  6E63               	movwf	3939,c	;volatile
  2502  00154C  0012               	return		;funcret
  2503  00154E                     __end_of_init_sensor:
  2504                           	opt callstack 0
  2505                           
  2506 ;; *************** function _init_RFID *****************
  2507 ;; Defined at:
  2508 ;;		line 13 in file "RFID.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       0       0       0
  2523 ;;      Locals:         0       0       0       0
  2524 ;;      Temps:          0       0       0       0
  2525 ;;      Totals:         0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		Nothing
  2531 ;; This function is called by:
  2532 ;;		_setup
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text14
  2537  0014D4                     __ptext14:
  2538                           	opt callstack 0
  2539  0014D4                     _init_RFID:
  2540                           	opt callstack 26
  2541                           
  2542                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2543                           
  2544                           ;incstack = 0
  2545  0014D4  8E94               	bsf	3988,7,c	;volatile
  2546                           
  2547                           ;RFID.c: 19:     SPBRG = 203;
  2548  0014D6  0ECB               	movlw	203
  2549  0014D8  6EAF               	movwf	4015,c	;volatile
  2550                           
  2551                           ;RFID.c: 20:     SPBRGH = 0;
  2552  0014DA  0E00               	movlw	0
  2553  0014DC  6EB0               	movwf	4016,c	;volatile
  2554                           
  2555                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2556  0014DE  86AA               	bsf	4010,3,c	;volatile
  2557                           
  2558                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2559  0014E0  84AC               	bsf	4012,2,c	;volatile
  2560                           
  2561                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2562  0014E2  88AB               	bsf	4011,4,c	;volatile
  2563                           
  2564                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2565  0014E4  8EAB               	bsf	4011,7,c	;volatile
  2566                           
  2567                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2568  0014E6  8AAC               	bsf	4012,5,c	;volatile
  2569                           
  2570                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2571  0014E8  8A9D               	bsf	3997,5,c	;volatile
  2572                           
  2573                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2574  0014EA  8A9F               	bsf	3999,5,c	;volatile
  2575  0014EC  0012               	return		;funcret
  2576  0014EE                     __end_of_init_RFID:
  2577                           	opt callstack 0
  2578                           
  2579 ;; *************** function _init_LCD *****************
  2580 ;; Defined at:
  2581 ;;		line 56 in file "LCDIO.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2595 ;;      Params:         0       0       0       0
  2596 ;;      Locals:         0       0       0       0
  2597 ;;      Temps:          1       0       0       0
  2598 ;;      Totals:         1       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    6
  2602 ;; This function calls:
  2603 ;;		_LCDout
  2604 ;;		_SendLCD
  2605 ;; This function is called by:
  2606 ;;		_setup
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text15
  2611  000C14                     __ptext15:
  2612                           	opt callstack 0
  2613  000C14                     _init_LCD:
  2614                           	opt callstack 23
  2615                           
  2616                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2617                           
  2618                           ;incstack = 0
  2619  000C14  9094               	bcf	3988,0,c	;volatile
  2620                           
  2621                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2622  000C16  9E92               	bcf	3986,7,c	;volatile
  2623                           
  2624                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2625  000C18  9694               	bcf	3988,3,c	;volatile
  2626                           
  2627                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2628  000C1A  9095               	bcf	3989,0,c	;volatile
  2629                           
  2630                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2631  000C1C  9295               	bcf	3989,1,c	;volatile
  2632                           
  2633                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2634  000C1E  9C92               	bcf	3986,6,c	;volatile
  2635                           
  2636                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2637  000C20  908C               	bcf	3980,0,c	;volatile
  2638                           
  2639                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2640  000C22  928C               	bcf	3980,1,c	;volatile
  2641                           
  2642                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2643  000C24  968B               	bcf	3979,3,c	;volatile
  2644                           
  2645                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2646  000C26  908B               	bcf	3979,0,c	;volatile
  2647                           
  2648                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2649  000C28  9C89               	bcf	3977,6,c	;volatile
  2650                           
  2651                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2652  000C2A  9E89               	bcf	3977,7,c	;volatile
  2653                           
  2654                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2655  000C2C  0E27               	movlw	39
  2656  000C2E  6E0D               	movwf	??_init_LCD& (0+255),c
  2657  000C30  0EF5               	movlw	245
  2658  000C32                     u2197:
  2659  000C32  2EE8               	decfsz	wreg,f,c
  2660  000C34  D7FE               	bra	u2197
  2661  000C36  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2662  000C38  D7FC               	bra	u2197
  2663  000C3A  F000               	nop	
  2664                           
  2665                           ;LCDIO.c: 76:  LCDout(0b0011);
  2666  000C3C  0E03               	movlw	3
  2667  000C3E  EC28  F008         	call	_LCDout
  2668                           
  2669                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2670  000C42  0E0D               	movlw	13
  2671  000C44  6E0D               	movwf	??_init_LCD& (0+255),c
  2672  000C46  0EFC               	movlw	252
  2673  000C48                     u2207:
  2674  000C48  2EE8               	decfsz	wreg,f,c
  2675  000C4A  D7FE               	bra	u2207
  2676  000C4C  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2677  000C4E  D7FC               	bra	u2207
  2678                           
  2679                           ;LCDIO.c: 78:  LCDout(0b0011);
  2680  000C50  0E03               	movlw	3
  2681  000C52  EC28  F008         	call	_LCDout
  2682                           
  2683                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2684  000C56  0E85               	movlw	133
  2685  000C58                     u2217:
  2686  000C58  2EE8               	decfsz	wreg,f,c
  2687  000C5A  D7FE               	bra	u2217
  2688  000C5C  F000               	nop	
  2689                           
  2690                           ;LCDIO.c: 80:  LCDout(0b0011);
  2691  000C5E  0E03               	movlw	3
  2692  000C60  EC28  F008         	call	_LCDout
  2693                           
  2694                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2695  000C64  0E21               	movlw	33
  2696  000C66                     u2227:
  2697  000C66  2EE8               	decfsz	wreg,f,c
  2698  000C68  D7FE               	bra	u2227
  2699  000C6A  F000               	nop	
  2700                           
  2701                           ;LCDIO.c: 82:  LCDout(0b0010);
  2702  000C6C  0E02               	movlw	2
  2703  000C6E  EC28  F008         	call	_LCDout
  2704                           
  2705                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2706  000C72  0E21               	movlw	33
  2707  000C74                     u2237:
  2708  000C74  2EE8               	decfsz	wreg,f,c
  2709  000C76  D7FE               	bra	u2237
  2710  000C78  F000               	nop	
  2711                           
  2712                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2713  000C7A  0E00               	movlw	0
  2714  000C7C  6E0B               	movwf	SendLCD@type,c
  2715  000C7E  0E28               	movlw	40
  2716  000C80  ECE9  F009         	call	_SendLCD
  2717                           
  2718                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2719  000C84  0E21               	movlw	33
  2720  000C86                     u2247:
  2721  000C86  2EE8               	decfsz	wreg,f,c
  2722  000C88  D7FE               	bra	u2247
  2723  000C8A  F000               	nop	
  2724                           
  2725                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2726  000C8C  0E00               	movlw	0
  2727  000C8E  6E0B               	movwf	SendLCD@type,c
  2728  000C90  0E08               	movlw	8
  2729  000C92  ECE9  F009         	call	_SendLCD
  2730                           
  2731                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2732  000C96  0E21               	movlw	33
  2733  000C98                     u2257:
  2734  000C98  2EE8               	decfsz	wreg,f,c
  2735  000C9A  D7FE               	bra	u2257
  2736  000C9C  F000               	nop	
  2737                           
  2738                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2739  000C9E  0E00               	movlw	0
  2740  000CA0  6E0B               	movwf	SendLCD@type,c
  2741  000CA2  0E01               	movlw	1
  2742  000CA4  ECE9  F009         	call	_SendLCD
  2743                           
  2744                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2745  000CA8  0E0D               	movlw	13
  2746  000CAA  6E0D               	movwf	??_init_LCD& (0+255),c
  2747  000CAC  0EFC               	movlw	252
  2748  000CAE                     u2267:
  2749  000CAE  2EE8               	decfsz	wreg,f,c
  2750  000CB0  D7FE               	bra	u2267
  2751  000CB2  2E0D               	decfsz	??_init_LCD& (0+255),f,c
  2752  000CB4  D7FC               	bra	u2267
  2753                           
  2754                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2755  000CB6  0E00               	movlw	0
  2756  000CB8  6E0B               	movwf	SendLCD@type,c
  2757  000CBA  0E06               	movlw	6
  2758  000CBC  ECE9  F009         	call	_SendLCD
  2759                           
  2760                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2761  000CC0  0E21               	movlw	33
  2762  000CC2                     u2277:
  2763  000CC2  2EE8               	decfsz	wreg,f,c
  2764  000CC4  D7FE               	bra	u2277
  2765  000CC6  F000               	nop	
  2766                           
  2767                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2768  000CC8  0E00               	movlw	0
  2769  000CCA  6E0B               	movwf	SendLCD@type,c
  2770  000CCC  0E0C               	movlw	12
  2771  000CCE  ECE9  F009         	call	_SendLCD
  2772                           
  2773                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2774  000CD2  0E21               	movlw	33
  2775  000CD4                     u2287:
  2776  000CD4  2EE8               	decfsz	wreg,f,c
  2777  000CD6  D7FE               	bra	u2287
  2778  000CD8  F000               	nop	
  2779  000CDA  0012               	return		;funcret
  2780  000CDC                     __end_of_init_LCD:
  2781                           	opt callstack 0
  2782                           
  2783 ;; *************** function _initPWM *****************
  2784 ;; Defined at:
  2785 ;;		line 5 in file "dc_motor.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  PWMperiod       2    8[COMRAM] int 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2799 ;;      Params:         2       0       0       0
  2800 ;;      Locals:         0       0       0       0
  2801 ;;      Temps:          0       0       0       0
  2802 ;;      Totals:         2       0       0       0
  2803 ;;Total ram usage:        2 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    3
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_setup
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text16
  2814  0014EE                     __ptext16:
  2815                           	opt callstack 0
  2816  0014EE                     _initPWM:
  2817                           	opt callstack 26
  2818                           
  2819                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2820                           
  2821                           ;incstack = 0
  2822  0014EE  0E00               	movlw	0
  2823  0014F0  6E7F               	movwf	3967,c	;volatile
  2824                           
  2825                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2826  0014F2  0E80               	movlw	128
  2827  0014F4  6E7E               	movwf	3966,c	;volatile
  2828                           
  2829                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2830  0014F6  0E6F               	movlw	111
  2831  0014F8  6E6F               	movwf	3951,c	;volatile
  2832                           
  2833                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2834  0014FA  0E00               	movlw	0
  2835  0014FC  6E6E               	movwf	3950,c	;volatile
  2836                           
  2837                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2838  0014FE  C009  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2839                           
  2840                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2841  001502  500A               	movf	initPWM@PWMperiod+1,w,c
  2842  001504  6E7A               	movwf	3962,c	;volatile
  2843  001506  0012               	return		;funcret
  2844  001508                     __end_of_initPWM:
  2845                           	opt callstack 0
  2846                           
  2847 ;; *************** function _process_signal *****************
  2848 ;; Defined at:
  2849 ;;		line 30 in file "signal_processing.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  S               2   29[COMRAM] PTR struct Sensor
  2852 ;;		 -> main@sensor(4), 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  smoothing_co    2    0        int 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2864 ;;      Params:         2       0       0       0
  2865 ;;      Locals:         2       0       0       0
  2866 ;;      Temps:          0       0       0       0
  2867 ;;      Totals:         4       0       0       0
  2868 ;;Total ram usage:        4 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    4
  2871 ;; This function calls:
  2872 ;;		___awdiv
  2873 ;;		___lwdiv
  2874 ;;		___wmul
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text17
  2881  000EC0                     __ptext17:
  2882                           	opt callstack 0
  2883  000EC0                     _process_signal:
  2884                           	opt callstack 26
  2885                           
  2886                           ;signal_processing.c: 34:     S->smoothed_signal *= (100-smoothing_constant)/100;
  2887                           
  2888                           ;incstack = 0
  2889  000EC0  EE20 F002          	lfsr	2,2
  2890  000EC4  501E               	movf	process_signal@S,w,c
  2891  000EC6  26D9               	addwf	fsr2l,f,c
  2892  000EC8  501F               	movf	process_signal@S+1,w,c
  2893  000ECA  22DA               	addwfc	fsr2h,f,c
  2894  000ECC  CFDE F011          	movff	postinc2,___wmul@multiplier
  2895  000ED0  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  2896  000ED4  0E00               	movlw	0
  2897  000ED6  6E0C               	movwf	___awdiv@divisor+1,c
  2898  000ED8  0E64               	movlw	100
  2899  000EDA  6E0B               	movwf	___awdiv@divisor,c
  2900  000EDC  0E00               	movlw	0
  2901  000EDE  6E0A               	movwf	___awdiv@dividend+1,c
  2902  000EE0  0E5A               	movlw	90
  2903  000EE2  6E09               	movwf	___awdiv@dividend,c
  2904  000EE4  ECA7  F007         	call	___awdiv	;wreg free
  2905  000EE8  C009  F013         	movff	?___awdiv,___wmul@multiplicand
  2906  000EEC  C00A  F014         	movff	?___awdiv+1,___wmul@multiplicand+1
  2907  000EF0  EC57  F00A         	call	___wmul	;wreg free
  2908  000EF4  EE20 F002          	lfsr	2,2
  2909  000EF8  501E               	movf	process_signal@S,w,c
  2910  000EFA  26D9               	addwf	fsr2l,f,c
  2911  000EFC  501F               	movf	process_signal@S+1,w,c
  2912  000EFE  22DA               	addwfc	fsr2h,f,c
  2913  000F00  C011  FFDE         	movff	?___wmul,postinc2
  2914  000F04  C012  FFDD         	movff	?___wmul+1,postdec2
  2915                           
  2916                           ;signal_processing.c: 35:     S->smoothed_signal += (S->raw_data * smoothing_constant)/1
      +                          00;
  2917  000F08  C01E  FFD9         	movff	process_signal@S,fsr2l
  2918  000F0C  C01F  FFDA         	movff	process_signal@S+1,fsr2h
  2919  000F10  CFDE F011          	movff	postinc2,___wmul@multiplier
  2920  000F14  CFDD F012          	movff	postdec2,___wmul@multiplier+1
  2921  000F18  0E00               	movlw	0
  2922  000F1A  6E14               	movwf	___wmul@multiplicand+1,c
  2923  000F1C  0E0A               	movlw	10
  2924  000F1E  6E13               	movwf	___wmul@multiplicand,c
  2925  000F20  EC57  F00A         	call	___wmul	;wreg free
  2926  000F24  C011  F017         	movff	?___wmul,___lwdiv@dividend
  2927  000F28  C012  F018         	movff	?___wmul+1,___lwdiv@dividend+1
  2928  000F2C  0E00               	movlw	0
  2929  000F2E  6E1A               	movwf	___lwdiv@divisor+1,c
  2930  000F30  0E64               	movlw	100
  2931  000F32  6E19               	movwf	___lwdiv@divisor,c
  2932  000F34  EC1F  F009         	call	___lwdiv	;wreg free
  2933  000F38  EE20 F002          	lfsr	2,2
  2934  000F3C  501E               	movf	process_signal@S,w,c
  2935  000F3E  26D9               	addwf	fsr2l,f,c
  2936  000F40  501F               	movf	process_signal@S+1,w,c
  2937  000F42  22DA               	addwfc	fsr2h,f,c
  2938  000F44  5017               	movf	?___lwdiv,w,c
  2939  000F46  26DE               	addwf	postinc2,f,c
  2940  000F48  5018               	movf	?___lwdiv+1,w,c
  2941  000F4A  22DD               	addwfc	postdec2,f,c
  2942  000F4C  0012               	return		;funcret
  2943  000F4E                     __end_of_process_signal:
  2944                           	opt callstack 0
  2945                           
  2946 ;; *************** function ___lwdiv *****************
  2947 ;; Defined at:
  2948 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  dividend        2   22[COMRAM] unsigned int 
  2951 ;;  divisor         2   24[COMRAM] unsigned int 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  quotient        2   26[COMRAM] unsigned int 
  2954 ;;  counter         1   28[COMRAM] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  2   22[COMRAM] unsigned int 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2964 ;;      Params:         4       0       0       0
  2965 ;;      Locals:         3       0       0       0
  2966 ;;      Temps:          0       0       0       0
  2967 ;;      Totals:         7       0       0       0
  2968 ;;Total ram usage:        7 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    3
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_process_signal
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text18
  2979  00123E                     __ptext18:
  2980                           	opt callstack 0
  2981  00123E                     ___lwdiv:
  2982                           	opt callstack 26
  2983                           
  2984                           ;incstack = 0
  2985  00123E  0E00               	movlw	0
  2986  001240  6E1C               	movwf	___lwdiv@quotient+1,c
  2987  001242  0E00               	movlw	0
  2988  001244  6E1B               	movwf	___lwdiv@quotient,c
  2989  001246  5019               	movf	___lwdiv@divisor,w,c
  2990  001248  101A               	iorwf	___lwdiv@divisor+1,w,c
  2991  00124A  B4D8               	btfsc	status,2,c
  2992  00124C  D01C               	goto	l848
  2993  00124E  0E01               	movlw	1
  2994  001250  6E1D               	movwf	___lwdiv@counter,c
  2995  001252  D004               	goto	l2114
  2996  001254                     l2112:
  2997  001254  90D8               	bcf	status,0,c
  2998  001256  3619               	rlcf	___lwdiv@divisor,f,c
  2999  001258  361A               	rlcf	___lwdiv@divisor+1,f,c
  3000  00125A  2A1D               	incf	___lwdiv@counter,f,c
  3001  00125C                     l2114:
  3002  00125C  AE1A               	btfss	___lwdiv@divisor+1,7,c
  3003  00125E  D7FA               	goto	l2112
  3004  001260                     u1390:
  3005  001260  90D8               	bcf	status,0,c
  3006  001262  361B               	rlcf	___lwdiv@quotient,f,c
  3007  001264  361C               	rlcf	___lwdiv@quotient+1,f,c
  3008  001266  5019               	movf	___lwdiv@divisor,w,c
  3009  001268  5C17               	subwf	___lwdiv@dividend,w,c
  3010  00126A  501A               	movf	___lwdiv@divisor+1,w,c
  3011  00126C  5818               	subwfb	___lwdiv@dividend+1,w,c
  3012  00126E  A0D8               	btfss	status,0,c
  3013  001270  D005               	goto	l2124
  3014  001272  5019               	movf	___lwdiv@divisor,w,c
  3015  001274  5E17               	subwf	___lwdiv@dividend,f,c
  3016  001276  501A               	movf	___lwdiv@divisor+1,w,c
  3017  001278  5A18               	subwfb	___lwdiv@dividend+1,f,c
  3018  00127A  801B               	bsf	___lwdiv@quotient,0,c
  3019  00127C                     l2124:
  3020  00127C  90D8               	bcf	status,0,c
  3021  00127E  321A               	rrcf	___lwdiv@divisor+1,f,c
  3022  001280  3219               	rrcf	___lwdiv@divisor,f,c
  3023  001282  2E1D               	decfsz	___lwdiv@counter,f,c
  3024  001284  D7ED               	goto	u1390
  3025  001286                     l848:
  3026  001286  C01B  F017         	movff	___lwdiv@quotient,?___lwdiv
  3027  00128A  C01C  F018         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3028  00128E  0012               	return		;funcret
  3029  001290                     __end_of___lwdiv:
  3030                           	opt callstack 0
  3031                           
  3032 ;; *************** function _moveToBeacon *****************
  3033 ;; Defined at:
  3034 ;;		line 117 in file "dc_motor.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  beacon_locat    1    wreg     unsigned char 
  3037 ;;  prev_locatio    1   38[COMRAM] unsigned char 
  3038 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3039 ;;		 -> main@motorL(9), 
  3040 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3041 ;;		 -> main@motorR(9), 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  beacon_locat    1   43[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3053 ;;      Params:         5       0       0       0
  3054 ;;      Locals:         1       0       0       0
  3055 ;;      Temps:          0       0       0       0
  3056 ;;      Totals:         6       0       0       0
  3057 ;;Total ram usage:        6 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    6
  3060 ;; This function calls:
  3061 ;;		_fullSpeedAhead
  3062 ;;		_turnRight
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text19
  3069  0012DC                     __ptext19:
  3070                           	opt callstack 0
  3071  0012DC                     _moveToBeacon:
  3072                           	opt callstack 24
  3073                           
  3074                           ;incstack = 0
  3075                           ;moveToBeacon@beacon_location stored from wreg
  3076  0012DC  6E2C               	movwf	moveToBeacon@beacon_location,c
  3077                           
  3078                           ;dc_motor.c: 117: void moveToBeacon(char beacon_location, char prev_location,;dc_motor.c
      +                          : 118:                     struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 119: {;
      +                          dc_motor.c: 121:     if(beacon_location == 0)
  3079  0012DE  502C               	movf	moveToBeacon@beacon_location,w,c
  3080  0012E0  A4D8               	btfss	status,2,c
  3081  0012E2  D00E               	goto	l2222
  3082                           
  3083                           ;dc_motor.c: 122:     {;dc_motor.c: 123:         if(prev_location!= beacon_location)
  3084  0012E4  502C               	movf	moveToBeacon@beacon_location,w,c
  3085  0012E6  1827               	xorwf	moveToBeacon@prev_location,w,c
  3086  0012E8  B4D8               	btfsc	status,2,c
  3087  0012EA  D00A               	goto	l2222
  3088                           
  3089                           ;dc_motor.c: 124:         {;dc_motor.c: 125:             turnRight(mL, mR);
  3090  0012EC  C028  F020         	movff	moveToBeacon@mL,turnRight@mL
  3091  0012F0  C029  F021         	movff	moveToBeacon@mL+1,turnRight@mL+1
  3092  0012F4  C02A  F022         	movff	moveToBeacon@mR,turnRight@mR
  3093  0012F8  C02B  F023         	movff	moveToBeacon@mR+1,turnRight@mR+1
  3094  0012FC  ECE9  F007         	call	_turnRight	;wreg free
  3095  001300                     l2222:
  3096                           
  3097                           ;dc_motor.c: 129:     if(beacon_location == 1)
  3098  001300  042C               	decf	moveToBeacon@beacon_location,w,c
  3099  001302  A4D8               	btfss	status,2,c
  3100  001304  0012               	return	
  3101                           
  3102                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         if(prev_location != beacon_location)
  3103  001306  502C               	movf	moveToBeacon@beacon_location,w,c
  3104  001308  1827               	xorwf	moveToBeacon@prev_location,w,c
  3105  00130A  B4D8               	btfsc	status,2,c
  3106  00130C  0012               	return	
  3107                           
  3108                           ;dc_motor.c: 132:         {;dc_motor.c: 133:         fullSpeedAhead(mL,mR);
  3109  00130E  C028  F020         	movff	moveToBeacon@mL,fullSpeedAhead@mL
  3110  001312  C029  F021         	movff	moveToBeacon@mL+1,fullSpeedAhead@mL+1
  3111  001316  C02A  F022         	movff	moveToBeacon@mR,fullSpeedAhead@mR
  3112  00131A  C02B  F023         	movff	moveToBeacon@mR+1,fullSpeedAhead@mR+1
  3113  00131E  EC64  F008         	call	_fullSpeedAhead	;wreg free
  3114  001322  0012               	return		;funcret
  3115  001324                     __end_of_moveToBeacon:
  3116                           	opt callstack 0
  3117                           
  3118 ;; *************** function _turnRight *****************
  3119 ;; Defined at:
  3120 ;;		line 86 in file "dc_motor.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3123 ;;		 -> main@motorL(9), 
  3124 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3125 ;;		 -> main@motorR(9), 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  i               2   36[COMRAM] int 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      void 
  3130 ;; Registers used:
  3131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3137 ;;      Params:         4       0       0       0
  3138 ;;      Locals:         2       0       0       0
  3139 ;;      Temps:          1       0       0       0
  3140 ;;      Totals:         7       0       0       0
  3141 ;;Total ram usage:        7 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    5
  3144 ;; This function calls:
  3145 ;;		_setMotorPWM
  3146 ;; This function is called by:
  3147 ;;		_moveToBeacon
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text20
  3152  000FD2                     __ptext20:
  3153                           	opt callstack 0
  3154  000FD2                     _turnRight:
  3155                           	opt callstack 24
  3156                           
  3157                           ;dc_motor.c: 86: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 87
      +                          : {;dc_motor.c: 89:     mL->direction = 1;
  3158                           
  3159                           ;incstack = 0
  3160  000FD2  EE20 F001          	lfsr	2,1
  3161  000FD6  5020               	movf	turnRight@mL,w,c
  3162  000FD8  26D9               	addwf	fsr2l,f,c
  3163  000FDA  5021               	movf	turnRight@mL+1,w,c
  3164  000FDC  22DA               	addwfc	fsr2h,f,c
  3165  000FDE  0E01               	movlw	1
  3166  000FE0  6EDF               	movwf	indf2,c
  3167                           
  3168                           ;dc_motor.c: 90:     mR->direction = 0;
  3169  000FE2  EE20 F001          	lfsr	2,1
  3170  000FE6  5022               	movf	turnRight@mR,w,c
  3171  000FE8  26D9               	addwf	fsr2l,f,c
  3172  000FEA  5023               	movf	turnRight@mR+1,w,c
  3173  000FEC  22DA               	addwfc	fsr2h,f,c
  3174  000FEE  0E00               	movlw	0
  3175  000FF0  6EDF               	movwf	indf2,c
  3176                           
  3177                           ;dc_motor.c: 92:     for(int i = 0; i<50;i++){
  3178  000FF2  0E00               	movlw	0
  3179  000FF4  6E26               	movwf	turnRight@i+1,c
  3180  000FF6  0E00               	movlw	0
  3181  000FF8  6E25               	movwf	turnRight@i,c
  3182  000FFA                     l2068:
  3183                           
  3184                           ;dc_motor.c: 93:         mL->power = i;
  3185  000FFA  C020  FFD9         	movff	turnRight@mL,fsr2l
  3186  000FFE  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  3187  001002  C025  FFDF         	movff	turnRight@i,indf2
  3188                           
  3189                           ;dc_motor.c: 94:         mR->power = i;
  3190  001006  C022  FFD9         	movff	turnRight@mR,fsr2l
  3191  00100A  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  3192  00100E  C025  FFDF         	movff	turnRight@i,indf2
  3193                           
  3194                           ;dc_motor.c: 96:         setMotorPWM(mL);
  3195  001012  C020  F017         	movff	turnRight@mL,setMotorPWM@m
  3196  001016  C021  F018         	movff	turnRight@mL+1,setMotorPWM@m+1
  3197  00101A  EC9C  F004         	call	_setMotorPWM	;wreg free
  3198                           
  3199                           ;dc_motor.c: 97:         setMotorPWM(mR);
  3200  00101E  C022  F017         	movff	turnRight@mR,setMotorPWM@m
  3201  001022  C023  F018         	movff	turnRight@mR+1,setMotorPWM@m+1
  3202  001026  EC9C  F004         	call	_setMotorPWM	;wreg free
  3203                           
  3204                           ;dc_motor.c: 98:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3205  00102A  0E03               	movlw	3
  3206  00102C  6E24               	movwf	??_turnRight& (0+255),c
  3207  00102E  0E98               	movlw	152
  3208  001030                     u2297:
  3209  001030  2EE8               	decfsz	wreg,f,c
  3210  001032  D7FE               	bra	u2297
  3211  001034  2E24               	decfsz	??_turnRight& (0+255),f,c
  3212  001036  D7FC               	bra	u2297
  3213                           
  3214                           ;dc_motor.c: 99:     }
  3215  001038  4A25               	infsnz	turnRight@i,f,c
  3216  00103A  2A26               	incf	turnRight@i+1,f,c
  3217  00103C  BE26               	btfsc	turnRight@i+1,7,c
  3218  00103E  D7DD               	goto	l2068
  3219  001040  5026               	movf	turnRight@i+1,w,c
  3220  001042  E105               	bnz	u1350
  3221  001044  0E32               	movlw	50
  3222  001046  5C25               	subwf	turnRight@i,w,c
  3223  001048  B0D8               	btfsc	status,0,c
  3224  00104A  0012               	return	
  3225  00104C  D7D6               	goto	l2068
  3226  00104E                     u1350:
  3227  00104E  0012               	return		;funcret
  3228  001050                     __end_of_turnRight:
  3229                           	opt callstack 0
  3230                           
  3231 ;; *************** function _fullSpeedAhead *****************
  3232 ;; Defined at:
  3233 ;;		line 103 in file "dc_motor.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3236 ;;		 -> main@motorL(9), 
  3237 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3238 ;;		 -> main@motorR(9), 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  i               2   35[COMRAM] int 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3250 ;;      Params:         4       0       0       0
  3251 ;;      Locals:         2       0       0       0
  3252 ;;      Temps:          0       0       0       0
  3253 ;;      Totals:         6       0       0       0
  3254 ;;Total ram usage:        6 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    5
  3257 ;; This function calls:
  3258 ;;		_setMotorPWM
  3259 ;; This function is called by:
  3260 ;;		_moveToBeacon
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text21
  3265  0010C8                     __ptext21:
  3266                           	opt callstack 0
  3267  0010C8                     _fullSpeedAhead:
  3268                           	opt callstack 24
  3269                           
  3270                           ;dc_motor.c: 103: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 104: {;dc_motor.c: 105:     mL->direction = 1;
  3271                           
  3272                           ;incstack = 0
  3273  0010C8  EE20 F001          	lfsr	2,1
  3274  0010CC  5020               	movf	fullSpeedAhead@mL,w,c
  3275  0010CE  26D9               	addwf	fsr2l,f,c
  3276  0010D0  5021               	movf	fullSpeedAhead@mL+1,w,c
  3277  0010D2  22DA               	addwfc	fsr2h,f,c
  3278  0010D4  0E01               	movlw	1
  3279  0010D6  6EDF               	movwf	indf2,c
  3280                           
  3281                           ;dc_motor.c: 106:     mR->direction = 1;
  3282  0010D8  EE20 F001          	lfsr	2,1
  3283  0010DC  5022               	movf	fullSpeedAhead@mR,w,c
  3284  0010DE  26D9               	addwf	fsr2l,f,c
  3285  0010E0  5023               	movf	fullSpeedAhead@mR+1,w,c
  3286  0010E2  22DA               	addwfc	fsr2h,f,c
  3287  0010E4  0E01               	movlw	1
  3288  0010E6  6EDF               	movwf	indf2,c
  3289                           
  3290                           ;dc_motor.c: 107:     for(int i = 0; i < 50; i++)
  3291  0010E8  0E00               	movlw	0
  3292  0010EA  6E25               	movwf	fullSpeedAhead@i+1,c
  3293  0010EC  0E00               	movlw	0
  3294  0010EE  6E24               	movwf	fullSpeedAhead@i,c
  3295  0010F0                     l2088:
  3296                           
  3297                           ;dc_motor.c: 108:     {;dc_motor.c: 109:         mL->power = i;
  3298  0010F0  C020  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3299  0010F4  C021  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3300  0010F8  C024  FFDF         	movff	fullSpeedAhead@i,indf2
  3301                           
  3302                           ;dc_motor.c: 110:         mR->power = i;
  3303  0010FC  C022  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3304  001100  C023  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3305  001104  C024  FFDF         	movff	fullSpeedAhead@i,indf2
  3306                           
  3307                           ;dc_motor.c: 111:         setMotorPWM(mL);
  3308  001108  C020  F017         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3309  00110C  C021  F018         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3310  001110  EC9C  F004         	call	_setMotorPWM	;wreg free
  3311                           
  3312                           ;dc_motor.c: 112:         setMotorPWM(mR);
  3313  001114  C022  F017         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3314  001118  C023  F018         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3315  00111C  EC9C  F004         	call	_setMotorPWM	;wreg free
  3316                           
  3317                           ;dc_motor.c: 113:     }
  3318  001120  4A24               	infsnz	fullSpeedAhead@i,f,c
  3319  001122  2A25               	incf	fullSpeedAhead@i+1,f,c
  3320  001124  BE25               	btfsc	fullSpeedAhead@i+1,7,c
  3321  001126  D7E4               	goto	l2088
  3322  001128  5025               	movf	fullSpeedAhead@i+1,w,c
  3323  00112A  E105               	bnz	u1360
  3324  00112C  0E32               	movlw	50
  3325  00112E  5C24               	subwf	fullSpeedAhead@i,w,c
  3326  001130  B0D8               	btfsc	status,0,c
  3327  001132  0012               	return	
  3328  001134  D7DD               	goto	l2088
  3329  001136                     u1360:
  3330  001136  0012               	return		;funcret
  3331  001138                     __end_of_fullSpeedAhead:
  3332                           	opt callstack 0
  3333                           
  3334 ;; *************** function _init_motors *****************
  3335 ;; Defined at:
  3336 ;;		line 138 in file "dc_motor.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  3339 ;;		 -> main@motorL(9), 
  3340 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  3341 ;;		 -> main@motorR(9), 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3353 ;;      Params:         4       0       0       0
  3354 ;;      Locals:         0       0       0       0
  3355 ;;      Temps:          0       0       0       0
  3356 ;;      Totals:         4       0       0       0
  3357 ;;Total ram usage:        4 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    5
  3360 ;; This function calls:
  3361 ;;		_setMotorPWM
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text22
  3368  000A5C                     __ptext22:
  3369                           	opt callstack 0
  3370  000A5C                     _init_motors:
  3371                           	opt callstack 25
  3372                           
  3373                           ;dc_motor.c: 138: void init_motors(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           139: {;dc_motor.c: 141: mL->power = 0;
  3374                           
  3375                           ;incstack = 0
  3376  000A5C  C020  FFD9         	movff	init_motors@mL,fsr2l
  3377  000A60  C021  FFDA         	movff	init_motors@mL+1,fsr2h
  3378  000A64  0E00               	movlw	0
  3379  000A66  6EDF               	movwf	indf2,c
  3380                           
  3381                           ;dc_motor.c: 142: mL->direction = 1;
  3382  000A68  EE20 F001          	lfsr	2,1
  3383  000A6C  5020               	movf	init_motors@mL,w,c
  3384  000A6E  26D9               	addwf	fsr2l,f,c
  3385  000A70  5021               	movf	init_motors@mL+1,w,c
  3386  000A72  22DA               	addwfc	fsr2h,f,c
  3387  000A74  0E01               	movlw	1
  3388  000A76  6EDF               	movwf	indf2,c
  3389                           
  3390                           ;dc_motor.c: 143: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3391  000A78  EE20 F002          	lfsr	2,2
  3392  000A7C  5020               	movf	init_motors@mL,w,c
  3393  000A7E  26D9               	addwf	fsr2l,f,c
  3394  000A80  5021               	movf	init_motors@mL+1,w,c
  3395  000A82  22DA               	addwfc	fsr2h,f,c
  3396  000A84  0E79               	movlw	121
  3397  000A86  6EDE               	movwf	postinc2,c
  3398  000A88  0E0F               	movlw	15
  3399  000A8A  6EDD               	movwf	postdec2,c
  3400                           
  3401                           ;dc_motor.c: 144: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3402  000A8C  EE20 F004          	lfsr	2,4
  3403  000A90  5020               	movf	init_motors@mL,w,c
  3404  000A92  26D9               	addwf	fsr2l,f,c
  3405  000A94  5021               	movf	init_motors@mL+1,w,c
  3406  000A96  22DA               	addwfc	fsr2h,f,c
  3407  000A98  0E78               	movlw	120
  3408  000A9A  6EDE               	movwf	postinc2,c
  3409  000A9C  0E0F               	movlw	15
  3410  000A9E  6EDD               	movwf	postdec2,c
  3411                           
  3412                           ;dc_motor.c: 145: mL->dir_pin=0;
  3413  000AA0  EE20 F006          	lfsr	2,6
  3414  000AA4  5020               	movf	init_motors@mL,w,c
  3415  000AA6  26D9               	addwf	fsr2l,f,c
  3416  000AA8  5021               	movf	init_motors@mL+1,w,c
  3417  000AAA  22DA               	addwfc	fsr2h,f,c
  3418  000AAC  0E00               	movlw	0
  3419  000AAE  6EDF               	movwf	indf2,c
  3420                           
  3421                           ;dc_motor.c: 146: mL->PWMperiod=199;
  3422  000AB0  EE20 F007          	lfsr	2,7
  3423  000AB4  5020               	movf	init_motors@mL,w,c
  3424  000AB6  26D9               	addwf	fsr2l,f,c
  3425  000AB8  5021               	movf	init_motors@mL+1,w,c
  3426  000ABA  22DA               	addwfc	fsr2h,f,c
  3427  000ABC  0EC7               	movlw	199
  3428  000ABE  6EDE               	movwf	postinc2,c
  3429  000AC0  0E00               	movlw	0
  3430  000AC2  6EDD               	movwf	postdec2,c
  3431                           
  3432                           ;dc_motor.c: 148: mR->power = 0;
  3433  000AC4  C022  FFD9         	movff	init_motors@mR,fsr2l
  3434  000AC8  C023  FFDA         	movff	init_motors@mR+1,fsr2h
  3435  000ACC  0E00               	movlw	0
  3436  000ACE  6EDF               	movwf	indf2,c
  3437                           
  3438                           ;dc_motor.c: 149: mR->direction = 1;
  3439  000AD0  EE20 F001          	lfsr	2,1
  3440  000AD4  5022               	movf	init_motors@mR,w,c
  3441  000AD6  26D9               	addwf	fsr2l,f,c
  3442  000AD8  5023               	movf	init_motors@mR+1,w,c
  3443  000ADA  22DA               	addwfc	fsr2h,f,c
  3444  000ADC  0E01               	movlw	1
  3445  000ADE  6EDF               	movwf	indf2,c
  3446                           
  3447                           ;dc_motor.c: 150: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3448  000AE0  EE20 F002          	lfsr	2,2
  3449  000AE4  5022               	movf	init_motors@mR,w,c
  3450  000AE6  26D9               	addwf	fsr2l,f,c
  3451  000AE8  5023               	movf	init_motors@mR+1,w,c
  3452  000AEA  22DA               	addwfc	fsr2h,f,c
  3453  000AEC  0E77               	movlw	119
  3454  000AEE  6EDE               	movwf	postinc2,c
  3455  000AF0  0E0F               	movlw	15
  3456  000AF2  6EDD               	movwf	postdec2,c
  3457                           
  3458                           ;dc_motor.c: 151: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3459  000AF4  EE20 F004          	lfsr	2,4
  3460  000AF8  5022               	movf	init_motors@mR,w,c
  3461  000AFA  26D9               	addwf	fsr2l,f,c
  3462  000AFC  5023               	movf	init_motors@mR+1,w,c
  3463  000AFE  22DA               	addwfc	fsr2h,f,c
  3464  000B00  0E76               	movlw	118
  3465  000B02  6EDE               	movwf	postinc2,c
  3466  000B04  0E0F               	movlw	15
  3467  000B06  6EDD               	movwf	postdec2,c
  3468                           
  3469                           ;dc_motor.c: 152: mR->dir_pin=2;
  3470  000B08  EE20 F006          	lfsr	2,6
  3471  000B0C  5022               	movf	init_motors@mR,w,c
  3472  000B0E  26D9               	addwf	fsr2l,f,c
  3473  000B10  5023               	movf	init_motors@mR+1,w,c
  3474  000B12  22DA               	addwfc	fsr2h,f,c
  3475  000B14  0E02               	movlw	2
  3476  000B16  6EDF               	movwf	indf2,c
  3477                           
  3478                           ;dc_motor.c: 153: mR->PWMperiod=199;
  3479  000B18  EE20 F007          	lfsr	2,7
  3480  000B1C  5022               	movf	init_motors@mR,w,c
  3481  000B1E  26D9               	addwf	fsr2l,f,c
  3482  000B20  5023               	movf	init_motors@mR+1,w,c
  3483  000B22  22DA               	addwfc	fsr2h,f,c
  3484  000B24  0EC7               	movlw	199
  3485  000B26  6EDE               	movwf	postinc2,c
  3486  000B28  0E00               	movlw	0
  3487  000B2A  6EDD               	movwf	postdec2,c
  3488                           
  3489                           ;dc_motor.c: 155: setMotorPWM(mL);
  3490  000B2C  C020  F017         	movff	init_motors@mL,setMotorPWM@m
  3491  000B30  C021  F018         	movff	init_motors@mL+1,setMotorPWM@m+1
  3492  000B34  EC9C  F004         	call	_setMotorPWM	;wreg free
  3493                           
  3494                           ;dc_motor.c: 156: setMotorPWM(mR);
  3495  000B38  C022  F017         	movff	init_motors@mR,setMotorPWM@m
  3496  000B3C  C023  F018         	movff	init_motors@mR+1,setMotorPWM@m+1
  3497  000B40  EC9C  F004         	call	_setMotorPWM	;wreg free
  3498  000B44  0012               	return		;funcret
  3499  000B46                     __end_of_init_motors:
  3500                           	opt callstack 0
  3501                           
  3502 ;; *************** function _setMotorPWM *****************
  3503 ;; Defined at:
  3504 ;;		line 18 in file "dc_motor.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  m               2   22[COMRAM] PTR struct DC_motor
  3507 ;;		 -> main@motorR(9), main@motorL(9), 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  PWMduty         2   29[COMRAM] int 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3519 ;;      Params:         2       0       0       0
  3520 ;;      Locals:         2       0       0       0
  3521 ;;      Temps:          5       0       0       0
  3522 ;;      Totals:         9       0       0       0
  3523 ;;Total ram usage:        9 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    4
  3526 ;; This function calls:
  3527 ;;		___awdiv
  3528 ;;		___wmul
  3529 ;; This function is called by:
  3530 ;;		_turnRight
  3531 ;;		_fullSpeedAhead
  3532 ;;		_init_motors
  3533 ;;		_setMotorFullSpeed
  3534 ;;		_stopMotor
  3535 ;;		_stop
  3536 ;;		_turnLeft
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text23
  3541  000938                     __ptext23:
  3542                           	opt callstack 0
  3543  000938                     _setMotorPWM:
  3544                           	opt callstack 24
  3545                           
  3546                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3547                           
  3548                           ;incstack = 0
  3549  000938  C017  FFD9         	movff	setMotorPWM@m,fsr2l
  3550  00093C  C018  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3551  000940  50DF               	movf	indf2,w,c
  3552  000942  6E19               	movwf	??_setMotorPWM& (0+255),c
  3553  000944  5019               	movf	??_setMotorPWM,w,c
  3554  000946  6E11               	movwf	___wmul@multiplier,c
  3555  000948  6A12               	clrf	___wmul@multiplier+1,c
  3556  00094A  EE20 F007          	lfsr	2,7
  3557  00094E  5017               	movf	setMotorPWM@m,w,c
  3558  000950  26D9               	addwf	fsr2l,f,c
  3559  000952  5018               	movf	setMotorPWM@m+1,w,c
  3560  000954  22DA               	addwfc	fsr2h,f,c
  3561  000956  CFDE F013          	movff	postinc2,___wmul@multiplicand
  3562  00095A  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  3563  00095E  EC57  F00A         	call	___wmul	;wreg free
  3564  000962  C011  F009         	movff	?___wmul,___awdiv@dividend
  3565  000966  C012  F00A         	movff	?___wmul+1,___awdiv@dividend+1
  3566  00096A  0E00               	movlw	0
  3567  00096C  6E0C               	movwf	___awdiv@divisor+1,c
  3568  00096E  0E64               	movlw	100
  3569  000970  6E0B               	movwf	___awdiv@divisor,c
  3570  000972  ECA7  F007         	call	___awdiv	;wreg free
  3571  000976  C009  F01E         	movff	?___awdiv,setMotorPWM@PWMduty
  3572  00097A  C00A  F01F         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3573                           
  3574                           ;dc_motor.c: 24:     if (m->direction)
  3575  00097E  EE20 F001          	lfsr	2,1
  3576  000982  5017               	movf	setMotorPWM@m,w,c
  3577  000984  26D9               	addwf	fsr2l,f,c
  3578  000986  5018               	movf	setMotorPWM@m+1,w,c
  3579  000988  22DA               	addwfc	fsr2h,f,c
  3580  00098A  50DF               	movf	indf2,w,c
  3581  00098C  B4D8               	btfsc	status,2,c
  3582  00098E  D024               	goto	l1932
  3583                           
  3584                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3585  000990  EE20 F006          	lfsr	2,6
  3586  000994  5017               	movf	setMotorPWM@m,w,c
  3587  000996  26D9               	addwf	fsr2l,f,c
  3588  000998  5018               	movf	setMotorPWM@m+1,w,c
  3589  00099A  22DA               	addwfc	fsr2h,f,c
  3590  00099C  50DF               	movf	indf2,w,c
  3591  00099E  6E19               	movwf	??_setMotorPWM& (0+255),c
  3592  0009A0  0E01               	movlw	1
  3593  0009A2  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3594  0009A4  2A19               	incf	??_setMotorPWM,f,c
  3595  0009A6  D002               	goto	u1234
  3596  0009A8                     u1235:
  3597  0009A8  90D8               	bcf	status,0,c
  3598  0009AA  361A               	rlcf	??_setMotorPWM+1,f,c
  3599  0009AC                     u1234:
  3600  0009AC  2E19               	decfsz	??_setMotorPWM,f,c
  3601  0009AE  D7FC               	goto	u1235
  3602  0009B0  501A               	movf	??_setMotorPWM+1,w,c
  3603  0009B2  108A               	iorwf	3978,w,c	;volatile
  3604  0009B4  6E8A               	movwf	3978,c	;volatile
  3605                           
  3606                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3607  0009B6  EE20 F007          	lfsr	2,7
  3608  0009BA  5017               	movf	setMotorPWM@m,w,c
  3609  0009BC  26D9               	addwf	fsr2l,f,c
  3610  0009BE  5018               	movf	setMotorPWM@m+1,w,c
  3611  0009C0  22DA               	addwfc	fsr2h,f,c
  3612  0009C2  CFDE F019          	movff	postinc2,??_setMotorPWM
  3613  0009C6  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3614  0009CA  501E               	movf	setMotorPWM@PWMduty,w,c
  3615  0009CC  5C19               	subwf	??_setMotorPWM,w,c
  3616  0009CE  6E1E               	movwf	setMotorPWM@PWMduty,c
  3617  0009D0  501F               	movf	setMotorPWM@PWMduty+1,w,c
  3618  0009D2  581A               	subwfb	??_setMotorPWM+1,w,c
  3619  0009D4  6E1F               	movwf	setMotorPWM@PWMduty+1,c
  3620                           
  3621                           ;dc_motor.c: 28:     }
  3622  0009D6  D014               	goto	l134
  3623  0009D8                     l1932:
  3624                           
  3625                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3626  0009D8  EE20 F006          	lfsr	2,6
  3627  0009DC  5017               	movf	setMotorPWM@m,w,c
  3628  0009DE  26D9               	addwf	fsr2l,f,c
  3629  0009E0  5018               	movf	setMotorPWM@m+1,w,c
  3630  0009E2  22DA               	addwfc	fsr2h,f,c
  3631  0009E4  50DF               	movf	indf2,w,c
  3632  0009E6  6E19               	movwf	??_setMotorPWM& (0+255),c
  3633  0009E8  0E01               	movlw	1
  3634  0009EA  6E1A               	movwf	(??_setMotorPWM+1)& (0+255),c
  3635  0009EC  2A19               	incf	??_setMotorPWM,f,c
  3636  0009EE  D002               	goto	u1244
  3637  0009F0                     u1245:
  3638  0009F0  90D8               	bcf	status,0,c
  3639  0009F2  361A               	rlcf	??_setMotorPWM+1,f,c
  3640  0009F4                     u1244:
  3641  0009F4  2E19               	decfsz	??_setMotorPWM,f,c
  3642  0009F6  D7FC               	goto	u1245
  3643  0009F8  501A               	movf	??_setMotorPWM+1,w,c
  3644  0009FA  0AFF               	xorlw	255
  3645  0009FC  148A               	andwf	3978,w,c	;volatile
  3646  0009FE  6E8A               	movwf	3978,c	;volatile
  3647  000A00                     l134:
  3648                           
  3649                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3650  000A00  EE20 F002          	lfsr	2,2
  3651  000A04  5017               	movf	setMotorPWM@m,w,c
  3652  000A06  26D9               	addwf	fsr2l,f,c
  3653  000A08  5018               	movf	setMotorPWM@m+1,w,c
  3654  000A0A  22DA               	addwfc	fsr2h,f,c
  3655  000A0C  CFDE F019          	movff	postinc2,??_setMotorPWM
  3656  000A10  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3657  000A14  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3658  000A18  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3659  000A1C  441E               	rlncf	setMotorPWM@PWMduty,w,c
  3660  000A1E  46E8               	rlncf	wreg,f,c
  3661  000A20  0BFC               	andlw	252
  3662  000A22  6EDF               	movwf	indf2,c
  3663                           
  3664                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3665  000A24  EE20 F004          	lfsr	2,4
  3666  000A28  5017               	movf	setMotorPWM@m,w,c
  3667  000A2A  26D9               	addwf	fsr2l,f,c
  3668  000A2C  5018               	movf	setMotorPWM@m+1,w,c
  3669  000A2E  22DA               	addwfc	fsr2h,f,c
  3670  000A30  CFDE F019          	movff	postinc2,??_setMotorPWM
  3671  000A34  CFDD F01A          	movff	postdec2,??_setMotorPWM+1
  3672  000A38  C019  FFD9         	movff	??_setMotorPWM,fsr2l
  3673  000A3C  C01A  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3674  000A40  C01E  F01B         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3675  000A44  C01F  F01C         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3676  000A48  0E06               	movlw	6
  3677  000A4A  6E1D               	movwf	(??_setMotorPWM+4)& (0+255),c
  3678  000A4C                     u1255:
  3679  000A4C  341C               	rlcf	??_setMotorPWM+3,w,c
  3680  000A4E  321C               	rrcf	??_setMotorPWM+3,f,c
  3681  000A50  321B               	rrcf	??_setMotorPWM+2,f,c
  3682  000A52  2E1D               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3683  000A54  D7FB               	goto	u1255
  3684  000A56  501B               	movf	??_setMotorPWM+2,w,c
  3685  000A58  6EDF               	movwf	indf2,c
  3686  000A5A  0012               	return		;funcret
  3687  000A5C                     __end_of_setMotorPWM:
  3688                           	opt callstack 0
  3689                           
  3690 ;; *************** function ___wmul *****************
  3691 ;; Defined at:
  3692 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  multiplier      2   16[COMRAM] unsigned int 
  3695 ;;  multiplicand    2   18[COMRAM] unsigned int 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  product         2   20[COMRAM] unsigned int 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  2   16[COMRAM] unsigned int 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, status,0, prodl, prodh
  3702 ;; Tracked objects:
  3703 ;;		On entry : 0/0
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3707 ;;      Params:         4       0       0       0
  3708 ;;      Locals:         2       0       0       0
  3709 ;;      Temps:          0       0       0       0
  3710 ;;      Totals:         6       0       0       0
  3711 ;;Total ram usage:        6 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    3
  3714 ;; This function calls:
  3715 ;;		Nothing
  3716 ;; This function is called by:
  3717 ;;		_setMotorPWM
  3718 ;;		_process_signal
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text24
  3723  0014AE                     __ptext24:
  3724                           	opt callstack 0
  3725  0014AE                     ___wmul:
  3726                           	opt callstack 26
  3727                           
  3728                           ;incstack = 0
  3729  0014AE  5011               	movf	___wmul@multiplier,w,c
  3730  0014B0  0213               	mulwf	___wmul@multiplicand,c
  3731  0014B2  CFF3 F015          	movff	prodl,___wmul@product
  3732  0014B6  CFF4 F016          	movff	prodh,___wmul@product+1
  3733  0014BA  5011               	movf	___wmul@multiplier,w,c
  3734  0014BC  0214               	mulwf	___wmul@multiplicand+1,c
  3735  0014BE  50F3               	movf	prodl,w,c
  3736  0014C0  2616               	addwf	___wmul@product+1,f,c
  3737  0014C2  5012               	movf	___wmul@multiplier+1,w,c
  3738  0014C4  0213               	mulwf	___wmul@multiplicand,c
  3739  0014C6  50F3               	movf	prodl,w,c
  3740  0014C8  2616               	addwf	___wmul@product+1,f,c
  3741  0014CA  C015  F011         	movff	___wmul@product,?___wmul
  3742  0014CE  C016  F012         	movff	___wmul@product+1,?___wmul+1
  3743  0014D2  0012               	return		;funcret
  3744  0014D4                     __end_of___wmul:
  3745                           	opt callstack 0
  3746                           
  3747 ;; *************** function ___awdiv *****************
  3748 ;; Defined at:
  3749 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  dividend        2    8[COMRAM] int 
  3752 ;;  divisor         2   10[COMRAM] int 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  quotient        2   14[COMRAM] int 
  3755 ;;  sign            1   13[COMRAM] unsigned char 
  3756 ;;  counter         1   12[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  2    8[COMRAM] int 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3766 ;;      Params:         4       0       0       0
  3767 ;;      Locals:         4       0       0       0
  3768 ;;      Temps:          0       0       0       0
  3769 ;;      Totals:         8       0       0       0
  3770 ;;Total ram usage:        8 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    3
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_setMotorPWM
  3777 ;;		_process_signal
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text25
  3782  000F4E                     __ptext25:
  3783                           	opt callstack 0
  3784  000F4E                     ___awdiv:
  3785                           	opt callstack 26
  3786                           
  3787                           ;incstack = 0
  3788  000F4E  0E00               	movlw	0
  3789  000F50  6E0E               	movwf	___awdiv@sign,c
  3790  000F52  AE0C               	btfss	___awdiv@divisor+1,7,c
  3791  000F54  D006               	goto	l1890
  3792  000F56  6C0B               	negf	___awdiv@divisor,c
  3793  000F58  1E0C               	comf	___awdiv@divisor+1,f,c
  3794  000F5A  B0D8               	btfsc	status,0,c
  3795  000F5C  2A0C               	incf	___awdiv@divisor+1,f,c
  3796  000F5E  0E01               	movlw	1
  3797  000F60  6E0E               	movwf	___awdiv@sign,c
  3798  000F62                     l1890:
  3799  000F62  AE0A               	btfss	___awdiv@dividend+1,7,c
  3800  000F64  D006               	goto	l1896
  3801  000F66  6C09               	negf	___awdiv@dividend,c
  3802  000F68  1E0A               	comf	___awdiv@dividend+1,f,c
  3803  000F6A  B0D8               	btfsc	status,0,c
  3804  000F6C  2A0A               	incf	___awdiv@dividend+1,f,c
  3805  000F6E  0E01               	movlw	1
  3806  000F70  1A0E               	xorwf	___awdiv@sign,f,c
  3807  000F72                     l1896:
  3808  000F72  0E00               	movlw	0
  3809  000F74  6E10               	movwf	___awdiv@quotient+1,c
  3810  000F76  0E00               	movlw	0
  3811  000F78  6E0F               	movwf	___awdiv@quotient,c
  3812  000F7A  500B               	movf	___awdiv@divisor,w,c
  3813  000F7C  100C               	iorwf	___awdiv@divisor+1,w,c
  3814  000F7E  B4D8               	btfsc	status,2,c
  3815  000F80  D01C               	goto	l1918
  3816  000F82  0E01               	movlw	1
  3817  000F84  6E0D               	movwf	___awdiv@counter,c
  3818  000F86  D004               	goto	l1904
  3819  000F88                     l1902:
  3820  000F88  90D8               	bcf	status,0,c
  3821  000F8A  360B               	rlcf	___awdiv@divisor,f,c
  3822  000F8C  360C               	rlcf	___awdiv@divisor+1,f,c
  3823  000F8E  2A0D               	incf	___awdiv@counter,f,c
  3824  000F90                     l1904:
  3825  000F90  AE0C               	btfss	___awdiv@divisor+1,7,c
  3826  000F92  D7FA               	goto	l1902
  3827  000F94                     u1190:
  3828  000F94  90D8               	bcf	status,0,c
  3829  000F96  360F               	rlcf	___awdiv@quotient,f,c
  3830  000F98  3610               	rlcf	___awdiv@quotient+1,f,c
  3831  000F9A  500B               	movf	___awdiv@divisor,w,c
  3832  000F9C  5C09               	subwf	___awdiv@dividend,w,c
  3833  000F9E  500C               	movf	___awdiv@divisor+1,w,c
  3834  000FA0  580A               	subwfb	___awdiv@dividend+1,w,c
  3835  000FA2  A0D8               	btfss	status,0,c
  3836  000FA4  D005               	goto	l1914
  3837  000FA6  500B               	movf	___awdiv@divisor,w,c
  3838  000FA8  5E09               	subwf	___awdiv@dividend,f,c
  3839  000FAA  500C               	movf	___awdiv@divisor+1,w,c
  3840  000FAC  5A0A               	subwfb	___awdiv@dividend+1,f,c
  3841  000FAE  800F               	bsf	___awdiv@quotient,0,c
  3842  000FB0                     l1914:
  3843  000FB0  90D8               	bcf	status,0,c
  3844  000FB2  320C               	rrcf	___awdiv@divisor+1,f,c
  3845  000FB4  320B               	rrcf	___awdiv@divisor,f,c
  3846  000FB6  2E0D               	decfsz	___awdiv@counter,f,c
  3847  000FB8  D7ED               	goto	u1190
  3848  000FBA                     l1918:
  3849  000FBA  500E               	movf	___awdiv@sign,w,c
  3850  000FBC  B4D8               	btfsc	status,2,c
  3851  000FBE  D004               	goto	l1922
  3852  000FC0  6C0F               	negf	___awdiv@quotient,c
  3853  000FC2  1E10               	comf	___awdiv@quotient+1,f,c
  3854  000FC4  B0D8               	btfsc	status,0,c
  3855  000FC6  2A10               	incf	___awdiv@quotient+1,f,c
  3856  000FC8                     l1922:
  3857  000FC8  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  3858  000FCC  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  3859  000FD0  0012               	return		;funcret
  3860  000FD2                     __end_of___awdiv:
  3861                           	opt callstack 0
  3862                           
  3863 ;; *************** function _display_RFID *****************
  3864 ;; Defined at:
  3865 ;;		line 109 in file "RFID.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  3868 ;;		 -> RFIDbuf(12), 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  i               2   15[COMRAM] int 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3880 ;;      Params:         2       0       0       0
  3881 ;;      Locals:         2       0       0       0
  3882 ;;      Temps:          0       0       0       0
  3883 ;;      Totals:         4       0       0       0
  3884 ;;Total ram usage:        4 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    7
  3887 ;; This function calls:
  3888 ;;		_ClearLCD
  3889 ;;		_SendLCD
  3890 ;;		_SetLine
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text26
  3897  001324                     __ptext26:
  3898                           	opt callstack 0
  3899  001324                     _display_RFID:
  3900                           	opt callstack 23
  3901                           
  3902                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  3903                           
  3904                           ;incstack = 0
  3905  001324  EC84  F00A         	call	_ClearLCD	;wreg free
  3906                           
  3907                           ;RFID.c: 112:     SetLine(1);
  3908  001328  0E01               	movlw	1
  3909  00132A  EC18  F00A         	call	_SetLine
  3910                           
  3911                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  3912  00132E  0E00               	movlw	0
  3913  001330  6E11               	movwf	display_RFID@i+1,c
  3914  001332  0E00               	movlw	0
  3915  001334  6E10               	movwf	display_RFID@i,c
  3916  001336                     l2248:
  3917                           
  3918                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  3919  001336  0E01               	movlw	1
  3920  001338  6E0B               	movwf	SendLCD@type,c
  3921  00133A  5010               	movf	display_RFID@i,w,c
  3922  00133C  240E               	addwf	display_RFID@dataBuf,w,c
  3923  00133E  6ED9               	movwf	fsr2l,c
  3924  001340  5011               	movf	display_RFID@i+1,w,c
  3925  001342  200F               	addwfc	display_RFID@dataBuf+1,w,c
  3926  001344  6EDA               	movwf	fsr2h,c
  3927  001346  50DF               	movf	indf2,w,c
  3928  001348  ECE9  F009         	call	_SendLCD
  3929                           
  3930                           ;RFID.c: 116:     }
  3931  00134C  4A10               	infsnz	display_RFID@i,f,c
  3932  00134E  2A11               	incf	display_RFID@i+1,f,c
  3933  001350  BE11               	btfsc	display_RFID@i+1,7,c
  3934  001352  D7F1               	goto	l2248
  3935  001354  5011               	movf	display_RFID@i+1,w,c
  3936  001356  E105               	bnz	u1500
  3937  001358  0E0A               	movlw	10
  3938  00135A  5C10               	subwf	display_RFID@i,w,c
  3939  00135C  B0D8               	btfsc	status,0,c
  3940  00135E  0012               	return	
  3941  001360  D7EA               	goto	l2248
  3942  001362                     u1500:
  3943  001362  0012               	return		;funcret
  3944  001364                     __end_of_display_RFID:
  3945                           	opt callstack 0
  3946                           
  3947 ;; *************** function _ClearLCD *****************
  3948 ;; Defined at:
  3949 ;;		line 137 in file "LCDIO.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3963 ;;      Params:         0       0       0       0
  3964 ;;      Locals:         0       0       0       0
  3965 ;;      Temps:          1       0       0       0
  3966 ;;      Totals:         1       0       0       0
  3967 ;;Total ram usage:        1 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    6
  3970 ;; This function calls:
  3971 ;;		_SendLCD
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;;		_display_RFID
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text27
  3979  001508                     __ptext27:
  3980                           	opt callstack 0
  3981  001508                     _ClearLCD:
  3982                           	opt callstack 23
  3983                           
  3984                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  3985                           
  3986                           ;incstack = 0
  3987  001508  0E00               	movlw	0
  3988  00150A  6E0B               	movwf	SendLCD@type,c
  3989  00150C  0E01               	movlw	1
  3990  00150E  ECE9  F009         	call	_SendLCD
  3991                           
  3992                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3993  001512  0E0D               	movlw	13
  3994  001514  6E0D               	movwf	??_ClearLCD& (0+255),c
  3995  001516  0EFC               	movlw	252
  3996  001518                     u2307:
  3997  001518  2EE8               	decfsz	wreg,f,c
  3998  00151A  D7FE               	bra	u2307
  3999  00151C  2E0D               	decfsz	??_ClearLCD& (0+255),f,c
  4000  00151E  D7FC               	bra	u2307
  4001  001520  0012               	return		;funcret
  4002  001522                     __end_of_ClearLCD:
  4003                           	opt callstack 0
  4004                           
  4005 ;; *************** function _classify_data *****************
  4006 ;; Defined at:
  4007 ;;		line 41 in file "signal_processing.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  smoothed_dat    2    8[COMRAM] int 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      unsigned char 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4021 ;;      Params:         2       0       0       0
  4022 ;;      Locals:         0       0       0       0
  4023 ;;      Temps:          0       0       0       0
  4024 ;;      Totals:         2       0       0       0
  4025 ;;Total ram usage:        2 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    3
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_main
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text28
  4036  001522                     __ptext28:
  4037                           	opt callstack 0
  4038  001522                     _classify_data:
  4039                           	opt callstack 27
  4040                           
  4041                           ;signal_processing.c: 41: char classify_data(int smoothed_data);signal_processing.c: 42:
      +                           {;signal_processing.c: 43:     if(smoothed_data > 10000)
  4042                           
  4043                           ;incstack = 0
  4044  001522  BE0A               	btfsc	classify_data@smoothed_data+1,7,c
  4045  001524  D008               	goto	l2212
  4046  001526  0E11               	movlw	17
  4047  001528  5C09               	subwf	classify_data@smoothed_data,w,c
  4048  00152A  0E27               	movlw	39
  4049  00152C  580A               	subwfb	classify_data@smoothed_data+1,w,c
  4050  00152E  A0D8               	btfss	status,0,c
  4051  001530  D002               	goto	l2212
  4052                           
  4053                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  4054  001532  0E01               	movlw	1
  4055  001534  0012               	return	
  4056  001536                     l2212:
  4057                           
  4058                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  4059  001536  0E00               	movlw	0
  4060  001538  0012               	return		;funcret
  4061  00153A                     __end_of_classify_data:
  4062                           	opt callstack 0
  4063                           
  4064 ;; *************** function _check_RFID *****************
  4065 ;; Defined at:
  4066 ;;		line 72 in file "RFID.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  dataBuf         2   14[COMRAM] PTR unsigned char 
  4069 ;;		 -> RFIDbuf(12), 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  i               2   36[COMRAM] int 
  4072 ;;  hexBuf         12   18[COMRAM] unsigned char [12]
  4073 ;;  checksum        1   35[COMRAM] unsigned char 
  4074 ;;  byte5           1   34[COMRAM] unsigned char 
  4075 ;;  byte4           1   33[COMRAM] unsigned char 
  4076 ;;  byte3           1   32[COMRAM] unsigned char 
  4077 ;;  byte2           1   31[COMRAM] unsigned char 
  4078 ;;  byte1           1   30[COMRAM] unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4088 ;;      Params:         2       0       0       0
  4089 ;;      Locals:        20       0       0       0
  4090 ;;      Temps:          2       0       0       0
  4091 ;;      Totals:        24       0       0       0
  4092 ;;Total ram usage:       24 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    7
  4095 ;; This function calls:
  4096 ;;		_LCD_String
  4097 ;;		_SetLine
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text29
  4104  0007E8                     __ptext29:
  4105                           	opt callstack 0
  4106  0007E8                     _check_RFID:
  4107                           	opt callstack 23
  4108                           
  4109                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  4110                           
  4111                           ;incstack = 0
  4112  0007E8  0E00               	movlw	0
  4113  0007EA  6E26               	movwf	check_RFID@i+1,c
  4114  0007EC  0E00               	movlw	0
  4115  0007EE  6E25               	movwf	check_RFID@i,c
  4116  0007F0                     l2260:
  4117                           
  4118                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  4119  0007F0  5025               	movf	check_RFID@i,w,c
  4120  0007F2  240F               	addwf	check_RFID@dataBuf,w,c
  4121  0007F4  6ED9               	movwf	fsr2l,c
  4122  0007F6  5026               	movf	check_RFID@i+1,w,c
  4123  0007F8  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4124  0007FA  6EDA               	movwf	fsr2h,c
  4125  0007FC  0E2F               	movlw	47
  4126  0007FE  64DF               	cpfsgt	indf2,c
  4127  000800  D018               	goto	l2266
  4128  000802  5025               	movf	check_RFID@i,w,c
  4129  000804  240F               	addwf	check_RFID@dataBuf,w,c
  4130  000806  6ED9               	movwf	fsr2l,c
  4131  000808  5026               	movf	check_RFID@i+1,w,c
  4132  00080A  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4133  00080C  6EDA               	movwf	fsr2h,c
  4134  00080E  0E3A               	movlw	58
  4135  000810  60DF               	cpfslt	indf2,c
  4136  000812  D00F               	goto	l2266
  4137                           
  4138                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  4139  000814  0E13               	movlw	low check_RFID@hexBuf
  4140  000816  2425               	addwf	check_RFID@i,w,c
  4141  000818  6ED9               	movwf	fsr2l,c
  4142  00081A  0E00               	movlw	high check_RFID@hexBuf
  4143  00081C  2026               	addwfc	check_RFID@i+1,w,c
  4144  00081E  6EDA               	movwf	fsr2h,c
  4145  000820  5025               	movf	check_RFID@i,w,c
  4146  000822  240F               	addwf	check_RFID@dataBuf,w,c
  4147  000824  6EE1               	movwf	fsr1l,c
  4148  000826  5026               	movf	check_RFID@i+1,w,c
  4149  000828  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4150  00082A  6EE2               	movwf	fsr1h,c
  4151  00082C  50E7               	movf	indf1,w,c
  4152  00082E  0FD0               	addlw	208
  4153  000830  D020               	goto	L1
  4154  000832                     l2266:
  4155  000832  5025               	movf	check_RFID@i,w,c
  4156  000834  240F               	addwf	check_RFID@dataBuf,w,c
  4157  000836  6ED9               	movwf	fsr2l,c
  4158  000838  5026               	movf	check_RFID@i+1,w,c
  4159  00083A  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4160  00083C  6EDA               	movwf	fsr2h,c
  4161  00083E  0E40               	movlw	64
  4162  000840  64DF               	cpfsgt	indf2,c
  4163  000842  D018               	goto	l2272
  4164  000844  5025               	movf	check_RFID@i,w,c
  4165  000846  240F               	addwf	check_RFID@dataBuf,w,c
  4166  000848  6ED9               	movwf	fsr2l,c
  4167  00084A  5026               	movf	check_RFID@i+1,w,c
  4168  00084C  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4169  00084E  6EDA               	movwf	fsr2h,c
  4170  000850  0E47               	movlw	71
  4171  000852  60DF               	cpfslt	indf2,c
  4172  000854  D00F               	goto	l2272
  4173                           
  4174                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  4175  000856  0E13               	movlw	low check_RFID@hexBuf
  4176  000858  2425               	addwf	check_RFID@i,w,c
  4177  00085A  6ED9               	movwf	fsr2l,c
  4178  00085C  0E00               	movlw	high check_RFID@hexBuf
  4179  00085E  2026               	addwfc	check_RFID@i+1,w,c
  4180  000860  6EDA               	movwf	fsr2h,c
  4181  000862  5025               	movf	check_RFID@i,w,c
  4182  000864  240F               	addwf	check_RFID@dataBuf,w,c
  4183  000866  6EE1               	movwf	fsr1l,c
  4184  000868  5026               	movf	check_RFID@i+1,w,c
  4185  00086A  2010               	addwfc	check_RFID@dataBuf+1,w,c
  4186  00086C  6EE2               	movwf	fsr1h,c
  4187  00086E  50E7               	movf	indf1,w,c
  4188  000870  0FC9               	addlw	201
  4189  000872                     L1:
  4190  000872  6EDF               	movwf	indf2,c
  4191  000874                     l2272:
  4192                           
  4193                           ;RFID.c: 86:     }
  4194  000874  4A25               	infsnz	check_RFID@i,f,c
  4195  000876  2A26               	incf	check_RFID@i+1,f,c
  4196  000878  BE26               	btfsc	check_RFID@i+1,7,c
  4197  00087A  D7BA               	goto	l2260
  4198  00087C  5026               	movf	check_RFID@i+1,w,c
  4199  00087E  E104               	bnz	u1550
  4200  000880  0E0C               	movlw	12
  4201  000882  5C25               	subwf	check_RFID@i,w,c
  4202  000884  A0D8               	btfss	status,0,c
  4203  000886  D7B4               	goto	l2260
  4204  000888                     u1550:
  4205                           
  4206                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  4207  000888  5013               	movf	check_RFID@hexBuf,w,c
  4208  00088A  A4D8               	btfss	status,2,c
  4209  00088C  D002               	goto	u1560
  4210  00088E  0E01               	movlw	1
  4211  000890  D001               	goto	u1570
  4212  000892                     u1560:
  4213  000892  0E00               	movlw	0
  4214  000894                     u1570:
  4215  000894  1014               	iorwf	check_RFID@hexBuf+1,w,c
  4216  000896  6E1F               	movwf	check_RFID@byte1,c
  4217                           
  4218                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  4219  000898  5015               	movf	check_RFID@hexBuf+2,w,c
  4220  00089A  A4D8               	btfss	status,2,c
  4221  00089C  D002               	goto	u1580
  4222  00089E  0E01               	movlw	1
  4223  0008A0  D001               	goto	u1590
  4224  0008A2                     u1580:
  4225  0008A2  0E00               	movlw	0
  4226  0008A4                     u1590:
  4227  0008A4  1016               	iorwf	check_RFID@hexBuf+3,w,c
  4228  0008A6  6E20               	movwf	check_RFID@byte2,c
  4229                           
  4230                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  4231  0008A8  5017               	movf	check_RFID@hexBuf+4,w,c
  4232  0008AA  A4D8               	btfss	status,2,c
  4233  0008AC  D002               	goto	u1600
  4234  0008AE  0E01               	movlw	1
  4235  0008B0  D001               	goto	u1610
  4236  0008B2                     u1600:
  4237  0008B2  0E00               	movlw	0
  4238  0008B4                     u1610:
  4239  0008B4  1018               	iorwf	check_RFID@hexBuf+5,w,c
  4240  0008B6  6E21               	movwf	check_RFID@byte3,c
  4241                           
  4242                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  4243  0008B8  5019               	movf	check_RFID@hexBuf+6,w,c
  4244  0008BA  A4D8               	btfss	status,2,c
  4245  0008BC  D002               	goto	u1620
  4246  0008BE  0E01               	movlw	1
  4247  0008C0  D001               	goto	u1630
  4248  0008C2                     u1620:
  4249  0008C2  0E00               	movlw	0
  4250  0008C4                     u1630:
  4251  0008C4  101A               	iorwf	check_RFID@hexBuf+7,w,c
  4252  0008C6  6E22               	movwf	check_RFID@byte4,c
  4253                           
  4254                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  4255  0008C8  501B               	movf	check_RFID@hexBuf+8,w,c
  4256  0008CA  A4D8               	btfss	status,2,c
  4257  0008CC  D002               	goto	u1640
  4258  0008CE  0E01               	movlw	1
  4259  0008D0  D001               	goto	u1650
  4260  0008D2                     u1640:
  4261  0008D2  0E00               	movlw	0
  4262  0008D4                     u1650:
  4263  0008D4  101C               	iorwf	check_RFID@hexBuf+9,w,c
  4264  0008D6  6E23               	movwf	check_RFID@byte5,c
  4265                           
  4266                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  4267  0008D8  501D               	movf	check_RFID@hexBuf+10,w,c
  4268  0008DA  A4D8               	btfss	status,2,c
  4269  0008DC  D002               	goto	u1660
  4270  0008DE  0E01               	movlw	1
  4271  0008E0  D001               	goto	u1670
  4272  0008E2                     u1660:
  4273  0008E2  0E00               	movlw	0
  4274  0008E4                     u1670:
  4275  0008E4  101E               	iorwf	check_RFID@hexBuf+11,w,c
  4276  0008E6  6E24               	movwf	check_RFID@checksum,c
  4277                           
  4278                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  4279  0008E8  501F               	movf	check_RFID@byte1,w,c
  4280  0008EA  1820               	xorwf	check_RFID@byte2,w,c
  4281  0008EC  1821               	xorwf	check_RFID@byte3,w,c
  4282  0008EE  1822               	xorwf	check_RFID@byte4,w,c
  4283  0008F0  6E11               	movwf	??_check_RFID& (0+255),c
  4284  0008F2  6A12               	clrf	(??_check_RFID+1)& (0+255),c
  4285  0008F4  5024               	movf	check_RFID@checksum,w,c
  4286  0008F6  1823               	xorwf	check_RFID@byte5,w,c
  4287  0008F8  A4D8               	btfss	status,2,c
  4288  0008FA  D002               	goto	u1680
  4289  0008FC  0E01               	movlw	1
  4290  0008FE  D001               	goto	u1690
  4291  000900                     u1680:
  4292  000900  0E00               	movlw	0
  4293  000902                     u1690:
  4294  000902  1A11               	xorwf	??_check_RFID,f,c
  4295  000904  0E00               	movlw	0
  4296  000906  1A12               	xorwf	??_check_RFID+1,f,c
  4297  000908  5011               	movf	??_check_RFID,w,c
  4298  00090A  1012               	iorwf	??_check_RFID+1,w,c
  4299  00090C  B4D8               	btfsc	status,2,c
  4300  00090E  D00A               	goto	l2282
  4301                           
  4302                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  4303  000910  0E02               	movlw	2
  4304  000912  EC18  F00A         	call	_SetLine
  4305                           
  4306                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  4307  000916  0E11               	movlw	low STR_4
  4308  000918  6E0D               	movwf	LCD_String@string,c
  4309  00091A  0E03               	movlw	high STR_4
  4310  00091C  6E0E               	movwf	LCD_String@string+1,c
  4311  00091E  EC9C  F008         	call	_LCD_String	;wreg free
  4312                           
  4313                           ;RFID.c: 101:     }
  4314  000922  0012               	return	
  4315  000924                     l2282:
  4316                           
  4317                           ;RFID.c: 104:         SetLine(2);
  4318  000924  0E02               	movlw	2
  4319  000926  EC18  F00A         	call	_SetLine
  4320                           
  4321                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  4322  00092A  0E01               	movlw	low STR_5
  4323  00092C  6E0D               	movwf	LCD_String@string,c
  4324  00092E  0E03               	movlw	high STR_5
  4325  000930  6E0E               	movwf	LCD_String@string+1,c
  4326  000932  EC9C  F008         	call	_LCD_String	;wreg free
  4327  000936  0012               	return		;funcret
  4328  000938                     __end_of_check_RFID:
  4329                           	opt callstack 0
  4330                           
  4331 ;; *************** function _SetLine *****************
  4332 ;; Defined at:
  4333 ;;		line 107 in file "LCDIO.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  line            1    wreg     unsigned char 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  line            1   12[COMRAM] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4347 ;;      Params:         0       0       0       0
  4348 ;;      Locals:         1       0       0       0
  4349 ;;      Temps:          0       0       0       0
  4350 ;;      Totals:         1       0       0       0
  4351 ;;Total ram usage:        1 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    6
  4354 ;; This function calls:
  4355 ;;		_SendLCD
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;;		_check_RFID
  4359 ;;		_display_RFID
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text30
  4364  001430                     __ptext30:
  4365                           	opt callstack 0
  4366  001430                     _SetLine:
  4367                           	opt callstack 23
  4368                           
  4369                           ;incstack = 0
  4370                           ;SetLine@line stored from wreg
  4371  001430  6E0D               	movwf	SetLine@line,c
  4372                           
  4373                           ;LCDIO.c: 109:     if(line == 1){
  4374  001432  040D               	decf	SetLine@line,w,c
  4375  001434  A4D8               	btfss	status,2,c
  4376  001436  D005               	goto	l2044
  4377                           
  4378                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4379  001438  0E00               	movlw	0
  4380  00143A  6E0B               	movwf	SendLCD@type,c
  4381  00143C  0E80               	movlw	128
  4382  00143E  ECE9  F009         	call	_SendLCD
  4383  001442                     l2044:
  4384                           
  4385                           ;LCDIO.c: 113:     if(line == 2){
  4386  001442  0E02               	movlw	2
  4387  001444  180D               	xorwf	SetLine@line,w,c
  4388  001446  A4D8               	btfss	status,2,c
  4389  001448  D005               	goto	l2048
  4390                           
  4391                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4392  00144A  0E00               	movlw	0
  4393  00144C  6E0B               	movwf	SendLCD@type,c
  4394  00144E  0EC0               	movlw	192
  4395  001450  ECE9  F009         	call	_SendLCD
  4396  001454                     l2048:
  4397                           
  4398                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4399  001454  0E21               	movlw	33
  4400  001456                     u2317:
  4401  001456  2EE8               	decfsz	wreg,f,c
  4402  001458  D7FE               	bra	u2317
  4403  00145A  F000               	nop	
  4404  00145C  0012               	return		;funcret
  4405  00145E                     __end_of_SetLine:
  4406                           	opt callstack 0
  4407                           
  4408 ;; *************** function _LCD_String *****************
  4409 ;; Defined at:
  4410 ;;		line 119 in file "LCDIO.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  string          2   12[COMRAM] PTR unsigned char 
  4413 ;;		 -> STR_5(16), STR_4(16), STR_3(16), main@temp1(16), 
  4414 ;;		 -> main@temp2(16), 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4426 ;;      Params:         2       0       0       0
  4427 ;;      Locals:         0       0       0       0
  4428 ;;      Temps:          0       0       0       0
  4429 ;;      Totals:         2       0       0       0
  4430 ;;Total ram usage:        2 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    6
  4433 ;; This function calls:
  4434 ;;		_SendLCD
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;;		_check_RFID
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           	psect	text31
  4442  001138                     __ptext31:
  4443                           	opt callstack 0
  4444  001138                     _LCD_String:
  4445                           	opt callstack 23
  4446                           
  4447                           ;LCDIO.c: 121: while(*string != 0){
  4448                           
  4449                           ;incstack = 0
  4450  001138  D01A               	goto	l2058
  4451  00113A                     l2052:
  4452                           
  4453                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4454  00113A  0E01               	movlw	1
  4455  00113C  6E0B               	movwf	SendLCD@type,c
  4456  00113E  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4457  001142  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4458  001146  6AF8               	clrf	tblptru,c
  4459  001148  0E02               	movlw	(high __ramtop+-1)
  4460  00114A  64F7               	cpfsgt	tblptrh,c
  4461  00114C  D003               	bra	u1327
  4462  00114E  0008               	tblrd		*
  4463  001150  50F5               	movf	tablat,w,c
  4464  001152  D005               	bra	u1320
  4465  001154                     u1327:
  4466  001154  CFF6 FFE1          	movff	tblptrl,fsr1l
  4467  001158  CFF7 FFE2          	movff	tblptrh,fsr1h
  4468  00115C  50E7               	movf	indf1,w,c
  4469  00115E                     u1320:
  4470  00115E  ECE9  F009         	call	_SendLCD
  4471  001162  4A0D               	infsnz	LCD_String@string,f,c
  4472  001164  2A0E               	incf	LCD_String@string+1,f,c
  4473                           
  4474                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4475  001166  0E21               	movlw	33
  4476  001168                     u2327:
  4477  001168  2EE8               	decfsz	wreg,f,c
  4478  00116A  D7FE               	bra	u2327
  4479  00116C  F000               	nop	
  4480  00116E                     l2058:
  4481                           
  4482                           ;LCDIO.c: 121: while(*string != 0){
  4483  00116E  C00D  FFF6         	movff	LCD_String@string,tblptrl
  4484  001172  C00E  FFF7         	movff	LCD_String@string+1,tblptrh
  4485  001176  6AF8               	clrf	tblptru,c
  4486  001178  0E02               	movlw	(high __ramtop+-1)
  4487  00117A  64F7               	cpfsgt	tblptrh,c
  4488  00117C  D003               	bra	u1337
  4489  00117E  0008               	tblrd		*
  4490  001180  50F5               	movf	tablat,w,c
  4491  001182  D005               	bra	u1330
  4492  001184                     u1337:
  4493  001184  CFF6 FFE1          	movff	tblptrl,fsr1l
  4494  001188  CFF7 FFE2          	movff	tblptrh,fsr1h
  4495  00118C  50E7               	movf	indf1,w,c
  4496  00118E                     u1330:
  4497  00118E  0900               	iorlw	0
  4498  001190  B4D8               	btfsc	status,2,c
  4499  001192  0012               	return	
  4500  001194  D7D2               	goto	l2052
  4501  001196                     __end_of_LCD_String:
  4502                           	opt callstack 0
  4503                           
  4504 ;; *************** function _SendLCD *****************
  4505 ;; Defined at:
  4506 ;;		line 44 in file "LCDIO.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  Byte            1    wreg     unsigned char 
  4509 ;;  type            1   10[COMRAM] unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  Byte            1   11[COMRAM] unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, status,2, status,0, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4521 ;;      Params:         1       0       0       0
  4522 ;;      Locals:         1       0       0       0
  4523 ;;      Temps:          0       0       0       0
  4524 ;;      Totals:         2       0       0       0
  4525 ;;Total ram usage:        2 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    5
  4528 ;; This function calls:
  4529 ;;		_LCDout
  4530 ;; This function is called by:
  4531 ;;		_init_LCD
  4532 ;;		_SetLine
  4533 ;;		_LCD_String
  4534 ;;		_ClearLCD
  4535 ;;		_display_RFID
  4536 ;;		_ShiftLeft
  4537 ;;		_ShiftRight
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text32
  4542  0013D2                     __ptext32:
  4543                           	opt callstack 0
  4544  0013D2                     _SendLCD:
  4545                           	opt callstack 23
  4546                           
  4547                           ;incstack = 0
  4548                           ;SendLCD@Byte stored from wreg
  4549  0013D2  6E0C               	movwf	SendLCD@Byte,c
  4550                           
  4551                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4552  0013D4  B00B               	btfsc	SendLCD@type,0,c
  4553  0013D6  D002               	bra	u1265
  4554  0013D8  9E89               	bcf	3977,7,c	;volatile
  4555  0013DA  D001               	bra	u1266
  4556  0013DC                     u1265:
  4557  0013DC  8E89               	bsf	3977,7,c	;volatile
  4558  0013DE                     u1266:
  4559                           
  4560                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4561  0013DE  380C               	swapf	SendLCD@Byte,w,c
  4562  0013E0  0B0F               	andlw	15
  4563  0013E2  0B0F               	andlw	15
  4564  0013E4  EC28  F008         	call	_LCDout
  4565                           
  4566                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4567  0013E8  0E06               	movlw	6
  4568  0013EA                     u2337:
  4569  0013EA  2EE8               	decfsz	wreg,f,c
  4570  0013EC  D7FE               	bra	u2337
  4571  0013EE  D000               	nop2	
  4572                           
  4573                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4574  0013F0  500C               	movf	SendLCD@Byte,w,c
  4575  0013F2  0B0F               	andlw	15
  4576  0013F4  EC28  F008         	call	_LCDout
  4577                           
  4578                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4579  0013F8  0E21               	movlw	33
  4580  0013FA                     u2347:
  4581  0013FA  2EE8               	decfsz	wreg,f,c
  4582  0013FC  D7FE               	bra	u2347
  4583  0013FE  F000               	nop	
  4584  001400  0012               	return		;funcret
  4585  001402                     __end_of_SendLCD:
  4586                           	opt callstack 0
  4587                           
  4588 ;; *************** function _LCDout *****************
  4589 ;; Defined at:
  4590 ;;		line 31 in file "LCDIO.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  number          1    wreg     unsigned char 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  number          1    9[COMRAM] unsigned char 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, status,2, status,0, cstack
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4604 ;;      Params:         0       0       0       0
  4605 ;;      Locals:         1       0       0       0
  4606 ;;      Temps:          1       0       0       0
  4607 ;;      Totals:         2       0       0       0
  4608 ;;Total ram usage:        2 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    4
  4611 ;; This function calls:
  4612 ;;		_E_TOG
  4613 ;; This function is called by:
  4614 ;;		_SendLCD
  4615 ;;		_init_LCD
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text33
  4620  001050                     __ptext33:
  4621                           	opt callstack 0
  4622  001050                     _LCDout:
  4623                           	opt callstack 23
  4624                           
  4625                           ;incstack = 0
  4626                           ;LCDout@number stored from wreg
  4627  001050  6E0A               	movwf	LCDout@number,c
  4628                           
  4629                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4630  001052  C00A  F009         	movff	LCDout@number,??_LCDout
  4631  001056  0E01               	movlw	1
  4632  001058  1609               	andwf	??_LCDout,f,c
  4633  00105A  508B               	movf	3979,w,c	;volatile
  4634  00105C  1809               	xorwf	??_LCDout,w,c
  4635  00105E  0BFE               	andlw	-2
  4636  001060  1809               	xorwf	??_LCDout,w,c
  4637  001062  6E8B               	movwf	3979,c	;volatile
  4638                           
  4639                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4640  001064  C00A  F009         	movff	LCDout@number,??_LCDout
  4641  001068  90D8               	bcf	status,0,c
  4642  00106A  3209               	rrcf	??_LCDout,f,c
  4643  00106C  0E01               	movlw	1
  4644  00106E  1609               	andwf	??_LCDout,f,c
  4645  001070  4609               	rlncf	??_LCDout,f,c
  4646  001072  4609               	rlncf	??_LCDout,f,c
  4647  001074  4609               	rlncf	??_LCDout,f,c
  4648  001076  508B               	movf	3979,w,c	;volatile
  4649  001078  1809               	xorwf	??_LCDout,w,c
  4650  00107A  0BF7               	andlw	-9
  4651  00107C  1809               	xorwf	??_LCDout,w,c
  4652  00107E  6E8B               	movwf	3979,c	;volatile
  4653                           
  4654                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4655  001080  C00A  F009         	movff	LCDout@number,??_LCDout
  4656  001084  90D8               	bcf	status,0,c
  4657  001086  3209               	rrcf	??_LCDout,f,c
  4658  001088  90D8               	bcf	status,0,c
  4659  00108A  3209               	rrcf	??_LCDout,f,c
  4660  00108C  0E01               	movlw	1
  4661  00108E  1609               	andwf	??_LCDout,f,c
  4662  001090  508C               	movf	3980,w,c	;volatile
  4663  001092  1809               	xorwf	??_LCDout,w,c
  4664  001094  0BFE               	andlw	-2
  4665  001096  1809               	xorwf	??_LCDout,w,c
  4666  001098  6E8C               	movwf	3980,c	;volatile
  4667                           
  4668                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4669  00109A  C00A  F009         	movff	LCDout@number,??_LCDout
  4670  00109E  90D8               	bcf	status,0,c
  4671  0010A0  3209               	rrcf	??_LCDout,f,c
  4672  0010A2  90D8               	bcf	status,0,c
  4673  0010A4  3209               	rrcf	??_LCDout,f,c
  4674  0010A6  90D8               	bcf	status,0,c
  4675  0010A8  3209               	rrcf	??_LCDout,f,c
  4676  0010AA  0E01               	movlw	1
  4677  0010AC  1609               	andwf	??_LCDout,f,c
  4678  0010AE  4609               	rlncf	??_LCDout,f,c
  4679  0010B0  508C               	movf	3980,w,c	;volatile
  4680  0010B2  1809               	xorwf	??_LCDout,w,c
  4681  0010B4  0BFD               	andlw	-3
  4682  0010B6  1809               	xorwf	??_LCDout,w,c
  4683  0010B8  6E8C               	movwf	3980,c	;volatile
  4684                           
  4685                           ;LCDIO.c: 39:  E_TOG();
  4686  0010BA  ECA7  F00A         	call	_E_TOG	;wreg free
  4687                           
  4688                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4689  0010BE  0E03               	movlw	3
  4690  0010C0                     u2357:
  4691  0010C0  2EE8               	decfsz	wreg,f,c
  4692  0010C2  D7FE               	bra	u2357
  4693  0010C4  F000               	nop	
  4694  0010C6  0012               	return		;funcret
  4695  0010C8                     __end_of_LCDout:
  4696                           	opt callstack 0
  4697                           
  4698 ;; *************** function _E_TOG *****************
  4699 ;; Defined at:
  4700 ;;		line 23 in file "LCDIO.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4714 ;;      Params:         0       0       0       0
  4715 ;;      Locals:         0       0       0       0
  4716 ;;      Temps:          0       0       0       0
  4717 ;;      Totals:         0       0       0       0
  4718 ;;Total ram usage:        0 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    3
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_LCDout
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text34
  4729  00154E                     __ptext34:
  4730                           	opt callstack 0
  4731  00154E                     _E_TOG:
  4732                           	opt callstack 23
  4733                           
  4734                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4735                           
  4736                           ;incstack = 0
  4737  00154E  8C89               	bsf	3977,6,c	;volatile
  4738                           
  4739                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4740  001550  0E03               	movlw	3
  4741  001552                     u2367:
  4742  001552  2EE8               	decfsz	wreg,f,c
  4743  001554  D7FE               	bra	u2367
  4744  001556  F000               	nop	
  4745                           
  4746                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4747  001558  9C89               	bcf	3977,6,c	;volatile
  4748  00155A  0012               	return		;funcret
  4749  00155C                     __end_of_E_TOG:
  4750                           	opt callstack 0
  4751                           
  4752 ;; *************** function _InterruptHandlerLow *****************
  4753 ;; Defined at:
  4754 ;;		line 77 in file "main.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		None
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4768 ;;      Params:         0       0       0       0
  4769 ;;      Locals:         0       0       0       0
  4770 ;;      Temps:          1       0       0       0
  4771 ;;      Totals:         1       0       0       0
  4772 ;;Total ram usage:        1 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    2
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		Interrupt level 1
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	intcodelo
  4783  000018                     __pintcodelo:
  4784                           	opt callstack 0
  4785  000018                     _InterruptHandlerLow:
  4786                           	opt callstack 20
  4787                           
  4788                           ;incstack = 0
  4789  000018  8056               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4790  00001A  CFE0 F008          	movff	bsr,??_InterruptHandlerLow
  4791  00001E  C008  FFE0         	movff	??_InterruptHandlerLow,bsr
  4792  000022  9056               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4793  000024  0010               	retfie	
  4794  000026                     __end_of_InterruptHandlerLow:
  4795                           	opt callstack 0
  4796                           
  4797 ;; *************** function _InterruptHandlerHigh *****************
  4798 ;; Defined at:
  4799 ;;		line 59 in file "main.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;		None
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  throwaway       1    0        unsigned char 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      void 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4813 ;;      Params:         0       0       0       0
  4814 ;;      Locals:         1       0       0       0
  4815 ;;      Temps:          2       0       0       0
  4816 ;;      Totals:         3       0       0       0
  4817 ;;Total ram usage:        3 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; Hardware stack levels required when called:    1
  4820 ;; This function calls:
  4821 ;;		_processRFID
  4822 ;; This function is called by:
  4823 ;;		Interrupt level 2
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	intcode
  4828  000008                     __pintcode:
  4829                           	opt callstack 0
  4830  000008                     _InterruptHandlerHigh:
  4831                           	opt callstack 20
  4832                           
  4833                           ;incstack = 0
  4834  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4835  00000A  EFCE  F009         	goto	int_func
  4836                           
  4837                           	psect	intcode_body
  4838  00139C                     __pintcode_body:
  4839                           	opt callstack 20
  4840  00139C                     int_func:
  4841                           	opt callstack 20
  4842  00139C  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4843  0013A0  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4844                           
  4845                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 0))
  4846  0013A4  AA9E               	btfss	3998,5,c	;volatile
  4847  0013A6  D00E               	goto	i2l71
  4848  0013A8  5055               	movf	_robot_mode,w,c	;volatile
  4849  0013AA  A4D8               	btfss	status,2,c
  4850  0013AC  D00B               	goto	i2l71
  4851                           
  4852                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4853  0013AE  0EDF               	movlw	low _RFIDbuf
  4854  0013B0  6E01               	movwf	processRFID@RFIDbuf,c
  4855  0013B2  0E00               	movlw	high _RFIDbuf
  4856  0013B4  6E02               	movwf	processRFID@RFIDbuf+1,c
  4857  0013B6  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4858  0013BA  EC48  F009         	call	_processRFID	;wreg free
  4859  0013BE  0100               	movlb	0	; () banked
  4860  0013C0  6FBE               	movwf	_RFID_flag& (0+255),b	;volatile
  4861                           
  4862                           ;main.c: 67:     }
  4863  0013C2  D001               	goto	i2l73
  4864  0013C4                     i2l71:
  4865  0013C4  50AE               	movf	4014,w,c	;volatile
  4866  0013C6                     i2l73:
  4867  0013C6  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4868  0013CA  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4869  0013CE  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4870  0013D0  0011               	retfie		f
  4871  0013D2                     __end_of_InterruptHandlerHigh:
  4872                           	opt callstack 0
  4873                           
  4874 ;; *************** function _processRFID *****************
  4875 ;; Defined at:
  4876 ;;		line 34 in file "RFID.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  4879 ;;		 -> RFIDbuf(12), 
  4880 ;;  latestChar      1    2[COMRAM] unsigned char 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  i               1    3[COMRAM] unsigned char 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      unsigned char 
  4885 ;; Registers used:
  4886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4892 ;;      Params:         3       0       0       0
  4893 ;;      Locals:         1       0       0       0
  4894 ;;      Temps:          0       0       0       0
  4895 ;;      Totals:         4       0       0       0
  4896 ;;Total ram usage:        4 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_InterruptHandlerHigh
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text37
  4906  001290                     __ptext37:
  4907                           	opt callstack 0
  4908  001290                     _processRFID:
  4909                           	opt callstack 20
  4910                           
  4911                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4912                           
  4913                           ;incstack = 0
  4914  001290  0E03               	movlw	3
  4915  001292  1803               	xorwf	processRFID@latestChar,w,c
  4916  001294  A4D8               	btfss	status,2,c
  4917  001296  D002               	goto	i2l2152
  4918                           
  4919                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4920  001298  0E01               	movlw	1
  4921  00129A  0012               	return	
  4922  00129C                     i2l2152:
  4923                           
  4924                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4925  00129C  0E02               	movlw	2
  4926  00129E  1803               	xorwf	processRFID@latestChar,w,c
  4927  0012A0  A4D8               	btfss	status,2,c
  4928  0012A2  D012               	goto	i2l2172
  4929                           
  4930                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4931  0012A4  0E00               	movlw	0
  4932  0012A6  6E54               	movwf	processRFID@position_in_buf,c
  4933                           
  4934                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4935  0012A8  0E00               	movlw	0
  4936  0012AA  6E04               	movwf	processRFID@i,c
  4937  0012AC                     i2l2160:
  4938                           
  4939                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4940  0012AC  5004               	movf	processRFID@i,w,c
  4941  0012AE  2401               	addwf	processRFID@RFIDbuf,w,c
  4942  0012B0  6ED9               	movwf	fsr2l,c
  4943  0012B2  0E00               	movlw	0
  4944  0012B4  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4945  0012B6  6EDA               	movwf	fsr2h,c
  4946  0012B8  0E00               	movlw	0
  4947  0012BA  6EDF               	movwf	indf2,c
  4948                           
  4949                           ;RFID.c: 56:            }
  4950  0012BC  2A04               	incf	processRFID@i,f,c
  4951  0012BE  0E0B               	movlw	11
  4952  0012C0  6404               	cpfsgt	processRFID@i,c
  4953  0012C2  D7F4               	goto	i2l2160
  4954  0012C4                     i2u144_40:
  4955                           
  4956                           ;RFID.c: 58:            return 0;
  4957  0012C4  0E00               	movlw	0
  4958  0012C6  0012               	return	
  4959  0012C8                     i2l2172:
  4960                           
  4961                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  4962  0012C8  5054               	movf	processRFID@position_in_buf,w,c
  4963  0012CA  2401               	addwf	processRFID@RFIDbuf,w,c
  4964  0012CC  6ED9               	movwf	fsr2l,c
  4965  0012CE  0E00               	movlw	0
  4966  0012D0  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4967  0012D2  6EDA               	movwf	fsr2h,c
  4968  0012D4  C003  FFDF         	movff	processRFID@latestChar,indf2
  4969                           
  4970                           ;RFID.c: 64:             position_in_buf++;
  4971  0012D8  2A54               	incf	processRFID@position_in_buf,f,c
  4972  0012DA  D7F4               	goto	i2u144_40
  4973  0012DC                     __end_of_processRFID:
  4974                           	opt callstack 0
  4975                           
  4976                           	psect	rparam
  4977  0000                     
  4978                           	psect	temp
  4979  000056                     btemp:
  4980                           	opt callstack 0
  4981  000056                     	ds	1
  4982  0000                     int$flags	set	btemp
  4983  0000                     wtemp8	set	btemp+1
  4984  0000                     ttemp5	set	btemp+1
  4985  0000                     ttemp6	set	btemp+4
  4986  0000                     ttemp7	set	btemp+8
  4987                           tosu	equ	0xFFF
  4988                           tosh	equ	0xFFE
  4989                           tosl	equ	0xFFD
  4990                           stkptr	equ	0xFFC
  4991                           pclatu	equ	0xFFB
  4992                           pclath	equ	0xFFA
  4993                           pcl	equ	0xFF9
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           indf0	equ	0xFEF
  5001                           postinc0	equ	0xFEE
  5002                           postdec0	equ	0xFED
  5003                           preinc0	equ	0xFEC
  5004                           plusw0	equ	0xFEB
  5005                           fsr0h	equ	0xFEA
  5006                           fsr0l	equ	0xFE9
  5007                           wreg	equ	0xFE8
  5008                           indf1	equ	0xFE7
  5009                           postinc1	equ	0xFE6
  5010                           postdec1	equ	0xFE5
  5011                           preinc1	equ	0xFE4
  5012                           plusw1	equ	0xFE3
  5013                           fsr1h	equ	0xFE2
  5014                           fsr1l	equ	0xFE1
  5015                           bsr	equ	0xFE0
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           preinc2	equ	0xFDC
  5020                           plusw2	equ	0xFDB
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8


Data Sizes:
    Strings     69
    Constant    0
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     77      85
    BANK0           160     91     139
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[8]), STR_1(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1770_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp1(BANK0[16]), main@temp2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[8]), STR_1(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[8]), STR_1(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    process_signal@S	PTR struct Sensor size(2) Largest target is 4
		 -> main@sensor(BANK0[4]), 

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), STR_3(CODE[16]), main@temp1(BANK0[16]), 
		 -> main@temp2(BANK0[16]), 

    init_motors@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motors@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motors@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motors@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _process_signal->___lwdiv
    ___lwdiv->___wmul
    _moveToBeacon->_turnRight
    _turnRight->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _init_motors->_setMotorPWM
    _setMotorPWM->___wmul
    ___wmul->___awdiv
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                59    59      0   30139
                                             32 BANK0     59    59      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                         _check_RFID
                      _classify_data
                       _display_RFID
                        _init_motors
                       _moveToBeacon
                     _process_signal
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7709
                                             16 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                              8 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             67 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             35 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             24 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              8 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             17 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              8 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              8 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              8 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1274
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1154
                                             12 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _process_signal                                       4     2      2    1518
                                             29 COMRAM     4     2      2
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     260
                                             22 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                         6     1      5    5606
                                             38 COMRAM     6     1      5
                     _fullSpeedAhead
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     3      4    2579
                                             31 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     2      4    2579
                                             31 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motors                                          4     0      4    2665
                                             31 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2205
                                             22 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     499
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     550
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3408
                                             13 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1066
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        2     0      2      98
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3492
                                             14 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1110
                                             12 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1491
                                             12 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1066
                                             10 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              8 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerLow                                  1     1      0       0
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptHandlerHigh                                3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (11) _processRFID                                         4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motors
     _setMotorPWM
       ___awdiv
       ___wmul
         ___awdiv (ARG)
   _moveToBeacon
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
     _turnRight
       _setMotorPWM
         ___awdiv
         ___wmul
           ___awdiv (ARG)
   _process_signal
     ___awdiv
     ___lwdiv
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5B      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4D      55       1       90.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E0       3        0.0%
DATA                 0      0      E0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 10:41:15 2020

                           l63 1406                   ___awdiv@sign 000E                             bsr 000FE0  
          ___wmul@multiplicand 0013                  ?_display_RFID 000E                    ?_LCD_String 000D  
                          l134 0A00                            l322 0E58                            l332 0364  
                          l334 036C                            l805 0D68            display_RFID@dataBuf 000E  
                          l848 1286                            l795 0BF2                            _pad 0E2A  
               moveToBeacon@mL 0028                 moveToBeacon@mR 002A                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l2112 1254  
                         l2114 125C                           l2052 113A                           l2044 1442  
                         l2212 1536                           l2124 127C                           l2222 1300  
                         l2048 1454                           l2058 116E                           l2260 07F0  
                         l2068 0FFA                           l2412 0DA2                           l2422 136E  
                         l2430 1468                           l2510 03A4                           l2272 0874  
                         l2248 1336                           l2088 10F0                           l2432 146C  
                         l2520 0490                           l2282 0924                           l2266 0832  
                         l2426 1384                           l2442 0E42                           l2452 0E7A  
                         l1902 0F88                           l2446 0E50                           l2550 0756  
                         l1904 0F90                           l2456 0EA6                           l2448 0E62  
                         l2560 079C                           l2640 061E                           l1922 0FC8  
                         l1914 0FB0                           l2466 0B6C                           l2650 0638  
                         l2634 060A                           l1932 09D8                           l2468 0B80  
                         l2556 0792                           l2580 11D0                           l2636 0612  
                         l1918 0FBA                           l2478 0BDC                           l2494 0D52  
                         l2486 0CF6                           l2566 07B4                           l2638 0616  
                         l2488 0D0A                           l1890 0F62                           l2578 11AA  
                         l2658 0670                           l2598 0510                           ?_pad 0019  
                         l1896 0F72                           STR_1 0331                           STR_2 033E  
                         STR_3 0321                           STR_4 0311                           STR_5 0301  
                         u2010 035A                           u1320 115E                           u2040 04BA  
                         u2041 04B8                           u1330 118E                           u1234 09AC  
                         u2050 04C8                           u1235 09A8                           u1500 1362  
                         u1244 09F4                           u2060 04CC                           u2140 0668  
                         u1245 09F0                           u1190 0F94                           u1350 104E  
                         u2150 0674                           _LATB 000F8A                           u1327 1154  
                         u1255 0A4C                           u2207 0C48                           u1600 08B2  
                         u1360 1136                           u1265 13DC                           u1337 1184  
                         u2217 0C58                           u1266 13DE                           u1610 08B4  
                         u2307 1518                           u2227 0C66                           u1620 08C2  
                         u2317 1456                           u2237 0C74                           u1630 08C4  
                         u1550 0888                           u1390 1260                           u2327 1168  
                         u2247 0C86                           u1640 08D2                           u1560 0892  
                         u2337 13EA                           u2257 0C98                           u2177 05D2  
                         u1650 08D4                           u1570 0894                           u2347 13FA  
                         u2267 0CAE                           u2187 0644                           u1660 08E2  
                         u1580 08A2                           u2357 10C0                           u2277 0CC2  
                         u2197 0C32                           u1670 08E4                           u1590 08A4  
                         u2367 1552                           u2287 0CD4                           u1680 0900  
                         u1840 0D9A                           u2297 1030                           u1690 0902  
                         u1931 0B4C                           u1860 0DE2                           u1950 0B84  
                         u1980 0D0E                           i2l71 13C4                           i2l73 13C6  
                         _dbuf 00BF                           _main 04F6                           _prec 0050  
                         _nout 00BB                           pad@i 0020                           pad@p 001D  
                         fsr1h 000FE2                           fsr2h 000FDA                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           pad@w 0022  
                         fsr2l 000FD9                           btemp 0056                           _utoa 0348  
                         prodh 000FF4                           prodl 000FF3                           start 0026  
                 ___param_bank 000000                __end_of_SendLCD 1402                          ??_pad 001F  
              __end_of_SetLine 145E                 ??_display_RFID 0010                          ?_main 0001  
              __end_of___awdiv 0FD2                          ?_utoa 0024                __end_of___lodiv 0C14  
              ___awdiv@divisor 000B                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                __end_of___lomod 0D8A                          _PDC1L 000F77  
                        _T5CON 000FB7                __end_of___lwdiv 1290                ___awdiv@counter 000D  
                        _RCREG 000FAE                          _E_TOG 154E                   vfpfcnvrt@fmt 0046  
                 vfpfcnvrt@llu 0060                          _SPBRG 000FAF                   ?_init_sensor 0001  
                 ?_init_motors 0020                __end_of_initPWM 1508                          _flags 0052  
                        _fputc 0D8A                          _fputs 1364                          _setup 1402  
                        pad@fp 0019                          _width 004E                          _putch 155C  
                        main@i 00A3                          tablat 000FF5             processRFID@RFIDbuf 0001  
                        ttemp5 0057                          ttemp6 005A                          ttemp7 005E  
                        utoa@d 0026                          utoa@i 0042                          utoa@n 003A  
                        utoa@p 0036                          utoa@w 0038                          status 000FD8  
                        wtemp8 0057            __size_of_LCD_String 005E                __end_of_sprintf 123E  
             __end_of_ClearLCD 1522               ___lodiv@dividend 0009                 __CFG_MCLRE$OFF 000000  
              __initialization 1488                   __end_of_main 067E                   __end_of_utoa 04F6  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000D                         ??_main 0080  
  moveToBeacon@beacon_location 002C                         ??_utoa 002E                  __activetblptr 000002  
                       ?_E_TOG 0001               ___lodiv@quotient 0019                   ?_setMotorPWM 0017  
                       ?_fputc 0009                         ?_fputs 0012               ___awdiv@dividend 0009  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       ?_putch 0001                         i2l2160 12AC                         i2l2152 129C  
                       i2l2172 12C8                         _LCDout 1050                    SendLCD@Byte 000C  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000B            main@beacon_location 00BD                      ??_SendLCD 000C  
                    ??_SetLine 000D                   vfprintf@cfmt 006E                  display_RFID@i 0010  
                       ___wmul 14AE                      ??___awdiv 000D                      ??___lodiv 0019  
                    ??___lomod 0019                      ??___lwdiv 001B               __end_of_init_LCD 0CDC  
                       clear_0 148E                         clear_1 149A               ___awdiv@quotient 000F  
                       pad@buf 001B                         _strlen 145E                      ??_initPWM 000B  
                       fputc@c 0009                         fputs@c 0016                         fputs@i 0017  
                       fputs@s 0012               ??_process_signal 0020                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 11EC                         utoa@fp 0024  
                    ??_sprintf 004E                   ?_processRFID 0001           __end_of_display_RFID 1364  
                   __accesstop 0060        __end_of__initialization 14A0                fullSpeedAhead@i 0024  
                ___rparam_used 000001                    SetLine@line 000D                  __end_of_E_TOG 155C  
               __pcstackCOMRAM 0001                  __end_of_fputc 0E2A                  __end_of_fputs 139C  
                __end_of_setup 1430                  __end_of_putch 155E                   ??_LCD_String 000F  
                      ??_E_TOG 0009  __size_of_InterruptHandlerHigh 13CA                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 0026          __end_of_classify_data 153A                        ??_fputc 000D  
                   _check_RFID 07E8                        ??_fputs 0016           __size_of_init_sensor 0014  
         __size_of_init_motors 00EA                        ??_setup 000E                        ??_putch 0009  
                   __pbssBANK0 00BB                        ?_LCDout 0001             __size_of_init_RFID 001A  
           __end_of_LCD_String 1196                        ?___wmul 0011                  ?_moveToBeacon 0027  
                      _CAP1CON 000F63        __size_of_fullSpeedAhead 0070                        ?_strlen 0009  
                   ??_ClearLCD 000D             __size_of_vfpfcnvrt 016A                        _RFIDbuf 00DF  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E               ___lomod@dividend 0009  
         __size_of_setMotorPWM 0124                      ?_init_LCD 0001                __size_of_LCDout 0078  
           __size_of_turnRight 007E                        _SendLCD 13D2                        __Hparam 0000  
                      _SetLine 1430                        __Lparam 0000                 ??_moveToBeacon 002C  
        processRFID@latestChar 0003                        ___awdiv 0F4E                __size_of___wmul 0026  
                      ___lodiv 0B46                        ___lomod 0CDC                        ___lwdiv 123E  
                    ?_vfprintf 0068                   __psmallconst 0300               initPWM@PWMperiod 0009  
                      __pcinit 1488                        __ramtop 0300                        __ptext0 04F6  
                      __ptext1 11EC                        __ptext2 1196                        __ptext3 067E  
                      __ptext4 0348                        __ptext5 0E2A                        __ptext6 145E  
                      __ptext7 1364                        __ptext8 0D8A                        __ptext9 155C  
            __end_of_init_RFID 14EE               check_RFID@hexBuf 0013                __size_of_strlen 002A  
                      _initPWM 14EE                   __size_of_pad 0096                   LCDout@number 000A  
        __size_of_display_RFID 0040                    ?_check_RFID 000F                        _sprintf 11EC  
               __pintcode_body 139C           end_of_initialization 14A0             setMotorPWM@PWMduty 001E  
                   ??_init_LCD 000D           __size_of_processRFID 004C                        fputc@fp 000B  
                __Lmediumconst 0000                        int_func 139C                        fputs@fp 0014  
                    _RFID_flag 00BE              __end_of_vfpfcnvrt 07E8                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_vfprintf 004E                        strlen@a 000B  
                      strlen@s 0009                     _robot_mode 0055                   _display_RFID 1324  
              process_signal@S 001E                      _PORTDbits 000F83              __end_of_turnRight 1050  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95               fullSpeedAhead@mL 0020               fullSpeedAhead@mR 0022  
               __end_of_LCDout 10C8                      _TXSTAbits 000FAC                     main@motorL 00A9  
                   main@motorR 00B2                     main@sensor 00A5                 _fullSpeedAhead 10C8  
          __size_of_check_RFID 0150                    vfpfcnvrt@ap 0048                    vfpfcnvrt@fp 0044  
               __end_of___wmul 14D4                    _BAUDCONbits 000FAA                 __end_of_strlen 1488  
          start_initialization 1488                ___lodiv@divisor 0011                ___lodiv@counter 0021  
                  __end_of_pad 0EC0              __size_of_ClearLCD 001A           __end_of_moveToBeacon 1324  
                     ??_LCDout 0009   __end_of_InterruptHandlerHigh 13D2                    vfprintf@fmt 006A  
       __end_of_fullSpeedAhead 1138                       ??___wmul 0015                       ??_strlen 000B  
                  __pbssCOMRAM 004E                  ??_init_sensor 0009                  ??_init_motors 0024  
                __pcstackBANK0 0060          main@previous_location 00A2   __size_of_InterruptHandlerLow 000E  
      __size_of_process_signal 008E              __size_of_init_LCD 00C8                       ?_SendLCD 000B  
                     ?_SetLine 0001               ___lwdiv@dividend 0017                ?_fullSpeedAhead 0020  
                    __pintcode 0008                       ?___awdiv 0009         __size_of_classify_data 0018  
                     ?___lodiv 0009                       ?___lomod 0009             check_RFID@checksum 0024  
                     ?___lwdiv 0017                    __pintcodelo 0018              __size_of_vfprintf 0056  
                     _CAP1BUFH 000F69                       _CAP1BUFL 000F68                ___lomod@divisor 0011  
                     ?_initPWM 0009                    __smallconst 0300                ___lomod@counter 0019  
               __size_of_E_TOG 000E                      _init_RFID 14D4                  ??_setMotorPWM 0019  
             ___lwdiv@quotient 001B                   ??_check_RFID 0011                       ?_sprintf 0070  
               __size_of_fputc 00A0                 __size_of_fputs 0038                 __size_of_setup 002E  
               __size_of_putch 0002                check_RFID@byte1 001F                check_RFID@byte2 0020  
              check_RFID@byte3 0021                check_RFID@byte4 0022                check_RFID@byte5 0023  
          __end_of_init_sensor 154E            __end_of_init_motors 0B46                 ___wmul@product 0015  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                    turnRight@mL 0020  
                  turnRight@mR 0022                       i2u144_40 12C4                       _PIR1bits 000F9E  
                     _RCONbits 000FD0                      _vfpfcnvrt 067E             __end_of_check_RFID 0938  
            ___wmul@multiplier 0011                   setMotorPWM@m 0017          __size_of_moveToBeacon 0048  
         _InterruptHandlerHigh 0008                       _ClearLCD 1508                      main@temp1 0092  
                    main@temp2 0082                     ?_init_RFID 0001                      _turnRight 0FD2  
                ??_processRFID 0004                  _classify_data 1522            __end_of_setMotorPWM 0A5C  
                  check_RFID@i 0025                       __Hrparam 0000      moveToBeacon@prev_location 0027  
             __size_of_SendLCD 0030                     vfprintf@ap 006C                       __Lrparam 0000  
                   vfprintf@fp 0068               __size_of_SetLine 002E                   _moveToBeacon 12DC  
             __size_of___awdiv 0084               __size_of___lodiv 00CE               __size_of___lomod 00AE  
                   ?_vfpfcnvrt 0044               __size_of___lwdiv 0052          ?_InterruptHandlerHigh 0001  
                   sprintf@fmt 0072               __size_of_initPWM 001A                    _init_sensor 153A  
                  _init_motors 0A5C                ___lwdiv@divisor 0019                 ?_classify_data 0009  
              ___lwdiv@counter 001D              check_RFID@dataBuf 000F                     ?_turnRight 0020  
                     __ptext10 0CDC                       __ptext11 0B46                       __ptext20 0FD2  
                     __ptext12 1402                       __ptext21 10C8                       __ptext13 153A  
                     __ptext30 1430                       __ptext22 0A5C                       __ptext14 14D4  
                     __ptext31 1138                       __ptext23 0938                       __ptext15 0C14  
                     __ptext32 13D2                       __ptext24 14AE                       __ptext16 14EE  
                     __ptext33 1050                       __ptext25 0F4E                       __ptext17 0EC0  
                     __ptext34 154E                       __ptext26 1324                       __ptext18 123E  
                     __ptext27 1508                       __ptext19 12DC                       __ptext28 1522  
                     __ptext37 1290                       __ptext29 07E8     classify_data@smoothed_data 0009  
             __size_of_sprintf 0052                       _init_LCD 0C14                 _process_signal 0EC0  
                __size_of_main 0188                  __size_of_utoa 01AE            __end_of_processRFID 12DC  
                   turnRight@i 0025                       int$flags 0056                       _vfprintf 1196  
          _InterruptHandlerLow 0018                     _LCD_String 1138                     _INTCONbits 000FF2  
                  ??_init_RFID 0009                    _setMotorPWM 0938         __end_of_process_signal 0F4E  
                     intlevel1 0000                       intlevel2 0000                      sprintf@ap 0078  
         ?_InterruptHandlerLow 0001               ??_fullSpeedAhead 0024                  init_motors@mL 0020  
                init_motors@mR 0022                     _OSCCONbits 000FD3     processRFID@position_in_buf 0054  
                  ??_vfpfcnvrt 004A         ??_InterruptHandlerHigh 0005                       sprintf@f 007A  
                     sprintf@s 0070                ??_classify_data 000B                    ??_turnRight 0024  
                  _processRFID 1290                ?_process_signal 001E          ??_InterruptHandlerLow 0008  
