

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 09:55:17 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _ANSEL1	set	4025
    86  0000                     _ANSEL0	set	4024
    87  0000                     _T5CON	set	4023
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _TXSTAbits	set	4012
    92  0000                     _BAUDCONbits	set	4010
    93  0000                     _SPBRGH	set	4016
    94  0000                     _SPBRG	set	4015
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATDbits	set	3980
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _RCREG	set	4014
   108  0000                     _PIR1bits	set	3998
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _T0CON	set	4053
   111  0000                     _TRISDbits	set	3989
   112  0000                     _TRISBbits	set	3987
   113  0000                     _RCONbits	set	4048
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCCONbits	set	4051
   116  0000                     _OSCCON	set	4051
   117  0000                     _PDC1H	set	3958
   118  0000                     _PDC1L	set	3959
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121                           
   122                           	psect	smallconst
   123  000300                     __psmallconst:
   124                           	opt callstack 0
   125  000300  00                 	db	0
   126  000301                     STR_14:
   127  000301  53                 	db	83	;'S'
   128  000302  54                 	db	84	;'T'
   129  000303  41                 	db	65	;'A'
   130  000304  52                 	db	82	;'R'
   131  000305  54                 	db	84	;'T'
   132  000306  49                 	db	73	;'I'
   133  000307  4E                 	db	78	;'N'
   134  000308  47                 	db	71	;'G'
   135  000309  20                 	db	32
   136  00030A  53                 	db	83	;'S'
   137  00030B  45                 	db	69	;'E'
   138  00030C  41                 	db	65	;'A'
   139  00030D  52                 	db	82	;'R'
   140  00030E  43                 	db	67	;'C'
   141  00030F  48                 	db	72	;'H'
   142  000310  00                 	db	0
   143  000311                     STR_13:
   144  000311  54                 	db	84	;'T'
   145  000312  4F                 	db	79	;'O'
   146  000313  20                 	db	32
   147  000314  53                 	db	83	;'S'
   148  000315  54                 	db	84	;'T'
   149  000316  41                 	db	65	;'A'
   150  000317  52                 	db	82	;'R'
   151  000318  54                 	db	84	;'T'
   152  000319  20                 	db	32
   153  00031A  53                 	db	83	;'S'
   154  00031B  45                 	db	69	;'E'
   155  00031C  41                 	db	65	;'A'
   156  00031D  52                 	db	82	;'R'
   157  00031E  43                 	db	67	;'C'
   158  00031F  48                 	db	72	;'H'
   159  000320  00                 	db	0
   160  000321                     STR_6:
   161  000321  52                 	db	82	;'R'
   162  000322  45                 	db	69	;'E'
   163  000323  53                 	db	83	;'S'
   164  000324  45                 	db	69	;'E'
   165  000325  54                 	db	84	;'T'
   166  000326  54                 	db	84	;'T'
   167  000327  49                 	db	73	;'I'
   168  000328  4E                 	db	78	;'N'
   169  000329  47                 	db	71	;'G'
   170  00032A  20                 	db	32
   171  00032B  52                 	db	82	;'R'
   172  00032C  4F                 	db	79	;'O'
   173  00032D  42                 	db	66	;'B'
   174  00032E  4F                 	db	79	;'O'
   175  00032F  54                 	db	84	;'T'
   176  000330  00                 	db	0
   177  000331                     STR_3:
   178  000331  43                 	db	67	;'C'
   179  000332  48                 	db	72	;'H'
   180  000333  45                 	db	69	;'E'
   181  000334  43                 	db	67	;'C'
   182  000335  4B                 	db	75	;'K'
   183  000336  53                 	db	83	;'S'
   184  000337  55                 	db	85	;'U'
   185  000338  4D                 	db	77	;'M'
   186  000339  20                 	db	32
   187  00033A  46                 	db	70	;'F'
   188  00033B  41                 	db	65	;'A'
   189  00033C  49                 	db	73	;'I'
   190  00033D  4C                 	db	76	;'L'
   191  00033E  45                 	db	69	;'E'
   192  00033F  44                 	db	68	;'D'
   193  000340  00                 	db	0
   194  000341                     STR_2:
   195  000341  43                 	db	67	;'C'
   196  000342  48                 	db	72	;'H'
   197  000343  45                 	db	69	;'E'
   198  000344  43                 	db	67	;'C'
   199  000345  4B                 	db	75	;'K'
   200  000346  53                 	db	83	;'S'
   201  000347  55                 	db	85	;'U'
   202  000348  4D                 	db	77	;'M'
   203  000349  20                 	db	32
   204  00034A  50                 	db	80	;'P'
   205  00034B  41                 	db	65	;'A'
   206  00034C  53                 	db	83	;'S'
   207  00034D  53                 	db	83	;'S'
   208  00034E  45                 	db	69	;'E'
   209  00034F  44                 	db	68	;'D'
   210  000350  00                 	db	0
   211  000351                     STR_7:
   212  000351  4D                 	db	77	;'M'
   213  000352  4F                 	db	79	;'O'
   214  000353  56                 	db	86	;'V'
   215  000354  49                 	db	73	;'I'
   216  000355  4E                 	db	78	;'N'
   217  000356  47                 	db	71	;'G'
   218  000357  20                 	db	32
   219  000358  54                 	db	84	;'T'
   220  000359  4F                 	db	79	;'O'
   221  00035A  20                 	db	32
   222  00035B  42                 	db	66	;'B'
   223  00035C  4F                 	db	79	;'O'
   224  00035D  4D                 	db	77	;'M'
   225  00035E  42                 	db	66	;'B'
   226  00035F  00                 	db	0
   227  000360                     STR_5:
   228  000360  42                 	db	66	;'B'
   229  000361  4F                 	db	79	;'O'
   230  000362  4D                 	db	77	;'M'
   231  000363  42                 	db	66	;'B'
   232  000364  20                 	db	32
   233  000365  4E                 	db	78	;'N'
   234  000366  4F                 	db	79	;'O'
   235  000367  54                 	db	84	;'T'
   236  000368  20                 	db	32
   237  000369  46                 	db	70	;'F'
   238  00036A  4F                 	db	79	;'O'
   239  00036B  55                 	db	85	;'U'
   240  00036C  4E                 	db	78	;'N'
   241  00036D  44                 	db	68	;'D'
   242  00036E  00                 	db	0
   243  00036F                     STR_8:
   244  00036F  52                 	db	82	;'R'
   245  000370  45                 	db	69	;'E'
   246  000371  54                 	db	84	;'T'
   247  000372  55                 	db	85	;'U'
   248  000373  52                 	db	82	;'R'
   249  000374  4E                 	db	78	;'N'
   250  000375  49                 	db	73	;'I'
   251  000376  4E                 	db	78	;'N'
   252  000377  47                 	db	71	;'G'
   253  000378  20                 	db	32
   254  000379  48                 	db	72	;'H'
   255  00037A  4F                 	db	79	;'O'
   256  00037B  4D                 	db	77	;'M'
   257  00037C  45                 	db	69	;'E'
   258  00037D  00                 	db	0
   259  00037E                     STR_1:
   260  00037E  43                 	db	67	;'C'
   261  00037F  72                 	db	114	;'r'
   262  000380  69                 	db	105	;'i'
   263  000381  74                 	db	116	;'t'
   264  000382  69                 	db	105	;'i'
   265  000383  63                 	db	99	;'c'
   266  000384  61                 	db	97	;'a'
   267  000385  6C                 	db	108	;'l'
   268  000386  20                 	db	32
   269  000387  45                 	db	69	;'E'
   270  000388  72                 	db	114	;'r'
   271  000389  72                 	db	114	;'r'
   272  00038A  6F                 	db	111	;'o'
   273  00038B  72                 	db	114	;'r'
   274  00038C  00                 	db	0
   275  00038D                     STR_12:
   276  00038D  50                 	db	80	;'P'
   277  00038E  52                 	db	82	;'R'
   278  00038F  45                 	db	69	;'E'
   279  000390  53                 	db	83	;'S'
   280  000391  53                 	db	83	;'S'
   281  000392  20                 	db	32
   282  000393  42                 	db	66	;'B'
   283  000394  55                 	db	85	;'U'
   284  000395  54                 	db	84	;'T'
   285  000396  54                 	db	84	;'T'
   286  000397  4F                 	db	79	;'O'
   287  000398  4E                 	db	78	;'N'
   288  000399  00                 	db	0
   289  00039A                     STR_4:
   290  00039A  53                 	db	83	;'S'
   291  00039B  45                 	db	69	;'E'
   292  00039C  41                 	db	65	;'A'
   293  00039D  52                 	db	82	;'R'
   294  00039E  43                 	db	67	;'C'
   295  00039F  48                 	db	72	;'H'
   296  0003A0  49                 	db	73	;'I'
   297  0003A1  4E                 	db	78	;'N'
   298  0003A2  47                 	db	71	;'G'
   299  0003A3  00                 	db	0
   300  0003A4                     STR_10:
   301  0003A4  25                 	db	37
   302  0003A5  75                 	db	117	;'u'
   303  0003A6  00                 	db	0
   304  0000                     
   305                           ; #config settings
   306  0003A7  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  0010C2                     __pcinit:
   310                           	opt callstack 0
   311  0010C2                     start_initialization:
   312                           	opt callstack 0
   313  0010C2                     __initialization:
   314                           	opt callstack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (50 bytes)
   317  0010C2  EE00  F060         	lfsr	0,__pbssBANK0
   318  0010C6  0E32               	movlw	50
   319  0010C8                     clear_0:
   320  0010C8  6AEE               	clrf	postinc0,c
   321  0010CA  06E8               	decf	wreg,f,c
   322  0010CC  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to COMRAM (11 bytes)
   325  0010CE  EE00  F03E         	lfsr	0,__pbssCOMRAM
   326  0010D2  0E0B               	movlw	11
   327  0010D4                     clear_1:
   328  0010D4  6AEE               	clrf	postinc0,c
   329  0010D6  06E8               	decf	wreg,f,c
   330  0010D8  E1FD               	bnz	clear_1
   331  0010DA                     end_of_initialization:
   332                           	opt callstack 0
   333  0010DA                     __end_of__initialization:
   334                           	opt callstack 0
   335  0010DA  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  0010DC  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  0010DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   338  0010E0  6EF8               	movwf	tblptru,c
   339  0010E2  0100               	movlb	0
   340  0010E4  EFA5  F003         	goto	_main	;jump to C main() function
   341                           
   342                           	psect	bssCOMRAM
   343  00003E                     __pbssCOMRAM:
   344                           	opt callstack 0
   345  00003E                     	ds	2
   346  000040                     debug@smoothed_data:
   347                           	opt callstack 0
   348  000040                     	ds	2
   349  000042                     processRFID@position_in_buf:
   350                           	opt callstack 0
   351  000042                     	ds	1
   352  000043                     _robot_mode:
   353                           	opt callstack 0
   354  000043                     	ds	1
   355  000044                     _movement_time:
   356                           	opt callstack 0
   357  000044                     	ds	4
   358  000048                     _RFID_flag:
   359                           	opt callstack 0
   360  000048                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  000060                     __pbssBANK0:
   364                           	opt callstack 0
   365  000060                     	ds	2
   366  000062                     	ds	2
   367  000064                     	ds	2
   368  000066                     	ds	32
   369  000086                     _RFIDbuf:
   370                           	opt callstack 0
   371  000086                     	ds	12
   372                           
   373                           	psect	cstackBANK0
   374  000092                     __pcstackBANK0:
   375                           	opt callstack 0
   376  000092                     main@searching_speed:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x0
   380  000092                     	ds	2
   381  000094                     main@moving_speed:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x2
   385  000094                     	ds	2
   386  000096                     main@motorL:
   387                           	opt callstack 0
   388                           
   389                           ; 9 bytes @ 0x4
   390  000096                     	ds	9
   391  00009F                     main@motorR:
   392                           	opt callstack 0
   393                           
   394                           ; 9 bytes @ 0xD
   395  00009F                     	ds	9
   396                           
   397                           	psect	cstackCOMRAM
   398  000001                     __pcstackCOMRAM:
   399                           	opt callstack 0
   400  000001                     processRFID@RFIDbuf:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x0
   404  000001                     	ds	2
   405  000003                     processRFID@latestChar:
   406                           	opt callstack 0
   407                           
   408                           ; 1 bytes @ 0x2
   409  000003                     	ds	1
   410  000004                     processRFID@i:
   411                           	opt callstack 0
   412                           
   413                           ; 1 bytes @ 0x3
   414  000004                     	ds	1
   415  000005                     ??_InterruptHandlerHigh:
   416                           
   417                           ; 1 bytes @ 0x4
   418  000005                     	ds	3
   419  000008                     ??_InterruptHandlerLow:
   420                           
   421                           ; 1 bytes @ 0x7
   422  000008                     	ds	3
   423  00000B                     ??_LCDout:
   424  00000B                     ?___wmul:
   425                           	opt callstack 0
   426  00000B                     initPWM@PWMperiod:
   427                           	opt callstack 0
   428  00000B                     classify_data@raw_data:
   429                           	opt callstack 0
   430  00000B                     ___wmul@multiplier:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0xA
   434  00000B                     	ds	1
   435  00000C                     LCDout@number:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0xB
   439  00000C                     	ds	1
   440  00000D                     SendLCD@type:
   441                           	opt callstack 0
   442  00000D                     classify_data@smoothed:
   443                           	opt callstack 0
   444  00000D                     ___wmul@multiplicand:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0xC
   448  00000D                     	ds	1
   449  00000E                     SendLCD@Byte:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0xD
   453  00000E                     	ds	1
   454  00000F                     ??_init_LCD:
   455  00000F                     ??_ClearLCD:
   456  00000F                     ??_classify_data:
   457  00000F                     SetLine@line:
   458                           	opt callstack 0
   459  00000F                     LCD_String@string:
   460                           	opt callstack 0
   461  00000F                     ___wmul@product:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0xE
   465  00000F                     	ds	1
   466  000010                     display_RFID@dataBuf:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0xF
   470  000010                     	ds	1
   471  000011                     ??_waitForInput:
   472  000011                     ?___awdiv:
   473                           	opt callstack 0
   474  000011                     check_RFID@dataBuf:
   475                           	opt callstack 0
   476  000011                     ___awdiv@dividend:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x10
   480  000011                     	ds	1
   481  000012                     display_RFID@i:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x11
   485  000012                     	ds	1
   486  000013                     ??_check_RFID:
   487  000013                     waitForInput@i:
   488                           	opt callstack 0
   489  000013                     ___awdiv@divisor:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x12
   493  000013                     	ds	2
   494  000015                     ___awdiv@counter:
   495                           	opt callstack 0
   496  000015                     classify_data@filtered:
   497                           	opt callstack 0
   498  000015                     check_RFID@hexBuf:
   499                           	opt callstack 0
   500                           
   501                           ; 12 bytes @ 0x14
   502  000015                     	ds	1
   503  000016                     ___awdiv@sign:
   504                           	opt callstack 0
   505                           
   506                           ; 1 bytes @ 0x15
   507  000016                     	ds	1
   508  000017                     ___awdiv@quotient:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x16
   512  000017                     	ds	2
   513  000019                     setMotorPWM@m:
   514                           	opt callstack 0
   515                           
   516                           ; 2 bytes @ 0x18
   517  000019                     	ds	2
   518  00001B                     ??_setMotorPWM:
   519                           
   520                           ; 1 bytes @ 0x1A
   521  00001B                     	ds	5
   522  000020                     setMotorPWM@PWMduty:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x1F
   526  000020                     	ds	1
   527  000021                     check_RFID@byte1:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x20
   531  000021                     	ds	1
   532  000022                     check_RFID@byte2:
   533                           	opt callstack 0
   534  000022                     stop@mL:
   535                           	opt callstack 0
   536  000022                     turnRight@mL:
   537                           	opt callstack 0
   538  000022                     moveForward@mL:
   539                           	opt callstack 0
   540  000022                     moveBackward@mL:
   541                           	opt callstack 0
   542  000022                     init_motor_struct@mL:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x21
   546  000022                     	ds	1
   547  000023                     check_RFID@byte3:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x22
   551  000023                     	ds	1
   552  000024                     check_RFID@byte4:
   553                           	opt callstack 0
   554  000024                     stop@mR:
   555                           	opt callstack 0
   556  000024                     turnRight@mR:
   557                           	opt callstack 0
   558  000024                     moveForward@mR:
   559                           	opt callstack 0
   560  000024                     moveBackward@mR:
   561                           	opt callstack 0
   562  000024                     init_motor_struct@mR:
   563                           	opt callstack 0
   564                           
   565                           ; 2 bytes @ 0x23
   566  000024                     	ds	1
   567  000025                     check_RFID@byte5:
   568                           	opt callstack 0
   569                           
   570                           ; 1 bytes @ 0x24
   571  000025                     	ds	1
   572  000026                     check_RFID@checksum:
   573                           	opt callstack 0
   574  000026                     stop@initial_speed:
   575                           	opt callstack 0
   576  000026                     turnRight@max_power:
   577                           	opt callstack 0
   578  000026                     moveForward@max_power:
   579                           	opt callstack 0
   580  000026                     moveBackward@max_power:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x25
   584  000026                     	ds	1
   585  000027                     check_RFID@i:
   586                           	opt callstack 0
   587                           
   588                           ; 2 bytes @ 0x26
   589  000027                     	ds	1
   590  000028                     ??_stop:
   591  000028                     ??_turnRight:
   592  000028                     ??_moveForward:
   593  000028                     ??_moveBackward:
   594                           
   595                           ; 1 bytes @ 0x27
   596  000028                     	ds	1
   597  000029                     stop@i:
   598                           	opt callstack 0
   599  000029                     turnRight@i:
   600                           	opt callstack 0
   601  000029                     moveForward@i:
   602                           	opt callstack 0
   603  000029                     moveBackward@i:
   604                           	opt callstack 0
   605                           
   606                           ; 2 bytes @ 0x28
   607  000029                     	ds	2
   608  00002B                     scanForBeacon@mL:
   609                           	opt callstack 0
   610  00002B                     moveToBeacon@mL:
   611                           	opt callstack 0
   612  00002B                     returnHome@mL:
   613                           	opt callstack 0
   614  00002B                     stopAndDisplay@mL:
   615                           	opt callstack 0
   616                           
   617                           ; 2 bytes @ 0x2A
   618  00002B                     	ds	2
   619  00002D                     scanForBeacon@mR:
   620                           	opt callstack 0
   621  00002D                     moveToBeacon@mR:
   622                           	opt callstack 0
   623  00002D                     returnHome@mR:
   624                           	opt callstack 0
   625  00002D                     stopAndDisplay@mR:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x2C
   629  00002D                     	ds	2
   630  00002F                     scanForBeacon@speed:
   631                           	opt callstack 0
   632  00002F                     moveToBeacon@speed:
   633                           	opt callstack 0
   634  00002F                     returnHome@speed:
   635                           	opt callstack 0
   636  00002F                     stopAndDisplay@speed:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x2E
   640  00002F                     	ds	2
   641  000031                     scanForBeacon@time:
   642                           	opt callstack 0
   643  000031                     moveToBeacon@time:
   644                           	opt callstack 0
   645  000031                     returnHome@time:
   646                           	opt callstack 0
   647  000031                     stopAndDisplay@RFID_buffer:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x30
   651  000031                     	ds	2
   652  000033                     ??_scanForBeacon:
   653  000033                     ??_stopAndDisplay:
   654  000033                     moveToBeacon@exit_flag:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x32
   658  000033                     	ds	2
   659  000035                     stopAndDisplay@i:
   660                           	opt callstack 0
   661                           
   662                           ; 2 bytes @ 0x34
   663  000035                     	ds	2
   664  000037                     scanForBeacon@raw_data:
   665                           	opt callstack 0
   666                           
   667                           ; 2 bytes @ 0x36
   668  000037                     	ds	2
   669  000039                     scanForBeacon@beacon_location:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0x38
   673  000039                     	ds	1
   674  00003A                     scanForBeacon@i:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0x39
   678  00003A                     	ds	2
   679  00003C                     scanForBeacon@smoothed_data:
   680                           	opt callstack 0
   681                           
   682                           ; 2 bytes @ 0x3B
   683  00003C                     	ds	2
   684  00003E                     
   685                           ; 1 bytes @ 0x3D
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 115 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  motorR          9   13[BANK0 ] struct DC_motor
   696 ;;  motorL          9    4[BANK0 ] struct DC_motor
   697 ;;  moving_speed    2    2[BANK0 ] int 
   698 ;;  searching_sp    2    0[BANK0 ] int 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         0      22       0       0
   710 ;;      Temps:          0       0       0       0
   711 ;;      Totals:         0      22       0       0
   712 ;;Total ram usage:       22 bytes
   713 ;; Hardware stack levels required when called:    9
   714 ;; This function calls:
   715 ;;		_LCD_String
   716 ;;		_init_motor_struct
   717 ;;		_moveToBeacon
   718 ;;		_returnHome
   719 ;;		_scanForBeacon
   720 ;;		_setup
   721 ;;		_stopAndDisplay
   722 ;;		_waitForInput
   723 ;; This function is called by:
   724 ;;		Startup code after reset
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text0
   729  00074A                     __ptext0:
   730                           	opt callstack 0
   731  00074A                     _main:
   732                           	opt callstack 22
   733                           
   734                           ;main.c: 118:   setup();
   735                           
   736                           ;incstack = 0
   737  00074A  ECFD  F007         	call	_setup	;wreg free
   738                           
   739                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   740  00074E  0E96               	movlw	low main@motorL
   741  000750  6E22               	movwf	init_motor_struct@mL,c
   742  000752  0E00               	movlw	high main@motorL
   743  000754  6E23               	movwf	init_motor_struct@mL+1,c
   744  000756  0E9F               	movlw	low main@motorR
   745  000758  6E24               	movwf	init_motor_struct@mR,c
   746  00075A  0E00               	movlw	high main@motorR
   747  00075C  6E25               	movwf	init_motor_struct@mR+1,c
   748  00075E  EC22  F004         	call	_init_motor_struct	;wreg free
   749                           
   750                           ;main.c: 125:   int searching_speed = 65;
   751  000762  0E00               	movlw	0
   752  000764  0100               	movlb	0	; () banked
   753  000766  6F93               	movwf	(main@searching_speed+1)& (0+255),b
   754  000768  0E41               	movlw	65
   755  00076A  6F92               	movwf	main@searching_speed& (0+255),b
   756                           
   757                           ; BSR set to: 0
   758                           ;main.c: 126:   int moving_speed = 95;
   759  00076C  0E00               	movlw	0
   760  00076E  6F95               	movwf	(main@moving_speed+1)& (0+255),b
   761  000770  0E5F               	movlw	95
   762  000772  6F94               	movwf	main@moving_speed& (0+255),b
   763                           
   764                           ; BSR set to: 0
   765                           ;main.c: 128:   waitForInput();
   766  000774  EC8E  F006         	call	_waitForInput	;wreg free
   767  000778                     l2683:
   768                           
   769                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   770  000778  5043               	movf	_robot_mode,w,c	;volatile
   771  00077A  A4D8               	btfss	status,2,c
   772  00077C  D013               	goto	l2687
   773                           
   774                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed,
   775  00077E  0E96               	movlw	low main@motorL
   776  000780  6E2B               	movwf	scanForBeacon@mL,c
   777  000782  0E00               	movlw	high main@motorL
   778  000784  6E2C               	movwf	scanForBeacon@mL+1,c
   779  000786  0E9F               	movlw	low main@motorR
   780  000788  6E2D               	movwf	scanForBeacon@mR,c
   781  00078A  0E00               	movlw	high main@motorR
   782  00078C  6E2E               	movwf	scanForBeacon@mR+1,c
   783  00078E  C092  F02F         	movff	main@searching_speed,scanForBeacon@speed
   784  000792  C093  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   785  000796  0E44               	movlw	low _movement_time
   786  000798  6E31               	movwf	scanForBeacon@time,c
   787  00079A  0E00               	movlw	high _movement_time
   788  00079C  6E32               	movwf	scanForBeacon@time+1,c
   789  00079E  EC7C  F002         	call	_scanForBeacon	;wreg free
   790  0007A2  D047               	goto	L3
   791  0007A4                     l2687:
   792  0007A4  0443               	decf	_robot_mode,w,c	;volatile
   793  0007A6  A4D8               	btfss	status,2,c
   794  0007A8  D017               	goto	l2691
   795                           
   796                           ;main.c: 143:       {;main.c: 144:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   797  0007AA  0E96               	movlw	low main@motorL
   798  0007AC  6E2B               	movwf	moveToBeacon@mL,c
   799  0007AE  0E00               	movlw	high main@motorL
   800  0007B0  6E2C               	movwf	moveToBeacon@mL+1,c
   801  0007B2  0E9F               	movlw	low main@motorR
   802  0007B4  6E2D               	movwf	moveToBeacon@mR,c
   803  0007B6  0E00               	movlw	high main@motorR
   804  0007B8  6E2E               	movwf	moveToBeacon@mR+1,c
   805  0007BA  C094  F02F         	movff	main@moving_speed,moveToBeacon@speed
   806  0007BE  C095  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   807  0007C2  0E44               	movlw	low _movement_time
   808  0007C4  6E31               	movwf	moveToBeacon@time,c
   809  0007C6  0E00               	movlw	high _movement_time
   810  0007C8  6E32               	movwf	moveToBeacon@time+1,c
   811  0007CA  0E48               	movlw	low _RFID_flag
   812  0007CC  6E33               	movwf	moveToBeacon@exit_flag,c
   813  0007CE  0E00               	movlw	high _RFID_flag
   814  0007D0  6E34               	movwf	moveToBeacon@exit_flag+1,c
   815  0007D2  EC08  F007         	call	_moveToBeacon	;wreg free
   816  0007D6  D02D               	goto	L3
   817  0007D8                     l2691:
   818  0007D8  0E02               	movlw	2
   819  0007DA  1843               	xorwf	_robot_mode,w,c	;volatile
   820  0007DC  A4D8               	btfss	status,2,c
   821  0007DE  D013               	goto	l2695
   822                           
   823                           ;main.c: 150:       {;main.c: 151:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   824  0007E0  0E96               	movlw	low main@motorL
   825  0007E2  6E2B               	movwf	returnHome@mL,c
   826  0007E4  0E00               	movlw	high main@motorL
   827  0007E6  6E2C               	movwf	returnHome@mL+1,c
   828  0007E8  0E9F               	movlw	low main@motorR
   829  0007EA  6E2D               	movwf	returnHome@mR,c
   830  0007EC  0E00               	movlw	high main@motorR
   831  0007EE  6E2E               	movwf	returnHome@mR+1,c
   832  0007F0  C094  F02F         	movff	main@moving_speed,returnHome@speed
   833  0007F4  C095  F030         	movff	main@moving_speed+1,returnHome@speed+1
   834  0007F8  0E44               	movlw	low _movement_time
   835  0007FA  6E31               	movwf	returnHome@time,c
   836  0007FC  0E00               	movlw	high _movement_time
   837  0007FE  6E32               	movwf	returnHome@time+1,c
   838  000800  ECBB  F007         	call	_returnHome	;wreg free
   839  000804  D016               	goto	L3
   840  000806                     l2695:
   841  000806  0E03               	movlw	3
   842  000808  1843               	xorwf	_robot_mode,w,c	;volatile
   843  00080A  A4D8               	btfss	status,2,c
   844  00080C  D014               	goto	l2699
   845                           
   846                           ;main.c: 157:       {;main.c: 158:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   847  00080E  0E96               	movlw	low main@motorL
   848  000810  6E2B               	movwf	stopAndDisplay@mL,c
   849  000812  0E00               	movlw	high main@motorL
   850  000814  6E2C               	movwf	stopAndDisplay@mL+1,c
   851  000816  0E9F               	movlw	low main@motorR
   852  000818  6E2D               	movwf	stopAndDisplay@mR,c
   853  00081A  0E00               	movlw	high main@motorR
   854  00081C  6E2E               	movwf	stopAndDisplay@mR+1,c
   855  00081E  C094  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   856  000822  C095  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   857  000826  0E86               	movlw	low _RFIDbuf
   858  000828  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   859  00082A  0E00               	movlw	high _RFIDbuf
   860  00082C  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   861  00082E  ECFB  F004         	call	_stopAndDisplay	;wreg free
   862  000832                     L3:
   863  000832  6E43               	movwf	_robot_mode,c	;volatile
   864                           
   865                           ;main.c: 159:       }
   866  000834  D7A1               	goto	l2683
   867  000836                     l2699:
   868                           
   869                           ;main.c: 163:       {;main.c: 164:           LCD_String("Critical Error");
   870  000836  0E7E               	movlw	low STR_1
   871  000838  6E0F               	movwf	LCD_String@string,c
   872  00083A  0E03               	movlw	high STR_1
   873  00083C  6E10               	movwf	LCD_String@string+1,c
   874  00083E  EC38  F007         	call	_LCD_String	;wreg free
   875  000842  D79A               	goto	l2683
   876  000844                     __end_of_main:
   877                           	opt callstack 0
   878                           
   879 ;; *************** function _waitForInput *****************
   880 ;; Defined at:
   881 ;;		line 163 in file "subroutines.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  i               2   18[COMRAM] int 
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   895 ;;      Params:         0       0       0       0
   896 ;;      Locals:         2       0       0       0
   897 ;;      Temps:          2       0       0       0
   898 ;;      Totals:         4       0       0       0
   899 ;;Total ram usage:        4 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    7
   902 ;; This function calls:
   903 ;;		_ClearLCD
   904 ;;		_LCD_String
   905 ;;		_SetLine
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text1
   912  000D1C                     __ptext1:
   913                           	opt callstack 0
   914  000D1C                     _waitForInput:
   915                           	opt callstack 23
   916                           
   917                           ;subroutines.c: 166:     ClearLCD();
   918                           
   919                           ;incstack = 0
   920  000D1C  ECA1  F008         	call	_ClearLCD	;wreg free
   921                           
   922                           ;subroutines.c: 167:     SetLine(1);
   923  000D20  0E01               	movlw	1
   924  000D22  EC4A  F008         	call	_SetLine
   925                           
   926                           ;subroutines.c: 168:     LCD_String("PRESS BUTTON");
   927  000D26  0E8D               	movlw	low STR_12
   928  000D28  6E0F               	movwf	LCD_String@string,c
   929  000D2A  0E03               	movlw	high STR_12
   930  000D2C  6E10               	movwf	LCD_String@string+1,c
   931  000D2E  EC38  F007         	call	_LCD_String	;wreg free
   932                           
   933                           ;subroutines.c: 169:     SetLine(2);
   934  000D32  0E02               	movlw	2
   935  000D34  EC4A  F008         	call	_SetLine
   936                           
   937                           ;subroutines.c: 170:     LCD_String("TO START SEARCH");
   938  000D38  0E11               	movlw	low STR_13
   939  000D3A  6E0F               	movwf	LCD_String@string,c
   940  000D3C  0E03               	movlw	high STR_13
   941  000D3E  6E10               	movwf	LCD_String@string+1,c
   942  000D40  EC38  F007         	call	_LCD_String	;wreg free
   943  000D44                     l345:
   944  000D44  A483               	btfss	3971,2,c	;volatile
   945  000D46  D7FE               	goto	l345
   946                           
   947                           ;subroutines.c: 176:     ClearLCD();
   948  000D48  ECA1  F008         	call	_ClearLCD	;wreg free
   949                           
   950                           ;subroutines.c: 177:     SetLine(1);
   951  000D4C  0E01               	movlw	1
   952  000D4E  EC4A  F008         	call	_SetLine
   953                           
   954                           ;subroutines.c: 178:     LCD_String("STARTING SEARCH");
   955  000D52  0E01               	movlw	low STR_14
   956  000D54  6E0F               	movwf	LCD_String@string,c
   957  000D56  0E03               	movlw	high STR_14
   958  000D58  6E10               	movwf	LCD_String@string+1,c
   959  000D5A  EC38  F007         	call	_LCD_String	;wreg free
   960                           
   961                           ;subroutines.c: 179:     for(int i=0; i<10;i++)
   962  000D5E  0E00               	movlw	0
   963  000D60  6E14               	movwf	waitForInput@i+1,c
   964  000D62  0E00               	movlw	0
   965  000D64  6E13               	movwf	waitForInput@i,c
   966  000D66                     l2557:
   967                           
   968                           ;subroutines.c: 180:     {;subroutines.c: 181:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   969  000D66  0E02               	movlw	2
   970  000D68  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   971  000D6A  0E04               	movlw	4
   972  000D6C  6E11               	movwf	??_waitForInput& (0+255),c
   973  000D6E  0EBA               	movlw	186
   974  000D70                     u1907:
   975  000D70  2EE8               	decfsz	wreg,f,c
   976  000D72  D7FE               	bra	u1907
   977  000D74  2E11               	decfsz	??_waitForInput& (0+255),f,c
   978  000D76  D7FC               	bra	u1907
   979  000D78  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
   980  000D7A  D7FA               	bra	u1907
   981  000D7C  D000               	nop2	
   982                           
   983                           ;subroutines.c: 182:     }
   984  000D7E  4A13               	infsnz	waitForInput@i,f,c
   985  000D80  2A14               	incf	waitForInput@i+1,f,c
   986  000D82  BE14               	btfsc	waitForInput@i+1,7,c
   987  000D84  D7F0               	goto	l2557
   988  000D86  5014               	movf	waitForInput@i+1,w,c
   989  000D88  E104               	bnz	u1760
   990  000D8A  0E0A               	movlw	10
   991  000D8C  5C13               	subwf	waitForInput@i,w,c
   992  000D8E  A0D8               	btfss	status,0,c
   993  000D90  D7EA               	goto	l2557
   994  000D92                     u1760:
   995                           
   996                           ;subroutines.c: 183:     ClearLCD();
   997  000D92  ECA1  F008         	call	_ClearLCD	;wreg free
   998  000D96  0012               	return		;funcret
   999  000D98                     __end_of_waitForInput:
  1000                           	opt callstack 0
  1001                           
  1002 ;; *************** function _stopAndDisplay *****************
  1003 ;; Defined at:
  1004 ;;		line 101 in file "subroutines.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1007 ;;		 -> main@motorL(9), 
  1008 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1009 ;;		 -> main@motorR(9), 
  1010 ;;  speed           2   46[COMRAM] int 
  1011 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
  1012 ;;		 -> RFIDbuf(12), 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  i               2   52[COMRAM] int 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      unsigned char 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1024 ;;      Params:         8       0       0       0
  1025 ;;      Locals:         2       0       0       0
  1026 ;;      Temps:          2       0       0       0
  1027 ;;      Totals:        12       0       0       0
  1028 ;;Total ram usage:       12 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    8
  1031 ;; This function calls:
  1032 ;;		_ClearLCD
  1033 ;;		_LCD_String
  1034 ;;		_check_RFID
  1035 ;;		_display_RFID
  1036 ;;		_stop
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text2
  1043  0009F6                     __ptext2:
  1044                           	opt callstack 0
  1045  0009F6                     _stopAndDisplay:
  1046                           	opt callstack 22
  1047                           
  1048                           ;subroutines.c: 101: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *m
      +                          R, int speed,;subroutines.c: 102:                                 volatile char RFID_buf
      +                          fer[]);subroutines.c: 103: {;subroutines.c: 104:     stop(mL, mR,speed);
  1049                           
  1050                           ;incstack = 0
  1051  0009F6  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1052  0009FA  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1053  0009FE  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1054  000A02  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1055  000A06  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1056  000A0A  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1057  000A0E  EC67  F007         	call	_stop	;wreg free
  1058                           
  1059                           ;subroutines.c: 106:     display_RFID(RFID_buffer);
  1060  000A12  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1061  000A16  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1062  000A1A  ECDD  F007         	call	_display_RFID	;wreg free
  1063                           
  1064                           ;subroutines.c: 107:     check_RFID(RFID_buffer);
  1065  000A1E  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1066  000A22  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1067  000A26  ECD4  F001         	call	_check_RFID	;wreg free
  1068                           
  1069                           ;subroutines.c: 109:     if(RFID_buffer[0] != 0)
  1070  000A2A  C031  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1071  000A2E  C032  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1072  000A32  50DF               	movf	indf2,w,c
  1073  000A34  A4D8               	btfss	status,2,c
  1074  000A36  D026               	goto	l2667
  1075  000A38  D028               	goto	l2669
  1076  000A3A                     l2651:
  1077                           
  1078                           ;subroutines.c: 114:             {;subroutines.c: 115:                 ClearLCD();
  1079  000A3A  ECA1  F008         	call	_ClearLCD	;wreg free
  1080                           
  1081                           ;subroutines.c: 116:                 LCD_String("RESETTING ROBOT");
  1082  000A3E  0E21               	movlw	low STR_6
  1083  000A40  6E0F               	movwf	LCD_String@string,c
  1084  000A42  0E03               	movlw	high STR_6
  1085  000A44  6E10               	movwf	LCD_String@string+1,c
  1086  000A46  EC38  F007         	call	_LCD_String	;wreg free
  1087                           
  1088                           ;subroutines.c: 117:                 for(int i=0; i<10;i++)
  1089  000A4A  0E00               	movlw	0
  1090  000A4C  6E36               	movwf	stopAndDisplay@i+1,c
  1091  000A4E  0E00               	movlw	0
  1092  000A50  6E35               	movwf	stopAndDisplay@i,c
  1093  000A52                     l2661:
  1094                           
  1095                           ;subroutines.c: 118:                 {;subroutines.c: 119:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1096  000A52  0E02               	movlw	2
  1097  000A54  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1098  000A56  0E04               	movlw	4
  1099  000A58  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1100  000A5A  0EBA               	movlw	186
  1101  000A5C                     u1917:
  1102  000A5C  2EE8               	decfsz	wreg,f,c
  1103  000A5E  D7FE               	bra	u1917
  1104  000A60  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1105  000A62  D7FC               	bra	u1917
  1106  000A64  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1107  000A66  D7FA               	bra	u1917
  1108  000A68  D000               	nop2	
  1109                           
  1110                           ;subroutines.c: 120:                 }
  1111  000A6A  4A35               	infsnz	stopAndDisplay@i,f,c
  1112  000A6C  2A36               	incf	stopAndDisplay@i+1,f,c
  1113  000A6E  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1114  000A70  D7F0               	goto	l2661
  1115  000A72  5036               	movf	stopAndDisplay@i+1,w,c
  1116  000A74  E104               	bnz	u1840
  1117  000A76  0E0A               	movlw	10
  1118  000A78  5C35               	subwf	stopAndDisplay@i,w,c
  1119  000A7A  A0D8               	btfss	status,0,c
  1120  000A7C  D7EA               	goto	l2661
  1121  000A7E                     u1840:
  1122                           
  1123                           ;subroutines.c: 121:                 ClearLCD();
  1124  000A7E  ECA1  F008         	call	_ClearLCD	;wreg free
  1125  000A82  00FF               	reset		;# 
  1126  000A84                     l2667:
  1127                           
  1128                           ;subroutines.c: 113:             while(PORTDbits.RD2 == 1)
  1129  000A84  A483               	btfss	3971,2,c	;volatile
  1130  000A86  D7FE               	goto	l2667
  1131  000A88  D7D8               	goto	l2651
  1132  000A8A                     l2669:
  1133                           
  1134                           ;subroutines.c: 127:     {;subroutines.c: 128:         return 0;
  1135  000A8A  0E00               	movlw	0
  1136  000A8C  0012               	return		;funcret
  1137  000A8E                     __end_of_stopAndDisplay:
  1138                           	opt callstack 0
  1139                           
  1140 ;; *************** function _display_RFID *****************
  1141 ;; Defined at:
  1142 ;;		line 107 in file "RFID.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1145 ;;		 -> RFIDbuf(12), 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  i               2   17[COMRAM] int 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1157 ;;      Params:         2       0       0       0
  1158 ;;      Locals:         2       0       0       0
  1159 ;;      Temps:          0       0       0       0
  1160 ;;      Totals:         4       0       0       0
  1161 ;;Total ram usage:        4 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    7
  1164 ;; This function calls:
  1165 ;;		_ClearLCD
  1166 ;;		_SendLCD
  1167 ;;		_SetLine
  1168 ;; This function is called by:
  1169 ;;		_stopAndDisplay
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text3
  1174  000FBA                     __ptext3:
  1175                           	opt callstack 0
  1176  000FBA                     _display_RFID:
  1177                           	opt callstack 22
  1178                           
  1179                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1180                           
  1181                           ;incstack = 0
  1182  000FBA  ECA1  F008         	call	_ClearLCD	;wreg free
  1183                           
  1184                           ;RFID.c: 110:     SetLine(1);
  1185  000FBE  0E01               	movlw	1
  1186  000FC0  EC4A  F008         	call	_SetLine
  1187                           
  1188                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1189  000FC4  0E00               	movlw	0
  1190  000FC6  6E13               	movwf	display_RFID@i+1,c
  1191  000FC8  0E00               	movlw	0
  1192  000FCA  6E12               	movwf	display_RFID@i,c
  1193  000FCC                     l2483:
  1194                           
  1195                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1196  000FCC  0E01               	movlw	1
  1197  000FCE  6E0D               	movwf	SendLCD@type,c
  1198  000FD0  5012               	movf	display_RFID@i,w,c
  1199  000FD2  2410               	addwf	display_RFID@dataBuf,w,c
  1200  000FD4  6ED9               	movwf	fsr2l,c
  1201  000FD6  5013               	movf	display_RFID@i+1,w,c
  1202  000FD8  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1203  000FDA  6EDA               	movwf	fsr2h,c
  1204  000FDC  50DF               	movf	indf2,w,c
  1205  000FDE  EC32  F008         	call	_SendLCD
  1206                           
  1207                           ;RFID.c: 114:     }
  1208  000FE2  4A12               	infsnz	display_RFID@i,f,c
  1209  000FE4  2A13               	incf	display_RFID@i+1,f,c
  1210  000FE6  BE13               	btfsc	display_RFID@i+1,7,c
  1211  000FE8  D7F1               	goto	l2483
  1212  000FEA  5013               	movf	display_RFID@i+1,w,c
  1213  000FEC  E105               	bnz	u1720
  1214  000FEE  0E0A               	movlw	10
  1215  000FF0  5C12               	subwf	display_RFID@i,w,c
  1216  000FF2  B0D8               	btfsc	status,0,c
  1217  000FF4  0012               	return	
  1218  000FF6  D7EA               	goto	l2483
  1219  000FF8                     u1720:
  1220  000FF8  0012               	return		;funcret
  1221  000FFA                     __end_of_display_RFID:
  1222                           	opt callstack 0
  1223                           
  1224 ;; *************** function _check_RFID *****************
  1225 ;; Defined at:
  1226 ;;		line 70 in file "RFID.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1229 ;;		 -> RFIDbuf(12), 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  i               2   38[COMRAM] int 
  1232 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1233 ;;  checksum        1   37[COMRAM] unsigned char 
  1234 ;;  byte5           1   36[COMRAM] unsigned char 
  1235 ;;  byte4           1   35[COMRAM] unsigned char 
  1236 ;;  byte3           1   34[COMRAM] unsigned char 
  1237 ;;  byte2           1   33[COMRAM] unsigned char 
  1238 ;;  byte1           1   32[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1248 ;;      Params:         2       0       0       0
  1249 ;;      Locals:        20       0       0       0
  1250 ;;      Temps:          2       0       0       0
  1251 ;;      Totals:        24       0       0       0
  1252 ;;Total ram usage:       24 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    7
  1255 ;; This function calls:
  1256 ;;		_LCD_String
  1257 ;;		_SetLine
  1258 ;; This function is called by:
  1259 ;;		_stopAndDisplay
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text4
  1264  0003A8                     __ptext4:
  1265                           	opt callstack 0
  1266  0003A8                     _check_RFID:
  1267                           	opt callstack 22
  1268                           
  1269                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1270                           
  1271                           ;incstack = 0
  1272  0003A8  0E00               	movlw	0
  1273  0003AA  6E28               	movwf	check_RFID@i+1,c
  1274  0003AC  0E00               	movlw	0
  1275  0003AE  6E27               	movwf	check_RFID@i,c
  1276  0003B0                     l2449:
  1277                           
  1278                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1279  0003B0  5027               	movf	check_RFID@i,w,c
  1280  0003B2  2411               	addwf	check_RFID@dataBuf,w,c
  1281  0003B4  6ED9               	movwf	fsr2l,c
  1282  0003B6  5028               	movf	check_RFID@i+1,w,c
  1283  0003B8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1284  0003BA  6EDA               	movwf	fsr2h,c
  1285  0003BC  0E2F               	movlw	47
  1286  0003BE  64DF               	cpfsgt	indf2,c
  1287  0003C0  D018               	goto	l2455
  1288  0003C2  5027               	movf	check_RFID@i,w,c
  1289  0003C4  2411               	addwf	check_RFID@dataBuf,w,c
  1290  0003C6  6ED9               	movwf	fsr2l,c
  1291  0003C8  5028               	movf	check_RFID@i+1,w,c
  1292  0003CA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1293  0003CC  6EDA               	movwf	fsr2h,c
  1294  0003CE  0E3A               	movlw	58
  1295  0003D0  60DF               	cpfslt	indf2,c
  1296  0003D2  D00F               	goto	l2455
  1297                           
  1298                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1299  0003D4  0E15               	movlw	low check_RFID@hexBuf
  1300  0003D6  2427               	addwf	check_RFID@i,w,c
  1301  0003D8  6ED9               	movwf	fsr2l,c
  1302  0003DA  0E00               	movlw	high check_RFID@hexBuf
  1303  0003DC  2028               	addwfc	check_RFID@i+1,w,c
  1304  0003DE  6EDA               	movwf	fsr2h,c
  1305  0003E0  5027               	movf	check_RFID@i,w,c
  1306  0003E2  2411               	addwf	check_RFID@dataBuf,w,c
  1307  0003E4  6EE1               	movwf	fsr1l,c
  1308  0003E6  5028               	movf	check_RFID@i+1,w,c
  1309  0003E8  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1310  0003EA  6EE2               	movwf	fsr1h,c
  1311  0003EC  50E7               	movf	indf1,w,c
  1312  0003EE  0FD0               	addlw	208
  1313  0003F0  D020               	goto	L4
  1314  0003F2                     l2455:
  1315  0003F2  5027               	movf	check_RFID@i,w,c
  1316  0003F4  2411               	addwf	check_RFID@dataBuf,w,c
  1317  0003F6  6ED9               	movwf	fsr2l,c
  1318  0003F8  5028               	movf	check_RFID@i+1,w,c
  1319  0003FA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1320  0003FC  6EDA               	movwf	fsr2h,c
  1321  0003FE  0E40               	movlw	64
  1322  000400  64DF               	cpfsgt	indf2,c
  1323  000402  D018               	goto	l2461
  1324  000404  5027               	movf	check_RFID@i,w,c
  1325  000406  2411               	addwf	check_RFID@dataBuf,w,c
  1326  000408  6ED9               	movwf	fsr2l,c
  1327  00040A  5028               	movf	check_RFID@i+1,w,c
  1328  00040C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1329  00040E  6EDA               	movwf	fsr2h,c
  1330  000410  0E47               	movlw	71
  1331  000412  60DF               	cpfslt	indf2,c
  1332  000414  D00F               	goto	l2461
  1333                           
  1334                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1335  000416  0E15               	movlw	low check_RFID@hexBuf
  1336  000418  2427               	addwf	check_RFID@i,w,c
  1337  00041A  6ED9               	movwf	fsr2l,c
  1338  00041C  0E00               	movlw	high check_RFID@hexBuf
  1339  00041E  2028               	addwfc	check_RFID@i+1,w,c
  1340  000420  6EDA               	movwf	fsr2h,c
  1341  000422  5027               	movf	check_RFID@i,w,c
  1342  000424  2411               	addwf	check_RFID@dataBuf,w,c
  1343  000426  6EE1               	movwf	fsr1l,c
  1344  000428  5028               	movf	check_RFID@i+1,w,c
  1345  00042A  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1346  00042C  6EE2               	movwf	fsr1h,c
  1347  00042E  50E7               	movf	indf1,w,c
  1348  000430  0FC9               	addlw	201
  1349  000432                     L4:
  1350  000432  6EDF               	movwf	indf2,c
  1351  000434                     l2461:
  1352                           
  1353                           ;RFID.c: 84:     }
  1354  000434  4A27               	infsnz	check_RFID@i,f,c
  1355  000436  2A28               	incf	check_RFID@i+1,f,c
  1356  000438  BE28               	btfsc	check_RFID@i+1,7,c
  1357  00043A  D7BA               	goto	l2449
  1358  00043C  5028               	movf	check_RFID@i+1,w,c
  1359  00043E  E104               	bnz	u1560
  1360  000440  0E0C               	movlw	12
  1361  000442  5C27               	subwf	check_RFID@i,w,c
  1362  000444  A0D8               	btfss	status,0,c
  1363  000446  D7B4               	goto	l2449
  1364  000448                     u1560:
  1365                           
  1366                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1367  000448  5015               	movf	check_RFID@hexBuf,w,c
  1368  00044A  A4D8               	btfss	status,2,c
  1369  00044C  D002               	goto	u1570
  1370  00044E  0E01               	movlw	1
  1371  000450  D001               	goto	u1580
  1372  000452                     u1570:
  1373  000452  0E00               	movlw	0
  1374  000454                     u1580:
  1375  000454  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1376  000456  6E21               	movwf	check_RFID@byte1,c
  1377                           
  1378                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1379  000458  5017               	movf	check_RFID@hexBuf+2,w,c
  1380  00045A  A4D8               	btfss	status,2,c
  1381  00045C  D002               	goto	u1590
  1382  00045E  0E01               	movlw	1
  1383  000460  D001               	goto	u1600
  1384  000462                     u1590:
  1385  000462  0E00               	movlw	0
  1386  000464                     u1600:
  1387  000464  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1388  000466  6E22               	movwf	check_RFID@byte2,c
  1389                           
  1390                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1391  000468  5019               	movf	check_RFID@hexBuf+4,w,c
  1392  00046A  A4D8               	btfss	status,2,c
  1393  00046C  D002               	goto	u1610
  1394  00046E  0E01               	movlw	1
  1395  000470  D001               	goto	u1620
  1396  000472                     u1610:
  1397  000472  0E00               	movlw	0
  1398  000474                     u1620:
  1399  000474  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1400  000476  6E23               	movwf	check_RFID@byte3,c
  1401                           
  1402                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1403  000478  501B               	movf	check_RFID@hexBuf+6,w,c
  1404  00047A  A4D8               	btfss	status,2,c
  1405  00047C  D002               	goto	u1630
  1406  00047E  0E01               	movlw	1
  1407  000480  D001               	goto	u1640
  1408  000482                     u1630:
  1409  000482  0E00               	movlw	0
  1410  000484                     u1640:
  1411  000484  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1412  000486  6E24               	movwf	check_RFID@byte4,c
  1413                           
  1414                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1415  000488  501D               	movf	check_RFID@hexBuf+8,w,c
  1416  00048A  A4D8               	btfss	status,2,c
  1417  00048C  D002               	goto	u1650
  1418  00048E  0E01               	movlw	1
  1419  000490  D001               	goto	u1660
  1420  000492                     u1650:
  1421  000492  0E00               	movlw	0
  1422  000494                     u1660:
  1423  000494  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1424  000496  6E25               	movwf	check_RFID@byte5,c
  1425                           
  1426                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1427  000498  501F               	movf	check_RFID@hexBuf+10,w,c
  1428  00049A  A4D8               	btfss	status,2,c
  1429  00049C  D002               	goto	u1670
  1430  00049E  0E01               	movlw	1
  1431  0004A0  D001               	goto	u1680
  1432  0004A2                     u1670:
  1433  0004A2  0E00               	movlw	0
  1434  0004A4                     u1680:
  1435  0004A4  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1436  0004A6  6E26               	movwf	check_RFID@checksum,c
  1437                           
  1438                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1439  0004A8  5021               	movf	check_RFID@byte1,w,c
  1440  0004AA  1822               	xorwf	check_RFID@byte2,w,c
  1441  0004AC  1823               	xorwf	check_RFID@byte3,w,c
  1442  0004AE  1824               	xorwf	check_RFID@byte4,w,c
  1443  0004B0  6E13               	movwf	??_check_RFID& (0+255),c
  1444  0004B2  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1445  0004B4  5026               	movf	check_RFID@checksum,w,c
  1446  0004B6  1825               	xorwf	check_RFID@byte5,w,c
  1447  0004B8  A4D8               	btfss	status,2,c
  1448  0004BA  D002               	goto	u1690
  1449  0004BC  0E01               	movlw	1
  1450  0004BE  D001               	goto	u1700
  1451  0004C0                     u1690:
  1452  0004C0  0E00               	movlw	0
  1453  0004C2                     u1700:
  1454  0004C2  1A13               	xorwf	??_check_RFID,f,c
  1455  0004C4  0E00               	movlw	0
  1456  0004C6  1A14               	xorwf	??_check_RFID+1,f,c
  1457  0004C8  5013               	movf	??_check_RFID,w,c
  1458  0004CA  1014               	iorwf	??_check_RFID+1,w,c
  1459  0004CC  B4D8               	btfsc	status,2,c
  1460  0004CE  D00A               	goto	l2471
  1461                           
  1462                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1463  0004D0  0E02               	movlw	2
  1464  0004D2  EC4A  F008         	call	_SetLine
  1465                           
  1466                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1467  0004D6  0E41               	movlw	low STR_2
  1468  0004D8  6E0F               	movwf	LCD_String@string,c
  1469  0004DA  0E03               	movlw	high STR_2
  1470  0004DC  6E10               	movwf	LCD_String@string+1,c
  1471  0004DE  EC38  F007         	call	_LCD_String	;wreg free
  1472                           
  1473                           ;RFID.c: 99:     }
  1474  0004E2  0012               	return	
  1475  0004E4                     l2471:
  1476                           
  1477                           ;RFID.c: 102:         SetLine(2);
  1478  0004E4  0E02               	movlw	2
  1479  0004E6  EC4A  F008         	call	_SetLine
  1480                           
  1481                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1482  0004EA  0E31               	movlw	low STR_3
  1483  0004EC  6E0F               	movwf	LCD_String@string,c
  1484  0004EE  0E03               	movlw	high STR_3
  1485  0004F0  6E10               	movwf	LCD_String@string+1,c
  1486  0004F2  EC38  F007         	call	_LCD_String	;wreg free
  1487  0004F6  0012               	return		;funcret
  1488  0004F8                     __end_of_check_RFID:
  1489                           	opt callstack 0
  1490                           
  1491 ;; *************** function _setup *****************
  1492 ;; Defined at:
  1493 ;;		line 45 in file "main.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1507 ;;      Params:         0       0       0       0
  1508 ;;      Locals:         0       0       0       0
  1509 ;;      Temps:          0       0       0       0
  1510 ;;      Totals:         0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    7
  1514 ;; This function calls:
  1515 ;;		_initPWM
  1516 ;;		_init_LCD
  1517 ;;		_init_RFID
  1518 ;;		_init_sensor
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text5
  1525  000FFA                     __ptext5:
  1526                           	opt callstack 0
  1527  000FFA                     _setup:
  1528                           	opt callstack 23
  1529                           
  1530                           ;main.c: 48:     OSCCON = 0x72;
  1531                           
  1532                           ;incstack = 0
  1533  000FFA  0E72               	movlw	114
  1534  000FFC  6ED3               	movwf	4051,c	;volatile
  1535  000FFE                     l55:
  1536  000FFE  A4D3               	btfss	4051,2,c	;volatile
  1537  001000  D7FE               	goto	l55
  1538                           
  1539                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1540  001002  8EF2               	bsf	4082,7,c	;volatile
  1541                           
  1542                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1543  001004  8CF2               	bsf	4082,6,c	;volatile
  1544                           
  1545                           ;main.c: 52:     RCONbits.IPEN=1;
  1546  001006  8ED0               	bsf	4048,7,c	;volatile
  1547                           
  1548                           ;main.c: 55:     init_LCD();
  1549  001008  EC97  F004         	call	_init_LCD	;wreg free
  1550                           
  1551                           ;main.c: 56:     init_RFID();
  1552  00100C  EC87  F008         	call	_init_RFID	;wreg free
  1553                           
  1554                           ;main.c: 57:     init_sensor();
  1555  001010  ECAE  F008         	call	_init_sensor	;wreg free
  1556                           
  1557                           ;main.c: 58:     initPWM(199);
  1558  001014  0E00               	movlw	0
  1559  001016  6E0C               	movwf	initPWM@PWMperiod+1,c
  1560  001018  0EC7               	movlw	199
  1561  00101A  6E0B               	movwf	initPWM@PWMperiod,c
  1562  00101C  EC94  F008         	call	_initPWM	;wreg free
  1563                           
  1564                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1565  001020  9093               	bcf	3987,0,c	;volatile
  1566                           
  1567                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1568  001022  9493               	bcf	3987,2,c	;volatile
  1569                           
  1570                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1571  001024  8495               	bsf	3989,2,c	;volatile
  1572                           
  1573                           ;main.c: 66:     T0CON = 0b11000111;
  1574  001026  0EC7               	movlw	199
  1575  001028  6ED5               	movwf	4053,c	;volatile
  1576                           
  1577                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1578  00102A  8AF2               	bsf	4082,5,c	;volatile
  1579                           
  1580                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1581  00102C  94F1               	bcf	4081,2,c	;volatile
  1582  00102E  0012               	return		;funcret
  1583  001030                     __end_of_setup:
  1584                           	opt callstack 0
  1585                           
  1586 ;; *************** function _init_sensor *****************
  1587 ;; Defined at:
  1588 ;;		line 17 in file "signal_processing.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  throwaway       2    0        unsigned int 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg, status,2, status,0
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1602 ;;      Params:         0       0       0       0
  1603 ;;      Locals:         2       0       0       0
  1604 ;;      Temps:          0       0       0       0
  1605 ;;      Totals:         2       0       0       0
  1606 ;;Total ram usage:        2 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; Hardware stack levels required when called:    3
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_setup
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text6
  1617  00115C                     __ptext6:
  1618                           	opt callstack 0
  1619  00115C                     _init_sensor:
  1620                           	opt callstack 26
  1621                           
  1622                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1623                           
  1624                           ;incstack = 0
  1625  00115C  0E01               	movlw	1
  1626  00115E  6EB7               	movwf	4023,c	;volatile
  1627                           
  1628                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1629  001160  8492               	bsf	3986,2,c	;volatile
  1630                           
  1631                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1632  001162  0E00               	movlw	0
  1633  001164  6EB8               	movwf	4024,c	;volatile
  1634                           
  1635                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1636  001166  0E00               	movlw	0
  1637  001168  6EB9               	movwf	4025,c	;volatile
  1638                           
  1639                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1640  00116A  0E47               	movlw	71
  1641  00116C  6E63               	movwf	3939,c	;volatile
  1642  00116E  5069               	movf	3945,w,c	;volatile
  1643  001170  5068               	movf	3944,w,c	;volatile
  1644  001172  0012               	return		;funcret
  1645  001174                     __end_of_init_sensor:
  1646                           	opt callstack 0
  1647                           
  1648 ;; *************** function _init_RFID *****************
  1649 ;; Defined at:
  1650 ;;		line 13 in file "RFID.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       0       0       0
  1665 ;;      Locals:         0       0       0       0
  1666 ;;      Temps:          0       0       0       0
  1667 ;;      Totals:         0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    3
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_setup
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text7
  1679  00110E                     __ptext7:
  1680                           	opt callstack 0
  1681  00110E                     _init_RFID:
  1682                           	opt callstack 26
  1683                           
  1684                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1685                           
  1686                           ;incstack = 0
  1687  00110E  8E94               	bsf	3988,7,c	;volatile
  1688                           
  1689                           ;RFID.c: 19:     SPBRG = 203;
  1690  001110  0ECB               	movlw	203
  1691  001112  6EAF               	movwf	4015,c	;volatile
  1692                           
  1693                           ;RFID.c: 20:     SPBRGH = 0;
  1694  001114  0E00               	movlw	0
  1695  001116  6EB0               	movwf	4016,c	;volatile
  1696                           
  1697                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1698  001118  86AA               	bsf	4010,3,c	;volatile
  1699                           
  1700                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1701  00111A  84AC               	bsf	4012,2,c	;volatile
  1702                           
  1703                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1704  00111C  88AB               	bsf	4011,4,c	;volatile
  1705                           
  1706                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1707  00111E  8EAB               	bsf	4011,7,c	;volatile
  1708                           
  1709                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1710  001120  8AAC               	bsf	4012,5,c	;volatile
  1711                           
  1712                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1713  001122  8A9D               	bsf	3997,5,c	;volatile
  1714                           
  1715                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1716  001124  8A9F               	bsf	3999,5,c	;volatile
  1717  001126  0012               	return		;funcret
  1718  001128                     __end_of_init_RFID:
  1719                           	opt callstack 0
  1720                           
  1721 ;; *************** function _init_LCD *****************
  1722 ;; Defined at:
  1723 ;;		line 56 in file "LCDIO.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1737 ;;      Params:         0       0       0       0
  1738 ;;      Locals:         0       0       0       0
  1739 ;;      Temps:          1       0       0       0
  1740 ;;      Totals:         1       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    6
  1744 ;; This function calls:
  1745 ;;		_LCDout
  1746 ;;		_SendLCD
  1747 ;; This function is called by:
  1748 ;;		_setup
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text8
  1753  00092E                     __ptext8:
  1754                           	opt callstack 0
  1755  00092E                     _init_LCD:
  1756                           	opt callstack 23
  1757                           
  1758                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1759                           
  1760                           ;incstack = 0
  1761  00092E  9094               	bcf	3988,0,c	;volatile
  1762                           
  1763                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1764  000930  9E92               	bcf	3986,7,c	;volatile
  1765                           
  1766                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1767  000932  9694               	bcf	3988,3,c	;volatile
  1768                           
  1769                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1770  000934  9095               	bcf	3989,0,c	;volatile
  1771                           
  1772                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1773  000936  9295               	bcf	3989,1,c	;volatile
  1774                           
  1775                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1776  000938  9C92               	bcf	3986,6,c	;volatile
  1777                           
  1778                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1779  00093A  908C               	bcf	3980,0,c	;volatile
  1780                           
  1781                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1782  00093C  928C               	bcf	3980,1,c	;volatile
  1783                           
  1784                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1785  00093E  968B               	bcf	3979,3,c	;volatile
  1786                           
  1787                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1788  000940  908B               	bcf	3979,0,c	;volatile
  1789                           
  1790                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1791  000942  9C89               	bcf	3977,6,c	;volatile
  1792                           
  1793                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1794  000944  9E89               	bcf	3977,7,c	;volatile
  1795                           
  1796                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1797  000946  0E27               	movlw	39
  1798  000948  6E0F               	movwf	??_init_LCD& (0+255),c
  1799  00094A  0EF5               	movlw	245
  1800  00094C                     u1927:
  1801  00094C  2EE8               	decfsz	wreg,f,c
  1802  00094E  D7FE               	bra	u1927
  1803  000950  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1804  000952  D7FC               	bra	u1927
  1805  000954  F000               	nop	
  1806                           
  1807                           ;LCDIO.c: 76:  LCDout(0b0011);
  1808  000956  0E03               	movlw	3
  1809  000958  ECCC  F006         	call	_LCDout
  1810                           
  1811                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1812  00095C  0E0D               	movlw	13
  1813  00095E  6E0F               	movwf	??_init_LCD& (0+255),c
  1814  000960  0EFC               	movlw	252
  1815  000962                     u1937:
  1816  000962  2EE8               	decfsz	wreg,f,c
  1817  000964  D7FE               	bra	u1937
  1818  000966  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1819  000968  D7FC               	bra	u1937
  1820                           
  1821                           ;LCDIO.c: 78:  LCDout(0b0011);
  1822  00096A  0E03               	movlw	3
  1823  00096C  ECCC  F006         	call	_LCDout
  1824                           
  1825                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1826  000970  0E85               	movlw	133
  1827  000972                     u1947:
  1828  000972  2EE8               	decfsz	wreg,f,c
  1829  000974  D7FE               	bra	u1947
  1830  000976  F000               	nop	
  1831                           
  1832                           ;LCDIO.c: 80:  LCDout(0b0011);
  1833  000978  0E03               	movlw	3
  1834  00097A  ECCC  F006         	call	_LCDout
  1835                           
  1836                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1837  00097E  0E21               	movlw	33
  1838  000980                     u1957:
  1839  000980  2EE8               	decfsz	wreg,f,c
  1840  000982  D7FE               	bra	u1957
  1841  000984  F000               	nop	
  1842                           
  1843                           ;LCDIO.c: 82:  LCDout(0b0010);
  1844  000986  0E02               	movlw	2
  1845  000988  ECCC  F006         	call	_LCDout
  1846                           
  1847                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1848  00098C  0E21               	movlw	33
  1849  00098E                     u1967:
  1850  00098E  2EE8               	decfsz	wreg,f,c
  1851  000990  D7FE               	bra	u1967
  1852  000992  F000               	nop	
  1853                           
  1854                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1855  000994  0E00               	movlw	0
  1856  000996  6E0D               	movwf	SendLCD@type,c
  1857  000998  0E28               	movlw	40
  1858  00099A  EC32  F008         	call	_SendLCD
  1859                           
  1860                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1861  00099E  0E21               	movlw	33
  1862  0009A0                     u1977:
  1863  0009A0  2EE8               	decfsz	wreg,f,c
  1864  0009A2  D7FE               	bra	u1977
  1865  0009A4  F000               	nop	
  1866                           
  1867                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1868  0009A6  0E00               	movlw	0
  1869  0009A8  6E0D               	movwf	SendLCD@type,c
  1870  0009AA  0E08               	movlw	8
  1871  0009AC  EC32  F008         	call	_SendLCD
  1872                           
  1873                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1874  0009B0  0E21               	movlw	33
  1875  0009B2                     u1987:
  1876  0009B2  2EE8               	decfsz	wreg,f,c
  1877  0009B4  D7FE               	bra	u1987
  1878  0009B6  F000               	nop	
  1879                           
  1880                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1881  0009B8  0E00               	movlw	0
  1882  0009BA  6E0D               	movwf	SendLCD@type,c
  1883  0009BC  0E01               	movlw	1
  1884  0009BE  EC32  F008         	call	_SendLCD
  1885                           
  1886                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1887  0009C2  0E0D               	movlw	13
  1888  0009C4  6E0F               	movwf	??_init_LCD& (0+255),c
  1889  0009C6  0EFC               	movlw	252
  1890  0009C8                     u1997:
  1891  0009C8  2EE8               	decfsz	wreg,f,c
  1892  0009CA  D7FE               	bra	u1997
  1893  0009CC  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1894  0009CE  D7FC               	bra	u1997
  1895                           
  1896                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1897  0009D0  0E00               	movlw	0
  1898  0009D2  6E0D               	movwf	SendLCD@type,c
  1899  0009D4  0E06               	movlw	6
  1900  0009D6  EC32  F008         	call	_SendLCD
  1901                           
  1902                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1903  0009DA  0E21               	movlw	33
  1904  0009DC                     u2007:
  1905  0009DC  2EE8               	decfsz	wreg,f,c
  1906  0009DE  D7FE               	bra	u2007
  1907  0009E0  F000               	nop	
  1908                           
  1909                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1910  0009E2  0E00               	movlw	0
  1911  0009E4  6E0D               	movwf	SendLCD@type,c
  1912  0009E6  0E0C               	movlw	12
  1913  0009E8  EC32  F008         	call	_SendLCD
  1914                           
  1915                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1916  0009EC  0E21               	movlw	33
  1917  0009EE                     u2017:
  1918  0009EE  2EE8               	decfsz	wreg,f,c
  1919  0009F0  D7FE               	bra	u2017
  1920  0009F2  F000               	nop	
  1921  0009F4  0012               	return		;funcret
  1922  0009F6                     __end_of_init_LCD:
  1923                           	opt callstack 0
  1924                           
  1925 ;; *************** function _initPWM *****************
  1926 ;; Defined at:
  1927 ;;		line 5 in file "dc_motor.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  PWMperiod       2   10[COMRAM] int 
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;		None
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		wreg, status,2
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1941 ;;      Params:         2       0       0       0
  1942 ;;      Locals:         0       0       0       0
  1943 ;;      Temps:          0       0       0       0
  1944 ;;      Totals:         2       0       0       0
  1945 ;;Total ram usage:        2 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    3
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_setup
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text9
  1956  001128                     __ptext9:
  1957                           	opt callstack 0
  1958  001128                     _initPWM:
  1959                           	opt callstack 26
  1960                           
  1961                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1962                           
  1963                           ;incstack = 0
  1964  001128  0E00               	movlw	0
  1965  00112A  6E7F               	movwf	3967,c	;volatile
  1966                           
  1967                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1968  00112C  0E80               	movlw	128
  1969  00112E  6E7E               	movwf	3966,c	;volatile
  1970                           
  1971                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1972  001130  0E6F               	movlw	111
  1973  001132  6E6F               	movwf	3951,c	;volatile
  1974                           
  1975                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1976  001134  0E00               	movlw	0
  1977  001136  6E6E               	movwf	3950,c	;volatile
  1978                           
  1979                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1980  001138  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1981                           
  1982                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1983  00113C  500C               	movf	initPWM@PWMperiod+1,w,c
  1984  00113E  6E7A               	movwf	3962,c	;volatile
  1985  001140  0012               	return		;funcret
  1986  001142                     __end_of_initPWM:
  1987                           	opt callstack 0
  1988                           
  1989 ;; *************** function _scanForBeacon *****************
  1990 ;; Defined at:
  1991 ;;		line 18 in file "subroutines.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1994 ;;		 -> main@motorL(9), 
  1995 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1996 ;;		 -> main@motorR(9), 
  1997 ;;  speed           2   46[COMRAM] int 
  1998 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  1999 ;;		 -> movement_time(4), 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  i               2   57[COMRAM] int 
  2002 ;;  raw_data        2   54[COMRAM] unsigned int 
  2003 ;;  beacon_locat    1   56[COMRAM] unsigned char 
  2004 ;;  smoothed_dat    2   59[COMRAM] unsigned int 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      unsigned char 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2014 ;;      Params:         8       0       0       0
  2015 ;;      Locals:         7       0       0       0
  2016 ;;      Temps:          4       0       0       0
  2017 ;;      Totals:        19       0       0       0
  2018 ;;Total ram usage:       19 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    7
  2021 ;; This function calls:
  2022 ;;		_ClearLCD
  2023 ;;		_LCD_String
  2024 ;;		_SetLine
  2025 ;;		_classify_data
  2026 ;;		_stop
  2027 ;;		_turnRight
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text10
  2034  0004F8                     __ptext10:
  2035                           	opt callstack 0
  2036  0004F8                     _scanForBeacon:
  2037                           	opt callstack 23
  2038                           
  2039                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 19:                             volatile unsigned long *time
      +                          );subroutines.c: 20: {;subroutines.c: 21:     turnRight(mL,mR,speed);
  2040                           
  2041                           ;incstack = 0
  2042  0004F8  C02B  F022         	movff	scanForBeacon@mL,turnRight@mL
  2043  0004FC  C02C  F023         	movff	scanForBeacon@mL+1,turnRight@mL+1
  2044  000500  C02D  F024         	movff	scanForBeacon@mR,turnRight@mR
  2045  000504  C02E  F025         	movff	scanForBeacon@mR+1,turnRight@mR+1
  2046  000508  C02F  F026         	movff	scanForBeacon@speed,turnRight@max_power
  2047  00050C  C030  F027         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  2048  000510  ECCB  F005         	call	_turnRight	;wreg free
  2049                           
  2050                           ;subroutines.c: 22:     ClearLCD();
  2051  000514  ECA1  F008         	call	_ClearLCD	;wreg free
  2052                           
  2053                           ;subroutines.c: 23:     LCD_String("SEARCHING");
  2054  000518  0E9A               	movlw	low STR_4
  2055  00051A  6E0F               	movwf	LCD_String@string,c
  2056  00051C  0E03               	movlw	high STR_4
  2057  00051E  6E10               	movwf	LCD_String@string+1,c
  2058  000520  EC38  F007         	call	_LCD_String	;wreg free
  2059                           
  2060                           ;subroutines.c: 26:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  2061  000524  5068               	movf	3944,w,c	;volatile
  2062  000526  CF69 F033          	movff	3945,??_scanForBeacon	;volatile
  2063  00052A  6A34               	clrf	(??_scanForBeacon+1)& (0+255),c
  2064  00052C  C033  F034         	movff	??_scanForBeacon,??_scanForBeacon+1
  2065  000530  6A33               	clrf	??_scanForBeacon,c
  2066  000532  1033               	iorwf	??_scanForBeacon,w,c
  2067  000534  6E3C               	movwf	scanForBeacon@smoothed_data,c
  2068  000536  5034               	movf	??_scanForBeacon+1,w,c
  2069  000538  6E3D               	movwf	scanForBeacon@smoothed_data+1,c
  2070  00053A                     l2571:
  2071                           
  2072                           ;subroutines.c: 30:     {;subroutines.c: 32:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2073  00053A  5068               	movf	3944,w,c	;volatile
  2074  00053C  CF69 F033          	movff	3945,??_scanForBeacon	;volatile
  2075  000540  6A34               	clrf	(??_scanForBeacon+1)& (0+255),c
  2076  000542  C033  F034         	movff	??_scanForBeacon,??_scanForBeacon+1
  2077  000546  6A33               	clrf	??_scanForBeacon,c
  2078  000548  1033               	iorwf	??_scanForBeacon,w,c
  2079  00054A  6E37               	movwf	scanForBeacon@raw_data,c
  2080  00054C  5034               	movf	??_scanForBeacon+1,w,c
  2081  00054E  6E38               	movwf	scanForBeacon@raw_data+1,c
  2082                           
  2083                           ;subroutines.c: 35:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  2084  000550  C037  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2085  000554  C038  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2086  000558  0E3C               	movlw	low scanForBeacon@smoothed_data
  2087  00055A  6E0D               	movwf	classify_data@smoothed,c
  2088  00055C  0E00               	movlw	high scanForBeacon@smoothed_data
  2089  00055E  6E0E               	movwf	classify_data@smoothed+1,c
  2090  000560  EC47  F005         	call	_classify_data	;wreg free
  2091  000564  6E39               	movwf	scanForBeacon@beacon_location,c
  2092                           
  2093                           ;subroutines.c: 38:         if(beacon_location == 1)
  2094  000566  0439               	decf	scanForBeacon@beacon_location,w,c
  2095  000568  A4D8               	btfss	status,2,c
  2096  00056A  D00A               	goto	l2585
  2097                           
  2098                           ;subroutines.c: 39:         {;subroutines.c: 40:             *time = 0;
  2099  00056C  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2100  000570  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2101  000574  6ADE               	clrf	postinc2,c
  2102  000576  6ADE               	clrf	postinc2,c
  2103  000578  6ADE               	clrf	postinc2,c
  2104  00057A  6ADD               	clrf	postdec2,c
  2105                           
  2106                           ;subroutines.c: 41:             return 1;
  2107  00057C  0E01               	movlw	1
  2108  00057E  0012               	return	
  2109  000580                     l2585:
  2110  000580  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2111  000584  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2112  000588  0E03               	movlw	3
  2113  00058A  50DB               	movf	plusw2,w,c
  2114  00058C  E109               	bnz	u1780
  2115  00058E  0E02               	movlw	2
  2116  000590  50DB               	movf	plusw2,w,c
  2117  000592  E106               	bnz	u1780
  2118  000594  0E62               	movlw	98
  2119  000596  5CDE               	subwf	postinc2,w,c
  2120  000598  0E02               	movlw	2
  2121  00059A  58DE               	subwfb	postinc2,w,c
  2122  00059C  A0D8               	btfss	status,0,c
  2123  00059E  D7CD               	goto	l2571
  2124  0005A0                     u1780:
  2125                           
  2126                           ;subroutines.c: 45:         {;subroutines.c: 46:             *time = 0;
  2127  0005A0  C031  FFD9         	movff	scanForBeacon@time,fsr2l
  2128  0005A4  C032  FFDA         	movff	scanForBeacon@time+1,fsr2h
  2129  0005A8  6ADE               	clrf	postinc2,c
  2130  0005AA  6ADE               	clrf	postinc2,c
  2131  0005AC  6ADE               	clrf	postinc2,c
  2132  0005AE  6ADD               	clrf	postdec2,c
  2133                           
  2134                           ;subroutines.c: 47:             ClearLCD();
  2135  0005B0  ECA1  F008         	call	_ClearLCD	;wreg free
  2136                           
  2137                           ;subroutines.c: 48:             LCD_String("BOMB NOT FOUND");
  2138  0005B4  0E60               	movlw	low STR_5
  2139  0005B6  6E0F               	movwf	LCD_String@string,c
  2140  0005B8  0E03               	movlw	high STR_5
  2141  0005BA  6E10               	movwf	LCD_String@string+1,c
  2142  0005BC  EC38  F007         	call	_LCD_String	;wreg free
  2143                           
  2144                           ;subroutines.c: 49:             SetLine(2);
  2145  0005C0  0E02               	movlw	2
  2146  0005C2  EC4A  F008         	call	_SetLine
  2147                           
  2148                           ;subroutines.c: 50:             LCD_String("RESETTING ROBOT");
  2149  0005C6  0E21               	movlw	low STR_6
  2150  0005C8  6E0F               	movwf	LCD_String@string,c
  2151  0005CA  0E03               	movlw	high STR_6
  2152  0005CC  6E10               	movwf	LCD_String@string+1,c
  2153  0005CE  EC38  F007         	call	_LCD_String	;wreg free
  2154                           
  2155                           ;subroutines.c: 51:             stop(mL,mR,speed);
  2156  0005D2  C02B  F022         	movff	scanForBeacon@mL,stop@mL
  2157  0005D6  C02C  F023         	movff	scanForBeacon@mL+1,stop@mL+1
  2158  0005DA  C02D  F024         	movff	scanForBeacon@mR,stop@mR
  2159  0005DE  C02E  F025         	movff	scanForBeacon@mR+1,stop@mR+1
  2160  0005E2  C02F  F026         	movff	scanForBeacon@speed,stop@initial_speed
  2161  0005E6  C030  F027         	movff	scanForBeacon@speed+1,stop@initial_speed+1
  2162  0005EA  EC67  F007         	call	_stop	;wreg free
  2163                           
  2164                           ;subroutines.c: 52:             for(int i=0; i<20;i++)
  2165  0005EE  0E00               	movlw	0
  2166  0005F0  6E3B               	movwf	scanForBeacon@i+1,c
  2167  0005F2  0E00               	movlw	0
  2168  0005F4  6E3A               	movwf	scanForBeacon@i,c
  2169  0005F6                     l2605:
  2170                           
  2171                           ;subroutines.c: 53:             {;subroutines.c: 54:                 _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
  2172  0005F6  0E02               	movlw	2
  2173  0005F8  6E34               	movwf	(??_scanForBeacon+1)& (0+255),c
  2174  0005FA  0E04               	movlw	4
  2175  0005FC  6E33               	movwf	??_scanForBeacon& (0+255),c
  2176  0005FE  0EBA               	movlw	186
  2177  000600                     u2027:
  2178  000600  2EE8               	decfsz	wreg,f,c
  2179  000602  D7FE               	bra	u2027
  2180  000604  2E33               	decfsz	??_scanForBeacon& (0+255),f,c
  2181  000606  D7FC               	bra	u2027
  2182  000608  2E34               	decfsz	(??_scanForBeacon+1)& (0+255),f,c
  2183  00060A  D7FA               	bra	u2027
  2184  00060C  D000               	nop2	
  2185                           
  2186                           ;subroutines.c: 55:             }
  2187  00060E  4A3A               	infsnz	scanForBeacon@i,f,c
  2188  000610  2A3B               	incf	scanForBeacon@i+1,f,c
  2189  000612  BE3B               	btfsc	scanForBeacon@i+1,7,c
  2190  000614  D7F0               	goto	l2605
  2191  000616  503B               	movf	scanForBeacon@i+1,w,c
  2192  000618  E104               	bnz	u1790
  2193  00061A  0E14               	movlw	20
  2194  00061C  5C3A               	subwf	scanForBeacon@i,w,c
  2195  00061E  A0D8               	btfss	status,0,c
  2196  000620  D7EA               	goto	l2605
  2197  000622                     u1790:
  2198  000622  00FF               	reset		;# 
  2199  000624  D78A               	goto	l2571
  2200  000626                     __end_of_scanForBeacon:
  2201                           	opt callstack 0
  2202                           
  2203 ;; *************** function _turnRight *****************
  2204 ;; Defined at:
  2205 ;;		line 53 in file "dc_motor.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2208 ;;		 -> main@motorL(9), 
  2209 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2210 ;;		 -> main@motorR(9), 
  2211 ;;  max_power       2   37[COMRAM] int 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  i               2   40[COMRAM] int 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2223 ;;      Params:         6       0       0       0
  2224 ;;      Locals:         2       0       0       0
  2225 ;;      Temps:          1       0       0       0
  2226 ;;      Totals:         9       0       0       0
  2227 ;;Total ram usage:        9 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    5
  2230 ;; This function calls:
  2231 ;;		_setMotorPWM
  2232 ;; This function is called by:
  2233 ;;		_scanForBeacon
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text11
  2238  000B96                     __ptext11:
  2239                           	opt callstack 0
  2240  000B96                     _turnRight:
  2241                           	opt callstack 24
  2242                           
  2243                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2244                           
  2245                           ;incstack = 0
  2246  000B96  EE20 F001          	lfsr	2,1
  2247  000B9A  5022               	movf	turnRight@mL,w,c
  2248  000B9C  26D9               	addwf	fsr2l,f,c
  2249  000B9E  5023               	movf	turnRight@mL+1,w,c
  2250  000BA0  22DA               	addwfc	fsr2h,f,c
  2251  000BA2  0E00               	movlw	0
  2252  000BA4  6EDF               	movwf	indf2,c
  2253                           
  2254                           ;dc_motor.c: 57:     mR->direction = 1;
  2255  000BA6  EE20 F001          	lfsr	2,1
  2256  000BAA  5024               	movf	turnRight@mR,w,c
  2257  000BAC  26D9               	addwf	fsr2l,f,c
  2258  000BAE  5025               	movf	turnRight@mR+1,w,c
  2259  000BB0  22DA               	addwfc	fsr2h,f,c
  2260  000BB2  0E01               	movlw	1
  2261  000BB4  6EDF               	movwf	indf2,c
  2262                           
  2263                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2264  000BB6  0E00               	movlw	0
  2265  000BB8  6E2A               	movwf	turnRight@i+1,c
  2266  000BBA  0E00               	movlw	0
  2267  000BBC  6E29               	movwf	turnRight@i,c
  2268  000BBE  D021               	goto	l2409
  2269  000BC0                     l2399:
  2270                           
  2271                           ;dc_motor.c: 60:         mL->power = i;
  2272  000BC0  C022  FFD9         	movff	turnRight@mL,fsr2l
  2273  000BC4  C023  FFDA         	movff	turnRight@mL+1,fsr2h
  2274  000BC8  C029  FFDF         	movff	turnRight@i,indf2
  2275                           
  2276                           ;dc_motor.c: 61:         mR->power = i;
  2277  000BCC  C024  FFD9         	movff	turnRight@mR,fsr2l
  2278  000BD0  C025  FFDA         	movff	turnRight@mR+1,fsr2h
  2279  000BD4  C029  FFDF         	movff	turnRight@i,indf2
  2280                           
  2281                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2282  000BD8  C022  F019         	movff	turnRight@mL,setMotorPWM@m
  2283  000BDC  C023  F01A         	movff	turnRight@mL+1,setMotorPWM@m+1
  2284  000BE0  EC13  F003         	call	_setMotorPWM	;wreg free
  2285                           
  2286                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2287  000BE4  C024  F019         	movff	turnRight@mR,setMotorPWM@m
  2288  000BE8  C025  F01A         	movff	turnRight@mR+1,setMotorPWM@m+1
  2289  000BEC  EC13  F003         	call	_setMotorPWM	;wreg free
  2290                           
  2291                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2292  000BF0  0E03               	movlw	3
  2293  000BF2  6E28               	movwf	??_turnRight& (0+255),c
  2294  000BF4  0E98               	movlw	152
  2295  000BF6                     u2037:
  2296  000BF6  2EE8               	decfsz	wreg,f,c
  2297  000BF8  D7FE               	bra	u2037
  2298  000BFA  2E28               	decfsz	??_turnRight& (0+255),f,c
  2299  000BFC  D7FC               	bra	u2037
  2300                           
  2301                           ;dc_motor.c: 66:     }
  2302  000BFE  4A29               	infsnz	turnRight@i,f,c
  2303  000C00  2A2A               	incf	turnRight@i+1,f,c
  2304  000C02                     l2409:
  2305  000C02  5026               	movf	turnRight@max_power,w,c
  2306  000C04  5C29               	subwf	turnRight@i,w,c
  2307  000C06  502A               	movf	turnRight@i+1,w,c
  2308  000C08  0A80               	xorlw	128
  2309  000C0A  6E28               	movwf	??_turnRight& (0+255),c
  2310  000C0C  5027               	movf	turnRight@max_power+1,w,c
  2311  000C0E  0A80               	xorlw	128
  2312  000C10  5828               	subwfb	??_turnRight& (0+255),w,c
  2313  000C12  B0D8               	btfsc	status,0,c
  2314  000C14  0012               	return	
  2315  000C16  D7D4               	goto	l2399
  2316  000C18                     __end_of_turnRight:
  2317                           	opt callstack 0
  2318                           
  2319 ;; *************** function _stop *****************
  2320 ;; Defined at:
  2321 ;;		line 40 in file "dc_motor.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2324 ;;		 -> main@motorL(9), 
  2325 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2326 ;;		 -> main@motorR(9), 
  2327 ;;  initial_spee    2   37[COMRAM] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  i               2   40[COMRAM] int 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2339 ;;      Params:         6       0       0       0
  2340 ;;      Locals:         2       0       0       0
  2341 ;;      Temps:          1       0       0       0
  2342 ;;      Totals:         9       0       0       0
  2343 ;;Total ram usage:        9 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    5
  2346 ;; This function calls:
  2347 ;;		_setMotorPWM
  2348 ;; This function is called by:
  2349 ;;		_scanForBeacon
  2350 ;;		_stopAndDisplay
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text12
  2355  000ECE                     __ptext12:
  2356                           	opt callstack 0
  2357  000ECE                     _stop:
  2358                           	opt callstack 24
  2359                           
  2360                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2361                           
  2362                           ;incstack = 0
  2363  000ECE  C026  F029         	movff	stop@initial_speed,stop@i
  2364  000ED2  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  2365  000ED6                     l2379:
  2366  000ED6  BE2A               	btfsc	stop@i+1,7,c
  2367  000ED8  0012               	return	
  2368  000EDA  502A               	movf	stop@i+1,w,c
  2369  000EDC  E103               	bnz	l2383
  2370  000EDE  0429               	decf	stop@i,w,c
  2371  000EE0  A0D8               	btfss	status,0,c
  2372  000EE2  0012               	return	
  2373  000EE4                     l2383:
  2374                           
  2375                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2376  000EE4  C022  FFD9         	movff	stop@mL,fsr2l
  2377  000EE8  C023  FFDA         	movff	stop@mL+1,fsr2h
  2378  000EEC  C029  FFDF         	movff	stop@i,indf2
  2379                           
  2380                           ;dc_motor.c: 45:         mR->power = i;
  2381  000EF0  C024  FFD9         	movff	stop@mR,fsr2l
  2382  000EF4  C025  FFDA         	movff	stop@mR+1,fsr2h
  2383  000EF8  C029  FFDF         	movff	stop@i,indf2
  2384                           
  2385                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2386  000EFC  C022  F019         	movff	stop@mL,setMotorPWM@m
  2387  000F00  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  2388  000F04  EC13  F003         	call	_setMotorPWM	;wreg free
  2389                           
  2390                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2391  000F08  C024  F019         	movff	stop@mR,setMotorPWM@m
  2392  000F0C  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  2393  000F10  EC13  F003         	call	_setMotorPWM	;wreg free
  2394                           
  2395                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2396  000F14  0E03               	movlw	3
  2397  000F16  6E28               	movwf	??_stop& (0+255),c
  2398  000F18  0E98               	movlw	152
  2399  000F1A                     u2047:
  2400  000F1A  2EE8               	decfsz	wreg,f,c
  2401  000F1C  D7FE               	bra	u2047
  2402  000F1E  2E28               	decfsz	??_stop& (0+255),f,c
  2403  000F20  D7FC               	bra	u2047
  2404                           
  2405                           ;dc_motor.c: 49:     }
  2406  000F22  0629               	decf	stop@i,f,c
  2407  000F24  A0D8               	btfss	status,0,c
  2408  000F26  062A               	decf	stop@i+1,f,c
  2409  000F28  D7D6               	goto	l2379
  2410  000F2A                     __end_of_stop:
  2411                           	opt callstack 0
  2412                           
  2413 ;; *************** function _classify_data *****************
  2414 ;; Defined at:
  2415 ;;		line 35 in file "signal_processing.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  raw_data        2   10[COMRAM] unsigned int 
  2418 ;;  smoothed        2   12[COMRAM] PTR unsigned int 
  2419 ;;		 -> scanForBeacon@smoothed_data(2), 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  filtered        2   20[COMRAM] unsigned int 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      unsigned char 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2431 ;;      Params:         4       0       0       0
  2432 ;;      Locals:         2       0       0       0
  2433 ;;      Temps:          6       0       0       0
  2434 ;;      Totals:        12       0       0       0
  2435 ;;Total ram usage:       12 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    3
  2438 ;; This function calls:
  2439 ;;		Nothing
  2440 ;; This function is called by:
  2441 ;;		_scanForBeacon
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text13
  2446  000A8E                     __ptext13:
  2447                           	opt callstack 0
  2448  000A8E                     _classify_data:
  2449                           	opt callstack 26
  2450                           
  2451                           ;signal_processing.c: 35: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 36: {;signal_processing.c: 39:     *smoothed = *smoothed + ((ra
      +                          w_data - *smoothed) >> 2);
  2452                           
  2453                           ;incstack = 0
  2454  000A8E  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2455  000A92  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2456  000A96  CFDE F00F          	movff	postinc2,??_classify_data
  2457  000A9A  CFDD F010          	movff	postdec2,??_classify_data+1
  2458  000A9E  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2459  000AA2  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2460  000AA6  CFDE F011          	movff	postinc2,??_classify_data+2
  2461  000AAA  CFDD F012          	movff	postdec2,??_classify_data+3
  2462  000AAE  C00B  F013         	movff	classify_data@raw_data,??_classify_data+4
  2463  000AB2  C00C  F014         	movff	classify_data@raw_data+1,??_classify_data+5
  2464  000AB6  5011               	movf	??_classify_data+2,w,c
  2465  000AB8  5E13               	subwf	??_classify_data+4,f,c
  2466  000ABA  5012               	movf	??_classify_data+3,w,c
  2467  000ABC  5A14               	subwfb	??_classify_data+5,f,c
  2468  000ABE  90D8               	bcf	status,0,c
  2469  000AC0  3214               	rrcf	??_classify_data+5,f,c
  2470  000AC2  3213               	rrcf	??_classify_data+4,f,c
  2471  000AC4  90D8               	bcf	status,0,c
  2472  000AC6  3214               	rrcf	??_classify_data+5,f,c
  2473  000AC8  3213               	rrcf	??_classify_data+4,f,c
  2474  000ACA  500F               	movf	??_classify_data,w,c
  2475  000ACC  2613               	addwf	??_classify_data+4,f,c
  2476  000ACE  5010               	movf	??_classify_data+1,w,c
  2477  000AD0  2214               	addwfc	??_classify_data+5,f,c
  2478  000AD2  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2479  000AD6  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2480  000ADA  C013  FFDE         	movff	??_classify_data+4,postinc2
  2481  000ADE  C014  FFDD         	movff	??_classify_data+5,postdec2
  2482                           
  2483                           ;signal_processing.c: 40:     unsigned int filtered = raw_data - *smoothed;
  2484  000AE2  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  2485  000AE6  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  2486  000AEA  CFDE F00F          	movff	postinc2,??_classify_data
  2487  000AEE  CFDD F010          	movff	postdec2,??_classify_data+1
  2488  000AF2  500F               	movf	??_classify_data,w,c
  2489  000AF4  5C0B               	subwf	classify_data@raw_data,w,c
  2490  000AF6  6E15               	movwf	classify_data@filtered,c
  2491  000AF8  5010               	movf	??_classify_data+1,w,c
  2492  000AFA  580C               	subwfb	classify_data@raw_data+1,w,c
  2493  000AFC  6E16               	movwf	classify_data@filtered+1,c
  2494                           
  2495                           ;signal_processing.c: 43:     if(filtered >= 100)
  2496  000AFE  5016               	movf	classify_data@filtered+1,w,c
  2497  000B00  E104               	bnz	u1730
  2498  000B02  0E64               	movlw	100
  2499  000B04  5C15               	subwf	classify_data@filtered,w,c
  2500  000B06  A0D8               	btfss	status,0,c
  2501  000B08  D002               	goto	l2499
  2502  000B0A                     u1730:
  2503                           
  2504                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  2505  000B0A  0E01               	movlw	1
  2506  000B0C  0012               	return	
  2507  000B0E                     l2499:
  2508                           
  2509                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  2510  000B0E  0E00               	movlw	0
  2511  000B10  0012               	return		;funcret
  2512  000B12                     __end_of_classify_data:
  2513                           	opt callstack 0
  2514                           
  2515 ;; *************** function _SetLine *****************
  2516 ;; Defined at:
  2517 ;;		line 107 in file "LCDIO.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  line            1    wreg     unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  line            1   14[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2531 ;;      Params:         0       0       0       0
  2532 ;;      Locals:         1       0       0       0
  2533 ;;      Temps:          0       0       0       0
  2534 ;;      Totals:         1       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    6
  2538 ;; This function calls:
  2539 ;;		_SendLCD
  2540 ;; This function is called by:
  2541 ;;		_check_RFID
  2542 ;;		_display_RFID
  2543 ;;		_scanForBeacon
  2544 ;;		_waitForInput
  2545 ;;		_debug
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text14
  2550  001094                     __ptext14:
  2551                           	opt callstack 0
  2552  001094                     _SetLine:
  2553                           	opt callstack 23
  2554                           
  2555                           ;incstack = 0
  2556                           ;SetLine@line stored from wreg
  2557  001094  6E0F               	movwf	SetLine@line,c
  2558                           
  2559                           ;LCDIO.c: 109:     if(line == 1){
  2560  001096  040F               	decf	SetLine@line,w,c
  2561  001098  A4D8               	btfss	status,2,c
  2562  00109A  D005               	goto	l2311
  2563                           
  2564                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2565  00109C  0E00               	movlw	0
  2566  00109E  6E0D               	movwf	SendLCD@type,c
  2567  0010A0  0E80               	movlw	128
  2568  0010A2  EC32  F008         	call	_SendLCD
  2569  0010A6                     l2311:
  2570                           
  2571                           ;LCDIO.c: 113:     if(line == 2){
  2572  0010A6  0E02               	movlw	2
  2573  0010A8  180F               	xorwf	SetLine@line,w,c
  2574  0010AA  A4D8               	btfss	status,2,c
  2575  0010AC  D005               	goto	l2315
  2576                           
  2577                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2578  0010AE  0E00               	movlw	0
  2579  0010B0  6E0D               	movwf	SendLCD@type,c
  2580  0010B2  0EC0               	movlw	192
  2581  0010B4  EC32  F008         	call	_SendLCD
  2582  0010B8                     l2315:
  2583                           
  2584                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2585  0010B8  0E21               	movlw	33
  2586  0010BA                     u2057:
  2587  0010BA  2EE8               	decfsz	wreg,f,c
  2588  0010BC  D7FE               	bra	u2057
  2589  0010BE  F000               	nop	
  2590  0010C0  0012               	return		;funcret
  2591  0010C2                     __end_of_SetLine:
  2592                           	opt callstack 0
  2593                           
  2594 ;; *************** function _returnHome *****************
  2595 ;; Defined at:
  2596 ;;		line 89 in file "subroutines.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2599 ;;		 -> main@motorL(9), 
  2600 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2601 ;;		 -> main@motorR(9), 
  2602 ;;  speed           2   46[COMRAM] int 
  2603 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2604 ;;		 -> movement_time(4), 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      unsigned char 
  2609 ;; Registers used:
  2610 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2616 ;;      Params:         8       0       0       0
  2617 ;;      Locals:         0       0       0       0
  2618 ;;      Temps:          4       0       0       0
  2619 ;;      Totals:        12       0       0       0
  2620 ;;Total ram usage:       12 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    7
  2623 ;; This function calls:
  2624 ;;		_ClearLCD
  2625 ;;		_LCD_String
  2626 ;;		_moveBackward
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text15
  2633  000F76                     __ptext15:
  2634                           	opt callstack 0
  2635  000F76                     _returnHome:
  2636                           	opt callstack 23
  2637                           
  2638                           ;subroutines.c: 89: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 90:                             volatile unsigned long *time);s
      +                          ubroutines.c: 91: {;subroutines.c: 92:     moveBackward(mL,mR,speed);
  2639                           
  2640                           ;incstack = 0
  2641  000F76  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2642  000F7A  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2643  000F7E  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2644  000F82  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2645  000F86  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2646  000F8A  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2647  000F8E  EC0C  F006         	call	_moveBackward	;wreg free
  2648                           
  2649                           ;subroutines.c: 94:     ClearLCD();
  2650  000F92  ECA1  F008         	call	_ClearLCD	;wreg free
  2651                           
  2652                           ;subroutines.c: 95:     LCD_String("RETURNING HOME");
  2653  000F96  0E6F               	movlw	low STR_8
  2654  000F98  6E0F               	movwf	LCD_String@string,c
  2655  000F9A  0E03               	movlw	high STR_8
  2656  000F9C  6E10               	movwf	LCD_String@string+1,c
  2657  000F9E  EC38  F007         	call	_LCD_String	;wreg free
  2658  000FA2                     l2637:
  2659  000FA2  C031  FFD9         	movff	returnHome@time,fsr2l
  2660  000FA6  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2661  000FAA  50DE               	movf	postinc2,w,c
  2662  000FAC  10DE               	iorwf	postinc2,w,c
  2663  000FAE  10DE               	iorwf	postinc2,w,c
  2664  000FB0  10DE               	iorwf	postinc2,w,c
  2665  000FB2  A4D8               	btfss	status,2,c
  2666  000FB4  D7F6               	goto	l2637
  2667                           
  2668                           ;subroutines.c: 97:     return 3;
  2669  000FB6  0E03               	movlw	3
  2670  000FB8  0012               	return		;funcret
  2671  000FBA                     __end_of_returnHome:
  2672                           	opt callstack 0
  2673                           
  2674 ;; *************** function _moveBackward *****************
  2675 ;; Defined at:
  2676 ;;		line 85 in file "dc_motor.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2679 ;;		 -> main@motorL(9), 
  2680 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2681 ;;		 -> main@motorR(9), 
  2682 ;;  max_power       2   37[COMRAM] int 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  i               2   40[COMRAM] int 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2694 ;;      Params:         6       0       0       0
  2695 ;;      Locals:         2       0       0       0
  2696 ;;      Temps:          1       0       0       0
  2697 ;;      Totals:         9       0       0       0
  2698 ;;Total ram usage:        9 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    5
  2701 ;; This function calls:
  2702 ;;		_setMotorPWM
  2703 ;; This function is called by:
  2704 ;;		_returnHome
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text16
  2709  000C18                     __ptext16:
  2710                           	opt callstack 0
  2711  000C18                     _moveBackward:
  2712                           	opt callstack 24
  2713                           
  2714                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2715                           
  2716                           ;incstack = 0
  2717  000C18  EE20 F001          	lfsr	2,1
  2718  000C1C  5022               	movf	moveBackward@mL,w,c
  2719  000C1E  26D9               	addwf	fsr2l,f,c
  2720  000C20  5023               	movf	moveBackward@mL+1,w,c
  2721  000C22  22DA               	addwfc	fsr2h,f,c
  2722  000C24  0E00               	movlw	0
  2723  000C26  6EDF               	movwf	indf2,c
  2724                           
  2725                           ;dc_motor.c: 88:     mR->direction = 0;
  2726  000C28  EE20 F001          	lfsr	2,1
  2727  000C2C  5024               	movf	moveBackward@mR,w,c
  2728  000C2E  26D9               	addwf	fsr2l,f,c
  2729  000C30  5025               	movf	moveBackward@mR+1,w,c
  2730  000C32  22DA               	addwfc	fsr2h,f,c
  2731  000C34  0E00               	movlw	0
  2732  000C36  6EDF               	movwf	indf2,c
  2733                           
  2734                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2735  000C38  0E00               	movlw	0
  2736  000C3A  6E2A               	movwf	moveBackward@i+1,c
  2737  000C3C  0E00               	movlw	0
  2738  000C3E  6E29               	movwf	moveBackward@i,c
  2739  000C40  D021               	goto	l2441
  2740  000C42                     l2431:
  2741                           
  2742                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2743  000C42  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2744  000C46  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2745  000C4A  C029  FFDF         	movff	moveBackward@i,indf2
  2746                           
  2747                           ;dc_motor.c: 92:         mR->power = i;
  2748  000C4E  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2749  000C52  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2750  000C56  C029  FFDF         	movff	moveBackward@i,indf2
  2751                           
  2752                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2753  000C5A  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2754  000C5E  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2755  000C62  EC13  F003         	call	_setMotorPWM	;wreg free
  2756                           
  2757                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2758  000C66  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2759  000C6A  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2760  000C6E  EC13  F003         	call	_setMotorPWM	;wreg free
  2761                           
  2762                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2763  000C72  0E03               	movlw	3
  2764  000C74  6E28               	movwf	??_moveBackward& (0+255),c
  2765  000C76  0E98               	movlw	152
  2766  000C78                     u2067:
  2767  000C78  2EE8               	decfsz	wreg,f,c
  2768  000C7A  D7FE               	bra	u2067
  2769  000C7C  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2770  000C7E  D7FC               	bra	u2067
  2771                           
  2772                           ;dc_motor.c: 96:     }
  2773  000C80  4A29               	infsnz	moveBackward@i,f,c
  2774  000C82  2A2A               	incf	moveBackward@i+1,f,c
  2775  000C84                     l2441:
  2776  000C84  5026               	movf	moveBackward@max_power,w,c
  2777  000C86  5C29               	subwf	moveBackward@i,w,c
  2778  000C88  502A               	movf	moveBackward@i+1,w,c
  2779  000C8A  0A80               	xorlw	128
  2780  000C8C  6E28               	movwf	??_moveBackward& (0+255),c
  2781  000C8E  5027               	movf	moveBackward@max_power+1,w,c
  2782  000C90  0A80               	xorlw	128
  2783  000C92  5828               	subwfb	??_moveBackward& (0+255),w,c
  2784  000C94  B0D8               	btfsc	status,0,c
  2785  000C96  0012               	return	
  2786  000C98  D7D4               	goto	l2431
  2787  000C9A                     __end_of_moveBackward:
  2788                           	opt callstack 0
  2789                           
  2790 ;; *************** function _moveToBeacon *****************
  2791 ;; Defined at:
  2792 ;;		line 63 in file "subroutines.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2795 ;;		 -> main@motorL(9), 
  2796 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2797 ;;		 -> main@motorR(9), 
  2798 ;;  speed           2   46[COMRAM] int 
  2799 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2800 ;;		 -> movement_time(4), 
  2801 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2802 ;;		 -> NULL(0), RFID_flag(1), 
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;		None
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      unsigned char 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2814 ;;      Params:        10       0       0       0
  2815 ;;      Locals:         0       0       0       0
  2816 ;;      Temps:          4       0       0       0
  2817 ;;      Totals:        14       0       0       0
  2818 ;;Total ram usage:       14 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    7
  2821 ;; This function calls:
  2822 ;;		_ClearLCD
  2823 ;;		_LCD_String
  2824 ;;		_moveForward
  2825 ;; This function is called by:
  2826 ;;		_main
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text17
  2831  000E10                     __ptext17:
  2832                           	opt callstack 0
  2833  000E10                     _moveToBeacon:
  2834                           	opt callstack 23
  2835                           
  2836                           ;subroutines.c: 63: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 64:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 65: {;subroutines.c: 66:     moveForward(mL,mR,spe
      +                          ed);
  2837                           
  2838                           ;incstack = 0
  2839  000E10  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2840  000E14  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2841  000E18  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2842  000E1C  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2843  000E20  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2844  000E24  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2845  000E28  EC4D  F006         	call	_moveForward	;wreg free
  2846                           
  2847                           ;subroutines.c: 67:     ClearLCD();
  2848  000E2C  ECA1  F008         	call	_ClearLCD	;wreg free
  2849                           
  2850                           ;subroutines.c: 68:     LCD_String("MOVING TO BOMB");
  2851  000E30  0E51               	movlw	low STR_7
  2852  000E32  6E0F               	movwf	LCD_String@string,c
  2853  000E34  0E03               	movlw	high STR_7
  2854  000E36  6E10               	movwf	LCD_String@string+1,c
  2855  000E38  EC38  F007         	call	_LCD_String	;wreg free
  2856  000E3C                     l2615:
  2857                           
  2858                           ;subroutines.c: 72:           {;subroutines.c: 75:               if(*exit_flag == 1)
  2859  000E3C  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2860  000E40  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2861  000E44  04DE               	decf	postinc2,w,c
  2862  000E46  A4D8               	btfss	status,2,c
  2863  000E48  D002               	goto	l2625
  2864  000E4A                     u1800:
  2865  000E4A                     l2619:
  2866                           
  2867                           ;subroutines.c: 78:                   return 2;
  2868  000E4A  0E02               	movlw	2
  2869  000E4C  0012               	return	
  2870  000E4E                     l2625:
  2871  000E4E  C031  FFD9         	movff	moveToBeacon@time,fsr2l
  2872  000E52  C032  FFDA         	movff	moveToBeacon@time+1,fsr2h
  2873  000E56  0E03               	movlw	3
  2874  000E58  50DB               	movf	plusw2,w,c
  2875  000E5A  E1F7               	bnz	l2619
  2876  000E5C  0E02               	movlw	2
  2877  000E5E  50DB               	movf	plusw2,w,c
  2878  000E60  E1F4               	bnz	l2619
  2879  000E62  0E31               	movlw	49
  2880  000E64  5CDE               	subwf	postinc2,w,c
  2881  000E66  0E01               	movlw	1
  2882  000E68  58DE               	subwfb	postinc2,w,c
  2883  000E6A  B0D8               	btfsc	status,0,c
  2884  000E6C  D7EE               	goto	u1800
  2885  000E6E  D7E6               	goto	l2615
  2886  000E70                     __end_of_moveToBeacon:
  2887                           	opt callstack 0
  2888                           
  2889 ;; *************** function _moveForward *****************
  2890 ;; Defined at:
  2891 ;;		line 70 in file "dc_motor.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2894 ;;		 -> main@motorL(9), 
  2895 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2896 ;;		 -> main@motorR(9), 
  2897 ;;  max_power       2   37[COMRAM] int 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  i               2   40[COMRAM] int 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2909 ;;      Params:         6       0       0       0
  2910 ;;      Locals:         2       0       0       0
  2911 ;;      Temps:          1       0       0       0
  2912 ;;      Totals:         9       0       0       0
  2913 ;;Total ram usage:        9 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    5
  2916 ;; This function calls:
  2917 ;;		_setMotorPWM
  2918 ;; This function is called by:
  2919 ;;		_moveToBeacon
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text18
  2924  000C9A                     __ptext18:
  2925                           	opt callstack 0
  2926  000C9A                     _moveForward:
  2927                           	opt callstack 24
  2928                           
  2929                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2930                           
  2931                           ;incstack = 0
  2932  000C9A  EE20 F001          	lfsr	2,1
  2933  000C9E  5022               	movf	moveForward@mL,w,c
  2934  000CA0  26D9               	addwf	fsr2l,f,c
  2935  000CA2  5023               	movf	moveForward@mL+1,w,c
  2936  000CA4  22DA               	addwfc	fsr2h,f,c
  2937  000CA6  0E01               	movlw	1
  2938  000CA8  6EDF               	movwf	indf2,c
  2939                           
  2940                           ;dc_motor.c: 73:     mR->direction = 1;
  2941  000CAA  EE20 F001          	lfsr	2,1
  2942  000CAE  5024               	movf	moveForward@mR,w,c
  2943  000CB0  26D9               	addwf	fsr2l,f,c
  2944  000CB2  5025               	movf	moveForward@mR+1,w,c
  2945  000CB4  22DA               	addwfc	fsr2h,f,c
  2946  000CB6  0E01               	movlw	1
  2947  000CB8  6EDF               	movwf	indf2,c
  2948                           
  2949                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2950  000CBA  0E00               	movlw	0
  2951  000CBC  6E2A               	movwf	moveForward@i+1,c
  2952  000CBE  0E00               	movlw	0
  2953  000CC0  6E29               	movwf	moveForward@i,c
  2954  000CC2  D021               	goto	l2425
  2955  000CC4                     l2415:
  2956                           
  2957                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2958  000CC4  C022  FFD9         	movff	moveForward@mL,fsr2l
  2959  000CC8  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2960  000CCC  C029  FFDF         	movff	moveForward@i,indf2
  2961                           
  2962                           ;dc_motor.c: 77:         mR->power = i;
  2963  000CD0  C024  FFD9         	movff	moveForward@mR,fsr2l
  2964  000CD4  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2965  000CD8  C029  FFDF         	movff	moveForward@i,indf2
  2966                           
  2967                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2968  000CDC  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2969  000CE0  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2970  000CE4  EC13  F003         	call	_setMotorPWM	;wreg free
  2971                           
  2972                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2973  000CE8  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2974  000CEC  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2975  000CF0  EC13  F003         	call	_setMotorPWM	;wreg free
  2976                           
  2977                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2978  000CF4  0E03               	movlw	3
  2979  000CF6  6E28               	movwf	??_moveForward& (0+255),c
  2980  000CF8  0E98               	movlw	152
  2981  000CFA                     u2077:
  2982  000CFA  2EE8               	decfsz	wreg,f,c
  2983  000CFC  D7FE               	bra	u2077
  2984  000CFE  2E28               	decfsz	??_moveForward& (0+255),f,c
  2985  000D00  D7FC               	bra	u2077
  2986                           
  2987                           ;dc_motor.c: 81:     }
  2988  000D02  4A29               	infsnz	moveForward@i,f,c
  2989  000D04  2A2A               	incf	moveForward@i+1,f,c
  2990  000D06                     l2425:
  2991  000D06  5026               	movf	moveForward@max_power,w,c
  2992  000D08  5C29               	subwf	moveForward@i,w,c
  2993  000D0A  502A               	movf	moveForward@i+1,w,c
  2994  000D0C  0A80               	xorlw	128
  2995  000D0E  6E28               	movwf	??_moveForward& (0+255),c
  2996  000D10  5027               	movf	moveForward@max_power+1,w,c
  2997  000D12  0A80               	xorlw	128
  2998  000D14  5828               	subwfb	??_moveForward& (0+255),w,c
  2999  000D16  B0D8               	btfsc	status,0,c
  3000  000D18  0012               	return	
  3001  000D1A  D7D4               	goto	l2415
  3002  000D1C                     __end_of_moveForward:
  3003                           	opt callstack 0
  3004                           
  3005 ;; *************** function _LCD_String *****************
  3006 ;; Defined at:
  3007 ;;		line 119 in file "LCDIO.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  string          2   14[COMRAM] PTR unsigned char 
  3010 ;;		 -> STR_14(16), STR_13(16), STR_12(13), debug@buf2(16), 
  3011 ;;		 -> debug@buf(16), STR_9(16), STR_8(15), STR_7(15), 
  3012 ;;		 -> STR_6(16), STR_5(15), STR_4(10), STR_3(16), 
  3013 ;;		 -> STR_2(16), STR_1(15), 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  1    wreg      void 
  3018 ;; Registers used:
  3019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3025 ;;      Params:         2       0       0       0
  3026 ;;      Locals:         0       0       0       0
  3027 ;;      Temps:          0       0       0       0
  3028 ;;      Totals:         2       0       0       0
  3029 ;;Total ram usage:        2 bytes
  3030 ;; Hardware stack levels used:    1
  3031 ;; Hardware stack levels required when called:    6
  3032 ;; This function calls:
  3033 ;;		_SendLCD
  3034 ;; This function is called by:
  3035 ;;		_main
  3036 ;;		_check_RFID
  3037 ;;		_scanForBeacon
  3038 ;;		_moveToBeacon
  3039 ;;		_returnHome
  3040 ;;		_stopAndDisplay
  3041 ;;		_waitForInput
  3042 ;;		_debug
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text19
  3047  000E70                     __ptext19:
  3048                           	opt callstack 0
  3049  000E70                     _LCD_String:
  3050                           	opt callstack 23
  3051                           
  3052                           ;LCDIO.c: 121: while(*string != 0){
  3053                           
  3054                           ;incstack = 0
  3055  000E70  D01A               	goto	l2297
  3056  000E72                     l2291:
  3057                           
  3058                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3059  000E72  0E01               	movlw	1
  3060  000E74  6E0D               	movwf	SendLCD@type,c
  3061  000E76  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3062  000E7A  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3063  000E7E  6AF8               	clrf	tblptru,c
  3064  000E80  0E02               	movlw	(high __ramtop+-1)
  3065  000E82  64F7               	cpfsgt	tblptrh,c
  3066  000E84  D003               	bra	u1397
  3067  000E86  0008               	tblrd		*
  3068  000E88  50F5               	movf	tablat,w,c
  3069  000E8A  D005               	bra	u1390
  3070  000E8C                     u1397:
  3071  000E8C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3072  000E90  CFF7 FFEA          	movff	tblptrh,fsr0h
  3073  000E94  50EF               	movf	indf0,w,c
  3074  000E96                     u1390:
  3075  000E96  EC32  F008         	call	_SendLCD
  3076  000E9A  4A0F               	infsnz	LCD_String@string,f,c
  3077  000E9C  2A10               	incf	LCD_String@string+1,f,c
  3078                           
  3079                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3080  000E9E  0E21               	movlw	33
  3081  000EA0                     u2087:
  3082  000EA0  2EE8               	decfsz	wreg,f,c
  3083  000EA2  D7FE               	bra	u2087
  3084  000EA4  F000               	nop	
  3085  000EA6                     l2297:
  3086                           
  3087                           ;LCDIO.c: 121: while(*string != 0){
  3088  000EA6  C00F  FFF6         	movff	LCD_String@string,tblptrl
  3089  000EAA  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  3090  000EAE  6AF8               	clrf	tblptru,c
  3091  000EB0  0E02               	movlw	(high __ramtop+-1)
  3092  000EB2  64F7               	cpfsgt	tblptrh,c
  3093  000EB4  D003               	bra	u1407
  3094  000EB6  0008               	tblrd		*
  3095  000EB8  50F5               	movf	tablat,w,c
  3096  000EBA  D005               	bra	u1400
  3097  000EBC                     u1407:
  3098  000EBC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3099  000EC0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3100  000EC4  50EF               	movf	indf0,w,c
  3101  000EC6                     u1400:
  3102  000EC6  0900               	iorlw	0
  3103  000EC8  B4D8               	btfsc	status,2,c
  3104  000ECA  0012               	return	
  3105  000ECC  D7D2               	goto	l2291
  3106  000ECE                     __end_of_LCD_String:
  3107                           	opt callstack 0
  3108                           
  3109 ;; *************** function _ClearLCD *****************
  3110 ;; Defined at:
  3111 ;;		line 131 in file "LCDIO.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;		None
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3125 ;;      Params:         0       0       0       0
  3126 ;;      Locals:         0       0       0       0
  3127 ;;      Temps:          1       0       0       0
  3128 ;;      Totals:         1       0       0       0
  3129 ;;Total ram usage:        1 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    6
  3132 ;; This function calls:
  3133 ;;		_SendLCD
  3134 ;; This function is called by:
  3135 ;;		_display_RFID
  3136 ;;		_scanForBeacon
  3137 ;;		_moveToBeacon
  3138 ;;		_returnHome
  3139 ;;		_stopAndDisplay
  3140 ;;		_waitForInput
  3141 ;;		_debug
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text20
  3146  001142                     __ptext20:
  3147                           	opt callstack 0
  3148  001142                     _ClearLCD:
  3149                           	opt callstack 23
  3150                           
  3151                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3152                           
  3153                           ;incstack = 0
  3154  001142  0E00               	movlw	0
  3155  001144  6E0D               	movwf	SendLCD@type,c
  3156  001146  0E01               	movlw	1
  3157  001148  EC32  F008         	call	_SendLCD
  3158                           
  3159                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3160  00114C  0E0D               	movlw	13
  3161  00114E  6E0F               	movwf	??_ClearLCD& (0+255),c
  3162  001150  0EFC               	movlw	252
  3163  001152                     u2097:
  3164  001152  2EE8               	decfsz	wreg,f,c
  3165  001154  D7FE               	bra	u2097
  3166  001156  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3167  001158  D7FC               	bra	u2097
  3168  00115A  0012               	return		;funcret
  3169  00115C                     __end_of_ClearLCD:
  3170                           	opt callstack 0
  3171                           
  3172 ;; *************** function _SendLCD *****************
  3173 ;; Defined at:
  3174 ;;		line 44 in file "LCDIO.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  Byte            1    wreg     unsigned char 
  3177 ;;  type            1   12[COMRAM] unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  Byte            1   13[COMRAM] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3189 ;;      Params:         1       0       0       0
  3190 ;;      Locals:         1       0       0       0
  3191 ;;      Temps:          0       0       0       0
  3192 ;;      Totals:         2       0       0       0
  3193 ;;Total ram usage:        2 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    5
  3196 ;; This function calls:
  3197 ;;		_LCDout
  3198 ;; This function is called by:
  3199 ;;		_init_LCD
  3200 ;;		_SetLine
  3201 ;;		_LCD_String
  3202 ;;		_ClearLCD
  3203 ;;		_display_RFID
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text21
  3208  001064                     __ptext21:
  3209                           	opt callstack 0
  3210  001064                     _SendLCD:
  3211                           	opt callstack 23
  3212                           
  3213                           ;incstack = 0
  3214                           ;SendLCD@Byte stored from wreg
  3215  001064  6E0E               	movwf	SendLCD@Byte,c
  3216                           
  3217                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3218  001066  B00D               	btfsc	SendLCD@type,0,c
  3219  001068  D002               	bra	u1325
  3220  00106A  9E89               	bcf	3977,7,c	;volatile
  3221  00106C  D001               	bra	u1326
  3222  00106E                     u1325:
  3223  00106E  8E89               	bsf	3977,7,c	;volatile
  3224  001070                     u1326:
  3225                           
  3226                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3227  001070  380E               	swapf	SendLCD@Byte,w,c
  3228  001072  0B0F               	andlw	15
  3229  001074  0B0F               	andlw	15
  3230  001076  ECCC  F006         	call	_LCDout
  3231                           
  3232                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3233  00107A  0E06               	movlw	6
  3234  00107C                     u2107:
  3235  00107C  2EE8               	decfsz	wreg,f,c
  3236  00107E  D7FE               	bra	u2107
  3237  001080  D000               	nop2	
  3238                           
  3239                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3240  001082  500E               	movf	SendLCD@Byte,w,c
  3241  001084  0B0F               	andlw	15
  3242  001086  ECCC  F006         	call	_LCDout
  3243                           
  3244                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3245  00108A  0E21               	movlw	33
  3246  00108C                     u2117:
  3247  00108C  2EE8               	decfsz	wreg,f,c
  3248  00108E  D7FE               	bra	u2117
  3249  001090  F000               	nop	
  3250  001092  0012               	return		;funcret
  3251  001094                     __end_of_SendLCD:
  3252                           	opt callstack 0
  3253                           
  3254 ;; *************** function _LCDout *****************
  3255 ;; Defined at:
  3256 ;;		line 31 in file "LCDIO.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  number          1    wreg     unsigned char 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  number          1   11[COMRAM] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3270 ;;      Params:         0       0       0       0
  3271 ;;      Locals:         1       0       0       0
  3272 ;;      Temps:          1       0       0       0
  3273 ;;      Totals:         2       0       0       0
  3274 ;;Total ram usage:        2 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    4
  3277 ;; This function calls:
  3278 ;;		_E_TOG
  3279 ;; This function is called by:
  3280 ;;		_SendLCD
  3281 ;;		_init_LCD
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text22
  3286  000D98                     __ptext22:
  3287                           	opt callstack 0
  3288  000D98                     _LCDout:
  3289                           	opt callstack 23
  3290                           
  3291                           ;incstack = 0
  3292                           ;LCDout@number stored from wreg
  3293  000D98  6E0C               	movwf	LCDout@number,c
  3294                           
  3295                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3296  000D9A  C00C  F00B         	movff	LCDout@number,??_LCDout
  3297  000D9E  0E01               	movlw	1
  3298  000DA0  160B               	andwf	??_LCDout,f,c
  3299  000DA2  508B               	movf	3979,w,c	;volatile
  3300  000DA4  180B               	xorwf	??_LCDout,w,c
  3301  000DA6  0BFE               	andlw	-2
  3302  000DA8  180B               	xorwf	??_LCDout,w,c
  3303  000DAA  6E8B               	movwf	3979,c	;volatile
  3304                           
  3305                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3306  000DAC  C00C  F00B         	movff	LCDout@number,??_LCDout
  3307  000DB0  90D8               	bcf	status,0,c
  3308  000DB2  320B               	rrcf	??_LCDout,f,c
  3309  000DB4  0E01               	movlw	1
  3310  000DB6  160B               	andwf	??_LCDout,f,c
  3311  000DB8  460B               	rlncf	??_LCDout,f,c
  3312  000DBA  460B               	rlncf	??_LCDout,f,c
  3313  000DBC  460B               	rlncf	??_LCDout,f,c
  3314  000DBE  508B               	movf	3979,w,c	;volatile
  3315  000DC0  180B               	xorwf	??_LCDout,w,c
  3316  000DC2  0BF7               	andlw	-9
  3317  000DC4  180B               	xorwf	??_LCDout,w,c
  3318  000DC6  6E8B               	movwf	3979,c	;volatile
  3319                           
  3320                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3321  000DC8  C00C  F00B         	movff	LCDout@number,??_LCDout
  3322  000DCC  90D8               	bcf	status,0,c
  3323  000DCE  320B               	rrcf	??_LCDout,f,c
  3324  000DD0  90D8               	bcf	status,0,c
  3325  000DD2  320B               	rrcf	??_LCDout,f,c
  3326  000DD4  0E01               	movlw	1
  3327  000DD6  160B               	andwf	??_LCDout,f,c
  3328  000DD8  508C               	movf	3980,w,c	;volatile
  3329  000DDA  180B               	xorwf	??_LCDout,w,c
  3330  000DDC  0BFE               	andlw	-2
  3331  000DDE  180B               	xorwf	??_LCDout,w,c
  3332  000DE0  6E8C               	movwf	3980,c	;volatile
  3333                           
  3334                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3335  000DE2  C00C  F00B         	movff	LCDout@number,??_LCDout
  3336  000DE6  90D8               	bcf	status,0,c
  3337  000DE8  320B               	rrcf	??_LCDout,f,c
  3338  000DEA  90D8               	bcf	status,0,c
  3339  000DEC  320B               	rrcf	??_LCDout,f,c
  3340  000DEE  90D8               	bcf	status,0,c
  3341  000DF0  320B               	rrcf	??_LCDout,f,c
  3342  000DF2  0E01               	movlw	1
  3343  000DF4  160B               	andwf	??_LCDout,f,c
  3344  000DF6  460B               	rlncf	??_LCDout,f,c
  3345  000DF8  508C               	movf	3980,w,c	;volatile
  3346  000DFA  180B               	xorwf	??_LCDout,w,c
  3347  000DFC  0BFD               	andlw	-3
  3348  000DFE  180B               	xorwf	??_LCDout,w,c
  3349  000E00  6E8C               	movwf	3980,c	;volatile
  3350                           
  3351                           ;LCDIO.c: 39:  E_TOG();
  3352  000E02  ECBA  F008         	call	_E_TOG	;wreg free
  3353                           
  3354                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3355  000E06  0E03               	movlw	3
  3356  000E08                     u2127:
  3357  000E08  2EE8               	decfsz	wreg,f,c
  3358  000E0A  D7FE               	bra	u2127
  3359  000E0C  F000               	nop	
  3360  000E0E  0012               	return		;funcret
  3361  000E10                     __end_of_LCDout:
  3362                           	opt callstack 0
  3363                           
  3364 ;; *************** function _E_TOG *****************
  3365 ;; Defined at:
  3366 ;;		line 23 in file "LCDIO.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;		None
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3380 ;;      Params:         0       0       0       0
  3381 ;;      Locals:         0       0       0       0
  3382 ;;      Temps:          0       0       0       0
  3383 ;;      Totals:         0       0       0       0
  3384 ;;Total ram usage:        0 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    3
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_LCDout
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text23
  3395  001174                     __ptext23:
  3396                           	opt callstack 0
  3397  001174                     _E_TOG:
  3398                           	opt callstack 23
  3399                           
  3400                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3401                           
  3402                           ;incstack = 0
  3403  001174  8C89               	bsf	3977,6,c	;volatile
  3404                           
  3405                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3406  001176  0E03               	movlw	3
  3407  001178                     u2137:
  3408  001178  2EE8               	decfsz	wreg,f,c
  3409  00117A  D7FE               	bra	u2137
  3410  00117C  F000               	nop	
  3411                           
  3412                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3413  00117E  9C89               	bcf	3977,6,c	;volatile
  3414  001180  0012               	return		;funcret
  3415  001182                     __end_of_E_TOG:
  3416                           	opt callstack 0
  3417                           
  3418 ;; *************** function _init_motor_struct *****************
  3419 ;; Defined at:
  3420 ;;		line 99 in file "dc_motor.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3423 ;;		 -> main@motorL(9), 
  3424 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3425 ;;		 -> main@motorR(9), 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3437 ;;      Params:         4       0       0       0
  3438 ;;      Locals:         0       0       0       0
  3439 ;;      Temps:          0       0       0       0
  3440 ;;      Totals:         4       0       0       0
  3441 ;;Total ram usage:        4 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    5
  3444 ;; This function calls:
  3445 ;;		_setMotorPWM
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text24
  3452  000844                     __ptext24:
  3453                           	opt callstack 0
  3454  000844                     _init_motor_struct:
  3455                           	opt callstack 25
  3456                           
  3457                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3458                           
  3459                           ;incstack = 0
  3460  000844  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3461  000848  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3462  00084C  0E00               	movlw	0
  3463  00084E  6EDF               	movwf	indf2,c
  3464                           
  3465                           ;dc_motor.c: 103: mL->direction = 1;
  3466  000850  EE20 F001          	lfsr	2,1
  3467  000854  5022               	movf	init_motor_struct@mL,w,c
  3468  000856  26D9               	addwf	fsr2l,f,c
  3469  000858  5023               	movf	init_motor_struct@mL+1,w,c
  3470  00085A  22DA               	addwfc	fsr2h,f,c
  3471  00085C  0E01               	movlw	1
  3472  00085E  6EDF               	movwf	indf2,c
  3473                           
  3474                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3475  000860  EE20 F002          	lfsr	2,2
  3476  000864  5022               	movf	init_motor_struct@mL,w,c
  3477  000866  26D9               	addwf	fsr2l,f,c
  3478  000868  5023               	movf	init_motor_struct@mL+1,w,c
  3479  00086A  22DA               	addwfc	fsr2h,f,c
  3480  00086C  0E79               	movlw	121
  3481  00086E  6EDE               	movwf	postinc2,c
  3482  000870  0E0F               	movlw	15
  3483  000872  6EDD               	movwf	postdec2,c
  3484                           
  3485                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3486  000874  EE20 F004          	lfsr	2,4
  3487  000878  5022               	movf	init_motor_struct@mL,w,c
  3488  00087A  26D9               	addwf	fsr2l,f,c
  3489  00087C  5023               	movf	init_motor_struct@mL+1,w,c
  3490  00087E  22DA               	addwfc	fsr2h,f,c
  3491  000880  0E78               	movlw	120
  3492  000882  6EDE               	movwf	postinc2,c
  3493  000884  0E0F               	movlw	15
  3494  000886  6EDD               	movwf	postdec2,c
  3495                           
  3496                           ;dc_motor.c: 106: mL->dir_pin=0;
  3497  000888  EE20 F006          	lfsr	2,6
  3498  00088C  5022               	movf	init_motor_struct@mL,w,c
  3499  00088E  26D9               	addwf	fsr2l,f,c
  3500  000890  5023               	movf	init_motor_struct@mL+1,w,c
  3501  000892  22DA               	addwfc	fsr2h,f,c
  3502  000894  0E00               	movlw	0
  3503  000896  6EDF               	movwf	indf2,c
  3504                           
  3505                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3506  000898  EE20 F007          	lfsr	2,7
  3507  00089C  5022               	movf	init_motor_struct@mL,w,c
  3508  00089E  26D9               	addwf	fsr2l,f,c
  3509  0008A0  5023               	movf	init_motor_struct@mL+1,w,c
  3510  0008A2  22DA               	addwfc	fsr2h,f,c
  3511  0008A4  0EC7               	movlw	199
  3512  0008A6  6EDE               	movwf	postinc2,c
  3513  0008A8  0E00               	movlw	0
  3514  0008AA  6EDD               	movwf	postdec2,c
  3515                           
  3516                           ;dc_motor.c: 109: mR->power = 0;
  3517  0008AC  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3518  0008B0  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3519  0008B4  0E00               	movlw	0
  3520  0008B6  6EDF               	movwf	indf2,c
  3521                           
  3522                           ;dc_motor.c: 110: mR->direction = 1;
  3523  0008B8  EE20 F001          	lfsr	2,1
  3524  0008BC  5024               	movf	init_motor_struct@mR,w,c
  3525  0008BE  26D9               	addwf	fsr2l,f,c
  3526  0008C0  5025               	movf	init_motor_struct@mR+1,w,c
  3527  0008C2  22DA               	addwfc	fsr2h,f,c
  3528  0008C4  0E01               	movlw	1
  3529  0008C6  6EDF               	movwf	indf2,c
  3530                           
  3531                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3532  0008C8  EE20 F002          	lfsr	2,2
  3533  0008CC  5024               	movf	init_motor_struct@mR,w,c
  3534  0008CE  26D9               	addwf	fsr2l,f,c
  3535  0008D0  5025               	movf	init_motor_struct@mR+1,w,c
  3536  0008D2  22DA               	addwfc	fsr2h,f,c
  3537  0008D4  0E77               	movlw	119
  3538  0008D6  6EDE               	movwf	postinc2,c
  3539  0008D8  0E0F               	movlw	15
  3540  0008DA  6EDD               	movwf	postdec2,c
  3541                           
  3542                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3543  0008DC  EE20 F004          	lfsr	2,4
  3544  0008E0  5024               	movf	init_motor_struct@mR,w,c
  3545  0008E2  26D9               	addwf	fsr2l,f,c
  3546  0008E4  5025               	movf	init_motor_struct@mR+1,w,c
  3547  0008E6  22DA               	addwfc	fsr2h,f,c
  3548  0008E8  0E76               	movlw	118
  3549  0008EA  6EDE               	movwf	postinc2,c
  3550  0008EC  0E0F               	movlw	15
  3551  0008EE  6EDD               	movwf	postdec2,c
  3552                           
  3553                           ;dc_motor.c: 113: mR->dir_pin=2;
  3554  0008F0  EE20 F006          	lfsr	2,6
  3555  0008F4  5024               	movf	init_motor_struct@mR,w,c
  3556  0008F6  26D9               	addwf	fsr2l,f,c
  3557  0008F8  5025               	movf	init_motor_struct@mR+1,w,c
  3558  0008FA  22DA               	addwfc	fsr2h,f,c
  3559  0008FC  0E02               	movlw	2
  3560  0008FE  6EDF               	movwf	indf2,c
  3561                           
  3562                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3563  000900  EE20 F007          	lfsr	2,7
  3564  000904  5024               	movf	init_motor_struct@mR,w,c
  3565  000906  26D9               	addwf	fsr2l,f,c
  3566  000908  5025               	movf	init_motor_struct@mR+1,w,c
  3567  00090A  22DA               	addwfc	fsr2h,f,c
  3568  00090C  0EC7               	movlw	199
  3569  00090E  6EDE               	movwf	postinc2,c
  3570  000910  0E00               	movlw	0
  3571  000912  6EDD               	movwf	postdec2,c
  3572                           
  3573                           ;dc_motor.c: 116: setMotorPWM(mL);
  3574  000914  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3575  000918  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3576  00091C  EC13  F003         	call	_setMotorPWM	;wreg free
  3577                           
  3578                           ;dc_motor.c: 117: setMotorPWM(mR);
  3579  000920  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3580  000924  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3581  000928  EC13  F003         	call	_setMotorPWM	;wreg free
  3582  00092C  0012               	return		;funcret
  3583  00092E                     __end_of_init_motor_struct:
  3584                           	opt callstack 0
  3585                           
  3586 ;; *************** function _setMotorPWM *****************
  3587 ;; Defined at:
  3588 ;;		line 18 in file "dc_motor.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3591 ;;		 -> main@motorR(9), main@motorL(9), 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  PWMduty         2   31[COMRAM] int 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3603 ;;      Params:         2       0       0       0
  3604 ;;      Locals:         2       0       0       0
  3605 ;;      Temps:          5       0       0       0
  3606 ;;      Totals:         9       0       0       0
  3607 ;;Total ram usage:        9 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		___awdiv
  3612 ;;		___wmul
  3613 ;; This function is called by:
  3614 ;;		_stop
  3615 ;;		_turnRight
  3616 ;;		_moveForward
  3617 ;;		_moveBackward
  3618 ;;		_init_motor_struct
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text25
  3623  000626                     __ptext25:
  3624                           	opt callstack 0
  3625  000626                     _setMotorPWM:
  3626                           	opt callstack 24
  3627                           
  3628                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3629                           
  3630                           ;incstack = 0
  3631  000626  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3632  00062A  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3633  00062E  50DF               	movf	indf2,w,c
  3634  000630  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3635  000632  501B               	movf	??_setMotorPWM,w,c
  3636  000634  6E0B               	movwf	___wmul@multiplier,c
  3637  000636  6A0C               	clrf	___wmul@multiplier+1,c
  3638  000638  EE20 F007          	lfsr	2,7
  3639  00063C  5019               	movf	setMotorPWM@m,w,c
  3640  00063E  26D9               	addwf	fsr2l,f,c
  3641  000640  501A               	movf	setMotorPWM@m+1,w,c
  3642  000642  22DA               	addwfc	fsr2h,f,c
  3643  000644  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3644  000648  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3645  00064C  EC74  F008         	call	___wmul	;wreg free
  3646  000650  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3647  000654  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3648  000658  0E00               	movlw	0
  3649  00065A  6E14               	movwf	___awdiv@divisor+1,c
  3650  00065C  0E64               	movlw	100
  3651  00065E  6E13               	movwf	___awdiv@divisor,c
  3652  000660  EC89  F005         	call	___awdiv	;wreg free
  3653  000664  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3654  000668  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3655                           
  3656                           ;dc_motor.c: 24:     if (m->direction)
  3657  00066C  EE20 F001          	lfsr	2,1
  3658  000670  5019               	movf	setMotorPWM@m,w,c
  3659  000672  26D9               	addwf	fsr2l,f,c
  3660  000674  501A               	movf	setMotorPWM@m+1,w,c
  3661  000676  22DA               	addwfc	fsr2h,f,c
  3662  000678  50DF               	movf	indf2,w,c
  3663  00067A  B4D8               	btfsc	status,2,c
  3664  00067C  D024               	goto	l2305
  3665                           
  3666                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3667  00067E  EE20 F006          	lfsr	2,6
  3668  000682  5019               	movf	setMotorPWM@m,w,c
  3669  000684  26D9               	addwf	fsr2l,f,c
  3670  000686  501A               	movf	setMotorPWM@m+1,w,c
  3671  000688  22DA               	addwfc	fsr2h,f,c
  3672  00068A  50DF               	movf	indf2,w,c
  3673  00068C  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3674  00068E  0E01               	movlw	1
  3675  000690  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3676  000692  2A1B               	incf	??_setMotorPWM,f,c
  3677  000694  D002               	goto	u1434
  3678  000696                     u1435:
  3679  000696  90D8               	bcf	status,0,c
  3680  000698  361C               	rlcf	??_setMotorPWM+1,f,c
  3681  00069A                     u1434:
  3682  00069A  2E1B               	decfsz	??_setMotorPWM,f,c
  3683  00069C  D7FC               	goto	u1435
  3684  00069E  501C               	movf	??_setMotorPWM+1,w,c
  3685  0006A0  108A               	iorwf	3978,w,c	;volatile
  3686  0006A2  6E8A               	movwf	3978,c	;volatile
  3687                           
  3688                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3689  0006A4  EE20 F007          	lfsr	2,7
  3690  0006A8  5019               	movf	setMotorPWM@m,w,c
  3691  0006AA  26D9               	addwf	fsr2l,f,c
  3692  0006AC  501A               	movf	setMotorPWM@m+1,w,c
  3693  0006AE  22DA               	addwfc	fsr2h,f,c
  3694  0006B0  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3695  0006B4  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3696  0006B8  5020               	movf	setMotorPWM@PWMduty,w,c
  3697  0006BA  5C1B               	subwf	??_setMotorPWM,w,c
  3698  0006BC  6E20               	movwf	setMotorPWM@PWMduty,c
  3699  0006BE  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3700  0006C0  581C               	subwfb	??_setMotorPWM+1,w,c
  3701  0006C2  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3702                           
  3703                           ;dc_motor.c: 28:     }
  3704  0006C4  D014               	goto	l123
  3705  0006C6                     l2305:
  3706                           
  3707                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3708  0006C6  EE20 F006          	lfsr	2,6
  3709  0006CA  5019               	movf	setMotorPWM@m,w,c
  3710  0006CC  26D9               	addwf	fsr2l,f,c
  3711  0006CE  501A               	movf	setMotorPWM@m+1,w,c
  3712  0006D0  22DA               	addwfc	fsr2h,f,c
  3713  0006D2  50DF               	movf	indf2,w,c
  3714  0006D4  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3715  0006D6  0E01               	movlw	1
  3716  0006D8  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3717  0006DA  2A1B               	incf	??_setMotorPWM,f,c
  3718  0006DC  D002               	goto	u1444
  3719  0006DE                     u1445:
  3720  0006DE  90D8               	bcf	status,0,c
  3721  0006E0  361C               	rlcf	??_setMotorPWM+1,f,c
  3722  0006E2                     u1444:
  3723  0006E2  2E1B               	decfsz	??_setMotorPWM,f,c
  3724  0006E4  D7FC               	goto	u1445
  3725  0006E6  501C               	movf	??_setMotorPWM+1,w,c
  3726  0006E8  0AFF               	xorlw	255
  3727  0006EA  148A               	andwf	3978,w,c	;volatile
  3728  0006EC  6E8A               	movwf	3978,c	;volatile
  3729  0006EE                     l123:
  3730                           
  3731                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3732  0006EE  EE20 F002          	lfsr	2,2
  3733  0006F2  5019               	movf	setMotorPWM@m,w,c
  3734  0006F4  26D9               	addwf	fsr2l,f,c
  3735  0006F6  501A               	movf	setMotorPWM@m+1,w,c
  3736  0006F8  22DA               	addwfc	fsr2h,f,c
  3737  0006FA  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3738  0006FE  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3739  000702  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3740  000706  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3741  00070A  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3742  00070C  46E8               	rlncf	wreg,f,c
  3743  00070E  0BFC               	andlw	252
  3744  000710  6EDF               	movwf	indf2,c
  3745                           
  3746                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3747  000712  EE20 F004          	lfsr	2,4
  3748  000716  5019               	movf	setMotorPWM@m,w,c
  3749  000718  26D9               	addwf	fsr2l,f,c
  3750  00071A  501A               	movf	setMotorPWM@m+1,w,c
  3751  00071C  22DA               	addwfc	fsr2h,f,c
  3752  00071E  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3753  000722  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3754  000726  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3755  00072A  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3756  00072E  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3757  000732  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3758  000736  0E06               	movlw	6
  3759  000738  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3760  00073A                     u1455:
  3761  00073A  341E               	rlcf	??_setMotorPWM+3,w,c
  3762  00073C  321E               	rrcf	??_setMotorPWM+3,f,c
  3763  00073E  321D               	rrcf	??_setMotorPWM+2,f,c
  3764  000740  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3765  000742  D7FB               	goto	u1455
  3766  000744  501D               	movf	??_setMotorPWM+2,w,c
  3767  000746  6EDF               	movwf	indf2,c
  3768  000748  0012               	return		;funcret
  3769  00074A                     __end_of_setMotorPWM:
  3770                           	opt callstack 0
  3771                           
  3772 ;; *************** function ___wmul *****************
  3773 ;; Defined at:
  3774 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  multiplier      2   10[COMRAM] unsigned int 
  3777 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  product         2   14[COMRAM] unsigned int 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  2   10[COMRAM] unsigned int 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0, prodl, prodh
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3789 ;;      Params:         4       0       0       0
  3790 ;;      Locals:         2       0       0       0
  3791 ;;      Temps:          0       0       0       0
  3792 ;;      Totals:         6       0       0       0
  3793 ;;Total ram usage:        6 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    3
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_setMotorPWM
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text26
  3804  0010E8                     __ptext26:
  3805                           	opt callstack 0
  3806  0010E8                     ___wmul:
  3807                           	opt callstack 24
  3808                           
  3809                           ;incstack = 0
  3810  0010E8  500B               	movf	___wmul@multiplier,w,c
  3811  0010EA  020D               	mulwf	___wmul@multiplicand,c
  3812  0010EC  CFF3 F00F          	movff	prodl,___wmul@product
  3813  0010F0  CFF4 F010          	movff	prodh,___wmul@product+1
  3814  0010F4  500B               	movf	___wmul@multiplier,w,c
  3815  0010F6  020E               	mulwf	___wmul@multiplicand+1,c
  3816  0010F8  50F3               	movf	prodl,w,c
  3817  0010FA  2610               	addwf	___wmul@product+1,f,c
  3818  0010FC  500C               	movf	___wmul@multiplier+1,w,c
  3819  0010FE  020D               	mulwf	___wmul@multiplicand,c
  3820  001100  50F3               	movf	prodl,w,c
  3821  001102  2610               	addwf	___wmul@product+1,f,c
  3822  001104  C00F  F00B         	movff	___wmul@product,?___wmul
  3823  001108  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3824  00110C  0012               	return		;funcret
  3825  00110E                     __end_of___wmul:
  3826                           	opt callstack 0
  3827                           
  3828 ;; *************** function ___awdiv *****************
  3829 ;; Defined at:
  3830 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  dividend        2   16[COMRAM] int 
  3833 ;;  divisor         2   18[COMRAM] int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  quotient        2   22[COMRAM] int 
  3836 ;;  sign            1   21[COMRAM] unsigned char 
  3837 ;;  counter         1   20[COMRAM] unsigned char 
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  2   16[COMRAM] int 
  3840 ;; Registers used:
  3841 ;;		wreg, status,2, status,0
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3847 ;;      Params:         4       0       0       0
  3848 ;;      Locals:         4       0       0       0
  3849 ;;      Temps:          0       0       0       0
  3850 ;;      Totals:         8       0       0       0
  3851 ;;Total ram usage:        8 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    3
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		_setMotorPWM
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           	psect	text27
  3862  000B12                     __ptext27:
  3863                           	opt callstack 0
  3864  000B12                     ___awdiv:
  3865                           	opt callstack 24
  3866                           
  3867                           ;incstack = 0
  3868  000B12  0E00               	movlw	0
  3869  000B14  6E16               	movwf	___awdiv@sign,c
  3870  000B16  AE14               	btfss	___awdiv@divisor+1,7,c
  3871  000B18  D006               	goto	l2253
  3872  000B1A  6C13               	negf	___awdiv@divisor,c
  3873  000B1C  1E14               	comf	___awdiv@divisor+1,f,c
  3874  000B1E  B0D8               	btfsc	status,0,c
  3875  000B20  2A14               	incf	___awdiv@divisor+1,f,c
  3876  000B22  0E01               	movlw	1
  3877  000B24  6E16               	movwf	___awdiv@sign,c
  3878  000B26                     l2253:
  3879  000B26  AE12               	btfss	___awdiv@dividend+1,7,c
  3880  000B28  D006               	goto	l2259
  3881  000B2A  6C11               	negf	___awdiv@dividend,c
  3882  000B2C  1E12               	comf	___awdiv@dividend+1,f,c
  3883  000B2E  B0D8               	btfsc	status,0,c
  3884  000B30  2A12               	incf	___awdiv@dividend+1,f,c
  3885  000B32  0E01               	movlw	1
  3886  000B34  1A16               	xorwf	___awdiv@sign,f,c
  3887  000B36                     l2259:
  3888  000B36  0E00               	movlw	0
  3889  000B38  6E18               	movwf	___awdiv@quotient+1,c
  3890  000B3A  0E00               	movlw	0
  3891  000B3C  6E17               	movwf	___awdiv@quotient,c
  3892  000B3E  5013               	movf	___awdiv@divisor,w,c
  3893  000B40  1014               	iorwf	___awdiv@divisor+1,w,c
  3894  000B42  B4D8               	btfsc	status,2,c
  3895  000B44  D01C               	goto	l2281
  3896  000B46  0E01               	movlw	1
  3897  000B48  6E15               	movwf	___awdiv@counter,c
  3898  000B4A  D004               	goto	l2267
  3899  000B4C                     l2265:
  3900  000B4C  90D8               	bcf	status,0,c
  3901  000B4E  3613               	rlcf	___awdiv@divisor,f,c
  3902  000B50  3614               	rlcf	___awdiv@divisor+1,f,c
  3903  000B52  2A15               	incf	___awdiv@counter,f,c
  3904  000B54                     l2267:
  3905  000B54  AE14               	btfss	___awdiv@divisor+1,7,c
  3906  000B56  D7FA               	goto	l2265
  3907  000B58                     u1360:
  3908  000B58  90D8               	bcf	status,0,c
  3909  000B5A  3617               	rlcf	___awdiv@quotient,f,c
  3910  000B5C  3618               	rlcf	___awdiv@quotient+1,f,c
  3911  000B5E  5013               	movf	___awdiv@divisor,w,c
  3912  000B60  5C11               	subwf	___awdiv@dividend,w,c
  3913  000B62  5014               	movf	___awdiv@divisor+1,w,c
  3914  000B64  5812               	subwfb	___awdiv@dividend+1,w,c
  3915  000B66  A0D8               	btfss	status,0,c
  3916  000B68  D005               	goto	l2277
  3917  000B6A  5013               	movf	___awdiv@divisor,w,c
  3918  000B6C  5E11               	subwf	___awdiv@dividend,f,c
  3919  000B6E  5014               	movf	___awdiv@divisor+1,w,c
  3920  000B70  5A12               	subwfb	___awdiv@dividend+1,f,c
  3921  000B72  8017               	bsf	___awdiv@quotient,0,c
  3922  000B74                     l2277:
  3923  000B74  90D8               	bcf	status,0,c
  3924  000B76  3214               	rrcf	___awdiv@divisor+1,f,c
  3925  000B78  3213               	rrcf	___awdiv@divisor,f,c
  3926  000B7A  2E15               	decfsz	___awdiv@counter,f,c
  3927  000B7C  D7ED               	goto	u1360
  3928  000B7E                     l2281:
  3929  000B7E  5016               	movf	___awdiv@sign,w,c
  3930  000B80  B4D8               	btfsc	status,2,c
  3931  000B82  D004               	goto	l2285
  3932  000B84  6C17               	negf	___awdiv@quotient,c
  3933  000B86  1E18               	comf	___awdiv@quotient+1,f,c
  3934  000B88  B0D8               	btfsc	status,0,c
  3935  000B8A  2A18               	incf	___awdiv@quotient+1,f,c
  3936  000B8C                     l2285:
  3937  000B8C  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3938  000B90  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3939  000B94  0012               	return		;funcret
  3940  000B96                     __end_of___awdiv:
  3941                           	opt callstack 0
  3942                           
  3943 ;; *************** function _InterruptHandlerLow *****************
  3944 ;; Defined at:
  3945 ;;		line 93 in file "main.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          3       0       0       0
  3962 ;;      Totals:         3       0       0       0
  3963 ;;Total ram usage:        3 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    2
  3966 ;; This function calls:
  3967 ;;		Nothing
  3968 ;; This function is called by:
  3969 ;;		Interrupt level 1
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	intcodelo
  3974  000018                     __pintcodelo:
  3975                           	opt callstack 0
  3976  000018                     _InterruptHandlerLow:
  3977                           	opt callstack 22
  3978                           
  3979                           ;incstack = 0
  3980  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3981  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3982  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3983  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3984                           
  3985                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1 || robot_mode == 0))
  3986  000026  A4F2               	btfss	4082,2,c	;volatile
  3987  000028  D00D               	goto	i1l70
  3988  00002A  0443               	decf	_robot_mode,w,c	;volatile
  3989  00002C  B4D8               	btfsc	status,2,c
  3990  00002E  D003               	goto	i1u62_20
  3991  000030  5043               	movf	_robot_mode,w,c	;volatile
  3992  000032  A4D8               	btfss	status,2,c
  3993  000034  D007               	goto	i1l70
  3994  000036                     i1u62_20:
  3995                           
  3996                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3997  000036  0E01               	movlw	1
  3998  000038  2644               	addwf	_movement_time,f,c	;volatile
  3999  00003A  0E00               	movlw	0
  4000  00003C  2245               	addwfc	_movement_time+1,f,c	;volatile
  4001  00003E  2246               	addwfc	_movement_time+2,f,c	;volatile
  4002  000040  2247               	addwfc	_movement_time+3,f,c	;volatile
  4003  000042  D00B               	goto	i1l1629
  4004  000044                     i1l70:
  4005  000044  A4F2               	btfss	4082,2,c	;volatile
  4006  000046  D009               	goto	i1l1629
  4007  000048  0E02               	movlw	2
  4008  00004A  1843               	xorwf	_robot_mode,w,c	;volatile
  4009  00004C  A4D8               	btfss	status,2,c
  4010  00004E  D005               	goto	i1l1629
  4011                           
  4012                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  4013  000050  0644               	decf	_movement_time,f,c	;volatile
  4014  000052  0E00               	movlw	0
  4015  000054  5A45               	subwfb	_movement_time+1,f,c	;volatile
  4016  000056  5A46               	subwfb	_movement_time+2,f,c	;volatile
  4017  000058  5A47               	subwfb	_movement_time+3,f,c	;volatile
  4018  00005A                     i1l1629:
  4019                           
  4020                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  4021                           
  4022                           ;main.c: 108:     else
  4023                           
  4024                           ;main.c: 106:     }
  4025                           
  4026                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  4027  00005A  94F2               	bcf	4082,2,c	;volatile
  4028  00005C  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4029  000060  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4030  000064  C008  FFD8         	movff	??_InterruptHandlerLow,status
  4031  000068  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4032  00006A  0010               	retfie	
  4033  00006C                     __end_of_InterruptHandlerLow:
  4034                           	opt callstack 0
  4035                           
  4036 ;; *************** function _InterruptHandlerHigh *****************
  4037 ;; Defined at:
  4038 ;;		line 75 in file "main.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;		None
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  throwaway       1    0        unsigned char 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4052 ;;      Params:         0       0       0       0
  4053 ;;      Locals:         1       0       0       0
  4054 ;;      Temps:          2       0       0       0
  4055 ;;      Totals:         3       0       0       0
  4056 ;;Total ram usage:        3 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:    1
  4059 ;; This function calls:
  4060 ;;		_processRFID
  4061 ;; This function is called by:
  4062 ;;		Interrupt level 2
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	intcode
  4067  000008                     __pintcode:
  4068                           	opt callstack 0
  4069  000008                     _InterruptHandlerHigh:
  4070                           	opt callstack 22
  4071                           
  4072                           ;incstack = 0
  4073  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4074  00000A  EF18  F008         	goto	int_func
  4075                           
  4076                           	psect	intcode_body
  4077  001030                     __pintcode_body:
  4078                           	opt callstack 22
  4079  001030                     int_func:
  4080                           	opt callstack 22
  4081  001030  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4082  001034  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4083                           
  4084                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4085  001038  AA9E               	btfss	3998,5,c	;volatile
  4086  00103A  D00D               	goto	i2l63
  4087  00103C  0443               	decf	_robot_mode,w,c	;volatile
  4088  00103E  A4D8               	btfss	status,2,c
  4089  001040  D00A               	goto	i2l63
  4090                           
  4091                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4092  001042  0E86               	movlw	low _RFIDbuf
  4093  001044  6E01               	movwf	processRFID@RFIDbuf,c
  4094  001046  0E00               	movlw	high _RFIDbuf
  4095  001048  6E02               	movwf	processRFID@RFIDbuf+1,c
  4096  00104A  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4097  00104E  EC95  F007         	call	_processRFID	;wreg free
  4098  001052  6E48               	movwf	_RFID_flag,c	;volatile
  4099                           
  4100                           ;main.c: 83:     }
  4101  001054  D001               	goto	i2l65
  4102  001056                     i2l63:
  4103  001056  50AE               	movf	4014,w,c	;volatile
  4104  001058                     i2l65:
  4105  001058  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4106  00105C  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4107  001060  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4108  001062  0011               	retfie		f
  4109  001064                     __end_of_InterruptHandlerHigh:
  4110                           	opt callstack 0
  4111                           
  4112 ;; *************** function _processRFID *****************
  4113 ;; Defined at:
  4114 ;;		line 34 in file "RFID.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4117 ;;		 -> RFIDbuf(12), 
  4118 ;;  latestChar      1    2[COMRAM] unsigned char 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  i               1    3[COMRAM] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;                  1    wreg      unsigned char 
  4123 ;; Registers used:
  4124 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4130 ;;      Params:         3       0       0       0
  4131 ;;      Locals:         1       0       0       0
  4132 ;;      Temps:          0       0       0       0
  4133 ;;      Totals:         4       0       0       0
  4134 ;;Total ram usage:        4 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_InterruptHandlerHigh
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text30
  4144  000F2A                     __ptext30:
  4145                           	opt callstack 0
  4146  000F2A                     _processRFID:
  4147                           	opt callstack 22
  4148                           
  4149                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4150                           
  4151                           ;incstack = 0
  4152  000F2A  0E03               	movlw	3
  4153  000F2C  1803               	xorwf	processRFID@latestChar,w,c
  4154  000F2E  A4D8               	btfss	status,2,c
  4155  000F30  D002               	goto	i2l1989
  4156                           
  4157                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4158  000F32  0E01               	movlw	1
  4159  000F34  0012               	return	
  4160  000F36                     i2l1989:
  4161                           
  4162                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4163  000F36  0E02               	movlw	2
  4164  000F38  1803               	xorwf	processRFID@latestChar,w,c
  4165  000F3A  A4D8               	btfss	status,2,c
  4166  000F3C  D012               	goto	i2l2009
  4167                           
  4168                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4169  000F3E  0E00               	movlw	0
  4170  000F40  6E42               	movwf	processRFID@position_in_buf,c
  4171                           
  4172                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4173  000F42  0E00               	movlw	0
  4174  000F44  6E04               	movwf	processRFID@i,c
  4175  000F46                     i2l1997:
  4176                           
  4177                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4178  000F46  5004               	movf	processRFID@i,w,c
  4179  000F48  2401               	addwf	processRFID@RFIDbuf,w,c
  4180  000F4A  6ED9               	movwf	fsr2l,c
  4181  000F4C  0E00               	movlw	0
  4182  000F4E  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4183  000F50  6EDA               	movwf	fsr2h,c
  4184  000F52  0E00               	movlw	0
  4185  000F54  6EDF               	movwf	indf2,c
  4186                           
  4187                           ;RFID.c: 56:            }
  4188  000F56  2A04               	incf	processRFID@i,f,c
  4189  000F58  0E0B               	movlw	11
  4190  000F5A  6404               	cpfsgt	processRFID@i,c
  4191  000F5C  D7F4               	goto	i2l1997
  4192  000F5E                     i2u114_40:
  4193                           
  4194                           ;RFID.c: 57:            return 0;
  4195  000F5E  0E00               	movlw	0
  4196  000F60  0012               	return	
  4197  000F62                     i2l2009:
  4198                           
  4199                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4200  000F62  5042               	movf	processRFID@position_in_buf,w,c
  4201  000F64  2401               	addwf	processRFID@RFIDbuf,w,c
  4202  000F66  6ED9               	movwf	fsr2l,c
  4203  000F68  0E00               	movlw	0
  4204  000F6A  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4205  000F6C  6EDA               	movwf	fsr2h,c
  4206  000F6E  C003  FFDF         	movff	processRFID@latestChar,indf2
  4207                           
  4208                           ;RFID.c: 63:             position_in_buf++;
  4209  000F72  2A42               	incf	processRFID@position_in_buf,f,c
  4210  000F74  D7F4               	goto	i2u114_40
  4211  000F76                     __end_of_processRFID:
  4212                           	opt callstack 0
  4213                           
  4214                           	psect	rparam
  4215  0000                     
  4216                           	psect	temp
  4217  000049                     btemp:
  4218                           	opt callstack 0
  4219  000049                     	ds	1
  4220  0000                     int$flags	set	btemp
  4221  0000                     wtemp8	set	btemp+1
  4222  0000                     ttemp5	set	btemp+1
  4223  0000                     ttemp6	set	btemp+4
  4224  0000                     ttemp7	set	btemp+8
  4225                           tosu	equ	0xFFF
  4226                           tosh	equ	0xFFE
  4227                           tosl	equ	0xFFD
  4228                           stkptr	equ	0xFFC
  4229                           pclatu	equ	0xFFB
  4230                           pclath	equ	0xFFA
  4231                           pcl	equ	0xFF9
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           prodh	equ	0xFF4
  4237                           prodl	equ	0xFF3
  4238                           indf0	equ	0xFEF
  4239                           postinc0	equ	0xFEE
  4240                           postdec0	equ	0xFED
  4241                           preinc0	equ	0xFEC
  4242                           plusw0	equ	0xFEB
  4243                           fsr0h	equ	0xFEA
  4244                           fsr0l	equ	0xFE9
  4245                           wreg	equ	0xFE8
  4246                           indf1	equ	0xFE7
  4247                           postinc1	equ	0xFE6
  4248                           postdec1	equ	0xFE5
  4249                           preinc1	equ	0xFE4
  4250                           plusw1	equ	0xFE3
  4251                           fsr1h	equ	0xFE2
  4252                           fsr1l	equ	0xFE1
  4253                           bsr	equ	0xFE0
  4254                           indf2	equ	0xFDF
  4255                           postinc2	equ	0xFDE
  4256                           postdec2	equ	0xFDD
  4257                           preinc2	equ	0xFDC
  4258                           plusw2	equ	0xFDB
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8


Data Sizes:
    Strings     166
    Constant    0
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      72
    BANK0           160     22      72
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1864_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_9(CODE[16]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[16]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_scanForBeacon
    _waitForInput->_LCD_String
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_stop
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _SetLine->_SendLCD
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   53468
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4806
                                             16 COMRAM     4     4      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15741
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4896
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       19    11      8   11801
                                             42 COMRAM    19    11      8
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    3039
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       12     8      4     400
                                             10 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6843
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        14     4     10    6967
                                             42 COMRAM    14     4     10
                           _ClearLCD
                         _LCD_String
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3D      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90       3        0.0%
DATA                 0      0      90      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 09:55:17 2020

                           l55 0FFE                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l123 06EE                            l345 0D44            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0098  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2311 10A6                           l2305 06C6                           l2315 10B8  
                         l2253 0B26                           l2415 0CC4                           l2431 0C42  
                         l2265 0B4C                           l2281 0B7E                           l2425 0D06  
                         l2441 0C84                           l2409 0C02                           l2267 0B54  
                         l2259 0B36                           l2291 0E72                           l2285 0B8C  
                         l2277 0B74                           l2605 05F6                           l2461 0434  
                         l2615 0E3C                           l2383 0EE4                           l2471 04E4  
                         l2455 03F2                           l2297 0EA6                           l2625 0E4E  
                         l2449 03B0                           l2619 0E4A                           l2379 0ED6  
                         l2571 053A                           l2483 0FCC                           l2651 0A3A  
                         l2637 0FA2                           l2661 0A52                           l2557 0D66  
                         l2399 0BC0                           l2585 0580                           l2499 0B0E  
                         l2667 0A84                           l2691 07D8                           l2683 0778  
                         l2669 0A8A                           l2695 0806                           l2687 07A4  
                         l2699 0836                           STR_1 037E                           STR_2 0341  
                         STR_3 0331                           STR_4 039A                           STR_5 0360  
                         STR_6 0321                           STR_7 0351                           STR_8 036F  
                         STR_9 0321                           u2007 09DC                           u1400 0EC6  
                         u2017 09EE                           u2107 107C                           u2027 0600  
                         u2117 108C                           u1325 106E                           u2037 0BF6  
                         u1326 1070                           _LATB 000F8A                           u2127 0E08  
                         u1407 0EBC                           u2047 0F1A                           u1360 0B58  
                         u1600 0464                           u2137 1178                           u2057 10BA  
                         u1434 069A                           u1610 0472                           u1435 0696  
                         u2067 0C78                           u1444 06E2                           u1700 04C2  
                         u1620 0474                           u1445 06DE                           u2077 0CFA  
                         u1390 0E96                           u1630 0482                           u1455 073A  
                         u2087 0EA0                           u1800 0E4A                           u1640 0484  
                         u1560 0448                           u1720 0FF8                           u2097 1152  
                         u1730 0B0A                           u1650 0492                           u1570 0452  
                         u1660 0494                           u1580 0454                           u1397 0E8C  
                         u1670 04A2                           u1590 0462                           u1680 04A4  
                         u1840 0A7E                           u1760 0D92                           u1690 04C0  
                         u1907 0D70                           u1780 05A0                           u1917 0A5C  
                         u1790 0622                           u1927 094C                           u1937 0962  
                         u1947 0972                           u1957 0980                           u1967 098E  
                         u1977 09A0                           u1987 09B2                           u1997 09C8  
                         i1l70 0044                           i2l63 1056                           i2l65 1058  
                         _dbuf 0066                           _main 074A                           _prec 0064  
                         _nout 0060                           fsr0h 000FEA                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0049                           _stop 0ECE                           prodh 000FF4  
                         prodl 000FF3                           start 006C                   ___param_bank 000000  
              __end_of_SendLCD 1094                __end_of_SetLine 10C2                 ??_display_RFID 0012  
                        ?_main 0001            main@searching_speed 0092                __end_of___awdiv 0B96  
                        STR_10 03A4                          STR_12 038D                          STR_13 0311  
                        STR_14 0301                          ?_stop 0022                          _T0CON 000FD5  
              ___awdiv@divisor 0013                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0015                          _RCREG 000FAE                          _E_TOG 1174  
                        _SPBRG 000FAF                   ?_init_sensor 0001                __end_of_initPWM 1142  
                        _flags 003E                          _setup 0FFA                          _width 0062  
             moveToBeacon@time 0031                          tablat 000FF5                          plusw2 000FDB  
           processRFID@RFIDbuf 0001                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          stop@i 0029                          status 000FD8  
                        wtemp8 004A            __size_of_LCD_String 005E               __end_of_ClearLCD 115C  
         moveForward@max_power 0026                 __CFG_MCLRE$OFF 000000                __initialization 10C2  
                 __end_of_main 0844                   __end_of_stop 0F2A                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000F                         ??_main 003E                         ??_stop 0028  
                __activetblptr 000002                         ?_E_TOG 0001                   ?_setMotorPWM 0019  
                 ?_moveForward 0022   scanForBeacon@beacon_location 0039               ___awdiv@dividend 0011  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       i1l1629 005A                         i2l2009 0F62                         i2l1997 0F46  
                       i2l1989 0F36                         _LCDout 0D98                    SendLCD@Byte 000E  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000D                      ??_SendLCD 000E                      ??_SetLine 000F  
                display_RFID@i 0012                         ___wmul 10E8                      ??___awdiv 0015  
             __end_of_init_LCD 09F6            init_motor_struct@mL 0022            init_motor_struct@mR 0024  
                       clear_0 10C8                         clear_1 10D4               ___awdiv@quotient 0017  
       __size_of_scanForBeacon 012E              moveToBeacon@speed 002F                      ??_initPWM 000D  
               _stopAndDisplay 09F6                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         stop@mL 0022  
                       stop@mR 0024                   ?_processRFID 0001              _init_motor_struct 0844  
         __end_of_display_RFID 0FFA             ?_init_motor_struct 0022                     __accesstop 0060  
      __end_of__initialization 10DA                  ___rparam_used 000001                    SetLine@line 000F  
                __end_of_E_TOG 1182            ??_init_motor_struct 0026                 __pcstackCOMRAM 0001  
                __end_of_setup 1030                   ??_LCD_String 0011         __end_of_stopAndDisplay 0A8E  
                      ??_E_TOG 000B  __size_of_InterruptHandlerHigh 105C                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 006C      __end_of_init_motor_struct 092E          __end_of_classify_data 0B12  
                   _check_RFID 03A8           __size_of_init_sensor 0018                        ??_setup 0010  
                ?_moveBackward 0022                     __pbssBANK0 0060                        ?_LCDout 0001  
                _scanForBeacon 04F8             __size_of_init_RFID 001A             __end_of_LCD_String 0ECE  
                      ?___wmul 000B                  ?_moveToBeacon 002B                        _CAP1CON 000F63  
              ?_stopAndDisplay 002B                     ??_ClearLCD 000F                        _RFIDbuf 0086  
                      i1u62_20 0036                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0028                 ?_scanForBeacon 002B           __size_of_setMotorPWM 0124  
         __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0031                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0029                  ?_waitForInput 0001  
           __size_of_turnRight 0082                        _SendLCD 1064                        __Hparam 0000  
                      _SetLine 1094                        __Lparam 0000                 ??_moveToBeacon 0035  
        processRFID@latestChar 0003                        ___awdiv 0B12                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 000B                        __pcinit 10C2  
                      __ramtop 0300                        __ptext0 074A                        __ptext1 0D1C  
                      __ptext2 09F6                        __ptext3 0FBA                        __ptext4 03A8  
                      __ptext5 0FFA                        __ptext6 115C                        __ptext7 110E  
                      __ptext8 092E                        __ptext9 1128              __end_of_init_RFID 1128  
             check_RFID@hexBuf 0015                        _initPWM 1128                   LCDout@number 000C  
            scanForBeacon@time 0031     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
            stop@initial_speed 0026                    ?_check_RFID 0011                 __pintcode_body 1030  
         end_of_initialization 10DA             setMotorPWM@PWMduty 0020                     ??_init_LCD 000F  
         __size_of_processRFID 004C                 ??_waitForInput 0011                  __Lmediumconst 0000  
                      int_func 1030                      _RFID_flag 0048                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0033                     _robot_mode 0043                     _returnHome 0F76  
                 _display_RFID 0FBA                      _PORTDbits 000F83              __end_of_turnRight 0C18  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                ??_scanForBeacon 0033             debug@smoothed_data 0040  
                moveForward@mL 0022                  moveForward@mR 0024                 __end_of_LCDout 0E10  
                    _TXSTAbits 000FAC                     main@motorL 0096                     main@motorR 009F  
         __end_of_moveBackward 0C9A            __size_of_check_RFID 0150                 __end_of___wmul 110E  
                  _BAUDCONbits 000FAA          classify_data@filtered 0015            start_initialization 10C2  
            __size_of_ClearLCD 001A           __end_of_moveToBeacon 0E70          classify_data@raw_data 000B  
                     ??_LCDout 000B          moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 1064  
        classify_data@smoothed 000D               ??_stopAndDisplay 0033                       ??___wmul 000F  
              scanForBeacon@mL 002B                scanForBeacon@mR 002D             turnRight@max_power 0026  
                  ?_returnHome 002B           __end_of_waitForInput 0D98                    __pbssCOMRAM 003E  
                ??_init_sensor 000B                  __pcstackBANK0 0092   __size_of_InterruptHandlerLow 0054  
            __size_of_init_LCD 00C8                       ?_SendLCD 000D                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 0011         __size_of_classify_data 0084  
           check_RFID@checksum 0026                    __pintcodelo 0018                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       ?_initPWM 000B                    __smallconst 0300  
               __size_of_E_TOG 000E                  waitForInput@i 0013                      _init_RFID 110E  
          stopAndDisplay@speed 002F                  ??_setMotorPWM 001B                  ??_moveForward 0028  
                 ??_check_RFID 0013                 __size_of_setup 0036                check_RFID@byte1 0021  
              check_RFID@byte2 0022                check_RFID@byte3 0023                check_RFID@byte4 0024  
              check_RFID@byte5 0025            __end_of_init_sensor 1174                 ___wmul@product 000F  
          __size_of_returnHome 0044                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u114_40 0F5E          __size_of_moveBackward 0082                    turnRight@mL 0022  
                  turnRight@mR 0024                       _PIR1bits 000F9E                       _RCONbits 000FD0  
           __end_of_check_RFID 04F8              ___wmul@multiplier 000B                   setMotorPWM@m 0019  
                 moveForward@i 0029               main@moving_speed 0094          __size_of_moveToBeacon 0060  
         _InterruptHandlerHigh 0008                       _ClearLCD 1142                  _movement_time 0044  
                   ?_init_RFID 0001                      _turnRight 0B96                  ??_processRFID 0004  
                _classify_data 0A8E                    _INTCON2bits 000FF1                 moveBackward@mL 0022  
               moveBackward@mR 0024                   _moveBackward 0C18            __end_of_setMotorPWM 074A  
          __end_of_moveForward 0D1C                    check_RFID@i 0027                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
               scanForBeacon@i 003A          __size_of_waitForInput 007C                   _moveToBeacon 0E10  
             __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A  
                  _init_sensor 115C                 ?_classify_data 000B              check_RFID@dataBuf 0011  
                   ?_turnRight 0022                       __ptext10 04F8                       __ptext11 0B96  
                     __ptext20 1142                       __ptext12 0ECE                       __ptext21 1064  
                     __ptext13 0A8E                       __ptext30 0F2A                       __ptext22 0D98  
                     __ptext14 1094                       __ptext23 1174                       __ptext15 0F76  
                     __ptext24 0844                       __ptext16 0C18                       __ptext25 0626  
                     __ptext17 0E10                       __ptext26 10E8                       __ptext18 0C9A  
                     __ptext27 0B12                       __ptext19 0E70          __end_of_scanForBeacon 0626  
                     _init_LCD 092E                  __size_of_main 00FA                  __size_of_stop 005C  
          __end_of_processRFID 0F76                   _waitForInput 0D1C             scanForBeacon@speed 002F  
                   turnRight@i 0029                       int$flags 0049                   ??_returnHome 0033  
          _InterruptHandlerLow 0018                     _LCD_String 0E70          scanForBeacon@raw_data 0037  
                   _INTCONbits 000FF2                    ??_init_RFID 000B                    _setMotorPWM 0626  
                  _moveForward 0C9A                       intlevel1 0000                       intlevel2 0000  
   scanForBeacon@smoothed_data 003C           ?_InterruptHandlerLow 0001             __end_of_returnHome 0FBA  
                   _OSCCONbits 000FD3     processRFID@position_in_buf 0042         ??_InterruptHandlerHigh 0005  
              ??_classify_data 000F               stopAndDisplay@mL 002B               stopAndDisplay@mR 002D  
              returnHome@speed 002F                    ??_turnRight 0028                    _processRFID 0F2A  
        ??_InterruptHandlerLow 0008                stopAndDisplay@i 0035                 returnHome@time 0031  
                 returnHome@mL 002B                   returnHome@mR 002D  
