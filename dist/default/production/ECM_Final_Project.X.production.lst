

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 25 17:55:20 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4331 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _CAP1CON	set	3939
    75  0000                     _DFLTCON	set	3936
    76  0000                     _ANSEL1	set	4025
    77  0000                     _ANSEL0	set	4024
    78  0000                     _T5CON	set	4023
    79  0000                     _IPR1bits	set	3999
    80  0000                     _PIE1bits	set	3997
    81  0000                     _RCSTAbits	set	4011
    82  0000                     _TXSTAbits	set	4012
    83  0000                     _BAUDCONbits	set	4010
    84  0000                     _SPBRGH	set	4016
    85  0000                     _SPBRG	set	4015
    86  0000                     _TRISAbits	set	3986
    87  0000                     _TRISCbits	set	3988
    88  0000                     _LATDbits	set	3980
    89  0000                     _LATCbits	set	3979
    90  0000                     _LATAbits	set	3977
    91  0000                     _LATB	set	3978
    92  0000                     _PTPERH	set	3962
    93  0000                     _PTPERL	set	3963
    94  0000                     _PWMCON1	set	3950
    95  0000                     _PWMCON0	set	3951
    96  0000                     _PTCON1	set	3966
    97  0000                     _PTCON0	set	3967
    98  0000                     _PORTDbits	set	3971
    99  0000                     _CAP2BUFL	set	3942
   100  0000                     _CAP2BUFH	set	3943
   101  0000                     _CAP1BUFL	set	3944
   102  0000                     _CAP1BUFH	set	3945
   103  0000                     _RCREG	set	4014
   104  0000                     _PIR1bits	set	3998
   105  0000                     _TRISDbits	set	3989
   106  0000                     _RCONbits	set	4048
   107  0000                     _INTCONbits	set	4082
   108  0000                     _OSCCONbits	set	4051
   109  0000                     _OSCCON	set	4051
   110                           
   111                           	psect	smallconst
   112  000300                     __psmallconst:
   113                           	opt callstack 0
   114  000300  00                 	db	0
   115  000301                     STR_4:
   116  000301  43                 	db	67	;'C'
   117  000302  48                 	db	72	;'H'
   118  000303  45                 	db	69	;'E'
   119  000304  43                 	db	67	;'C'
   120  000305  4B                 	db	75	;'K'
   121  000306  53                 	db	83	;'S'
   122  000307  55                 	db	85	;'U'
   123  000308  4D                 	db	77	;'M'
   124  000309  20                 	db	32
   125  00030A  46                 	db	70	;'F'
   126  00030B  41                 	db	65	;'A'
   127  00030C  49                 	db	73	;'I'
   128  00030D  4C                 	db	76	;'L'
   129  00030E  45                 	db	69	;'E'
   130  00030F  44                 	db	68	;'D'
   131  000310  00                 	db	0
   132  000311                     STR_3:
   133  000311  43                 	db	67	;'C'
   134  000312  48                 	db	72	;'H'
   135  000313  45                 	db	69	;'E'
   136  000314  43                 	db	67	;'C'
   137  000315  4B                 	db	75	;'K'
   138  000316  53                 	db	83	;'S'
   139  000317  55                 	db	85	;'U'
   140  000318  4D                 	db	77	;'M'
   141  000319  20                 	db	32
   142  00031A  50                 	db	80	;'P'
   143  00031B  41                 	db	65	;'A'
   144  00031C  53                 	db	83	;'S'
   145  00031D  53                 	db	83	;'S'
   146  00031E  45                 	db	69	;'E'
   147  00031F  44                 	db	68	;'D'
   148  000320  00                 	db	0
   149  000321                     STR_2:
   150  000321  52                 	db	82	;'R'
   151  000322  45                 	db	69	;'E'
   152  000323  53                 	db	83	;'S'
   153  000324  45                 	db	69	;'E'
   154  000325  54                 	db	84	;'T'
   155  000326  54                 	db	84	;'T'
   156  000327  49                 	db	73	;'I'
   157  000328  4E                 	db	78	;'N'
   158  000329  47                 	db	71	;'G'
   159  00032A  20                 	db	32
   160  00032B  52                 	db	82	;'R'
   161  00032C  4F                 	db	79	;'O'
   162  00032D  42                 	db	66	;'B'
   163  00032E  4F                 	db	79	;'O'
   164  00032F  54                 	db	84	;'T'
   165  000330  00                 	db	0
   166  000331                     STR_1:
   167  000331  72                 	db	114	;'r'
   168  000332  61                 	db	97	;'a'
   169  000333  77                 	db	119	;'w'
   170  000334  20                 	db	32
   171  000335  64                 	db	100	;'d'
   172  000336  75                 	db	117	;'u'
   173  000337  74                 	db	116	;'t'
   174  000338  79                 	db	121	;'y'
   175  000339  20                 	db	32
   176  00033A  63                 	db	99	;'c'
   177  00033B  79                 	db	121	;'y'
   178  00033C  63                 	db	99	;'c'
   179  00033D  6C                 	db	108	;'l'
   180  00033E  65                 	db	101	;'e'
   181  00033F  00                 	db	0
   182                           
   183                           ; #config settings
   184  000340  00                 	db	0	; dummy byte at the end
   185  0000                     
   186                           	psect	cinit
   187  000B80                     __pcinit:
   188                           	opt callstack 0
   189  000B80                     start_initialization:
   190                           	opt callstack 0
   191  000B80                     __initialization:
   192                           	opt callstack 0
   193                           
   194                           ; Clear objects allocated to COMRAM (14 bytes)
   195  000B80  EE00  F02B         	lfsr	0,__pbssCOMRAM
   196  000B84  0E0E               	movlw	14
   197  000B86                     clear_0:
   198  000B86  6AEE               	clrf	postinc0,c
   199  000B88  06E8               	decf	wreg,f,c
   200  000B8A  E1FD               	bnz	clear_0
   201  000B8C                     end_of_initialization:
   202                           	opt callstack 0
   203  000B8C                     __end_of__initialization:
   204                           	opt callstack 0
   205  000B8C  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   206  000B8E  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   207  000B90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   208  000B92  6EF8               	movwf	tblptru,c
   209  000B94  0100               	movlb	0
   210  000B96  EF49  F002         	goto	_main	;jump to C main() function
   211                           
   212                           	psect	bssCOMRAM
   213  00002B                     __pbssCOMRAM:
   214                           	opt callstack 0
   215  00002B                     processRFID@position_in_buf:
   216                           	opt callstack 0
   217  00002B                     	ds	1
   218  00002C                     _robot_mode:
   219                           	opt callstack 0
   220  00002C                     	ds	1
   221  00002D                     InterruptHandlerHigh@RFIDbuf:
   222                           	opt callstack 0
   223  00002D                     	ds	12
   224                           
   225                           	psect	cstackBANK0
   226  000060                     __pcstackBANK0:
   227                           	opt callstack 0
   228  000060                     ??_InterruptHandlerLow:
   229                           
   230                           ; 1 bytes @ 0x0
   231  000060                     	ds	1
   232  000061                     ??_LCDout:
   233  000061                     ?___wmul:
   234                           	opt callstack 0
   235  000061                     classify_data@left_smoothed:
   236                           	opt callstack 0
   237  000061                     ___wmul@multiplier:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0x1
   241  000061                     	ds	1
   242  000062                     LCDout@number:
   243                           	opt callstack 0
   244                           
   245                           ; 1 bytes @ 0x2
   246  000062                     	ds	1
   247  000063                     SendLCD@type:
   248                           	opt callstack 0
   249  000063                     classify_data@right_smoothed:
   250                           	opt callstack 0
   251  000063                     ___wmul@multiplicand:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0x3
   255  000063                     	ds	1
   256  000064                     SendLCD@Byte:
   257                           	opt callstack 0
   258                           
   259                           ; 1 bytes @ 0x4
   260  000064                     	ds	1
   261  000065                     ??_init_LCD:
   262  000065                     ??_ClearLCD:
   263  000065                     SetLine@line:
   264                           	opt callstack 0
   265  000065                     LCD_String@string:
   266                           	opt callstack 0
   267  000065                     ___wmul@product:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x5
   271  000065                     	ds	1
   272  000066                     
   273                           ; 1 bytes @ 0x6
   274  000066                     	ds	1
   275  000067                     ?___awdiv:
   276                           	opt callstack 0
   277  000067                     ___awdiv@dividend:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0x7
   281  000067                     	ds	2
   282  000069                     ___awdiv@divisor:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x9
   286  000069                     	ds	2
   287  00006B                     ___awdiv@counter:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0xB
   291  00006B                     	ds	1
   292  00006C                     ___awdiv@sign:
   293                           	opt callstack 0
   294                           
   295                           ; 1 bytes @ 0xC
   296  00006C                     	ds	1
   297  00006D                     ___awdiv@quotient:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0xD
   301  00006D                     	ds	2
   302  00006F                     process_signal@S:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0xF
   306  00006F                     	ds	2
   307  000071                     ??_process_signal:
   308                           
   309                           ; 1 bytes @ 0x11
   310  000071                     	ds	3
   311  000074                     ??_main:
   312                           
   313                           ; 1 bytes @ 0x14
   314  000074                     	ds	2
   315  000076                     main@temp:
   316                           	opt callstack 0
   317                           
   318                           ; 32 bytes @ 0x16
   319  000076                     	ds	33
   320  000097                     main@i:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x37
   324  000097                     	ds	2
   325  000099                     main@sensorL:
   326                           	opt callstack 0
   327                           
   328                           ; 4 bytes @ 0x39
   329  000099                     	ds	4
   330  00009D                     main@sensorR:
   331                           	opt callstack 0
   332                           
   333                           ; 4 bytes @ 0x3D
   334  00009D                     	ds	4
   335                           
   336                           	psect	cstackCOMRAM
   337  000001                     __pcstackCOMRAM:
   338                           	opt callstack 0
   339  000001                     ??i2_LCDout:
   340  000001                     
   341                           ; 1 bytes @ 0x0
   342  000001                     	ds	1
   343  000002                     i2LCDout@number:
   344                           	opt callstack 0
   345                           
   346                           ; 1 bytes @ 0x1
   347  000002                     	ds	1
   348  000003                     i2SendLCD@type:
   349                           	opt callstack 0
   350                           
   351                           ; 1 bytes @ 0x2
   352  000003                     	ds	1
   353  000004                     i2SendLCD@Byte:
   354                           	opt callstack 0
   355                           
   356                           ; 1 bytes @ 0x3
   357  000004                     	ds	1
   358  000005                     ??i2_ClearLCD:
   359  000005                     i2SetLine@line:
   360                           	opt callstack 0
   361  000005                     i2LCD_String@string:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x4
   365  000005                     	ds	1
   366  000006                     processRFID@RFIDbuf:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x5
   370  000006                     	ds	1
   371  000007                     check_RFID@dataBuf:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x6
   375  000007                     	ds	1
   376  000008                     processRFID@latestChar:
   377                           	opt callstack 0
   378                           
   379                           ; 1 bytes @ 0x7
   380  000008                     	ds	1
   381  000009                     ??_check_RFID:
   382  000009                     processRFID@i:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x8
   386  000009                     	ds	2
   387  00000B                     processRFID@i_1106:
   388                           	opt callstack 0
   389  00000B                     check_RFID@hexBuf:
   390                           	opt callstack 0
   391                           
   392                           ; 12 bytes @ 0xA
   393  00000B                     	ds	12
   394  000017                     check_RFID@byte1:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x16
   398  000017                     	ds	1
   399  000018                     check_RFID@byte2:
   400                           	opt callstack 0
   401                           
   402                           ; 1 bytes @ 0x17
   403  000018                     	ds	1
   404  000019                     check_RFID@byte3:
   405                           	opt callstack 0
   406                           
   407                           ; 1 bytes @ 0x18
   408  000019                     	ds	1
   409  00001A                     check_RFID@byte4:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x19
   413  00001A                     	ds	1
   414  00001B                     check_RFID@byte5:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0x1A
   418  00001B                     	ds	1
   419  00001C                     check_RFID@checksum:
   420                           	opt callstack 0
   421                           
   422                           ; 1 bytes @ 0x1B
   423  00001C                     	ds	1
   424  00001D                     check_RFID@i:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x1C
   428  00001D                     	ds	2
   429  00001F                     ??_InterruptHandlerHigh:
   430                           
   431                           ; 1 bytes @ 0x1E
   432  00001F                     	ds	11
   433  00002A                     InterruptHandlerHigh@RFID_flag:
   434                           	opt callstack 0
   435                           
   436                           ; 1 bytes @ 0x29
   437  00002A                     	ds	1
   438                           
   439 ;;
   440 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   441 ;;
   442 ;; *************** function _main *****************
   443 ;; Defined at:
   444 ;;		line 90 in file "main.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;		None
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  i               2   55[BANK0 ] int 
   449 ;;  temp           32   22[BANK0 ] unsigned char [32]
   450 ;;  beacon_locat    1    0        unsigned char 
   451 ;;  motorR          9    0        struct DC_motor
   452 ;;  motorL          9    0        struct DC_motor
   453 ;;  sensorR         4   61[BANK0 ] struct Sensor
   454 ;;  sensorL         4   57[BANK0 ] struct Sensor
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   464 ;;      Params:         0       0       0       0
   465 ;;      Locals:         0      43       0       0
   466 ;;      Temps:          0       2       0       0
   467 ;;      Totals:         0      45       0       0
   468 ;;Total ram usage:       45 bytes
   469 ;; Hardware stack levels required when called:   12
   470 ;; This function calls:
   471 ;;		_ClearLCD
   472 ;;		_LCD_String
   473 ;;		_SetLine
   474 ;;		_classify_data
   475 ;;		_process_signal
   476 ;;		_setup
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text0
   483  000492                     __ptext0:
   484                           	opt callstack 0
   485  000492                     _main:
   486                           	opt callstack 19
   487                           
   488                           ;main.c: 93:   setup();
   489                           
   490                           ;incstack = 0
   491  000492  ECB1  F005         	call	_setup	;wreg free
   492  000496  D051               	goto	l1962
   493  000498                     l1942:
   494                           
   495                           ;main.c: 105:       {;main.c: 107:           sensorL.raw_data = (int)((CAP1BUFH << 8) | 
      +                          CAP1BUFL);
   496  000498  5068               	movf	3944,w,c	;volatile
   497  00049A  CF69 F074          	movff	3945,??_main	;volatile
   498  00049E  0100               	movlb	0	; () banked
   499  0004A0  6B75               	clrf	(??_main+1)& (0+255),b
   500  0004A2  C074  F075         	movff	??_main,??_main+1
   501  0004A6  6B74               	clrf	??_main& (0+255),b
   502  0004A8  1174               	iorwf	??_main& (0+255),w,b
   503  0004AA  6F99               	movwf	main@sensorL& (0+255),b
   504  0004AC  5175               	movf	(??_main+1)& (0+255),w,b
   505  0004AE  6F9A               	movwf	(main@sensorL+1)& (0+255),b
   506                           
   507                           ;main.c: 108:           sensorR.raw_data = (int)((CAP2BUFH << 8) | CAP2BUFL);
   508  0004B0  5066               	movf	3942,w,c	;volatile
   509  0004B2  CF67 F074          	movff	3943,??_main	;volatile
   510  0004B6  6B75               	clrf	(??_main+1)& (0+255),b
   511  0004B8  C074  F075         	movff	??_main,??_main+1
   512  0004BC  6B74               	clrf	??_main& (0+255),b
   513  0004BE  1174               	iorwf	??_main& (0+255),w,b
   514  0004C0  6F9D               	movwf	main@sensorR& (0+255),b
   515  0004C2  5175               	movf	(??_main+1)& (0+255),w,b
   516  0004C4  6F9E               	movwf	(main@sensorR+1)& (0+255),b
   517                           
   518                           ; BSR set to: 0
   519                           ;main.c: 111:           process_signal(&sensorL);
   520  0004C6  0E99               	movlw	low main@sensorL
   521  0004C8  6F6F               	movwf	process_signal@S& (0+255),b
   522  0004CA  0E00               	movlw	high main@sensorL
   523  0004CC  6F70               	movwf	(process_signal@S+1)& (0+255),b
   524  0004CE  EC4F  F004         	call	_process_signal	;wreg free
   525                           
   526                           ;main.c: 112:           process_signal(&sensorR);
   527  0004D2  0E9D               	movlw	low main@sensorR
   528  0004D4  0100               	movlb	0	; () banked
   529  0004D6  6F6F               	movwf	process_signal@S& (0+255),b
   530  0004D8  0E00               	movlw	high main@sensorR
   531  0004DA  6F70               	movwf	(process_signal@S+1)& (0+255),b
   532  0004DC  EC4F  F004         	call	_process_signal	;wreg free
   533  0004E0  C09B  F061         	movff	main@sensorL+2,classify_data@left_smoothed
   534  0004E4  C09C  F062         	movff	main@sensorL+3,classify_data@left_smoothed+1
   535  0004E8  C09F  F063         	movff	main@sensorR+2,classify_data@right_smoothed
   536  0004EC  C0A0  F064         	movff	main@sensorR+3,classify_data@right_smoothed+1
   537  0004F0  EC02  F006         	call	_classify_data	;wreg free
   538                           
   539                           ;main.c: 120:           ClearLCD();
   540  0004F4  ECA1  F005         	call	_ClearLCD	;wreg free
   541                           
   542                           ;main.c: 121:           SetLine(1);
   543  0004F8  0E01               	movlw	1
   544  0004FA  EC44  F005         	call	_SetLine
   545                           
   546                           ;main.c: 122:           LCD_String("raw duty cycle");
   547  0004FE  0E31               	movlw	low STR_1
   548  000500  0100               	movlb	0	; () banked
   549  000502  6F65               	movwf	LCD_String@string& (0+255),b
   550  000504  0E03               	movlw	high STR_1
   551  000506  6F66               	movwf	(LCD_String@string+1)& (0+255),b
   552  000508  ECC8  F004         	call	_LCD_String	;wreg free
   553                           
   554                           ;main.c: 123:           SetLine(2);
   555  00050C  0E02               	movlw	2
   556  00050E  EC44  F005         	call	_SetLine
   557                           
   558                           ;main.c: 124:           char temp[32];;main.c: 126:           LCD_String(temp);
   559  000512  0E76               	movlw	low main@temp
   560  000514  0100               	movlb	0	; () banked
   561  000516  6F65               	movwf	LCD_String@string& (0+255),b
   562  000518  0E00               	movlw	high main@temp
   563  00051A  6F66               	movwf	(LCD_String@string+1)& (0+255),b
   564  00051C  ECC8  F004         	call	_LCD_String	;wreg free
   565                           
   566                           ;main.c: 127:           _delay((unsigned long)((100)*(8000000/4000.0)));
   567  000520  0E02               	movlw	2
   568  000522  0100               	movlb	0	; () banked
   569  000524  6F75               	movwf	(??_main+1)& (0+255),b
   570  000526  0E04               	movlw	4
   571  000528  6F74               	movwf	??_main& (0+255),b
   572  00052A  0EBA               	movlw	186
   573  00052C                     u1427:
   574  00052C  2EE8               	decfsz	wreg,f,c
   575  00052E  D7FE               	bra	u1427
   576  000530  2F74               	decfsz	??_main& (0+255),f,b
   577  000532  D7FC               	bra	u1427
   578  000534  2F75               	decfsz	(??_main+1)& (0+255),f,b
   579  000536  D7FA               	bra	u1427
   580  000538  F000               	nop	
   581  00053A                     l1962:
   582                           
   583                           ;main.c: 104:       while(robot_mode == 0)
   584  00053A  502C               	movf	_robot_mode,w,c	;volatile
   585  00053C  A4D8               	btfss	status,2,c
   586  00053E  D003               	goto	l1966
   587  000540  D7AB               	goto	l1942
   588  000542                     l1964:
   589                           
   590                           ;main.c: 132:       {;main.c: 134:           robot_mode = 2;
   591  000542  0E02               	movlw	2
   592  000544  6E2C               	movwf	_robot_mode,c	;volatile
   593  000546                     l1966:
   594                           
   595                           ;main.c: 131:       while(robot_mode == 1)
   596  000546  042C               	decf	_robot_mode,w,c	;volatile
   597  000548  A4D8               	btfss	status,2,c
   598  00054A  D02D               	goto	u1380
   599  00054C  D7FA               	goto	l1964
   600  00054E                     l1968:
   601                           
   602                           ;main.c: 141:           {;main.c: 142:               ClearLCD();
   603  00054E  ECA1  F005         	call	_ClearLCD	;wreg free
   604                           
   605                           ;main.c: 143:               LCD_String("RESETTING ROBOT");
   606  000552  0E21               	movlw	low STR_2
   607  000554  0100               	movlb	0	; () banked
   608  000556  6F65               	movwf	LCD_String@string& (0+255),b
   609  000558  0E03               	movlw	high STR_2
   610  00055A  6F66               	movwf	(LCD_String@string+1)& (0+255),b
   611  00055C  ECC8  F004         	call	_LCD_String	;wreg free
   612                           
   613                           ;main.c: 144:               for(int i=0; i<10;i++)
   614  000560  0E00               	movlw	0
   615  000562  0100               	movlb	0	; () banked
   616  000564  6F98               	movwf	(main@i+1)& (0+255),b
   617  000566  0E00               	movlw	0
   618  000568  6F97               	movwf	main@i& (0+255),b
   619  00056A                     l1978:
   620                           
   621                           ; BSR set to: 0
   622                           ;main.c: 145:               {;main.c: 146:                   _delay((unsigned long)((100
      +                          )*(8000000/4000.0)));
   623  00056A  0E02               	movlw	2
   624  00056C  0100               	movlb	0	; () banked
   625  00056E  6F75               	movwf	(??_main+1)& (0+255),b
   626  000570  0E04               	movlw	4
   627  000572  6F74               	movwf	??_main& (0+255),b
   628  000574  0EBA               	movlw	186
   629  000576                     u1437:
   630  000576  2EE8               	decfsz	wreg,f,c
   631  000578  D7FE               	bra	u1437
   632  00057A  2F74               	decfsz	??_main& (0+255),f,b
   633  00057C  D7FC               	bra	u1437
   634  00057E  2F75               	decfsz	(??_main+1)& (0+255),f,b
   635  000580  D7FA               	bra	u1437
   636  000582  F000               	nop	
   637                           
   638                           ;main.c: 147:               }
   639  000584  0100               	movlb	0	; () banked
   640  000586  4B97               	infsnz	main@i& (0+255),f,b
   641  000588  2B98               	incf	(main@i+1)& (0+255),f,b
   642  00058A  BF98               	btfsc	(main@i+1)& (0+255),7,b
   643  00058C  D7EE               	goto	l1978
   644  00058E  5198               	movf	(main@i+1)& (0+255),w,b
   645  000590  E104               	bnz	u1370
   646  000592  0E0A               	movlw	10
   647  000594  5D97               	subwf	main@i& (0+255),w,b
   648  000596  A0D8               	btfss	status,0,c
   649  000598  D7E8               	goto	l1978
   650  00059A                     u1370:
   651                           
   652                           ; BSR set to: 0
   653                           ;main.c: 148:               ClearLCD();
   654  00059A  ECA1  F005         	call	_ClearLCD	;wreg free
   655                           
   656                           ;main.c: 149:               robot_mode = 0;
   657  00059E  0E00               	movlw	0
   658  0005A0  6E2C               	movwf	_robot_mode,c	;volatile
   659  0005A2                     l1986:
   660                           
   661                           ;main.c: 140:           while(PORTDbits.RD2 == 1)
   662  0005A2  B483               	btfsc	3971,2,c	;volatile
   663  0005A4  D7D4               	goto	l1968
   664  0005A6                     u1380:
   665                           
   666                           ;main.c: 138:       while(robot_mode == 2)
   667  0005A6  0E02               	movlw	2
   668  0005A8  182C               	xorwf	_robot_mode,w,c	;volatile
   669  0005AA  A4D8               	btfss	status,2,c
   670  0005AC  D7C6               	goto	l1962
   671  0005AE  D7F9               	goto	l1986
   672  0005B0                     __end_of_main:
   673                           	opt callstack 0
   674                           
   675 ;; *************** function _setup *****************
   676 ;; Defined at:
   677 ;;		line 33 in file "main.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;                  1    wreg      void 
   684 ;; Registers used:
   685 ;;		wreg, status,2, status,0, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   691 ;;      Params:         0       0       0       0
   692 ;;      Locals:         0       0       0       0
   693 ;;      Temps:          0       0       0       0
   694 ;;      Totals:         0       0       0       0
   695 ;;Total ram usage:        0 bytes
   696 ;; Hardware stack levels used:    1
   697 ;; Hardware stack levels required when called:   11
   698 ;; This function calls:
   699 ;;		_init_LCD
   700 ;;		_init_RFID
   701 ;;		_init_sensors
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text1
   708  000B62                     __ptext1:
   709                           	opt callstack 0
   710  000B62                     _setup:
   711                           	opt callstack 19
   712                           
   713                           ;main.c: 36:     OSCCON = 0x72;
   714                           
   715                           ;incstack = 0
   716  000B62  0E72               	movlw	114
   717  000B64  6ED3               	movwf	4051,c	;volatile
   718  000B66                     l51:
   719  000B66  A4D3               	btfss	4051,2,c	;volatile
   720  000B68  D7FE               	goto	l51
   721                           
   722                           ;main.c: 38:     INTCONbits.GIEH = 1;
   723  000B6A  8EF2               	bsf	4082,7,c	;volatile
   724                           
   725                           ;main.c: 39:     INTCONbits.GIEL = 1;
   726  000B6C  8CF2               	bsf	4082,6,c	;volatile
   727                           
   728                           ;main.c: 40:     RCONbits.IPEN=1;
   729  000B6E  8ED0               	bsf	4048,7,c	;volatile
   730                           
   731                           ;main.c: 43:     init_LCD();
   732  000B70  ECD8  F002         	call	_init_LCD	;wreg free
   733                           
   734                           ;main.c: 44:     init_RFID();
   735  000B74  ECDA  F005         	call	_init_RFID	;wreg free
   736                           
   737                           ;main.c: 45:     init_sensors();
   738  000B78  ECCD  F005         	call	_init_sensors	;wreg free
   739                           
   740                           ;main.c: 47:     TRISDbits.RD2 = 1;
   741  000B7C  8495               	bsf	3989,2,c	;volatile
   742  000B7E  0012               	return		;funcret
   743  000B80                     __end_of_setup:
   744                           	opt callstack 0
   745                           
   746 ;; *************** function _init_sensors *****************
   747 ;; Defined at:
   748 ;;		line 14 in file "signal_processing.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   762 ;;      Params:         0       0       0       0
   763 ;;      Locals:         0       0       0       0
   764 ;;      Temps:          0       0       0       0
   765 ;;      Totals:         0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    7
   769 ;; This function calls:
   770 ;;		Nothing
   771 ;; This function is called by:
   772 ;;		_setup
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           	psect	text2
   777  000B9A                     __ptext2:
   778                           	opt callstack 0
   779  000B9A                     _init_sensors:
   780                           	opt callstack 22
   781                           
   782                           ;signal_processing.c: 16:     T5CON =0b00011001;
   783                           
   784                           ;incstack = 0
   785  000B9A  0E19               	movlw	25
   786  000B9C  6EB7               	movwf	4023,c	;volatile
   787                           
   788                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
   789  000B9E  8492               	bsf	3986,2,c	;volatile
   790                           
   791                           ;signal_processing.c: 18:     TRISAbits.RA3 = 1;
   792  000BA0  8692               	bsf	3986,3,c	;volatile
   793                           
   794                           ;signal_processing.c: 21:     ANSEL0 = 0;
   795  000BA2  0E00               	movlw	0
   796  000BA4  6EB8               	movwf	4024,c	;volatile
   797                           
   798                           ;signal_processing.c: 22:     ANSEL1 = 0;
   799  000BA6  0E00               	movlw	0
   800  000BA8  6EB9               	movwf	4025,c	;volatile
   801                           
   802                           ;signal_processing.c: 24:     DFLTCON = 0b00011000;
   803  000BAA  0E18               	movlw	24
   804  000BAC  6E60               	movwf	3936,c	;volatile
   805                           
   806                           ;signal_processing.c: 25:     CAP1CON = 0b01000110;
   807  000BAE  0E46               	movlw	70
   808  000BB0  6E63               	movwf	3939,c	;volatile
   809  000BB2  0012               	return		;funcret
   810  000BB4                     __end_of_init_sensors:
   811                           	opt callstack 0
   812                           
   813 ;; *************** function _init_RFID *****************
   814 ;; Defined at:
   815 ;;		line 13 in file "RFID.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;		None
   818 ;; Auto vars:     Size  Location     Type
   819 ;;		None
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   829 ;;      Params:         0       0       0       0
   830 ;;      Locals:         0       0       0       0
   831 ;;      Temps:          0       0       0       0
   832 ;;      Totals:         0       0       0       0
   833 ;;Total ram usage:        0 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    7
   836 ;; This function calls:
   837 ;;		Nothing
   838 ;; This function is called by:
   839 ;;		_setup
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text3
   844  000BB4                     __ptext3:
   845                           	opt callstack 0
   846  000BB4                     _init_RFID:
   847                           	opt callstack 22
   848                           
   849                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
   850                           
   851                           ;incstack = 0
   852  000BB4  8E94               	bsf	3988,7,c	;volatile
   853                           
   854                           ;RFID.c: 19:     SPBRG = 203;
   855  000BB6  0ECB               	movlw	203
   856  000BB8  6EAF               	movwf	4015,c	;volatile
   857                           
   858                           ;RFID.c: 20:     SPBRGH = 0;
   859  000BBA  0E00               	movlw	0
   860  000BBC  6EB0               	movwf	4016,c	;volatile
   861                           
   862                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
   863  000BBE  86AA               	bsf	4010,3,c	;volatile
   864                           
   865                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
   866  000BC0  84AC               	bsf	4012,2,c	;volatile
   867                           
   868                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
   869  000BC2  88AB               	bsf	4011,4,c	;volatile
   870                           
   871                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
   872  000BC4  8EAB               	bsf	4011,7,c	;volatile
   873                           
   874                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
   875  000BC6  8AAC               	bsf	4012,5,c	;volatile
   876                           
   877                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
   878  000BC8  8A9D               	bsf	3997,5,c	;volatile
   879                           
   880                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
   881  000BCA  8A9F               	bsf	3999,5,c	;volatile
   882  000BCC  0012               	return		;funcret
   883  000BCE                     __end_of_init_RFID:
   884                           	opt callstack 0
   885                           
   886 ;; *************** function _init_LCD *****************
   887 ;; Defined at:
   888 ;;		line 56 in file "LCDIO.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   902 ;;      Params:         0       0       0       0
   903 ;;      Locals:         0       0       0       0
   904 ;;      Temps:          0       1       0       0
   905 ;;      Totals:         0       1       0       0
   906 ;;Total ram usage:        1 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:   10
   909 ;; This function calls:
   910 ;;		_LCDout
   911 ;;		_SendLCD
   912 ;; This function is called by:
   913 ;;		_setup
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text4
   918  0005B0                     __ptext4:
   919                           	opt callstack 0
   920  0005B0                     _init_LCD:
   921                           	opt callstack 19
   922                           
   923                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
   924                           
   925                           ;incstack = 0
   926  0005B0  9094               	bcf	3988,0,c	;volatile
   927                           
   928                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
   929  0005B2  9E92               	bcf	3986,7,c	;volatile
   930                           
   931                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
   932  0005B4  9694               	bcf	3988,3,c	;volatile
   933                           
   934                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
   935  0005B6  9095               	bcf	3989,0,c	;volatile
   936                           
   937                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
   938  0005B8  9295               	bcf	3989,1,c	;volatile
   939                           
   940                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
   941  0005BA  9C92               	bcf	3986,6,c	;volatile
   942                           
   943                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
   944  0005BC  908C               	bcf	3980,0,c	;volatile
   945                           
   946                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
   947  0005BE  928C               	bcf	3980,1,c	;volatile
   948                           
   949                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
   950  0005C0  968B               	bcf	3979,3,c	;volatile
   951                           
   952                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
   953  0005C2  908B               	bcf	3979,0,c	;volatile
   954                           
   955                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
   956  0005C4  9C89               	bcf	3977,6,c	;volatile
   957                           
   958                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
   959  0005C6  9E89               	bcf	3977,7,c	;volatile
   960                           
   961                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
   962  0005C8  0E27               	movlw	39
   963  0005CA  0100               	movlb	0	; () banked
   964  0005CC  6F65               	movwf	??_init_LCD& (0+255),b
   965  0005CE  0EF5               	movlw	245
   966  0005D0                     u1447:
   967  0005D0  2EE8               	decfsz	wreg,f,c
   968  0005D2  D7FE               	bra	u1447
   969  0005D4  2F65               	decfsz	??_init_LCD& (0+255),f,b
   970  0005D6  D7FC               	bra	u1447
   971                           
   972                           ;LCDIO.c: 76:  LCDout(0b0011);
   973  0005D8  0E03               	movlw	3
   974  0005DA  EC11  F004         	call	_LCDout
   975                           
   976                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
   977  0005DE  0E0D               	movlw	13
   978  0005E0  0100               	movlb	0	; () banked
   979  0005E2  6F65               	movwf	??_init_LCD& (0+255),b
   980  0005E4  0EFB               	movlw	251
   981  0005E6                     u1457:
   982  0005E6  2EE8               	decfsz	wreg,f,c
   983  0005E8  D7FE               	bra	u1457
   984  0005EA  2F65               	decfsz	??_init_LCD& (0+255),f,b
   985  0005EC  D7FC               	bra	u1457
   986  0005EE  D000               	nop2	
   987                           
   988                           ;LCDIO.c: 78:  LCDout(0b0011);
   989  0005F0  0E03               	movlw	3
   990  0005F2  EC11  F004         	call	_LCDout
   991                           
   992                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
   993  0005F6  0E85               	movlw	133
   994  0005F8                     u1467:
   995  0005F8  2EE8               	decfsz	wreg,f,c
   996  0005FA  D7FE               	bra	u1467
   997  0005FC  F000               	nop	
   998                           
   999                           ;LCDIO.c: 80:  LCDout(0b0011);
  1000  0005FE  0E03               	movlw	3
  1001  000600  EC11  F004         	call	_LCDout
  1002                           
  1003                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1004  000604  0E21               	movlw	33
  1005  000606                     u1477:
  1006  000606  2EE8               	decfsz	wreg,f,c
  1007  000608  D7FE               	bra	u1477
  1008  00060A  F000               	nop	
  1009                           
  1010                           ;LCDIO.c: 82:  LCDout(0b0010);
  1011  00060C  0E02               	movlw	2
  1012  00060E  EC11  F004         	call	_LCDout
  1013                           
  1014                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1015  000612  0E21               	movlw	33
  1016  000614                     u1487:
  1017  000614  2EE8               	decfsz	wreg,f,c
  1018  000616  D7FE               	bra	u1487
  1019  000618  F000               	nop	
  1020                           
  1021                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1022  00061A  0E00               	movlw	0
  1023  00061C  0100               	movlb	0	; () banked
  1024  00061E  6F63               	movwf	SendLCD@type& (0+255),b
  1025  000620  0E28               	movlw	40
  1026  000622  EC28  F005         	call	_SendLCD
  1027                           
  1028                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1029  000626  0E21               	movlw	33
  1030  000628                     u1497:
  1031  000628  2EE8               	decfsz	wreg,f,c
  1032  00062A  D7FE               	bra	u1497
  1033  00062C  F000               	nop	
  1034                           
  1035                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1036  00062E  0E00               	movlw	0
  1037  000630  0100               	movlb	0	; () banked
  1038  000632  6F63               	movwf	SendLCD@type& (0+255),b
  1039  000634  0E08               	movlw	8
  1040  000636  EC28  F005         	call	_SendLCD
  1041                           
  1042                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1043  00063A  0E21               	movlw	33
  1044  00063C                     u1507:
  1045  00063C  2EE8               	decfsz	wreg,f,c
  1046  00063E  D7FE               	bra	u1507
  1047  000640  F000               	nop	
  1048                           
  1049                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1050  000642  0E00               	movlw	0
  1051  000644  0100               	movlb	0	; () banked
  1052  000646  6F63               	movwf	SendLCD@type& (0+255),b
  1053  000648  0E01               	movlw	1
  1054  00064A  EC28  F005         	call	_SendLCD
  1055                           
  1056                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1057  00064E  0E0D               	movlw	13
  1058  000650  0100               	movlb	0	; () banked
  1059  000652  6F65               	movwf	??_init_LCD& (0+255),b
  1060  000654  0EFB               	movlw	251
  1061  000656                     u1517:
  1062  000656  2EE8               	decfsz	wreg,f,c
  1063  000658  D7FE               	bra	u1517
  1064  00065A  2F65               	decfsz	??_init_LCD& (0+255),f,b
  1065  00065C  D7FC               	bra	u1517
  1066  00065E  D000               	nop2	
  1067                           
  1068                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1069  000660  0E00               	movlw	0
  1070  000662  0100               	movlb	0	; () banked
  1071  000664  6F63               	movwf	SendLCD@type& (0+255),b
  1072  000666  0E06               	movlw	6
  1073  000668  EC28  F005         	call	_SendLCD
  1074                           
  1075                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1076  00066C  0E21               	movlw	33
  1077  00066E                     u1527:
  1078  00066E  2EE8               	decfsz	wreg,f,c
  1079  000670  D7FE               	bra	u1527
  1080  000672  F000               	nop	
  1081                           
  1082                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1083  000674  0E00               	movlw	0
  1084  000676  0100               	movlb	0	; () banked
  1085  000678  6F63               	movwf	SendLCD@type& (0+255),b
  1086  00067A  0E0C               	movlw	12
  1087  00067C  EC28  F005         	call	_SendLCD
  1088                           
  1089                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1090  000680  0E21               	movlw	33
  1091  000682                     u1537:
  1092  000682  2EE8               	decfsz	wreg,f,c
  1093  000684  D7FE               	bra	u1537
  1094  000686  F000               	nop	
  1095  000688  0012               	return		;funcret
  1096  00068A                     __end_of_init_LCD:
  1097                           	opt callstack 0
  1098                           
  1099 ;; *************** function _process_signal *****************
  1100 ;; Defined at:
  1101 ;;		line 31 in file "signal_processing.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  S               2   15[BANK0 ] PTR struct Sensor
  1104 ;;		 -> main@sensorR(4), main@sensorL(4), 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  smoothing_co    1    0        unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1116 ;;      Params:         0       2       0       0
  1117 ;;      Locals:         0       1       0       0
  1118 ;;      Temps:          0       2       0       0
  1119 ;;      Totals:         0       5       0       0
  1120 ;;Total ram usage:        5 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    8
  1123 ;; This function calls:
  1124 ;;		___awdiv
  1125 ;;		___wmul
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text5
  1132  00089E                     __ptext5:
  1133                           	opt callstack 0
  1134  00089E                     _process_signal:
  1135                           	opt callstack 22
  1136                           
  1137                           ;signal_processing.c: 35:     (S->smoothed_signal) = ((S->raw_data * smoothing_constant)
  1138                           
  1139                           ;incstack = 0
  1140  00089E  0E00               	movlw	0
  1141  0008A0  0100               	movlb	0	; () banked
  1142  0008A2  6F62               	movwf	(___wmul@multiplier+1)& (0+255),b
  1143  0008A4  0E4B               	movlw	75
  1144  0008A6  6F61               	movwf	___wmul@multiplier& (0+255),b
  1145  0008A8  C06F  FFD9         	movff	process_signal@S,fsr2l
  1146  0008AC  C070  FFDA         	movff	process_signal@S+1,fsr2h
  1147  0008B0  CFDE F063          	movff	postinc2,___wmul@multiplicand
  1148  0008B4  CFDD F064          	movff	postdec2,___wmul@multiplicand+1
  1149  0008B8  EC8D  F005         	call	___wmul	;wreg free
  1150  0008BC  C061  F071         	movff	?___wmul,??_process_signal
  1151  0008C0  C062  F072         	movff	?___wmul+1,??_process_signal+1
  1152  0008C4  0E00               	movlw	0
  1153  0008C6  0100               	movlb	0	; () banked
  1154  0008C8  6F62               	movwf	(___wmul@multiplier+1)& (0+255),b
  1155  0008CA  0E19               	movlw	25
  1156  0008CC  6F61               	movwf	___wmul@multiplier& (0+255),b
  1157  0008CE  EE20 F002          	lfsr	2,2
  1158  0008D2  516F               	movf	process_signal@S& (0+255),w,b
  1159  0008D4  26D9               	addwf	fsr2l,f,c
  1160  0008D6  5170               	movf	(process_signal@S+1)& (0+255),w,b
  1161  0008D8  22DA               	addwfc	fsr2h,f,c
  1162  0008DA  CFDE F063          	movff	postinc2,___wmul@multiplicand
  1163  0008DE  CFDD F064          	movff	postdec2,___wmul@multiplicand+1
  1164  0008E2  EC8D  F005         	call	___wmul	;wreg free
  1165  0008E6  0100               	movlb	0	; () banked
  1166  0008E8  5161               	movf	?___wmul& (0+255),w,b
  1167  0008EA  2571               	addwf	??_process_signal& (0+255),w,b
  1168  0008EC  6F67               	movwf	___awdiv@dividend& (0+255),b
  1169  0008EE  5162               	movf	(?___wmul+1)& (0+255),w,b
  1170  0008F0  2172               	addwfc	(??_process_signal+1)& (0+255),w,b
  1171  0008F2  6F68               	movwf	(___awdiv@dividend+1)& (0+255),b
  1172  0008F4  0E00               	movlw	0
  1173  0008F6  6F6A               	movwf	(___awdiv@divisor+1)& (0+255),b
  1174  0008F8  0E64               	movlw	100
  1175  0008FA  6F69               	movwf	___awdiv@divisor& (0+255),b
  1176  0008FC  ECCE  F003         	call	___awdiv	;wreg free
  1177  000900  0100               	movlb	0	; () banked
  1178  000902  EE20 F002          	lfsr	2,2
  1179  000906  516F               	movf	process_signal@S& (0+255),w,b
  1180  000908  26D9               	addwf	fsr2l,f,c
  1181  00090A  5170               	movf	(process_signal@S+1)& (0+255),w,b
  1182  00090C  22DA               	addwfc	fsr2h,f,c
  1183  00090E  C067  FFDE         	movff	?___awdiv,postinc2
  1184  000912  C068  FFDD         	movff	?___awdiv+1,postdec2
  1185                           
  1186                           ; BSR set to: 0
  1187  000916  0012               	return		;funcret
  1188  000918                     __end_of_process_signal:
  1189                           	opt callstack 0
  1190                           
  1191 ;; *************** function ___wmul *****************
  1192 ;; Defined at:
  1193 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  multiplier      2    1[BANK0 ] unsigned int 
  1196 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  product         2    5[BANK0 ] unsigned int 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  2    1[BANK0 ] unsigned int 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0, prodl, prodh
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1208 ;;      Params:         0       4       0       0
  1209 ;;      Locals:         0       2       0       0
  1210 ;;      Temps:          0       0       0       0
  1211 ;;      Totals:         0       6       0       0
  1212 ;;Total ram usage:        6 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    7
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_process_signal
  1219 ;;		_setMotorPWM
  1220 ;; This function uses a non-reentrant model
  1221 ;;
  1222                           
  1223                           	psect	text6
  1224  000B1A                     __ptext6:
  1225                           	opt callstack 0
  1226  000B1A                     ___wmul:
  1227                           	opt callstack 22
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;incstack = 0
  1231  000B1A  0100               	movlb	0	; () banked
  1232  000B1C  5161               	movf	___wmul@multiplier& (0+255),w,b
  1233  000B1E  0363               	mulwf	___wmul@multiplicand& (0+255),b
  1234  000B20  CFF3 F065          	movff	prodl,___wmul@product
  1235  000B24  CFF4 F066          	movff	prodh,___wmul@product+1
  1236  000B28  5161               	movf	___wmul@multiplier& (0+255),w,b
  1237  000B2A  0364               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1238  000B2C  50F3               	movf	prodl,w,c
  1239  000B2E  2766               	addwf	(___wmul@product+1)& (0+255),f,b
  1240  000B30  5162               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1241  000B32  0363               	mulwf	___wmul@multiplicand& (0+255),b
  1242  000B34  50F3               	movf	prodl,w,c
  1243  000B36  2766               	addwf	(___wmul@product+1)& (0+255),f,b
  1244                           
  1245                           ; BSR set to: 0
  1246  000B38  C065  F061         	movff	___wmul@product,?___wmul
  1247  000B3C  C066  F062         	movff	___wmul@product+1,?___wmul+1
  1248                           
  1249                           ; BSR set to: 0
  1250  000B40  0012               	return		;funcret
  1251  000B42                     __end_of___wmul:
  1252                           	opt callstack 0
  1253                           
  1254 ;; *************** function ___awdiv *****************
  1255 ;; Defined at:
  1256 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  dividend        2    7[BANK0 ] int 
  1259 ;;  divisor         2    9[BANK0 ] int 
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  quotient        2   13[BANK0 ] int 
  1262 ;;  sign            1   12[BANK0 ] unsigned char 
  1263 ;;  counter         1   11[BANK0 ] unsigned char 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  2    7[BANK0 ] int 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1273 ;;      Params:         0       4       0       0
  1274 ;;      Locals:         0       4       0       0
  1275 ;;      Temps:          0       0       0       0
  1276 ;;      Totals:         0       8       0       0
  1277 ;;Total ram usage:        8 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    7
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_process_signal
  1284 ;;		_setMotorPWM
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text7
  1289  00079C                     __ptext7:
  1290                           	opt callstack 0
  1291  00079C                     ___awdiv:
  1292                           	opt callstack 22
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;incstack = 0
  1296  00079C  0E00               	movlw	0
  1297  00079E  0100               	movlb	0	; () banked
  1298  0007A0  6F6C               	movwf	___awdiv@sign& (0+255),b
  1299                           
  1300                           ; BSR set to: 0
  1301  0007A2  AF6A               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1302  0007A4  D006               	goto	l1850
  1303                           
  1304                           ; BSR set to: 0
  1305  0007A6  6D69               	negf	___awdiv@divisor& (0+255),b
  1306  0007A8  1F6A               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1307  0007AA  B0D8               	btfsc	status,0,c
  1308  0007AC  2B6A               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1309                           
  1310                           ; BSR set to: 0
  1311  0007AE  0E01               	movlw	1
  1312  0007B0  6F6C               	movwf	___awdiv@sign& (0+255),b
  1313  0007B2                     l1850:
  1314                           
  1315                           ; BSR set to: 0
  1316  0007B2  AF68               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1317  0007B4  D006               	goto	l1856
  1318                           
  1319                           ; BSR set to: 0
  1320  0007B6  6D67               	negf	___awdiv@dividend& (0+255),b
  1321  0007B8  1F68               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1322  0007BA  B0D8               	btfsc	status,0,c
  1323  0007BC  2B68               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1324                           
  1325                           ; BSR set to: 0
  1326  0007BE  0E01               	movlw	1
  1327  0007C0  1B6C               	xorwf	___awdiv@sign& (0+255),f,b
  1328  0007C2                     l1856:
  1329                           
  1330                           ; BSR set to: 0
  1331  0007C2  0E00               	movlw	0
  1332  0007C4  6F6E               	movwf	(___awdiv@quotient+1)& (0+255),b
  1333  0007C6  0E00               	movlw	0
  1334  0007C8  6F6D               	movwf	___awdiv@quotient& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337  0007CA  5169               	movf	___awdiv@divisor& (0+255),w,b
  1338  0007CC  116A               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1339  0007CE  B4D8               	btfsc	status,2,c
  1340  0007D0  D01C               	goto	l1878
  1341                           
  1342                           ; BSR set to: 0
  1343  0007D2  0E01               	movlw	1
  1344  0007D4  6F6B               	movwf	___awdiv@counter& (0+255),b
  1345  0007D6  D004               	goto	l1864
  1346  0007D8                     l1862:
  1347                           
  1348                           ; BSR set to: 0
  1349  0007D8  90D8               	bcf	status,0,c
  1350  0007DA  3769               	rlcf	___awdiv@divisor& (0+255),f,b
  1351  0007DC  376A               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1352  0007DE  2B6B               	incf	___awdiv@counter& (0+255),f,b
  1353  0007E0                     l1864:
  1354                           
  1355                           ; BSR set to: 0
  1356  0007E0  AF6A               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1357  0007E2  D7FA               	goto	l1862
  1358  0007E4                     u1240:
  1359                           
  1360                           ; BSR set to: 0
  1361  0007E4  90D8               	bcf	status,0,c
  1362  0007E6  376D               	rlcf	___awdiv@quotient& (0+255),f,b
  1363  0007E8  376E               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1364                           
  1365                           ; BSR set to: 0
  1366  0007EA  5169               	movf	___awdiv@divisor& (0+255),w,b
  1367  0007EC  5D67               	subwf	___awdiv@dividend& (0+255),w,b
  1368  0007EE  516A               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1369  0007F0  5968               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1370  0007F2  A0D8               	btfss	status,0,c
  1371  0007F4  D005               	goto	l1874
  1372                           
  1373                           ; BSR set to: 0
  1374  0007F6  5169               	movf	___awdiv@divisor& (0+255),w,b
  1375  0007F8  5F67               	subwf	___awdiv@dividend& (0+255),f,b
  1376  0007FA  516A               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1377  0007FC  5B68               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1378                           
  1379                           ; BSR set to: 0
  1380  0007FE  816D               	bsf	___awdiv@quotient& (0+255),0,b
  1381  000800                     l1874:
  1382                           
  1383                           ; BSR set to: 0
  1384  000800  90D8               	bcf	status,0,c
  1385  000802  336A               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1386  000804  3369               	rrcf	___awdiv@divisor& (0+255),f,b
  1387                           
  1388                           ; BSR set to: 0
  1389  000806  2F6B               	decfsz	___awdiv@counter& (0+255),f,b
  1390  000808  D7ED               	goto	u1240
  1391  00080A                     l1878:
  1392                           
  1393                           ; BSR set to: 0
  1394  00080A  516C               	movf	___awdiv@sign& (0+255),w,b
  1395  00080C  B4D8               	btfsc	status,2,c
  1396  00080E  D004               	goto	l1882
  1397                           
  1398                           ; BSR set to: 0
  1399  000810  6D6D               	negf	___awdiv@quotient& (0+255),b
  1400  000812  1F6E               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1401  000814  B0D8               	btfsc	status,0,c
  1402  000816  2B6E               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1403  000818                     l1882:
  1404                           
  1405                           ; BSR set to: 0
  1406  000818  C06D  F067         	movff	___awdiv@quotient,?___awdiv
  1407  00081C  C06E  F068         	movff	___awdiv@quotient+1,?___awdiv+1
  1408                           
  1409                           ; BSR set to: 0
  1410  000820  0012               	return		;funcret
  1411  000822                     __end_of___awdiv:
  1412                           	opt callstack 0
  1413                           
  1414 ;; *************** function _classify_data *****************
  1415 ;; Defined at:
  1416 ;;		line 44 in file "signal_processing.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  left_smoothe    2    1[BANK0 ] int 
  1419 ;;  right_smooth    2    3[BANK0 ] int 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      unsigned char 
  1424 ;; Registers used:
  1425 ;;		None
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1431 ;;      Params:         0       4       0       0
  1432 ;;      Locals:         0       0       0       0
  1433 ;;      Temps:          0       0       0       0
  1434 ;;      Totals:         0       4       0       0
  1435 ;;Total ram usage:        4 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    7
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text8
  1446  000C04                     __ptext8:
  1447                           	opt callstack 0
  1448  000C04                     _classify_data:
  1449                           	opt callstack 23
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;incstack = 0
  1453  000C04  0012               	return		;funcret
  1454  000C06                     __end_of_classify_data:
  1455                           	opt callstack 0
  1456                           
  1457 ;; *************** function _SetLine *****************
  1458 ;; Defined at:
  1459 ;;		line 107 in file "LCDIO.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  line            1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  line            1    5[BANK0 ] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1473 ;;      Params:         0       0       0       0
  1474 ;;      Locals:         0       1       0       0
  1475 ;;      Temps:          0       0       0       0
  1476 ;;      Totals:         0       1       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:   10
  1480 ;; This function calls:
  1481 ;;		_SendLCD
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text9
  1488  000A88                     __ptext9:
  1489                           	opt callstack 0
  1490  000A88                     _SetLine:
  1491                           	opt callstack 20
  1492                           
  1493                           ;incstack = 0
  1494                           ;SetLine@line stored from wreg
  1495  000A88  0100               	movlb	0	; () banked
  1496  000A8A  6F65               	movwf	SetLine@line& (0+255),b
  1497                           
  1498                           ;LCDIO.c: 109:     if(line == 1){
  1499  000A8C  0100               	movlb	0	; () banked
  1500  000A8E  0565               	decf	SetLine@line& (0+255),w,b
  1501  000A90  A4D8               	btfss	status,2,c
  1502  000A92  D005               	goto	l1908
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1506  000A94  0E00               	movlw	0
  1507  000A96  6F63               	movwf	SendLCD@type& (0+255),b
  1508  000A98  0E80               	movlw	128
  1509  000A9A  EC28  F005         	call	_SendLCD
  1510  000A9E                     l1908:
  1511                           
  1512                           ;LCDIO.c: 113:     if(line == 2){
  1513  000A9E  0E02               	movlw	2
  1514  000AA0  0100               	movlb	0	; () banked
  1515  000AA2  1965               	xorwf	SetLine@line& (0+255),w,b
  1516  000AA4  A4D8               	btfss	status,2,c
  1517  000AA6  D005               	goto	l1912
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1521  000AA8  0E00               	movlw	0
  1522  000AAA  6F63               	movwf	SendLCD@type& (0+255),b
  1523  000AAC  0EC0               	movlw	192
  1524  000AAE  EC28  F005         	call	_SendLCD
  1525  000AB2                     l1912:
  1526                           
  1527                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1528  000AB2  0E21               	movlw	33
  1529  000AB4                     u1547:
  1530  000AB4  2EE8               	decfsz	wreg,f,c
  1531  000AB6  D7FE               	bra	u1547
  1532  000AB8  F000               	nop	
  1533  000ABA  0012               	return		;funcret
  1534  000ABC                     __end_of_SetLine:
  1535                           	opt callstack 0
  1536                           
  1537 ;; *************** function _LCD_String *****************
  1538 ;; Defined at:
  1539 ;;		line 119 in file "LCDIO.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  string          2    5[BANK0 ] PTR unsigned char 
  1542 ;;		 -> STR_4(16), STR_3(16), STR_2(16), main@temp(32), 
  1543 ;;		 -> STR_1(15), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1555 ;;      Params:         0       2       0       0
  1556 ;;      Locals:         0       0       0       0
  1557 ;;      Temps:          0       0       0       0
  1558 ;;      Totals:         0       2       0       0
  1559 ;;Total ram usage:        2 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:   10
  1562 ;; This function calls:
  1563 ;;		_SendLCD
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text10
  1570  000990                     __ptext10:
  1571                           	opt callstack 0
  1572  000990                     _LCD_String:
  1573                           	opt callstack 20
  1574                           
  1575                           ;LCDIO.c: 121: while(*string != 0){
  1576                           
  1577                           ;incstack = 0
  1578  000990  D01C               	goto	l1922
  1579  000992                     l1916:
  1580                           
  1581                           ;LCDIO.c: 124: SendLCD(*string++,1);
  1582  000992  0E01               	movlw	1
  1583  000994  0100               	movlb	0	; () banked
  1584  000996  6F63               	movwf	SendLCD@type& (0+255),b
  1585  000998  C065  FFF6         	movff	LCD_String@string,tblptrl
  1586  00099C  C066  FFF7         	movff	LCD_String@string+1,tblptrh
  1587  0009A0  6AF8               	clrf	tblptru,c
  1588  0009A2  0E02               	movlw	(high __ramtop+-1)
  1589  0009A4  64F7               	cpfsgt	tblptrh,c
  1590  0009A6  D003               	bra	u1307
  1591  0009A8  0008               	tblrd		*
  1592  0009AA  50F5               	movf	tablat,w,c
  1593  0009AC  D005               	bra	u1300
  1594  0009AE                     u1307:
  1595  0009AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1596  0009B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1597  0009B6  50EF               	movf	indf0,w,c
  1598  0009B8                     u1300:
  1599  0009B8  EC28  F005         	call	_SendLCD
  1600  0009BC  0100               	movlb	0	; () banked
  1601  0009BE  4B65               	infsnz	LCD_String@string& (0+255),f,b
  1602  0009C0  2B66               	incf	(LCD_String@string+1)& (0+255),f,b
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1606  0009C2  0E21               	movlw	33
  1607  0009C4                     u1557:
  1608  0009C4  2EE8               	decfsz	wreg,f,c
  1609  0009C6  D7FE               	bra	u1557
  1610  0009C8  F000               	nop	
  1611  0009CA                     l1922:
  1612                           
  1613                           ;LCDIO.c: 121: while(*string != 0){
  1614  0009CA  C065  FFF6         	movff	LCD_String@string,tblptrl
  1615  0009CE  C066  FFF7         	movff	LCD_String@string+1,tblptrh
  1616  0009D2  6AF8               	clrf	tblptru,c
  1617  0009D4  0E02               	movlw	(high __ramtop+-1)
  1618  0009D6  64F7               	cpfsgt	tblptrh,c
  1619  0009D8  D003               	bra	u1317
  1620  0009DA  0008               	tblrd		*
  1621  0009DC  50F5               	movf	tablat,w,c
  1622  0009DE  D005               	bra	u1310
  1623  0009E0                     u1317:
  1624  0009E0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1625  0009E4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1626  0009E8  50EF               	movf	indf0,w,c
  1627  0009EA                     u1310:
  1628  0009EA  0900               	iorlw	0
  1629  0009EC  B4D8               	btfsc	status,2,c
  1630  0009EE  0012               	return	
  1631  0009F0  D7D0               	goto	l1916
  1632  0009F2                     __end_of_LCD_String:
  1633                           	opt callstack 0
  1634                           
  1635 ;; *************** function _ClearLCD *****************
  1636 ;; Defined at:
  1637 ;;		line 137 in file "LCDIO.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1651 ;;      Params:         0       0       0       0
  1652 ;;      Locals:         0       0       0       0
  1653 ;;      Temps:          0       1       0       0
  1654 ;;      Totals:         0       1       0       0
  1655 ;;Total ram usage:        1 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:   10
  1658 ;; This function calls:
  1659 ;;		_SendLCD
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664                           
  1665                           	psect	text11
  1666  000B42                     __ptext11:
  1667                           	opt callstack 0
  1668  000B42                     _ClearLCD:
  1669                           	opt callstack 20
  1670                           
  1671                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  1672                           
  1673                           ;incstack = 0
  1674  000B42  0E00               	movlw	0
  1675  000B44  0100               	movlb	0	; () banked
  1676  000B46  6F63               	movwf	SendLCD@type& (0+255),b
  1677  000B48  0E01               	movlw	1
  1678  000B4A  EC28  F005         	call	_SendLCD
  1679                           
  1680                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1681  000B4E  0E0D               	movlw	13
  1682  000B50  0100               	movlb	0	; () banked
  1683  000B52  6F65               	movwf	??_ClearLCD& (0+255),b
  1684  000B54  0EFB               	movlw	251
  1685  000B56                     u1567:
  1686  000B56  2EE8               	decfsz	wreg,f,c
  1687  000B58  D7FE               	bra	u1567
  1688  000B5A  2F65               	decfsz	??_ClearLCD& (0+255),f,b
  1689  000B5C  D7FC               	bra	u1567
  1690  000B5E  D000               	nop2	
  1691  000B60  0012               	return		;funcret
  1692  000B62                     __end_of_ClearLCD:
  1693                           	opt callstack 0
  1694                           
  1695 ;; *************** function _SendLCD *****************
  1696 ;; Defined at:
  1697 ;;		line 44 in file "LCDIO.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  Byte            1    wreg     unsigned char 
  1700 ;;  type            1    3[BANK0 ] unsigned char 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  Byte            1    4[BANK0 ] unsigned char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       1       0       0
  1713 ;;      Locals:         0       1       0       0
  1714 ;;      Temps:          0       0       0       0
  1715 ;;      Totals:         0       2       0       0
  1716 ;;Total ram usage:        2 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    9
  1719 ;; This function calls:
  1720 ;;		_LCDout
  1721 ;; This function is called by:
  1722 ;;		_init_LCD
  1723 ;;		_SetLine
  1724 ;;		_LCD_String
  1725 ;;		_ClearLCD
  1726 ;;		_ShiftLeft
  1727 ;;		_ShiftRight
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text12
  1732  000A50                     __ptext12:
  1733                           	opt callstack 0
  1734  000A50                     _SendLCD:
  1735                           	opt callstack 19
  1736                           
  1737                           ;incstack = 0
  1738                           ;SendLCD@Byte stored from wreg
  1739  000A50  0100               	movlb	0	; () banked
  1740  000A52  6F64               	movwf	SendLCD@Byte& (0+255),b
  1741                           
  1742                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  1743  000A54  0100               	movlb	0	; () banked
  1744  000A56  B163               	btfsc	SendLCD@type& (0+255),0,b
  1745  000A58  D002               	bra	u1175
  1746  000A5A  9E89               	bcf	3977,7,c	;volatile
  1747  000A5C  D001               	bra	u1176
  1748  000A5E                     u1175:
  1749  000A5E  8E89               	bsf	3977,7,c	;volatile
  1750  000A60                     u1176:
  1751                           
  1752                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  1753  000A60  0100               	movlb	0	; () banked
  1754  000A62  3964               	swapf	SendLCD@Byte& (0+255),w,b
  1755  000A64  0B0F               	andlw	15
  1756  000A66  0B0F               	andlw	15
  1757  000A68  EC11  F004         	call	_LCDout
  1758                           
  1759                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  1760  000A6C  0E06               	movlw	6
  1761  000A6E                     u1577:
  1762  000A6E  2EE8               	decfsz	wreg,f,c
  1763  000A70  D7FE               	bra	u1577
  1764  000A72  D000               	nop2	
  1765                           
  1766                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  1767  000A74  0100               	movlb	0	; () banked
  1768  000A76  5164               	movf	SendLCD@Byte& (0+255),w,b
  1769  000A78  0B0F               	andlw	15
  1770  000A7A  EC11  F004         	call	_LCDout
  1771                           
  1772                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1773  000A7E  0E21               	movlw	33
  1774  000A80                     u1587:
  1775  000A80  2EE8               	decfsz	wreg,f,c
  1776  000A82  D7FE               	bra	u1587
  1777  000A84  F000               	nop	
  1778  000A86  0012               	return		;funcret
  1779  000A88                     __end_of_SendLCD:
  1780                           	opt callstack 0
  1781                           
  1782 ;; *************** function _LCDout *****************
  1783 ;; Defined at:
  1784 ;;		line 31 in file "LCDIO.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  number          1    wreg     unsigned char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  number          1    2[BANK0 ] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1798 ;;      Params:         0       0       0       0
  1799 ;;      Locals:         0       1       0       0
  1800 ;;      Temps:          0       1       0       0
  1801 ;;      Totals:         0       2       0       0
  1802 ;;Total ram usage:        2 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    8
  1805 ;; This function calls:
  1806 ;;		_E_TOG
  1807 ;; This function is called by:
  1808 ;;		_SendLCD
  1809 ;;		_init_LCD
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text13
  1814  000822                     __ptext13:
  1815                           	opt callstack 0
  1816  000822                     _LCDout:
  1817                           	opt callstack 19
  1818                           
  1819                           ;incstack = 0
  1820                           ;LCDout@number stored from wreg
  1821  000822  0100               	movlb	0	; () banked
  1822  000824  6F62               	movwf	LCDout@number& (0+255),b
  1823                           
  1824                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  1825  000826  C062  F061         	movff	LCDout@number,??_LCDout
  1826  00082A  0E01               	movlw	1
  1827  00082C  0100               	movlb	0	; () banked
  1828  00082E  1761               	andwf	??_LCDout& (0+255),f,b
  1829  000830  508B               	movf	3979,w,c	;volatile
  1830  000832  1961               	xorwf	??_LCDout& (0+255),w,b
  1831  000834  0BFE               	andlw	-2
  1832  000836  1961               	xorwf	??_LCDout& (0+255),w,b
  1833  000838  6E8B               	movwf	3979,c	;volatile
  1834                           
  1835                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  1836  00083A  C062  F061         	movff	LCDout@number,??_LCDout
  1837  00083E  90D8               	bcf	status,0,c
  1838  000840  3361               	rrcf	??_LCDout& (0+255),f,b
  1839  000842  0E01               	movlw	1
  1840  000844  1761               	andwf	??_LCDout& (0+255),f,b
  1841  000846  4761               	rlncf	??_LCDout& (0+255),f,b
  1842  000848  4761               	rlncf	??_LCDout& (0+255),f,b
  1843  00084A  4761               	rlncf	??_LCDout& (0+255),f,b
  1844  00084C  508B               	movf	3979,w,c	;volatile
  1845  00084E  1961               	xorwf	??_LCDout& (0+255),w,b
  1846  000850  0BF7               	andlw	-9
  1847  000852  1961               	xorwf	??_LCDout& (0+255),w,b
  1848  000854  6E8B               	movwf	3979,c	;volatile
  1849                           
  1850                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  1851  000856  C062  F061         	movff	LCDout@number,??_LCDout
  1852  00085A  90D8               	bcf	status,0,c
  1853  00085C  3361               	rrcf	??_LCDout& (0+255),f,b
  1854  00085E  90D8               	bcf	status,0,c
  1855  000860  3361               	rrcf	??_LCDout& (0+255),f,b
  1856  000862  0E01               	movlw	1
  1857  000864  1761               	andwf	??_LCDout& (0+255),f,b
  1858  000866  508C               	movf	3980,w,c	;volatile
  1859  000868  1961               	xorwf	??_LCDout& (0+255),w,b
  1860  00086A  0BFE               	andlw	-2
  1861  00086C  1961               	xorwf	??_LCDout& (0+255),w,b
  1862  00086E  6E8C               	movwf	3980,c	;volatile
  1863                           
  1864                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  1865  000870  C062  F061         	movff	LCDout@number,??_LCDout
  1866  000874  90D8               	bcf	status,0,c
  1867  000876  3361               	rrcf	??_LCDout& (0+255),f,b
  1868  000878  90D8               	bcf	status,0,c
  1869  00087A  3361               	rrcf	??_LCDout& (0+255),f,b
  1870  00087C  90D8               	bcf	status,0,c
  1871  00087E  3361               	rrcf	??_LCDout& (0+255),f,b
  1872  000880  0E01               	movlw	1
  1873  000882  1761               	andwf	??_LCDout& (0+255),f,b
  1874  000884  4761               	rlncf	??_LCDout& (0+255),f,b
  1875  000886  508C               	movf	3980,w,c	;volatile
  1876  000888  1961               	xorwf	??_LCDout& (0+255),w,b
  1877  00088A  0BFD               	andlw	-3
  1878  00088C  1961               	xorwf	??_LCDout& (0+255),w,b
  1879  00088E  6E8C               	movwf	3980,c	;volatile
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;LCDIO.c: 39:  E_TOG();
  1883  000890  ECF4  F005         	call	_E_TOG	;wreg free
  1884                           
  1885                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1886  000894  0E03               	movlw	3
  1887  000896                     u1597:
  1888  000896  2EE8               	decfsz	wreg,f,c
  1889  000898  D7FE               	bra	u1597
  1890  00089A  F000               	nop	
  1891  00089C  0012               	return		;funcret
  1892  00089E                     __end_of_LCDout:
  1893                           	opt callstack 0
  1894                           
  1895 ;; *************** function _E_TOG *****************
  1896 ;; Defined at:
  1897 ;;		line 23 in file "LCDIO.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1911 ;;      Params:         0       0       0       0
  1912 ;;      Locals:         0       0       0       0
  1913 ;;      Temps:          0       0       0       0
  1914 ;;      Totals:         0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    7
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_LCDout
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text14
  1926  000BE8                     __ptext14:
  1927                           	opt callstack 0
  1928  000BE8                     _E_TOG:
  1929                           	opt callstack 19
  1930                           
  1931                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  1932                           
  1933                           ;incstack = 0
  1934  000BE8  8C89               	bsf	3977,6,c	;volatile
  1935                           
  1936                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  1937  000BEA  0E03               	movlw	3
  1938  000BEC                     u1607:
  1939  000BEC  2EE8               	decfsz	wreg,f,c
  1940  000BEE  D7FE               	bra	u1607
  1941  000BF0  F000               	nop	
  1942                           
  1943                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  1944  000BF2  9C89               	bcf	3977,6,c	;volatile
  1945  000BF4  0012               	return		;funcret
  1946  000BF6                     __end_of_E_TOG:
  1947                           	opt callstack 0
  1948                           
  1949 ;; *************** function _InterruptHandlerLow *****************
  1950 ;; Defined at:
  1951 ;;		line 83 in file "main.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		None
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1965 ;;      Params:         0       0       0       0
  1966 ;;      Locals:         0       0       0       0
  1967 ;;      Temps:          0       1       0       0
  1968 ;;      Totals:         0       1       0       0
  1969 ;;Total ram usage:        1 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    6
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		Interrupt level 1
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	intcodelo
  1980  000018                     __pintcodelo:
  1981                           	opt callstack 0
  1982  000018                     _InterruptHandlerLow:
  1983                           	opt callstack 19
  1984                           
  1985                           ;incstack = 0
  1986  000018  8039               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1987  00001A  CFE0 F060          	movff	bsr,??_InterruptHandlerLow
  1988  00001E  C060  FFE0         	movff	??_InterruptHandlerLow,bsr
  1989  000022  9039               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1990  000024  0010               	retfie	
  1991  000026                     __end_of_InterruptHandlerLow:
  1992                           	opt callstack 0
  1993                           
  1994 ;; *************** function _InterruptHandlerHigh *****************
  1995 ;; Defined at:
  1996 ;;		line 51 in file "main.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  throwaway       1    0        unsigned char 
  2001 ;;  RFID_flag       1   41[COMRAM] unsigned char 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2011 ;;      Params:         0       0       0       0
  2012 ;;      Locals:         2       0       0       0
  2013 ;;      Temps:         10       0       0       0
  2014 ;;      Totals:        12       0       0       0
  2015 ;;Total ram usage:       12 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    5
  2018 ;; This function calls:
  2019 ;;		_check_RFID
  2020 ;;		_processRFID
  2021 ;; This function is called by:
  2022 ;;		Interrupt level 2
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	intcode
  2027  000008                     __pintcode:
  2028                           	opt callstack 0
  2029  000008                     _InterruptHandlerHigh:
  2030                           	opt callstack 19
  2031                           
  2032                           ;incstack = 0
  2033  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2034  00000A  EF45  F003         	goto	int_func
  2035                           
  2036                           	psect	intcode_body
  2037  00068A                     __pintcode_body:
  2038                           	opt callstack 19
  2039  00068A                     int_func:
  2040                           	opt callstack 19
  2041  00068A  CFE9 F01F          	movff	fsr0l,??_InterruptHandlerHigh
  2042  00068E  CFEA F020          	movff	fsr0h,??_InterruptHandlerHigh+1
  2043  000692  CFE1 F021          	movff	fsr1l,??_InterruptHandlerHigh+2
  2044  000696  CFE2 F022          	movff	fsr1h,??_InterruptHandlerHigh+3
  2045  00069A  CFD9 F023          	movff	fsr2l,??_InterruptHandlerHigh+4
  2046  00069E  CFDA F024          	movff	fsr2h,??_InterruptHandlerHigh+5
  2047  0006A2  CFF6 F025          	movff	tblptrl,??_InterruptHandlerHigh+6
  2048  0006A6  CFF7 F026          	movff	tblptrh,??_InterruptHandlerHigh+7
  2049  0006AA  CFF8 F027          	movff	tblptru,??_InterruptHandlerHigh+8
  2050  0006AE  CFF5 F028          	movff	tablat,??_InterruptHandlerHigh+9
  2051                           
  2052                           ;main.c: 55:     if((PIR1bits.RCIF) && (robot_mode == 0))
  2053  0006B2  AA9E               	btfss	3998,5,c	;volatile
  2054  0006B4  D018               	goto	i2l59
  2055  0006B6  502C               	movf	_robot_mode,w,c	;volatile
  2056  0006B8  A4D8               	btfss	status,2,c
  2057  0006BA  D015               	goto	i2l59
  2058                           
  2059                           ;main.c: 56:     {;main.c: 60:         static char RFIDbuf[12];;main.c: 64:         char
      +                           RFID_flag = processRFID(RFIDbuf, RCREG);
  2060  0006BC  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  2061  0006BE  6E06               	movwf	processRFID@RFIDbuf,c
  2062  0006C0  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  2063  0006C2  6E07               	movwf	processRFID@RFIDbuf+1,c
  2064  0006C4  CFAE F008          	movff	4014,processRFID@latestChar	;volatile
  2065  0006C8  EC8A  F003         	call	_processRFID	;wreg free
  2066  0006CC  6E2A               	movwf	InterruptHandlerHigh@RFID_flag,c
  2067                           
  2068                           ;main.c: 68:         if(RFID_flag == 1)
  2069  0006CE  042A               	decf	InterruptHandlerHigh@RFID_flag,w,c
  2070  0006D0  A4D8               	btfss	status,2,c
  2071  0006D2  D00A               	goto	i2l64
  2072                           
  2073                           ;main.c: 69:         {;main.c: 70:             check_RFID(RFIDbuf);
  2074  0006D4  0E2D               	movlw	low InterruptHandlerHigh@RFIDbuf
  2075  0006D6  6E07               	movwf	check_RFID@dataBuf,c
  2076  0006D8  0E00               	movlw	high InterruptHandlerHigh@RFIDbuf
  2077  0006DA  6E08               	movwf	check_RFID@dataBuf+1,c
  2078  0006DC  ECA1  F001         	call	_check_RFID	;wreg free
  2079                           
  2080                           ;main.c: 71:             robot_mode = 1;
  2081  0006E0  0E01               	movlw	1
  2082  0006E2  6E2C               	movwf	_robot_mode,c	;volatile
  2083  0006E4  D001               	goto	i2l64
  2084  0006E6                     i2l59:
  2085  0006E6  50AE               	movf	4014,w,c	;volatile
  2086  0006E8                     i2l64:
  2087  0006E8  C028  FFF5         	movff	??_InterruptHandlerHigh+9,tablat
  2088  0006EC  C027  FFF8         	movff	??_InterruptHandlerHigh+8,tblptru
  2089  0006F0  C026  FFF7         	movff	??_InterruptHandlerHigh+7,tblptrh
  2090  0006F4  C025  FFF6         	movff	??_InterruptHandlerHigh+6,tblptrl
  2091  0006F8  C024  FFDA         	movff	??_InterruptHandlerHigh+5,fsr2h
  2092  0006FC  C023  FFD9         	movff	??_InterruptHandlerHigh+4,fsr2l
  2093  000700  C022  FFE2         	movff	??_InterruptHandlerHigh+3,fsr1h
  2094  000704  C021  FFE1         	movff	??_InterruptHandlerHigh+2,fsr1l
  2095  000708  C020  FFEA         	movff	??_InterruptHandlerHigh+1,fsr0h
  2096  00070C  C01F  FFE9         	movff	??_InterruptHandlerHigh,fsr0l
  2097  000710  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2098  000712  0011               	retfie		f
  2099  000714                     __end_of_InterruptHandlerHigh:
  2100                           	opt callstack 0
  2101                           
  2102 ;; *************** function _processRFID *****************
  2103 ;; Defined at:
  2104 ;;		line 34 in file "RFID.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  RFIDbuf         2    5[COMRAM] PTR unsigned char 
  2107 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  2108 ;;  latestChar      1    7[COMRAM] unsigned char 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  i               1   10[COMRAM] unsigned char 
  2111 ;;  i               2    8[COMRAM] int 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      unsigned char 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2121 ;;      Params:         3       0       0       0
  2122 ;;      Locals:         3       0       0       0
  2123 ;;      Temps:          0       0       0       0
  2124 ;;      Totals:         6       0       0       0
  2125 ;;Total ram usage:        6 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    4
  2128 ;; This function calls:
  2129 ;;		i2_ClearLCD
  2130 ;;		i2_SendLCD
  2131 ;;		i2_SetLine
  2132 ;; This function is called by:
  2133 ;;		_InterruptHandlerHigh
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text17
  2138  000714                     __ptext17:
  2139                           	opt callstack 0
  2140  000714                     _processRFID:
  2141                           	opt callstack 19
  2142                           
  2143                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  2144                           
  2145                           ;incstack = 0
  2146  000714  0E03               	movlw	3
  2147  000716  1808               	xorwf	processRFID@latestChar,w,c
  2148  000718  A4D8               	btfss	status,2,c
  2149  00071A  D020               	goto	i2l1554
  2150                           
  2151                           ;RFID.c: 43:     {;RFID.c: 44:         ClearLCD();
  2152  00071C  ECE7  F005         	call	i2_ClearLCD	;wreg free
  2153                           
  2154                           ;RFID.c: 45:         SetLine(1);
  2155  000720  0E01               	movlw	1
  2156  000722  EC76  F005         	call	i2_SetLine
  2157                           
  2158                           ;RFID.c: 46:         for(int i=0;i<10;i++)
  2159  000726  0E00               	movlw	0
  2160  000728  6E0A               	movwf	processRFID@i+1,c
  2161  00072A  0E00               	movlw	0
  2162  00072C  6E09               	movwf	processRFID@i,c
  2163  00072E                     i2l1542:
  2164                           
  2165                           ;RFID.c: 47:         {;RFID.c: 48:             SendLCD(RFIDbuf[i],1);
  2166  00072E  0E01               	movlw	1
  2167  000730  6E03               	movwf	i2SendLCD@type,c
  2168  000732  5009               	movf	processRFID@i,w,c
  2169  000734  2406               	addwf	processRFID@RFIDbuf,w,c
  2170  000736  6ED9               	movwf	fsr2l,c
  2171  000738  500A               	movf	processRFID@i+1,w,c
  2172  00073A  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  2173  00073C  6EDA               	movwf	fsr2h,c
  2174  00073E  50DF               	movf	indf2,w,c
  2175  000740  EC5E  F005         	call	i2_SendLCD
  2176                           
  2177                           ;RFID.c: 49:         }
  2178  000744  4A09               	infsnz	processRFID@i,f,c
  2179  000746  2A0A               	incf	processRFID@i+1,f,c
  2180  000748  BE0A               	btfsc	processRFID@i+1,7,c
  2181  00074A  D7F1               	goto	i2l1542
  2182  00074C  500A               	movf	processRFID@i+1,w,c
  2183  00074E  E104               	bnz	i2u77_40
  2184  000750  0E0A               	movlw	10
  2185  000752  5C09               	subwf	processRFID@i,w,c
  2186  000754  A0D8               	btfss	status,0,c
  2187  000756  D7EB               	goto	i2l1542
  2188  000758                     i2u77_40:
  2189                           
  2190                           ;RFID.c: 51:         return 1;
  2191  000758  0E01               	movlw	1
  2192  00075A  0012               	return	
  2193  00075C                     i2l1554:
  2194                           
  2195                           ;RFID.c: 54:     {;RFID.c: 57:        if(latestChar == 0x02)
  2196  00075C  0E02               	movlw	2
  2197  00075E  1808               	xorwf	processRFID@latestChar,w,c
  2198  000760  A4D8               	btfss	status,2,c
  2199  000762  D012               	goto	i2l1574
  2200                           
  2201                           ;RFID.c: 58:         {;RFID.c: 59:            position_in_buf = 0;
  2202  000764  0E00               	movlw	0
  2203  000766  6E2B               	movwf	processRFID@position_in_buf,c
  2204                           
  2205                           ;RFID.c: 60:            for(char i=0 ;i<12 ;i++)
  2206  000768  0E00               	movlw	0
  2207  00076A  6E0B               	movwf	processRFID@i_1106,c
  2208  00076C                     i2l1562:
  2209                           
  2210                           ;RFID.c: 61:            {;RFID.c: 62:                RFIDbuf[i] = 0;
  2211  00076C  500B               	movf	processRFID@i_1106,w,c
  2212  00076E  2406               	addwf	processRFID@RFIDbuf,w,c
  2213  000770  6ED9               	movwf	fsr2l,c
  2214  000772  0E00               	movlw	0
  2215  000774  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  2216  000776  6EDA               	movwf	fsr2h,c
  2217  000778  0E00               	movlw	0
  2218  00077A  6EDF               	movwf	indf2,c
  2219                           
  2220                           ;RFID.c: 63:            }
  2221  00077C  2A0B               	incf	processRFID@i_1106,f,c
  2222  00077E  0E0B               	movlw	11
  2223  000780  640B               	cpfsgt	processRFID@i_1106,c
  2224  000782  D7F4               	goto	i2l1562
  2225  000784                     i2u79_40:
  2226                           
  2227                           ;RFID.c: 65:            return 0;
  2228  000784  0E00               	movlw	0
  2229  000786  0012               	return	
  2230  000788                     i2l1574:
  2231                           
  2232                           ;RFID.c: 69:         {;RFID.c: 70:             RFIDbuf[position_in_buf] = latestChar;
  2233  000788  502B               	movf	processRFID@position_in_buf,w,c
  2234  00078A  2406               	addwf	processRFID@RFIDbuf,w,c
  2235  00078C  6ED9               	movwf	fsr2l,c
  2236  00078E  0E00               	movlw	0
  2237  000790  2007               	addwfc	processRFID@RFIDbuf+1,w,c
  2238  000792  6EDA               	movwf	fsr2h,c
  2239  000794  C008  FFDF         	movff	processRFID@latestChar,indf2
  2240                           
  2241                           ;RFID.c: 71:             position_in_buf++;
  2242  000798  2A2B               	incf	processRFID@position_in_buf,f,c
  2243  00079A  D7F4               	goto	i2u79_40
  2244  00079C                     __end_of_processRFID:
  2245                           	opt callstack 0
  2246                           
  2247 ;; *************** function i2_ClearLCD *****************
  2248 ;; Defined at:
  2249 ;;		line 137 in file "LCDIO.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;		None
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2263 ;;      Params:         0       0       0       0
  2264 ;;      Locals:         0       0       0       0
  2265 ;;      Temps:          1       0       0       0
  2266 ;;      Totals:         1       0       0       0
  2267 ;;Total ram usage:        1 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    3
  2270 ;; This function calls:
  2271 ;;		i2_SendLCD
  2272 ;; This function is called by:
  2273 ;;		_processRFID
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text18
  2278  000BCE                     __ptext18:
  2279                           	opt callstack 0
  2280  000BCE                     i2_ClearLCD:
  2281                           	opt callstack 19
  2282                           
  2283                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  2284                           
  2285                           ;incstack = 0
  2286  000BCE  0E00               	movlw	0
  2287  000BD0  6E03               	movwf	i2SendLCD@type,c
  2288  000BD2  0E01               	movlw	1
  2289  000BD4  EC5E  F005         	call	i2_SendLCD
  2290                           
  2291                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2292  000BD8  0E0D               	movlw	13
  2293  000BDA  6E05               	movwf	??i2_ClearLCD& (0+255),c
  2294  000BDC  0EFC               	movlw	252
  2295  000BDE                     i2u161_47:
  2296  000BDE  2EE8               	decfsz	wreg,f,c
  2297  000BE0  D7FE               	bra	i2u161_47
  2298  000BE2  2E05               	decfsz	??i2_ClearLCD& (0+255),f,c
  2299  000BE4  D7FC               	bra	i2u161_47
  2300  000BE6  0012               	return		;funcret
  2301  000BE8                     __end_ofi2_ClearLCD:
  2302                           	opt callstack 0
  2303                           
  2304 ;; *************** function _check_RFID *****************
  2305 ;; Defined at:
  2306 ;;		line 79 in file "RFID.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  dataBuf         2    6[COMRAM] PTR unsigned char 
  2309 ;;		 -> InterruptHandlerHigh@RFIDbuf(12), 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  i               2   28[COMRAM] int 
  2312 ;;  hexBuf         12   10[COMRAM] unsigned char [12]
  2313 ;;  checksum        1   27[COMRAM] unsigned char 
  2314 ;;  byte5           1   26[COMRAM] unsigned char 
  2315 ;;  byte4           1   25[COMRAM] unsigned char 
  2316 ;;  byte3           1   24[COMRAM] unsigned char 
  2317 ;;  byte2           1   23[COMRAM] unsigned char 
  2318 ;;  byte1           1   22[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2328 ;;      Params:         2       0       0       0
  2329 ;;      Locals:        20       0       0       0
  2330 ;;      Temps:          2       0       0       0
  2331 ;;      Totals:        24       0       0       0
  2332 ;;Total ram usage:       24 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    4
  2335 ;; This function calls:
  2336 ;;		i2_LCD_String
  2337 ;;		i2_SetLine
  2338 ;; This function is called by:
  2339 ;;		_InterruptHandlerHigh
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text19
  2344  000342                     __ptext19:
  2345                           	opt callstack 0
  2346  000342                     _check_RFID:
  2347                           	opt callstack 19
  2348                           
  2349                           ;RFID.c: 79: void check_RFID(char dataBuf[]);RFID.c: 80: {;RFID.c: 82:     char hexBuf[1
      +                          2];;RFID.c: 84:     for(int i=0; i<12;i++)
  2350                           
  2351                           ;incstack = 0
  2352  000342  0E00               	movlw	0
  2353  000344  6E1E               	movwf	check_RFID@i+1,c
  2354  000346  0E00               	movlw	0
  2355  000348  6E1D               	movwf	check_RFID@i,c
  2356  00034A                     i2l1588:
  2357                           
  2358                           ;RFID.c: 85:     {;RFID.c: 86:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2359  00034A  501D               	movf	check_RFID@i,w,c
  2360  00034C  2407               	addwf	check_RFID@dataBuf,w,c
  2361  00034E  6ED9               	movwf	fsr2l,c
  2362  000350  501E               	movf	check_RFID@i+1,w,c
  2363  000352  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2364  000354  6EDA               	movwf	fsr2h,c
  2365  000356  0E2F               	movlw	47
  2366  000358  64DF               	cpfsgt	indf2,c
  2367  00035A  D018               	goto	i2l1594
  2368  00035C  501D               	movf	check_RFID@i,w,c
  2369  00035E  2407               	addwf	check_RFID@dataBuf,w,c
  2370  000360  6ED9               	movwf	fsr2l,c
  2371  000362  501E               	movf	check_RFID@i+1,w,c
  2372  000364  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2373  000366  6EDA               	movwf	fsr2h,c
  2374  000368  0E3A               	movlw	58
  2375  00036A  60DF               	cpfslt	indf2,c
  2376  00036C  D00F               	goto	i2l1594
  2377                           
  2378                           ;RFID.c: 87:         {;RFID.c: 88:             hexBuf[i] = dataBuf[i] - '0';
  2379  00036E  0E0B               	movlw	low check_RFID@hexBuf
  2380  000370  241D               	addwf	check_RFID@i,w,c
  2381  000372  6ED9               	movwf	fsr2l,c
  2382  000374  0E00               	movlw	high check_RFID@hexBuf
  2383  000376  201E               	addwfc	check_RFID@i+1,w,c
  2384  000378  6EDA               	movwf	fsr2h,c
  2385  00037A  501D               	movf	check_RFID@i,w,c
  2386  00037C  2407               	addwf	check_RFID@dataBuf,w,c
  2387  00037E  6EE1               	movwf	fsr1l,c
  2388  000380  501E               	movf	check_RFID@i+1,w,c
  2389  000382  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2390  000384  6EE2               	movwf	fsr1h,c
  2391  000386  50E7               	movf	indf1,w,c
  2392  000388  0FD0               	addlw	208
  2393  00038A  D020               	goto	L1
  2394  00038C                     i2l1594:
  2395  00038C  501D               	movf	check_RFID@i,w,c
  2396  00038E  2407               	addwf	check_RFID@dataBuf,w,c
  2397  000390  6ED9               	movwf	fsr2l,c
  2398  000392  501E               	movf	check_RFID@i+1,w,c
  2399  000394  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2400  000396  6EDA               	movwf	fsr2h,c
  2401  000398  0E40               	movlw	64
  2402  00039A  64DF               	cpfsgt	indf2,c
  2403  00039C  D018               	goto	i2l1600
  2404  00039E  501D               	movf	check_RFID@i,w,c
  2405  0003A0  2407               	addwf	check_RFID@dataBuf,w,c
  2406  0003A2  6ED9               	movwf	fsr2l,c
  2407  0003A4  501E               	movf	check_RFID@i+1,w,c
  2408  0003A6  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2409  0003A8  6EDA               	movwf	fsr2h,c
  2410  0003AA  0E47               	movlw	71
  2411  0003AC  60DF               	cpfslt	indf2,c
  2412  0003AE  D00F               	goto	i2l1600
  2413                           
  2414                           ;RFID.c: 90:         {;RFID.c: 91:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2415  0003B0  0E0B               	movlw	low check_RFID@hexBuf
  2416  0003B2  241D               	addwf	check_RFID@i,w,c
  2417  0003B4  6ED9               	movwf	fsr2l,c
  2418  0003B6  0E00               	movlw	high check_RFID@hexBuf
  2419  0003B8  201E               	addwfc	check_RFID@i+1,w,c
  2420  0003BA  6EDA               	movwf	fsr2h,c
  2421  0003BC  501D               	movf	check_RFID@i,w,c
  2422  0003BE  2407               	addwf	check_RFID@dataBuf,w,c
  2423  0003C0  6EE1               	movwf	fsr1l,c
  2424  0003C2  501E               	movf	check_RFID@i+1,w,c
  2425  0003C4  2008               	addwfc	check_RFID@dataBuf+1,w,c
  2426  0003C6  6EE2               	movwf	fsr1h,c
  2427  0003C8  50E7               	movf	indf1,w,c
  2428  0003CA  0FC9               	addlw	201
  2429  0003CC                     L1:
  2430  0003CC  6EDF               	movwf	indf2,c
  2431  0003CE                     i2l1600:
  2432                           
  2433                           ;RFID.c: 93:     }
  2434  0003CE  4A1D               	infsnz	check_RFID@i,f,c
  2435  0003D0  2A1E               	incf	check_RFID@i+1,f,c
  2436  0003D2  BE1E               	btfsc	check_RFID@i+1,7,c
  2437  0003D4  D7BA               	goto	i2l1588
  2438  0003D6  501E               	movf	check_RFID@i+1,w,c
  2439  0003D8  E104               	bnz	i2u84_40
  2440  0003DA  0E0C               	movlw	12
  2441  0003DC  5C1D               	subwf	check_RFID@i,w,c
  2442  0003DE  A0D8               	btfss	status,0,c
  2443  0003E0  D7B4               	goto	i2l1588
  2444  0003E2                     i2u84_40:
  2445                           
  2446                           ;RFID.c: 95:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2447  0003E2  500B               	movf	check_RFID@hexBuf,w,c
  2448  0003E4  A4D8               	btfss	status,2,c
  2449  0003E6  D002               	goto	i2u85_40
  2450  0003E8  0E01               	movlw	1
  2451  0003EA  D001               	goto	i2u86_40
  2452  0003EC                     i2u85_40:
  2453  0003EC  0E00               	movlw	0
  2454  0003EE                     i2u86_40:
  2455  0003EE  100C               	iorwf	check_RFID@hexBuf+1,w,c
  2456  0003F0  6E17               	movwf	check_RFID@byte1,c
  2457                           
  2458                           ;RFID.c: 96:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2459  0003F2  500D               	movf	check_RFID@hexBuf+2,w,c
  2460  0003F4  A4D8               	btfss	status,2,c
  2461  0003F6  D002               	goto	i2u87_40
  2462  0003F8  0E01               	movlw	1
  2463  0003FA  D001               	goto	i2u88_40
  2464  0003FC                     i2u87_40:
  2465  0003FC  0E00               	movlw	0
  2466  0003FE                     i2u88_40:
  2467  0003FE  100E               	iorwf	check_RFID@hexBuf+3,w,c
  2468  000400  6E18               	movwf	check_RFID@byte2,c
  2469                           
  2470                           ;RFID.c: 97:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2471  000402  500F               	movf	check_RFID@hexBuf+4,w,c
  2472  000404  A4D8               	btfss	status,2,c
  2473  000406  D002               	goto	i2u89_40
  2474  000408  0E01               	movlw	1
  2475  00040A  D001               	goto	i2u90_40
  2476  00040C                     i2u89_40:
  2477  00040C  0E00               	movlw	0
  2478  00040E                     i2u90_40:
  2479  00040E  1010               	iorwf	check_RFID@hexBuf+5,w,c
  2480  000410  6E19               	movwf	check_RFID@byte3,c
  2481                           
  2482                           ;RFID.c: 98:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2483  000412  5011               	movf	check_RFID@hexBuf+6,w,c
  2484  000414  A4D8               	btfss	status,2,c
  2485  000416  D002               	goto	i2u91_40
  2486  000418  0E01               	movlw	1
  2487  00041A  D001               	goto	i2u92_40
  2488  00041C                     i2u91_40:
  2489  00041C  0E00               	movlw	0
  2490  00041E                     i2u92_40:
  2491  00041E  1012               	iorwf	check_RFID@hexBuf+7,w,c
  2492  000420  6E1A               	movwf	check_RFID@byte4,c
  2493                           
  2494                           ;RFID.c: 99:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2495  000422  5013               	movf	check_RFID@hexBuf+8,w,c
  2496  000424  A4D8               	btfss	status,2,c
  2497  000426  D002               	goto	i2u93_40
  2498  000428  0E01               	movlw	1
  2499  00042A  D001               	goto	i2u94_40
  2500  00042C                     i2u93_40:
  2501  00042C  0E00               	movlw	0
  2502  00042E                     i2u94_40:
  2503  00042E  1014               	iorwf	check_RFID@hexBuf+9,w,c
  2504  000430  6E1B               	movwf	check_RFID@byte5,c
  2505                           
  2506                           ;RFID.c: 100:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2507  000432  5015               	movf	check_RFID@hexBuf+10,w,c
  2508  000434  A4D8               	btfss	status,2,c
  2509  000436  D002               	goto	i2u95_40
  2510  000438  0E01               	movlw	1
  2511  00043A  D001               	goto	i2u96_40
  2512  00043C                     i2u95_40:
  2513  00043C  0E00               	movlw	0
  2514  00043E                     i2u96_40:
  2515  00043E  1016               	iorwf	check_RFID@hexBuf+11,w,c
  2516  000440  6E1C               	movwf	check_RFID@checksum,c
  2517                           
  2518                           ;RFID.c: 103:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2519  000442  5017               	movf	check_RFID@byte1,w,c
  2520  000444  1818               	xorwf	check_RFID@byte2,w,c
  2521  000446  1819               	xorwf	check_RFID@byte3,w,c
  2522  000448  181A               	xorwf	check_RFID@byte4,w,c
  2523  00044A  6E09               	movwf	??_check_RFID& (0+255),c
  2524  00044C  6A0A               	clrf	(??_check_RFID+1)& (0+255),c
  2525  00044E  501C               	movf	check_RFID@checksum,w,c
  2526  000450  181B               	xorwf	check_RFID@byte5,w,c
  2527  000452  A4D8               	btfss	status,2,c
  2528  000454  D002               	goto	i2u97_40
  2529  000456  0E01               	movlw	1
  2530  000458  D001               	goto	i2u98_40
  2531  00045A                     i2u97_40:
  2532  00045A  0E00               	movlw	0
  2533  00045C                     i2u98_40:
  2534  00045C  1A09               	xorwf	??_check_RFID,f,c
  2535  00045E  0E00               	movlw	0
  2536  000460  1A0A               	xorwf	??_check_RFID+1,f,c
  2537  000462  5009               	movf	??_check_RFID,w,c
  2538  000464  100A               	iorwf	??_check_RFID+1,w,c
  2539  000466  B4D8               	btfsc	status,2,c
  2540  000468  D00A               	goto	i2l1610
  2541                           
  2542                           ;RFID.c: 104:     {;RFID.c: 106:         SetLine(2);
  2543  00046A  0E02               	movlw	2
  2544  00046C  EC76  F005         	call	i2_SetLine
  2545                           
  2546                           ;RFID.c: 107:         LCD_String("CHECKSUM PASSED");
  2547  000470  0E11               	movlw	low STR_3
  2548  000472  6E05               	movwf	i2LCD_String@string,c
  2549  000474  0E03               	movlw	high STR_3
  2550  000476  6E06               	movwf	i2LCD_String@string+1,c
  2551  000478  ECF9  F004         	call	i2_LCD_String	;wreg free
  2552                           
  2553                           ;RFID.c: 108:     }
  2554  00047C  0012               	return	
  2555  00047E                     i2l1610:
  2556                           
  2557                           ;RFID.c: 111:         SetLine(2);
  2558  00047E  0E02               	movlw	2
  2559  000480  EC76  F005         	call	i2_SetLine
  2560                           
  2561                           ;RFID.c: 112:         LCD_String("CHECKSUM FAILED");
  2562  000484  0E01               	movlw	low STR_4
  2563  000486  6E05               	movwf	i2LCD_String@string,c
  2564  000488  0E03               	movlw	high STR_4
  2565  00048A  6E06               	movwf	i2LCD_String@string+1,c
  2566  00048C  ECF9  F004         	call	i2_LCD_String	;wreg free
  2567  000490  0012               	return		;funcret
  2568  000492                     __end_of_check_RFID:
  2569                           	opt callstack 0
  2570                           
  2571 ;; *************** function i2_SetLine *****************
  2572 ;; Defined at:
  2573 ;;		line 107 in file "LCDIO.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  line            1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  line            1    4[COMRAM] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2587 ;;      Params:         0       0       0       0
  2588 ;;      Locals:         1       0       0       0
  2589 ;;      Temps:          0       0       0       0
  2590 ;;      Totals:         1       0       0       0
  2591 ;;Total ram usage:        1 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    3
  2594 ;; This function calls:
  2595 ;;		i2_SendLCD
  2596 ;; This function is called by:
  2597 ;;		_processRFID
  2598 ;;		_check_RFID
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text20
  2603  000AEC                     __ptext20:
  2604                           	opt callstack 0
  2605  000AEC                     i2_SetLine:
  2606                           	opt callstack 19
  2607                           
  2608                           ;incstack = 0
  2609                           ;i2SetLine@line stored from wreg
  2610  000AEC  6E05               	movwf	i2SetLine@line,c
  2611                           
  2612                           ;LCDIO.c: 109:     if(line == 1){
  2613  000AEE  0405               	decf	i2SetLine@line,w,c
  2614  000AF0  A4D8               	btfss	status,2,c
  2615  000AF2  D005               	goto	i2l1502
  2616                           
  2617                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2618  000AF4  0E00               	movlw	0
  2619  000AF6  6E03               	movwf	i2SendLCD@type,c
  2620  000AF8  0E80               	movlw	128
  2621  000AFA  EC5E  F005         	call	i2_SendLCD
  2622  000AFE                     i2l1502:
  2623                           
  2624                           ;LCDIO.c: 113:     if(line == 2){
  2625  000AFE  0E02               	movlw	2
  2626  000B00  1805               	xorwf	i2SetLine@line,w,c
  2627  000B02  A4D8               	btfss	status,2,c
  2628  000B04  D005               	goto	i2l1506
  2629                           
  2630                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2631  000B06  0E00               	movlw	0
  2632  000B08  6E03               	movwf	i2SendLCD@type,c
  2633  000B0A  0EC0               	movlw	192
  2634  000B0C  EC5E  F005         	call	i2_SendLCD
  2635  000B10                     i2l1506:
  2636                           
  2637                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2638  000B10  0E21               	movlw	33
  2639  000B12                     i2u162_47:
  2640  000B12  2EE8               	decfsz	wreg,f,c
  2641  000B14  D7FE               	bra	i2u162_47
  2642  000B16  F000               	nop	
  2643  000B18  0012               	return		;funcret
  2644  000B1A                     __end_ofi2_SetLine:
  2645                           	opt callstack 0
  2646                           
  2647 ;; *************** function i2_LCD_String *****************
  2648 ;; Defined at:
  2649 ;;		line 119 in file "LCDIO.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  string          2    4[COMRAM] PTR unsigned char 
  2652 ;;		 -> STR_4(16), STR_3(16), STR_2(16), main@temp(32), 
  2653 ;;		 -> STR_1(15), 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2665 ;;      Params:         2       0       0       0
  2666 ;;      Locals:         0       0       0       0
  2667 ;;      Temps:          0       0       0       0
  2668 ;;      Totals:         2       0       0       0
  2669 ;;Total ram usage:        2 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; Hardware stack levels required when called:    3
  2672 ;; This function calls:
  2673 ;;		i2_SendLCD
  2674 ;; This function is called by:
  2675 ;;		_check_RFID
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text21
  2680  0009F2                     __ptext21:
  2681                           	opt callstack 0
  2682  0009F2                     i2_LCD_String:
  2683                           	opt callstack 19
  2684                           
  2685                           ;LCDIO.c: 121: while(*string != 0){
  2686                           
  2687                           ;incstack = 0
  2688  0009F2  D01A               	goto	i2l1516
  2689  0009F4                     i2l1510:
  2690                           
  2691                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2692  0009F4  0E01               	movlw	1
  2693  0009F6  6E03               	movwf	i2SendLCD@type,c
  2694  0009F8  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  2695  0009FC  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  2696  000A00  6AF8               	clrf	tblptru,c
  2697  000A02  0E02               	movlw	(high __ramtop+-1)
  2698  000A04  64F7               	cpfsgt	tblptrh,c
  2699  000A06  D003               	bra	i2u72_47
  2700  000A08  0008               	tblrd		*
  2701  000A0A  50F5               	movf	tablat,w,c
  2702  000A0C  D005               	bra	i2u72_40
  2703  000A0E                     i2u72_47:
  2704  000A0E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2705  000A12  CFF7 FFEA          	movff	tblptrh,fsr0h
  2706  000A16  50EF               	movf	indf0,w,c
  2707  000A18                     i2u72_40:
  2708  000A18  EC5E  F005         	call	i2_SendLCD
  2709  000A1C  4A05               	infsnz	i2LCD_String@string,f,c
  2710  000A1E  2A06               	incf	i2LCD_String@string+1,f,c
  2711                           
  2712                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2713  000A20  0E21               	movlw	33
  2714  000A22                     i2u163_47:
  2715  000A22  2EE8               	decfsz	wreg,f,c
  2716  000A24  D7FE               	bra	i2u163_47
  2717  000A26  F000               	nop	
  2718  000A28                     i2l1516:
  2719                           
  2720                           ;LCDIO.c: 121: while(*string != 0){
  2721  000A28  C005  FFF6         	movff	i2LCD_String@string,tblptrl
  2722  000A2C  C006  FFF7         	movff	i2LCD_String@string+1,tblptrh
  2723  000A30  6AF8               	clrf	tblptru,c
  2724  000A32  0E02               	movlw	(high __ramtop+-1)
  2725  000A34  64F7               	cpfsgt	tblptrh,c
  2726  000A36  D003               	bra	i2u73_47
  2727  000A38  0008               	tblrd		*
  2728  000A3A  50F5               	movf	tablat,w,c
  2729  000A3C  D005               	bra	i2u73_40
  2730  000A3E                     i2u73_47:
  2731  000A3E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2732  000A42  CFF7 FFEA          	movff	tblptrh,fsr0h
  2733  000A46  50EF               	movf	indf0,w,c
  2734  000A48                     i2u73_40:
  2735  000A48  0900               	iorlw	0
  2736  000A4A  B4D8               	btfsc	status,2,c
  2737  000A4C  0012               	return	
  2738  000A4E  D7D2               	goto	i2l1510
  2739  000A50                     __end_ofi2_LCD_String:
  2740                           	opt callstack 0
  2741                           
  2742 ;; *************** function i2_SendLCD *****************
  2743 ;; Defined at:
  2744 ;;		line 44 in file "LCDIO.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  Byte            1    wreg     unsigned char 
  2747 ;;  type            1    2[COMRAM] unsigned char 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  Byte            1    3[COMRAM] unsigned char 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2759 ;;      Params:         1       0       0       0
  2760 ;;      Locals:         1       0       0       0
  2761 ;;      Temps:          0       0       0       0
  2762 ;;      Totals:         2       0       0       0
  2763 ;;Total ram usage:        2 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    2
  2766 ;; This function calls:
  2767 ;;		i2_LCDout
  2768 ;; This function is called by:
  2769 ;;		_processRFID
  2770 ;;		i2_SetLine
  2771 ;;		i2_LCD_String
  2772 ;;		i2_ClearLCD
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text22
  2777  000ABC                     __ptext22:
  2778                           	opt callstack 0
  2779  000ABC                     i2_SendLCD:
  2780                           	opt callstack 19
  2781                           
  2782                           ;incstack = 0
  2783                           ;i2SendLCD@Byte stored from wreg
  2784  000ABC  6E04               	movwf	i2SendLCD@Byte,c
  2785                           
  2786                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2787  000ABE  B003               	btfsc	i2SendLCD@type,0,c
  2788  000AC0  D002               	bra	i2u60_45
  2789  000AC2  9E89               	bcf	3977,7,c	;volatile
  2790  000AC4  D001               	bra	i2u60_46
  2791  000AC6                     i2u60_45:
  2792  000AC6  8E89               	bsf	3977,7,c	;volatile
  2793  000AC8                     i2u60_46:
  2794                           
  2795                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2796  000AC8  3804               	swapf	i2SendLCD@Byte,w,c
  2797  000ACA  0B0F               	andlw	15
  2798  000ACC  0B0F               	andlw	15
  2799  000ACE  EC8C  F004         	call	i2_LCDout
  2800                           
  2801                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  2802  000AD2  0E06               	movlw	6
  2803  000AD4                     i2u164_47:
  2804  000AD4  2EE8               	decfsz	wreg,f,c
  2805  000AD6  D7FE               	bra	i2u164_47
  2806  000AD8  D000               	nop2	
  2807                           
  2808                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  2809  000ADA  5004               	movf	i2SendLCD@Byte,w,c
  2810  000ADC  0B0F               	andlw	15
  2811  000ADE  EC8C  F004         	call	i2_LCDout
  2812                           
  2813                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2814  000AE2  0E21               	movlw	33
  2815  000AE4                     i2u165_47:
  2816  000AE4  2EE8               	decfsz	wreg,f,c
  2817  000AE6  D7FE               	bra	i2u165_47
  2818  000AE8  F000               	nop	
  2819  000AEA  0012               	return		;funcret
  2820  000AEC                     __end_ofi2_SendLCD:
  2821                           	opt callstack 0
  2822                           
  2823 ;; *************** function i2_LCDout *****************
  2824 ;; Defined at:
  2825 ;;		line 31 in file "LCDIO.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  number          1    wreg     unsigned char 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  number          1    1[COMRAM] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2839 ;;      Params:         0       0       0       0
  2840 ;;      Locals:         1       0       0       0
  2841 ;;      Temps:          1       0       0       0
  2842 ;;      Totals:         2       0       0       0
  2843 ;;Total ram usage:        2 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    1
  2846 ;; This function calls:
  2847 ;;		i2_E_TOG
  2848 ;; This function is called by:
  2849 ;;		i2_SendLCD
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text23
  2854  000918                     __ptext23:
  2855                           	opt callstack 0
  2856  000918                     i2_LCDout:
  2857                           	opt callstack 19
  2858                           
  2859                           ;incstack = 0
  2860                           ;i2LCDout@number stored from wreg
  2861  000918  6E02               	movwf	i2LCDout@number,c
  2862                           
  2863                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  2864  00091A  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  2865  00091E  0E01               	movlw	1
  2866  000920  1601               	andwf	??i2_LCDout,f,c
  2867  000922  508B               	movf	3979,w,c	;volatile
  2868  000924  1801               	xorwf	??i2_LCDout,w,c
  2869  000926  0BFE               	andlw	-2
  2870  000928  1801               	xorwf	??i2_LCDout,w,c
  2871  00092A  6E8B               	movwf	3979,c	;volatile
  2872                           
  2873                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  2874  00092C  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  2875  000930  90D8               	bcf	status,0,c
  2876  000932  3201               	rrcf	??i2_LCDout,f,c
  2877  000934  0E01               	movlw	1
  2878  000936  1601               	andwf	??i2_LCDout,f,c
  2879  000938  4601               	rlncf	??i2_LCDout,f,c
  2880  00093A  4601               	rlncf	??i2_LCDout,f,c
  2881  00093C  4601               	rlncf	??i2_LCDout,f,c
  2882  00093E  508B               	movf	3979,w,c	;volatile
  2883  000940  1801               	xorwf	??i2_LCDout,w,c
  2884  000942  0BF7               	andlw	-9
  2885  000944  1801               	xorwf	??i2_LCDout,w,c
  2886  000946  6E8B               	movwf	3979,c	;volatile
  2887                           
  2888                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  2889  000948  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  2890  00094C  90D8               	bcf	status,0,c
  2891  00094E  3201               	rrcf	??i2_LCDout,f,c
  2892  000950  90D8               	bcf	status,0,c
  2893  000952  3201               	rrcf	??i2_LCDout,f,c
  2894  000954  0E01               	movlw	1
  2895  000956  1601               	andwf	??i2_LCDout,f,c
  2896  000958  508C               	movf	3980,w,c	;volatile
  2897  00095A  1801               	xorwf	??i2_LCDout,w,c
  2898  00095C  0BFE               	andlw	-2
  2899  00095E  1801               	xorwf	??i2_LCDout,w,c
  2900  000960  6E8C               	movwf	3980,c	;volatile
  2901                           
  2902                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  2903  000962  C002  F001         	movff	i2LCDout@number,??i2_LCDout
  2904  000966  90D8               	bcf	status,0,c
  2905  000968  3201               	rrcf	??i2_LCDout,f,c
  2906  00096A  90D8               	bcf	status,0,c
  2907  00096C  3201               	rrcf	??i2_LCDout,f,c
  2908  00096E  90D8               	bcf	status,0,c
  2909  000970  3201               	rrcf	??i2_LCDout,f,c
  2910  000972  0E01               	movlw	1
  2911  000974  1601               	andwf	??i2_LCDout,f,c
  2912  000976  4601               	rlncf	??i2_LCDout,f,c
  2913  000978  508C               	movf	3980,w,c	;volatile
  2914  00097A  1801               	xorwf	??i2_LCDout,w,c
  2915  00097C  0BFD               	andlw	-3
  2916  00097E  1801               	xorwf	??i2_LCDout,w,c
  2917  000980  6E8C               	movwf	3980,c	;volatile
  2918                           
  2919                           ;LCDIO.c: 39:  E_TOG();
  2920  000982  ECFB  F005         	call	i2_E_TOG	;wreg free
  2921                           
  2922                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2923  000986  0E03               	movlw	3
  2924  000988                     i2u166_47:
  2925  000988  2EE8               	decfsz	wreg,f,c
  2926  00098A  D7FE               	bra	i2u166_47
  2927  00098C  F000               	nop	
  2928  00098E  0012               	return		;funcret
  2929  000990                     __end_ofi2_LCDout:
  2930                           	opt callstack 0
  2931                           
  2932 ;; *************** function i2_E_TOG *****************
  2933 ;; Defined at:
  2934 ;;		line 23 in file "LCDIO.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2948 ;;      Params:         0       0       0       0
  2949 ;;      Locals:         0       0       0       0
  2950 ;;      Temps:          0       0       0       0
  2951 ;;      Totals:         0       0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		i2_LCDout
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text24
  2962  000BF6                     __ptext24:
  2963                           	opt callstack 0
  2964  000BF6                     i2_E_TOG:
  2965                           	opt callstack 19
  2966                           
  2967                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  2968                           
  2969                           ;incstack = 0
  2970  000BF6  8C89               	bsf	3977,6,c	;volatile
  2971                           
  2972                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  2973  000BF8  0E03               	movlw	3
  2974  000BFA                     i2u167_47:
  2975  000BFA  2EE8               	decfsz	wreg,f,c
  2976  000BFC  D7FE               	bra	i2u167_47
  2977  000BFE  F000               	nop	
  2978                           
  2979                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  2980  000C00  9C89               	bcf	3977,6,c	;volatile
  2981  000C02  0012               	return		;funcret
  2982  000C04                     __end_ofi2_E_TOG:
  2983                           	opt callstack 0
  2984                           
  2985                           	psect	rparam
  2986  0000                     
  2987                           	psect	temp
  2988  000039                     btemp:
  2989                           	opt callstack 0
  2990  000039                     	ds	1
  2991  0000                     int$flags	set	btemp
  2992  0000                     wtemp8	set	btemp+1
  2993  0000                     ttemp5	set	btemp+1
  2994  0000                     ttemp6	set	btemp+4
  2995  0000                     ttemp7	set	btemp+8
  2996                           tosu	equ	0xFFF
  2997                           tosh	equ	0xFFE
  2998                           tosl	equ	0xFFD
  2999                           stkptr	equ	0xFFC
  3000                           pclatu	equ	0xFFB
  3001                           pclath	equ	0xFFA
  3002                           pcl	equ	0xFF9
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           indf0	equ	0xFEF
  3010                           postinc0	equ	0xFEE
  3011                           postdec0	equ	0xFED
  3012                           preinc0	equ	0xFEC
  3013                           plusw0	equ	0xFEB
  3014                           fsr0h	equ	0xFEA
  3015                           fsr0l	equ	0xFE9
  3016                           wreg	equ	0xFE8
  3017                           indf1	equ	0xFE7
  3018                           postinc1	equ	0xFE6
  3019                           postdec1	equ	0xFE5
  3020                           preinc1	equ	0xFE4
  3021                           plusw1	equ	0xFE3
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           bsr	equ	0xFE0
  3025                           indf2	equ	0xFDF
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           preinc2	equ	0xFDC
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      56
    BANK0           160     65      65
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    process_signal@S	PTR struct Sensor size(2) Largest target is 4
		 -> main@sensorR(BANK0[4]), main@sensorL(BANK0[4]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> InterruptHandlerHigh@RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 32
		 -> STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), main@temp(BANK0[32]), 
		 -> STR_1(CODE[15]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    S286DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 0

    S286DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 0

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_check_RFID
    _processRFID->i2_ClearLCD
    _processRFID->i2_SetLine
    i2_ClearLCD->i2_SendLCD
    _check_RFID->i2_LCD_String
    i2_SetLine->i2_SendLCD
    i2_LCD_String->i2_SendLCD
    i2_SendLCD->i2_LCDout

Critical Paths under _main in BANK0

    _main->_process_signal
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _process_signal->___awdiv
    ___awdiv->___wmul
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0    7868
                                             20 BANK0     45    45      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
                     _process_signal
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1386
                           _init_LCD
                          _init_RFID
                       _init_sensors
 ---------------------------------------------------------------------------------
 (2) _init_sensors                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1386
                                              5 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _process_signal                                       5     3      2    1735
                                             15 BANK0      5     3      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     652
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     745
                                              7 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        4     0      4     180
                                              1 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1324
                                              5 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2    1707
                                              5 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _ClearLCD                                             1     1      0    1262
                                              5 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1262
                                              3 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                              1 BANK0      2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                  1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                12    12      0    2940
                                             30 COMRAM    12    12      0
                         _check_RFID
                        _processRFID
 ---------------------------------------------------------------------------------
 (8) _processRFID                                          6     3      3    1316
                                              5 COMRAM     6     3      3
                         i2_ClearLCD
                          i2_SendLCD
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (9) i2_ClearLCD                                           1     1      0     284
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (8) _check_RFID                                          24    22      2    1600
                                              6 COMRAM    24    22      2
                       i2_LCD_String
                          i2_SetLine
 ---------------------------------------------------------------------------------
 (9) i2_SetLine                                            1     1      0     328
                                              4 COMRAM     1     1      0
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (9) i2_LCD_String                                         2     0      2     381
                                              4 COMRAM     2     0      2
                          i2_SendLCD
 ---------------------------------------------------------------------------------
 (10) i2_SendLCD                                           2     1      1     284
                                              2 COMRAM     2     1      1
                           i2_LCDout
 ---------------------------------------------------------------------------------
 (11) i2_LCDout                                            2     2      0      88
                                              0 COMRAM     2     2      0
                            i2_E_TOG
 ---------------------------------------------------------------------------------
 (12) i2_E_TOG                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _classify_data
   _process_signal
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _setup
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensors

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _check_RFID
     i2_LCD_String
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
   _processRFID
     i2_ClearLCD
       i2_SendLCD
         i2_LCDout
           i2_E_TOG
     i2_SendLCD
       i2_LCDout
         i2_E_TOG
     i2_SetLine
       i2_SendLCD
         i2_LCDout
           i2_E_TOG

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     41      41       5       40.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      38       1       59.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      79       3        0.0%
DATA                 0      0      79      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 25 17:55:20 2020

                           l51 0B66                   ___awdiv@sign 006C                             bsr 000FE0  
          ___wmul@multiplicand 0063                    ?_LCD_String 0065                            wreg 000FE8  
                 processRFID@i 0009                   __CFG_LVP$OFF 000000                           l1912 0AB2  
                         l1922 09CA                           l1850 07B2                           l1916 0992  
                         l1908 0A9E                           l1862 07D8                           l1942 0498  
                         l1864 07E0                           l1856 07C2                           l1882 0818  
                         l1874 0800                           l1962 053A                           l1964 0542  
                         l1878 080A                           l1966 0546                           l1968 054E  
                         l1986 05A2                           l1978 056A                           STR_1 0331  
                         STR_2 0321                           STR_3 0311                           STR_4 0301  
                         u1300 09B8                           u1310 09EA                           u1240 07E4  
                         u1307 09AE                           u1317 09E0                           _LATB 000F8A  
                         u1175 0A5E                           u1176 0A60                           u1370 059A  
                         u1507 063C                           u1427 052C                           u1380 05A6  
                         u1517 0656                           u1437 0576                           u1607 0BEC  
                         u1527 066E                           u1447 05D0                           u1537 0682  
                         u1457 05E6                           u1547 0AB4                           u1467 05F8  
                         u1557 09C4                           u1477 0606                           u1567 0B56  
                         u1487 0614                           u1577 0A6E                           u1497 0628  
                         u1587 0A80                           u1597 0896                           i2l64 06E8  
                         i2l59 06E6                __end_ofi2_E_TOG 0C04                           _main 0492  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0039                    main@sensorL 0099                    main@sensorR 009D  
                         prodh 000FF4                           prodl 000FF3                           start 0026  
                 ___param_bank 000000              processRFID@i_1106 000B                __end_of_SendLCD 0A88  
              __end_of_SetLine 0ABC                          ?_main 0001                __end_of___awdiv 0822  
              ___awdiv@divisor 0069                          _T5CON 000FB7                ___awdiv@counter 006B  
                        _RCREG 000FAE                          _E_TOG 0BE8               __end_ofi2_LCDout 0990  
                        _SPBRG 000FAF                    ?i2_ClearLCD 0001                          _setup 0B62  
                        main@i 0097             __size_ofi2_SendLCD 0030                          tablat 000FF5  
           __size_ofi2_SetLine 002E             processRFID@RFIDbuf 0006                          ttemp5 003A  
                        ttemp6 003D                          ttemp7 0041                          status 000FD8  
                        wtemp8 003A            __size_of_LCD_String 0062               __end_of_ClearLCD 0B62  
               __CFG_MCLRE$OFF 000000                __initialization 0B80                   __end_of_main 05B0  
               __CFG_OSC$IRCIO 000000               LCD_String@string 0065                         ??_main 0074  
                __activetblptr 000002                         ?_E_TOG 0001                      ??i2_E_TOG 0001  
             ___awdiv@dividend 0067                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i2l1510 09F4                         i2l1502 0AFE  
                       i2l1600 03CE                         i2l1506 0B10                         i2l1610 047E  
                       i2l1516 0A28                         i2l1542 072E                         i2l1562 076C  
                       i2l1554 075C                         i2l1574 0788                         i2l1594 038C  
                       i2l1588 034A                         _LCDout 0822                    SendLCD@Byte 0064  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 0063                      ??_SendLCD 0064                  ?_init_sensors 0001  
                    ??_SetLine 0065            __size_ofi2_ClearLCD 001A                         ___wmul 0B1A  
                    ??___awdiv 006B               __end_of_init_LCD 068A                         clear_0 0B86  
             ___awdiv@quotient 006D              __end_ofi2_SendLCD 0AEC                  ?i2_LCD_String 0005  
            __end_ofi2_SetLine 0B1A               ??_process_signal 0071                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                 ?_processRFID 0006                     __accesstop 0060        __end_of__initialization 0B8C  
                ___rparam_used 000001                 ??_init_sensors 0061                    SetLine@line 0065  
                __end_of_E_TOG 0BF6                      ?i2_LCDout 0001                 __pcstackCOMRAM 0001  
                __end_of_setup 0B80                 ??i2_LCD_String 0007                   ??_LCD_String 0067  
                      ??_E_TOG 0061  __size_of_InterruptHandlerHigh 070C                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 0026          __end_of_classify_data 0C06                     _check_RFID 0342  
                      ??_setup 0066                        ?_LCDout 0001             __size_of_init_RFID 001A  
           __end_of_LCD_String 09F2                     ??i2_LCDout 0001                        ?___wmul 0061  
                      _CAP1CON 000F63                        _DFLTCON 000F60                   ??i2_ClearLCD 0005  
                   ??_ClearLCD 0065                        i2_E_TOG 0BF6                        i2u60_45 0AC6  
                      i2u60_46 0AC8                        i2u72_40 0A18                        i2u72_47 0A0E  
                      i2u73_40 0A48                        i2u73_47 0A3E                        i2u90_40 040E  
                      i2u91_40 041C                        i2u92_40 041E                        i2u84_40 03E2  
                      i2u93_40 042C                        i2u85_40 03EC                        i2u77_40 0758  
                      i2u94_40 042E                        i2u86_40 03EE                        i2u95_40 043C  
                      i2u87_40 03FC                        i2u79_40 0784                        i2u96_40 043E  
                      i2u88_40 03FE                        i2u97_40 045A                        i2u89_40 040C  
                      i2u98_40 045C                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
                    ?_init_LCD 0001                __size_of_LCDout 007C                        _SendLCD 0A50  
                      __Hparam 0000                        _SetLine 0A88                        __Lparam 0000  
           __end_ofi2_ClearLCD 0BE8          processRFID@latestChar 0008                        ___awdiv 079C  
              __size_of___wmul 0028                   __psmallconst 0300                        __pcinit 0B80  
                      __ramtop 0300                        __ptext0 0492                        __ptext1 0B62  
                      __ptext2 0B9A                        __ptext3 0BB4                        __ptext4 05B0  
                      __ptext5 089E                        __ptext6 0B1A                        __ptext7 079C  
                      __ptext8 0C04                        __ptext9 0A88              __end_of_init_RFID 0BCE  
             check_RFID@hexBuf 000B           __end_of_init_sensors 0BB4                   LCDout@number 0062  
                  ?_check_RFID 0007                 __pintcode_body 068A           end_of_initialization 0B8C  
                   ??_init_LCD 0065           __end_ofi2_LCD_String 0A50           __size_of_processRFID 0088  
                __Lmediumconst 0000                        int_func 068A                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                   _robot_mode 002C                process_signal@S 006F                      _PORTDbits 000F83  
                    i2_SendLCD 0ABC                      i2_SetLine 0AEC             i2LCD_String@string 0005  
                    _TRISAbits 000F92                      _TRISCbits 000F94                      _TRISDbits 000F95  
               __end_of_LCDout 089E                      _TXSTAbits 000FAC              __size_ofi2_LCDout 0078  
          __size_of_check_RFID 0150                 __end_of___wmul 0B42                    _BAUDCONbits 000FAA  
                   ?i2_SendLCD 0003            start_initialization 0B80                     ?i2_SetLine 0001  
            __size_of_ClearLCD 0020                       ??_LCDout 0061  InterruptHandlerHigh@RFID_flag 002A  
 __end_of_InterruptHandlerHigh 0714                       ??___wmul 0065          __size_of_init_sensors 001A  
                  __pbssCOMRAM 002B                  __pcstackBANK0 0060                       ?i2_E_TOG 0001  
        __size_ofi2_LCD_String 005E                 i2LCDout@number 0002   __size_of_InterruptHandlerLow 000E  
      __size_of_process_signal 007A              __size_of_init_LCD 00DA                       ?_SendLCD 0063  
                     ?_SetLine 0001                   _init_sensors 0B9A                      __pintcode 0008  
                     ?___awdiv 0067         __size_of_classify_data 0002             check_RFID@checksum 001C  
                  __pintcodelo 0018                   i2_LCD_String 09F2                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       _CAP2BUFH 000F67                       _CAP2BUFL 000F66  
                  __smallconst 0300                 __size_of_E_TOG 000E                    ??i2_SendLCD 0004  
                  ??i2_SetLine 0005                      _init_RFID 0BB4                   ??_check_RFID 0009  
               __size_of_setup 001E                check_RFID@byte1 0017                check_RFID@byte2 0018  
              check_RFID@byte3 0019                check_RFID@byte4 001A                check_RFID@byte5 001B  
               ___wmul@product 0065                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u161_47 0BDE                       i2u162_47 0B12                       i2u163_47 0A22  
                     i2u164_47 0AD4                       i2u165_47 0AE4                       i2u166_47 0988  
                     i2u167_47 0BFA                       _PIR1bits 000F9E                       i2_LCDout 0918  
                     _RCONbits 000FD0             __end_of_check_RFID 0492              ___wmul@multiplier 0061  
         _InterruptHandlerHigh 0008                       _ClearLCD 0B42                     ?_init_RFID 0001  
             __size_ofi2_E_TOG 000E                  ??_processRFID 0009                  _classify_data 0C04  
                i2SendLCD@Byte 0004                  i2SendLCD@type 0003                    check_RFID@i 001D  
                     __Hrparam 0000               __size_of_SendLCD 0038                       __Lrparam 0000  
             __size_of_SetLine 0034               __size_of___awdiv 0086          ?_InterruptHandlerHigh 0001  
               ?_classify_data 0061              check_RFID@dataBuf 0007                       __ptext10 0990  
                     __ptext11 0B42                       __ptext20 0AEC                       __ptext12 0A50  
                     __ptext21 09F2                       __ptext13 0822                       __ptext22 0ABC  
                     __ptext14 0BE8                       __ptext23 0918                       __ptext24 0BF6  
                     __ptext17 0714                       __ptext18 0BCE                       __ptext19 0342  
                     _init_LCD 05B0                 _process_signal 089E    InterruptHandlerHigh@RFIDbuf 002D  
                __size_of_main 011E            __end_of_processRFID 079C                  i2SetLine@line 0005  
                     int$flags 0039            _InterruptHandlerLow 0018                       main@temp 0076  
                   _LCD_String 0990                     _INTCONbits 000FF2    classify_data@right_smoothed 0063  
                  ??_init_RFID 0061         __end_of_process_signal 0918                       intlevel1 0000  
                     intlevel2 0000           ?_InterruptHandlerLow 0001                     _OSCCONbits 000FD3  
   classify_data@left_smoothed 0061     processRFID@position_in_buf 002B         ??_InterruptHandlerHigh 001F  
              ??_classify_data 0065                     i2_ClearLCD 0BCE                    _processRFID 0714  
              ?_process_signal 006F          ??_InterruptHandlerLow 0060  
