

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 14:57:41 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 2.05
    52                           ; Generated 20/12/2018 GMT
    53                           ; 
    54                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4331 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     _CAP1CON	set	3939
    86  0000                     _DFLTCON	set	3936
    87  0000                     _ANSEL1	set	4025
    88  0000                     _ANSEL0	set	4024
    89  0000                     _T5CON	set	4023
    90  0000                     _IPR1bits	set	3999
    91  0000                     _PIE1bits	set	3997
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _BAUDCONbits	set	4010
    95  0000                     _SPBRGH	set	4016
    96  0000                     _SPBRG	set	4015
    97  0000                     _TRISAbits	set	3986
    98  0000                     _TRISCbits	set	3988
    99  0000                     _LATDbits	set	3980
   100  0000                     _LATCbits	set	3979
   101  0000                     _LATAbits	set	3977
   102  0000                     _LATB	set	3978
   103  0000                     _PTPERH	set	3962
   104  0000                     _PTPERL	set	3963
   105  0000                     _PWMCON1	set	3950
   106  0000                     _PWMCON0	set	3951
   107  0000                     _PTCON1	set	3966
   108  0000                     _PTCON0	set	3967
   109  0000                     _PORTDbits	set	3971
   110  0000                     _CAP1BUFL	set	3944
   111  0000                     _CAP1BUFH	set	3945
   112  0000                     _RCREG	set	4014
   113  0000                     _PIR1bits	set	3998
   114  0000                     _TRISDbits	set	3989
   115  0000                     _TRISBbits	set	3987
   116  0000                     _RCONbits	set	4048
   117  0000                     _INTCONbits	set	4082
   118  0000                     _OSCCONbits	set	4051
   119  0000                     _OSCCON	set	4051
   120  0000                     _PDC1H	set	3958
   121  0000                     _PDC1L	set	3959
   122  0000                     _PDC0H	set	3960
   123  0000                     _PDC0L	set	3961
   124                           
   125                           	psect	smallconst
   126  000300                     __psmallconst:
   127                           	opt callstack 0
   128  000300  00                 	db	0
   129  000301                     STR_4:
   130  000301  43                 	db	67	;'C'
   131  000302  48                 	db	72	;'H'
   132  000303  45                 	db	69	;'E'
   133  000304  43                 	db	67	;'C'
   134  000305  4B                 	db	75	;'K'
   135  000306  53                 	db	83	;'S'
   136  000307  55                 	db	85	;'U'
   137  000308  4D                 	db	77	;'M'
   138  000309  20                 	db	32
   139  00030A  46                 	db	70	;'F'
   140  00030B  41                 	db	65	;'A'
   141  00030C  49                 	db	73	;'I'
   142  00030D  4C                 	db	76	;'L'
   143  00030E  45                 	db	69	;'E'
   144  00030F  44                 	db	68	;'D'
   145  000310  00                 	db	0
   146  000311                     STR_3:
   147  000311  43                 	db	67	;'C'
   148  000312  48                 	db	72	;'H'
   149  000313  45                 	db	69	;'E'
   150  000314  43                 	db	67	;'C'
   151  000315  4B                 	db	75	;'K'
   152  000316  53                 	db	83	;'S'
   153  000317  55                 	db	85	;'U'
   154  000318  4D                 	db	77	;'M'
   155  000319  20                 	db	32
   156  00031A  50                 	db	80	;'P'
   157  00031B  41                 	db	65	;'A'
   158  00031C  53                 	db	83	;'S'
   159  00031D  53                 	db	83	;'S'
   160  00031E  45                 	db	69	;'E'
   161  00031F  44                 	db	68	;'D'
   162  000320  00                 	db	0
   163  000321                     STR_2:
   164  000321  52                 	db	82	;'R'
   165  000322  45                 	db	69	;'E'
   166  000323  53                 	db	83	;'S'
   167  000324  45                 	db	69	;'E'
   168  000325  54                 	db	84	;'T'
   169  000326  54                 	db	84	;'T'
   170  000327  49                 	db	73	;'I'
   171  000328  4E                 	db	78	;'N'
   172  000329  47                 	db	71	;'G'
   173  00032A  20                 	db	32
   174  00032B  52                 	db	82	;'R'
   175  00032C  4F                 	db	79	;'O'
   176  00032D  42                 	db	66	;'B'
   177  00032E  4F                 	db	79	;'O'
   178  00032F  54                 	db	84	;'T'
   179  000330  00                 	db	0
   180  000331                     STR_1:
   181  000331  73                 	db	115	;'s'
   182  000332  6D                 	db	109	;'m'
   183  000333  6F                 	db	111	;'o'
   184  000334  6F                 	db	111	;'o'
   185  000335  74                 	db	116	;'t'
   186  000336  68                 	db	104	;'h'
   187  000337  65                 	db	101	;'e'
   188  000338  64                 	db	100	;'d'
   189  000339  20                 	db	32
   190  00033A  25                 	db	37
   191  00033B  75                 	db	117	;'u'
   192  00033C  20                 	db	32
   193  00033D  00                 	db	0
   194                           
   195                           ; #config settings
   196  00033E  00                 	db	0	; dummy byte at the end
   197  0000                     
   198                           	psect	cinit
   199  00147A                     __pcinit:
   200                           	opt callstack 0
   201  00147A                     start_initialization:
   202                           	opt callstack 0
   203  00147A                     __initialization:
   204                           	opt callstack 0
   205                           
   206                           ; Clear objects allocated to BANK0 (47 bytes)
   207  00147A  EE00  F0AF         	lfsr	0,__pbssBANK0
   208  00147E  0E2F               	movlw	47
   209  001480                     clear_0:
   210  001480  6AEE               	clrf	postinc0,c
   211  001482  06E8               	decf	wreg,f,c
   212  001484  E1FD               	bnz	clear_0
   213                           
   214                           ; Clear objects allocated to COMRAM (8 bytes)
   215  001486  EE00  F04F         	lfsr	0,__pbssCOMRAM
   216  00148A  0E08               	movlw	8
   217  00148C                     clear_1:
   218  00148C  6AEE               	clrf	postinc0,c
   219  00148E  06E8               	decf	wreg,f,c
   220  001490  E1FD               	bnz	clear_1
   221  001492                     end_of_initialization:
   222                           	opt callstack 0
   223  001492                     __end_of__initialization:
   224                           	opt callstack 0
   225  001492  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   226  001494  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   227  001496  0E00               	movlw	low (__Lmediumconst shr (0+16))
   228  001498  6EF8               	movwf	tblptru,c
   229  00149A  0100               	movlb	0
   230  00149C  EFA0  F001         	goto	_main	;jump to C main() function
   231                           
   232                           	psect	bssCOMRAM
   233  00004F                     __pbssCOMRAM:
   234                           	opt callstack 0
   235  00004F                     _width:
   236                           	opt callstack 0
   237  00004F                     	ds	2
   238  000051                     _prec:
   239                           	opt callstack 0
   240  000051                     	ds	2
   241  000053                     _flags:
   242                           	opt callstack 0
   243  000053                     	ds	2
   244  000055                     processRFID@position_in_buf:
   245                           	opt callstack 0
   246  000055                     	ds	1
   247  000056                     _robot_mode:
   248                           	opt callstack 0
   249  000056                     	ds	1
   250                           
   251                           	psect	bssBANK0
   252  0000AF                     __pbssBANK0:
   253                           	opt callstack 0
   254  0000AF                     _nout:
   255                           	opt callstack 0
   256  0000AF                     	ds	2
   257  0000B1                     _RFID_flag:
   258                           	opt callstack 0
   259  0000B1                     	ds	1
   260  0000B2                     _dbuf:
   261                           	opt callstack 0
   262  0000B2                     	ds	32
   263  0000D2                     _RFIDbuf:
   264                           	opt callstack 0
   265  0000D2                     	ds	12
   266                           
   267                           	psect	cstackBANK0
   268  000060                     __pcstackBANK0:
   269                           	opt callstack 0
   270  000060                     vfpfcnvrt@llu:
   271                           	opt callstack 0
   272                           
   273                           ; 8 bytes @ 0x0
   274  000060                     	ds	8
   275  000068                     ?_vfprintf:
   276                           	opt callstack 0
   277  000068                     vfprintf@fp:
   278                           	opt callstack 0
   279                           
   280                           ; 2 bytes @ 0x8
   281  000068                     	ds	2
   282  00006A                     vfprintf@fmt:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0xA
   286  00006A                     	ds	2
   287  00006C                     vfprintf@ap:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0xC
   291  00006C                     	ds	2
   292  00006E                     ?_sprintf:
   293                           	opt callstack 0
   294  00006E                     sprintf@s:
   295                           	opt callstack 0
   296                           
   297                           ; 2 bytes @ 0xE
   298  00006E                     	ds	2
   299  000070                     sprintf@fmt:
   300                           	opt callstack 0
   301                           
   302                           ; 2 bytes @ 0x10
   303  000070                     	ds	6
   304  000076                     sprintf@ap:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0x16
   308  000076                     	ds	2
   309  000078                     sprintf@f:
   310                           	opt callstack 0
   311                           
   312                           ; 6 bytes @ 0x18
   313  000078                     	ds	6
   314  00007E                     ??_main:
   315                           
   316                           ; 1 bytes @ 0x1E
   317  00007E                     	ds	2
   318  000080                     main@temp2:
   319                           	opt callstack 0
   320                           
   321                           ; 16 bytes @ 0x20
   322  000080                     	ds	16
   323  000090                     main@movementMillis:
   324                           	opt callstack 0
   325                           
   326                           ; 4 bytes @ 0x30
   327  000090                     	ds	4
   328  000094                     main@i:
   329                           	opt callstack 0
   330                           
   331                           ; 4 bytes @ 0x34
   332  000094                     	ds	4
   333  000098                     main@beacon_location:
   334                           	opt callstack 0
   335                           
   336                           ; 1 bytes @ 0x38
   337  000098                     	ds	1
   338  000099                     main@raw_data:
   339                           	opt callstack 0
   340                           
   341                           ; 2 bytes @ 0x39
   342  000099                     	ds	2
   343  00009B                     main@i_509:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0x3B
   347  00009B                     	ds	2
   348  00009D                     main@motorL:
   349                           	opt callstack 0
   350                           
   351                           ; 9 bytes @ 0x3D
   352  00009D                     	ds	9
   353  0000A6                     main@motorR:
   354                           	opt callstack 0
   355                           
   356                           ; 9 bytes @ 0x46
   357  0000A6                     	ds	9
   358                           
   359                           	psect	cstackCOMRAM
   360  000001                     __pcstackCOMRAM:
   361                           	opt callstack 0
   362  000001                     processRFID@RFIDbuf:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0x0
   366  000001                     	ds	2
   367  000003                     processRFID@latestChar:
   368                           	opt callstack 0
   369                           
   370                           ; 1 bytes @ 0x2
   371  000003                     	ds	1
   372  000004                     processRFID@i:
   373                           	opt callstack 0
   374                           
   375                           ; 1 bytes @ 0x3
   376  000004                     	ds	1
   377  000005                     ??_InterruptHandlerHigh:
   378                           
   379                           ; 1 bytes @ 0x4
   380  000005                     	ds	3
   381  000008                     ??_LCDout:
   382  000008                     ?_strlen:
   383                           	opt callstack 0
   384  000008                     ?___wmul:
   385                           	opt callstack 0
   386  000008                     ?___lodiv:
   387                           	opt callstack 0
   388  000008                     ?___lomod:
   389                           	opt callstack 0
   390  000008                     initPWM@PWMperiod:
   391                           	opt callstack 0
   392  000008                     classify_data@raw_data:
   393                           	opt callstack 0
   394  000008                     ___wmul@multiplier:
   395                           	opt callstack 0
   396  000008                     fputc@c:
   397                           	opt callstack 0
   398  000008                     strlen@s:
   399                           	opt callstack 0
   400  000008                     ___lodiv@dividend:
   401                           	opt callstack 0
   402  000008                     ___lomod@dividend:
   403                           	opt callstack 0
   404                           
   405                           ; 8 bytes @ 0x7
   406  000008                     	ds	1
   407  000009                     LCDout@number:
   408                           	opt callstack 0
   409                           
   410                           ; 1 bytes @ 0x8
   411  000009                     	ds	1
   412  00000A                     SendLCD@type:
   413                           	opt callstack 0
   414  00000A                     ___wmul@multiplicand:
   415                           	opt callstack 0
   416  00000A                     fputc@fp:
   417                           	opt callstack 0
   418  00000A                     strlen@a:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x9
   422  00000A                     	ds	1
   423  00000B                     SendLCD@Byte:
   424                           	opt callstack 0
   425                           
   426                           ; 1 bytes @ 0xA
   427  00000B                     	ds	1
   428  00000C                     ??_init_LCD:
   429  00000C                     ??_ClearLCD:
   430  00000C                     ??_fputc:
   431  00000C                     SetLine@line:
   432                           	opt callstack 0
   433  00000C                     LCD_String@string:
   434                           	opt callstack 0
   435  00000C                     ___wmul@product:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0xB
   439  00000C                     	ds	1
   440  00000D                     display_RFID@dataBuf:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0xC
   444  00000D                     	ds	1
   445  00000E                     ?___awdiv:
   446                           	opt callstack 0
   447  00000E                     check_RFID@dataBuf:
   448                           	opt callstack 0
   449  00000E                     ___awdiv@dividend:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0xD
   453  00000E                     	ds	1
   454  00000F                     display_RFID@i:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0xE
   458  00000F                     	ds	1
   459  000010                     ??_check_RFID:
   460  000010                     ___awdiv@divisor:
   461                           	opt callstack 0
   462  000010                     ___lodiv@divisor:
   463                           	opt callstack 0
   464  000010                     ___lomod@divisor:
   465                           	opt callstack 0
   466                           
   467                           ; 8 bytes @ 0xF
   468  000010                     	ds	1
   469  000011                     fputs@s:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x10
   473  000011                     	ds	1
   474  000012                     ___awdiv@counter:
   475                           	opt callstack 0
   476  000012                     check_RFID@hexBuf:
   477                           	opt callstack 0
   478                           
   479                           ; 12 bytes @ 0x11
   480  000012                     	ds	1
   481  000013                     ___awdiv@sign:
   482                           	opt callstack 0
   483  000013                     fputs@fp:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x12
   487  000013                     	ds	1
   488  000014                     ___awdiv@quotient:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x13
   492  000014                     	ds	1
   493  000015                     fputs@c:
   494                           	opt callstack 0
   495                           
   496                           ; 1 bytes @ 0x14
   497  000015                     	ds	1
   498  000016                     setMotorPWM@m:
   499                           	opt callstack 0
   500  000016                     fputs@i:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x15
   504  000016                     	ds	2
   505  000018                     ??_setMotorPWM:
   506  000018                     ?_pad:
   507                           	opt callstack 0
   508  000018                     ___lomod@counter:
   509                           	opt callstack 0
   510  000018                     pad@fp:
   511                           	opt callstack 0
   512  000018                     ___lodiv@quotient:
   513                           	opt callstack 0
   514                           
   515                           ; 8 bytes @ 0x17
   516  000018                     	ds	2
   517  00001A                     pad@buf:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x19
   521  00001A                     	ds	2
   522  00001C                     pad@p:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x1B
   526  00001C                     	ds	1
   527  00001D                     setMotorPWM@PWMduty:
   528                           	opt callstack 0
   529                           
   530                           ; 2 bytes @ 0x1C
   531  00001D                     	ds	1
   532  00001E                     ??_pad:
   533  00001E                     check_RFID@byte1:
   534                           	opt callstack 0
   535                           
   536                           ; 1 bytes @ 0x1D
   537  00001E                     	ds	1
   538  00001F                     check_RFID@byte2:
   539                           	opt callstack 0
   540  00001F                     stop@mL:
   541                           	opt callstack 0
   542  00001F                     turnRight@mL:
   543                           	opt callstack 0
   544  00001F                     moveForward@mL:
   545                           	opt callstack 0
   546  00001F                     moveBackward@mL:
   547                           	opt callstack 0
   548  00001F                     init_motor_struct@mL:
   549                           	opt callstack 0
   550  00001F                     pad@i:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x1E
   554  00001F                     	ds	1
   555  000020                     check_RFID@byte3:
   556                           	opt callstack 0
   557  000020                     ___lodiv@counter:
   558                           	opt callstack 0
   559                           
   560                           ; 1 bytes @ 0x1F
   561  000020                     	ds	1
   562  000021                     check_RFID@byte4:
   563                           	opt callstack 0
   564  000021                     stop@mR:
   565                           	opt callstack 0
   566  000021                     turnRight@mR:
   567                           	opt callstack 0
   568  000021                     moveForward@mR:
   569                           	opt callstack 0
   570  000021                     moveBackward@mR:
   571                           	opt callstack 0
   572  000021                     init_motor_struct@mR:
   573                           	opt callstack 0
   574  000021                     pad@w:
   575                           	opt callstack 0
   576                           
   577                           ; 2 bytes @ 0x20
   578  000021                     	ds	1
   579  000022                     check_RFID@byte5:
   580                           	opt callstack 0
   581                           
   582                           ; 1 bytes @ 0x21
   583  000022                     	ds	1
   584  000023                     ??_turnRight:
   585  000023                     ?_utoa:
   586                           	opt callstack 0
   587  000023                     check_RFID@checksum:
   588                           	opt callstack 0
   589  000023                     stop@i:
   590                           	opt callstack 0
   591  000023                     moveForward@i:
   592                           	opt callstack 0
   593  000023                     moveBackward@i:
   594                           	opt callstack 0
   595  000023                     utoa@fp:
   596                           	opt callstack 0
   597                           
   598                           ; 2 bytes @ 0x22
   599  000023                     	ds	1
   600  000024                     turnRight@i:
   601                           	opt callstack 0
   602  000024                     check_RFID@i:
   603                           	opt callstack 0
   604                           
   605                           ; 2 bytes @ 0x23
   606  000024                     	ds	1
   607  000025                     utoa@d:
   608                           	opt callstack 0
   609                           
   610                           ; 8 bytes @ 0x24
   611  000025                     	ds	8
   612  00002D                     ??_utoa:
   613                           
   614                           ; 1 bytes @ 0x2C
   615  00002D                     	ds	8
   616  000035                     utoa@p:
   617                           	opt callstack 0
   618                           
   619                           ; 2 bytes @ 0x34
   620  000035                     	ds	2
   621  000037                     utoa@w:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x36
   625  000037                     	ds	2
   626  000039                     utoa@n:
   627                           	opt callstack 0
   628                           
   629                           ; 8 bytes @ 0x38
   630  000039                     	ds	8
   631  000041                     utoa@i:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x40
   635  000041                     	ds	2
   636  000043                     ?_vfpfcnvrt:
   637                           	opt callstack 0
   638  000043                     vfpfcnvrt@fp:
   639                           	opt callstack 0
   640                           
   641                           ; 2 bytes @ 0x42
   642  000043                     	ds	2
   643  000045                     vfpfcnvrt@fmt:
   644                           	opt callstack 0
   645                           
   646                           ; 2 bytes @ 0x44
   647  000045                     	ds	2
   648  000047                     vfpfcnvrt@ap:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x46
   652  000047                     	ds	2
   653  000049                     ??_vfpfcnvrt:
   654                           
   655                           ; 1 bytes @ 0x48
   656  000049                     	ds	4
   657  00004D                     vfprintf@cfmt:
   658                           	opt callstack 0
   659                           
   660                           ; 2 bytes @ 0x4C
   661  00004D                     	ds	2
   662  00004F                     
   663                           ; 1 bytes @ 0x4E
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 77 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  i               2   59[BANK0 ] int 
   674 ;;  i               4   52[BANK0 ] unsigned long 
   675 ;;  temp2          16   32[BANK0 ] unsigned char [16]
   676 ;;  raw_data        2   57[BANK0 ] unsigned int 
   677 ;;  beacon_locat    1   56[BANK0 ] unsigned char 
   678 ;;  motorR          9   70[BANK0 ] struct DC_motor
   679 ;;  motorL          9   61[BANK0 ] struct DC_motor
   680 ;;  movementMill    4   48[BANK0 ] unsigned long 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   690 ;;      Params:         0       0       0       0
   691 ;;      Locals:         0      47       0       0
   692 ;;      Temps:          0       2       0       0
   693 ;;      Totals:         0      49       0       0
   694 ;;Total ram usage:       49 bytes
   695 ;; Hardware stack levels required when called:   10
   696 ;; This function calls:
   697 ;;		_ClearLCD
   698 ;;		_LCD_String
   699 ;;		_SetLine
   700 ;;		_check_RFID
   701 ;;		_classify_data
   702 ;;		_display_RFID
   703 ;;		_init_motor_struct
   704 ;;		_moveBackward
   705 ;;		_moveForward
   706 ;;		_setup
   707 ;;		_sprintf
   708 ;;		_stop
   709 ;;		_turnRight
   710 ;; This function is called by:
   711 ;;		Startup code after reset
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text0
   716  000340                     __ptext0:
   717                           	opt callstack 0
   718  000340                     _main:
   719                           	opt callstack 21
   720                           
   721                           ;main.c: 80:   setup();
   722                           
   723                           ;incstack = 0
   724  000340  ECFA  F009         	call	_setup	;wreg free
   725                           
   726                           ;main.c: 83:   struct DC_motor motorL, motorR;;main.c: 84:   init_motor_struct(&motorL, 
      +                          &motorR);
   727  000344  0E9D               	movlw	low main@motorL
   728  000346  6E1F               	movwf	init_motor_struct@mL,c
   729  000348  0E00               	movlw	high main@motorL
   730  00034A  6E20               	movwf	init_motor_struct@mL+1,c
   731  00034C  0EA6               	movlw	low main@motorR
   732  00034E  6E21               	movwf	init_motor_struct@mR,c
   733  000350  0E00               	movlw	high main@motorR
   734  000352  6E22               	movwf	init_motor_struct@mR+1,c
   735  000354  EC77  F005         	call	_init_motor_struct	;wreg free
   736                           
   737                           ;main.c: 86:   unsigned long movementMillis=0;
   738  000358  0E00               	movlw	0
   739  00035A  0100               	movlb	0	; () banked
   740  00035C  6F90               	movwf	main@movementMillis& (0+255),b
   741  00035E  0E00               	movlw	0
   742  000360  6F91               	movwf	(main@movementMillis+1)& (0+255),b
   743  000362  0E00               	movlw	0
   744  000364  6F92               	movwf	(main@movementMillis+2)& (0+255),b
   745  000366  0E00               	movlw	0
   746  000368  6F93               	movwf	(main@movementMillis+3)& (0+255),b
   747  00036A                     l2570:
   748                           
   749                           ;main.c: 90:   {;main.c: 92:       if(robot_mode == 0)
   750  00036A  5056               	movf	_robot_mode,w,c	;volatile
   751  00036C  A4D8               	btfss	status,2,c
   752  00036E  D051               	goto	u2090
   753                           
   754                           ;main.c: 93:       {;main.c: 94:           turnRight(&motorL, &motorR);
   755  000370  0E9D               	movlw	low main@motorL
   756  000372  6E1F               	movwf	turnRight@mL,c
   757  000374  0E00               	movlw	high main@motorL
   758  000376  6E20               	movwf	turnRight@mL+1,c
   759  000378  0EA6               	movlw	low main@motorR
   760  00037A  6E21               	movwf	turnRight@mR,c
   761  00037C  0E00               	movlw	high main@motorR
   762  00037E  6E22               	movwf	turnRight@mR+1,c
   763  000380  ECEB  F007         	call	_turnRight	;wreg free
   764                           
   765                           ;main.c: 97:           while(robot_mode == 0)
   766  000384  D043               	goto	l2594
   767  000386                     l2574:
   768                           
   769                           ;main.c: 98:           {;main.c: 100:             unsigned int raw_data = (unsigned int)
      +                          ((CAP1BUFH << 8) | CAP1BUFL);
   770  000386  5068               	movf	3944,w,c	;volatile
   771  000388  CF69 F07E          	movff	3945,??_main	;volatile
   772  00038C  0100               	movlb	0	; () banked
   773  00038E  6B7F               	clrf	(??_main+1)& (0+255),b
   774  000390  C07E  F07F         	movff	??_main,??_main+1
   775  000394  6B7E               	clrf	??_main& (0+255),b
   776  000396  117E               	iorwf	??_main& (0+255),w,b
   777  000398  6F99               	movwf	main@raw_data& (0+255),b
   778  00039A  517F               	movf	(??_main+1)& (0+255),w,b
   779  00039C  6F9A               	movwf	(main@raw_data+1)& (0+255),b
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 103:             char beacon_location = classify_data(raw_data);
   783  00039E  C099  F008         	movff	main@raw_data,classify_data@raw_data
   784  0003A2  C09A  F009         	movff	main@raw_data+1,classify_data@raw_data+1
   785  0003A6  EC96  F00A         	call	_classify_data	;wreg free
   786  0003AA  0100               	movlb	0	; () banked
   787  0003AC  6F98               	movwf	main@beacon_location& (0+255),b
   788                           
   789                           ; BSR set to: 0
   790                           ;main.c: 106:             if(beacon_location == 1)
   791  0003AE  0598               	decf	main@beacon_location& (0+255),w,b
   792  0003B0  A4D8               	btfss	status,2,c
   793  0003B2  D002               	goto	l2582
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 107:             {;main.c: 108:                 robot_mode = 1;
   797  0003B4  0E01               	movlw	1
   798  0003B6  6E56               	movwf	_robot_mode,c	;volatile
   799  0003B8                     l2582:
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 112:             ClearLCD();
   803  0003B8  EC7D  F00A         	call	_ClearLCD	;wreg free
   804                           
   805                           ;main.c: 113:             SetLine(1);
   806  0003BC  0E01               	movlw	1
   807  0003BE  EC11  F00A         	call	_SetLine
   808                           
   809                           ;main.c: 114:             char temp2[16];;main.c: 115:             sprintf(temp2,"smooth
      +                          ed %u ",raw_data);
   810  0003C2  0E80               	movlw	low main@temp2
   811  0003C4  0100               	movlb	0	; () banked
   812  0003C6  6F6E               	movwf	sprintf@s& (0+255),b
   813  0003C8  0E00               	movlw	high main@temp2
   814  0003CA  6F6F               	movwf	(sprintf@s+1)& (0+255),b
   815  0003CC  0E31               	movlw	low STR_1
   816  0003CE  6F70               	movwf	sprintf@fmt& (0+255),b
   817  0003D0  0E03               	movlw	high STR_1
   818  0003D2  6F71               	movwf	(sprintf@fmt+1)& (0+255),b
   819  0003D4  C099  F072         	movff	main@raw_data,?_sprintf+4
   820  0003D8  C09A  F073         	movff	main@raw_data+1,?_sprintf+5
   821  0003DC  EC30  F009         	call	_sprintf	;wreg free
   822                           
   823                           ;main.c: 116:             LCD_String(temp2);
   824  0003E0  0E80               	movlw	low main@temp2
   825  0003E2  6E0C               	movwf	LCD_String@string,c
   826  0003E4  0E00               	movlw	high main@temp2
   827  0003E6  6E0D               	movwf	LCD_String@string+1,c
   828  0003E8  ECD6  F008         	call	_LCD_String	;wreg free
   829                           
   830                           ;main.c: 117:             SetLine(2);
   831  0003EC  0E02               	movlw	2
   832  0003EE  EC11  F00A         	call	_SetLine
   833                           
   834                           ;main.c: 121:             _delay((unsigned long)((100)*(8000000/4000.0)));
   835  0003F2  0E02               	movlw	2
   836  0003F4  0100               	movlb	0	; () banked
   837  0003F6  6F7F               	movwf	(??_main+1)& (0+255),b
   838  0003F8  0E04               	movlw	4
   839  0003FA  6F7E               	movwf	??_main& (0+255),b
   840  0003FC  0EBA               	movlw	186
   841  0003FE                     u2197:
   842  0003FE  2EE8               	decfsz	wreg,f,c
   843  000400  D7FE               	bra	u2197
   844  000402  2F7E               	decfsz	??_main& (0+255),f,b
   845  000404  D7FC               	bra	u2197
   846  000406  2F7F               	decfsz	(??_main+1)& (0+255),f,b
   847  000408  D7FA               	bra	u2197
   848  00040A  F000               	nop	
   849  00040C                     l2594:
   850                           
   851                           ;main.c: 97:           while(robot_mode == 0)
   852  00040C  5056               	movf	_robot_mode,w,c	;volatile
   853  00040E  B4D8               	btfsc	status,2,c
   854  000410  D7BA               	goto	l2574
   855  000412                     u2090:
   856                           
   857                           ;main.c: 127:       if(robot_mode == 1)
   858  000412  0456               	decf	_robot_mode,w,c	;volatile
   859  000414  A4D8               	btfss	status,2,c
   860  000416  D032               	goto	u2120
   861                           
   862                           ;main.c: 128:       {;main.c: 129:           moveForward(&motorL, &motorR);
   863  000418  0E9D               	movlw	low main@motorL
   864  00041A  6E1F               	movwf	moveForward@mL,c
   865  00041C  0E00               	movlw	high main@motorL
   866  00041E  6E20               	movwf	moveForward@mL+1,c
   867  000420  0EA6               	movlw	low main@motorR
   868  000422  6E21               	movwf	moveForward@mR,c
   869  000424  0E00               	movlw	high main@motorR
   870  000426  6E22               	movwf	moveForward@mR+1,c
   871  000428  EC66  F008         	call	_moveForward	;wreg free
   872                           
   873                           ;main.c: 132:           while(robot_mode == 1)
   874  00042C  D024               	goto	l2614
   875  00042E                     l2600:
   876                           
   877                           ;main.c: 133:           {;main.c: 134:               _delay((unsigned long)((1)*(8000000
      +                          /4000.0)));
   878  00042E  0E03               	movlw	3
   879  000430  0100               	movlb	0	; () banked
   880  000432  6F7E               	movwf	??_main& (0+255),b
   881  000434  0E97               	movlw	151
   882  000436                     u2207:
   883  000436  2EE8               	decfsz	wreg,f,c
   884  000438  D7FE               	bra	u2207
   885  00043A  2F7E               	decfsz	??_main& (0+255),f,b
   886  00043C  D7FC               	bra	u2207
   887  00043E  D000               	nop2	
   888                           
   889                           ;main.c: 135:               movementMillis += 1;
   890  000440  0E01               	movlw	1
   891  000442  0100               	movlb	0	; () banked
   892  000444  2790               	addwf	main@movementMillis& (0+255),f,b
   893  000446  0E00               	movlw	0
   894  000448  2391               	addwfc	(main@movementMillis+1)& (0+255),f,b
   895  00044A  2392               	addwfc	(main@movementMillis+2)& (0+255),f,b
   896  00044C  2393               	addwfc	(main@movementMillis+3)& (0+255),f,b
   897                           
   898                           ; BSR set to: 0
   899                           ;main.c: 139:               if(RFID_flag == 1)
   900  00044E  05B1               	decf	_RFID_flag& (0+255),w,b	;volatile
   901  000450  A4D8               	btfss	status,2,c
   902  000452  D011               	goto	l2614
   903                           
   904                           ; BSR set to: 0
   905                           ;main.c: 140:               {;main.c: 141:                   display_RFID(RFIDbuf);
   906  000454  0ED2               	movlw	low _RFIDbuf
   907  000456  6E0D               	movwf	display_RFID@dataBuf,c
   908  000458  0E00               	movlw	high _RFIDbuf
   909  00045A  6E0E               	movwf	display_RFID@dataBuf+1,c
   910  00045C  ECA6  F009         	call	_display_RFID	;wreg free
   911                           
   912                           ;main.c: 142:                   check_RFID(RFIDbuf);
   913  000460  0ED2               	movlw	low _RFIDbuf
   914  000462  6E0E               	movwf	check_RFID@dataBuf,c
   915  000464  0E00               	movlw	high _RFIDbuf
   916  000466  6E0F               	movwf	check_RFID@dataBuf+1,c
   917  000468  EC3D  F004         	call	_check_RFID	;wreg free
   918                           
   919                           ;main.c: 143:                   robot_mode = 2;
   920  00046C  0E02               	movlw	2
   921  00046E  6E56               	movwf	_robot_mode,c	;volatile
   922                           
   923                           ;main.c: 144:                   RFID_flag = 0;
   924  000470  0E00               	movlw	0
   925  000472  0100               	movlb	0	; () banked
   926  000474  6FB1               	movwf	_RFID_flag& (0+255),b	;volatile
   927  000476                     l2614:
   928                           
   929                           ;main.c: 132:           while(robot_mode == 1)
   930  000476  0456               	decf	_robot_mode,w,c	;volatile
   931  000478  B4D8               	btfsc	status,2,c
   932  00047A  D7D9               	goto	l2600
   933  00047C                     u2120:
   934                           
   935                           ;main.c: 150:       if(robot_mode == 2)
   936  00047C  0E02               	movlw	2
   937  00047E  1856               	xorwf	_robot_mode,w,c	;volatile
   938  000480  A4D8               	btfss	status,2,c
   939  000482  D030               	goto	l2630
   940                           
   941                           ;main.c: 151:       {;main.c: 152:           moveBackward(&motorL,&motorR);
   942  000484  0E9D               	movlw	low main@motorL
   943  000486  6E1F               	movwf	moveBackward@mL,c
   944  000488  0E00               	movlw	high main@motorL
   945  00048A  6E20               	movwf	moveBackward@mL+1,c
   946  00048C  0EA6               	movlw	low main@motorR
   947  00048E  6E21               	movwf	moveBackward@mR,c
   948  000490  0E00               	movlw	high main@motorR
   949  000492  6E22               	movwf	moveBackward@mR+1,c
   950  000494  EC9E  F008         	call	_moveBackward	;wreg free
   951                           
   952                           ;main.c: 154:           for(unsigned long i=0; i<movementMillis;i++)
   953  000498  0E00               	movlw	0
   954  00049A  0100               	movlb	0	; () banked
   955  00049C  6F94               	movwf	main@i& (0+255),b
   956  00049E  0E00               	movlw	0
   957  0004A0  6F95               	movwf	(main@i+1)& (0+255),b
   958  0004A2  0E00               	movlw	0
   959  0004A4  6F96               	movwf	(main@i+2)& (0+255),b
   960  0004A6  0E00               	movlw	0
   961  0004A8  6F97               	movwf	(main@i+3)& (0+255),b
   962  0004AA  D010               	goto	l2626
   963  0004AC                     l2622:
   964                           
   965                           ; BSR set to: 0
   966                           ;main.c: 155:           {;main.c: 156:               _delay((unsigned long)((1)*(8000000
      +                          /4000.0)));
   967  0004AC  0E03               	movlw	3
   968  0004AE  0100               	movlb	0	; () banked
   969  0004B0  6F7E               	movwf	??_main& (0+255),b
   970  0004B2  0E97               	movlw	151
   971  0004B4                     u2217:
   972  0004B4  2EE8               	decfsz	wreg,f,c
   973  0004B6  D7FE               	bra	u2217
   974  0004B8  2F7E               	decfsz	??_main& (0+255),f,b
   975  0004BA  D7FC               	bra	u2217
   976  0004BC  D000               	nop2	
   977                           
   978                           ;main.c: 157:           }
   979  0004BE  0E01               	movlw	1
   980  0004C0  0100               	movlb	0	; () banked
   981  0004C2  2794               	addwf	main@i& (0+255),f,b
   982  0004C4  0E00               	movlw	0
   983  0004C6  2395               	addwfc	(main@i+1)& (0+255),f,b
   984  0004C8  2396               	addwfc	(main@i+2)& (0+255),f,b
   985  0004CA  2397               	addwfc	(main@i+3)& (0+255),f,b
   986  0004CC                     l2626:
   987                           
   988                           ; BSR set to: 0
   989  0004CC  5190               	movf	main@movementMillis& (0+255),w,b
   990  0004CE  5D94               	subwf	main@i& (0+255),w,b
   991  0004D0  5191               	movf	(main@movementMillis+1)& (0+255),w,b
   992  0004D2  5995               	subwfb	(main@i+1)& (0+255),w,b
   993  0004D4  5192               	movf	(main@movementMillis+2)& (0+255),w,b
   994  0004D6  5996               	subwfb	(main@i+2)& (0+255),w,b
   995  0004D8  5193               	movf	(main@movementMillis+3)& (0+255),w,b
   996  0004DA  5997               	subwfb	(main@i+3)& (0+255),w,b
   997  0004DC  A0D8               	btfss	status,0,c
   998  0004DE  D7E6               	goto	l2622
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 158:           robot_mode = 3;
  1002  0004E0  0E03               	movlw	3
  1003  0004E2  6E56               	movwf	_robot_mode,c	;volatile
  1004  0004E4                     l2630:
  1005                           
  1006                           ;main.c: 162:       if(robot_mode == 3)
  1007  0004E4  0E03               	movlw	3
  1008  0004E6  1856               	xorwf	_robot_mode,w,c	;volatile
  1009  0004E8  A4D8               	btfss	status,2,c
  1010  0004EA  D73F               	goto	l2570
  1011                           
  1012                           ;main.c: 163:       {;main.c: 164:           stop(&motorL, &motorR);
  1013  0004EC  0E9D               	movlw	low main@motorL
  1014  0004EE  6E1F               	movwf	stop@mL,c
  1015  0004F0  0E00               	movlw	high main@motorL
  1016  0004F2  6E20               	movwf	stop@mL+1,c
  1017  0004F4  0EA6               	movlw	low main@motorR
  1018  0004F6  6E21               	movwf	stop@mR,c
  1019  0004F8  0E00               	movlw	high main@motorR
  1020  0004FA  6E22               	movwf	stop@mR+1,c
  1021  0004FC  EC59  F009         	call	_stop	;wreg free
  1022                           
  1023                           ;main.c: 166:           while(robot_mode == 3)
  1024  000500  D02B               	goto	u2170
  1025  000502                     l2634:
  1026                           
  1027                           ;main.c: 169:               {;main.c: 170:                   ClearLCD();
  1028  000502  EC7D  F00A         	call	_ClearLCD	;wreg free
  1029                           
  1030                           ;main.c: 171:                   LCD_String("RESETTING ROBOT");
  1031  000506  0E21               	movlw	low STR_2
  1032  000508  6E0C               	movwf	LCD_String@string,c
  1033  00050A  0E03               	movlw	high STR_2
  1034  00050C  6E0D               	movwf	LCD_String@string+1,c
  1035  00050E  ECD6  F008         	call	_LCD_String	;wreg free
  1036                           
  1037                           ;main.c: 172:                   for(int i=0; i<10;i++)
  1038  000512  0E00               	movlw	0
  1039  000514  0100               	movlb	0	; () banked
  1040  000516  6F9C               	movwf	(main@i_509+1)& (0+255),b
  1041  000518  0E00               	movlw	0
  1042  00051A  6F9B               	movwf	main@i_509& (0+255),b
  1043  00051C                     l2644:
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 173:                   {;main.c: 174:                       _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
  1047  00051C  0E02               	movlw	2
  1048  00051E  0100               	movlb	0	; () banked
  1049  000520  6F7F               	movwf	(??_main+1)& (0+255),b
  1050  000522  0E04               	movlw	4
  1051  000524  6F7E               	movwf	??_main& (0+255),b
  1052  000526  0EBA               	movlw	186
  1053  000528                     u2227:
  1054  000528  2EE8               	decfsz	wreg,f,c
  1055  00052A  D7FE               	bra	u2227
  1056  00052C  2F7E               	decfsz	??_main& (0+255),f,b
  1057  00052E  D7FC               	bra	u2227
  1058  000530  2F7F               	decfsz	(??_main+1)& (0+255),f,b
  1059  000532  D7FA               	bra	u2227
  1060  000534  F000               	nop	
  1061                           
  1062                           ;main.c: 175:                   }
  1063  000536  0100               	movlb	0	; () banked
  1064  000538  4B9B               	infsnz	main@i_509& (0+255),f,b
  1065  00053A  2B9C               	incf	(main@i_509+1)& (0+255),f,b
  1066  00053C  BF9C               	btfsc	(main@i_509+1)& (0+255),7,b
  1067  00053E  D7EE               	goto	l2644
  1068  000540  519C               	movf	(main@i_509+1)& (0+255),w,b
  1069  000542  E104               	bnz	u2160
  1070  000544  0E0A               	movlw	10
  1071  000546  5D9B               	subwf	main@i_509& (0+255),w,b
  1072  000548  A0D8               	btfss	status,0,c
  1073  00054A  D7E8               	goto	l2644
  1074  00054C                     u2160:
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;main.c: 176:                   ClearLCD();
  1078  00054C  EC7D  F00A         	call	_ClearLCD	;wreg free
  1079                           
  1080                           ;main.c: 177:                   robot_mode = 0;
  1081  000550  0E00               	movlw	0
  1082  000552  6E56               	movwf	_robot_mode,c	;volatile
  1083  000554                     l2652:
  1084                           
  1085                           ;main.c: 168:               while(PORTDbits.RD2 == 1)
  1086  000554  B483               	btfsc	3971,2,c	;volatile
  1087  000556  D7D5               	goto	l2634
  1088  000558                     u2170:
  1089                           
  1090                           ;main.c: 166:           while(robot_mode == 3)
  1091  000558  0E03               	movlw	3
  1092  00055A  1856               	xorwf	_robot_mode,w,c	;volatile
  1093  00055C  A4D8               	btfss	status,2,c
  1094  00055E  D705               	goto	l2570
  1095  000560  D7F9               	goto	l2652
  1096  000562                     __end_of_main:
  1097                           	opt callstack 0
  1098                           
  1099 ;; *************** function _turnRight *****************
  1100 ;; Defined at:
  1101 ;;		line 68 in file "dc_motor.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1104 ;;		 -> main@motorL(9), 
  1105 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1106 ;;		 -> main@motorR(9), 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  i               2   35[COMRAM] int 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1118 ;;      Params:         4       0       0       0
  1119 ;;      Locals:         2       0       0       0
  1120 ;;      Temps:          1       0       0       0
  1121 ;;      Totals:         7       0       0       0
  1122 ;;Total ram usage:        7 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; Hardware stack levels required when called:    4
  1125 ;; This function calls:
  1126 ;;		_setMotorPWM
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text1
  1133  000FD6                     __ptext1:
  1134                           	opt callstack 0
  1135  000FD6                     _turnRight:
  1136                           	opt callstack 26
  1137                           
  1138                           ;dc_motor.c: 68: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 69
      +                          : {;dc_motor.c: 71:     mL->direction = 1;
  1139                           
  1140                           ;incstack = 0
  1141  000FD6  EE20 F001          	lfsr	2,1
  1142  000FDA  501F               	movf	turnRight@mL,w,c
  1143  000FDC  26D9               	addwf	fsr2l,f,c
  1144  000FDE  5020               	movf	turnRight@mL+1,w,c
  1145  000FE0  22DA               	addwfc	fsr2h,f,c
  1146  000FE2  0E01               	movlw	1
  1147  000FE4  6EDF               	movwf	indf2,c
  1148                           
  1149                           ;dc_motor.c: 72:     mR->direction = 0;
  1150  000FE6  EE20 F001          	lfsr	2,1
  1151  000FEA  5021               	movf	turnRight@mR,w,c
  1152  000FEC  26D9               	addwf	fsr2l,f,c
  1153  000FEE  5022               	movf	turnRight@mR+1,w,c
  1154  000FF0  22DA               	addwfc	fsr2h,f,c
  1155  000FF2  0E00               	movlw	0
  1156  000FF4  6EDF               	movwf	indf2,c
  1157                           
  1158                           ;dc_motor.c: 74:     for(int i = 0; i<50;i++){
  1159  000FF6  0E00               	movlw	0
  1160  000FF8  6E25               	movwf	turnRight@i+1,c
  1161  000FFA  0E00               	movlw	0
  1162  000FFC  6E24               	movwf	turnRight@i,c
  1163  000FFE                     l2126:
  1164                           
  1165                           ;dc_motor.c: 75:         mL->power = i;
  1166  000FFE  C01F  FFD9         	movff	turnRight@mL,fsr2l
  1167  001002  C020  FFDA         	movff	turnRight@mL+1,fsr2h
  1168  001006  C024  FFDF         	movff	turnRight@i,indf2
  1169                           
  1170                           ;dc_motor.c: 76:         mR->power = i;
  1171  00100A  C021  FFD9         	movff	turnRight@mR,fsr2l
  1172  00100E  C022  FFDA         	movff	turnRight@mR+1,fsr2h
  1173  001012  C024  FFDF         	movff	turnRight@i,indf2
  1174                           
  1175                           ;dc_motor.c: 78:         setMotorPWM(mL);
  1176  001016  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
  1177  00101A  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  1178  00101E  ECE5  F004         	call	_setMotorPWM	;wreg free
  1179                           
  1180                           ;dc_motor.c: 79:         setMotorPWM(mR);
  1181  001022  C021  F016         	movff	turnRight@mR,setMotorPWM@m
  1182  001026  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  1183  00102A  ECE5  F004         	call	_setMotorPWM	;wreg free
  1184                           
  1185                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1186  00102E  0E03               	movlw	3
  1187  001030  6E23               	movwf	??_turnRight& (0+255),c
  1188  001032  0E98               	movlw	152
  1189  001034                     u2237:
  1190  001034  2EE8               	decfsz	wreg,f,c
  1191  001036  D7FE               	bra	u2237
  1192  001038  2E23               	decfsz	??_turnRight& (0+255),f,c
  1193  00103A  D7FC               	bra	u2237
  1194                           
  1195                           ;dc_motor.c: 81:     }
  1196  00103C  4A24               	infsnz	turnRight@i,f,c
  1197  00103E  2A25               	incf	turnRight@i+1,f,c
  1198  001040  BE25               	btfsc	turnRight@i+1,7,c
  1199  001042  D7DD               	goto	l2126
  1200  001044  5025               	movf	turnRight@i+1,w,c
  1201  001046  E105               	bnz	u1380
  1202  001048  0E32               	movlw	50
  1203  00104A  5C24               	subwf	turnRight@i,w,c
  1204  00104C  B0D8               	btfsc	status,0,c
  1205  00104E  0012               	return	
  1206  001050  D7D6               	goto	l2126
  1207  001052                     u1380:
  1208  001052  0012               	return		;funcret
  1209  001054                     __end_of_turnRight:
  1210                           	opt callstack 0
  1211                           
  1212 ;; *************** function _stop *****************
  1213 ;; Defined at:
  1214 ;;		line 40 in file "dc_motor.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1217 ;;		 -> main@motorL(9), 
  1218 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1219 ;;		 -> main@motorR(9), 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  i               2   34[COMRAM] int 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1231 ;;      Params:         4       0       0       0
  1232 ;;      Locals:         2       0       0       0
  1233 ;;      Temps:          0       0       0       0
  1234 ;;      Totals:         6       0       0       0
  1235 ;;Total ram usage:        6 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    4
  1238 ;; This function calls:
  1239 ;;		_setMotorPWM
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text2
  1246  0012B2                     __ptext2:
  1247                           	opt callstack 0
  1248  0012B2                     _stop:
  1249                           	opt callstack 26
  1250                           
  1251                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 41: {;d
      +                          c_motor.c: 42:  for(int i = 50; i > 0; i--)
  1252                           
  1253                           ;incstack = 0
  1254  0012B2  0E00               	movlw	0
  1255  0012B4  6E24               	movwf	stop@i+1,c
  1256  0012B6  0E32               	movlw	50
  1257  0012B8  6E23               	movwf	stop@i,c
  1258  0012BA                     l2250:
  1259                           
  1260                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1261  0012BA  C01F  FFD9         	movff	stop@mL,fsr2l
  1262  0012BE  C020  FFDA         	movff	stop@mL+1,fsr2h
  1263  0012C2  C023  FFDF         	movff	stop@i,indf2
  1264                           
  1265                           ;dc_motor.c: 45:         mR->power = i;
  1266  0012C6  C021  FFD9         	movff	stop@mR,fsr2l
  1267  0012CA  C022  FFDA         	movff	stop@mR+1,fsr2h
  1268  0012CE  C023  FFDF         	movff	stop@i,indf2
  1269                           
  1270                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1271  0012D2  C01F  F016         	movff	stop@mL,setMotorPWM@m
  1272  0012D6  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
  1273  0012DA  ECE5  F004         	call	_setMotorPWM	;wreg free
  1274                           
  1275                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1276  0012DE  C021  F016         	movff	stop@mR,setMotorPWM@m
  1277  0012E2  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
  1278  0012E6  ECE5  F004         	call	_setMotorPWM	;wreg free
  1279                           
  1280                           ;dc_motor.c: 48:     }
  1281  0012EA  0623               	decf	stop@i,f,c
  1282  0012EC  A0D8               	btfss	status,0,c
  1283  0012EE  0624               	decf	stop@i+1,f,c
  1284  0012F0  BE24               	btfsc	stop@i+1,7,c
  1285  0012F2  0012               	return	
  1286  0012F4  5024               	movf	stop@i+1,w,c
  1287  0012F6  E1E1               	bnz	l2250
  1288  0012F8  0423               	decf	stop@i,w,c
  1289  0012FA  A0D8               	btfss	status,0,c
  1290  0012FC  0012               	return	
  1291  0012FE  D7DD               	goto	l2250
  1292  001300                     __end_of_stop:
  1293                           	opt callstack 0
  1294                           
  1295 ;; *************** function _sprintf *****************
  1296 ;; Defined at:
  1297 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  s               2   14[BANK0 ] PTR unsigned char 
  1300 ;;		 -> main@temp2(16), 
  1301 ;;  fmt             2   16[BANK0 ] PTR const unsigned char 
  1302 ;;		 -> STR_1(13), 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  f               6   24[BANK0 ] struct _IO_FILE
  1305 ;;  ap              2   22[BANK0 ] PTR void [1]
  1306 ;;		 -> ?_sprintf(2), 
  1307 ;;  ret             2    0        int 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   14[BANK0 ] int 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1317 ;;      Params:         0       6       0       0
  1318 ;;      Locals:         0      10       0       0
  1319 ;;      Temps:          0       0       0       0
  1320 ;;      Totals:         0      16       0       0
  1321 ;;Total ram usage:       16 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    9
  1324 ;; This function calls:
  1325 ;;		_vfprintf
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text3
  1332  001260                     __ptext3:
  1333                           	opt callstack 0
  1334  001260                     _sprintf:
  1335                           	opt callstack 21
  1336                           
  1337                           ;incstack = 0
  1338  001260  0E72               	movlw	low (?_sprintf+4)
  1339  001262  0100               	movlb	0	; () banked
  1340  001264  6F76               	movwf	sprintf@ap& (0+255),b
  1341  001266  0E00               	movlw	high (?_sprintf+4)
  1342  001268  6F77               	movwf	(sprintf@ap+1)& (0+255),b
  1343  00126A  C06E  F078         	movff	sprintf@s,sprintf@f
  1344  00126E  C06F  F079         	movff	sprintf@s+1,sprintf@f+1
  1345                           
  1346                           ; BSR set to: 0
  1347  001272  0E00               	movlw	0
  1348  001274  6F7B               	movwf	(sprintf@f+3)& (0+255),b
  1349  001276  0E00               	movlw	0
  1350  001278  6F7A               	movwf	(sprintf@f+2)& (0+255),b
  1351                           
  1352                           ; BSR set to: 0
  1353  00127A  0E00               	movlw	0
  1354  00127C  6F7D               	movwf	(sprintf@f+5)& (0+255),b
  1355  00127E  0E00               	movlw	0
  1356  001280  6F7C               	movwf	(sprintf@f+4)& (0+255),b
  1357                           
  1358                           ; BSR set to: 0
  1359  001282  0E78               	movlw	low sprintf@f
  1360  001284  6F68               	movwf	vfprintf@fp& (0+255),b
  1361  001286  0E00               	movlw	high sprintf@f
  1362  001288  6F69               	movwf	(vfprintf@fp+1)& (0+255),b
  1363  00128A  C070  F06A         	movff	sprintf@fmt,vfprintf@fmt
  1364  00128E  C071  F06B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1365  001292  0E76               	movlw	low sprintf@ap
  1366  001294  6F6C               	movwf	vfprintf@ap& (0+255),b
  1367  001296  0E00               	movlw	high sprintf@ap
  1368  001298  6F6D               	movwf	(vfprintf@ap+1)& (0+255),b
  1369  00129A  EC05  F009         	call	_vfprintf	;wreg free
  1370  00129E  0100               	movlb	0	; () banked
  1371  0012A0  517A               	movf	(sprintf@f+2)& (0+255),w,b
  1372  0012A2  256E               	addwf	sprintf@s& (0+255),w,b
  1373  0012A4  6ED9               	movwf	fsr2l,c
  1374  0012A6  517B               	movf	(sprintf@f+3)& (0+255),w,b
  1375  0012A8  216F               	addwfc	(sprintf@s+1)& (0+255),w,b
  1376  0012AA  6EDA               	movwf	fsr2h,c
  1377  0012AC  0E00               	movlw	0
  1378  0012AE  6EDF               	movwf	indf2,c
  1379                           
  1380                           ; BSR set to: 0
  1381  0012B0  0012               	return		;funcret
  1382  0012B2                     __end_of_sprintf:
  1383                           	opt callstack 0
  1384                           
  1385 ;; *************** function _vfprintf *****************
  1386 ;; Defined at:
  1387 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  1390 ;;		 -> sprintf@f(6), 
  1391 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  1392 ;;		 -> STR_1(13), 
  1393 ;;  ap              2   12[BANK0 ] PTR PTR void 
  1394 ;;		 -> sprintf@ap(2), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  1397 ;;		 -> STR_1(13), 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  2    8[BANK0 ] int 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1407 ;;      Params:         0       6       0       0
  1408 ;;      Locals:         2       0       0       0
  1409 ;;      Temps:          0       0       0       0
  1410 ;;      Totals:         2       6       0       0
  1411 ;;Total ram usage:        8 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    8
  1414 ;; This function calls:
  1415 ;;		_vfpfcnvrt
  1416 ;; This function is called by:
  1417 ;;		_sprintf
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421                           	psect	text4
  1422  00120A                     __ptext4:
  1423                           	opt callstack 0
  1424  00120A                     _vfprintf:
  1425                           	opt callstack 21
  1426                           
  1427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;incstack = 0
  1431  00120A  C06A  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  1432  00120E  C06B  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1433                           
  1434                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1435  001212  0E00               	movlw	0
  1436  001214  0100               	movlb	0	; () banked
  1437  001216  6FB0               	movwf	(_nout+1)& (0+255),b
  1438  001218  0E00               	movlw	0
  1439  00121A  6FAF               	movwf	_nout& (0+255),b
  1440                           
  1441                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1442  00121C  D013               	goto	l2550
  1443  00121E                     l2548:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1447  00121E  C068  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
  1448  001222  C069  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1449  001226  0E4D               	movlw	low vfprintf@cfmt
  1450  001228  6E45               	movwf	vfpfcnvrt@fmt,c
  1451  00122A  0E00               	movlw	high vfprintf@cfmt
  1452  00122C  6E46               	movwf	vfpfcnvrt@fmt+1,c
  1453  00122E  C06C  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
  1454  001232  C06D  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1455  001236  EC88  F003         	call	_vfpfcnvrt	;wreg free
  1456  00123A  5043               	movf	?_vfpfcnvrt,w,c
  1457  00123C  0100               	movlb	0	; () banked
  1458  00123E  27AF               	addwf	_nout& (0+255),f,b
  1459  001240  5044               	movf	?_vfpfcnvrt+1,w,c
  1460  001242  23B0               	addwfc	(_nout+1)& (0+255),f,b
  1461  001244                     l2550:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1465  001244  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1466  001248  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1467  00124C                     	if	0	;tblptru may be non-zero
  1468  00124C                     	endif
  1469  00124C                     	if	0	;tblptru may be non-zero
  1470  00124C                     	endif
  1471  00124C  0008               	tblrd		*
  1472  00124E  50F5               	movf	tablat,w,c
  1473  001250  0900               	iorlw	0
  1474  001252  A4D8               	btfss	status,2,c
  1475  001254  D7E4               	goto	l2548
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1479  001256  C0AF  F068         	movff	_nout,?_vfprintf
  1480  00125A  C0B0  F069         	movff	_nout+1,?_vfprintf+1
  1481                           
  1482                           ; BSR set to: 0
  1483  00125E  0012               	return		;funcret
  1484  001260                     __end_of_vfprintf:
  1485                           	opt callstack 0
  1486                           
  1487 ;; *************** function _vfpfcnvrt *****************
  1488 ;; Defined at:
  1489 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
  1492 ;;		 -> sprintf@f(6), 
  1493 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
  1494 ;;		 -> vfprintf@cfmt(2), 
  1495 ;;  ap              2   70[COMRAM] PTR PTR void 
  1496 ;;		 -> sprintf@ap(2), 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  llu             8    0[BANK0 ] unsigned long long 
  1499 ;;  ll              8    0        long long 
  1500 ;;  f               4    0        long long 
  1501 ;;  vp              3    0        PTR void 
  1502 ;;  ct              3    0        unsigned char [3]
  1503 ;;  cp              3    0        PTR unsigned char 
  1504 ;;  i               2    0        int 
  1505 ;;  done            2    0        int 
  1506 ;;  c               1    0        unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  2   66[COMRAM] int 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1516 ;;      Params:         6       0       0       0
  1517 ;;      Locals:         0       8       0       0
  1518 ;;      Temps:          4       0       0       0
  1519 ;;      Totals:        10       8       0       0
  1520 ;;Total ram usage:       18 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    7
  1523 ;; This function calls:
  1524 ;;		_fputc
  1525 ;;		_utoa
  1526 ;; This function is called by:
  1527 ;;		_vfprintf
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text5
  1532  000710                     __ptext5:
  1533                           	opt callstack 0
  1534  000710                     _vfpfcnvrt:
  1535                           	opt callstack 21
  1536                           
  1537                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;incstack = 0
  1541  000710  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1542  000714  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1543  000718  CFDE FFF6          	movff	postinc2,tblptrl
  1544  00071C  CFDD FFF7          	movff	postdec2,tblptrh
  1545  000720                     	if	0	;tblptru may be non-zero
  1546  000720                     	endif
  1547  000720                     	if	0	;tblptru may be non-zero
  1548  000720                     	endif
  1549  000720  0008               	tblrd		*
  1550  000722  50F5               	movf	tablat,w,c
  1551  000724  0A25               	xorlw	37
  1552  000726  A4D8               	btfss	status,2,c
  1553  000728  D08E               	goto	l2536
  1554                           
  1555                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1556  00072A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1557  00072E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1558  000732  2ADE               	incf	postinc2,f,c
  1559  000734  0E00               	movlw	0
  1560  000736  22DD               	addwfc	postdec2,f,c
  1561                           
  1562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1563  000738  0E00               	movlw	0
  1564  00073A  6E50               	movwf	_width+1,c
  1565  00073C  0E00               	movlw	0
  1566  00073E  6E4F               	movwf	_width,c
  1567  000740  C04F  F053         	movff	_width,_flags
  1568  000744  C050  F054         	movff	_width+1,_flags+1
  1569                           
  1570                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1571  000748  6851               	setf	_prec,c
  1572  00074A  6852               	setf	_prec+1,c
  1573                           
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1182:      
      +                             if (*fmt[0] == 'u') {
  1575  00074C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1576  000750  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1577  000754  CFDE FFF6          	movff	postinc2,tblptrl
  1578  000758  CFDD FFF7          	movff	postdec2,tblptrh
  1579  00075C                     	if	0	;tblptru may be non-zero
  1580  00075C                     	endif
  1581  00075C                     	if	0	;tblptru may be non-zero
  1582  00075C                     	endif
  1583  00075C  0008               	tblrd		*
  1584  00075E  50F5               	movf	tablat,w,c
  1585  000760  0A75               	xorlw	117
  1586  000762  A4D8               	btfss	status,2,c
  1587  000764  D041               	goto	l2520
  1588                           
  1589                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1184:      
      +                                 ++*fmt;
  1590  000766  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1591  00076A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1592  00076E  2ADE               	incf	postinc2,f,c
  1593  000770  0E00               	movlw	0
  1594  000772  22DD               	addwfc	postdec2,f,c
  1595                           
  1596                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1185:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1597  000774  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1598  000778  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1599  00077C  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1600  000780  0E02               	movlw	2
  1601  000782  26DE               	addwf	postinc2,f,c
  1602  000784  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1603  000788  0E00               	movlw	0
  1604  00078A  22DD               	addwfc	postdec2,f,c
  1605  00078C  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1606  000790  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1607  000794  CFDE F04B          	movff	postinc2,??_vfpfcnvrt+2
  1608  000798  CFDD F04C          	movff	postdec2,??_vfpfcnvrt+3
  1609  00079C  C04B  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1610  0007A0  C04C  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1611  0007A4  0100               	movlb	0	; () banked
  1612  0007A6  6B62               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
  1613  0007A8  6B63               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
  1614  0007AA  6B64               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
  1615  0007AC  6B65               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
  1616  0007AE  6B66               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
  1617  0007B0  6B67               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1187:      
      +                                 return utoa(fp, llu);
  1621  0007B2  C043  F023         	movff	vfpfcnvrt@fp,utoa@fp
  1622  0007B6  C044  F024         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1623  0007BA  C060  F025         	movff	vfpfcnvrt@llu,utoa@d
  1624  0007BE  C061  F026         	movff	vfpfcnvrt@llu+1,utoa@d+1
  1625  0007C2  C062  F027         	movff	vfpfcnvrt@llu+2,utoa@d+2
  1626  0007C6  C063  F028         	movff	vfpfcnvrt@llu+3,utoa@d+3
  1627  0007CA  C064  F029         	movff	vfpfcnvrt@llu+4,utoa@d+4
  1628  0007CE  C065  F02A         	movff	vfpfcnvrt@llu+5,utoa@d+5
  1629  0007D2  C066  F02B         	movff	vfpfcnvrt@llu+6,utoa@d+6
  1630  0007D6  C067  F02C         	movff	vfpfcnvrt@llu+7,utoa@d+7
  1631  0007DA  ECB1  F002         	call	_utoa	;wreg free
  1632  0007DE  C023  F043         	movff	?_utoa,?_vfpfcnvrt
  1633  0007E2  C024  F044         	movff	?_utoa+1,?_vfpfcnvrt+1
  1634  0007E6  0012               	return	
  1635  0007E8                     l2520:
  1636                           
  1637                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1638  0007E8  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1639  0007EC  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1640  0007F0  CFDE FFF6          	movff	postinc2,tblptrl
  1641  0007F4  CFDD FFF7          	movff	postdec2,tblptrh
  1642  0007F8                     	if	0	;tblptru may be non-zero
  1643  0007F8                     	endif
  1644  0007F8                     	if	0	;tblptru may be non-zero
  1645  0007F8                     	endif
  1646  0007F8  0008               	tblrd		*
  1647  0007FA  50F5               	movf	tablat,w,c
  1648  0007FC  0A25               	xorlw	37
  1649  0007FE  A4D8               	btfss	status,2,c
  1650  000800  D016               	goto	l2530
  1651                           
  1652                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1653  000802  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1654  000806  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1655  00080A  2ADE               	incf	postinc2,f,c
  1656  00080C  0E00               	movlw	0
  1657  00080E  22DD               	addwfc	postdec2,f,c
  1658                           
  1659                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1660  000810  0E00               	movlw	0
  1661  000812  6E09               	movwf	fputc@c+1,c
  1662  000814  0E25               	movlw	37
  1663  000816  6E08               	movwf	fputc@c,c
  1664  000818  C043  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  1665  00081C  C044  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1666  000820  EC0E  F007         	call	_fputc	;wreg free
  1667  000824                     l2526:
  1668                           
  1669                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1670  000824  0E00               	movlw	0
  1671  000826  6E44               	movwf	?_vfpfcnvrt+1,c
  1672  000828  0E01               	movlw	1
  1673  00082A  6E43               	movwf	?_vfpfcnvrt,c
  1674  00082C  0012               	return	
  1675  00082E                     l2530:
  1676                           
  1677                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1678  00082E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1679  000832  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1680  000836  2ADE               	incf	postinc2,f,c
  1681  000838  0E00               	movlw	0
  1682  00083A  22DD               	addwfc	postdec2,f,c
  1683                           
  1684                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1685  00083C  0E00               	movlw	0
  1686  00083E  6E44               	movwf	?_vfpfcnvrt+1,c
  1687  000840  0E00               	movlw	0
  1688  000842  6E43               	movwf	?_vfpfcnvrt,c
  1689  000844  0012               	return	
  1690  000846                     l2536:
  1691                           
  1692                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1693  000846  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1694  00084A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1695  00084E  CFDE FFF6          	movff	postinc2,tblptrl
  1696  000852  CFDD FFF7          	movff	postdec2,tblptrh
  1697  000856                     	if	0	;tblptru may be non-zero
  1698  000856                     	endif
  1699  000856                     	if	0	;tblptru may be non-zero
  1700  000856                     	endif
  1701  000856  0008               	tblrd		*
  1702  000858  50F5               	movf	tablat,w,c
  1703  00085A  6E08               	movwf	fputc@c,c
  1704  00085C  6A09               	clrf	fputc@c+1,c
  1705  00085E  C043  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  1706  000862  C044  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1707  000866  EC0E  F007         	call	_fputc	;wreg free
  1708                           
  1709                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1710  00086A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1711  00086E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1712  000872  2ADE               	incf	postinc2,f,c
  1713  000874  0E00               	movlw	0
  1714  000876  22DD               	addwfc	postdec2,f,c
  1715  000878  D7D5               	goto	l2526
  1716  00087A                     __end_of_vfpfcnvrt:
  1717                           	opt callstack 0
  1718                           
  1719 ;; *************** function _utoa *****************
  1720 ;; Defined at:
  1721 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  fp              2   34[COMRAM] PTR struct _IO_FILE
  1724 ;;		 -> sprintf@f(6), 
  1725 ;;  d               8   36[COMRAM] unsigned long long 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  n               8   56[COMRAM] unsigned long long 
  1728 ;;  i               2   64[COMRAM] int 
  1729 ;;  w               2   54[COMRAM] int 
  1730 ;;  p               2   52[COMRAM] int 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  2   34[COMRAM] int 
  1733 ;; Registers used:
  1734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1740 ;;      Params:        10       0       0       0
  1741 ;;      Locals:        14       0       0       0
  1742 ;;      Temps:          8       0       0       0
  1743 ;;      Totals:        32       0       0       0
  1744 ;;Total ram usage:       32 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    6
  1747 ;; This function calls:
  1748 ;;		___lodiv
  1749 ;;		___lomod
  1750 ;;		_pad
  1751 ;; This function is called by:
  1752 ;;		_vfpfcnvrt
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text6
  1757  000562                     __ptext6:
  1758                           	opt callstack 0
  1759  000562                     _utoa:
  1760                           	opt callstack 21
  1761                           
  1762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 593: static
      +                           int utoa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic
      +                          \sources\c99\common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c99\common\doprnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)
      +                          \Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
  1763                           
  1764                           ;incstack = 0
  1765  000562  AE52               	btfss	_prec+1,7,c
  1766                           
  1767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 600:       
      +                            flags &= ~(1 << 1);
  1768  000564  9253               	bcf	_flags,1,c
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 602:     p 
      +                          = (0 < prec) ? prec : 1;
  1771  000566  BE52               	btfsc	_prec+1,7,c
  1772  000568  D005               	goto	u1970
  1773  00056A  5052               	movf	_prec+1,w,c
  1774  00056C  E108               	bnz	l322
  1775  00056E  0451               	decf	_prec,w,c
  1776  000570  B0D8               	btfsc	status,0,c
  1777  000572  D005               	goto	l322
  1778  000574                     u1970:
  1779  000574  0E00               	movlw	0
  1780  000576  6E36               	movwf	utoa@p+1,c
  1781  000578  0E01               	movlw	1
  1782  00057A  6E35               	movwf	utoa@p,c
  1783  00057C  D004               	goto	l324
  1784  00057E                     l322:
  1785  00057E  C051  F035         	movff	_prec,utoa@p
  1786  000582  C052  F036         	movff	_prec+1,utoa@p+1
  1787  000586                     l324:
  1788                           
  1789                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 603:     w 
      +                          = width;
  1790  000586  C04F  F037         	movff	_width,utoa@w
  1791  00058A  C050  F038         	movff	_width+1,utoa@w+1
  1792                           
  1793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 606:     n 
      +                          = d;
  1794  00058E  C025  F039         	movff	utoa@d,utoa@n
  1795  000592  C026  F03A         	movff	utoa@d+1,utoa@n+1
  1796  000596  C027  F03B         	movff	utoa@d+2,utoa@n+2
  1797  00059A  C028  F03C         	movff	utoa@d+3,utoa@n+3
  1798  00059E  C029  F03D         	movff	utoa@d+4,utoa@n+4
  1799  0005A2  C02A  F03E         	movff	utoa@d+5,utoa@n+5
  1800  0005A6  C02B  F03F         	movff	utoa@d+6,utoa@n+6
  1801  0005AA  C02C  F040         	movff	utoa@d+7,utoa@n+7
  1802                           
  1803                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 607:     i 
      +                          = sizeof(dbuf) - 1;
  1804  0005AE  0E00               	movlw	0
  1805  0005B0  6E42               	movwf	utoa@i+1,c
  1806  0005B2  0E1F               	movlw	31
  1807  0005B4  6E41               	movwf	utoa@i,c
  1808                           
  1809                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 608:     db
      +                          uf[i] = '\0';
  1810  0005B6  0E00               	movlw	0
  1811  0005B8  0100               	movlb	0	; () banked
  1812  0005BA  6FD1               	movwf	(_dbuf+31)& (0+255),b
  1813                           
  1814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1815  0005BC  D076               	goto	l2490
  1816  0005BE                     l2480:
  1817                           
  1818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 610:       
      +                            --i;
  1819  0005BE  0641               	decf	utoa@i,f,c
  1820  0005C0  A0D8               	btfss	status,0,c
  1821  0005C2  0642               	decf	utoa@i+1,f,c
  1822                           
  1823                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 611:       
      +                            dbuf[i] = '0' + (n % 10);
  1824  0005C4  0EB2               	movlw	low _dbuf
  1825  0005C6  2441               	addwf	utoa@i,w,c
  1826  0005C8  6ED9               	movwf	fsr2l,c
  1827  0005CA  0E00               	movlw	high _dbuf
  1828  0005CC  2042               	addwfc	utoa@i+1,w,c
  1829  0005CE  6EDA               	movwf	fsr2h,c
  1830  0005D0  C039  F008         	movff	utoa@n,___lomod@dividend
  1831  0005D4  C03A  F009         	movff	utoa@n+1,___lomod@dividend+1
  1832  0005D8  C03B  F00A         	movff	utoa@n+2,___lomod@dividend+2
  1833  0005DC  C03C  F00B         	movff	utoa@n+3,___lomod@dividend+3
  1834  0005E0  C03D  F00C         	movff	utoa@n+4,___lomod@dividend+4
  1835  0005E4  C03E  F00D         	movff	utoa@n+5,___lomod@dividend+5
  1836  0005E8  C03F  F00E         	movff	utoa@n+6,___lomod@dividend+6
  1837  0005EC  C040  F00F         	movff	utoa@n+7,___lomod@dividend+7
  1838  0005F0  0E0A               	movlw	10
  1839  0005F2  6E10               	movwf	___lomod@divisor,c
  1840  0005F4  0E00               	movlw	0
  1841  0005F6  6E11               	movwf	___lomod@divisor+1,c
  1842  0005F8  0E00               	movlw	0
  1843  0005FA  6E12               	movwf	___lomod@divisor+2,c
  1844  0005FC  0E00               	movlw	0
  1845  0005FE  6E13               	movwf	___lomod@divisor+3,c
  1846  000600  0E00               	movlw	0
  1847  000602  6E14               	movwf	___lomod@divisor+4,c
  1848  000604  0E00               	movlw	0
  1849  000606  6E15               	movwf	___lomod@divisor+5,c
  1850  000608  0E00               	movlw	0
  1851  00060A  6E16               	movwf	___lomod@divisor+6,c
  1852  00060C  0E00               	movlw	0
  1853  00060E  6E17               	movwf	___lomod@divisor+7,c
  1854  000610  ECB7  F006         	call	___lomod	;wreg free
  1855  000614  C008  F02D         	movff	?___lomod,??_utoa
  1856  000618  C009  F02E         	movff	?___lomod+1,??_utoa+1
  1857  00061C  C00A  F02F         	movff	?___lomod+2,??_utoa+2
  1858  000620  C00B  F030         	movff	?___lomod+3,??_utoa+3
  1859  000624  C00C  F031         	movff	?___lomod+4,??_utoa+4
  1860  000628  C00D  F032         	movff	?___lomod+5,??_utoa+5
  1861  00062C  C00E  F033         	movff	?___lomod+6,??_utoa+6
  1862  000630  C00F  F034         	movff	?___lomod+7,??_utoa+7
  1863  000634  502D               	movf	??_utoa,w,c
  1864  000636  0F30               	addlw	48
  1865  000638  6EDF               	movwf	indf2,c
  1866                           
  1867                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 612:       
      +                            --p;
  1868  00063A  0635               	decf	utoa@p,f,c
  1869  00063C  A0D8               	btfss	status,0,c
  1870  00063E  0636               	decf	utoa@p+1,f,c
  1871                           
  1872                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 613:       
      +                            --w;
  1873  000640  0637               	decf	utoa@w,f,c
  1874  000642  A0D8               	btfss	status,0,c
  1875  000644  0638               	decf	utoa@w+1,f,c
  1876                           
  1877                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 614:       
      +                            n = n / 10;
  1878  000646  C039  F008         	movff	utoa@n,___lodiv@dividend
  1879  00064A  C03A  F009         	movff	utoa@n+1,___lodiv@dividend+1
  1880  00064E  C03B  F00A         	movff	utoa@n+2,___lodiv@dividend+2
  1881  000652  C03C  F00B         	movff	utoa@n+3,___lodiv@dividend+3
  1882  000656  C03D  F00C         	movff	utoa@n+4,___lodiv@dividend+4
  1883  00065A  C03E  F00D         	movff	utoa@n+5,___lodiv@dividend+5
  1884  00065E  C03F  F00E         	movff	utoa@n+6,___lodiv@dividend+6
  1885  000662  C040  F00F         	movff	utoa@n+7,___lodiv@dividend+7
  1886  000666  0E0A               	movlw	10
  1887  000668  6E10               	movwf	___lodiv@divisor,c
  1888  00066A  0E00               	movlw	0
  1889  00066C  6E11               	movwf	___lodiv@divisor+1,c
  1890  00066E  0E00               	movlw	0
  1891  000670  6E12               	movwf	___lodiv@divisor+2,c
  1892  000672  0E00               	movlw	0
  1893  000674  6E13               	movwf	___lodiv@divisor+3,c
  1894  000676  0E00               	movlw	0
  1895  000678  6E14               	movwf	___lodiv@divisor+4,c
  1896  00067A  0E00               	movlw	0
  1897  00067C  6E15               	movwf	___lodiv@divisor+5,c
  1898  00067E  0E00               	movlw	0
  1899  000680  6E16               	movwf	___lodiv@divisor+6,c
  1900  000682  0E00               	movlw	0
  1901  000684  6E17               	movwf	___lodiv@divisor+7,c
  1902  000686  ECEC  F005         	call	___lodiv	;wreg free
  1903  00068A  C008  F039         	movff	?___lodiv,utoa@n
  1904  00068E  C009  F03A         	movff	?___lodiv+1,utoa@n+1
  1905  000692  C00A  F03B         	movff	?___lodiv+2,utoa@n+2
  1906  000696  C00B  F03C         	movff	?___lodiv+3,utoa@n+3
  1907  00069A  C00C  F03D         	movff	?___lodiv+4,utoa@n+4
  1908  00069E  C00D  F03E         	movff	?___lodiv+5,utoa@n+5
  1909  0006A2  C00E  F03F         	movff	?___lodiv+6,utoa@n+6
  1910  0006A6  C00F  F040         	movff	?___lodiv+7,utoa@n+7
  1911  0006AA                     l2490:
  1912                           
  1913                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 609:     wh
      +                          ile (i && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1914  0006AA  5041               	movf	utoa@i,w,c
  1915  0006AC  1042               	iorwf	utoa@i+1,w,c
  1916  0006AE  B4D8               	btfsc	status,2,c
  1917  0006B0  D01A               	goto	u2020
  1918  0006B2  5039               	movf	utoa@n,w,c
  1919  0006B4  103A               	iorwf	utoa@n+1,w,c
  1920  0006B6  103B               	iorwf	utoa@n+2,w,c
  1921  0006B8  103C               	iorwf	utoa@n+3,w,c
  1922  0006BA  103D               	iorwf	utoa@n+4,w,c
  1923  0006BC  103E               	iorwf	utoa@n+5,w,c
  1924  0006BE  103F               	iorwf	utoa@n+6,w,c
  1925  0006C0  1040               	iorwf	utoa@n+7,w,c
  1926  0006C2  A4D8               	btfss	status,2,c
  1927  0006C4  D77C               	goto	l2480
  1928  0006C6  BE36               	btfsc	utoa@p+1,7,c
  1929  0006C8  D005               	goto	u2000
  1930  0006CA  5036               	movf	utoa@p+1,w,c
  1931  0006CC  E102               	bnz	u2001
  1932  0006CE  0435               	decf	utoa@p,w,c
  1933  0006D0  B0D8               	btfsc	status,0,c
  1934  0006D2                     u2001:
  1935  0006D2  D775               	goto	l2480
  1936  0006D4                     u2000:
  1937  0006D4  BE38               	btfsc	utoa@w+1,7,c
  1938  0006D6  D007               	goto	u2020
  1939  0006D8  5038               	movf	utoa@w+1,w,c
  1940  0006DA  E103               	bnz	u2010
  1941  0006DC  0437               	decf	utoa@w,w,c
  1942  0006DE  A0D8               	btfss	status,0,c
  1943  0006E0  D002               	goto	u2020
  1944  0006E2                     u2010:
  1945  0006E2  B253               	btfsc	_flags,1,c
  1946  0006E4  D76C               	goto	l2480
  1947  0006E6                     u2020:
  1948                           
  1949                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 618:     re
      +                          turn pad(fp, &dbuf[i], w);
  1950  0006E6  C023  F018         	movff	utoa@fp,pad@fp
  1951  0006EA  C024  F019         	movff	utoa@fp+1,pad@fp+1
  1952  0006EE  0EB2               	movlw	low _dbuf
  1953  0006F0  2441               	addwf	utoa@i,w,c
  1954  0006F2  6E1A               	movwf	pad@buf,c
  1955  0006F4  0E00               	movlw	high _dbuf
  1956  0006F6  2042               	addwfc	utoa@i+1,w,c
  1957  0006F8  6E1B               	movwf	pad@buf+1,c
  1958  0006FA  C037  F01C         	movff	utoa@w,pad@p
  1959  0006FE  C038  F01D         	movff	utoa@w+1,pad@p+1
  1960  000702  EC5E  F007         	call	_pad	;wreg free
  1961  000706  C018  F023         	movff	?_pad,?_utoa
  1962  00070A  C019  F024         	movff	?_pad+1,?_utoa+1
  1963  00070E  0012               	return		;funcret
  1964  000710                     __end_of_utoa:
  1965                           	opt callstack 0
  1966                           
  1967 ;; *************** function _pad *****************
  1968 ;; Defined at:
  1969 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  fp              2   23[COMRAM] PTR struct _IO_FILE
  1972 ;;		 -> sprintf@f(6), 
  1973 ;;  buf             2   25[COMRAM] PTR unsigned char 
  1974 ;;		 -> dbuf(32), 
  1975 ;;  p               2   27[COMRAM] int 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  w               2   32[COMRAM] int 
  1978 ;;  i               2   30[COMRAM] int 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  2   23[COMRAM] int 
  1981 ;; Registers used:
  1982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1988 ;;      Params:         6       0       0       0
  1989 ;;      Locals:         4       0       0       0
  1990 ;;      Temps:          1       0       0       0
  1991 ;;      Totals:        11       0       0       0
  1992 ;;Total ram usage:       11 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    5
  1995 ;; This function calls:
  1996 ;;		_fputc
  1997 ;;		_fputs
  1998 ;;		_strlen
  1999 ;; This function is called by:
  2000 ;;		_utoa
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text7
  2005  000EBC                     __ptext7:
  2006                           	opt callstack 0
  2007  000EBC                     _pad:
  2008                           	opt callstack 21
  2009                           
  2010                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2011                           
  2012                           ;incstack = 0
  2013  000EBC  A053               	btfss	_flags,0,c
  2014  000EBE  D00A               	goto	l2412
  2015                           
  2016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2017  000EC0  C01A  F011         	movff	pad@buf,fputs@s
  2018  000EC4  C01B  F012         	movff	pad@buf+1,fputs@s+1
  2019  000EC8  C018  F013         	movff	pad@fp,fputs@fp
  2020  000ECC  C019  F014         	movff	pad@fp+1,fputs@fp+1
  2021  000ED0  ECC6  F009         	call	_fputs	;wreg free
  2022  000ED4                     l2412:
  2023                           
  2024                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2025  000ED4  BE1D               	btfsc	pad@p+1,7,c
  2026  000ED6  D005               	goto	l2416
  2027  000ED8  C01C  F021         	movff	pad@p,pad@w
  2028  000EDC  C01D  F022         	movff	pad@p+1,pad@w+1
  2029  000EE0  D004               	goto	l312
  2030  000EE2                     l2416:
  2031  000EE2  0E00               	movlw	0
  2032  000EE4  6E22               	movwf	pad@w+1,c
  2033  000EE6  0E00               	movlw	0
  2034  000EE8  6E21               	movwf	pad@w,c
  2035  000EEA                     l312:
  2036                           
  2037                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2038  000EEA  0E00               	movlw	0
  2039  000EEC  6E20               	movwf	pad@i+1,c
  2040  000EEE  0E00               	movlw	0
  2041  000EF0  6E1F               	movwf	pad@i,c
  2042                           
  2043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2044  000EF2  D00C               	goto	l2422
  2045  000EF4                     l2418:
  2046                           
  2047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2048  000EF4  0E00               	movlw	0
  2049  000EF6  6E09               	movwf	fputc@c+1,c
  2050  000EF8  0E20               	movlw	32
  2051  000EFA  6E08               	movwf	fputc@c,c
  2052  000EFC  C018  F00A         	movff	pad@fp,fputc@fp
  2053  000F00  C019  F00B         	movff	pad@fp+1,fputc@fp+1
  2054  000F04  EC0E  F007         	call	_fputc	;wreg free
  2055                           
  2056                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2057  000F08  4A1F               	infsnz	pad@i,f,c
  2058  000F0A  2A20               	incf	pad@i+1,f,c
  2059  000F0C                     l2422:
  2060                           
  2061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2062  000F0C  5021               	movf	pad@w,w,c
  2063  000F0E  5C1F               	subwf	pad@i,w,c
  2064  000F10  5020               	movf	pad@i+1,w,c
  2065  000F12  0A80               	xorlw	128
  2066  000F14  6E1E               	movwf	??_pad& (0+255),c
  2067  000F16  5022               	movf	pad@w+1,w,c
  2068  000F18  0A80               	xorlw	128
  2069  000F1A  581E               	subwfb	??_pad& (0+255),w,c
  2070  000F1C  A0D8               	btfss	status,0,c
  2071  000F1E  D7EA               	goto	l2418
  2072                           
  2073                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2074  000F20  B053               	btfsc	_flags,0,c
  2075  000F22  D00A               	goto	l2426
  2076                           
  2077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2078  000F24  C01A  F011         	movff	pad@buf,fputs@s
  2079  000F28  C01B  F012         	movff	pad@buf+1,fputs@s+1
  2080  000F2C  C018  F013         	movff	pad@fp,fputs@fp
  2081  000F30  C019  F014         	movff	pad@fp+1,fputs@fp+1
  2082  000F34  ECC6  F009         	call	_fputs	;wreg free
  2083  000F38                     l2426:
  2084                           
  2085                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2086  000F38  C01A  F008         	movff	pad@buf,strlen@s
  2087  000F3C  C01B  F009         	movff	pad@buf+1,strlen@s+1
  2088  000F40  EC28  F00A         	call	_strlen	;wreg free
  2089  000F44  5021               	movf	pad@w,w,c
  2090  000F46  2408               	addwf	?_strlen,w,c
  2091  000F48  6E18               	movwf	?_pad,c
  2092  000F4A  5022               	movf	pad@w+1,w,c
  2093  000F4C  2009               	addwfc	?_strlen+1,w,c
  2094  000F4E  6E19               	movwf	?_pad+1,c
  2095  000F50  0012               	return		;funcret
  2096  000F52                     __end_of_pad:
  2097                           	opt callstack 0
  2098                           
  2099 ;; *************** function _strlen *****************
  2100 ;; Defined at:
  2101 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2104 ;;		 -> dbuf(32), 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  a               2    9[COMRAM] PTR const unsigned char 
  2107 ;;		 -> dbuf(32), 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  2    7[COMRAM] unsigned int 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2117 ;;      Params:         2       0       0       0
  2118 ;;      Locals:         2       0       0       0
  2119 ;;      Temps:          0       0       0       0
  2120 ;;      Totals:         4       0       0       0
  2121 ;;Total ram usage:        4 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    2
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_pad
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text8
  2132  001450                     __ptext8:
  2133                           	opt callstack 0
  2134  001450                     _strlen:
  2135                           	opt callstack 23
  2136                           
  2137                           ;incstack = 0
  2138  001450  C008  F00A         	movff	strlen@s,strlen@a
  2139  001454  C009  F00B         	movff	strlen@s+1,strlen@a+1
  2140  001458  D002               	goto	l2402
  2141  00145A                     l2400:
  2142  00145A  4A08               	infsnz	strlen@s,f,c
  2143  00145C  2A09               	incf	strlen@s+1,f,c
  2144  00145E                     l2402:
  2145  00145E  C008  FFD9         	movff	strlen@s,fsr2l
  2146  001462  C009  FFDA         	movff	strlen@s+1,fsr2h
  2147  001466  50DF               	movf	indf2,w,c
  2148  001468  A4D8               	btfss	status,2,c
  2149  00146A  D7F7               	goto	l2400
  2150  00146C  500A               	movf	strlen@a,w,c
  2151  00146E  5C08               	subwf	strlen@s,w,c
  2152  001470  6E08               	movwf	?_strlen,c
  2153  001472  500B               	movf	strlen@a+1,w,c
  2154  001474  5809               	subwfb	strlen@s+1,w,c
  2155  001476  6E09               	movwf	?_strlen+1,c
  2156  001478  0012               	return		;funcret
  2157  00147A                     __end_of_strlen:
  2158                           	opt callstack 0
  2159                           
  2160 ;; *************** function _fputs *****************
  2161 ;; Defined at:
  2162 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  s               2   16[COMRAM] PTR const unsigned char 
  2165 ;;		 -> dbuf(32), 
  2166 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  2167 ;;		 -> sprintf@f(6), 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  i               2   21[COMRAM] int 
  2170 ;;  c               1   20[COMRAM] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  2   16[COMRAM] int 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:         4       0       0       0
  2181 ;;      Locals:         3       0       0       0
  2182 ;;      Temps:          0       0       0       0
  2183 ;;      Totals:         7       0       0       0
  2184 ;;Total ram usage:        7 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    4
  2187 ;; This function calls:
  2188 ;;		_fputc
  2189 ;; This function is called by:
  2190 ;;		_pad
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text9
  2195  00138C                     __ptext9:
  2196                           	opt callstack 0
  2197  00138C                     _fputs:
  2198                           	opt callstack 21
  2199                           
  2200                           ;incstack = 0
  2201  00138C  0E00               	movlw	0
  2202  00138E  6E17               	movwf	fputs@i+1,c
  2203  001390  0E00               	movlw	0
  2204  001392  6E16               	movwf	fputs@i,c
  2205  001394  D00B               	goto	l2396
  2206  001396                     l2392:
  2207  001396  C015  F008         	movff	fputs@c,fputc@c
  2208  00139A  6A09               	clrf	fputc@c+1,c
  2209  00139C  C013  F00A         	movff	fputs@fp,fputc@fp
  2210  0013A0  C014  F00B         	movff	fputs@fp+1,fputc@fp+1
  2211  0013A4  EC0E  F007         	call	_fputc	;wreg free
  2212  0013A8  4A16               	infsnz	fputs@i,f,c
  2213  0013AA  2A17               	incf	fputs@i+1,f,c
  2214  0013AC                     l2396:
  2215  0013AC  5016               	movf	fputs@i,w,c
  2216  0013AE  2411               	addwf	fputs@s,w,c
  2217  0013B0  6ED9               	movwf	fsr2l,c
  2218  0013B2  5017               	movf	fputs@i+1,w,c
  2219  0013B4  2012               	addwfc	fputs@s+1,w,c
  2220  0013B6  6EDA               	movwf	fsr2h,c
  2221  0013B8  50DF               	movf	indf2,w,c
  2222  0013BA  6E15               	movwf	fputs@c,c
  2223  0013BC  5015               	movf	fputs@c,w,c
  2224  0013BE  B4D8               	btfsc	status,2,c
  2225  0013C0  0012               	return	
  2226  0013C2  D7E9               	goto	l2392
  2227  0013C4                     __end_of_fputs:
  2228                           	opt callstack 0
  2229                           
  2230 ;; *************** function _fputc *****************
  2231 ;; Defined at:
  2232 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  c               2    7[COMRAM] int 
  2235 ;;  fp              2    9[COMRAM] PTR struct _IO_FILE
  2236 ;;		 -> sprintf@f(6), 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  2    7[COMRAM] int 
  2241 ;; Registers used:
  2242 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2248 ;;      Params:         4       0       0       0
  2249 ;;      Locals:         0       0       0       0
  2250 ;;      Temps:          5       0       0       0
  2251 ;;      Totals:         9       0       0       0
  2252 ;;Total ram usage:        9 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    3
  2255 ;; This function calls:
  2256 ;;		_putch
  2257 ;; This function is called by:
  2258 ;;		_pad
  2259 ;;		_vfpfcnvrt
  2260 ;;		_fputs
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text10
  2265  000E1C                     __ptext10:
  2266                           	opt callstack 0
  2267  000E1C                     _fputc:
  2268                           	opt callstack 21
  2269                           
  2270                           ;incstack = 0
  2271  000E1C  500A               	movf	fputc@fp,w,c
  2272  000E1E  100B               	iorwf	fputc@fp+1,w,c
  2273  000E20  B4D8               	btfsc	status,2,c
  2274  000E22  D004               	goto	u1800
  2275  000E24  500A               	movf	fputc@fp,w,c
  2276  000E26  100B               	iorwf	fputc@fp+1,w,c
  2277  000E28  A4D8               	btfss	status,2,c
  2278  000E2A  D004               	goto	l2382
  2279  000E2C                     u1800:
  2280  000E2C  5008               	movf	fputc@c,w,c
  2281  000E2E  ECA9  F00A         	call	_putch
  2282  000E32  0012               	return	
  2283  000E34                     l2382:
  2284  000E34  EE20 F004          	lfsr	2,4
  2285  000E38  500A               	movf	fputc@fp,w,c
  2286  000E3A  26D9               	addwf	fsr2l,f,c
  2287  000E3C  500B               	movf	fputc@fp+1,w,c
  2288  000E3E  22DA               	addwfc	fsr2h,f,c
  2289  000E40  50DE               	movf	postinc2,w,c
  2290  000E42  10DE               	iorwf	postinc2,w,c
  2291  000E44  B4D8               	btfsc	status,2,c
  2292  000E46  D016               	goto	u1820
  2293  000E48  EE20 F004          	lfsr	2,4
  2294  000E4C  500A               	movf	fputc@fp,w,c
  2295  000E4E  26D9               	addwf	fsr2l,f,c
  2296  000E50  500B               	movf	fputc@fp+1,w,c
  2297  000E52  22DA               	addwfc	fsr2h,f,c
  2298  000E54  EE10 F002          	lfsr	1,2
  2299  000E58  500A               	movf	fputc@fp,w,c
  2300  000E5A  26E1               	addwf	fsr1l,f,c
  2301  000E5C  500B               	movf	fputc@fp+1,w,c
  2302  000E5E  22E2               	addwfc	fsr1h,f,c
  2303  000E60  50DE               	movf	postinc2,w,c
  2304  000E62  5CE6               	subwf	postinc1,w,c
  2305  000E64  50E6               	movf	postinc1,w,c
  2306  000E66  0A80               	xorlw	128
  2307  000E68  6E10               	movwf	(??_fputc+4)& (0+255),c
  2308  000E6A  50DE               	movf	postinc2,w,c
  2309  000E6C  0A80               	xorlw	128
  2310  000E6E  5810               	subwfb	(??_fputc+4)& (0+255),w,c
  2311  000E70  B0D8               	btfsc	status,0,c
  2312  000E72  0012               	return	
  2313  000E74                     u1820:
  2314  000E74  EE20 F002          	lfsr	2,2
  2315  000E78  500A               	movf	fputc@fp,w,c
  2316  000E7A  26D9               	addwf	fsr2l,f,c
  2317  000E7C  500B               	movf	fputc@fp+1,w,c
  2318  000E7E  22DA               	addwfc	fsr2h,f,c
  2319  000E80  CFDE F00C          	movff	postinc2,??_fputc
  2320  000E84  CFDD F00D          	movff	postdec2,??_fputc+1
  2321  000E88  C00A  FFD9         	movff	fputc@fp,fsr2l
  2322  000E8C  C00B  FFDA         	movff	fputc@fp+1,fsr2h
  2323  000E90  CFDE F00E          	movff	postinc2,??_fputc+2
  2324  000E94  CFDD F00F          	movff	postdec2,??_fputc+3
  2325  000E98  500C               	movf	??_fputc,w,c
  2326  000E9A  240E               	addwf	??_fputc+2,w,c
  2327  000E9C  6ED9               	movwf	fsr2l,c
  2328  000E9E  500D               	movf	??_fputc+1,w,c
  2329  000EA0  200F               	addwfc	??_fputc+3,w,c
  2330  000EA2  6EDA               	movwf	fsr2h,c
  2331  000EA4  C008  FFDF         	movff	fputc@c,indf2
  2332  000EA8  EE20 F002          	lfsr	2,2
  2333  000EAC  500A               	movf	fputc@fp,w,c
  2334  000EAE  26D9               	addwf	fsr2l,f,c
  2335  000EB0  500B               	movf	fputc@fp+1,w,c
  2336  000EB2  22DA               	addwfc	fsr2h,f,c
  2337  000EB4  2ADE               	incf	postinc2,f,c
  2338  000EB6  0E00               	movlw	0
  2339  000EB8  22DD               	addwfc	postdec2,f,c
  2340  000EBA  0012               	return		;funcret
  2341  000EBC                     __end_of_fputc:
  2342                           	opt callstack 0
  2343                           
  2344 ;; *************** function _putch *****************
  2345 ;; Defined at:
  2346 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  c               1    wreg     unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  c               1    0[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2360 ;;      Params:         0       0       0       0
  2361 ;;      Locals:         0       0       0       0
  2362 ;;      Temps:          0       0       0       0
  2363 ;;      Totals:         0       0       0       0
  2364 ;;Total ram usage:        0 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    2
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_fputc
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text11
  2375  001552                     __ptext11:
  2376                           	opt callstack 0
  2377  001552                     _putch:
  2378                           	opt callstack 21
  2379                           
  2380                           ;incstack = 0
  2381  001552  0012               	return		;funcret
  2382  001554                     __end_of_putch:
  2383                           	opt callstack 0
  2384                           
  2385 ;; *************** function ___lomod *****************
  2386 ;; Defined at:
  2387 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lomod.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  dividend        8    7[COMRAM] unsigned long long 
  2390 ;;  divisor         8   15[COMRAM] unsigned long long 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  counter         1   23[COMRAM] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  8    7[COMRAM] unsigned long long 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2402 ;;      Params:        16       0       0       0
  2403 ;;      Locals:         1       0       0       0
  2404 ;;      Temps:          0       0       0       0
  2405 ;;      Totals:        17       0       0       0
  2406 ;;Total ram usage:       17 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    2
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_utoa
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text12
  2417  000D6E                     __ptext12:
  2418                           	opt callstack 0
  2419  000D6E                     ___lomod:
  2420                           	opt callstack 24
  2421                           
  2422                           ;incstack = 0
  2423  000D6E  5010               	movf	___lomod@divisor,w,c
  2424  000D70  1011               	iorwf	___lomod@divisor+1,w,c
  2425  000D72  1012               	iorwf	___lomod@divisor+2,w,c
  2426  000D74  1013               	iorwf	___lomod@divisor+3,w,c
  2427  000D76  1014               	iorwf	___lomod@divisor+4,w,c
  2428  000D78  1015               	iorwf	___lomod@divisor+5,w,c
  2429  000D7A  1016               	iorwf	___lomod@divisor+6,w,c
  2430  000D7C  1017               	iorwf	___lomod@divisor+7,w,c
  2431  000D7E  B4D8               	btfsc	status,2,c
  2432  000D80  D03C               	goto	l795
  2433  000D82  0E01               	movlw	1
  2434  000D84  6E18               	movwf	___lomod@counter,c
  2435  000D86  D00A               	goto	l2458
  2436  000D88                     l2456:
  2437  000D88  90D8               	bcf	status,0,c
  2438  000D8A  3610               	rlcf	___lomod@divisor,f,c
  2439  000D8C  3611               	rlcf	___lomod@divisor+1,f,c
  2440  000D8E  3612               	rlcf	___lomod@divisor+2,f,c
  2441  000D90  3613               	rlcf	___lomod@divisor+3,f,c
  2442  000D92  3614               	rlcf	___lomod@divisor+4,f,c
  2443  000D94  3615               	rlcf	___lomod@divisor+5,f,c
  2444  000D96  3616               	rlcf	___lomod@divisor+6,f,c
  2445  000D98  3617               	rlcf	___lomod@divisor+7,f,c
  2446  000D9A  2A18               	incf	___lomod@counter,f,c
  2447  000D9C                     l2458:
  2448  000D9C  AE17               	btfss	___lomod@divisor+7,7,c
  2449  000D9E  D7F4               	goto	l2456
  2450  000DA0                     u1940:
  2451  000DA0  5010               	movf	___lomod@divisor,w,c
  2452  000DA2  5C08               	subwf	___lomod@dividend,w,c
  2453  000DA4  5011               	movf	___lomod@divisor+1,w,c
  2454  000DA6  5809               	subwfb	___lomod@dividend+1,w,c
  2455  000DA8  5012               	movf	___lomod@divisor+2,w,c
  2456  000DAA  580A               	subwfb	___lomod@dividend+2,w,c
  2457  000DAC  5013               	movf	___lomod@divisor+3,w,c
  2458  000DAE  580B               	subwfb	___lomod@dividend+3,w,c
  2459  000DB0  5014               	movf	___lomod@divisor+4,w,c
  2460  000DB2  580C               	subwfb	___lomod@dividend+4,w,c
  2461  000DB4  5015               	movf	___lomod@divisor+5,w,c
  2462  000DB6  580D               	subwfb	___lomod@dividend+5,w,c
  2463  000DB8  5016               	movf	___lomod@divisor+6,w,c
  2464  000DBA  580E               	subwfb	___lomod@dividend+6,w,c
  2465  000DBC  5017               	movf	___lomod@divisor+7,w,c
  2466  000DBE  580F               	subwfb	___lomod@dividend+7,w,c
  2467  000DC0  A0D8               	btfss	status,0,c
  2468  000DC2  D010               	goto	l2464
  2469  000DC4  5010               	movf	___lomod@divisor,w,c
  2470  000DC6  5E08               	subwf	___lomod@dividend,f,c
  2471  000DC8  5011               	movf	___lomod@divisor+1,w,c
  2472  000DCA  5A09               	subwfb	___lomod@dividend+1,f,c
  2473  000DCC  5012               	movf	___lomod@divisor+2,w,c
  2474  000DCE  5A0A               	subwfb	___lomod@dividend+2,f,c
  2475  000DD0  5013               	movf	___lomod@divisor+3,w,c
  2476  000DD2  5A0B               	subwfb	___lomod@dividend+3,f,c
  2477  000DD4  5014               	movf	___lomod@divisor+4,w,c
  2478  000DD6  5A0C               	subwfb	___lomod@dividend+4,f,c
  2479  000DD8  5015               	movf	___lomod@divisor+5,w,c
  2480  000DDA  5A0D               	subwfb	___lomod@dividend+5,f,c
  2481  000DDC  5016               	movf	___lomod@divisor+6,w,c
  2482  000DDE  5A0E               	subwfb	___lomod@dividend+6,f,c
  2483  000DE0  5017               	movf	___lomod@divisor+7,w,c
  2484  000DE2  5A0F               	subwfb	___lomod@dividend+7,f,c
  2485  000DE4                     l2464:
  2486  000DE4  90D8               	bcf	status,0,c
  2487  000DE6  3217               	rrcf	___lomod@divisor+7,f,c
  2488  000DE8  3216               	rrcf	___lomod@divisor+6,f,c
  2489  000DEA  3215               	rrcf	___lomod@divisor+5,f,c
  2490  000DEC  3214               	rrcf	___lomod@divisor+4,f,c
  2491  000DEE  3213               	rrcf	___lomod@divisor+3,f,c
  2492  000DF0  3212               	rrcf	___lomod@divisor+2,f,c
  2493  000DF2  3211               	rrcf	___lomod@divisor+1,f,c
  2494  000DF4  3210               	rrcf	___lomod@divisor,f,c
  2495  000DF6  2E18               	decfsz	___lomod@counter,f,c
  2496  000DF8  D7D3               	goto	u1940
  2497  000DFA                     l795:
  2498  000DFA  C008  F008         	movff	___lomod@dividend,?___lomod
  2499  000DFE  C009  F009         	movff	___lomod@dividend+1,?___lomod+1
  2500  000E02  C00A  F00A         	movff	___lomod@dividend+2,?___lomod+2
  2501  000E06  C00B  F00B         	movff	___lomod@dividend+3,?___lomod+3
  2502  000E0A  C00C  F00C         	movff	___lomod@dividend+4,?___lomod+4
  2503  000E0E  C00D  F00D         	movff	___lomod@dividend+5,?___lomod+5
  2504  000E12  C00E  F00E         	movff	___lomod@dividend+6,?___lomod+6
  2505  000E16  C00F  F00F         	movff	___lomod@dividend+7,?___lomod+7
  2506  000E1A  0012               	return		;funcret
  2507  000E1C                     __end_of___lomod:
  2508                           	opt callstack 0
  2509                           
  2510 ;; *************** function ___lodiv *****************
  2511 ;; Defined at:
  2512 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lodiv.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  dividend        8    7[COMRAM] unsigned long long 
  2515 ;;  divisor         8   15[COMRAM] unsigned long long 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  quotient        8   23[COMRAM] unsigned long long 
  2518 ;;  counter         1   31[COMRAM] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  8    7[COMRAM] unsigned long long 
  2521 ;; Registers used:
  2522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2528 ;;      Params:        16       0       0       0
  2529 ;;      Locals:         9       0       0       0
  2530 ;;      Temps:          0       0       0       0
  2531 ;;      Totals:        25       0       0       0
  2532 ;;Total ram usage:       25 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    2
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_utoa
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text13
  2543  000BD8                     __ptext13:
  2544                           	opt callstack 0
  2545  000BD8                     ___lodiv:
  2546                           	opt callstack 24
  2547                           
  2548                           ;incstack = 0
  2549  000BD8  EE20  F018         	lfsr	2,___lodiv@quotient
  2550  000BDC  0E07               	movlw	7
  2551  000BDE                     u1891:
  2552  000BDE  6ADE               	clrf	postinc2,c
  2553  000BE0  06E8               	decf	wreg,f,c
  2554  000BE2  E2FD               	bc	u1891
  2555  000BE4  5010               	movf	___lodiv@divisor,w,c
  2556  000BE6  1011               	iorwf	___lodiv@divisor+1,w,c
  2557  000BE8  1012               	iorwf	___lodiv@divisor+2,w,c
  2558  000BEA  1013               	iorwf	___lodiv@divisor+3,w,c
  2559  000BEC  1014               	iorwf	___lodiv@divisor+4,w,c
  2560  000BEE  1015               	iorwf	___lodiv@divisor+5,w,c
  2561  000BF0  1016               	iorwf	___lodiv@divisor+6,w,c
  2562  000BF2  1017               	iorwf	___lodiv@divisor+7,w,c
  2563  000BF4  B4D8               	btfsc	status,2,c
  2564  000BF6  D046               	goto	l785
  2565  000BF8  0E01               	movlw	1
  2566  000BFA  6E20               	movwf	___lodiv@counter,c
  2567  000BFC  D00A               	goto	l2438
  2568  000BFE                     l2436:
  2569  000BFE  90D8               	bcf	status,0,c
  2570  000C00  3610               	rlcf	___lodiv@divisor,f,c
  2571  000C02  3611               	rlcf	___lodiv@divisor+1,f,c
  2572  000C04  3612               	rlcf	___lodiv@divisor+2,f,c
  2573  000C06  3613               	rlcf	___lodiv@divisor+3,f,c
  2574  000C08  3614               	rlcf	___lodiv@divisor+4,f,c
  2575  000C0A  3615               	rlcf	___lodiv@divisor+5,f,c
  2576  000C0C  3616               	rlcf	___lodiv@divisor+6,f,c
  2577  000C0E  3617               	rlcf	___lodiv@divisor+7,f,c
  2578  000C10  2A20               	incf	___lodiv@counter,f,c
  2579  000C12                     l2438:
  2580  000C12  AE17               	btfss	___lodiv@divisor+7,7,c
  2581  000C14  D7F4               	goto	l2436
  2582  000C16                     u1910:
  2583  000C16  90D8               	bcf	status,0,c
  2584  000C18  3618               	rlcf	___lodiv@quotient,f,c
  2585  000C1A  3619               	rlcf	___lodiv@quotient+1,f,c
  2586  000C1C  361A               	rlcf	___lodiv@quotient+2,f,c
  2587  000C1E  361B               	rlcf	___lodiv@quotient+3,f,c
  2588  000C20  361C               	rlcf	___lodiv@quotient+4,f,c
  2589  000C22  361D               	rlcf	___lodiv@quotient+5,f,c
  2590  000C24  361E               	rlcf	___lodiv@quotient+6,f,c
  2591  000C26  361F               	rlcf	___lodiv@quotient+7,f,c
  2592  000C28  5010               	movf	___lodiv@divisor,w,c
  2593  000C2A  5C08               	subwf	___lodiv@dividend,w,c
  2594  000C2C  5011               	movf	___lodiv@divisor+1,w,c
  2595  000C2E  5809               	subwfb	___lodiv@dividend+1,w,c
  2596  000C30  5012               	movf	___lodiv@divisor+2,w,c
  2597  000C32  580A               	subwfb	___lodiv@dividend+2,w,c
  2598  000C34  5013               	movf	___lodiv@divisor+3,w,c
  2599  000C36  580B               	subwfb	___lodiv@dividend+3,w,c
  2600  000C38  5014               	movf	___lodiv@divisor+4,w,c
  2601  000C3A  580C               	subwfb	___lodiv@dividend+4,w,c
  2602  000C3C  5015               	movf	___lodiv@divisor+5,w,c
  2603  000C3E  580D               	subwfb	___lodiv@dividend+5,w,c
  2604  000C40  5016               	movf	___lodiv@divisor+6,w,c
  2605  000C42  580E               	subwfb	___lodiv@dividend+6,w,c
  2606  000C44  5017               	movf	___lodiv@divisor+7,w,c
  2607  000C46  580F               	subwfb	___lodiv@dividend+7,w,c
  2608  000C48  A0D8               	btfss	status,0,c
  2609  000C4A  D011               	goto	l2448
  2610  000C4C  5010               	movf	___lodiv@divisor,w,c
  2611  000C4E  5E08               	subwf	___lodiv@dividend,f,c
  2612  000C50  5011               	movf	___lodiv@divisor+1,w,c
  2613  000C52  5A09               	subwfb	___lodiv@dividend+1,f,c
  2614  000C54  5012               	movf	___lodiv@divisor+2,w,c
  2615  000C56  5A0A               	subwfb	___lodiv@dividend+2,f,c
  2616  000C58  5013               	movf	___lodiv@divisor+3,w,c
  2617  000C5A  5A0B               	subwfb	___lodiv@dividend+3,f,c
  2618  000C5C  5014               	movf	___lodiv@divisor+4,w,c
  2619  000C5E  5A0C               	subwfb	___lodiv@dividend+4,f,c
  2620  000C60  5015               	movf	___lodiv@divisor+5,w,c
  2621  000C62  5A0D               	subwfb	___lodiv@dividend+5,f,c
  2622  000C64  5016               	movf	___lodiv@divisor+6,w,c
  2623  000C66  5A0E               	subwfb	___lodiv@dividend+6,f,c
  2624  000C68  5017               	movf	___lodiv@divisor+7,w,c
  2625  000C6A  5A0F               	subwfb	___lodiv@dividend+7,f,c
  2626  000C6C  8018               	bsf	___lodiv@quotient,0,c
  2627  000C6E                     l2448:
  2628  000C6E  90D8               	bcf	status,0,c
  2629  000C70  3217               	rrcf	___lodiv@divisor+7,f,c
  2630  000C72  3216               	rrcf	___lodiv@divisor+6,f,c
  2631  000C74  3215               	rrcf	___lodiv@divisor+5,f,c
  2632  000C76  3214               	rrcf	___lodiv@divisor+4,f,c
  2633  000C78  3213               	rrcf	___lodiv@divisor+3,f,c
  2634  000C7A  3212               	rrcf	___lodiv@divisor+2,f,c
  2635  000C7C  3211               	rrcf	___lodiv@divisor+1,f,c
  2636  000C7E  3210               	rrcf	___lodiv@divisor,f,c
  2637  000C80  2E20               	decfsz	___lodiv@counter,f,c
  2638  000C82  D7C9               	goto	u1910
  2639  000C84                     l785:
  2640  000C84  C018  F008         	movff	___lodiv@quotient,?___lodiv
  2641  000C88  C019  F009         	movff	___lodiv@quotient+1,?___lodiv+1
  2642  000C8C  C01A  F00A         	movff	___lodiv@quotient+2,?___lodiv+2
  2643  000C90  C01B  F00B         	movff	___lodiv@quotient+3,?___lodiv+3
  2644  000C94  C01C  F00C         	movff	___lodiv@quotient+4,?___lodiv+4
  2645  000C98  C01D  F00D         	movff	___lodiv@quotient+5,?___lodiv+5
  2646  000C9C  C01E  F00E         	movff	___lodiv@quotient+6,?___lodiv+6
  2647  000CA0  C01F  F00F         	movff	___lodiv@quotient+7,?___lodiv+7
  2648  000CA4  0012               	return		;funcret
  2649  000CA6                     __end_of___lodiv:
  2650                           	opt callstack 0
  2651                           
  2652 ;; *************** function _setup *****************
  2653 ;; Defined at:
  2654 ;;		line 38 in file "main.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       0       0       0
  2670 ;;      Temps:          0       0       0       0
  2671 ;;      Totals:         0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    6
  2675 ;; This function calls:
  2676 ;;		_initPWM
  2677 ;;		_init_LCD
  2678 ;;		_init_RFID
  2679 ;;		_init_sensor
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text14
  2686  0013F4                     __ptext14:
  2687                           	opt callstack 0
  2688  0013F4                     _setup:
  2689                           	opt callstack 24
  2690                           
  2691                           ;main.c: 41:     OSCCON = 0x72;
  2692                           
  2693                           ;incstack = 0
  2694  0013F4  0E72               	movlw	114
  2695  0013F6  6ED3               	movwf	4051,c	;volatile
  2696  0013F8                     l67:
  2697  0013F8  A4D3               	btfss	4051,2,c	;volatile
  2698  0013FA  D7FE               	goto	l67
  2699                           
  2700                           ;main.c: 43:     INTCONbits.GIEH = 1;
  2701  0013FC  8EF2               	bsf	4082,7,c	;volatile
  2702                           
  2703                           ;main.c: 44:     INTCONbits.GIEL = 1;
  2704  0013FE  8CF2               	bsf	4082,6,c	;volatile
  2705                           
  2706                           ;main.c: 45:     RCONbits.IPEN=1;
  2707  001400  8ED0               	bsf	4048,7,c	;volatile
  2708                           
  2709                           ;main.c: 48:     init_LCD();
  2710  001402  EC53  F006         	call	_init_LCD	;wreg free
  2711                           
  2712                           ;main.c: 49:     init_RFID();
  2713  001406  EC63  F00A         	call	_init_RFID	;wreg free
  2714                           
  2715                           ;main.c: 50:     init_sensor();
  2716  00140A  EC8A  F00A         	call	_init_sensor	;wreg free
  2717                           
  2718                           ;main.c: 51:     initPWM(199);
  2719  00140E  0E00               	movlw	0
  2720  001410  6E09               	movwf	initPWM@PWMperiod+1,c
  2721  001412  0EC7               	movlw	199
  2722  001414  6E08               	movwf	initPWM@PWMperiod,c
  2723  001416  EC70  F00A         	call	_initPWM	;wreg free
  2724                           
  2725                           ;main.c: 53:     TRISBbits.RB0 = 0;
  2726  00141A  9093               	bcf	3987,0,c	;volatile
  2727                           
  2728                           ;main.c: 54:     TRISBbits.RB2 = 0;
  2729  00141C  9493               	bcf	3987,2,c	;volatile
  2730                           
  2731                           ;main.c: 55:     TRISDbits.RD2 = 1;
  2732  00141E  8495               	bsf	3989,2,c	;volatile
  2733  001420  0012               	return		;funcret
  2734  001422                     __end_of_setup:
  2735                           	opt callstack 0
  2736                           
  2737 ;; *************** function _init_sensor *****************
  2738 ;; Defined at:
  2739 ;;		line 14 in file "signal_processing.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2753 ;;      Params:         0       0       0       0
  2754 ;;      Locals:         0       0       0       0
  2755 ;;      Temps:          0       0       0       0
  2756 ;;      Totals:         0       0       0       0
  2757 ;;Total ram usage:        0 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    2
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_setup
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text15
  2768  001514                     __ptext15:
  2769                           	opt callstack 0
  2770  001514                     _init_sensor:
  2771                           	opt callstack 27
  2772                           
  2773                           ;signal_processing.c: 16:     T5CON =0b00000001;
  2774                           
  2775                           ;incstack = 0
  2776  001514  0E01               	movlw	1
  2777  001516  6EB7               	movwf	4023,c	;volatile
  2778                           
  2779                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  2780  001518  8492               	bsf	3986,2,c	;volatile
  2781                           
  2782                           ;signal_processing.c: 20:     ANSEL0 = 0;
  2783  00151A  0E00               	movlw	0
  2784  00151C  6EB8               	movwf	4024,c	;volatile
  2785                           
  2786                           ;signal_processing.c: 21:     ANSEL1 = 0;
  2787  00151E  0E00               	movlw	0
  2788  001520  6EB9               	movwf	4025,c	;volatile
  2789                           
  2790                           ;signal_processing.c: 23:     DFLTCON = 0b00011000;
  2791  001522  0E18               	movlw	24
  2792  001524  6E60               	movwf	3936,c	;volatile
  2793                           
  2794                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  2795  001526  0E47               	movlw	71
  2796  001528  6E63               	movwf	3939,c	;volatile
  2797  00152A  0012               	return		;funcret
  2798  00152C                     __end_of_init_sensor:
  2799                           	opt callstack 0
  2800                           
  2801 ;; *************** function _init_RFID *****************
  2802 ;; Defined at:
  2803 ;;		line 13 in file "RFID.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2817 ;;      Params:         0       0       0       0
  2818 ;;      Locals:         0       0       0       0
  2819 ;;      Temps:          0       0       0       0
  2820 ;;      Totals:         0       0       0       0
  2821 ;;Total ram usage:        0 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    2
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_setup
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text16
  2832  0014C6                     __ptext16:
  2833                           	opt callstack 0
  2834  0014C6                     _init_RFID:
  2835                           	opt callstack 27
  2836                           
  2837                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  2838                           
  2839                           ;incstack = 0
  2840  0014C6  8E94               	bsf	3988,7,c	;volatile
  2841                           
  2842                           ;RFID.c: 19:     SPBRG = 203;
  2843  0014C8  0ECB               	movlw	203
  2844  0014CA  6EAF               	movwf	4015,c	;volatile
  2845                           
  2846                           ;RFID.c: 20:     SPBRGH = 0;
  2847  0014CC  0E00               	movlw	0
  2848  0014CE  6EB0               	movwf	4016,c	;volatile
  2849                           
  2850                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  2851  0014D0  86AA               	bsf	4010,3,c	;volatile
  2852                           
  2853                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  2854  0014D2  84AC               	bsf	4012,2,c	;volatile
  2855                           
  2856                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  2857  0014D4  88AB               	bsf	4011,4,c	;volatile
  2858                           
  2859                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  2860  0014D6  8EAB               	bsf	4011,7,c	;volatile
  2861                           
  2862                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  2863  0014D8  8AAC               	bsf	4012,5,c	;volatile
  2864                           
  2865                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  2866  0014DA  8A9D               	bsf	3997,5,c	;volatile
  2867                           
  2868                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  2869  0014DC  8A9F               	bsf	3999,5,c	;volatile
  2870  0014DE  0012               	return		;funcret
  2871  0014E0                     __end_of_init_RFID:
  2872                           	opt callstack 0
  2873                           
  2874 ;; *************** function _init_LCD *****************
  2875 ;; Defined at:
  2876 ;;		line 56 in file "LCDIO.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, status,2, status,0, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2890 ;;      Params:         0       0       0       0
  2891 ;;      Locals:         0       0       0       0
  2892 ;;      Temps:          1       0       0       0
  2893 ;;      Totals:         1       0       0       0
  2894 ;;Total ram usage:        1 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    5
  2897 ;; This function calls:
  2898 ;;		_LCDout
  2899 ;;		_SendLCD
  2900 ;; This function is called by:
  2901 ;;		_setup
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text17
  2906  000CA6                     __ptext17:
  2907                           	opt callstack 0
  2908  000CA6                     _init_LCD:
  2909                           	opt callstack 24
  2910                           
  2911                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  2912                           
  2913                           ;incstack = 0
  2914  000CA6  9094               	bcf	3988,0,c	;volatile
  2915                           
  2916                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  2917  000CA8  9E92               	bcf	3986,7,c	;volatile
  2918                           
  2919                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  2920  000CAA  9694               	bcf	3988,3,c	;volatile
  2921                           
  2922                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  2923  000CAC  9095               	bcf	3989,0,c	;volatile
  2924                           
  2925                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  2926  000CAE  9295               	bcf	3989,1,c	;volatile
  2927                           
  2928                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  2929  000CB0  9C92               	bcf	3986,6,c	;volatile
  2930                           
  2931                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  2932  000CB2  908C               	bcf	3980,0,c	;volatile
  2933                           
  2934                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  2935  000CB4  928C               	bcf	3980,1,c	;volatile
  2936                           
  2937                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  2938  000CB6  968B               	bcf	3979,3,c	;volatile
  2939                           
  2940                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  2941  000CB8  908B               	bcf	3979,0,c	;volatile
  2942                           
  2943                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  2944  000CBA  9C89               	bcf	3977,6,c	;volatile
  2945                           
  2946                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  2947  000CBC  9E89               	bcf	3977,7,c	;volatile
  2948                           
  2949                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  2950  000CBE  0E27               	movlw	39
  2951  000CC0  6E0C               	movwf	??_init_LCD& (0+255),c
  2952  000CC2  0EF5               	movlw	245
  2953  000CC4                     u2247:
  2954  000CC4  2EE8               	decfsz	wreg,f,c
  2955  000CC6  D7FE               	bra	u2247
  2956  000CC8  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  2957  000CCA  D7FC               	bra	u2247
  2958  000CCC  F000               	nop	
  2959                           
  2960                           ;LCDIO.c: 76:  LCDout(0b0011);
  2961  000CCE  0E03               	movlw	3
  2962  000CD0  EC2A  F008         	call	_LCDout
  2963                           
  2964                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2965  000CD4  0E0D               	movlw	13
  2966  000CD6  6E0C               	movwf	??_init_LCD& (0+255),c
  2967  000CD8  0EFC               	movlw	252
  2968  000CDA                     u2257:
  2969  000CDA  2EE8               	decfsz	wreg,f,c
  2970  000CDC  D7FE               	bra	u2257
  2971  000CDE  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  2972  000CE0  D7FC               	bra	u2257
  2973                           
  2974                           ;LCDIO.c: 78:  LCDout(0b0011);
  2975  000CE2  0E03               	movlw	3
  2976  000CE4  EC2A  F008         	call	_LCDout
  2977                           
  2978                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2979  000CE8  0E85               	movlw	133
  2980  000CEA                     u2267:
  2981  000CEA  2EE8               	decfsz	wreg,f,c
  2982  000CEC  D7FE               	bra	u2267
  2983  000CEE  F000               	nop	
  2984                           
  2985                           ;LCDIO.c: 80:  LCDout(0b0011);
  2986  000CF0  0E03               	movlw	3
  2987  000CF2  EC2A  F008         	call	_LCDout
  2988                           
  2989                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2990  000CF6  0E21               	movlw	33
  2991  000CF8                     u2277:
  2992  000CF8  2EE8               	decfsz	wreg,f,c
  2993  000CFA  D7FE               	bra	u2277
  2994  000CFC  F000               	nop	
  2995                           
  2996                           ;LCDIO.c: 82:  LCDout(0b0010);
  2997  000CFE  0E02               	movlw	2
  2998  000D00  EC2A  F008         	call	_LCDout
  2999                           
  3000                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3001  000D04  0E21               	movlw	33
  3002  000D06                     u2287:
  3003  000D06  2EE8               	decfsz	wreg,f,c
  3004  000D08  D7FE               	bra	u2287
  3005  000D0A  F000               	nop	
  3006                           
  3007                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  3008  000D0C  0E00               	movlw	0
  3009  000D0E  6E0A               	movwf	SendLCD@type,c
  3010  000D10  0E28               	movlw	40
  3011  000D12  ECE2  F009         	call	_SendLCD
  3012                           
  3013                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3014  000D16  0E21               	movlw	33
  3015  000D18                     u2297:
  3016  000D18  2EE8               	decfsz	wreg,f,c
  3017  000D1A  D7FE               	bra	u2297
  3018  000D1C  F000               	nop	
  3019                           
  3020                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  3021  000D1E  0E00               	movlw	0
  3022  000D20  6E0A               	movwf	SendLCD@type,c
  3023  000D22  0E08               	movlw	8
  3024  000D24  ECE2  F009         	call	_SendLCD
  3025                           
  3026                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3027  000D28  0E21               	movlw	33
  3028  000D2A                     u2307:
  3029  000D2A  2EE8               	decfsz	wreg,f,c
  3030  000D2C  D7FE               	bra	u2307
  3031  000D2E  F000               	nop	
  3032                           
  3033                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  3034  000D30  0E00               	movlw	0
  3035  000D32  6E0A               	movwf	SendLCD@type,c
  3036  000D34  0E01               	movlw	1
  3037  000D36  ECE2  F009         	call	_SendLCD
  3038                           
  3039                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  3040  000D3A  0E0D               	movlw	13
  3041  000D3C  6E0C               	movwf	??_init_LCD& (0+255),c
  3042  000D3E  0EFC               	movlw	252
  3043  000D40                     u2317:
  3044  000D40  2EE8               	decfsz	wreg,f,c
  3045  000D42  D7FE               	bra	u2317
  3046  000D44  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  3047  000D46  D7FC               	bra	u2317
  3048                           
  3049                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  3050  000D48  0E00               	movlw	0
  3051  000D4A  6E0A               	movwf	SendLCD@type,c
  3052  000D4C  0E06               	movlw	6
  3053  000D4E  ECE2  F009         	call	_SendLCD
  3054                           
  3055                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3056  000D52  0E21               	movlw	33
  3057  000D54                     u2327:
  3058  000D54  2EE8               	decfsz	wreg,f,c
  3059  000D56  D7FE               	bra	u2327
  3060  000D58  F000               	nop	
  3061                           
  3062                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  3063  000D5A  0E00               	movlw	0
  3064  000D5C  6E0A               	movwf	SendLCD@type,c
  3065  000D5E  0E0C               	movlw	12
  3066  000D60  ECE2  F009         	call	_SendLCD
  3067                           
  3068                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3069  000D64  0E21               	movlw	33
  3070  000D66                     u2337:
  3071  000D66  2EE8               	decfsz	wreg,f,c
  3072  000D68  D7FE               	bra	u2337
  3073  000D6A  F000               	nop	
  3074  000D6C  0012               	return		;funcret
  3075  000D6E                     __end_of_init_LCD:
  3076                           	opt callstack 0
  3077                           
  3078 ;; *************** function _initPWM *****************
  3079 ;; Defined at:
  3080 ;;		line 5 in file "dc_motor.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  PWMperiod       2    7[COMRAM] int 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3094 ;;      Params:         2       0       0       0
  3095 ;;      Locals:         0       0       0       0
  3096 ;;      Temps:          0       0       0       0
  3097 ;;      Totals:         2       0       0       0
  3098 ;;Total ram usage:        2 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    2
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_setup
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text18
  3109  0014E0                     __ptext18:
  3110                           	opt callstack 0
  3111  0014E0                     _initPWM:
  3112                           	opt callstack 27
  3113                           
  3114                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  3115                           
  3116                           ;incstack = 0
  3117  0014E0  0E00               	movlw	0
  3118  0014E2  6E7F               	movwf	3967,c	;volatile
  3119                           
  3120                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  3121  0014E4  0E80               	movlw	128
  3122  0014E6  6E7E               	movwf	3966,c	;volatile
  3123                           
  3124                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  3125  0014E8  0E6F               	movlw	111
  3126  0014EA  6E6F               	movwf	3951,c	;volatile
  3127                           
  3128                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  3129  0014EC  0E00               	movlw	0
  3130  0014EE  6E6E               	movwf	3950,c	;volatile
  3131                           
  3132                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  3133  0014F0  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  3134                           
  3135                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  3136  0014F4  5009               	movf	initPWM@PWMperiod+1,w,c
  3137  0014F6  6E7A               	movwf	3962,c	;volatile
  3138  0014F8  0012               	return		;funcret
  3139  0014FA                     __end_of_initPWM:
  3140                           	opt callstack 0
  3141                           
  3142 ;; *************** function _moveForward *****************
  3143 ;; Defined at:
  3144 ;;		line 85 in file "dc_motor.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3147 ;;		 -> main@motorL(9), 
  3148 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3149 ;;		 -> main@motorR(9), 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  i               2   34[COMRAM] int 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3161 ;;      Params:         4       0       0       0
  3162 ;;      Locals:         2       0       0       0
  3163 ;;      Temps:          0       0       0       0
  3164 ;;      Totals:         6       0       0       0
  3165 ;;Total ram usage:        6 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		_setMotorPWM
  3170 ;; This function is called by:
  3171 ;;		_main
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text19
  3176  0010CC                     __ptext19:
  3177                           	opt callstack 0
  3178  0010CC                     _moveForward:
  3179                           	opt callstack 26
  3180                           
  3181                           ;dc_motor.c: 85: void moveForward(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 
      +                          86: {;dc_motor.c: 87:     mL->direction = 1;
  3182                           
  3183                           ;incstack = 0
  3184  0010CC  EE20 F001          	lfsr	2,1
  3185  0010D0  501F               	movf	moveForward@mL,w,c
  3186  0010D2  26D9               	addwf	fsr2l,f,c
  3187  0010D4  5020               	movf	moveForward@mL+1,w,c
  3188  0010D6  22DA               	addwfc	fsr2h,f,c
  3189  0010D8  0E01               	movlw	1
  3190  0010DA  6EDF               	movwf	indf2,c
  3191                           
  3192                           ;dc_motor.c: 88:     mR->direction = 1;
  3193  0010DC  EE20 F001          	lfsr	2,1
  3194  0010E0  5021               	movf	moveForward@mR,w,c
  3195  0010E2  26D9               	addwf	fsr2l,f,c
  3196  0010E4  5022               	movf	moveForward@mR+1,w,c
  3197  0010E6  22DA               	addwfc	fsr2h,f,c
  3198  0010E8  0E01               	movlw	1
  3199  0010EA  6EDF               	movwf	indf2,c
  3200                           
  3201                           ;dc_motor.c: 89:     for(int i = 0; i < 50; i++)
  3202  0010EC  0E00               	movlw	0
  3203  0010EE  6E24               	movwf	moveForward@i+1,c
  3204  0010F0  0E00               	movlw	0
  3205  0010F2  6E23               	movwf	moveForward@i,c
  3206  0010F4                     l2170:
  3207                           
  3208                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  3209  0010F4  C01F  FFD9         	movff	moveForward@mL,fsr2l
  3210  0010F8  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  3211  0010FC  C023  FFDF         	movff	moveForward@i,indf2
  3212                           
  3213                           ;dc_motor.c: 92:         mR->power = i;
  3214  001100  C021  FFD9         	movff	moveForward@mR,fsr2l
  3215  001104  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  3216  001108  C023  FFDF         	movff	moveForward@i,indf2
  3217                           
  3218                           ;dc_motor.c: 93:         setMotorPWM(mL);
  3219  00110C  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  3220  001110  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  3221  001114  ECE5  F004         	call	_setMotorPWM	;wreg free
  3222                           
  3223                           ;dc_motor.c: 94:         setMotorPWM(mR);
  3224  001118  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  3225  00111C  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  3226  001120  ECE5  F004         	call	_setMotorPWM	;wreg free
  3227                           
  3228                           ;dc_motor.c: 95:     }
  3229  001124  4A23               	infsnz	moveForward@i,f,c
  3230  001126  2A24               	incf	moveForward@i+1,f,c
  3231  001128  BE24               	btfsc	moveForward@i+1,7,c
  3232  00112A  D7E4               	goto	l2170
  3233  00112C  5024               	movf	moveForward@i+1,w,c
  3234  00112E  E105               	bnz	u1400
  3235  001130  0E32               	movlw	50
  3236  001132  5C23               	subwf	moveForward@i,w,c
  3237  001134  B0D8               	btfsc	status,0,c
  3238  001136  0012               	return	
  3239  001138  D7DD               	goto	l2170
  3240  00113A                     u1400:
  3241  00113A  0012               	return		;funcret
  3242  00113C                     __end_of_moveForward:
  3243                           	opt callstack 0
  3244                           
  3245 ;; *************** function _moveBackward *****************
  3246 ;; Defined at:
  3247 ;;		line 99 in file "dc_motor.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3250 ;;		 -> main@motorL(9), 
  3251 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3252 ;;		 -> main@motorR(9), 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  i               2   34[COMRAM] int 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3264 ;;      Params:         4       0       0       0
  3265 ;;      Locals:         2       0       0       0
  3266 ;;      Temps:          0       0       0       0
  3267 ;;      Totals:         6       0       0       0
  3268 ;;Total ram usage:        6 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    4
  3271 ;; This function calls:
  3272 ;;		_setMotorPWM
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text20
  3279  00113C                     __ptext20:
  3280                           	opt callstack 0
  3281  00113C                     _moveBackward:
  3282                           	opt callstack 26
  3283                           
  3284                           ;dc_motor.c: 99: void moveBackward(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c:
      +                           100: {;dc_motor.c: 101:     mL->direction = 0;
  3285                           
  3286                           ;incstack = 0
  3287  00113C  EE20 F001          	lfsr	2,1
  3288  001140  501F               	movf	moveBackward@mL,w,c
  3289  001142  26D9               	addwf	fsr2l,f,c
  3290  001144  5020               	movf	moveBackward@mL+1,w,c
  3291  001146  22DA               	addwfc	fsr2h,f,c
  3292  001148  0E00               	movlw	0
  3293  00114A  6EDF               	movwf	indf2,c
  3294                           
  3295                           ;dc_motor.c: 102:     mR->direction = 0;
  3296  00114C  EE20 F001          	lfsr	2,1
  3297  001150  5021               	movf	moveBackward@mR,w,c
  3298  001152  26D9               	addwf	fsr2l,f,c
  3299  001154  5022               	movf	moveBackward@mR+1,w,c
  3300  001156  22DA               	addwfc	fsr2h,f,c
  3301  001158  0E00               	movlw	0
  3302  00115A  6EDF               	movwf	indf2,c
  3303                           
  3304                           ;dc_motor.c: 103:     for(int i = 0; i < 50; i++)
  3305  00115C  0E00               	movlw	0
  3306  00115E  6E24               	movwf	moveBackward@i+1,c
  3307  001160  0E00               	movlw	0
  3308  001162  6E23               	movwf	moveBackward@i,c
  3309  001164                     l2234:
  3310                           
  3311                           ;dc_motor.c: 104:     {;dc_motor.c: 105:         mL->power = i;
  3312  001164  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  3313  001168  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  3314  00116C  C023  FFDF         	movff	moveBackward@i,indf2
  3315                           
  3316                           ;dc_motor.c: 106:         mR->power = i;
  3317  001170  C021  FFD9         	movff	moveBackward@mR,fsr2l
  3318  001174  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  3319  001178  C023  FFDF         	movff	moveBackward@i,indf2
  3320                           
  3321                           ;dc_motor.c: 107:         setMotorPWM(mL);
  3322  00117C  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  3323  001180  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  3324  001184  ECE5  F004         	call	_setMotorPWM	;wreg free
  3325                           
  3326                           ;dc_motor.c: 108:         setMotorPWM(mR);
  3327  001188  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  3328  00118C  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  3329  001190  ECE5  F004         	call	_setMotorPWM	;wreg free
  3330                           
  3331                           ;dc_motor.c: 109:     }
  3332  001194  4A23               	infsnz	moveBackward@i,f,c
  3333  001196  2A24               	incf	moveBackward@i+1,f,c
  3334  001198  BE24               	btfsc	moveBackward@i+1,7,c
  3335  00119A  D7E4               	goto	l2234
  3336  00119C  5024               	movf	moveBackward@i+1,w,c
  3337  00119E  E105               	bnz	u1620
  3338  0011A0  0E32               	movlw	50
  3339  0011A2  5C23               	subwf	moveBackward@i,w,c
  3340  0011A4  B0D8               	btfsc	status,0,c
  3341  0011A6  0012               	return	
  3342  0011A8  D7DD               	goto	l2234
  3343  0011AA                     u1620:
  3344  0011AA  0012               	return		;funcret
  3345  0011AC                     __end_of_moveBackward:
  3346                           	opt callstack 0
  3347                           
  3348 ;; *************** function _init_motor_struct *****************
  3349 ;; Defined at:
  3350 ;;		line 112 in file "dc_motor.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3353 ;;		 -> main@motorL(9), 
  3354 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3355 ;;		 -> main@motorR(9), 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3367 ;;      Params:         4       0       0       0
  3368 ;;      Locals:         0       0       0       0
  3369 ;;      Temps:          0       0       0       0
  3370 ;;      Totals:         4       0       0       0
  3371 ;;Total ram usage:        4 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    4
  3374 ;; This function calls:
  3375 ;;		_setMotorPWM
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text21
  3382  000AEE                     __ptext21:
  3383                           	opt callstack 0
  3384  000AEE                     _init_motor_struct:
  3385                           	opt callstack 26
  3386                           
  3387                           ;dc_motor.c: 112: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 113: {;dc_motor.c: 115: mL->power = 0;
  3388                           
  3389                           ;incstack = 0
  3390  000AEE  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  3391  000AF2  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3392  000AF6  0E00               	movlw	0
  3393  000AF8  6EDF               	movwf	indf2,c
  3394                           
  3395                           ;dc_motor.c: 116: mL->direction = 1;
  3396  000AFA  EE20 F001          	lfsr	2,1
  3397  000AFE  501F               	movf	init_motor_struct@mL,w,c
  3398  000B00  26D9               	addwf	fsr2l,f,c
  3399  000B02  5020               	movf	init_motor_struct@mL+1,w,c
  3400  000B04  22DA               	addwfc	fsr2h,f,c
  3401  000B06  0E01               	movlw	1
  3402  000B08  6EDF               	movwf	indf2,c
  3403                           
  3404                           ;dc_motor.c: 117: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3405  000B0A  EE20 F002          	lfsr	2,2
  3406  000B0E  501F               	movf	init_motor_struct@mL,w,c
  3407  000B10  26D9               	addwf	fsr2l,f,c
  3408  000B12  5020               	movf	init_motor_struct@mL+1,w,c
  3409  000B14  22DA               	addwfc	fsr2h,f,c
  3410  000B16  0E79               	movlw	121
  3411  000B18  6EDE               	movwf	postinc2,c
  3412  000B1A  0E0F               	movlw	15
  3413  000B1C  6EDD               	movwf	postdec2,c
  3414                           
  3415                           ;dc_motor.c: 118: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3416  000B1E  EE20 F004          	lfsr	2,4
  3417  000B22  501F               	movf	init_motor_struct@mL,w,c
  3418  000B24  26D9               	addwf	fsr2l,f,c
  3419  000B26  5020               	movf	init_motor_struct@mL+1,w,c
  3420  000B28  22DA               	addwfc	fsr2h,f,c
  3421  000B2A  0E78               	movlw	120
  3422  000B2C  6EDE               	movwf	postinc2,c
  3423  000B2E  0E0F               	movlw	15
  3424  000B30  6EDD               	movwf	postdec2,c
  3425                           
  3426                           ;dc_motor.c: 119: mL->dir_pin=0;
  3427  000B32  EE20 F006          	lfsr	2,6
  3428  000B36  501F               	movf	init_motor_struct@mL,w,c
  3429  000B38  26D9               	addwf	fsr2l,f,c
  3430  000B3A  5020               	movf	init_motor_struct@mL+1,w,c
  3431  000B3C  22DA               	addwfc	fsr2h,f,c
  3432  000B3E  0E00               	movlw	0
  3433  000B40  6EDF               	movwf	indf2,c
  3434                           
  3435                           ;dc_motor.c: 120: mL->PWMperiod=199;
  3436  000B42  EE20 F007          	lfsr	2,7
  3437  000B46  501F               	movf	init_motor_struct@mL,w,c
  3438  000B48  26D9               	addwf	fsr2l,f,c
  3439  000B4A  5020               	movf	init_motor_struct@mL+1,w,c
  3440  000B4C  22DA               	addwfc	fsr2h,f,c
  3441  000B4E  0EC7               	movlw	199
  3442  000B50  6EDE               	movwf	postinc2,c
  3443  000B52  0E00               	movlw	0
  3444  000B54  6EDD               	movwf	postdec2,c
  3445                           
  3446                           ;dc_motor.c: 122: mR->power = 0;
  3447  000B56  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  3448  000B5A  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3449  000B5E  0E00               	movlw	0
  3450  000B60  6EDF               	movwf	indf2,c
  3451                           
  3452                           ;dc_motor.c: 123: mR->direction = 1;
  3453  000B62  EE20 F001          	lfsr	2,1
  3454  000B66  5021               	movf	init_motor_struct@mR,w,c
  3455  000B68  26D9               	addwf	fsr2l,f,c
  3456  000B6A  5022               	movf	init_motor_struct@mR+1,w,c
  3457  000B6C  22DA               	addwfc	fsr2h,f,c
  3458  000B6E  0E01               	movlw	1
  3459  000B70  6EDF               	movwf	indf2,c
  3460                           
  3461                           ;dc_motor.c: 124: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3462  000B72  EE20 F002          	lfsr	2,2
  3463  000B76  5021               	movf	init_motor_struct@mR,w,c
  3464  000B78  26D9               	addwf	fsr2l,f,c
  3465  000B7A  5022               	movf	init_motor_struct@mR+1,w,c
  3466  000B7C  22DA               	addwfc	fsr2h,f,c
  3467  000B7E  0E77               	movlw	119
  3468  000B80  6EDE               	movwf	postinc2,c
  3469  000B82  0E0F               	movlw	15
  3470  000B84  6EDD               	movwf	postdec2,c
  3471                           
  3472                           ;dc_motor.c: 125: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3473  000B86  EE20 F004          	lfsr	2,4
  3474  000B8A  5021               	movf	init_motor_struct@mR,w,c
  3475  000B8C  26D9               	addwf	fsr2l,f,c
  3476  000B8E  5022               	movf	init_motor_struct@mR+1,w,c
  3477  000B90  22DA               	addwfc	fsr2h,f,c
  3478  000B92  0E76               	movlw	118
  3479  000B94  6EDE               	movwf	postinc2,c
  3480  000B96  0E0F               	movlw	15
  3481  000B98  6EDD               	movwf	postdec2,c
  3482                           
  3483                           ;dc_motor.c: 126: mR->dir_pin=2;
  3484  000B9A  EE20 F006          	lfsr	2,6
  3485  000B9E  5021               	movf	init_motor_struct@mR,w,c
  3486  000BA0  26D9               	addwf	fsr2l,f,c
  3487  000BA2  5022               	movf	init_motor_struct@mR+1,w,c
  3488  000BA4  22DA               	addwfc	fsr2h,f,c
  3489  000BA6  0E02               	movlw	2
  3490  000BA8  6EDF               	movwf	indf2,c
  3491                           
  3492                           ;dc_motor.c: 127: mR->PWMperiod=199;
  3493  000BAA  EE20 F007          	lfsr	2,7
  3494  000BAE  5021               	movf	init_motor_struct@mR,w,c
  3495  000BB0  26D9               	addwf	fsr2l,f,c
  3496  000BB2  5022               	movf	init_motor_struct@mR+1,w,c
  3497  000BB4  22DA               	addwfc	fsr2h,f,c
  3498  000BB6  0EC7               	movlw	199
  3499  000BB8  6EDE               	movwf	postinc2,c
  3500  000BBA  0E00               	movlw	0
  3501  000BBC  6EDD               	movwf	postdec2,c
  3502                           
  3503                           ;dc_motor.c: 129: setMotorPWM(mL);
  3504  000BBE  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  3505  000BC2  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3506  000BC6  ECE5  F004         	call	_setMotorPWM	;wreg free
  3507                           
  3508                           ;dc_motor.c: 130: setMotorPWM(mR);
  3509  000BCA  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  3510  000BCE  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3511  000BD2  ECE5  F004         	call	_setMotorPWM	;wreg free
  3512  000BD6  0012               	return		;funcret
  3513  000BD8                     __end_of_init_motor_struct:
  3514                           	opt callstack 0
  3515                           
  3516 ;; *************** function _setMotorPWM *****************
  3517 ;; Defined at:
  3518 ;;		line 18 in file "dc_motor.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3521 ;;		 -> main@motorR(9), main@motorL(9), 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  PWMduty         2   28[COMRAM] int 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3533 ;;      Params:         2       0       0       0
  3534 ;;      Locals:         2       0       0       0
  3535 ;;      Temps:          5       0       0       0
  3536 ;;      Totals:         9       0       0       0
  3537 ;;Total ram usage:        9 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    3
  3540 ;; This function calls:
  3541 ;;		___awdiv
  3542 ;;		___wmul
  3543 ;; This function is called by:
  3544 ;;		_stop
  3545 ;;		_turnRight
  3546 ;;		_moveForward
  3547 ;;		_moveBackward
  3548 ;;		_init_motor_struct
  3549 ;;		_turnLeft
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text22
  3554  0009CA                     __ptext22:
  3555                           	opt callstack 0
  3556  0009CA                     _setMotorPWM:
  3557                           	opt callstack 26
  3558                           
  3559                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3560                           
  3561                           ;incstack = 0
  3562  0009CA  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3563  0009CE  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3564  0009D2  50DF               	movf	indf2,w,c
  3565  0009D4  6E18               	movwf	??_setMotorPWM& (0+255),c
  3566  0009D6  5018               	movf	??_setMotorPWM,w,c
  3567  0009D8  6E08               	movwf	___wmul@multiplier,c
  3568  0009DA  6A09               	clrf	___wmul@multiplier+1,c
  3569  0009DC  EE20 F007          	lfsr	2,7
  3570  0009E0  5016               	movf	setMotorPWM@m,w,c
  3571  0009E2  26D9               	addwf	fsr2l,f,c
  3572  0009E4  5017               	movf	setMotorPWM@m+1,w,c
  3573  0009E6  22DA               	addwfc	fsr2h,f,c
  3574  0009E8  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  3575  0009EC  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  3576  0009F0  EC50  F00A         	call	___wmul	;wreg free
  3577  0009F4  C008  F00E         	movff	?___wmul,___awdiv@dividend
  3578  0009F8  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  3579  0009FC  0E00               	movlw	0
  3580  0009FE  6E11               	movwf	___awdiv@divisor+1,c
  3581  000A00  0E64               	movlw	100
  3582  000A02  6E10               	movwf	___awdiv@divisor,c
  3583  000A04  ECA9  F007         	call	___awdiv	;wreg free
  3584  000A08  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  3585  000A0C  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3586                           
  3587                           ;dc_motor.c: 24:     if (m->direction)
  3588  000A10  EE20 F001          	lfsr	2,1
  3589  000A14  5016               	movf	setMotorPWM@m,w,c
  3590  000A16  26D9               	addwf	fsr2l,f,c
  3591  000A18  5017               	movf	setMotorPWM@m+1,w,c
  3592  000A1A  22DA               	addwfc	fsr2h,f,c
  3593  000A1C  50DF               	movf	indf2,w,c
  3594  000A1E  B4D8               	btfsc	status,2,c
  3595  000A20  D024               	goto	l2038
  3596                           
  3597                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3598  000A22  EE20 F006          	lfsr	2,6
  3599  000A26  5016               	movf	setMotorPWM@m,w,c
  3600  000A28  26D9               	addwf	fsr2l,f,c
  3601  000A2A  5017               	movf	setMotorPWM@m+1,w,c
  3602  000A2C  22DA               	addwfc	fsr2h,f,c
  3603  000A2E  50DF               	movf	indf2,w,c
  3604  000A30  6E18               	movwf	??_setMotorPWM& (0+255),c
  3605  000A32  0E01               	movlw	1
  3606  000A34  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3607  000A36  2A18               	incf	??_setMotorPWM,f,c
  3608  000A38  D002               	goto	u1304
  3609  000A3A                     u1305:
  3610  000A3A  90D8               	bcf	status,0,c
  3611  000A3C  3619               	rlcf	??_setMotorPWM+1,f,c
  3612  000A3E                     u1304:
  3613  000A3E  2E18               	decfsz	??_setMotorPWM,f,c
  3614  000A40  D7FC               	goto	u1305
  3615  000A42  5019               	movf	??_setMotorPWM+1,w,c
  3616  000A44  108A               	iorwf	3978,w,c	;volatile
  3617  000A46  6E8A               	movwf	3978,c	;volatile
  3618                           
  3619                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3620  000A48  EE20 F007          	lfsr	2,7
  3621  000A4C  5016               	movf	setMotorPWM@m,w,c
  3622  000A4E  26D9               	addwf	fsr2l,f,c
  3623  000A50  5017               	movf	setMotorPWM@m+1,w,c
  3624  000A52  22DA               	addwfc	fsr2h,f,c
  3625  000A54  CFDE F018          	movff	postinc2,??_setMotorPWM
  3626  000A58  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3627  000A5C  501D               	movf	setMotorPWM@PWMduty,w,c
  3628  000A5E  5C18               	subwf	??_setMotorPWM,w,c
  3629  000A60  6E1D               	movwf	setMotorPWM@PWMduty,c
  3630  000A62  501E               	movf	setMotorPWM@PWMduty+1,w,c
  3631  000A64  5819               	subwfb	??_setMotorPWM+1,w,c
  3632  000A66  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  3633                           
  3634                           ;dc_motor.c: 28:     }
  3635  000A68  D014               	goto	l139
  3636  000A6A                     l2038:
  3637                           
  3638                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3639  000A6A  EE20 F006          	lfsr	2,6
  3640  000A6E  5016               	movf	setMotorPWM@m,w,c
  3641  000A70  26D9               	addwf	fsr2l,f,c
  3642  000A72  5017               	movf	setMotorPWM@m+1,w,c
  3643  000A74  22DA               	addwfc	fsr2h,f,c
  3644  000A76  50DF               	movf	indf2,w,c
  3645  000A78  6E18               	movwf	??_setMotorPWM& (0+255),c
  3646  000A7A  0E01               	movlw	1
  3647  000A7C  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3648  000A7E  2A18               	incf	??_setMotorPWM,f,c
  3649  000A80  D002               	goto	u1314
  3650  000A82                     u1315:
  3651  000A82  90D8               	bcf	status,0,c
  3652  000A84  3619               	rlcf	??_setMotorPWM+1,f,c
  3653  000A86                     u1314:
  3654  000A86  2E18               	decfsz	??_setMotorPWM,f,c
  3655  000A88  D7FC               	goto	u1315
  3656  000A8A  5019               	movf	??_setMotorPWM+1,w,c
  3657  000A8C  0AFF               	xorlw	255
  3658  000A8E  148A               	andwf	3978,w,c	;volatile
  3659  000A90  6E8A               	movwf	3978,c	;volatile
  3660  000A92                     l139:
  3661                           
  3662                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3663  000A92  EE20 F002          	lfsr	2,2
  3664  000A96  5016               	movf	setMotorPWM@m,w,c
  3665  000A98  26D9               	addwf	fsr2l,f,c
  3666  000A9A  5017               	movf	setMotorPWM@m+1,w,c
  3667  000A9C  22DA               	addwfc	fsr2h,f,c
  3668  000A9E  CFDE F018          	movff	postinc2,??_setMotorPWM
  3669  000AA2  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3670  000AA6  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3671  000AAA  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3672  000AAE  441D               	rlncf	setMotorPWM@PWMduty,w,c
  3673  000AB0  46E8               	rlncf	wreg,f,c
  3674  000AB2  0BFC               	andlw	252
  3675  000AB4  6EDF               	movwf	indf2,c
  3676                           
  3677                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3678  000AB6  EE20 F004          	lfsr	2,4
  3679  000ABA  5016               	movf	setMotorPWM@m,w,c
  3680  000ABC  26D9               	addwf	fsr2l,f,c
  3681  000ABE  5017               	movf	setMotorPWM@m+1,w,c
  3682  000AC0  22DA               	addwfc	fsr2h,f,c
  3683  000AC2  CFDE F018          	movff	postinc2,??_setMotorPWM
  3684  000AC6  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3685  000ACA  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3686  000ACE  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3687  000AD2  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3688  000AD6  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3689  000ADA  0E06               	movlw	6
  3690  000ADC  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  3691  000ADE                     u1325:
  3692  000ADE  341B               	rlcf	??_setMotorPWM+3,w,c
  3693  000AE0  321B               	rrcf	??_setMotorPWM+3,f,c
  3694  000AE2  321A               	rrcf	??_setMotorPWM+2,f,c
  3695  000AE4  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3696  000AE6  D7FB               	goto	u1325
  3697  000AE8  501A               	movf	??_setMotorPWM+2,w,c
  3698  000AEA  6EDF               	movwf	indf2,c
  3699  000AEC  0012               	return		;funcret
  3700  000AEE                     __end_of_setMotorPWM:
  3701                           	opt callstack 0
  3702                           
  3703 ;; *************** function ___wmul *****************
  3704 ;; Defined at:
  3705 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  multiplier      2    7[COMRAM] unsigned int 
  3708 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  product         2   11[COMRAM] unsigned int 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  2    7[COMRAM] unsigned int 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0, prodl, prodh
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3720 ;;      Params:         4       0       0       0
  3721 ;;      Locals:         2       0       0       0
  3722 ;;      Temps:          0       0       0       0
  3723 ;;      Totals:         6       0       0       0
  3724 ;;Total ram usage:        6 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    2
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_setMotorPWM
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text23
  3735  0014A0                     __ptext23:
  3736                           	opt callstack 0
  3737  0014A0                     ___wmul:
  3738                           	opt callstack 26
  3739                           
  3740                           ;incstack = 0
  3741  0014A0  5008               	movf	___wmul@multiplier,w,c
  3742  0014A2  020A               	mulwf	___wmul@multiplicand,c
  3743  0014A4  CFF3 F00C          	movff	prodl,___wmul@product
  3744  0014A8  CFF4 F00D          	movff	prodh,___wmul@product+1
  3745  0014AC  5008               	movf	___wmul@multiplier,w,c
  3746  0014AE  020B               	mulwf	___wmul@multiplicand+1,c
  3747  0014B0  50F3               	movf	prodl,w,c
  3748  0014B2  260D               	addwf	___wmul@product+1,f,c
  3749  0014B4  5009               	movf	___wmul@multiplier+1,w,c
  3750  0014B6  020A               	mulwf	___wmul@multiplicand,c
  3751  0014B8  50F3               	movf	prodl,w,c
  3752  0014BA  260D               	addwf	___wmul@product+1,f,c
  3753  0014BC  C00C  F008         	movff	___wmul@product,?___wmul
  3754  0014C0  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3755  0014C4  0012               	return		;funcret
  3756  0014C6                     __end_of___wmul:
  3757                           	opt callstack 0
  3758                           
  3759 ;; *************** function ___awdiv *****************
  3760 ;; Defined at:
  3761 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  dividend        2   13[COMRAM] int 
  3764 ;;  divisor         2   15[COMRAM] int 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  quotient        2   19[COMRAM] int 
  3767 ;;  sign            1   18[COMRAM] unsigned char 
  3768 ;;  counter         1   17[COMRAM] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  2   13[COMRAM] int 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3778 ;;      Params:         4       0       0       0
  3779 ;;      Locals:         4       0       0       0
  3780 ;;      Temps:          0       0       0       0
  3781 ;;      Totals:         8       0       0       0
  3782 ;;Total ram usage:        8 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    2
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_setMotorPWM
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text24
  3793  000F52                     __ptext24:
  3794                           	opt callstack 0
  3795  000F52                     ___awdiv:
  3796                           	opt callstack 26
  3797                           
  3798                           ;incstack = 0
  3799  000F52  0E00               	movlw	0
  3800  000F54  6E13               	movwf	___awdiv@sign,c
  3801  000F56  AE11               	btfss	___awdiv@divisor+1,7,c
  3802  000F58  D006               	goto	l1918
  3803  000F5A  6C10               	negf	___awdiv@divisor,c
  3804  000F5C  1E11               	comf	___awdiv@divisor+1,f,c
  3805  000F5E  B0D8               	btfsc	status,0,c
  3806  000F60  2A11               	incf	___awdiv@divisor+1,f,c
  3807  000F62  0E01               	movlw	1
  3808  000F64  6E13               	movwf	___awdiv@sign,c
  3809  000F66                     l1918:
  3810  000F66  AE0F               	btfss	___awdiv@dividend+1,7,c
  3811  000F68  D006               	goto	l1924
  3812  000F6A  6C0E               	negf	___awdiv@dividend,c
  3813  000F6C  1E0F               	comf	___awdiv@dividend+1,f,c
  3814  000F6E  B0D8               	btfsc	status,0,c
  3815  000F70  2A0F               	incf	___awdiv@dividend+1,f,c
  3816  000F72  0E01               	movlw	1
  3817  000F74  1A13               	xorwf	___awdiv@sign,f,c
  3818  000F76                     l1924:
  3819  000F76  0E00               	movlw	0
  3820  000F78  6E15               	movwf	___awdiv@quotient+1,c
  3821  000F7A  0E00               	movlw	0
  3822  000F7C  6E14               	movwf	___awdiv@quotient,c
  3823  000F7E  5010               	movf	___awdiv@divisor,w,c
  3824  000F80  1011               	iorwf	___awdiv@divisor+1,w,c
  3825  000F82  B4D8               	btfsc	status,2,c
  3826  000F84  D01C               	goto	l1946
  3827  000F86  0E01               	movlw	1
  3828  000F88  6E12               	movwf	___awdiv@counter,c
  3829  000F8A  D004               	goto	l1932
  3830  000F8C                     l1930:
  3831  000F8C  90D8               	bcf	status,0,c
  3832  000F8E  3610               	rlcf	___awdiv@divisor,f,c
  3833  000F90  3611               	rlcf	___awdiv@divisor+1,f,c
  3834  000F92  2A12               	incf	___awdiv@counter,f,c
  3835  000F94                     l1932:
  3836  000F94  AE11               	btfss	___awdiv@divisor+1,7,c
  3837  000F96  D7FA               	goto	l1930
  3838  000F98                     u1210:
  3839  000F98  90D8               	bcf	status,0,c
  3840  000F9A  3614               	rlcf	___awdiv@quotient,f,c
  3841  000F9C  3615               	rlcf	___awdiv@quotient+1,f,c
  3842  000F9E  5010               	movf	___awdiv@divisor,w,c
  3843  000FA0  5C0E               	subwf	___awdiv@dividend,w,c
  3844  000FA2  5011               	movf	___awdiv@divisor+1,w,c
  3845  000FA4  580F               	subwfb	___awdiv@dividend+1,w,c
  3846  000FA6  A0D8               	btfss	status,0,c
  3847  000FA8  D005               	goto	l1942
  3848  000FAA  5010               	movf	___awdiv@divisor,w,c
  3849  000FAC  5E0E               	subwf	___awdiv@dividend,f,c
  3850  000FAE  5011               	movf	___awdiv@divisor+1,w,c
  3851  000FB0  5A0F               	subwfb	___awdiv@dividend+1,f,c
  3852  000FB2  8014               	bsf	___awdiv@quotient,0,c
  3853  000FB4                     l1942:
  3854  000FB4  90D8               	bcf	status,0,c
  3855  000FB6  3211               	rrcf	___awdiv@divisor+1,f,c
  3856  000FB8  3210               	rrcf	___awdiv@divisor,f,c
  3857  000FBA  2E12               	decfsz	___awdiv@counter,f,c
  3858  000FBC  D7ED               	goto	u1210
  3859  000FBE                     l1946:
  3860  000FBE  5013               	movf	___awdiv@sign,w,c
  3861  000FC0  B4D8               	btfsc	status,2,c
  3862  000FC2  D004               	goto	l1950
  3863  000FC4  6C14               	negf	___awdiv@quotient,c
  3864  000FC6  1E15               	comf	___awdiv@quotient+1,f,c
  3865  000FC8  B0D8               	btfsc	status,0,c
  3866  000FCA  2A15               	incf	___awdiv@quotient+1,f,c
  3867  000FCC                     l1950:
  3868  000FCC  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  3869  000FD0  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  3870  000FD4  0012               	return		;funcret
  3871  000FD6                     __end_of___awdiv:
  3872                           	opt callstack 0
  3873                           
  3874 ;; *************** function _display_RFID *****************
  3875 ;; Defined at:
  3876 ;;		line 109 in file "RFID.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  dataBuf         2   12[COMRAM] PTR unsigned char 
  3879 ;;		 -> RFIDbuf(12), 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  i               2   14[COMRAM] int 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3891 ;;      Params:         2       0       0       0
  3892 ;;      Locals:         2       0       0       0
  3893 ;;      Temps:          0       0       0       0
  3894 ;;      Totals:         4       0       0       0
  3895 ;;Total ram usage:        4 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:    6
  3898 ;; This function calls:
  3899 ;;		_ClearLCD
  3900 ;;		_SendLCD
  3901 ;;		_SetLine
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text25
  3908  00134C                     __ptext25:
  3909                           	opt callstack 0
  3910  00134C                     _display_RFID:
  3911                           	opt callstack 24
  3912                           
  3913                           ;RFID.c: 109: void display_RFID(char dataBuf[]);RFID.c: 110: {;RFID.c: 111:     ClearLCD
      +                          ();
  3914                           
  3915                           ;incstack = 0
  3916  00134C  EC7D  F00A         	call	_ClearLCD	;wreg free
  3917                           
  3918                           ;RFID.c: 112:     SetLine(1);
  3919  001350  0E01               	movlw	1
  3920  001352  EC11  F00A         	call	_SetLine
  3921                           
  3922                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  3923  001356  0E00               	movlw	0
  3924  001358  6E10               	movwf	display_RFID@i+1,c
  3925  00135A  0E00               	movlw	0
  3926  00135C  6E0F               	movwf	display_RFID@i,c
  3927  00135E                     l2188:
  3928                           
  3929                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  3930  00135E  0E01               	movlw	1
  3931  001360  6E0A               	movwf	SendLCD@type,c
  3932  001362  500F               	movf	display_RFID@i,w,c
  3933  001364  240D               	addwf	display_RFID@dataBuf,w,c
  3934  001366  6ED9               	movwf	fsr2l,c
  3935  001368  5010               	movf	display_RFID@i+1,w,c
  3936  00136A  200E               	addwfc	display_RFID@dataBuf+1,w,c
  3937  00136C  6EDA               	movwf	fsr2h,c
  3938  00136E  50DF               	movf	indf2,w,c
  3939  001370  ECE2  F009         	call	_SendLCD
  3940                           
  3941                           ;RFID.c: 116:     }
  3942  001374  4A0F               	infsnz	display_RFID@i,f,c
  3943  001376  2A10               	incf	display_RFID@i+1,f,c
  3944  001378  BE10               	btfsc	display_RFID@i+1,7,c
  3945  00137A  D7F1               	goto	l2188
  3946  00137C  5010               	movf	display_RFID@i+1,w,c
  3947  00137E  E105               	bnz	u1410
  3948  001380  0E0A               	movlw	10
  3949  001382  5C0F               	subwf	display_RFID@i,w,c
  3950  001384  B0D8               	btfsc	status,0,c
  3951  001386  0012               	return	
  3952  001388  D7EA               	goto	l2188
  3953  00138A                     u1410:
  3954  00138A  0012               	return		;funcret
  3955  00138C                     __end_of_display_RFID:
  3956                           	opt callstack 0
  3957                           
  3958 ;; *************** function _ClearLCD *****************
  3959 ;; Defined at:
  3960 ;;		line 137 in file "LCDIO.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3974 ;;      Params:         0       0       0       0
  3975 ;;      Locals:         0       0       0       0
  3976 ;;      Temps:          1       0       0       0
  3977 ;;      Totals:         1       0       0       0
  3978 ;;Total ram usage:        1 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    5
  3981 ;; This function calls:
  3982 ;;		_SendLCD
  3983 ;; This function is called by:
  3984 ;;		_main
  3985 ;;		_display_RFID
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text26
  3990  0014FA                     __ptext26:
  3991                           	opt callstack 0
  3992  0014FA                     _ClearLCD:
  3993                           	opt callstack 24
  3994                           
  3995                           ;LCDIO.c: 138:     SendLCD(0b00000001,0);
  3996                           
  3997                           ;incstack = 0
  3998  0014FA  0E00               	movlw	0
  3999  0014FC  6E0A               	movwf	SendLCD@type,c
  4000  0014FE  0E01               	movlw	1
  4001  001500  ECE2  F009         	call	_SendLCD
  4002                           
  4003                           ;LCDIO.c: 139:     _delay((unsigned long)((5)*(8000000/4000.0)));
  4004  001504  0E0D               	movlw	13
  4005  001506  6E0C               	movwf	??_ClearLCD& (0+255),c
  4006  001508  0EFC               	movlw	252
  4007  00150A                     u2347:
  4008  00150A  2EE8               	decfsz	wreg,f,c
  4009  00150C  D7FE               	bra	u2347
  4010  00150E  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  4011  001510  D7FC               	bra	u2347
  4012  001512  0012               	return		;funcret
  4013  001514                     __end_of_ClearLCD:
  4014                           	opt callstack 0
  4015                           
  4016 ;; *************** function _classify_data *****************
  4017 ;; Defined at:
  4018 ;;		line 30 in file "signal_processing.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  raw_data        2    7[COMRAM] int 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      unsigned char 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4032 ;;      Params:         2       0       0       0
  4033 ;;      Locals:         0       0       0       0
  4034 ;;      Temps:          0       0       0       0
  4035 ;;      Totals:         2       0       0       0
  4036 ;;Total ram usage:        2 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    2
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text27
  4047  00152C                     __ptext27:
  4048                           	opt callstack 0
  4049  00152C                     _classify_data:
  4050                           	opt callstack 28
  4051                           
  4052                           ;signal_processing.c: 30: char classify_data(int raw_data);signal_processing.c: 31: {;si
      +                          gnal_processing.c: 32:     if(raw_data > 10000)
  4053                           
  4054                           ;incstack = 0
  4055  00152C  BE09               	btfsc	classify_data@raw_data+1,7,c
  4056  00152E  D008               	goto	l2146
  4057  001530  0E11               	movlw	17
  4058  001532  5C08               	subwf	classify_data@raw_data,w,c
  4059  001534  0E27               	movlw	39
  4060  001536  5809               	subwfb	classify_data@raw_data+1,w,c
  4061  001538  A0D8               	btfss	status,0,c
  4062  00153A  D002               	goto	l2146
  4063                           
  4064                           ;signal_processing.c: 33:     {;signal_processing.c: 34:         return 1;
  4065  00153C  0E01               	movlw	1
  4066  00153E  0012               	return	
  4067  001540                     l2146:
  4068                           
  4069                           ;signal_processing.c: 37:     {;signal_processing.c: 38:         return 0;
  4070  001540  0E00               	movlw	0
  4071  001542  0012               	return		;funcret
  4072  001544                     __end_of_classify_data:
  4073                           	opt callstack 0
  4074                           
  4075 ;; *************** function _check_RFID *****************
  4076 ;; Defined at:
  4077 ;;		line 72 in file "RFID.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;  dataBuf         2   13[COMRAM] PTR unsigned char 
  4080 ;;		 -> RFIDbuf(12), 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  i               2   35[COMRAM] int 
  4083 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  4084 ;;  checksum        1   34[COMRAM] unsigned char 
  4085 ;;  byte5           1   33[COMRAM] unsigned char 
  4086 ;;  byte4           1   32[COMRAM] unsigned char 
  4087 ;;  byte3           1   31[COMRAM] unsigned char 
  4088 ;;  byte2           1   30[COMRAM] unsigned char 
  4089 ;;  byte1           1   29[COMRAM] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4099 ;;      Params:         2       0       0       0
  4100 ;;      Locals:        20       0       0       0
  4101 ;;      Temps:          2       0       0       0
  4102 ;;      Totals:        24       0       0       0
  4103 ;;Total ram usage:       24 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    6
  4106 ;; This function calls:
  4107 ;;		_LCD_String
  4108 ;;		_SetLine
  4109 ;; This function is called by:
  4110 ;;		_main
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text28
  4115  00087A                     __ptext28:
  4116                           	opt callstack 0
  4117  00087A                     _check_RFID:
  4118                           	opt callstack 24
  4119                           
  4120                           ;RFID.c: 72: void check_RFID(char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char hexBuf[1
      +                          2];;RFID.c: 77:     for(int i=0; i<12;i++)
  4121                           
  4122                           ;incstack = 0
  4123  00087A  0E00               	movlw	0
  4124  00087C  6E25               	movwf	check_RFID@i+1,c
  4125  00087E  0E00               	movlw	0
  4126  000880  6E24               	movwf	check_RFID@i,c
  4127  000882                     l2200:
  4128                           
  4129                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  4130  000882  5024               	movf	check_RFID@i,w,c
  4131  000884  240E               	addwf	check_RFID@dataBuf,w,c
  4132  000886  6ED9               	movwf	fsr2l,c
  4133  000888  5025               	movf	check_RFID@i+1,w,c
  4134  00088A  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4135  00088C  6EDA               	movwf	fsr2h,c
  4136  00088E  0E2F               	movlw	47
  4137  000890  64DF               	cpfsgt	indf2,c
  4138  000892  D018               	goto	l2206
  4139  000894  5024               	movf	check_RFID@i,w,c
  4140  000896  240E               	addwf	check_RFID@dataBuf,w,c
  4141  000898  6ED9               	movwf	fsr2l,c
  4142  00089A  5025               	movf	check_RFID@i+1,w,c
  4143  00089C  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4144  00089E  6EDA               	movwf	fsr2h,c
  4145  0008A0  0E3A               	movlw	58
  4146  0008A2  60DF               	cpfslt	indf2,c
  4147  0008A4  D00F               	goto	l2206
  4148                           
  4149                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  4150  0008A6  0E12               	movlw	low check_RFID@hexBuf
  4151  0008A8  2424               	addwf	check_RFID@i,w,c
  4152  0008AA  6ED9               	movwf	fsr2l,c
  4153  0008AC  0E00               	movlw	high check_RFID@hexBuf
  4154  0008AE  2025               	addwfc	check_RFID@i+1,w,c
  4155  0008B0  6EDA               	movwf	fsr2h,c
  4156  0008B2  5024               	movf	check_RFID@i,w,c
  4157  0008B4  240E               	addwf	check_RFID@dataBuf,w,c
  4158  0008B6  6EE1               	movwf	fsr1l,c
  4159  0008B8  5025               	movf	check_RFID@i+1,w,c
  4160  0008BA  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4161  0008BC  6EE2               	movwf	fsr1h,c
  4162  0008BE  50E7               	movf	indf1,w,c
  4163  0008C0  0FD0               	addlw	208
  4164  0008C2  D020               	goto	L1
  4165  0008C4                     l2206:
  4166  0008C4  5024               	movf	check_RFID@i,w,c
  4167  0008C6  240E               	addwf	check_RFID@dataBuf,w,c
  4168  0008C8  6ED9               	movwf	fsr2l,c
  4169  0008CA  5025               	movf	check_RFID@i+1,w,c
  4170  0008CC  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4171  0008CE  6EDA               	movwf	fsr2h,c
  4172  0008D0  0E40               	movlw	64
  4173  0008D2  64DF               	cpfsgt	indf2,c
  4174  0008D4  D018               	goto	l2212
  4175  0008D6  5024               	movf	check_RFID@i,w,c
  4176  0008D8  240E               	addwf	check_RFID@dataBuf,w,c
  4177  0008DA  6ED9               	movwf	fsr2l,c
  4178  0008DC  5025               	movf	check_RFID@i+1,w,c
  4179  0008DE  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4180  0008E0  6EDA               	movwf	fsr2h,c
  4181  0008E2  0E47               	movlw	71
  4182  0008E4  60DF               	cpfslt	indf2,c
  4183  0008E6  D00F               	goto	l2212
  4184                           
  4185                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  4186  0008E8  0E12               	movlw	low check_RFID@hexBuf
  4187  0008EA  2424               	addwf	check_RFID@i,w,c
  4188  0008EC  6ED9               	movwf	fsr2l,c
  4189  0008EE  0E00               	movlw	high check_RFID@hexBuf
  4190  0008F0  2025               	addwfc	check_RFID@i+1,w,c
  4191  0008F2  6EDA               	movwf	fsr2h,c
  4192  0008F4  5024               	movf	check_RFID@i,w,c
  4193  0008F6  240E               	addwf	check_RFID@dataBuf,w,c
  4194  0008F8  6EE1               	movwf	fsr1l,c
  4195  0008FA  5025               	movf	check_RFID@i+1,w,c
  4196  0008FC  200F               	addwfc	check_RFID@dataBuf+1,w,c
  4197  0008FE  6EE2               	movwf	fsr1h,c
  4198  000900  50E7               	movf	indf1,w,c
  4199  000902  0FC9               	addlw	201
  4200  000904                     L1:
  4201  000904  6EDF               	movwf	indf2,c
  4202  000906                     l2212:
  4203                           
  4204                           ;RFID.c: 86:     }
  4205  000906  4A24               	infsnz	check_RFID@i,f,c
  4206  000908  2A25               	incf	check_RFID@i+1,f,c
  4207  00090A  BE25               	btfsc	check_RFID@i+1,7,c
  4208  00090C  D7BA               	goto	l2200
  4209  00090E  5025               	movf	check_RFID@i+1,w,c
  4210  000910  E104               	bnz	u1460
  4211  000912  0E0C               	movlw	12
  4212  000914  5C24               	subwf	check_RFID@i,w,c
  4213  000916  A0D8               	btfss	status,0,c
  4214  000918  D7B4               	goto	l2200
  4215  00091A                     u1460:
  4216                           
  4217                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  4218  00091A  5012               	movf	check_RFID@hexBuf,w,c
  4219  00091C  A4D8               	btfss	status,2,c
  4220  00091E  D002               	goto	u1470
  4221  000920  0E01               	movlw	1
  4222  000922  D001               	goto	u1480
  4223  000924                     u1470:
  4224  000924  0E00               	movlw	0
  4225  000926                     u1480:
  4226  000926  1013               	iorwf	check_RFID@hexBuf+1,w,c
  4227  000928  6E1E               	movwf	check_RFID@byte1,c
  4228                           
  4229                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  4230  00092A  5014               	movf	check_RFID@hexBuf+2,w,c
  4231  00092C  A4D8               	btfss	status,2,c
  4232  00092E  D002               	goto	u1490
  4233  000930  0E01               	movlw	1
  4234  000932  D001               	goto	u1500
  4235  000934                     u1490:
  4236  000934  0E00               	movlw	0
  4237  000936                     u1500:
  4238  000936  1015               	iorwf	check_RFID@hexBuf+3,w,c
  4239  000938  6E1F               	movwf	check_RFID@byte2,c
  4240                           
  4241                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  4242  00093A  5016               	movf	check_RFID@hexBuf+4,w,c
  4243  00093C  A4D8               	btfss	status,2,c
  4244  00093E  D002               	goto	u1510
  4245  000940  0E01               	movlw	1
  4246  000942  D001               	goto	u1520
  4247  000944                     u1510:
  4248  000944  0E00               	movlw	0
  4249  000946                     u1520:
  4250  000946  1017               	iorwf	check_RFID@hexBuf+5,w,c
  4251  000948  6E20               	movwf	check_RFID@byte3,c
  4252                           
  4253                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  4254  00094A  5018               	movf	check_RFID@hexBuf+6,w,c
  4255  00094C  A4D8               	btfss	status,2,c
  4256  00094E  D002               	goto	u1530
  4257  000950  0E01               	movlw	1
  4258  000952  D001               	goto	u1540
  4259  000954                     u1530:
  4260  000954  0E00               	movlw	0
  4261  000956                     u1540:
  4262  000956  1019               	iorwf	check_RFID@hexBuf+7,w,c
  4263  000958  6E21               	movwf	check_RFID@byte4,c
  4264                           
  4265                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  4266  00095A  501A               	movf	check_RFID@hexBuf+8,w,c
  4267  00095C  A4D8               	btfss	status,2,c
  4268  00095E  D002               	goto	u1550
  4269  000960  0E01               	movlw	1
  4270  000962  D001               	goto	u1560
  4271  000964                     u1550:
  4272  000964  0E00               	movlw	0
  4273  000966                     u1560:
  4274  000966  101B               	iorwf	check_RFID@hexBuf+9,w,c
  4275  000968  6E22               	movwf	check_RFID@byte5,c
  4276                           
  4277                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  4278  00096A  501C               	movf	check_RFID@hexBuf+10,w,c
  4279  00096C  A4D8               	btfss	status,2,c
  4280  00096E  D002               	goto	u1570
  4281  000970  0E01               	movlw	1
  4282  000972  D001               	goto	u1580
  4283  000974                     u1570:
  4284  000974  0E00               	movlw	0
  4285  000976                     u1580:
  4286  000976  101D               	iorwf	check_RFID@hexBuf+11,w,c
  4287  000978  6E23               	movwf	check_RFID@checksum,c
  4288                           
  4289                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  4290  00097A  501E               	movf	check_RFID@byte1,w,c
  4291  00097C  181F               	xorwf	check_RFID@byte2,w,c
  4292  00097E  1820               	xorwf	check_RFID@byte3,w,c
  4293  000980  1821               	xorwf	check_RFID@byte4,w,c
  4294  000982  6E10               	movwf	??_check_RFID& (0+255),c
  4295  000984  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  4296  000986  5023               	movf	check_RFID@checksum,w,c
  4297  000988  1822               	xorwf	check_RFID@byte5,w,c
  4298  00098A  A4D8               	btfss	status,2,c
  4299  00098C  D002               	goto	u1590
  4300  00098E  0E01               	movlw	1
  4301  000990  D001               	goto	u1600
  4302  000992                     u1590:
  4303  000992  0E00               	movlw	0
  4304  000994                     u1600:
  4305  000994  1A10               	xorwf	??_check_RFID,f,c
  4306  000996  0E00               	movlw	0
  4307  000998  1A11               	xorwf	??_check_RFID+1,f,c
  4308  00099A  5010               	movf	??_check_RFID,w,c
  4309  00099C  1011               	iorwf	??_check_RFID+1,w,c
  4310  00099E  B4D8               	btfsc	status,2,c
  4311  0009A0  D00A               	goto	l2222
  4312                           
  4313                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  4314  0009A2  0E02               	movlw	2
  4315  0009A4  EC11  F00A         	call	_SetLine
  4316                           
  4317                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  4318  0009A8  0E11               	movlw	low STR_3
  4319  0009AA  6E0C               	movwf	LCD_String@string,c
  4320  0009AC  0E03               	movlw	high STR_3
  4321  0009AE  6E0D               	movwf	LCD_String@string+1,c
  4322  0009B0  ECD6  F008         	call	_LCD_String	;wreg free
  4323                           
  4324                           ;RFID.c: 101:     }
  4325  0009B4  0012               	return	
  4326  0009B6                     l2222:
  4327                           
  4328                           ;RFID.c: 104:         SetLine(2);
  4329  0009B6  0E02               	movlw	2
  4330  0009B8  EC11  F00A         	call	_SetLine
  4331                           
  4332                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  4333  0009BC  0E01               	movlw	low STR_4
  4334  0009BE  6E0C               	movwf	LCD_String@string,c
  4335  0009C0  0E03               	movlw	high STR_4
  4336  0009C2  6E0D               	movwf	LCD_String@string+1,c
  4337  0009C4  ECD6  F008         	call	_LCD_String	;wreg free
  4338  0009C8  0012               	return		;funcret
  4339  0009CA                     __end_of_check_RFID:
  4340                           	opt callstack 0
  4341                           
  4342 ;; *************** function _SetLine *****************
  4343 ;; Defined at:
  4344 ;;		line 107 in file "LCDIO.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  line            1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  line            1   11[COMRAM] unsigned char 
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 0/0
  4355 ;;		On exit  : 0/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4358 ;;      Params:         0       0       0       0
  4359 ;;      Locals:         1       0       0       0
  4360 ;;      Temps:          0       0       0       0
  4361 ;;      Totals:         1       0       0       0
  4362 ;;Total ram usage:        1 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:    5
  4365 ;; This function calls:
  4366 ;;		_SendLCD
  4367 ;; This function is called by:
  4368 ;;		_main
  4369 ;;		_check_RFID
  4370 ;;		_display_RFID
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text29
  4375  001422                     __ptext29:
  4376                           	opt callstack 0
  4377  001422                     _SetLine:
  4378                           	opt callstack 24
  4379                           
  4380                           ;incstack = 0
  4381                           ;SetLine@line stored from wreg
  4382  001422  6E0C               	movwf	SetLine@line,c
  4383                           
  4384                           ;LCDIO.c: 109:     if(line == 1){
  4385  001424  040C               	decf	SetLine@line,w,c
  4386  001426  A4D8               	btfss	status,2,c
  4387  001428  D005               	goto	l2016
  4388                           
  4389                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  4390  00142A  0E00               	movlw	0
  4391  00142C  6E0A               	movwf	SendLCD@type,c
  4392  00142E  0E80               	movlw	128
  4393  001430  ECE2  F009         	call	_SendLCD
  4394  001434                     l2016:
  4395                           
  4396                           ;LCDIO.c: 113:     if(line == 2){
  4397  001434  0E02               	movlw	2
  4398  001436  180C               	xorwf	SetLine@line,w,c
  4399  001438  A4D8               	btfss	status,2,c
  4400  00143A  D005               	goto	l2020
  4401                           
  4402                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  4403  00143C  0E00               	movlw	0
  4404  00143E  6E0A               	movwf	SendLCD@type,c
  4405  001440  0EC0               	movlw	192
  4406  001442  ECE2  F009         	call	_SendLCD
  4407  001446                     l2020:
  4408                           
  4409                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4410  001446  0E21               	movlw	33
  4411  001448                     u2357:
  4412  001448  2EE8               	decfsz	wreg,f,c
  4413  00144A  D7FE               	bra	u2357
  4414  00144C  F000               	nop	
  4415  00144E  0012               	return		;funcret
  4416  001450                     __end_of_SetLine:
  4417                           	opt callstack 0
  4418                           
  4419 ;; *************** function _LCD_String *****************
  4420 ;; Defined at:
  4421 ;;		line 119 in file "LCDIO.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  string          2   11[COMRAM] PTR unsigned char 
  4424 ;;		 -> STR_4(16), STR_3(16), STR_2(16), main@temp2(16), 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4436 ;;      Params:         2       0       0       0
  4437 ;;      Locals:         0       0       0       0
  4438 ;;      Temps:          0       0       0       0
  4439 ;;      Totals:         2       0       0       0
  4440 ;;Total ram usage:        2 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    5
  4443 ;; This function calls:
  4444 ;;		_SendLCD
  4445 ;; This function is called by:
  4446 ;;		_main
  4447 ;;		_check_RFID
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text30
  4452  0011AC                     __ptext30:
  4453                           	opt callstack 0
  4454  0011AC                     _LCD_String:
  4455                           	opt callstack 24
  4456                           
  4457                           ;LCDIO.c: 121: while(*string != 0){
  4458                           
  4459                           ;incstack = 0
  4460  0011AC  D01A               	goto	l2030
  4461  0011AE                     l2024:
  4462                           
  4463                           ;LCDIO.c: 124: SendLCD(*string++,1);
  4464  0011AE  0E01               	movlw	1
  4465  0011B0  6E0A               	movwf	SendLCD@type,c
  4466  0011B2  C00C  FFF6         	movff	LCD_String@string,tblptrl
  4467  0011B6  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  4468  0011BA  6AF8               	clrf	tblptru,c
  4469  0011BC  0E02               	movlw	(high __ramtop+-1)
  4470  0011BE  64F7               	cpfsgt	tblptrh,c
  4471  0011C0  D003               	bra	u1267
  4472  0011C2  0008               	tblrd		*
  4473  0011C4  50F5               	movf	tablat,w,c
  4474  0011C6  D005               	bra	u1260
  4475  0011C8                     u1267:
  4476  0011C8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4477  0011CC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4478  0011D0  50E7               	movf	indf1,w,c
  4479  0011D2                     u1260:
  4480  0011D2  ECE2  F009         	call	_SendLCD
  4481  0011D6  4A0C               	infsnz	LCD_String@string,f,c
  4482  0011D8  2A0D               	incf	LCD_String@string+1,f,c
  4483                           
  4484                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4485  0011DA  0E21               	movlw	33
  4486  0011DC                     u2367:
  4487  0011DC  2EE8               	decfsz	wreg,f,c
  4488  0011DE  D7FE               	bra	u2367
  4489  0011E0  F000               	nop	
  4490  0011E2                     l2030:
  4491                           
  4492                           ;LCDIO.c: 121: while(*string != 0){
  4493  0011E2  C00C  FFF6         	movff	LCD_String@string,tblptrl
  4494  0011E6  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  4495  0011EA  6AF8               	clrf	tblptru,c
  4496  0011EC  0E02               	movlw	(high __ramtop+-1)
  4497  0011EE  64F7               	cpfsgt	tblptrh,c
  4498  0011F0  D003               	bra	u1277
  4499  0011F2  0008               	tblrd		*
  4500  0011F4  50F5               	movf	tablat,w,c
  4501  0011F6  D005               	bra	u1270
  4502  0011F8                     u1277:
  4503  0011F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4504  0011FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4505  001200  50E7               	movf	indf1,w,c
  4506  001202                     u1270:
  4507  001202  0900               	iorlw	0
  4508  001204  B4D8               	btfsc	status,2,c
  4509  001206  0012               	return	
  4510  001208  D7D2               	goto	l2024
  4511  00120A                     __end_of_LCD_String:
  4512                           	opt callstack 0
  4513                           
  4514 ;; *************** function _SendLCD *****************
  4515 ;; Defined at:
  4516 ;;		line 44 in file "LCDIO.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  Byte            1    wreg     unsigned char 
  4519 ;;  type            1    9[COMRAM] unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  Byte            1   10[COMRAM] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  1    wreg      void 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4531 ;;      Params:         1       0       0       0
  4532 ;;      Locals:         1       0       0       0
  4533 ;;      Temps:          0       0       0       0
  4534 ;;      Totals:         2       0       0       0
  4535 ;;Total ram usage:        2 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    4
  4538 ;; This function calls:
  4539 ;;		_LCDout
  4540 ;; This function is called by:
  4541 ;;		_init_LCD
  4542 ;;		_SetLine
  4543 ;;		_LCD_String
  4544 ;;		_ClearLCD
  4545 ;;		_display_RFID
  4546 ;;		_ShiftLeft
  4547 ;;		_ShiftRight
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text31
  4552  0013C4                     __ptext31:
  4553                           	opt callstack 0
  4554  0013C4                     _SendLCD:
  4555                           	opt callstack 24
  4556                           
  4557                           ;incstack = 0
  4558                           ;SendLCD@Byte stored from wreg
  4559  0013C4  6E0B               	movwf	SendLCD@Byte,c
  4560                           
  4561                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  4562  0013C6  B00A               	btfsc	SendLCD@type,0,c
  4563  0013C8  D002               	bra	u1145
  4564  0013CA  9E89               	bcf	3977,7,c	;volatile
  4565  0013CC  D001               	bra	u1146
  4566  0013CE                     u1145:
  4567  0013CE  8E89               	bsf	3977,7,c	;volatile
  4568  0013D0                     u1146:
  4569                           
  4570                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  4571  0013D0  380B               	swapf	SendLCD@Byte,w,c
  4572  0013D2  0B0F               	andlw	15
  4573  0013D4  0B0F               	andlw	15
  4574  0013D6  EC2A  F008         	call	_LCDout
  4575                           
  4576                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  4577  0013DA  0E06               	movlw	6
  4578  0013DC                     u2377:
  4579  0013DC  2EE8               	decfsz	wreg,f,c
  4580  0013DE  D7FE               	bra	u2377
  4581  0013E0  D000               	nop2	
  4582                           
  4583                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  4584  0013E2  500B               	movf	SendLCD@Byte,w,c
  4585  0013E4  0B0F               	andlw	15
  4586  0013E6  EC2A  F008         	call	_LCDout
  4587                           
  4588                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  4589  0013EA  0E21               	movlw	33
  4590  0013EC                     u2387:
  4591  0013EC  2EE8               	decfsz	wreg,f,c
  4592  0013EE  D7FE               	bra	u2387
  4593  0013F0  F000               	nop	
  4594  0013F2  0012               	return		;funcret
  4595  0013F4                     __end_of_SendLCD:
  4596                           	opt callstack 0
  4597                           
  4598 ;; *************** function _LCDout *****************
  4599 ;; Defined at:
  4600 ;;		line 31 in file "LCDIO.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;  number          1    wreg     unsigned char 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  number          1    8[COMRAM] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, status,2, status,0, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4614 ;;      Params:         0       0       0       0
  4615 ;;      Locals:         1       0       0       0
  4616 ;;      Temps:          1       0       0       0
  4617 ;;      Totals:         2       0       0       0
  4618 ;;Total ram usage:        2 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    3
  4621 ;; This function calls:
  4622 ;;		_E_TOG
  4623 ;; This function is called by:
  4624 ;;		_SendLCD
  4625 ;;		_init_LCD
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text32
  4630  001054                     __ptext32:
  4631                           	opt callstack 0
  4632  001054                     _LCDout:
  4633                           	opt callstack 24
  4634                           
  4635                           ;incstack = 0
  4636                           ;LCDout@number stored from wreg
  4637  001054  6E09               	movwf	LCDout@number,c
  4638                           
  4639                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  4640  001056  C009  F008         	movff	LCDout@number,??_LCDout
  4641  00105A  0E01               	movlw	1
  4642  00105C  1608               	andwf	??_LCDout,f,c
  4643  00105E  508B               	movf	3979,w,c	;volatile
  4644  001060  1808               	xorwf	??_LCDout,w,c
  4645  001062  0BFE               	andlw	-2
  4646  001064  1808               	xorwf	??_LCDout,w,c
  4647  001066  6E8B               	movwf	3979,c	;volatile
  4648                           
  4649                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  4650  001068  C009  F008         	movff	LCDout@number,??_LCDout
  4651  00106C  90D8               	bcf	status,0,c
  4652  00106E  3208               	rrcf	??_LCDout,f,c
  4653  001070  0E01               	movlw	1
  4654  001072  1608               	andwf	??_LCDout,f,c
  4655  001074  4608               	rlncf	??_LCDout,f,c
  4656  001076  4608               	rlncf	??_LCDout,f,c
  4657  001078  4608               	rlncf	??_LCDout,f,c
  4658  00107A  508B               	movf	3979,w,c	;volatile
  4659  00107C  1808               	xorwf	??_LCDout,w,c
  4660  00107E  0BF7               	andlw	-9
  4661  001080  1808               	xorwf	??_LCDout,w,c
  4662  001082  6E8B               	movwf	3979,c	;volatile
  4663                           
  4664                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  4665  001084  C009  F008         	movff	LCDout@number,??_LCDout
  4666  001088  90D8               	bcf	status,0,c
  4667  00108A  3208               	rrcf	??_LCDout,f,c
  4668  00108C  90D8               	bcf	status,0,c
  4669  00108E  3208               	rrcf	??_LCDout,f,c
  4670  001090  0E01               	movlw	1
  4671  001092  1608               	andwf	??_LCDout,f,c
  4672  001094  508C               	movf	3980,w,c	;volatile
  4673  001096  1808               	xorwf	??_LCDout,w,c
  4674  001098  0BFE               	andlw	-2
  4675  00109A  1808               	xorwf	??_LCDout,w,c
  4676  00109C  6E8C               	movwf	3980,c	;volatile
  4677                           
  4678                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  4679  00109E  C009  F008         	movff	LCDout@number,??_LCDout
  4680  0010A2  90D8               	bcf	status,0,c
  4681  0010A4  3208               	rrcf	??_LCDout,f,c
  4682  0010A6  90D8               	bcf	status,0,c
  4683  0010A8  3208               	rrcf	??_LCDout,f,c
  4684  0010AA  90D8               	bcf	status,0,c
  4685  0010AC  3208               	rrcf	??_LCDout,f,c
  4686  0010AE  0E01               	movlw	1
  4687  0010B0  1608               	andwf	??_LCDout,f,c
  4688  0010B2  4608               	rlncf	??_LCDout,f,c
  4689  0010B4  508C               	movf	3980,w,c	;volatile
  4690  0010B6  1808               	xorwf	??_LCDout,w,c
  4691  0010B8  0BFD               	andlw	-3
  4692  0010BA  1808               	xorwf	??_LCDout,w,c
  4693  0010BC  6E8C               	movwf	3980,c	;volatile
  4694                           
  4695                           ;LCDIO.c: 39:  E_TOG();
  4696  0010BE  ECA2  F00A         	call	_E_TOG	;wreg free
  4697                           
  4698                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4699  0010C2  0E03               	movlw	3
  4700  0010C4                     u2397:
  4701  0010C4  2EE8               	decfsz	wreg,f,c
  4702  0010C6  D7FE               	bra	u2397
  4703  0010C8  F000               	nop	
  4704  0010CA  0012               	return		;funcret
  4705  0010CC                     __end_of_LCDout:
  4706                           	opt callstack 0
  4707                           
  4708 ;; *************** function _E_TOG *****************
  4709 ;; Defined at:
  4710 ;;		line 23 in file "LCDIO.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;		None
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4724 ;;      Params:         0       0       0       0
  4725 ;;      Locals:         0       0       0       0
  4726 ;;      Temps:          0       0       0       0
  4727 ;;      Totals:         0       0       0       0
  4728 ;;Total ram usage:        0 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    2
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_LCDout
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text33
  4739  001544                     __ptext33:
  4740                           	opt callstack 0
  4741  001544                     _E_TOG:
  4742                           	opt callstack 24
  4743                           
  4744                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  4745                           
  4746                           ;incstack = 0
  4747  001544  8C89               	bsf	3977,6,c	;volatile
  4748                           
  4749                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4750  001546  0E03               	movlw	3
  4751  001548                     u2407:
  4752  001548  2EE8               	decfsz	wreg,f,c
  4753  00154A  D7FE               	bra	u2407
  4754  00154C  F000               	nop	
  4755                           
  4756                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  4757  00154E  9C89               	bcf	3977,6,c	;volatile
  4758  001550  0012               	return		;funcret
  4759  001552                     __end_of_E_TOG:
  4760                           	opt callstack 0
  4761                           
  4762 ;; *************** function _InterruptHandlerHigh *****************
  4763 ;; Defined at:
  4764 ;;		line 59 in file "main.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;  throwaway       1    0        unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4778 ;;      Params:         0       0       0       0
  4779 ;;      Locals:         1       0       0       0
  4780 ;;      Temps:          2       0       0       0
  4781 ;;      Totals:         3       0       0       0
  4782 ;;Total ram usage:        3 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    1
  4785 ;; This function calls:
  4786 ;;		_processRFID
  4787 ;; This function is called by:
  4788 ;;		Interrupt level 2
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	intcode
  4793  000008                     __pintcode:
  4794                           	opt callstack 0
  4795  000008                     _InterruptHandlerHigh:
  4796                           	opt callstack 21
  4797                           
  4798                           ;incstack = 0
  4799  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4800  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4801  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4802                           
  4803                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4804  000012  AA9E               	btfss	3998,5,c	;volatile
  4805  000014  D00E               	goto	i2l75
  4806  000016  0456               	decf	_robot_mode,w,c	;volatile
  4807  000018  A4D8               	btfss	status,2,c
  4808  00001A  D00B               	goto	i2l75
  4809                           
  4810                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4811  00001C  0ED2               	movlw	low _RFIDbuf
  4812  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  4813  000020  0E00               	movlw	high _RFIDbuf
  4814  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  4815  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4816  000028  EC80  F009         	call	_processRFID	;wreg free
  4817  00002C  0100               	movlb	0	; () banked
  4818  00002E  6FB1               	movwf	_RFID_flag& (0+255),b	;volatile
  4819                           
  4820                           ;main.c: 67:     }
  4821  000030  D001               	goto	i2l77
  4822  000032                     i2l75:
  4823  000032  50AE               	movf	4014,w,c	;volatile
  4824  000034                     i2l77:
  4825  000034  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4826  000038  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4827  00003C  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4828  00003E  0011               	retfie		f
  4829  000040                     __end_of_InterruptHandlerHigh:
  4830                           	opt callstack 0
  4831                           
  4832 ;; *************** function _processRFID *****************
  4833 ;; Defined at:
  4834 ;;		line 34 in file "RFID.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  RFIDbuf         2    0[COMRAM] PTR unsigned char 
  4837 ;;		 -> RFIDbuf(12), 
  4838 ;;  latestChar      1    2[COMRAM] unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  i               1    3[COMRAM] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      unsigned char 
  4843 ;; Registers used:
  4844 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4850 ;;      Params:         3       0       0       0
  4851 ;;      Locals:         1       0       0       0
  4852 ;;      Temps:          0       0       0       0
  4853 ;;      Totals:         4       0       0       0
  4854 ;;Total ram usage:        4 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; This function calls:
  4857 ;;		Nothing
  4858 ;; This function is called by:
  4859 ;;		_InterruptHandlerHigh
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text35
  4864  001300                     __ptext35:
  4865                           	opt callstack 0
  4866  001300                     _processRFID:
  4867                           	opt callstack 21
  4868                           
  4869                           ;RFID.c: 34: char processRFID(char RFIDbuf[], char latestChar);RFID.c: 35: {;RFID.c: 39:
      +                               static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4870                           
  4871                           ;incstack = 0
  4872  001300  0E03               	movlw	3
  4873  001302  1803               	xorwf	processRFID@latestChar,w,c
  4874  001304  A4D8               	btfss	status,2,c
  4875  001306  D002               	goto	i2l2072
  4876                           
  4877                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4878  001308  0E01               	movlw	1
  4879  00130A  0012               	return	
  4880  00130C                     i2l2072:
  4881                           
  4882                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4883  00130C  0E02               	movlw	2
  4884  00130E  1803               	xorwf	processRFID@latestChar,w,c
  4885  001310  A4D8               	btfss	status,2,c
  4886  001312  D012               	goto	i2l2092
  4887                           
  4888                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4889  001314  0E00               	movlw	0
  4890  001316  6E55               	movwf	processRFID@position_in_buf,c
  4891                           
  4892                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4893  001318  0E00               	movlw	0
  4894  00131A  6E04               	movwf	processRFID@i,c
  4895  00131C                     i2l2080:
  4896                           
  4897                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4898  00131C  5004               	movf	processRFID@i,w,c
  4899  00131E  2401               	addwf	processRFID@RFIDbuf,w,c
  4900  001320  6ED9               	movwf	fsr2l,c
  4901  001322  0E00               	movlw	0
  4902  001324  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4903  001326  6EDA               	movwf	fsr2h,c
  4904  001328  0E00               	movlw	0
  4905  00132A  6EDF               	movwf	indf2,c
  4906                           
  4907                           ;RFID.c: 56:            }
  4908  00132C  2A04               	incf	processRFID@i,f,c
  4909  00132E  0E0B               	movlw	11
  4910  001330  6404               	cpfsgt	processRFID@i,c
  4911  001332  D7F4               	goto	i2l2080
  4912  001334                     i2u137_40:
  4913                           
  4914                           ;RFID.c: 58:            return 0;
  4915  001334  0E00               	movlw	0
  4916  001336  0012               	return	
  4917  001338                     i2l2092:
  4918                           
  4919                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  4920  001338  5055               	movf	processRFID@position_in_buf,w,c
  4921  00133A  2401               	addwf	processRFID@RFIDbuf,w,c
  4922  00133C  6ED9               	movwf	fsr2l,c
  4923  00133E  0E00               	movlw	0
  4924  001340  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4925  001342  6EDA               	movwf	fsr2h,c
  4926  001344  C003  FFDF         	movff	processRFID@latestChar,indf2
  4927                           
  4928                           ;RFID.c: 64:             position_in_buf++;
  4929  001348  2A55               	incf	processRFID@position_in_buf,f,c
  4930  00134A  D7F4               	goto	i2u137_40
  4931  00134C                     __end_of_processRFID:
  4932                           	opt callstack 0
  4933                           
  4934                           	psect	rparam
  4935  0000                     
  4936                           	psect	temp
  4937  000057                     btemp:
  4938                           	opt callstack 0
  4939  000057                     	ds	1
  4940  0000                     int$flags	set	btemp
  4941  0000                     wtemp8	set	btemp+1
  4942  0000                     ttemp5	set	btemp+1
  4943  0000                     ttemp6	set	btemp+4
  4944  0000                     ttemp7	set	btemp+8
  4945                           tosu	equ	0xFFF
  4946                           tosh	equ	0xFFE
  4947                           tosl	equ	0xFFD
  4948                           stkptr	equ	0xFFC
  4949                           pclatu	equ	0xFFB
  4950                           pclath	equ	0xFFA
  4951                           pcl	equ	0xFF9
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           indf0	equ	0xFEF
  4959                           postinc0	equ	0xFEE
  4960                           postdec0	equ	0xFED
  4961                           preinc0	equ	0xFEC
  4962                           plusw0	equ	0xFEB
  4963                           fsr0h	equ	0xFEA
  4964                           fsr0l	equ	0xFE9
  4965                           wreg	equ	0xFE8
  4966                           indf1	equ	0xFE7
  4967                           postinc1	equ	0xFE6
  4968                           postdec1	equ	0xFE5
  4969                           preinc1	equ	0xFE4
  4970                           plusw1	equ	0xFE3
  4971                           fsr1h	equ	0xFE2
  4972                           fsr1l	equ	0xFE1
  4973                           bsr	equ	0xFE0
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           preinc2	equ	0xFDC
  4978                           plusw2	equ	0xFDB
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8


Data Sizes:
    Strings     61
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      86
    BANK0           160     79     126
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1756_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> main@temp2(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    display_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), main@temp2(BANK0[16]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _moveForward->_setMotorPWM
    _moveBackward->_setMotorPWM
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    49      0   31348
                                             30 BANK0     49    49      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                         _check_RFID
                      _classify_data
                       _display_RFID
                  _init_motor_struct
                       _moveBackward
                        _moveForward
                              _setup
                            _sprintf
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            7     3      4    2231
                                             30 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    2187
                                             30 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    7529
                                             14 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7043
                                             76 COMRAM     2     2      0
                                              8 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    6573
                                             66 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                              _fputc
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10    4829
                                             34 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             23 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             16 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    1037
                                              7 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     412
                                              7 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     421
                                              7 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1274
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1154
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _moveForward                                          6     2      4    2231
                                             30 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBackward                                         6     2      4    2231
                                             30 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2317
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1857
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     303
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     398
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3408
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1066
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        2     0      2      98
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3416
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1110
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1415
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1066
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (10) _processRFID                                         4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveBackward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveForward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      7E       5       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      56       1       91.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D4       3        0.0%
DATA                 0      0      D4      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 14:57:41 2020

                           l67 13F8                   ___awdiv@sign 0013            ___wmul@multiplicand 000A  
                ?_display_RFID 000D                    ?_LCD_String 000C                            l312 0EEA  
                          l322 057E                            l139 0A92                            l324 0586  
          display_RFID@dataBuf 000D                            l785 0C84                            l795 0DFA  
                          _pad 0EBC                            wreg 000FE8                   processRFID@i 0004  
                 __CFG_LVP$OFF 000000                           l2020 1446                           l2030 11E2  
                         l2024 11AE                           l2016 1434                           l2200 0882  
                         l2212 0906                           l2222 09B6                           l2206 08C4  
                         l2038 0A6A                           l2126 0FFE                           l2400 145A  
                         l2146 1540                           l2234 1164                           l2170 10F4  
                         l2402 145E                           l2250 12BA                           l2412 0ED4  
                         l2422 0F0C                           l2416 0EE2                           l2520 07E8  
                         l2600 042E                           l2426 0F38                           l2418 0EF4  
                         l2530 082E                           l2188 135E                           l2436 0BFE  
                         l2438 0C12                           l2382 0E34                           l2526 0824  
                         l2550 1244                           l2622 04AC                           l2630 04E4  
                         l2614 0476                           l2448 0C6E                           l2464 0DE4  
                         l2456 0D88                           l2392 1396                           l2480 05BE  
                         l2536 0846                           l1930 0F8C                           l2458 0D9C  
                         l2490 06AA                           l2634 0502                           l2626 04CC  
                         l2570 036A                           l1932 0F94                           l1924 0F76  
                         l2396 13AC                           l2548 121E                           l2652 0554  
                         l2644 051C                           l1950 0FCC                           l1942 0FB4  
                         l1918 0F66                           l2582 03B8                           l2574 0386  
                         l1946 0FBE                           l2594 040C                           ?_pad 0018  
                         STR_1 0331                           STR_2 0321                           STR_3 0311  
                         STR_4 0301                           u2000 06D4                           u2001 06D2  
                         u1210 0F98                           u2010 06E2                           u2020 06E6  
                         u1304 0A3E                           u1400 113A                           u2120 047C  
                         u1145 13CE                           u1305 0A3A                           u1146 13D0  
                         u1410 138A                           u1314 0A86                           u1315 0A82  
                         u1260 11D2                           u1500 0936                           u1325 0ADE  
                         u1270 1202                           u1510 0944                           _LATB 000F8A  
                         u2207 0436                           u1600 0994                           u1520 0946  
                         u2160 054C                           u2217 04B4                           u1530 0954  
                         u2170 0558                           u2090 0412                           u1267 11C8  
                         u2307 0D2A                           u2227 0528                           u1540 0956  
                         u1460 091A                           u1620 11AA                           u1380 1052  
                         u1277 11F8                           u2317 0D40                           u2237 1034  
                         u1550 0964                           u1470 0924                           u2407 1548  
                         u2327 0D54                           u2247 0CC4                           u1560 0966  
                         u1480 0926                           u1800 0E2C                           u2337 0D66  
                         u2257 0CDA                           u1570 0974                           u1490 0934  
                         u2347 150A                           u2267 0CEA                           u1580 0976  
                         u1820 0E74                           u2357 1448                           u2277 0CF8  
                         u2197 03FE                           u1590 0992                           u1910 0C16  
                         u2367 11DC                           u2287 0D06                           u2377 13DC  
                         u2297 0D18                           u2387 13EC                           u1940 0DA0  
                         u2397 10C4                           u1970 0574                           u1891 0BDE  
                         i2l75 0032                           i2l77 0034                           _dbuf 00B2  
                         _main 0340                           _prec 0051                           _nout 00AF  
                         pad@i 001F                           pad@p 001C                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           pad@w 0021                           fsr2l 000FD9  
                         btemp 0057                           _stop 12B2                           _utoa 0562  
                         prodh 000FF4                           prodl 000FF3                           start 0040  
                 ___param_bank 000000                __end_of_SendLCD 13F4                          ??_pad 001E  
              __end_of_SetLine 1450                 ??_display_RFID 000F                          ?_main 0001  
              __end_of___awdiv 0FD6                          ?_stop 001F                          ?_utoa 0023  
              __end_of___lodiv 0CA6                ___awdiv@divisor 0010                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                __end_of___lomod 0E1C  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0012  
                        _RCREG 000FAE                          _E_TOG 1544                   vfpfcnvrt@fmt 0045  
                 vfpfcnvrt@llu 0060                          _SPBRG 000FAF                   ?_init_sensor 0001  
                 main@raw_data 0099                __end_of_initPWM 14FA                          _flags 0053  
                        _fputc 0E1C                          _fputs 138C                          _setup 13F4  
                        pad@fp 0018                          _width 004F                          _putch 1552  
                        main@i 0094                          tablat 000FF5             processRFID@RFIDbuf 0001  
                        ttemp5 0058                          ttemp6 005B                          ttemp7 005F  
                        utoa@d 0025                          stop@i 0023                          utoa@i 0041  
                        utoa@n 0039                          utoa@p 0035                          utoa@w 0037  
                        status 000FD8                          wtemp8 0058            __size_of_LCD_String 005E  
              __end_of_sprintf 12B2               __end_of_ClearLCD 1514               ___lodiv@dividend 0008  
               __CFG_MCLRE$OFF 000000                __initialization 147A                   __end_of_main 0562  
                 __end_of_stop 1300                   __end_of_utoa 0710                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000C                         ??_main 007E                         ??_stop 0023  
                       ??_utoa 002D                  __activetblptr 000002                         ?_E_TOG 0001  
             ___lodiv@quotient 0018                   ?_setMotorPWM 0016                   ?_moveForward 001F  
                       ?_fputc 0008                         ?_fputs 0011               ___awdiv@dividend 000E  
                       ?_setup 0001                         _ANSEL0 000FB8                         _ANSEL1 000FB9  
                       ?_putch 0001                         i2l2080 131C                         i2l2072 130C  
                       i2l2092 1338                         _LCDout 1054                    SendLCD@Byte 000B  
                       _OSCCON 000FD3                         _PTCON0 000F7F                         _PTCON1 000F7E  
                       _SPBRGH 000FB0                         _PTPERH 000F7A                         _PTPERL 000F7B  
                  SendLCD@type 000A            main@beacon_location 0098                      ??_SendLCD 000B  
                    ??_SetLine 000C                   vfprintf@cfmt 004D                  display_RFID@i 000F  
                       ___wmul 14A0                      ??___awdiv 0012                      ??___lodiv 0018  
                    ??___lomod 0018               __end_of_init_LCD 0D6E            init_motor_struct@mL 001F  
          init_motor_struct@mR 0021                         clear_0 1480                         clear_1 148C  
             ___awdiv@quotient 0014                         pad@buf 001A                         _strlen 1450  
                    ??_initPWM 000A                         fputc@c 0008                         fputs@c 0015  
                       fputs@i 0016                         fputs@s 0011                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       putch@c 0001               __end_of_vfprintf 1260                         stop@mL 001F  
                       stop@mR 0021                         utoa@fp 0023                      ??_sprintf 004F  
                 ?_processRFID 0001              _init_motor_struct 0AEE           __end_of_display_RFID 138C  
           ?_init_motor_struct 001F                     __accesstop 0060        __end_of__initialization 1492  
                ___rparam_used 000001                    SetLine@line 000C                  __end_of_E_TOG 1552  
          ??_init_motor_struct 0023                 __pcstackCOMRAM 0001                  __end_of_fputc 0EBC  
                __end_of_fputs 13C4                  __end_of_setup 1422                  __end_of_putch 1554  
                 ??_LCD_String 000E                        ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0038  
                    ?_ClearLCD 0001      __end_of_init_motor_struct 0BD8          __end_of_classify_data 1544  
                      ??_fputc 000C                     _check_RFID 087A                        ??_fputs 0015  
         __size_of_init_sensor 0018                        ??_setup 000D                        ??_putch 0008  
                ?_moveBackward 001F                     __pbssBANK0 00AF                        ?_LCDout 0001  
           __size_of_init_RFID 001A             __end_of_LCD_String 120A                        ?___wmul 0008  
                      _CAP1CON 000F63                        _DFLTCON 000F60                        ?_strlen 0008  
                   ??_ClearLCD 000C             __size_of_vfpfcnvrt 016A                        _RFIDbuf 00D2  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0023  
             ___lomod@dividend 0008           __size_of_setMotorPWM 0124           __size_of_moveForward 0070  
                    ?_init_LCD 0001                __size_of_LCDout 0078                  moveBackward@i 0023  
           __size_of_turnRight 007E                        _SendLCD 13C4                        __Hparam 0000  
                      _SetLine 1422                        __Lparam 0000          processRFID@latestChar 0003  
                      ___awdiv 0F52                __size_of___wmul 0026                        ___lodiv 0BD8  
                      ___lomod 0D6E                      ?_vfprintf 0068                   __psmallconst 0300  
             initPWM@PWMperiod 0008                        __pcinit 147A                        __ramtop 0300  
                      __ptext0 0340                        __ptext1 0FD6                        __ptext2 12B2  
                      __ptext3 1260                        __ptext4 120A                        __ptext5 0710  
                      __ptext6 0562                        __ptext7 0EBC                        __ptext8 1450  
                      __ptext9 138C              __end_of_init_RFID 14E0               check_RFID@hexBuf 0012  
              __size_of_strlen 002A                        _initPWM 14E0                   __size_of_pad 0096  
                 LCDout@number 0009     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
                  ?_check_RFID 000E                        _sprintf 1260           end_of_initialization 1492  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                      fputc@fp 000A                  __Lmediumconst 0000                        fputs@fp 0013  
                    _RFID_flag 00B1              __end_of_vfpfcnvrt 087A                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                     ??_vfprintf 004D                        strlen@a 000A  
                      strlen@s 0008                     _robot_mode 0056                   _display_RFID 134C  
                    _PORTDbits 000F83              __end_of_turnRight 1054                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
                moveForward@mL 001F                  moveForward@mR 0021                 __end_of_LCDout 10CC  
                    _TXSTAbits 000FAC                     main@motorL 009D                     main@motorR 00A6  
         __end_of_moveBackward 11AC            __size_of_check_RFID 0150                    vfpfcnvrt@ap 0047  
                  vfpfcnvrt@fp 0043                 __end_of___wmul 14C6                    _BAUDCONbits 000FAA  
               __end_of_strlen 147A            start_initialization 147A                ___lodiv@divisor 0010  
              ___lodiv@counter 0020                    __end_of_pad 0F52              __size_of_ClearLCD 001A  
        classify_data@raw_data 0008                       ??_LCDout 0008   __end_of_InterruptHandlerHigh 0040  
                  vfprintf@fmt 006A                       ??___wmul 000C                       ??_strlen 000A  
                  __pbssCOMRAM 004F                  ??_init_sensor 0008                  __pcstackBANK0 0060  
            __size_of_init_LCD 00C8                       ?_SendLCD 000A                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 000E         __size_of_classify_data 0018  
                     ?___lodiv 0008                       ?___lomod 0008             check_RFID@checksum 0023  
            __size_of_vfprintf 0056                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
              ___lomod@divisor 0010                       ?_initPWM 0008                    __smallconst 0300  
              ___lomod@counter 0018                 __size_of_E_TOG 000E                      _init_RFID 14C6  
                ??_setMotorPWM 0018                  ??_moveForward 0023                   ??_check_RFID 0010  
                     ?_sprintf 006E                 __size_of_fputc 00A0                 __size_of_fputs 0038  
               __size_of_setup 002E                 __size_of_putch 0002                check_RFID@byte1 001E  
              check_RFID@byte2 001F                check_RFID@byte3 0020                check_RFID@byte4 0021  
              check_RFID@byte5 0022            __end_of_init_sensor 152C                 ___wmul@product 000C  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D          __size_of_moveBackward 0070  
                  turnRight@mL 001F                    turnRight@mR 0021                       i2u137_40 1334  
                     _PIR1bits 000F9E                       _RCONbits 000FD0                      _vfpfcnvrt 0710  
           __end_of_check_RFID 09CA                      main@i_509 009B              ___wmul@multiplier 0008  
                 setMotorPWM@m 0016                   moveForward@i 0023           _InterruptHandlerHigh 0008  
                     _ClearLCD 14FA                      main@temp2 0080                     ?_init_RFID 0001  
                    _turnRight 0FD6                  ??_processRFID 0004                  _classify_data 152C  
               moveBackward@mL 001F                 moveBackward@mR 0021                   _moveBackward 113C  
          __end_of_setMotorPWM 0AEE            __end_of_moveForward 113C                    check_RFID@i 0024  
                     __Hrparam 0000               __size_of_SendLCD 0030                     vfprintf@ap 006C  
                     __Lrparam 0000                     vfprintf@fp 0068               __size_of_SetLine 002E  
             __size_of___awdiv 0084               __size_of___lodiv 00CE               __size_of___lomod 00AE  
                   ?_vfpfcnvrt 0043          ?_InterruptHandlerHigh 0001                     sprintf@fmt 0070  
             __size_of_initPWM 001A                    _init_sensor 1514                 ?_classify_data 0008  
            check_RFID@dataBuf 000E                     ?_turnRight 001F                       __ptext10 0E1C  
                     __ptext11 1552                       __ptext20 113C                       __ptext12 0D6E  
                     __ptext21 0AEE                       __ptext13 0BD8                       __ptext30 11AC  
                     __ptext22 09CA                       __ptext14 13F4                       __ptext31 13C4  
                     __ptext23 14A0                       __ptext15 1514                       __ptext32 1054  
                     __ptext24 0F52                       __ptext16 14C6                       __ptext33 1544  
                     __ptext25 134C                       __ptext17 0CA6                       __ptext26 14FA  
                     __ptext18 14E0                       __ptext35 1300                       __ptext27 152C  
                     __ptext19 10CC                       __ptext28 087A                       __ptext29 1422  
             __size_of_sprintf 0052                       _init_LCD 0CA6                  __size_of_main 0222  
                __size_of_stop 004E                  __size_of_utoa 01AE            __end_of_processRFID 134C  
                   turnRight@i 0024                       int$flags 0057                       _vfprintf 120A  
                   _LCD_String 11AC                     _INTCONbits 000FF2                    ??_init_RFID 0008  
                  _setMotorPWM 09CA                    _moveForward 10CC                       intlevel2 0000  
                    sprintf@ap 0076                     _OSCCONbits 000FD3     processRFID@position_in_buf 0055  
                  ??_vfpfcnvrt 0049         ??_InterruptHandlerHigh 0005                       sprintf@f 0078  
                     sprintf@s 006E                ??_classify_data 000A                    ??_turnRight 0023  
                  _processRFID 1300             main@movementMillis 0090  
