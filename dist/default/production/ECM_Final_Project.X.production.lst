

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Mar 06 09:23:14 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _DFLTCON	set	3936
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _INTCON2bits	set	4081
   111  0000                     _T0CON	set	4053
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TRISBbits	set	3987
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCONbits	set	4082
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _PDC1H	set	3958
   119  0000                     _PDC1L	set	3959
   120  0000                     _PDC0H	set	3960
   121  0000                     _PDC0L	set	3961
   122                           
   123                           	psect	smallconst
   124  000300                     __psmallconst:
   125                           	opt callstack 0
   126  000300  00                 	db	0
   127  000301                     STR_9:
   128  000301  53                 	db	83	;'S'
   129  000302  54                 	db	84	;'T'
   130  000303  41                 	db	65	;'A'
   131  000304  52                 	db	82	;'R'
   132  000305  54                 	db	84	;'T'
   133  000306  49                 	db	73	;'I'
   134  000307  4E                 	db	78	;'N'
   135  000308  47                 	db	71	;'G'
   136  000309  20                 	db	32
   137  00030A  53                 	db	83	;'S'
   138  00030B  45                 	db	69	;'E'
   139  00030C  41                 	db	65	;'A'
   140  00030D  52                 	db	82	;'R'
   141  00030E  43                 	db	67	;'C'
   142  00030F  48                 	db	72	;'H'
   143  000310  00                 	db	0
   144  000311                     STR_8:
   145  000311  54                 	db	84	;'T'
   146  000312  4F                 	db	79	;'O'
   147  000313  20                 	db	32
   148  000314  53                 	db	83	;'S'
   149  000315  54                 	db	84	;'T'
   150  000316  41                 	db	65	;'A'
   151  000317  52                 	db	82	;'R'
   152  000318  54                 	db	84	;'T'
   153  000319  20                 	db	32
   154  00031A  53                 	db	83	;'S'
   155  00031B  45                 	db	69	;'E'
   156  00031C  41                 	db	65	;'A'
   157  00031D  52                 	db	82	;'R'
   158  00031E  43                 	db	67	;'C'
   159  00031F  48                 	db	72	;'H'
   160  000320  00                 	db	0
   161  000321                     STR_4:
   162  000321  52                 	db	82	;'R'
   163  000322  45                 	db	69	;'E'
   164  000323  53                 	db	83	;'S'
   165  000324  45                 	db	69	;'E'
   166  000325  54                 	db	84	;'T'
   167  000326  54                 	db	84	;'T'
   168  000327  49                 	db	73	;'I'
   169  000328  4E                 	db	78	;'N'
   170  000329  47                 	db	71	;'G'
   171  00032A  20                 	db	32
   172  00032B  52                 	db	82	;'R'
   173  00032C  4F                 	db	79	;'O'
   174  00032D  42                 	db	66	;'B'
   175  00032E  4F                 	db	79	;'O'
   176  00032F  54                 	db	84	;'T'
   177  000330  00                 	db	0
   178  000331                     STR_3:
   179  000331  43                 	db	67	;'C'
   180  000332  48                 	db	72	;'H'
   181  000333  45                 	db	69	;'E'
   182  000334  43                 	db	67	;'C'
   183  000335  4B                 	db	75	;'K'
   184  000336  53                 	db	83	;'S'
   185  000337  55                 	db	85	;'U'
   186  000338  4D                 	db	77	;'M'
   187  000339  20                 	db	32
   188  00033A  46                 	db	70	;'F'
   189  00033B  41                 	db	65	;'A'
   190  00033C  49                 	db	73	;'I'
   191  00033D  4C                 	db	76	;'L'
   192  00033E  45                 	db	69	;'E'
   193  00033F  44                 	db	68	;'D'
   194  000340  00                 	db	0
   195  000341                     STR_2:
   196  000341  43                 	db	67	;'C'
   197  000342  48                 	db	72	;'H'
   198  000343  45                 	db	69	;'E'
   199  000344  43                 	db	67	;'C'
   200  000345  4B                 	db	75	;'K'
   201  000346  53                 	db	83	;'S'
   202  000347  55                 	db	85	;'U'
   203  000348  4D                 	db	77	;'M'
   204  000349  20                 	db	32
   205  00034A  50                 	db	80	;'P'
   206  00034B  41                 	db	65	;'A'
   207  00034C  53                 	db	83	;'S'
   208  00034D  53                 	db	83	;'S'
   209  00034E  45                 	db	69	;'E'
   210  00034F  44                 	db	68	;'D'
   211  000350  00                 	db	0
   212  000351                     STR_1:
   213  000351  43                 	db	67	;'C'
   214  000352  72                 	db	114	;'r'
   215  000353  69                 	db	105	;'i'
   216  000354  74                 	db	116	;'t'
   217  000355  69                 	db	105	;'i'
   218  000356  63                 	db	99	;'c'
   219  000357  61                 	db	97	;'a'
   220  000358  6C                 	db	108	;'l'
   221  000359  20                 	db	32
   222  00035A  45                 	db	69	;'E'
   223  00035B  72                 	db	114	;'r'
   224  00035C  72                 	db	114	;'r'
   225  00035D  6F                 	db	111	;'o'
   226  00035E  72                 	db	114	;'r'
   227  00035F  00                 	db	0
   228  000360                     STR_7:
   229  000360  50                 	db	80	;'P'
   230  000361  52                 	db	82	;'R'
   231  000362  45                 	db	69	;'E'
   232  000363  53                 	db	83	;'S'
   233  000364  53                 	db	83	;'S'
   234  000365  20                 	db	32
   235  000366  42                 	db	66	;'B'
   236  000367  55                 	db	85	;'U'
   237  000368  54                 	db	84	;'T'
   238  000369  54                 	db	84	;'T'
   239  00036A  4F                 	db	79	;'O'
   240  00036B  4E                 	db	78	;'N'
   241  00036C  00                 	db	0
   242  00036D                     STR_5:
   243  00036D  25                 	db	37
   244  00036E  75                 	db	117	;'u'
   245  00036F  00                 	db	0
   246  0000                     
   247                           ; #config settings
   248  000370  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           	psect	cinit
   251  000F84                     __pcinit:
   252                           	opt callstack 0
   253  000F84                     start_initialization:
   254                           	opt callstack 0
   255  000F84                     __initialization:
   256                           	opt callstack 0
   257                           
   258                           ; Clear objects allocated to BANK0 (48 bytes)
   259  000F84  EE00  F060         	lfsr	0,__pbssBANK0
   260  000F88  0E30               	movlw	48
   261  000F8A                     clear_0:
   262  000F8A  6AEE               	clrf	postinc0,c
   263  000F8C  06E8               	decf	wreg,f,c
   264  000F8E  E1FD               	bnz	clear_0
   265                           
   266                           ; Clear objects allocated to COMRAM (13 bytes)
   267  000F90  EE00  F038         	lfsr	0,__pbssCOMRAM
   268  000F94  0E0D               	movlw	13
   269  000F96                     clear_1:
   270  000F96  6AEE               	clrf	postinc0,c
   271  000F98  06E8               	decf	wreg,f,c
   272  000F9A  E1FD               	bnz	clear_1
   273  000F9C                     end_of_initialization:
   274                           	opt callstack 0
   275  000F9C                     __end_of__initialization:
   276                           	opt callstack 0
   277  000F9C  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   278  000F9E  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   279  000FA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   280  000FA2  6EF8               	movwf	tblptru,c
   281  000FA4  0100               	movlb	0
   282  000FA6  EFF3  F002         	goto	_main	;jump to C main() function
   283                           
   284                           	psect	bssCOMRAM
   285  000038                     __pbssCOMRAM:
   286                           	opt callstack 0
   287  000038                     	ds	2
   288  00003A                     	ds	2
   289  00003C                     debug@smoothed_data:
   290                           	opt callstack 0
   291  00003C                     	ds	2
   292  00003E                     processRFID@position_in_buf:
   293                           	opt callstack 0
   294  00003E                     	ds	1
   295  00003F                     _robot_mode:
   296                           	opt callstack 0
   297  00003F                     	ds	1
   298  000040                     _movement_time:
   299                           	opt callstack 0
   300  000040                     	ds	4
   301  000044                     _RFID_flag:
   302                           	opt callstack 0
   303  000044                     	ds	1
   304                           
   305                           	psect	bssBANK0
   306  000060                     __pbssBANK0:
   307                           	opt callstack 0
   308  000060                     	ds	2
   309  000062                     	ds	2
   310  000064                     	ds	32
   311  000084                     _RFIDbuf:
   312                           	opt callstack 0
   313  000084                     	ds	12
   314                           
   315                           	psect	cstackBANK0
   316  000090                     __pcstackBANK0:
   317                           	opt callstack 0
   318  000090                     main@movementMicros:
   319                           	opt callstack 0
   320                           
   321                           ; 4 bytes @ 0x0
   322  000090                     	ds	4
   323  000094                     main@searching_speed:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0x4
   327  000094                     	ds	2
   328  000096                     main@moving_speed:
   329                           	opt callstack 0
   330                           
   331                           ; 2 bytes @ 0x6
   332  000096                     	ds	2
   333  000098                     main@motorL:
   334                           	opt callstack 0
   335                           
   336                           ; 9 bytes @ 0x8
   337  000098                     	ds	9
   338  0000A1                     main@motorR:
   339                           	opt callstack 0
   340                           
   341                           ; 9 bytes @ 0x11
   342  0000A1                     	ds	9
   343                           
   344                           	psect	cstackCOMRAM
   345  000001                     __pcstackCOMRAM:
   346                           	opt callstack 0
   347  000001                     processRFID@RFIDbuf:
   348                           	opt callstack 0
   349                           
   350                           ; 2 bytes @ 0x0
   351  000001                     	ds	2
   352  000003                     processRFID@latestChar:
   353                           	opt callstack 0
   354                           
   355                           ; 1 bytes @ 0x2
   356  000003                     	ds	1
   357  000004                     processRFID@i:
   358                           	opt callstack 0
   359                           
   360                           ; 1 bytes @ 0x3
   361  000004                     	ds	1
   362  000005                     ??_InterruptHandlerHigh:
   363                           
   364                           ; 1 bytes @ 0x4
   365  000005                     	ds	3
   366  000008                     ??_InterruptHandlerLow:
   367                           
   368                           ; 1 bytes @ 0x7
   369  000008                     	ds	3
   370  00000B                     ??_LCDout:
   371  00000B                     ?___wmul:
   372                           	opt callstack 0
   373  00000B                     initPWM@PWMperiod:
   374                           	opt callstack 0
   375  00000B                     classify_data@raw_data:
   376                           	opt callstack 0
   377  00000B                     ___wmul@multiplier:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0xA
   381  00000B                     	ds	1
   382  00000C                     LCDout@number:
   383                           	opt callstack 0
   384                           
   385                           ; 1 bytes @ 0xB
   386  00000C                     	ds	1
   387  00000D                     SendLCD@type:
   388                           	opt callstack 0
   389  00000D                     classify_data@smoothed:
   390                           	opt callstack 0
   391  00000D                     ___wmul@multiplicand:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0xC
   395  00000D                     	ds	1
   396  00000E                     SendLCD@Byte:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0xD
   400  00000E                     	ds	1
   401  00000F                     ??_init_LCD:
   402  00000F                     ??_ClearLCD:
   403  00000F                     ??_classify_data:
   404  00000F                     SetLine@line:
   405                           	opt callstack 0
   406  00000F                     LCD_String@string:
   407                           	opt callstack 0
   408  00000F                     ___wmul@product:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0xE
   412  00000F                     	ds	1
   413  000010                     display_RFID@dataBuf:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0xF
   417  000010                     	ds	1
   418  000011                     ??_waitForInput:
   419  000011                     ?___awdiv:
   420                           	opt callstack 0
   421  000011                     check_RFID@dataBuf:
   422                           	opt callstack 0
   423  000011                     ___awdiv@dividend:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x10
   427  000011                     	ds	1
   428  000012                     display_RFID@i:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x11
   432  000012                     	ds	1
   433  000013                     ??_check_RFID:
   434  000013                     waitForInput@i:
   435                           	opt callstack 0
   436  000013                     ___awdiv@divisor:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x12
   440  000013                     	ds	2
   441  000015                     ___awdiv@counter:
   442                           	opt callstack 0
   443  000015                     check_RFID@hexBuf:
   444                           	opt callstack 0
   445                           
   446                           ; 12 bytes @ 0x14
   447  000015                     	ds	1
   448  000016                     ___awdiv@sign:
   449                           	opt callstack 0
   450                           
   451                           ; 1 bytes @ 0x15
   452  000016                     	ds	1
   453  000017                     classify_data@previous:
   454                           	opt callstack 0
   455  000017                     ___awdiv@quotient:
   456                           	opt callstack 0
   457                           
   458                           ; 2 bytes @ 0x16
   459  000017                     	ds	2
   460  000019                     setMotorPWM@m:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x18
   464  000019                     	ds	2
   465  00001B                     ??_setMotorPWM:
   466                           
   467                           ; 1 bytes @ 0x1A
   468  00001B                     	ds	5
   469  000020                     setMotorPWM@PWMduty:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x1F
   473  000020                     	ds	1
   474  000021                     check_RFID@byte1:
   475                           	opt callstack 0
   476                           
   477                           ; 1 bytes @ 0x20
   478  000021                     	ds	1
   479  000022                     check_RFID@byte2:
   480                           	opt callstack 0
   481  000022                     stop@mL:
   482                           	opt callstack 0
   483  000022                     turnRight@mL:
   484                           	opt callstack 0
   485  000022                     moveForward@mL:
   486                           	opt callstack 0
   487  000022                     moveBackward@mL:
   488                           	opt callstack 0
   489  000022                     init_motor_struct@mL:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x21
   493  000022                     	ds	1
   494  000023                     check_RFID@byte3:
   495                           	opt callstack 0
   496                           
   497                           ; 1 bytes @ 0x22
   498  000023                     	ds	1
   499  000024                     check_RFID@byte4:
   500                           	opt callstack 0
   501  000024                     stop@mR:
   502                           	opt callstack 0
   503  000024                     turnRight@mR:
   504                           	opt callstack 0
   505  000024                     moveForward@mR:
   506                           	opt callstack 0
   507  000024                     moveBackward@mR:
   508                           	opt callstack 0
   509  000024                     init_motor_struct@mR:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x23
   513  000024                     	ds	1
   514  000025                     check_RFID@byte5:
   515                           	opt callstack 0
   516                           
   517                           ; 1 bytes @ 0x24
   518  000025                     	ds	1
   519  000026                     check_RFID@checksum:
   520                           	opt callstack 0
   521  000026                     stop@initial_speed:
   522                           	opt callstack 0
   523  000026                     turnRight@max_power:
   524                           	opt callstack 0
   525  000026                     moveForward@max_power:
   526                           	opt callstack 0
   527  000026                     moveBackward@max_power:
   528                           	opt callstack 0
   529                           
   530                           ; 2 bytes @ 0x25
   531  000026                     	ds	1
   532  000027                     check_RFID@i:
   533                           	opt callstack 0
   534                           
   535                           ; 2 bytes @ 0x26
   536  000027                     	ds	1
   537  000028                     ??_stop:
   538  000028                     ??_turnRight:
   539  000028                     ??_moveForward:
   540  000028                     ??_moveBackward:
   541                           
   542                           ; 1 bytes @ 0x27
   543  000028                     	ds	1
   544  000029                     stop@i:
   545                           	opt callstack 0
   546  000029                     turnRight@i:
   547                           	opt callstack 0
   548  000029                     moveForward@i:
   549                           	opt callstack 0
   550  000029                     moveBackward@i:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x28
   554  000029                     	ds	2
   555  00002B                     scanForBeacon@mL:
   556                           	opt callstack 0
   557  00002B                     moveToBeacon@mL:
   558                           	opt callstack 0
   559  00002B                     returnHome@mL:
   560                           	opt callstack 0
   561  00002B                     stopAndDisplay@mL:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x2A
   565  00002B                     	ds	2
   566  00002D                     scanForBeacon@mR:
   567                           	opt callstack 0
   568  00002D                     moveToBeacon@mR:
   569                           	opt callstack 0
   570  00002D                     returnHome@mR:
   571                           	opt callstack 0
   572  00002D                     stopAndDisplay@mR:
   573                           	opt callstack 0
   574                           
   575                           ; 2 bytes @ 0x2C
   576  00002D                     	ds	2
   577  00002F                     scanForBeacon@speed:
   578                           	opt callstack 0
   579  00002F                     moveToBeacon@speed:
   580                           	opt callstack 0
   581  00002F                     returnHome@speed:
   582                           	opt callstack 0
   583  00002F                     stopAndDisplay@speed:
   584                           	opt callstack 0
   585                           
   586                           ; 2 bytes @ 0x2E
   587  00002F                     	ds	2
   588  000031                     ??_scanForBeacon:
   589  000031                     ??_stopAndDisplay:
   590  000031                     moveToBeacon@micros:
   591                           	opt callstack 0
   592  000031                     returnHome@time:
   593                           	opt callstack 0
   594                           
   595                           ; 2 bytes @ 0x30
   596  000031                     	ds	2
   597  000033                     scanForBeacon@raw_data:
   598                           	opt callstack 0
   599  000033                     moveToBeacon@RFID_buffer:
   600                           	opt callstack 0
   601  000033                     stopAndDisplay@i:
   602                           	opt callstack 0
   603                           
   604                           ; 2 bytes @ 0x32
   605  000033                     	ds	2
   606  000035                     scanForBeacon@beacon_location:
   607                           	opt callstack 0
   608  000035                     moveToBeacon@exit_flag:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0x34
   612  000035                     	ds	1
   613  000036                     scanForBeacon@smoothed_data:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x35
   617  000036                     	ds	1
   618  000037                     
   619                           ; 1 bytes @ 0x36
   620  000037                     	ds	1
   621  000038                     
   622                           ; 1 bytes @ 0x37
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 115 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  motorR          9   17[BANK0 ] struct DC_motor
   633 ;;  motorL          9    8[BANK0 ] struct DC_motor
   634 ;;  movementMicr    4    0[BANK0 ] unsigned long 
   635 ;;  moving_speed    2    6[BANK0 ] int 
   636 ;;  searching_sp    2    4[BANK0 ] int 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   646 ;;      Params:         0       0       0       0
   647 ;;      Locals:         0      26       0       0
   648 ;;      Temps:          0       0       0       0
   649 ;;      Totals:         0      26       0       0
   650 ;;Total ram usage:       26 bytes
   651 ;; Hardware stack levels required when called:    9
   652 ;; This function calls:
   653 ;;		_LCD_String
   654 ;;		_init_motor_struct
   655 ;;		_moveToBeacon
   656 ;;		_returnHome
   657 ;;		_scanForBeacon
   658 ;;		_setup
   659 ;;		_stopAndDisplay
   660 ;;		_waitForInput
   661 ;; This function is called by:
   662 ;;		Startup code after reset
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           	psect	text0
   667  0005E6                     __ptext0:
   668                           	opt callstack 0
   669  0005E6                     _main:
   670                           	opt callstack 22
   671                           
   672                           ;main.c: 118:   setup();
   673                           
   674                           ;incstack = 0
   675  0005E6  EC44  F007         	call	_setup	;wreg free
   676                           
   677                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   678  0005EA  0E98               	movlw	low main@motorL
   679  0005EC  6E22               	movwf	init_motor_struct@mL,c
   680  0005EE  0E00               	movlw	high main@motorL
   681  0005F0  6E23               	movwf	init_motor_struct@mL+1,c
   682  0005F2  0EA1               	movlw	low main@motorR
   683  0005F4  6E24               	movwf	init_motor_struct@mR,c
   684  0005F6  0E00               	movlw	high main@motorR
   685  0005F8  6E25               	movwf	init_motor_struct@mR+1,c
   686  0005FA  EC74  F003         	call	_init_motor_struct	;wreg free
   687                           
   688                           ;main.c: 125:   int searching_speed = 75;
   689  0005FE  0E00               	movlw	0
   690  000600  0100               	movlb	0	; () banked
   691  000602  6F95               	movwf	(main@searching_speed+1)& (0+255),b
   692  000604  0E4B               	movlw	75
   693  000606  6F94               	movwf	main@searching_speed& (0+255),b
   694                           
   695                           ; BSR set to: 0
   696                           ;main.c: 126:   int moving_speed = 75;
   697  000608  0E00               	movlw	0
   698  00060A  6F97               	movwf	(main@moving_speed+1)& (0+255),b
   699  00060C  0E4B               	movlw	75
   700  00060E  6F96               	movwf	main@moving_speed& (0+255),b
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 128:   unsigned long movementMicros=0;
   704  000610  0E00               	movlw	0
   705  000612  6F90               	movwf	main@movementMicros& (0+255),b
   706  000614  0E00               	movlw	0
   707  000616  6F91               	movwf	(main@movementMicros+1)& (0+255),b
   708  000618  0E00               	movlw	0
   709  00061A  6F92               	movwf	(main@movementMicros+2)& (0+255),b
   710  00061C  0E00               	movlw	0
   711  00061E  6F93               	movwf	(main@movementMicros+3)& (0+255),b
   712                           
   713                           ; BSR set to: 0
   714                           ;main.c: 130:   waitForInput();
   715  000620  EC99  F005         	call	_waitForInput	;wreg free
   716  000624                     l2523:
   717                           
   718                           ;main.c: 134:   {;main.c: 136:       if(robot_mode == 0)
   719  000624  503F               	movf	_robot_mode,w,c	;volatile
   720  000626  A4D8               	btfss	status,2,c
   721  000628  D00F               	goto	l2527
   722                           
   723                           ;main.c: 137:       {;main.c: 138:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed);
   724  00062A  0E98               	movlw	low main@motorL
   725  00062C  6E2B               	movwf	scanForBeacon@mL,c
   726  00062E  0E00               	movlw	high main@motorL
   727  000630  6E2C               	movwf	scanForBeacon@mL+1,c
   728  000632  0EA1               	movlw	low main@motorR
   729  000634  6E2D               	movwf	scanForBeacon@mR,c
   730  000636  0E00               	movlw	high main@motorR
   731  000638  6E2E               	movwf	scanForBeacon@mR+1,c
   732  00063A  C094  F02F         	movff	main@searching_speed,scanForBeacon@speed
   733  00063E  C095  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   734  000642  EC4A  F006         	call	_scanForBeacon	;wreg free
   735  000646  D047               	goto	L3
   736  000648                     l2527:
   737  000648  043F               	decf	_robot_mode,w,c	;volatile
   738  00064A  A4D8               	btfss	status,2,c
   739  00064C  D01B               	goto	l2531
   740                           
   741                           ;main.c: 144:       {;main.c: 145:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   742  00064E  0E98               	movlw	low main@motorL
   743  000650  6E2B               	movwf	moveToBeacon@mL,c
   744  000652  0E00               	movlw	high main@motorL
   745  000654  6E2C               	movwf	moveToBeacon@mL+1,c
   746  000656  0EA1               	movlw	low main@motorR
   747  000658  6E2D               	movwf	moveToBeacon@mR,c
   748  00065A  0E00               	movlw	high main@motorR
   749  00065C  6E2E               	movwf	moveToBeacon@mR+1,c
   750  00065E  C096  F02F         	movff	main@moving_speed,moveToBeacon@speed
   751  000662  C097  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   752  000666  0E90               	movlw	low main@movementMicros
   753  000668  6E31               	movwf	moveToBeacon@micros,c
   754  00066A  0E00               	movlw	high main@movementMicros
   755  00066C  6E32               	movwf	moveToBeacon@micros+1,c
   756  00066E  0E84               	movlw	low _RFIDbuf
   757  000670  6E33               	movwf	moveToBeacon@RFID_buffer,c
   758  000672  0E00               	movlw	high _RFIDbuf
   759  000674  6E34               	movwf	moveToBeacon@RFID_buffer+1,c
   760  000676  0E44               	movlw	low _RFID_flag
   761  000678  6E35               	movwf	moveToBeacon@exit_flag,c
   762  00067A  0E00               	movlw	high _RFID_flag
   763  00067C  6E36               	movwf	moveToBeacon@exit_flag+1,c
   764  00067E  EC01  F007         	call	_moveToBeacon	;wreg free
   765  000682  D029               	goto	L3
   766  000684                     l2531:
   767  000684  0E02               	movlw	2
   768  000686  183F               	xorwf	_robot_mode,w,c	;volatile
   769  000688  A4D8               	btfss	status,2,c
   770  00068A  D013               	goto	l2535
   771                           
   772                           ;main.c: 151:       {;main.c: 152:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   773  00068C  0E98               	movlw	low main@motorL
   774  00068E  6E2B               	movwf	returnHome@mL,c
   775  000690  0E00               	movlw	high main@motorL
   776  000692  6E2C               	movwf	returnHome@mL+1,c
   777  000694  0EA1               	movlw	low main@motorR
   778  000696  6E2D               	movwf	returnHome@mR,c
   779  000698  0E00               	movlw	high main@motorR
   780  00069A  6E2E               	movwf	returnHome@mR+1,c
   781  00069C  C096  F02F         	movff	main@moving_speed,returnHome@speed
   782  0006A0  C097  F030         	movff	main@moving_speed+1,returnHome@speed+1
   783  0006A4  0E40               	movlw	low _movement_time
   784  0006A6  6E31               	movwf	returnHome@time,c
   785  0006A8  0E00               	movlw	high _movement_time
   786  0006AA  6E32               	movwf	returnHome@time+1,c
   787  0006AC  EC5F  F007         	call	_returnHome	;wreg free
   788  0006B0  D012               	goto	L3
   789  0006B2                     l2535:
   790  0006B2  0E03               	movlw	3
   791  0006B4  183F               	xorwf	_robot_mode,w,c	;volatile
   792  0006B6  A4D8               	btfss	status,2,c
   793  0006B8  D010               	goto	l2539
   794                           
   795                           ;main.c: 158:       {;main.c: 159:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed);
   796  0006BA  0E98               	movlw	low main@motorL
   797  0006BC  6E2B               	movwf	stopAndDisplay@mL,c
   798  0006BE  0E00               	movlw	high main@motorL
   799  0006C0  6E2C               	movwf	stopAndDisplay@mL+1,c
   800  0006C2  0EA1               	movlw	low main@motorR
   801  0006C4  6E2D               	movwf	stopAndDisplay@mR,c
   802  0006C6  0E00               	movlw	high main@motorR
   803  0006C8  6E2E               	movwf	stopAndDisplay@mR+1,c
   804  0006CA  C096  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   805  0006CE  C097  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   806  0006D2  EC13  F006         	call	_stopAndDisplay	;wreg free
   807  0006D6                     L3:
   808  0006D6  6E3F               	movwf	_robot_mode,c	;volatile
   809                           
   810                           ;main.c: 160:       }
   811  0006D8  D7A5               	goto	l2523
   812  0006DA                     l2539:
   813                           
   814                           ;main.c: 163:       {;main.c: 164:           LCD_String("Critical Error");
   815  0006DA  0E51               	movlw	low STR_1
   816  0006DC  6E0F               	movwf	LCD_String@string,c
   817  0006DE  0E03               	movlw	high STR_1
   818  0006E0  6E10               	movwf	LCD_String@string+1,c
   819  0006E2  EC7E  F006         	call	_LCD_String	;wreg free
   820  0006E6  D79E               	goto	l2523
   821  0006E8                     __end_of_main:
   822                           	opt callstack 0
   823                           
   824 ;; *************** function _waitForInput *****************
   825 ;; Defined at:
   826 ;;		line 119 in file "subroutines.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  i               2   18[COMRAM] int 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   840 ;;      Params:         0       0       0       0
   841 ;;      Locals:         2       0       0       0
   842 ;;      Temps:          2       0       0       0
   843 ;;      Totals:         4       0       0       0
   844 ;;Total ram usage:        4 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    7
   847 ;; This function calls:
   848 ;;		_ClearLCD
   849 ;;		_LCD_String
   850 ;;		_SetLine
   851 ;; This function is called by:
   852 ;;		_main
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text1
   857  000B32                     __ptext1:
   858                           	opt callstack 0
   859  000B32                     _waitForInput:
   860                           	opt callstack 23
   861                           
   862                           ;subroutines.c: 122:     ClearLCD();
   863                           
   864                           ;incstack = 0
   865  000B32  EC10  F008         	call	_ClearLCD	;wreg free
   866                           
   867                           ;subroutines.c: 123:     SetLine(1);
   868  000B36  0E01               	movlw	1
   869  000B38  ECAB  F007         	call	_SetLine
   870                           
   871                           ;subroutines.c: 124:     LCD_String("PRESS BUTTON");
   872  000B3C  0E60               	movlw	low STR_7
   873  000B3E  6E0F               	movwf	LCD_String@string,c
   874  000B40  0E03               	movlw	high STR_7
   875  000B42  6E10               	movwf	LCD_String@string+1,c
   876  000B44  EC7E  F006         	call	_LCD_String	;wreg free
   877                           
   878                           ;subroutines.c: 125:     SetLine(2);
   879  000B48  0E02               	movlw	2
   880  000B4A  ECAB  F007         	call	_SetLine
   881                           
   882                           ;subroutines.c: 126:     LCD_String("TO START SEARCH");
   883  000B4E  0E11               	movlw	low STR_8
   884  000B50  6E0F               	movwf	LCD_String@string,c
   885  000B52  0E03               	movlw	high STR_8
   886  000B54  6E10               	movwf	LCD_String@string+1,c
   887  000B56  EC7E  F006         	call	_LCD_String	;wreg free
   888  000B5A                     l337:
   889  000B5A  A483               	btfss	3971,2,c	;volatile
   890  000B5C  D7FE               	goto	l337
   891                           
   892                           ;subroutines.c: 132:     ClearLCD();
   893  000B5E  EC10  F008         	call	_ClearLCD	;wreg free
   894                           
   895                           ;subroutines.c: 133:     SetLine(1);
   896  000B62  0E01               	movlw	1
   897  000B64  ECAB  F007         	call	_SetLine
   898                           
   899                           ;subroutines.c: 134:     LCD_String("STARTING SEARCH");
   900  000B68  0E01               	movlw	low STR_9
   901  000B6A  6E0F               	movwf	LCD_String@string,c
   902  000B6C  0E03               	movlw	high STR_9
   903  000B6E  6E10               	movwf	LCD_String@string+1,c
   904  000B70  EC7E  F006         	call	_LCD_String	;wreg free
   905                           
   906                           ;subroutines.c: 135:     for(int i=0; i<10;i++)
   907  000B74  0E00               	movlw	0
   908  000B76  6E14               	movwf	waitForInput@i+1,c
   909  000B78  0E00               	movlw	0
   910  000B7A  6E13               	movwf	waitForInput@i,c
   911  000B7C                     l2449:
   912                           
   913                           ;subroutines.c: 136:     {;subroutines.c: 137:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   914  000B7C  0E02               	movlw	2
   915  000B7E  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   916  000B80  0E04               	movlw	4
   917  000B82  6E11               	movwf	??_waitForInput& (0+255),c
   918  000B84  0EBA               	movlw	186
   919  000B86                     u1777:
   920  000B86  2EE8               	decfsz	wreg,f,c
   921  000B88  D7FE               	bra	u1777
   922  000B8A  2E11               	decfsz	??_waitForInput& (0+255),f,c
   923  000B8C  D7FC               	bra	u1777
   924  000B8E  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
   925  000B90  D7FA               	bra	u1777
   926  000B92  D000               	nop2	
   927                           
   928                           ;subroutines.c: 138:     }
   929  000B94  4A13               	infsnz	waitForInput@i,f,c
   930  000B96  2A14               	incf	waitForInput@i+1,f,c
   931  000B98  BE14               	btfsc	waitForInput@i+1,7,c
   932  000B9A  D7F0               	goto	l2449
   933  000B9C  5014               	movf	waitForInput@i+1,w,c
   934  000B9E  E104               	bnz	u1670
   935  000BA0  0E0A               	movlw	10
   936  000BA2  5C13               	subwf	waitForInput@i,w,c
   937  000BA4  A0D8               	btfss	status,0,c
   938  000BA6  D7EA               	goto	l2449
   939  000BA8                     u1670:
   940                           
   941                           ;subroutines.c: 139:     ClearLCD();
   942  000BA8  EC10  F008         	call	_ClearLCD	;wreg free
   943  000BAC  0012               	return		;funcret
   944  000BAE                     __end_of_waitForInput:
   945                           	opt callstack 0
   946                           
   947 ;; *************** function _stopAndDisplay *****************
   948 ;; Defined at:
   949 ;;		line 70 in file "subroutines.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  mL              2   42[COMRAM] PTR struct DC_motor
   952 ;;		 -> main@motorL(9), 
   953 ;;  mR              2   44[COMRAM] PTR struct DC_motor
   954 ;;		 -> main@motorR(9), 
   955 ;;  speed           2   46[COMRAM] int 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  i               2   50[COMRAM] int 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      unsigned char 
   960 ;; Registers used:
   961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   967 ;;      Params:         6       0       0       0
   968 ;;      Locals:         2       0       0       0
   969 ;;      Temps:          2       0       0       0
   970 ;;      Totals:        10       0       0       0
   971 ;;Total ram usage:       10 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    7
   974 ;; This function calls:
   975 ;;		_ClearLCD
   976 ;;		_LCD_String
   977 ;;		_stop
   978 ;; This function is called by:
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text2
   984  000C26                     __ptext2:
   985                           	opt callstack 0
   986  000C26                     _stopAndDisplay:
   987                           	opt callstack 23
   988                           
   989                           ;subroutines.c: 70: volatile char stopAndDisplay(struct DC_motor *mL, struct DC_motor *m
      +                          R, int speed);subroutines.c: 71: {;subroutines.c: 72:     stop(mL, mR,speed);
   990                           
   991                           ;incstack = 0
   992  000C26  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
   993  000C2A  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
   994  000C2E  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
   995  000C32  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
   996  000C36  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
   997  000C3A  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
   998  000C3E  ECAD  F006         	call	_stop	;wreg free
   999  000C42  D025               	goto	l2509
  1000  000C44                     l2493:
  1001                           
  1002                           ;subroutines.c: 77:             {;subroutines.c: 78:                 ClearLCD();
  1003  000C44  EC10  F008         	call	_ClearLCD	;wreg free
  1004                           
  1005                           ;subroutines.c: 79:                 LCD_String("RESETTING ROBOT");
  1006  000C48  0E21               	movlw	low STR_4
  1007  000C4A  6E0F               	movwf	LCD_String@string,c
  1008  000C4C  0E03               	movlw	high STR_4
  1009  000C4E  6E10               	movwf	LCD_String@string+1,c
  1010  000C50  EC7E  F006         	call	_LCD_String	;wreg free
  1011                           
  1012                           ;subroutines.c: 80:                 for(int i=0; i<10;i++)
  1013  000C54  0E00               	movlw	0
  1014  000C56  6E34               	movwf	stopAndDisplay@i+1,c
  1015  000C58  0E00               	movlw	0
  1016  000C5A  6E33               	movwf	stopAndDisplay@i,c
  1017  000C5C                     l2503:
  1018                           
  1019                           ;subroutines.c: 81:                 {;subroutines.c: 82:                     _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
  1020  000C5C  0E02               	movlw	2
  1021  000C5E  6E32               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1022  000C60  0E04               	movlw	4
  1023  000C62  6E31               	movwf	??_stopAndDisplay& (0+255),c
  1024  000C64  0EBA               	movlw	186
  1025  000C66                     u1787:
  1026  000C66  2EE8               	decfsz	wreg,f,c
  1027  000C68  D7FE               	bra	u1787
  1028  000C6A  2E31               	decfsz	??_stopAndDisplay& (0+255),f,c
  1029  000C6C  D7FC               	bra	u1787
  1030  000C6E  2E32               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1031  000C70  D7FA               	bra	u1787
  1032  000C72  D000               	nop2	
  1033                           
  1034                           ;subroutines.c: 83:                 }
  1035  000C74  4A33               	infsnz	stopAndDisplay@i,f,c
  1036  000C76  2A34               	incf	stopAndDisplay@i+1,f,c
  1037  000C78  BE34               	btfsc	stopAndDisplay@i+1,7,c
  1038  000C7A  D7F0               	goto	l2503
  1039  000C7C  5034               	movf	stopAndDisplay@i+1,w,c
  1040  000C7E  E104               	bnz	u1710
  1041  000C80  0E0A               	movlw	10
  1042  000C82  5C33               	subwf	stopAndDisplay@i,w,c
  1043  000C84  A0D8               	btfss	status,0,c
  1044  000C86  D7EA               	goto	l2503
  1045  000C88                     u1710:
  1046                           
  1047                           ;subroutines.c: 84:                 ClearLCD();
  1048  000C88  EC10  F008         	call	_ClearLCD	;wreg free
  1049  000C8C  00FF               	reset		;# 
  1050  000C8E                     l2509:
  1051                           
  1052                           ;subroutines.c: 76:             while(PORTDbits.RD2 == 1)
  1053  000C8E  A483               	btfss	3971,2,c	;volatile
  1054  000C90  D7FE               	goto	l2509
  1055  000C92  D7D8               	goto	l2493
  1056  000C94                     __end_of_stopAndDisplay:
  1057                           	opt callstack 0
  1058                           
  1059 ;; *************** function _stop *****************
  1060 ;; Defined at:
  1061 ;;		line 40 in file "dc_motor.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1064 ;;		 -> main@motorL(9), 
  1065 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1066 ;;		 -> main@motorR(9), 
  1067 ;;  initial_spee    2   37[COMRAM] int 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  i               2   40[COMRAM] int 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1079 ;;      Params:         6       0       0       0
  1080 ;;      Locals:         2       0       0       0
  1081 ;;      Temps:          1       0       0       0
  1082 ;;      Totals:         9       0       0       0
  1083 ;;Total ram usage:        9 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:    5
  1086 ;; This function calls:
  1087 ;;		_setMotorPWM
  1088 ;; This function is called by:
  1089 ;;		_stopAndDisplay
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text3
  1094  000D5A                     __ptext3:
  1095                           	opt callstack 0
  1096  000D5A                     _stop:
  1097                           	opt callstack 24
  1098                           
  1099                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1100                           
  1101                           ;incstack = 0
  1102  000D5A  C026  F029         	movff	stop@initial_speed,stop@i
  1103  000D5E  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  1104  000D62                     l2269:
  1105  000D62  BE2A               	btfsc	stop@i+1,7,c
  1106  000D64  0012               	return	
  1107  000D66  502A               	movf	stop@i+1,w,c
  1108  000D68  E103               	bnz	l2273
  1109  000D6A  0429               	decf	stop@i,w,c
  1110  000D6C  A0D8               	btfss	status,0,c
  1111  000D6E  0012               	return	
  1112  000D70                     l2273:
  1113                           
  1114                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1115  000D70  C022  FFD9         	movff	stop@mL,fsr2l
  1116  000D74  C023  FFDA         	movff	stop@mL+1,fsr2h
  1117  000D78  C029  FFDF         	movff	stop@i,indf2
  1118                           
  1119                           ;dc_motor.c: 45:         mR->power = i;
  1120  000D7C  C024  FFD9         	movff	stop@mR,fsr2l
  1121  000D80  C025  FFDA         	movff	stop@mR+1,fsr2h
  1122  000D84  C029  FFDF         	movff	stop@i,indf2
  1123                           
  1124                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1125  000D88  C022  F019         	movff	stop@mL,setMotorPWM@m
  1126  000D8C  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  1127  000D90  EC61  F002         	call	_setMotorPWM	;wreg free
  1128                           
  1129                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1130  000D94  C024  F019         	movff	stop@mR,setMotorPWM@m
  1131  000D98  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  1132  000D9C  EC61  F002         	call	_setMotorPWM	;wreg free
  1133                           
  1134                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1135  000DA0  0E03               	movlw	3
  1136  000DA2  6E28               	movwf	??_stop& (0+255),c
  1137  000DA4  0E98               	movlw	152
  1138  000DA6                     u1797:
  1139  000DA6  2EE8               	decfsz	wreg,f,c
  1140  000DA8  D7FE               	bra	u1797
  1141  000DAA  2E28               	decfsz	??_stop& (0+255),f,c
  1142  000DAC  D7FC               	bra	u1797
  1143                           
  1144                           ;dc_motor.c: 49:     }
  1145  000DAE  0629               	decf	stop@i,f,c
  1146  000DB0  A0D8               	btfss	status,0,c
  1147  000DB2  062A               	decf	stop@i+1,f,c
  1148  000DB4  D7D6               	goto	l2269
  1149  000DB6                     __end_of_stop:
  1150                           	opt callstack 0
  1151                           
  1152 ;; *************** function _setup *****************
  1153 ;; Defined at:
  1154 ;;		line 45 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1168 ;;      Params:         0       0       0       0
  1169 ;;      Locals:         0       0       0       0
  1170 ;;      Temps:          0       0       0       0
  1171 ;;      Totals:         0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    7
  1175 ;; This function calls:
  1176 ;;		_initPWM
  1177 ;;		_init_LCD
  1178 ;;		_init_RFID
  1179 ;;		_init_sensor
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text4
  1186  000E88                     __ptext4:
  1187                           	opt callstack 0
  1188  000E88                     _setup:
  1189                           	opt callstack 23
  1190                           
  1191                           ;main.c: 48:     OSCCON = 0x72;
  1192                           
  1193                           ;incstack = 0
  1194  000E88  0E72               	movlw	114
  1195  000E8A  6ED3               	movwf	4051,c	;volatile
  1196  000E8C                     l55:
  1197  000E8C  A4D3               	btfss	4051,2,c	;volatile
  1198  000E8E  D7FE               	goto	l55
  1199                           
  1200                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1201  000E90  8EF2               	bsf	4082,7,c	;volatile
  1202                           
  1203                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1204  000E92  8CF2               	bsf	4082,6,c	;volatile
  1205                           
  1206                           ;main.c: 52:     RCONbits.IPEN=1;
  1207  000E94  8ED0               	bsf	4048,7,c	;volatile
  1208                           
  1209                           ;main.c: 55:     init_LCD();
  1210  000E96  ECE9  F003         	call	_init_LCD	;wreg free
  1211                           
  1212                           ;main.c: 56:     init_RFID();
  1213  000E9A  ECF6  F007         	call	_init_RFID	;wreg free
  1214                           
  1215                           ;main.c: 57:     init_sensor();
  1216  000E9E  ECE8  F007         	call	_init_sensor	;wreg free
  1217                           
  1218                           ;main.c: 58:     initPWM(199);
  1219  000EA2  0E00               	movlw	0
  1220  000EA4  6E0C               	movwf	initPWM@PWMperiod+1,c
  1221  000EA6  0EC7               	movlw	199
  1222  000EA8  6E0B               	movwf	initPWM@PWMperiod,c
  1223  000EAA  EC03  F008         	call	_initPWM	;wreg free
  1224                           
  1225                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1226  000EAE  9093               	bcf	3987,0,c	;volatile
  1227                           
  1228                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1229  000EB0  9493               	bcf	3987,2,c	;volatile
  1230                           
  1231                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1232  000EB2  8495               	bsf	3989,2,c	;volatile
  1233                           
  1234                           ;main.c: 66:     T0CON = 0b11001000;
  1235  000EB4  0EC8               	movlw	200
  1236  000EB6  6ED5               	movwf	4053,c	;volatile
  1237                           
  1238                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1239  000EB8  8AF2               	bsf	4082,5,c	;volatile
  1240                           
  1241                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1242  000EBA  94F1               	bcf	4081,2,c	;volatile
  1243  000EBC  0012               	return		;funcret
  1244  000EBE                     __end_of_setup:
  1245                           	opt callstack 0
  1246                           
  1247 ;; *************** function _init_sensor *****************
  1248 ;; Defined at:
  1249 ;;		line 14 in file "signal_processing.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;		None
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  throwaway       2    0        unsigned int 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      void 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1263 ;;      Params:         0       0       0       0
  1264 ;;      Locals:         2       0       0       0
  1265 ;;      Temps:          0       0       0       0
  1266 ;;      Totals:         2       0       0       0
  1267 ;;Total ram usage:        2 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    3
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_setup
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           	psect	text5
  1278  000FD0                     __ptext5:
  1279                           	opt callstack 0
  1280  000FD0                     _init_sensor:
  1281                           	opt callstack 26
  1282                           
  1283                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1284                           
  1285                           ;incstack = 0
  1286  000FD0  0E01               	movlw	1
  1287  000FD2  6EB7               	movwf	4023,c	;volatile
  1288                           
  1289                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1290  000FD4  8492               	bsf	3986,2,c	;volatile
  1291                           
  1292                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1293  000FD6  0E00               	movlw	0
  1294  000FD8  6EB8               	movwf	4024,c	;volatile
  1295                           
  1296                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1297  000FDA  0E00               	movlw	0
  1298  000FDC  6EB9               	movwf	4025,c	;volatile
  1299                           
  1300                           ;signal_processing.c: 23:     DFLTCON = 0b00001000;
  1301  000FDE  0E08               	movlw	8
  1302  000FE0  6E60               	movwf	3936,c	;volatile
  1303                           
  1304                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1305  000FE2  0E47               	movlw	71
  1306  000FE4  6E63               	movwf	3939,c	;volatile
  1307  000FE6  5069               	movf	3945,w,c	;volatile
  1308  000FE8  5068               	movf	3944,w,c	;volatile
  1309  000FEA  0012               	return		;funcret
  1310  000FEC                     __end_of_init_sensor:
  1311                           	opt callstack 0
  1312                           
  1313 ;; *************** function _init_RFID *****************
  1314 ;; Defined at:
  1315 ;;		line 13 in file "RFID.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1329 ;;      Params:         0       0       0       0
  1330 ;;      Locals:         0       0       0       0
  1331 ;;      Temps:          0       0       0       0
  1332 ;;      Totals:         0       0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    3
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_setup
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text6
  1344  000FEC                     __ptext6:
  1345                           	opt callstack 0
  1346  000FEC                     _init_RFID:
  1347                           	opt callstack 26
  1348                           
  1349                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1350                           
  1351                           ;incstack = 0
  1352  000FEC  8E94               	bsf	3988,7,c	;volatile
  1353                           
  1354                           ;RFID.c: 19:     SPBRG = 203;
  1355  000FEE  0ECB               	movlw	203
  1356  000FF0  6EAF               	movwf	4015,c	;volatile
  1357                           
  1358                           ;RFID.c: 20:     SPBRGH = 0;
  1359  000FF2  0E00               	movlw	0
  1360  000FF4  6EB0               	movwf	4016,c	;volatile
  1361                           
  1362                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1363  000FF6  86AA               	bsf	4010,3,c	;volatile
  1364                           
  1365                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1366  000FF8  84AC               	bsf	4012,2,c	;volatile
  1367                           
  1368                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1369  000FFA  88AB               	bsf	4011,4,c	;volatile
  1370                           
  1371                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1372  000FFC  8EAB               	bsf	4011,7,c	;volatile
  1373                           
  1374                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1375  000FFE  8AAC               	bsf	4012,5,c	;volatile
  1376                           
  1377                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1378  001000  8A9D               	bsf	3997,5,c	;volatile
  1379                           
  1380                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1381  001002  8A9F               	bsf	3999,5,c	;volatile
  1382  001004  0012               	return		;funcret
  1383  001006                     __end_of_init_RFID:
  1384                           	opt callstack 0
  1385                           
  1386 ;; *************** function _init_LCD *****************
  1387 ;; Defined at:
  1388 ;;		line 56 in file "LCDIO.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, status,2, status,0, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1402 ;;      Params:         0       0       0       0
  1403 ;;      Locals:         0       0       0       0
  1404 ;;      Temps:          1       0       0       0
  1405 ;;      Totals:         1       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    6
  1409 ;; This function calls:
  1410 ;;		_LCDout
  1411 ;;		_SendLCD
  1412 ;; This function is called by:
  1413 ;;		_setup
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text7
  1418  0007D2                     __ptext7:
  1419                           	opt callstack 0
  1420  0007D2                     _init_LCD:
  1421                           	opt callstack 23
  1422                           
  1423                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1424                           
  1425                           ;incstack = 0
  1426  0007D2  9094               	bcf	3988,0,c	;volatile
  1427                           
  1428                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1429  0007D4  9E92               	bcf	3986,7,c	;volatile
  1430                           
  1431                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1432  0007D6  9694               	bcf	3988,3,c	;volatile
  1433                           
  1434                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1435  0007D8  9095               	bcf	3989,0,c	;volatile
  1436                           
  1437                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1438  0007DA  9295               	bcf	3989,1,c	;volatile
  1439                           
  1440                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1441  0007DC  9C92               	bcf	3986,6,c	;volatile
  1442                           
  1443                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1444  0007DE  908C               	bcf	3980,0,c	;volatile
  1445                           
  1446                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1447  0007E0  928C               	bcf	3980,1,c	;volatile
  1448                           
  1449                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1450  0007E2  968B               	bcf	3979,3,c	;volatile
  1451                           
  1452                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1453  0007E4  908B               	bcf	3979,0,c	;volatile
  1454                           
  1455                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1456  0007E6  9C89               	bcf	3977,6,c	;volatile
  1457                           
  1458                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1459  0007E8  9E89               	bcf	3977,7,c	;volatile
  1460                           
  1461                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1462  0007EA  0E27               	movlw	39
  1463  0007EC  6E0F               	movwf	??_init_LCD& (0+255),c
  1464  0007EE  0EF5               	movlw	245
  1465  0007F0                     u1807:
  1466  0007F0  2EE8               	decfsz	wreg,f,c
  1467  0007F2  D7FE               	bra	u1807
  1468  0007F4  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1469  0007F6  D7FC               	bra	u1807
  1470  0007F8  F000               	nop	
  1471                           
  1472                           ;LCDIO.c: 76:  LCDout(0b0011);
  1473  0007FA  0E03               	movlw	3
  1474  0007FC  ECD7  F005         	call	_LCDout
  1475                           
  1476                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1477  000800  0E0D               	movlw	13
  1478  000802  6E0F               	movwf	??_init_LCD& (0+255),c
  1479  000804  0EFC               	movlw	252
  1480  000806                     u1817:
  1481  000806  2EE8               	decfsz	wreg,f,c
  1482  000808  D7FE               	bra	u1817
  1483  00080A  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1484  00080C  D7FC               	bra	u1817
  1485                           
  1486                           ;LCDIO.c: 78:  LCDout(0b0011);
  1487  00080E  0E03               	movlw	3
  1488  000810  ECD7  F005         	call	_LCDout
  1489                           
  1490                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1491  000814  0E85               	movlw	133
  1492  000816                     u1827:
  1493  000816  2EE8               	decfsz	wreg,f,c
  1494  000818  D7FE               	bra	u1827
  1495  00081A  F000               	nop	
  1496                           
  1497                           ;LCDIO.c: 80:  LCDout(0b0011);
  1498  00081C  0E03               	movlw	3
  1499  00081E  ECD7  F005         	call	_LCDout
  1500                           
  1501                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1502  000822  0E21               	movlw	33
  1503  000824                     u1837:
  1504  000824  2EE8               	decfsz	wreg,f,c
  1505  000826  D7FE               	bra	u1837
  1506  000828  F000               	nop	
  1507                           
  1508                           ;LCDIO.c: 82:  LCDout(0b0010);
  1509  00082A  0E02               	movlw	2
  1510  00082C  ECD7  F005         	call	_LCDout
  1511                           
  1512                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1513  000830  0E21               	movlw	33
  1514  000832                     u1847:
  1515  000832  2EE8               	decfsz	wreg,f,c
  1516  000834  D7FE               	bra	u1847
  1517  000836  F000               	nop	
  1518                           
  1519                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1520  000838  0E00               	movlw	0
  1521  00083A  6E0D               	movwf	SendLCD@type,c
  1522  00083C  0E28               	movlw	40
  1523  00083E  EC93  F007         	call	_SendLCD
  1524                           
  1525                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1526  000842  0E21               	movlw	33
  1527  000844                     u1857:
  1528  000844  2EE8               	decfsz	wreg,f,c
  1529  000846  D7FE               	bra	u1857
  1530  000848  F000               	nop	
  1531                           
  1532                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1533  00084A  0E00               	movlw	0
  1534  00084C  6E0D               	movwf	SendLCD@type,c
  1535  00084E  0E08               	movlw	8
  1536  000850  EC93  F007         	call	_SendLCD
  1537                           
  1538                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1539  000854  0E21               	movlw	33
  1540  000856                     u1867:
  1541  000856  2EE8               	decfsz	wreg,f,c
  1542  000858  D7FE               	bra	u1867
  1543  00085A  F000               	nop	
  1544                           
  1545                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1546  00085C  0E00               	movlw	0
  1547  00085E  6E0D               	movwf	SendLCD@type,c
  1548  000860  0E01               	movlw	1
  1549  000862  EC93  F007         	call	_SendLCD
  1550                           
  1551                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1552  000866  0E0D               	movlw	13
  1553  000868  6E0F               	movwf	??_init_LCD& (0+255),c
  1554  00086A  0EFC               	movlw	252
  1555  00086C                     u1877:
  1556  00086C  2EE8               	decfsz	wreg,f,c
  1557  00086E  D7FE               	bra	u1877
  1558  000870  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1559  000872  D7FC               	bra	u1877
  1560                           
  1561                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1562  000874  0E00               	movlw	0
  1563  000876  6E0D               	movwf	SendLCD@type,c
  1564  000878  0E06               	movlw	6
  1565  00087A  EC93  F007         	call	_SendLCD
  1566                           
  1567                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1568  00087E  0E21               	movlw	33
  1569  000880                     u1887:
  1570  000880  2EE8               	decfsz	wreg,f,c
  1571  000882  D7FE               	bra	u1887
  1572  000884  F000               	nop	
  1573                           
  1574                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1575  000886  0E00               	movlw	0
  1576  000888  6E0D               	movwf	SendLCD@type,c
  1577  00088A  0E0C               	movlw	12
  1578  00088C  EC93  F007         	call	_SendLCD
  1579                           
  1580                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1581  000890  0E21               	movlw	33
  1582  000892                     u1897:
  1583  000892  2EE8               	decfsz	wreg,f,c
  1584  000894  D7FE               	bra	u1897
  1585  000896  F000               	nop	
  1586  000898  0012               	return		;funcret
  1587  00089A                     __end_of_init_LCD:
  1588                           	opt callstack 0
  1589                           
  1590 ;; *************** function _initPWM *****************
  1591 ;; Defined at:
  1592 ;;		line 5 in file "dc_motor.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  PWMperiod       2   10[COMRAM] int 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1606 ;;      Params:         2       0       0       0
  1607 ;;      Locals:         0       0       0       0
  1608 ;;      Temps:          0       0       0       0
  1609 ;;      Totals:         2       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_setup
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text8
  1621  001006                     __ptext8:
  1622                           	opt callstack 0
  1623  001006                     _initPWM:
  1624                           	opt callstack 26
  1625                           
  1626                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1627                           
  1628                           ;incstack = 0
  1629  001006  0E00               	movlw	0
  1630  001008  6E7F               	movwf	3967,c	;volatile
  1631                           
  1632                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1633  00100A  0E80               	movlw	128
  1634  00100C  6E7E               	movwf	3966,c	;volatile
  1635                           
  1636                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1637  00100E  0E6F               	movlw	111
  1638  001010  6E6F               	movwf	3951,c	;volatile
  1639                           
  1640                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1641  001012  0E00               	movlw	0
  1642  001014  6E6E               	movwf	3950,c	;volatile
  1643                           
  1644                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1645  001016  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1646                           
  1647                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1648  00101A  500C               	movf	initPWM@PWMperiod+1,w,c
  1649  00101C  6E7A               	movwf	3962,c	;volatile
  1650  00101E  0012               	return		;funcret
  1651  001020                     __end_of_initPWM:
  1652                           	opt callstack 0
  1653                           
  1654 ;; *************** function _scanForBeacon *****************
  1655 ;; Defined at:
  1656 ;;		line 17 in file "subroutines.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1659 ;;		 -> main@motorL(9), 
  1660 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1661 ;;		 -> main@motorR(9), 
  1662 ;;  speed           2   46[COMRAM] int 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  raw_data        2   50[COMRAM] unsigned int 
  1665 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  1666 ;;  smoothed_dat    2   53[COMRAM] unsigned int 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      unsigned char 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1676 ;;      Params:         6       0       0       0
  1677 ;;      Locals:         5       0       0       0
  1678 ;;      Temps:          2       0       0       0
  1679 ;;      Totals:        13       0       0       0
  1680 ;;Total ram usage:       13 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    6
  1683 ;; This function calls:
  1684 ;;		_classify_data
  1685 ;;		_turnRight
  1686 ;; This function is called by:
  1687 ;;		_main
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           	psect	text9
  1692  000C94                     __ptext9:
  1693                           	opt callstack 0
  1694  000C94                     _scanForBeacon:
  1695                           	opt callstack 24
  1696                           
  1697                           ;subroutines.c: 17: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 18: {;subroutines.c: 19:     turnRight(mL,mR,speed);
  1698                           
  1699                           ;incstack = 0
  1700  000C94  C02B  F022         	movff	scanForBeacon@mL,turnRight@mL
  1701  000C98  C02C  F023         	movff	scanForBeacon@mL+1,turnRight@mL+1
  1702  000C9C  C02D  F024         	movff	scanForBeacon@mR,turnRight@mR
  1703  000CA0  C02E  F025         	movff	scanForBeacon@mR+1,turnRight@mR+1
  1704  000CA4  C02F  F026         	movff	scanForBeacon@speed,turnRight@max_power
  1705  000CA8  C030  F027         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  1706  000CAC  ECD6  F004         	call	_turnRight	;wreg free
  1707                           
  1708                           ;subroutines.c: 22:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  1709  000CB0  5068               	movf	3944,w,c	;volatile
  1710  000CB2  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  1711  000CB6  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  1712  000CB8  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  1713  000CBC  6A31               	clrf	??_scanForBeacon,c
  1714  000CBE  1031               	iorwf	??_scanForBeacon,w,c
  1715  000CC0  6E36               	movwf	scanForBeacon@smoothed_data,c
  1716  000CC2  5032               	movf	??_scanForBeacon+1,w,c
  1717  000CC4  6E37               	movwf	scanForBeacon@smoothed_data+1,c
  1718  000CC6                     l2459:
  1719                           
  1720                           ;subroutines.c: 26:     {;subroutines.c: 28:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  1721  000CC6  5068               	movf	3944,w,c	;volatile
  1722  000CC8  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  1723  000CCC  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  1724  000CCE  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  1725  000CD2  6A31               	clrf	??_scanForBeacon,c
  1726  000CD4  1031               	iorwf	??_scanForBeacon,w,c
  1727  000CD6  6E33               	movwf	scanForBeacon@raw_data,c
  1728  000CD8  5032               	movf	??_scanForBeacon+1,w,c
  1729  000CDA  6E34               	movwf	scanForBeacon@raw_data+1,c
  1730                           
  1731                           ;subroutines.c: 31:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  1732  000CDC  C033  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  1733  000CE0  C034  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  1734  000CE4  0E36               	movlw	low scanForBeacon@smoothed_data
  1735  000CE6  6E0D               	movwf	classify_data@smoothed,c
  1736  000CE8  0E00               	movlw	high scanForBeacon@smoothed_data
  1737  000CEA  6E0E               	movwf	classify_data@smoothed+1,c
  1738  000CEC  EC4D  F004         	call	_classify_data	;wreg free
  1739  000CF0  6E35               	movwf	scanForBeacon@beacon_location,c
  1740                           
  1741                           ;subroutines.c: 34:         if(beacon_location == 1)
  1742  000CF2  0435               	decf	scanForBeacon@beacon_location,w,c
  1743  000CF4  A4D8               	btfss	status,2,c
  1744  000CF6  D7E7               	goto	l2459
  1745                           
  1746                           ;subroutines.c: 35:         {;subroutines.c: 36:             return 1;
  1747  000CF8  0E01               	movlw	1
  1748  000CFA  0012               	return		;funcret
  1749  000CFC                     __end_of_scanForBeacon:
  1750                           	opt callstack 0
  1751                           
  1752 ;; *************** function _turnRight *****************
  1753 ;; Defined at:
  1754 ;;		line 53 in file "dc_motor.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1757 ;;		 -> main@motorL(9), 
  1758 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1759 ;;		 -> main@motorR(9), 
  1760 ;;  max_power       2   37[COMRAM] int 
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;  i               2   40[COMRAM] int 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1772 ;;      Params:         6       0       0       0
  1773 ;;      Locals:         2       0       0       0
  1774 ;;      Temps:          1       0       0       0
  1775 ;;      Totals:         9       0       0       0
  1776 ;;Total ram usage:        9 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    5
  1779 ;; This function calls:
  1780 ;;		_setMotorPWM
  1781 ;; This function is called by:
  1782 ;;		_scanForBeacon
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text10
  1787  0009AC                     __ptext10:
  1788                           	opt callstack 0
  1789  0009AC                     _turnRight:
  1790                           	opt callstack 24
  1791                           
  1792                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 1;
  1793                           
  1794                           ;incstack = 0
  1795  0009AC  EE20 F001          	lfsr	2,1
  1796  0009B0  5022               	movf	turnRight@mL,w,c
  1797  0009B2  26D9               	addwf	fsr2l,f,c
  1798  0009B4  5023               	movf	turnRight@mL+1,w,c
  1799  0009B6  22DA               	addwfc	fsr2h,f,c
  1800  0009B8  0E01               	movlw	1
  1801  0009BA  6EDF               	movwf	indf2,c
  1802                           
  1803                           ;dc_motor.c: 57:     mR->direction = 0;
  1804  0009BC  EE20 F001          	lfsr	2,1
  1805  0009C0  5024               	movf	turnRight@mR,w,c
  1806  0009C2  26D9               	addwf	fsr2l,f,c
  1807  0009C4  5025               	movf	turnRight@mR+1,w,c
  1808  0009C6  22DA               	addwfc	fsr2h,f,c
  1809  0009C8  0E00               	movlw	0
  1810  0009CA  6EDF               	movwf	indf2,c
  1811                           
  1812                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  1813  0009CC  0E00               	movlw	0
  1814  0009CE  6E2A               	movwf	turnRight@i+1,c
  1815  0009D0  0E00               	movlw	0
  1816  0009D2  6E29               	movwf	turnRight@i,c
  1817  0009D4  D021               	goto	l2299
  1818  0009D6                     l2289:
  1819                           
  1820                           ;dc_motor.c: 60:         mL->power = i;
  1821  0009D6  C022  FFD9         	movff	turnRight@mL,fsr2l
  1822  0009DA  C023  FFDA         	movff	turnRight@mL+1,fsr2h
  1823  0009DE  C029  FFDF         	movff	turnRight@i,indf2
  1824                           
  1825                           ;dc_motor.c: 61:         mR->power = i;
  1826  0009E2  C024  FFD9         	movff	turnRight@mR,fsr2l
  1827  0009E6  C025  FFDA         	movff	turnRight@mR+1,fsr2h
  1828  0009EA  C029  FFDF         	movff	turnRight@i,indf2
  1829                           
  1830                           ;dc_motor.c: 63:         setMotorPWM(mL);
  1831  0009EE  C022  F019         	movff	turnRight@mL,setMotorPWM@m
  1832  0009F2  C023  F01A         	movff	turnRight@mL+1,setMotorPWM@m+1
  1833  0009F6  EC61  F002         	call	_setMotorPWM	;wreg free
  1834                           
  1835                           ;dc_motor.c: 64:         setMotorPWM(mR);
  1836  0009FA  C024  F019         	movff	turnRight@mR,setMotorPWM@m
  1837  0009FE  C025  F01A         	movff	turnRight@mR+1,setMotorPWM@m+1
  1838  000A02  EC61  F002         	call	_setMotorPWM	;wreg free
  1839                           
  1840                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1841  000A06  0E03               	movlw	3
  1842  000A08  6E28               	movwf	??_turnRight& (0+255),c
  1843  000A0A  0E98               	movlw	152
  1844  000A0C                     u1907:
  1845  000A0C  2EE8               	decfsz	wreg,f,c
  1846  000A0E  D7FE               	bra	u1907
  1847  000A10  2E28               	decfsz	??_turnRight& (0+255),f,c
  1848  000A12  D7FC               	bra	u1907
  1849                           
  1850                           ;dc_motor.c: 66:     }
  1851  000A14  4A29               	infsnz	turnRight@i,f,c
  1852  000A16  2A2A               	incf	turnRight@i+1,f,c
  1853  000A18                     l2299:
  1854  000A18  5026               	movf	turnRight@max_power,w,c
  1855  000A1A  5C29               	subwf	turnRight@i,w,c
  1856  000A1C  502A               	movf	turnRight@i+1,w,c
  1857  000A1E  0A80               	xorlw	128
  1858  000A20  6E28               	movwf	??_turnRight& (0+255),c
  1859  000A22  5027               	movf	turnRight@max_power+1,w,c
  1860  000A24  0A80               	xorlw	128
  1861  000A26  5828               	subwfb	??_turnRight& (0+255),w,c
  1862  000A28  B0D8               	btfsc	status,0,c
  1863  000A2A  0012               	return	
  1864  000A2C  D7D4               	goto	l2289
  1865  000A2E                     __end_of_turnRight:
  1866                           	opt callstack 0
  1867                           
  1868 ;; *************** function _classify_data *****************
  1869 ;; Defined at:
  1870 ;;		line 33 in file "signal_processing.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  raw_data        2   10[COMRAM] unsigned int 
  1873 ;;  smoothed        2   12[COMRAM] PTR unsigned int 
  1874 ;;		 -> scanForBeacon@smoothed_data(2), 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  previous        2   22[COMRAM] unsigned int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      unsigned char 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1886 ;;      Params:         4       0       0       0
  1887 ;;      Locals:         2       0       0       0
  1888 ;;      Temps:          8       0       0       0
  1889 ;;      Totals:        14       0       0       0
  1890 ;;Total ram usage:       14 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    3
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_scanForBeacon
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text11
  1901  00089A                     __ptext11:
  1902                           	opt callstack 0
  1903  00089A                     _classify_data:
  1904                           	opt callstack 26
  1905                           
  1906                           ;signal_processing.c: 33: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 34: {;signal_processing.c: 36:     unsigned int previous = *smo
      +                          othed;
  1907                           
  1908                           ;incstack = 0
  1909  00089A  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  1910  00089E  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1911  0008A2  CFDE F017          	movff	postinc2,classify_data@previous
  1912  0008A6  CFDD F018          	movff	postdec2,classify_data@previous+1
  1913                           
  1914                           ;signal_processing.c: 39:     *smoothed = *smoothed + ((raw_data - *smoothed) >> 1);
  1915  0008AA  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  1916  0008AE  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1917  0008B2  CFDE F00F          	movff	postinc2,??_classify_data
  1918  0008B6  CFDD F010          	movff	postdec2,??_classify_data+1
  1919  0008BA  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  1920  0008BE  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1921  0008C2  CFDE F011          	movff	postinc2,??_classify_data+2
  1922  0008C6  CFDD F012          	movff	postdec2,??_classify_data+3
  1923  0008CA  C00B  F013         	movff	classify_data@raw_data,??_classify_data+4
  1924  0008CE  C00C  F014         	movff	classify_data@raw_data+1,??_classify_data+5
  1925  0008D2  5011               	movf	??_classify_data+2,w,c
  1926  0008D4  5E13               	subwf	??_classify_data+4,f,c
  1927  0008D6  5012               	movf	??_classify_data+3,w,c
  1928  0008D8  5A14               	subwfb	??_classify_data+5,f,c
  1929  0008DA  90D8               	bcf	status,0,c
  1930  0008DC  3014               	rrcf	??_classify_data+5,w,c
  1931  0008DE  6E16               	movwf	(??_classify_data+7)& (0+255),c
  1932  0008E0  3013               	rrcf	??_classify_data+4,w,c
  1933  0008E2  6E15               	movwf	(??_classify_data+6)& (0+255),c
  1934  0008E4  500F               	movf	??_classify_data,w,c
  1935  0008E6  2615               	addwf	??_classify_data+6,f,c
  1936  0008E8  5010               	movf	??_classify_data+1,w,c
  1937  0008EA  2216               	addwfc	??_classify_data+7,f,c
  1938  0008EC  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  1939  0008F0  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1940  0008F4  C015  FFDE         	movff	??_classify_data+6,postinc2
  1941  0008F8  C016  FFDD         	movff	??_classify_data+7,postdec2
  1942                           
  1943                           ;signal_processing.c: 42:     if(*smoothed - previous >= 2000)
  1944  0008FC  C00D  FFD9         	movff	classify_data@smoothed,fsr2l
  1945  000900  C00E  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1946  000904  CFDE F00F          	movff	postinc2,??_classify_data
  1947  000908  CFDD F010          	movff	postdec2,??_classify_data+1
  1948  00090C  5017               	movf	classify_data@previous,w,c
  1949  00090E  5E0F               	subwf	??_classify_data,f,c
  1950  000910  5018               	movf	classify_data@previous+1,w,c
  1951  000912  5A10               	subwfb	??_classify_data+1,f,c
  1952  000914  0ED0               	movlw	208
  1953  000916  5C0F               	subwf	??_classify_data,w,c
  1954  000918  0E07               	movlw	7
  1955  00091A  5810               	subwfb	??_classify_data+1,w,c
  1956  00091C  A0D8               	btfss	status,0,c
  1957  00091E  D002               	goto	l2391
  1958                           
  1959                           ;signal_processing.c: 43:     {;signal_processing.c: 44:         return 1;
  1960  000920  0E01               	movlw	1
  1961  000922  0012               	return	
  1962  000924                     l2391:
  1963                           
  1964                           ;signal_processing.c: 47:     {;signal_processing.c: 48:         return 0;
  1965  000924  0E00               	movlw	0
  1966  000926  0012               	return		;funcret
  1967  000928                     __end_of_classify_data:
  1968                           	opt callstack 0
  1969                           
  1970 ;; *************** function _returnHome *****************
  1971 ;; Defined at:
  1972 ;;		line 61 in file "subroutines.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1975 ;;		 -> main@motorL(9), 
  1976 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1977 ;;		 -> main@motorR(9), 
  1978 ;;  speed           2   46[COMRAM] int 
  1979 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  1980 ;;		 -> movement_time(4), 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      unsigned char 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1992 ;;      Params:         8       0       0       0
  1993 ;;      Locals:         0       0       0       0
  1994 ;;      Temps:          4       0       0       0
  1995 ;;      Totals:        12       0       0       0
  1996 ;;Total ram usage:       12 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    6
  1999 ;; This function calls:
  2000 ;;		_moveBackward
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text12
  2007  000EBE                     __ptext12:
  2008                           	opt callstack 0
  2009  000EBE                     _returnHome:
  2010                           	opt callstack 24
  2011                           
  2012                           ;subroutines.c: 61: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 62:                        volatile unsigned long *time);subrou
      +                          tines.c: 63: {;subroutines.c: 64:     moveBackward(mL,mR,speed);
  2013                           
  2014                           ;incstack = 0
  2015  000EBE  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2016  000EC2  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2017  000EC6  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2018  000ECA  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2019  000ECE  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2020  000ED2  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2021  000ED6  EC17  F005         	call	_moveBackward	;wreg free
  2022  000EDA                     l2485:
  2023  000EDA  C031  FFD9         	movff	returnHome@time,fsr2l
  2024  000EDE  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2025  000EE2  50DE               	movf	postinc2,w,c
  2026  000EE4  10DE               	iorwf	postinc2,w,c
  2027  000EE6  10DE               	iorwf	postinc2,w,c
  2028  000EE8  10DE               	iorwf	postinc2,w,c
  2029  000EEA  A4D8               	btfss	status,2,c
  2030  000EEC  D7F6               	goto	l2485
  2031                           
  2032                           ;subroutines.c: 67:     return 3;
  2033  000EEE  0E03               	movlw	3
  2034  000EF0  0012               	return		;funcret
  2035  000EF2                     __end_of_returnHome:
  2036                           	opt callstack 0
  2037                           
  2038 ;; *************** function _moveBackward *****************
  2039 ;; Defined at:
  2040 ;;		line 85 in file "dc_motor.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2043 ;;		 -> main@motorL(9), 
  2044 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2045 ;;		 -> main@motorR(9), 
  2046 ;;  max_power       2   37[COMRAM] int 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  i               2   40[COMRAM] int 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2058 ;;      Params:         6       0       0       0
  2059 ;;      Locals:         2       0       0       0
  2060 ;;      Temps:          1       0       0       0
  2061 ;;      Totals:         9       0       0       0
  2062 ;;Total ram usage:        9 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    5
  2065 ;; This function calls:
  2066 ;;		_setMotorPWM
  2067 ;; This function is called by:
  2068 ;;		_returnHome
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text13
  2073  000A2E                     __ptext13:
  2074                           	opt callstack 0
  2075  000A2E                     _moveBackward:
  2076                           	opt callstack 24
  2077                           
  2078                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2079                           
  2080                           ;incstack = 0
  2081  000A2E  EE20 F001          	lfsr	2,1
  2082  000A32  5022               	movf	moveBackward@mL,w,c
  2083  000A34  26D9               	addwf	fsr2l,f,c
  2084  000A36  5023               	movf	moveBackward@mL+1,w,c
  2085  000A38  22DA               	addwfc	fsr2h,f,c
  2086  000A3A  0E00               	movlw	0
  2087  000A3C  6EDF               	movwf	indf2,c
  2088                           
  2089                           ;dc_motor.c: 88:     mR->direction = 0;
  2090  000A3E  EE20 F001          	lfsr	2,1
  2091  000A42  5024               	movf	moveBackward@mR,w,c
  2092  000A44  26D9               	addwf	fsr2l,f,c
  2093  000A46  5025               	movf	moveBackward@mR+1,w,c
  2094  000A48  22DA               	addwfc	fsr2h,f,c
  2095  000A4A  0E00               	movlw	0
  2096  000A4C  6EDF               	movwf	indf2,c
  2097                           
  2098                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2099  000A4E  0E00               	movlw	0
  2100  000A50  6E2A               	movwf	moveBackward@i+1,c
  2101  000A52  0E00               	movlw	0
  2102  000A54  6E29               	movwf	moveBackward@i,c
  2103  000A56  D021               	goto	l2331
  2104  000A58                     l2321:
  2105                           
  2106                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2107  000A58  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2108  000A5C  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2109  000A60  C029  FFDF         	movff	moveBackward@i,indf2
  2110                           
  2111                           ;dc_motor.c: 92:         mR->power = i;
  2112  000A64  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2113  000A68  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2114  000A6C  C029  FFDF         	movff	moveBackward@i,indf2
  2115                           
  2116                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2117  000A70  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2118  000A74  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2119  000A78  EC61  F002         	call	_setMotorPWM	;wreg free
  2120                           
  2121                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2122  000A7C  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2123  000A80  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2124  000A84  EC61  F002         	call	_setMotorPWM	;wreg free
  2125                           
  2126                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2127  000A88  0E03               	movlw	3
  2128  000A8A  6E28               	movwf	??_moveBackward& (0+255),c
  2129  000A8C  0E98               	movlw	152
  2130  000A8E                     u1917:
  2131  000A8E  2EE8               	decfsz	wreg,f,c
  2132  000A90  D7FE               	bra	u1917
  2133  000A92  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2134  000A94  D7FC               	bra	u1917
  2135                           
  2136                           ;dc_motor.c: 96:     }
  2137  000A96  4A29               	infsnz	moveBackward@i,f,c
  2138  000A98  2A2A               	incf	moveBackward@i+1,f,c
  2139  000A9A                     l2331:
  2140  000A9A  5026               	movf	moveBackward@max_power,w,c
  2141  000A9C  5C29               	subwf	moveBackward@i,w,c
  2142  000A9E  502A               	movf	moveBackward@i+1,w,c
  2143  000AA0  0A80               	xorlw	128
  2144  000AA2  6E28               	movwf	??_moveBackward& (0+255),c
  2145  000AA4  5027               	movf	moveBackward@max_power+1,w,c
  2146  000AA6  0A80               	xorlw	128
  2147  000AA8  5828               	subwfb	??_moveBackward& (0+255),w,c
  2148  000AAA  B0D8               	btfsc	status,0,c
  2149  000AAC  0012               	return	
  2150  000AAE  D7D4               	goto	l2321
  2151  000AB0                     __end_of_moveBackward:
  2152                           	opt callstack 0
  2153                           
  2154 ;; *************** function _moveToBeacon *****************
  2155 ;; Defined at:
  2156 ;;		line 41 in file "subroutines.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2159 ;;		 -> main@motorL(9), 
  2160 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2161 ;;		 -> main@motorR(9), 
  2162 ;;  speed           2   46[COMRAM] int 
  2163 ;;  micros          2   48[COMRAM] PTR unsigned long 
  2164 ;;		 -> main@movementMicros(4), 
  2165 ;;  RFID_buffer     2   50[COMRAM] PTR volatile unsigned ch
  2166 ;;		 -> RFIDbuf(12), 
  2167 ;;  exit_flag       2   52[COMRAM] PTR volatile unsigned ch
  2168 ;;		 -> NULL(0), RFID_flag(1), 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      unsigned char 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:        12       0       0       0
  2181 ;;      Locals:         0       0       0       0
  2182 ;;      Temps:          1       0       0       0
  2183 ;;      Totals:        13       0       0       0
  2184 ;;Total ram usage:       13 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    8
  2187 ;; This function calls:
  2188 ;;		_check_RFID
  2189 ;;		_display_RFID
  2190 ;;		_moveForward
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text14
  2197  000E02                     __ptext14:
  2198                           	opt callstack 0
  2199  000E02                     _moveToBeacon:
  2200                           	opt callstack 22
  2201                           
  2202                           ;subroutines.c: 41: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 42: unsigned long *micros, volatile char RFID_buffer[], volat
      +                          ile char *exit_flag);subroutines.c: 43: {;subroutines.c: 44:     moveForward(mL,mR,speed
      +                          );
  2203                           
  2204                           ;incstack = 0
  2205  000E02  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2206  000E06  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2207  000E0A  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2208  000E0E  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2209  000E12  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2210  000E16  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2211  000E1A  EC58  F005         	call	_moveForward	;wreg free
  2212  000E1E                     l2471:
  2213                           
  2214                           ;subroutines.c: 48:           {;subroutines.c: 51:               if(*exit_flag == 1)
  2215  000E1E  C035  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2216  000E22  C036  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2217  000E26  04DE               	decf	postinc2,w,c
  2218  000E28  A4D8               	btfss	status,2,c
  2219  000E2A  D7F9               	goto	l2471
  2220                           
  2221                           ;subroutines.c: 52:               {;subroutines.c: 53:                   display_RFID(RF
      +                          ID_buffer);
  2222  000E2C  C033  F010         	movff	moveToBeacon@RFID_buffer,display_RFID@dataBuf
  2223  000E30  C034  F011         	movff	moveToBeacon@RFID_buffer+1,display_RFID@dataBuf+1
  2224  000E34  EC24  F007         	call	_display_RFID	;wreg free
  2225                           
  2226                           ;subroutines.c: 54:                   check_RFID(RFID_buffer);
  2227  000E38  C033  F011         	movff	moveToBeacon@RFID_buffer,check_RFID@dataBuf
  2228  000E3C  C034  F012         	movff	moveToBeacon@RFID_buffer+1,check_RFID@dataBuf+1
  2229  000E40  ECB9  F001         	call	_check_RFID	;wreg free
  2230                           
  2231                           ;subroutines.c: 56:                   return 2;
  2232  000E44  0E02               	movlw	2
  2233  000E46  0012               	return		;funcret
  2234  000E48                     __end_of_moveToBeacon:
  2235                           	opt callstack 0
  2236                           
  2237 ;; *************** function _moveForward *****************
  2238 ;; Defined at:
  2239 ;;		line 70 in file "dc_motor.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2242 ;;		 -> main@motorL(9), 
  2243 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2244 ;;		 -> main@motorR(9), 
  2245 ;;  max_power       2   37[COMRAM] int 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  i               2   40[COMRAM] int 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      void 
  2250 ;; Registers used:
  2251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2257 ;;      Params:         6       0       0       0
  2258 ;;      Locals:         2       0       0       0
  2259 ;;      Temps:          1       0       0       0
  2260 ;;      Totals:         9       0       0       0
  2261 ;;Total ram usage:        9 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    5
  2264 ;; This function calls:
  2265 ;;		_setMotorPWM
  2266 ;; This function is called by:
  2267 ;;		_moveToBeacon
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text15
  2272  000AB0                     __ptext15:
  2273                           	opt callstack 0
  2274  000AB0                     _moveForward:
  2275                           	opt callstack 24
  2276                           
  2277                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2278                           
  2279                           ;incstack = 0
  2280  000AB0  EE20 F001          	lfsr	2,1
  2281  000AB4  5022               	movf	moveForward@mL,w,c
  2282  000AB6  26D9               	addwf	fsr2l,f,c
  2283  000AB8  5023               	movf	moveForward@mL+1,w,c
  2284  000ABA  22DA               	addwfc	fsr2h,f,c
  2285  000ABC  0E01               	movlw	1
  2286  000ABE  6EDF               	movwf	indf2,c
  2287                           
  2288                           ;dc_motor.c: 73:     mR->direction = 1;
  2289  000AC0  EE20 F001          	lfsr	2,1
  2290  000AC4  5024               	movf	moveForward@mR,w,c
  2291  000AC6  26D9               	addwf	fsr2l,f,c
  2292  000AC8  5025               	movf	moveForward@mR+1,w,c
  2293  000ACA  22DA               	addwfc	fsr2h,f,c
  2294  000ACC  0E01               	movlw	1
  2295  000ACE  6EDF               	movwf	indf2,c
  2296                           
  2297                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2298  000AD0  0E00               	movlw	0
  2299  000AD2  6E2A               	movwf	moveForward@i+1,c
  2300  000AD4  0E00               	movlw	0
  2301  000AD6  6E29               	movwf	moveForward@i,c
  2302  000AD8  D021               	goto	l2315
  2303  000ADA                     l2305:
  2304                           
  2305                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2306  000ADA  C022  FFD9         	movff	moveForward@mL,fsr2l
  2307  000ADE  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2308  000AE2  C029  FFDF         	movff	moveForward@i,indf2
  2309                           
  2310                           ;dc_motor.c: 77:         mR->power = i;
  2311  000AE6  C024  FFD9         	movff	moveForward@mR,fsr2l
  2312  000AEA  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2313  000AEE  C029  FFDF         	movff	moveForward@i,indf2
  2314                           
  2315                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2316  000AF2  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2317  000AF6  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2318  000AFA  EC61  F002         	call	_setMotorPWM	;wreg free
  2319                           
  2320                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2321  000AFE  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2322  000B02  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2323  000B06  EC61  F002         	call	_setMotorPWM	;wreg free
  2324                           
  2325                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2326  000B0A  0E03               	movlw	3
  2327  000B0C  6E28               	movwf	??_moveForward& (0+255),c
  2328  000B0E  0E98               	movlw	152
  2329  000B10                     u1927:
  2330  000B10  2EE8               	decfsz	wreg,f,c
  2331  000B12  D7FE               	bra	u1927
  2332  000B14  2E28               	decfsz	??_moveForward& (0+255),f,c
  2333  000B16  D7FC               	bra	u1927
  2334                           
  2335                           ;dc_motor.c: 81:     }
  2336  000B18  4A29               	infsnz	moveForward@i,f,c
  2337  000B1A  2A2A               	incf	moveForward@i+1,f,c
  2338  000B1C                     l2315:
  2339  000B1C  5026               	movf	moveForward@max_power,w,c
  2340  000B1E  5C29               	subwf	moveForward@i,w,c
  2341  000B20  502A               	movf	moveForward@i+1,w,c
  2342  000B22  0A80               	xorlw	128
  2343  000B24  6E28               	movwf	??_moveForward& (0+255),c
  2344  000B26  5027               	movf	moveForward@max_power+1,w,c
  2345  000B28  0A80               	xorlw	128
  2346  000B2A  5828               	subwfb	??_moveForward& (0+255),w,c
  2347  000B2C  B0D8               	btfsc	status,0,c
  2348  000B2E  0012               	return	
  2349  000B30  D7D4               	goto	l2305
  2350  000B32                     __end_of_moveForward:
  2351                           	opt callstack 0
  2352                           
  2353 ;; *************** function _display_RFID *****************
  2354 ;; Defined at:
  2355 ;;		line 107 in file "RFID.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  2358 ;;		 -> RFIDbuf(12), 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  i               2   17[COMRAM] int 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2370 ;;      Params:         2       0       0       0
  2371 ;;      Locals:         2       0       0       0
  2372 ;;      Temps:          0       0       0       0
  2373 ;;      Totals:         4       0       0       0
  2374 ;;Total ram usage:        4 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    7
  2377 ;; This function calls:
  2378 ;;		_ClearLCD
  2379 ;;		_SendLCD
  2380 ;;		_SetLine
  2381 ;; This function is called by:
  2382 ;;		_moveToBeacon
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text16
  2387  000E48                     __ptext16:
  2388                           	opt callstack 0
  2389  000E48                     _display_RFID:
  2390                           	opt callstack 22
  2391                           
  2392                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  2393                           
  2394                           ;incstack = 0
  2395  000E48  EC10  F008         	call	_ClearLCD	;wreg free
  2396                           
  2397                           ;RFID.c: 110:     SetLine(1);
  2398  000E4C  0E01               	movlw	1
  2399  000E4E  ECAB  F007         	call	_SetLine
  2400                           
  2401                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  2402  000E52  0E00               	movlw	0
  2403  000E54  6E13               	movwf	display_RFID@i+1,c
  2404  000E56  0E00               	movlw	0
  2405  000E58  6E12               	movwf	display_RFID@i,c
  2406  000E5A                     l2373:
  2407                           
  2408                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  2409  000E5A  0E01               	movlw	1
  2410  000E5C  6E0D               	movwf	SendLCD@type,c
  2411  000E5E  5012               	movf	display_RFID@i,w,c
  2412  000E60  2410               	addwf	display_RFID@dataBuf,w,c
  2413  000E62  6ED9               	movwf	fsr2l,c
  2414  000E64  5013               	movf	display_RFID@i+1,w,c
  2415  000E66  2011               	addwfc	display_RFID@dataBuf+1,w,c
  2416  000E68  6EDA               	movwf	fsr2h,c
  2417  000E6A  50DF               	movf	indf2,w,c
  2418  000E6C  EC93  F007         	call	_SendLCD
  2419                           
  2420                           ;RFID.c: 114:     }
  2421  000E70  4A12               	infsnz	display_RFID@i,f,c
  2422  000E72  2A13               	incf	display_RFID@i+1,f,c
  2423  000E74  BE13               	btfsc	display_RFID@i+1,7,c
  2424  000E76  D7F1               	goto	l2373
  2425  000E78  5013               	movf	display_RFID@i+1,w,c
  2426  000E7A  E105               	bnz	u1630
  2427  000E7C  0E0A               	movlw	10
  2428  000E7E  5C12               	subwf	display_RFID@i,w,c
  2429  000E80  B0D8               	btfsc	status,0,c
  2430  000E82  0012               	return	
  2431  000E84  D7EA               	goto	l2373
  2432  000E86                     u1630:
  2433  000E86  0012               	return		;funcret
  2434  000E88                     __end_of_display_RFID:
  2435                           	opt callstack 0
  2436                           
  2437 ;; *************** function _ClearLCD *****************
  2438 ;; Defined at:
  2439 ;;		line 131 in file "LCDIO.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2453 ;;      Params:         0       0       0       0
  2454 ;;      Locals:         0       0       0       0
  2455 ;;      Temps:          1       0       0       0
  2456 ;;      Totals:         1       0       0       0
  2457 ;;Total ram usage:        1 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    6
  2460 ;; This function calls:
  2461 ;;		_SendLCD
  2462 ;; This function is called by:
  2463 ;;		_display_RFID
  2464 ;;		_stopAndDisplay
  2465 ;;		_waitForInput
  2466 ;;		_debug
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text17
  2471  001020                     __ptext17:
  2472                           	opt callstack 0
  2473  001020                     _ClearLCD:
  2474                           	opt callstack 23
  2475                           
  2476                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  2477                           
  2478                           ;incstack = 0
  2479  001020  0E00               	movlw	0
  2480  001022  6E0D               	movwf	SendLCD@type,c
  2481  001024  0E01               	movlw	1
  2482  001026  EC93  F007         	call	_SendLCD
  2483                           
  2484                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2485  00102A  0E0D               	movlw	13
  2486  00102C  6E0F               	movwf	??_ClearLCD& (0+255),c
  2487  00102E  0EFC               	movlw	252
  2488  001030                     u1937:
  2489  001030  2EE8               	decfsz	wreg,f,c
  2490  001032  D7FE               	bra	u1937
  2491  001034  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  2492  001036  D7FC               	bra	u1937
  2493  001038  0012               	return		;funcret
  2494  00103A                     __end_of_ClearLCD:
  2495                           	opt callstack 0
  2496                           
  2497 ;; *************** function _check_RFID *****************
  2498 ;; Defined at:
  2499 ;;		line 70 in file "RFID.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  2502 ;;		 -> RFIDbuf(12), 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  i               2   38[COMRAM] int 
  2505 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  2506 ;;  checksum        1   37[COMRAM] unsigned char 
  2507 ;;  byte5           1   36[COMRAM] unsigned char 
  2508 ;;  byte4           1   35[COMRAM] unsigned char 
  2509 ;;  byte3           1   34[COMRAM] unsigned char 
  2510 ;;  byte2           1   33[COMRAM] unsigned char 
  2511 ;;  byte1           1   32[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2521 ;;      Params:         2       0       0       0
  2522 ;;      Locals:        20       0       0       0
  2523 ;;      Temps:          2       0       0       0
  2524 ;;      Totals:        24       0       0       0
  2525 ;;Total ram usage:       24 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    7
  2528 ;; This function calls:
  2529 ;;		_LCD_String
  2530 ;;		_SetLine
  2531 ;; This function is called by:
  2532 ;;		_moveToBeacon
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text18
  2537  000372                     __ptext18:
  2538                           	opt callstack 0
  2539  000372                     _check_RFID:
  2540                           	opt callstack 22
  2541                           
  2542                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  2543                           
  2544                           ;incstack = 0
  2545  000372  0E00               	movlw	0
  2546  000374  6E28               	movwf	check_RFID@i+1,c
  2547  000376  0E00               	movlw	0
  2548  000378  6E27               	movwf	check_RFID@i,c
  2549  00037A                     l2339:
  2550                           
  2551                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2552  00037A  5027               	movf	check_RFID@i,w,c
  2553  00037C  2411               	addwf	check_RFID@dataBuf,w,c
  2554  00037E  6ED9               	movwf	fsr2l,c
  2555  000380  5028               	movf	check_RFID@i+1,w,c
  2556  000382  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2557  000384  6EDA               	movwf	fsr2h,c
  2558  000386  0E2F               	movlw	47
  2559  000388  64DF               	cpfsgt	indf2,c
  2560  00038A  D018               	goto	l2345
  2561  00038C  5027               	movf	check_RFID@i,w,c
  2562  00038E  2411               	addwf	check_RFID@dataBuf,w,c
  2563  000390  6ED9               	movwf	fsr2l,c
  2564  000392  5028               	movf	check_RFID@i+1,w,c
  2565  000394  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2566  000396  6EDA               	movwf	fsr2h,c
  2567  000398  0E3A               	movlw	58
  2568  00039A  60DF               	cpfslt	indf2,c
  2569  00039C  D00F               	goto	l2345
  2570                           
  2571                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  2572  00039E  0E15               	movlw	low check_RFID@hexBuf
  2573  0003A0  2427               	addwf	check_RFID@i,w,c
  2574  0003A2  6ED9               	movwf	fsr2l,c
  2575  0003A4  0E00               	movlw	high check_RFID@hexBuf
  2576  0003A6  2028               	addwfc	check_RFID@i+1,w,c
  2577  0003A8  6EDA               	movwf	fsr2h,c
  2578  0003AA  5027               	movf	check_RFID@i,w,c
  2579  0003AC  2411               	addwf	check_RFID@dataBuf,w,c
  2580  0003AE  6EE1               	movwf	fsr1l,c
  2581  0003B0  5028               	movf	check_RFID@i+1,w,c
  2582  0003B2  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2583  0003B4  6EE2               	movwf	fsr1h,c
  2584  0003B6  50E7               	movf	indf1,w,c
  2585  0003B8  0FD0               	addlw	208
  2586  0003BA  D020               	goto	L4
  2587  0003BC                     l2345:
  2588  0003BC  5027               	movf	check_RFID@i,w,c
  2589  0003BE  2411               	addwf	check_RFID@dataBuf,w,c
  2590  0003C0  6ED9               	movwf	fsr2l,c
  2591  0003C2  5028               	movf	check_RFID@i+1,w,c
  2592  0003C4  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2593  0003C6  6EDA               	movwf	fsr2h,c
  2594  0003C8  0E40               	movlw	64
  2595  0003CA  64DF               	cpfsgt	indf2,c
  2596  0003CC  D018               	goto	l2351
  2597  0003CE  5027               	movf	check_RFID@i,w,c
  2598  0003D0  2411               	addwf	check_RFID@dataBuf,w,c
  2599  0003D2  6ED9               	movwf	fsr2l,c
  2600  0003D4  5028               	movf	check_RFID@i+1,w,c
  2601  0003D6  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2602  0003D8  6EDA               	movwf	fsr2h,c
  2603  0003DA  0E47               	movlw	71
  2604  0003DC  60DF               	cpfslt	indf2,c
  2605  0003DE  D00F               	goto	l2351
  2606                           
  2607                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2608  0003E0  0E15               	movlw	low check_RFID@hexBuf
  2609  0003E2  2427               	addwf	check_RFID@i,w,c
  2610  0003E4  6ED9               	movwf	fsr2l,c
  2611  0003E6  0E00               	movlw	high check_RFID@hexBuf
  2612  0003E8  2028               	addwfc	check_RFID@i+1,w,c
  2613  0003EA  6EDA               	movwf	fsr2h,c
  2614  0003EC  5027               	movf	check_RFID@i,w,c
  2615  0003EE  2411               	addwf	check_RFID@dataBuf,w,c
  2616  0003F0  6EE1               	movwf	fsr1l,c
  2617  0003F2  5028               	movf	check_RFID@i+1,w,c
  2618  0003F4  2012               	addwfc	check_RFID@dataBuf+1,w,c
  2619  0003F6  6EE2               	movwf	fsr1h,c
  2620  0003F8  50E7               	movf	indf1,w,c
  2621  0003FA  0FC9               	addlw	201
  2622  0003FC                     L4:
  2623  0003FC  6EDF               	movwf	indf2,c
  2624  0003FE                     l2351:
  2625                           
  2626                           ;RFID.c: 84:     }
  2627  0003FE  4A27               	infsnz	check_RFID@i,f,c
  2628  000400  2A28               	incf	check_RFID@i+1,f,c
  2629  000402  BE28               	btfsc	check_RFID@i+1,7,c
  2630  000404  D7BA               	goto	l2339
  2631  000406  5028               	movf	check_RFID@i+1,w,c
  2632  000408  E104               	bnz	u1470
  2633  00040A  0E0C               	movlw	12
  2634  00040C  5C27               	subwf	check_RFID@i,w,c
  2635  00040E  A0D8               	btfss	status,0,c
  2636  000410  D7B4               	goto	l2339
  2637  000412                     u1470:
  2638                           
  2639                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2640  000412  5015               	movf	check_RFID@hexBuf,w,c
  2641  000414  A4D8               	btfss	status,2,c
  2642  000416  D002               	goto	u1480
  2643  000418  0E01               	movlw	1
  2644  00041A  D001               	goto	u1490
  2645  00041C                     u1480:
  2646  00041C  0E00               	movlw	0
  2647  00041E                     u1490:
  2648  00041E  1016               	iorwf	check_RFID@hexBuf+1,w,c
  2649  000420  6E21               	movwf	check_RFID@byte1,c
  2650                           
  2651                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2652  000422  5017               	movf	check_RFID@hexBuf+2,w,c
  2653  000424  A4D8               	btfss	status,2,c
  2654  000426  D002               	goto	u1500
  2655  000428  0E01               	movlw	1
  2656  00042A  D001               	goto	u1510
  2657  00042C                     u1500:
  2658  00042C  0E00               	movlw	0
  2659  00042E                     u1510:
  2660  00042E  1018               	iorwf	check_RFID@hexBuf+3,w,c
  2661  000430  6E22               	movwf	check_RFID@byte2,c
  2662                           
  2663                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2664  000432  5019               	movf	check_RFID@hexBuf+4,w,c
  2665  000434  A4D8               	btfss	status,2,c
  2666  000436  D002               	goto	u1520
  2667  000438  0E01               	movlw	1
  2668  00043A  D001               	goto	u1530
  2669  00043C                     u1520:
  2670  00043C  0E00               	movlw	0
  2671  00043E                     u1530:
  2672  00043E  101A               	iorwf	check_RFID@hexBuf+5,w,c
  2673  000440  6E23               	movwf	check_RFID@byte3,c
  2674                           
  2675                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2676  000442  501B               	movf	check_RFID@hexBuf+6,w,c
  2677  000444  A4D8               	btfss	status,2,c
  2678  000446  D002               	goto	u1540
  2679  000448  0E01               	movlw	1
  2680  00044A  D001               	goto	u1550
  2681  00044C                     u1540:
  2682  00044C  0E00               	movlw	0
  2683  00044E                     u1550:
  2684  00044E  101C               	iorwf	check_RFID@hexBuf+7,w,c
  2685  000450  6E24               	movwf	check_RFID@byte4,c
  2686                           
  2687                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2688  000452  501D               	movf	check_RFID@hexBuf+8,w,c
  2689  000454  A4D8               	btfss	status,2,c
  2690  000456  D002               	goto	u1560
  2691  000458  0E01               	movlw	1
  2692  00045A  D001               	goto	u1570
  2693  00045C                     u1560:
  2694  00045C  0E00               	movlw	0
  2695  00045E                     u1570:
  2696  00045E  101E               	iorwf	check_RFID@hexBuf+9,w,c
  2697  000460  6E25               	movwf	check_RFID@byte5,c
  2698                           
  2699                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2700  000462  501F               	movf	check_RFID@hexBuf+10,w,c
  2701  000464  A4D8               	btfss	status,2,c
  2702  000466  D002               	goto	u1580
  2703  000468  0E01               	movlw	1
  2704  00046A  D001               	goto	u1590
  2705  00046C                     u1580:
  2706  00046C  0E00               	movlw	0
  2707  00046E                     u1590:
  2708  00046E  1020               	iorwf	check_RFID@hexBuf+11,w,c
  2709  000470  6E26               	movwf	check_RFID@checksum,c
  2710                           
  2711                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2712  000472  5021               	movf	check_RFID@byte1,w,c
  2713  000474  1822               	xorwf	check_RFID@byte2,w,c
  2714  000476  1823               	xorwf	check_RFID@byte3,w,c
  2715  000478  1824               	xorwf	check_RFID@byte4,w,c
  2716  00047A  6E13               	movwf	??_check_RFID& (0+255),c
  2717  00047C  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  2718  00047E  5026               	movf	check_RFID@checksum,w,c
  2719  000480  1825               	xorwf	check_RFID@byte5,w,c
  2720  000482  A4D8               	btfss	status,2,c
  2721  000484  D002               	goto	u1600
  2722  000486  0E01               	movlw	1
  2723  000488  D001               	goto	u1610
  2724  00048A                     u1600:
  2725  00048A  0E00               	movlw	0
  2726  00048C                     u1610:
  2727  00048C  1A13               	xorwf	??_check_RFID,f,c
  2728  00048E  0E00               	movlw	0
  2729  000490  1A14               	xorwf	??_check_RFID+1,f,c
  2730  000492  5013               	movf	??_check_RFID,w,c
  2731  000494  1014               	iorwf	??_check_RFID+1,w,c
  2732  000496  B4D8               	btfsc	status,2,c
  2733  000498  D00A               	goto	l2361
  2734                           
  2735                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  2736  00049A  0E02               	movlw	2
  2737  00049C  ECAB  F007         	call	_SetLine
  2738                           
  2739                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  2740  0004A0  0E41               	movlw	low STR_2
  2741  0004A2  6E0F               	movwf	LCD_String@string,c
  2742  0004A4  0E03               	movlw	high STR_2
  2743  0004A6  6E10               	movwf	LCD_String@string+1,c
  2744  0004A8  EC7E  F006         	call	_LCD_String	;wreg free
  2745                           
  2746                           ;RFID.c: 99:     }
  2747  0004AC  0012               	return	
  2748  0004AE                     l2361:
  2749                           
  2750                           ;RFID.c: 102:         SetLine(2);
  2751  0004AE  0E02               	movlw	2
  2752  0004B0  ECAB  F007         	call	_SetLine
  2753                           
  2754                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  2755  0004B4  0E31               	movlw	low STR_3
  2756  0004B6  6E0F               	movwf	LCD_String@string,c
  2757  0004B8  0E03               	movlw	high STR_3
  2758  0004BA  6E10               	movwf	LCD_String@string+1,c
  2759  0004BC  EC7E  F006         	call	_LCD_String	;wreg free
  2760  0004C0  0012               	return		;funcret
  2761  0004C2                     __end_of_check_RFID:
  2762                           	opt callstack 0
  2763                           
  2764 ;; *************** function _SetLine *****************
  2765 ;; Defined at:
  2766 ;;		line 107 in file "LCDIO.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  line            1    wreg     unsigned char 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  line            1   14[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       0       0       0
  2781 ;;      Locals:         1       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         1       0       0       0
  2784 ;;Total ram usage:        1 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    6
  2787 ;; This function calls:
  2788 ;;		_SendLCD
  2789 ;; This function is called by:
  2790 ;;		_check_RFID
  2791 ;;		_display_RFID
  2792 ;;		_waitForInput
  2793 ;;		_debug
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text19
  2798  000F56                     __ptext19:
  2799                           	opt callstack 0
  2800  000F56                     _SetLine:
  2801                           	opt callstack 23
  2802                           
  2803                           ;incstack = 0
  2804                           ;SetLine@line stored from wreg
  2805  000F56  6E0F               	movwf	SetLine@line,c
  2806                           
  2807                           ;LCDIO.c: 109:     if(line == 1){
  2808  000F58  040F               	decf	SetLine@line,w,c
  2809  000F5A  A4D8               	btfss	status,2,c
  2810  000F5C  D005               	goto	l2201
  2811                           
  2812                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2813  000F5E  0E00               	movlw	0
  2814  000F60  6E0D               	movwf	SendLCD@type,c
  2815  000F62  0E80               	movlw	128
  2816  000F64  EC93  F007         	call	_SendLCD
  2817  000F68                     l2201:
  2818                           
  2819                           ;LCDIO.c: 113:     if(line == 2){
  2820  000F68  0E02               	movlw	2
  2821  000F6A  180F               	xorwf	SetLine@line,w,c
  2822  000F6C  A4D8               	btfss	status,2,c
  2823  000F6E  D005               	goto	l2205
  2824                           
  2825                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2826  000F70  0E00               	movlw	0
  2827  000F72  6E0D               	movwf	SendLCD@type,c
  2828  000F74  0EC0               	movlw	192
  2829  000F76  EC93  F007         	call	_SendLCD
  2830  000F7A                     l2205:
  2831                           
  2832                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2833  000F7A  0E21               	movlw	33
  2834  000F7C                     u1947:
  2835  000F7C  2EE8               	decfsz	wreg,f,c
  2836  000F7E  D7FE               	bra	u1947
  2837  000F80  F000               	nop	
  2838  000F82  0012               	return		;funcret
  2839  000F84                     __end_of_SetLine:
  2840                           	opt callstack 0
  2841                           
  2842 ;; *************** function _LCD_String *****************
  2843 ;; Defined at:
  2844 ;;		line 119 in file "LCDIO.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  string          2   14[COMRAM] PTR unsigned char 
  2847 ;;		 -> STR_9(16), STR_8(16), STR_7(13), debug@buf2(16), 
  2848 ;;		 -> debug@buf(16), STR_4(16), STR_3(16), STR_2(16), 
  2849 ;;		 -> STR_1(15), 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2861 ;;      Params:         2       0       0       0
  2862 ;;      Locals:         0       0       0       0
  2863 ;;      Temps:          0       0       0       0
  2864 ;;      Totals:         2       0       0       0
  2865 ;;Total ram usage:        2 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    6
  2868 ;; This function calls:
  2869 ;;		_SendLCD
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;;		_check_RFID
  2873 ;;		_stopAndDisplay
  2874 ;;		_waitForInput
  2875 ;;		_debug
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text20
  2880  000CFC                     __ptext20:
  2881                           	opt callstack 0
  2882  000CFC                     _LCD_String:
  2883                           	opt callstack 23
  2884                           
  2885                           ;LCDIO.c: 121: while(*string != 0){
  2886                           
  2887                           ;incstack = 0
  2888  000CFC  D01A               	goto	l2187
  2889  000CFE                     l2181:
  2890                           
  2891                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2892  000CFE  0E01               	movlw	1
  2893  000D00  6E0D               	movwf	SendLCD@type,c
  2894  000D02  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2895  000D06  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2896  000D0A  6AF8               	clrf	tblptru,c
  2897  000D0C  0E02               	movlw	(high __ramtop+-1)
  2898  000D0E  64F7               	cpfsgt	tblptrh,c
  2899  000D10  D003               	bra	u1307
  2900  000D12  0008               	tblrd		*
  2901  000D14  50F5               	movf	tablat,w,c
  2902  000D16  D005               	bra	u1300
  2903  000D18                     u1307:
  2904  000D18  CFF6 FFE9          	movff	tblptrl,fsr0l
  2905  000D1C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2906  000D20  50EF               	movf	indf0,w,c
  2907  000D22                     u1300:
  2908  000D22  EC93  F007         	call	_SendLCD
  2909  000D26  4A0F               	infsnz	LCD_String@string,f,c
  2910  000D28  2A10               	incf	LCD_String@string+1,f,c
  2911                           
  2912                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2913  000D2A  0E21               	movlw	33
  2914  000D2C                     u1957:
  2915  000D2C  2EE8               	decfsz	wreg,f,c
  2916  000D2E  D7FE               	bra	u1957
  2917  000D30  F000               	nop	
  2918  000D32                     l2187:
  2919                           
  2920                           ;LCDIO.c: 121: while(*string != 0){
  2921  000D32  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2922  000D36  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2923  000D3A  6AF8               	clrf	tblptru,c
  2924  000D3C  0E02               	movlw	(high __ramtop+-1)
  2925  000D3E  64F7               	cpfsgt	tblptrh,c
  2926  000D40  D003               	bra	u1317
  2927  000D42  0008               	tblrd		*
  2928  000D44  50F5               	movf	tablat,w,c
  2929  000D46  D005               	bra	u1310
  2930  000D48                     u1317:
  2931  000D48  CFF6 FFE9          	movff	tblptrl,fsr0l
  2932  000D4C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2933  000D50  50EF               	movf	indf0,w,c
  2934  000D52                     u1310:
  2935  000D52  0900               	iorlw	0
  2936  000D54  B4D8               	btfsc	status,2,c
  2937  000D56  0012               	return	
  2938  000D58  D7D2               	goto	l2181
  2939  000D5A                     __end_of_LCD_String:
  2940                           	opt callstack 0
  2941                           
  2942 ;; *************** function _SendLCD *****************
  2943 ;; Defined at:
  2944 ;;		line 44 in file "LCDIO.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  Byte            1    wreg     unsigned char 
  2947 ;;  type            1   12[COMRAM] unsigned char 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  Byte            1   13[COMRAM] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2959 ;;      Params:         1       0       0       0
  2960 ;;      Locals:         1       0       0       0
  2961 ;;      Temps:          0       0       0       0
  2962 ;;      Totals:         2       0       0       0
  2963 ;;Total ram usage:        2 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    5
  2966 ;; This function calls:
  2967 ;;		_LCDout
  2968 ;; This function is called by:
  2969 ;;		_init_LCD
  2970 ;;		_SetLine
  2971 ;;		_LCD_String
  2972 ;;		_ClearLCD
  2973 ;;		_display_RFID
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text21
  2978  000F26                     __ptext21:
  2979                           	opt callstack 0
  2980  000F26                     _SendLCD:
  2981                           	opt callstack 23
  2982                           
  2983                           ;incstack = 0
  2984                           ;SendLCD@Byte stored from wreg
  2985  000F26  6E0E               	movwf	SendLCD@Byte,c
  2986                           
  2987                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2988  000F28  B00D               	btfsc	SendLCD@type,0,c
  2989  000F2A  D002               	bra	u1235
  2990  000F2C  9E89               	bcf	3977,7,c	;volatile
  2991  000F2E  D001               	bra	u1236
  2992  000F30                     u1235:
  2993  000F30  8E89               	bsf	3977,7,c	;volatile
  2994  000F32                     u1236:
  2995                           
  2996                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2997  000F32  380E               	swapf	SendLCD@Byte,w,c
  2998  000F34  0B0F               	andlw	15
  2999  000F36  0B0F               	andlw	15
  3000  000F38  ECD7  F005         	call	_LCDout
  3001                           
  3002                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3003  000F3C  0E06               	movlw	6
  3004  000F3E                     u1967:
  3005  000F3E  2EE8               	decfsz	wreg,f,c
  3006  000F40  D7FE               	bra	u1967
  3007  000F42  D000               	nop2	
  3008                           
  3009                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3010  000F44  500E               	movf	SendLCD@Byte,w,c
  3011  000F46  0B0F               	andlw	15
  3012  000F48  ECD7  F005         	call	_LCDout
  3013                           
  3014                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3015  000F4C  0E21               	movlw	33
  3016  000F4E                     u1977:
  3017  000F4E  2EE8               	decfsz	wreg,f,c
  3018  000F50  D7FE               	bra	u1977
  3019  000F52  F000               	nop	
  3020  000F54  0012               	return		;funcret
  3021  000F56                     __end_of_SendLCD:
  3022                           	opt callstack 0
  3023                           
  3024 ;; *************** function _LCDout *****************
  3025 ;; Defined at:
  3026 ;;		line 31 in file "LCDIO.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  number          1    wreg     unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  number          1   11[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3040 ;;      Params:         0       0       0       0
  3041 ;;      Locals:         1       0       0       0
  3042 ;;      Temps:          1       0       0       0
  3043 ;;      Totals:         2       0       0       0
  3044 ;;Total ram usage:        2 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    4
  3047 ;; This function calls:
  3048 ;;		_E_TOG
  3049 ;; This function is called by:
  3050 ;;		_SendLCD
  3051 ;;		_init_LCD
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           	psect	text22
  3056  000BAE                     __ptext22:
  3057                           	opt callstack 0
  3058  000BAE                     _LCDout:
  3059                           	opt callstack 23
  3060                           
  3061                           ;incstack = 0
  3062                           ;LCDout@number stored from wreg
  3063  000BAE  6E0C               	movwf	LCDout@number,c
  3064                           
  3065                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3066  000BB0  C00C  F00B         	movff	LCDout@number,??_LCDout
  3067  000BB4  0E01               	movlw	1
  3068  000BB6  160B               	andwf	??_LCDout,f,c
  3069  000BB8  508B               	movf	3979,w,c	;volatile
  3070  000BBA  180B               	xorwf	??_LCDout,w,c
  3071  000BBC  0BFE               	andlw	-2
  3072  000BBE  180B               	xorwf	??_LCDout,w,c
  3073  000BC0  6E8B               	movwf	3979,c	;volatile
  3074                           
  3075                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3076  000BC2  C00C  F00B         	movff	LCDout@number,??_LCDout
  3077  000BC6  90D8               	bcf	status,0,c
  3078  000BC8  320B               	rrcf	??_LCDout,f,c
  3079  000BCA  0E01               	movlw	1
  3080  000BCC  160B               	andwf	??_LCDout,f,c
  3081  000BCE  460B               	rlncf	??_LCDout,f,c
  3082  000BD0  460B               	rlncf	??_LCDout,f,c
  3083  000BD2  460B               	rlncf	??_LCDout,f,c
  3084  000BD4  508B               	movf	3979,w,c	;volatile
  3085  000BD6  180B               	xorwf	??_LCDout,w,c
  3086  000BD8  0BF7               	andlw	-9
  3087  000BDA  180B               	xorwf	??_LCDout,w,c
  3088  000BDC  6E8B               	movwf	3979,c	;volatile
  3089                           
  3090                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3091  000BDE  C00C  F00B         	movff	LCDout@number,??_LCDout
  3092  000BE2  90D8               	bcf	status,0,c
  3093  000BE4  320B               	rrcf	??_LCDout,f,c
  3094  000BE6  90D8               	bcf	status,0,c
  3095  000BE8  320B               	rrcf	??_LCDout,f,c
  3096  000BEA  0E01               	movlw	1
  3097  000BEC  160B               	andwf	??_LCDout,f,c
  3098  000BEE  508C               	movf	3980,w,c	;volatile
  3099  000BF0  180B               	xorwf	??_LCDout,w,c
  3100  000BF2  0BFE               	andlw	-2
  3101  000BF4  180B               	xorwf	??_LCDout,w,c
  3102  000BF6  6E8C               	movwf	3980,c	;volatile
  3103                           
  3104                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3105  000BF8  C00C  F00B         	movff	LCDout@number,??_LCDout
  3106  000BFC  90D8               	bcf	status,0,c
  3107  000BFE  320B               	rrcf	??_LCDout,f,c
  3108  000C00  90D8               	bcf	status,0,c
  3109  000C02  320B               	rrcf	??_LCDout,f,c
  3110  000C04  90D8               	bcf	status,0,c
  3111  000C06  320B               	rrcf	??_LCDout,f,c
  3112  000C08  0E01               	movlw	1
  3113  000C0A  160B               	andwf	??_LCDout,f,c
  3114  000C0C  460B               	rlncf	??_LCDout,f,c
  3115  000C0E  508C               	movf	3980,w,c	;volatile
  3116  000C10  180B               	xorwf	??_LCDout,w,c
  3117  000C12  0BFD               	andlw	-3
  3118  000C14  180B               	xorwf	??_LCDout,w,c
  3119  000C16  6E8C               	movwf	3980,c	;volatile
  3120                           
  3121                           ;LCDIO.c: 39:  E_TOG();
  3122  000C18  EC1D  F008         	call	_E_TOG	;wreg free
  3123                           
  3124                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3125  000C1C  0E03               	movlw	3
  3126  000C1E                     u1987:
  3127  000C1E  2EE8               	decfsz	wreg,f,c
  3128  000C20  D7FE               	bra	u1987
  3129  000C22  F000               	nop	
  3130  000C24  0012               	return		;funcret
  3131  000C26                     __end_of_LCDout:
  3132                           	opt callstack 0
  3133                           
  3134 ;; *************** function _E_TOG *****************
  3135 ;; Defined at:
  3136 ;;		line 23 in file "LCDIO.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3150 ;;      Params:         0       0       0       0
  3151 ;;      Locals:         0       0       0       0
  3152 ;;      Temps:          0       0       0       0
  3153 ;;      Totals:         0       0       0       0
  3154 ;;Total ram usage:        0 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    3
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_LCDout
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text23
  3165  00103A                     __ptext23:
  3166                           	opt callstack 0
  3167  00103A                     _E_TOG:
  3168                           	opt callstack 23
  3169                           
  3170                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3171                           
  3172                           ;incstack = 0
  3173  00103A  8C89               	bsf	3977,6,c	;volatile
  3174                           
  3175                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3176  00103C  0E03               	movlw	3
  3177  00103E                     u1997:
  3178  00103E  2EE8               	decfsz	wreg,f,c
  3179  001040  D7FE               	bra	u1997
  3180  001042  F000               	nop	
  3181                           
  3182                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3183  001044  9C89               	bcf	3977,6,c	;volatile
  3184  001046  0012               	return		;funcret
  3185  001048                     __end_of_E_TOG:
  3186                           	opt callstack 0
  3187                           
  3188 ;; *************** function _init_motor_struct *****************
  3189 ;; Defined at:
  3190 ;;		line 99 in file "dc_motor.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3193 ;;		 -> main@motorL(9), 
  3194 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3195 ;;		 -> main@motorR(9), 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3207 ;;      Params:         4       0       0       0
  3208 ;;      Locals:         0       0       0       0
  3209 ;;      Temps:          0       0       0       0
  3210 ;;      Totals:         4       0       0       0
  3211 ;;Total ram usage:        4 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    5
  3214 ;; This function calls:
  3215 ;;		_setMotorPWM
  3216 ;; This function is called by:
  3217 ;;		_main
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text24
  3222  0006E8                     __ptext24:
  3223                           	opt callstack 0
  3224  0006E8                     _init_motor_struct:
  3225                           	opt callstack 25
  3226                           
  3227                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3228                           
  3229                           ;incstack = 0
  3230  0006E8  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3231  0006EC  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3232  0006F0  0E00               	movlw	0
  3233  0006F2  6EDF               	movwf	indf2,c
  3234                           
  3235                           ;dc_motor.c: 103: mL->direction = 1;
  3236  0006F4  EE20 F001          	lfsr	2,1
  3237  0006F8  5022               	movf	init_motor_struct@mL,w,c
  3238  0006FA  26D9               	addwf	fsr2l,f,c
  3239  0006FC  5023               	movf	init_motor_struct@mL+1,w,c
  3240  0006FE  22DA               	addwfc	fsr2h,f,c
  3241  000700  0E01               	movlw	1
  3242  000702  6EDF               	movwf	indf2,c
  3243                           
  3244                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3245  000704  EE20 F002          	lfsr	2,2
  3246  000708  5022               	movf	init_motor_struct@mL,w,c
  3247  00070A  26D9               	addwf	fsr2l,f,c
  3248  00070C  5023               	movf	init_motor_struct@mL+1,w,c
  3249  00070E  22DA               	addwfc	fsr2h,f,c
  3250  000710  0E79               	movlw	121
  3251  000712  6EDE               	movwf	postinc2,c
  3252  000714  0E0F               	movlw	15
  3253  000716  6EDD               	movwf	postdec2,c
  3254                           
  3255                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3256  000718  EE20 F004          	lfsr	2,4
  3257  00071C  5022               	movf	init_motor_struct@mL,w,c
  3258  00071E  26D9               	addwf	fsr2l,f,c
  3259  000720  5023               	movf	init_motor_struct@mL+1,w,c
  3260  000722  22DA               	addwfc	fsr2h,f,c
  3261  000724  0E78               	movlw	120
  3262  000726  6EDE               	movwf	postinc2,c
  3263  000728  0E0F               	movlw	15
  3264  00072A  6EDD               	movwf	postdec2,c
  3265                           
  3266                           ;dc_motor.c: 106: mL->dir_pin=0;
  3267  00072C  EE20 F006          	lfsr	2,6
  3268  000730  5022               	movf	init_motor_struct@mL,w,c
  3269  000732  26D9               	addwf	fsr2l,f,c
  3270  000734  5023               	movf	init_motor_struct@mL+1,w,c
  3271  000736  22DA               	addwfc	fsr2h,f,c
  3272  000738  0E00               	movlw	0
  3273  00073A  6EDF               	movwf	indf2,c
  3274                           
  3275                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3276  00073C  EE20 F007          	lfsr	2,7
  3277  000740  5022               	movf	init_motor_struct@mL,w,c
  3278  000742  26D9               	addwf	fsr2l,f,c
  3279  000744  5023               	movf	init_motor_struct@mL+1,w,c
  3280  000746  22DA               	addwfc	fsr2h,f,c
  3281  000748  0EC7               	movlw	199
  3282  00074A  6EDE               	movwf	postinc2,c
  3283  00074C  0E00               	movlw	0
  3284  00074E  6EDD               	movwf	postdec2,c
  3285                           
  3286                           ;dc_motor.c: 109: mR->power = 0;
  3287  000750  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3288  000754  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3289  000758  0E00               	movlw	0
  3290  00075A  6EDF               	movwf	indf2,c
  3291                           
  3292                           ;dc_motor.c: 110: mR->direction = 1;
  3293  00075C  EE20 F001          	lfsr	2,1
  3294  000760  5024               	movf	init_motor_struct@mR,w,c
  3295  000762  26D9               	addwf	fsr2l,f,c
  3296  000764  5025               	movf	init_motor_struct@mR+1,w,c
  3297  000766  22DA               	addwfc	fsr2h,f,c
  3298  000768  0E01               	movlw	1
  3299  00076A  6EDF               	movwf	indf2,c
  3300                           
  3301                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3302  00076C  EE20 F002          	lfsr	2,2
  3303  000770  5024               	movf	init_motor_struct@mR,w,c
  3304  000772  26D9               	addwf	fsr2l,f,c
  3305  000774  5025               	movf	init_motor_struct@mR+1,w,c
  3306  000776  22DA               	addwfc	fsr2h,f,c
  3307  000778  0E77               	movlw	119
  3308  00077A  6EDE               	movwf	postinc2,c
  3309  00077C  0E0F               	movlw	15
  3310  00077E  6EDD               	movwf	postdec2,c
  3311                           
  3312                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3313  000780  EE20 F004          	lfsr	2,4
  3314  000784  5024               	movf	init_motor_struct@mR,w,c
  3315  000786  26D9               	addwf	fsr2l,f,c
  3316  000788  5025               	movf	init_motor_struct@mR+1,w,c
  3317  00078A  22DA               	addwfc	fsr2h,f,c
  3318  00078C  0E76               	movlw	118
  3319  00078E  6EDE               	movwf	postinc2,c
  3320  000790  0E0F               	movlw	15
  3321  000792  6EDD               	movwf	postdec2,c
  3322                           
  3323                           ;dc_motor.c: 113: mR->dir_pin=2;
  3324  000794  EE20 F006          	lfsr	2,6
  3325  000798  5024               	movf	init_motor_struct@mR,w,c
  3326  00079A  26D9               	addwf	fsr2l,f,c
  3327  00079C  5025               	movf	init_motor_struct@mR+1,w,c
  3328  00079E  22DA               	addwfc	fsr2h,f,c
  3329  0007A0  0E02               	movlw	2
  3330  0007A2  6EDF               	movwf	indf2,c
  3331                           
  3332                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3333  0007A4  EE20 F007          	lfsr	2,7
  3334  0007A8  5024               	movf	init_motor_struct@mR,w,c
  3335  0007AA  26D9               	addwf	fsr2l,f,c
  3336  0007AC  5025               	movf	init_motor_struct@mR+1,w,c
  3337  0007AE  22DA               	addwfc	fsr2h,f,c
  3338  0007B0  0EC7               	movlw	199
  3339  0007B2  6EDE               	movwf	postinc2,c
  3340  0007B4  0E00               	movlw	0
  3341  0007B6  6EDD               	movwf	postdec2,c
  3342                           
  3343                           ;dc_motor.c: 116: setMotorPWM(mL);
  3344  0007B8  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3345  0007BC  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3346  0007C0  EC61  F002         	call	_setMotorPWM	;wreg free
  3347                           
  3348                           ;dc_motor.c: 117: setMotorPWM(mR);
  3349  0007C4  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3350  0007C8  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3351  0007CC  EC61  F002         	call	_setMotorPWM	;wreg free
  3352  0007D0  0012               	return		;funcret
  3353  0007D2                     __end_of_init_motor_struct:
  3354                           	opt callstack 0
  3355                           
  3356 ;; *************** function _setMotorPWM *****************
  3357 ;; Defined at:
  3358 ;;		line 18 in file "dc_motor.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3361 ;;		 -> main@motorR(9), main@motorL(9), 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  PWMduty         2   31[COMRAM] int 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3373 ;;      Params:         2       0       0       0
  3374 ;;      Locals:         2       0       0       0
  3375 ;;      Temps:          5       0       0       0
  3376 ;;      Totals:         9       0       0       0
  3377 ;;Total ram usage:        9 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    4
  3380 ;; This function calls:
  3381 ;;		___awdiv
  3382 ;;		___wmul
  3383 ;; This function is called by:
  3384 ;;		_stop
  3385 ;;		_turnRight
  3386 ;;		_moveForward
  3387 ;;		_moveBackward
  3388 ;;		_init_motor_struct
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text25
  3393  0004C2                     __ptext25:
  3394                           	opt callstack 0
  3395  0004C2                     _setMotorPWM:
  3396                           	opt callstack 24
  3397                           
  3398                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3399                           
  3400                           ;incstack = 0
  3401  0004C2  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3402  0004C6  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3403  0004CA  50DF               	movf	indf2,w,c
  3404  0004CC  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3405  0004CE  501B               	movf	??_setMotorPWM,w,c
  3406  0004D0  6E0B               	movwf	___wmul@multiplier,c
  3407  0004D2  6A0C               	clrf	___wmul@multiplier+1,c
  3408  0004D4  EE20 F007          	lfsr	2,7
  3409  0004D8  5019               	movf	setMotorPWM@m,w,c
  3410  0004DA  26D9               	addwf	fsr2l,f,c
  3411  0004DC  501A               	movf	setMotorPWM@m+1,w,c
  3412  0004DE  22DA               	addwfc	fsr2h,f,c
  3413  0004E0  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3414  0004E4  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3415  0004E8  ECD5  F007         	call	___wmul	;wreg free
  3416  0004EC  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3417  0004F0  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3418  0004F4  0E00               	movlw	0
  3419  0004F6  6E14               	movwf	___awdiv@divisor+1,c
  3420  0004F8  0E64               	movlw	100
  3421  0004FA  6E13               	movwf	___awdiv@divisor,c
  3422  0004FC  EC94  F004         	call	___awdiv	;wreg free
  3423  000500  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3424  000504  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3425                           
  3426                           ;dc_motor.c: 24:     if (m->direction)
  3427  000508  EE20 F001          	lfsr	2,1
  3428  00050C  5019               	movf	setMotorPWM@m,w,c
  3429  00050E  26D9               	addwf	fsr2l,f,c
  3430  000510  501A               	movf	setMotorPWM@m+1,w,c
  3431  000512  22DA               	addwfc	fsr2h,f,c
  3432  000514  50DF               	movf	indf2,w,c
  3433  000516  B4D8               	btfsc	status,2,c
  3434  000518  D024               	goto	l2195
  3435                           
  3436                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3437  00051A  EE20 F006          	lfsr	2,6
  3438  00051E  5019               	movf	setMotorPWM@m,w,c
  3439  000520  26D9               	addwf	fsr2l,f,c
  3440  000522  501A               	movf	setMotorPWM@m+1,w,c
  3441  000524  22DA               	addwfc	fsr2h,f,c
  3442  000526  50DF               	movf	indf2,w,c
  3443  000528  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3444  00052A  0E01               	movlw	1
  3445  00052C  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3446  00052E  2A1B               	incf	??_setMotorPWM,f,c
  3447  000530  D002               	goto	u1344
  3448  000532                     u1345:
  3449  000532  90D8               	bcf	status,0,c
  3450  000534  361C               	rlcf	??_setMotorPWM+1,f,c
  3451  000536                     u1344:
  3452  000536  2E1B               	decfsz	??_setMotorPWM,f,c
  3453  000538  D7FC               	goto	u1345
  3454  00053A  501C               	movf	??_setMotorPWM+1,w,c
  3455  00053C  108A               	iorwf	3978,w,c	;volatile
  3456  00053E  6E8A               	movwf	3978,c	;volatile
  3457                           
  3458                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3459  000540  EE20 F007          	lfsr	2,7
  3460  000544  5019               	movf	setMotorPWM@m,w,c
  3461  000546  26D9               	addwf	fsr2l,f,c
  3462  000548  501A               	movf	setMotorPWM@m+1,w,c
  3463  00054A  22DA               	addwfc	fsr2h,f,c
  3464  00054C  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3465  000550  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3466  000554  5020               	movf	setMotorPWM@PWMduty,w,c
  3467  000556  5C1B               	subwf	??_setMotorPWM,w,c
  3468  000558  6E20               	movwf	setMotorPWM@PWMduty,c
  3469  00055A  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3470  00055C  581C               	subwfb	??_setMotorPWM+1,w,c
  3471  00055E  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3472                           
  3473                           ;dc_motor.c: 28:     }
  3474  000560  D014               	goto	l121
  3475  000562                     l2195:
  3476                           
  3477                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3478  000562  EE20 F006          	lfsr	2,6
  3479  000566  5019               	movf	setMotorPWM@m,w,c
  3480  000568  26D9               	addwf	fsr2l,f,c
  3481  00056A  501A               	movf	setMotorPWM@m+1,w,c
  3482  00056C  22DA               	addwfc	fsr2h,f,c
  3483  00056E  50DF               	movf	indf2,w,c
  3484  000570  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3485  000572  0E01               	movlw	1
  3486  000574  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3487  000576  2A1B               	incf	??_setMotorPWM,f,c
  3488  000578  D002               	goto	u1354
  3489  00057A                     u1355:
  3490  00057A  90D8               	bcf	status,0,c
  3491  00057C  361C               	rlcf	??_setMotorPWM+1,f,c
  3492  00057E                     u1354:
  3493  00057E  2E1B               	decfsz	??_setMotorPWM,f,c
  3494  000580  D7FC               	goto	u1355
  3495  000582  501C               	movf	??_setMotorPWM+1,w,c
  3496  000584  0AFF               	xorlw	255
  3497  000586  148A               	andwf	3978,w,c	;volatile
  3498  000588  6E8A               	movwf	3978,c	;volatile
  3499  00058A                     l121:
  3500                           
  3501                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3502  00058A  EE20 F002          	lfsr	2,2
  3503  00058E  5019               	movf	setMotorPWM@m,w,c
  3504  000590  26D9               	addwf	fsr2l,f,c
  3505  000592  501A               	movf	setMotorPWM@m+1,w,c
  3506  000594  22DA               	addwfc	fsr2h,f,c
  3507  000596  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3508  00059A  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3509  00059E  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3510  0005A2  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3511  0005A6  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3512  0005A8  46E8               	rlncf	wreg,f,c
  3513  0005AA  0BFC               	andlw	252
  3514  0005AC  6EDF               	movwf	indf2,c
  3515                           
  3516                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3517  0005AE  EE20 F004          	lfsr	2,4
  3518  0005B2  5019               	movf	setMotorPWM@m,w,c
  3519  0005B4  26D9               	addwf	fsr2l,f,c
  3520  0005B6  501A               	movf	setMotorPWM@m+1,w,c
  3521  0005B8  22DA               	addwfc	fsr2h,f,c
  3522  0005BA  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3523  0005BE  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3524  0005C2  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3525  0005C6  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3526  0005CA  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3527  0005CE  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3528  0005D2  0E06               	movlw	6
  3529  0005D4  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3530  0005D6                     u1365:
  3531  0005D6  341E               	rlcf	??_setMotorPWM+3,w,c
  3532  0005D8  321E               	rrcf	??_setMotorPWM+3,f,c
  3533  0005DA  321D               	rrcf	??_setMotorPWM+2,f,c
  3534  0005DC  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3535  0005DE  D7FB               	goto	u1365
  3536  0005E0  501D               	movf	??_setMotorPWM+2,w,c
  3537  0005E2  6EDF               	movwf	indf2,c
  3538  0005E4  0012               	return		;funcret
  3539  0005E6                     __end_of_setMotorPWM:
  3540                           	opt callstack 0
  3541                           
  3542 ;; *************** function ___wmul *****************
  3543 ;; Defined at:
  3544 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  multiplier      2   10[COMRAM] unsigned int 
  3547 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  product         2   14[COMRAM] unsigned int 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  2   10[COMRAM] unsigned int 
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, prodl, prodh
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3559 ;;      Params:         4       0       0       0
  3560 ;;      Locals:         2       0       0       0
  3561 ;;      Temps:          0       0       0       0
  3562 ;;      Totals:         6       0       0       0
  3563 ;;Total ram usage:        6 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    3
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_setMotorPWM
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text26
  3574  000FAA                     __ptext26:
  3575                           	opt callstack 0
  3576  000FAA                     ___wmul:
  3577                           	opt callstack 24
  3578                           
  3579                           ;incstack = 0
  3580  000FAA  500B               	movf	___wmul@multiplier,w,c
  3581  000FAC  020D               	mulwf	___wmul@multiplicand,c
  3582  000FAE  CFF3 F00F          	movff	prodl,___wmul@product
  3583  000FB2  CFF4 F010          	movff	prodh,___wmul@product+1
  3584  000FB6  500B               	movf	___wmul@multiplier,w,c
  3585  000FB8  020E               	mulwf	___wmul@multiplicand+1,c
  3586  000FBA  50F3               	movf	prodl,w,c
  3587  000FBC  2610               	addwf	___wmul@product+1,f,c
  3588  000FBE  500C               	movf	___wmul@multiplier+1,w,c
  3589  000FC0  020D               	mulwf	___wmul@multiplicand,c
  3590  000FC2  50F3               	movf	prodl,w,c
  3591  000FC4  2610               	addwf	___wmul@product+1,f,c
  3592  000FC6  C00F  F00B         	movff	___wmul@product,?___wmul
  3593  000FCA  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3594  000FCE  0012               	return		;funcret
  3595  000FD0                     __end_of___wmul:
  3596                           	opt callstack 0
  3597                           
  3598 ;; *************** function ___awdiv *****************
  3599 ;; Defined at:
  3600 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  dividend        2   16[COMRAM] int 
  3603 ;;  divisor         2   18[COMRAM] int 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  quotient        2   22[COMRAM] int 
  3606 ;;  sign            1   21[COMRAM] unsigned char 
  3607 ;;  counter         1   20[COMRAM] unsigned char 
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  2   16[COMRAM] int 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3617 ;;      Params:         4       0       0       0
  3618 ;;      Locals:         4       0       0       0
  3619 ;;      Temps:          0       0       0       0
  3620 ;;      Totals:         8       0       0       0
  3621 ;;Total ram usage:        8 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    3
  3624 ;; This function calls:
  3625 ;;		Nothing
  3626 ;; This function is called by:
  3627 ;;		_setMotorPWM
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text27
  3632  000928                     __ptext27:
  3633                           	opt callstack 0
  3634  000928                     ___awdiv:
  3635                           	opt callstack 24
  3636                           
  3637                           ;incstack = 0
  3638  000928  0E00               	movlw	0
  3639  00092A  6E16               	movwf	___awdiv@sign,c
  3640  00092C  AE14               	btfss	___awdiv@divisor+1,7,c
  3641  00092E  D006               	goto	l2143
  3642  000930  6C13               	negf	___awdiv@divisor,c
  3643  000932  1E14               	comf	___awdiv@divisor+1,f,c
  3644  000934  B0D8               	btfsc	status,0,c
  3645  000936  2A14               	incf	___awdiv@divisor+1,f,c
  3646  000938  0E01               	movlw	1
  3647  00093A  6E16               	movwf	___awdiv@sign,c
  3648  00093C                     l2143:
  3649  00093C  AE12               	btfss	___awdiv@dividend+1,7,c
  3650  00093E  D006               	goto	l2149
  3651  000940  6C11               	negf	___awdiv@dividend,c
  3652  000942  1E12               	comf	___awdiv@dividend+1,f,c
  3653  000944  B0D8               	btfsc	status,0,c
  3654  000946  2A12               	incf	___awdiv@dividend+1,f,c
  3655  000948  0E01               	movlw	1
  3656  00094A  1A16               	xorwf	___awdiv@sign,f,c
  3657  00094C                     l2149:
  3658  00094C  0E00               	movlw	0
  3659  00094E  6E18               	movwf	___awdiv@quotient+1,c
  3660  000950  0E00               	movlw	0
  3661  000952  6E17               	movwf	___awdiv@quotient,c
  3662  000954  5013               	movf	___awdiv@divisor,w,c
  3663  000956  1014               	iorwf	___awdiv@divisor+1,w,c
  3664  000958  B4D8               	btfsc	status,2,c
  3665  00095A  D01C               	goto	l2171
  3666  00095C  0E01               	movlw	1
  3667  00095E  6E15               	movwf	___awdiv@counter,c
  3668  000960  D004               	goto	l2157
  3669  000962                     l2155:
  3670  000962  90D8               	bcf	status,0,c
  3671  000964  3613               	rlcf	___awdiv@divisor,f,c
  3672  000966  3614               	rlcf	___awdiv@divisor+1,f,c
  3673  000968  2A15               	incf	___awdiv@counter,f,c
  3674  00096A                     l2157:
  3675  00096A  AE14               	btfss	___awdiv@divisor+1,7,c
  3676  00096C  D7FA               	goto	l2155
  3677  00096E                     u1270:
  3678  00096E  90D8               	bcf	status,0,c
  3679  000970  3617               	rlcf	___awdiv@quotient,f,c
  3680  000972  3618               	rlcf	___awdiv@quotient+1,f,c
  3681  000974  5013               	movf	___awdiv@divisor,w,c
  3682  000976  5C11               	subwf	___awdiv@dividend,w,c
  3683  000978  5014               	movf	___awdiv@divisor+1,w,c
  3684  00097A  5812               	subwfb	___awdiv@dividend+1,w,c
  3685  00097C  A0D8               	btfss	status,0,c
  3686  00097E  D005               	goto	l2167
  3687  000980  5013               	movf	___awdiv@divisor,w,c
  3688  000982  5E11               	subwf	___awdiv@dividend,f,c
  3689  000984  5014               	movf	___awdiv@divisor+1,w,c
  3690  000986  5A12               	subwfb	___awdiv@dividend+1,f,c
  3691  000988  8017               	bsf	___awdiv@quotient,0,c
  3692  00098A                     l2167:
  3693  00098A  90D8               	bcf	status,0,c
  3694  00098C  3214               	rrcf	___awdiv@divisor+1,f,c
  3695  00098E  3213               	rrcf	___awdiv@divisor,f,c
  3696  000990  2E15               	decfsz	___awdiv@counter,f,c
  3697  000992  D7ED               	goto	u1270
  3698  000994                     l2171:
  3699  000994  5016               	movf	___awdiv@sign,w,c
  3700  000996  B4D8               	btfsc	status,2,c
  3701  000998  D004               	goto	l2175
  3702  00099A  6C17               	negf	___awdiv@quotient,c
  3703  00099C  1E18               	comf	___awdiv@quotient+1,f,c
  3704  00099E  B0D8               	btfsc	status,0,c
  3705  0009A0  2A18               	incf	___awdiv@quotient+1,f,c
  3706  0009A2                     l2175:
  3707  0009A2  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3708  0009A6  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3709  0009AA  0012               	return		;funcret
  3710  0009AC                     __end_of___awdiv:
  3711                           	opt callstack 0
  3712                           
  3713 ;; *************** function _InterruptHandlerLow *****************
  3714 ;; Defined at:
  3715 ;;		line 93 in file "main.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3729 ;;      Params:         0       0       0       0
  3730 ;;      Locals:         0       0       0       0
  3731 ;;      Temps:          3       0       0       0
  3732 ;;      Totals:         3       0       0       0
  3733 ;;Total ram usage:        3 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    2
  3736 ;; This function calls:
  3737 ;;		Nothing
  3738 ;; This function is called by:
  3739 ;;		Interrupt level 1
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	intcodelo
  3744  000018                     __pintcodelo:
  3745                           	opt callstack 0
  3746  000018                     _InterruptHandlerLow:
  3747                           	opt callstack 22
  3748                           
  3749                           ;incstack = 0
  3750  000018  8045               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3751  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3752  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3753  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3754                           
  3755                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1))
  3756  000026  A4F2               	btfss	4082,2,c	;volatile
  3757  000028  D00A               	goto	i1l70
  3758  00002A  043F               	decf	_robot_mode,w,c	;volatile
  3759  00002C  A4D8               	btfss	status,2,c
  3760  00002E  D007               	goto	i1l70
  3761                           
  3762                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3763  000030  0E01               	movlw	1
  3764  000032  2640               	addwf	_movement_time,f,c	;volatile
  3765  000034  0E00               	movlw	0
  3766  000036  2241               	addwfc	_movement_time+1,f,c	;volatile
  3767  000038  2242               	addwfc	_movement_time+2,f,c	;volatile
  3768  00003A  2243               	addwfc	_movement_time+3,f,c	;volatile
  3769  00003C  D00B               	goto	i1l1567
  3770  00003E                     i1l70:
  3771  00003E  A4F2               	btfss	4082,2,c	;volatile
  3772  000040  D009               	goto	i1l1567
  3773  000042  0E02               	movlw	2
  3774  000044  183F               	xorwf	_robot_mode,w,c	;volatile
  3775  000046  A4D8               	btfss	status,2,c
  3776  000048  D005               	goto	i1l1567
  3777                           
  3778                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  3779  00004A  0640               	decf	_movement_time,f,c	;volatile
  3780  00004C  0E00               	movlw	0
  3781  00004E  5A41               	subwfb	_movement_time+1,f,c	;volatile
  3782  000050  5A42               	subwfb	_movement_time+2,f,c	;volatile
  3783  000052  5A43               	subwfb	_movement_time+3,f,c	;volatile
  3784  000054                     i1l1567:
  3785                           
  3786                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  3787                           
  3788                           ;main.c: 108:     else
  3789                           
  3790                           ;main.c: 106:     }
  3791                           
  3792                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  3793  000054  94F2               	bcf	4082,2,c	;volatile
  3794  000056  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  3795  00005A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  3796  00005E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  3797  000062  9045               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3798  000064  0010               	retfie	
  3799  000066                     __end_of_InterruptHandlerLow:
  3800                           	opt callstack 0
  3801                           
  3802 ;; *************** function _InterruptHandlerHigh *****************
  3803 ;; Defined at:
  3804 ;;		line 75 in file "main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  throwaway       1    0        unsigned char 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      void 
  3811 ;; Registers used:
  3812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3818 ;;      Params:         0       0       0       0
  3819 ;;      Locals:         1       0       0       0
  3820 ;;      Temps:          2       0       0       0
  3821 ;;      Totals:         3       0       0       0
  3822 ;;Total ram usage:        3 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    1
  3825 ;; This function calls:
  3826 ;;		_processRFID
  3827 ;; This function is called by:
  3828 ;;		Interrupt level 2
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	intcode
  3833  000008                     __pintcode:
  3834                           	opt callstack 0
  3835  000008                     _InterruptHandlerHigh:
  3836                           	opt callstack 22
  3837                           
  3838                           ;incstack = 0
  3839  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3840  00000A  EF79  F007         	goto	int_func
  3841                           
  3842                           	psect	intcode_body
  3843  000EF2                     __pintcode_body:
  3844                           	opt callstack 22
  3845  000EF2                     int_func:
  3846                           	opt callstack 22
  3847  000EF2  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3848  000EF6  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3849                           
  3850                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3851  000EFA  AA9E               	btfss	3998,5,c	;volatile
  3852  000EFC  D00D               	goto	i2l63
  3853  000EFE  043F               	decf	_robot_mode,w,c	;volatile
  3854  000F00  A4D8               	btfss	status,2,c
  3855  000F02  D00A               	goto	i2l63
  3856                           
  3857                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3858  000F04  0E84               	movlw	low _RFIDbuf
  3859  000F06  6E01               	movwf	processRFID@RFIDbuf,c
  3860  000F08  0E00               	movlw	high _RFIDbuf
  3861  000F0A  6E02               	movwf	processRFID@RFIDbuf+1,c
  3862  000F0C  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3863  000F10  ECDB  F006         	call	_processRFID	;wreg free
  3864  000F14  6E44               	movwf	_RFID_flag,c	;volatile
  3865                           
  3866                           ;main.c: 83:     }
  3867  000F16  D001               	goto	i2l65
  3868  000F18                     i2l63:
  3869  000F18  50AE               	movf	4014,w,c	;volatile
  3870  000F1A                     i2l65:
  3871  000F1A  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3872  000F1E  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3873  000F22  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3874  000F24  0011               	retfie		f
  3875  000F26                     __end_of_InterruptHandlerHigh:
  3876                           	opt callstack 0
  3877                           
  3878 ;; *************** function _processRFID *****************
  3879 ;; Defined at:
  3880 ;;		line 34 in file "RFID.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3883 ;;		 -> RFIDbuf(12), 
  3884 ;;  latestChar      1    2[COMRAM] unsigned char 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  i               1    3[COMRAM] unsigned char 
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      unsigned char 
  3889 ;; Registers used:
  3890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3896 ;;      Params:         3       0       0       0
  3897 ;;      Locals:         1       0       0       0
  3898 ;;      Temps:          0       0       0       0
  3899 ;;      Totals:         4       0       0       0
  3900 ;;Total ram usage:        4 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_InterruptHandlerHigh
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text30
  3910  000DB6                     __ptext30:
  3911                           	opt callstack 0
  3912  000DB6                     _processRFID:
  3913                           	opt callstack 22
  3914                           
  3915                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3916                           
  3917                           ;incstack = 0
  3918  000DB6  0E03               	movlw	3
  3919  000DB8  1803               	xorwf	processRFID@latestChar,w,c
  3920  000DBA  A4D8               	btfss	status,2,c
  3921  000DBC  D002               	goto	i2l1931
  3922                           
  3923                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3924  000DBE  0E01               	movlw	1
  3925  000DC0  0012               	return	
  3926  000DC2                     i2l1931:
  3927                           
  3928                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3929  000DC2  0E02               	movlw	2
  3930  000DC4  1803               	xorwf	processRFID@latestChar,w,c
  3931  000DC6  A4D8               	btfss	status,2,c
  3932  000DC8  D012               	goto	i2l1951
  3933                           
  3934                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3935  000DCA  0E00               	movlw	0
  3936  000DCC  6E3E               	movwf	processRFID@position_in_buf,c
  3937                           
  3938                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3939  000DCE  0E00               	movlw	0
  3940  000DD0  6E04               	movwf	processRFID@i,c
  3941  000DD2                     i2l1939:
  3942                           
  3943                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3944  000DD2  5004               	movf	processRFID@i,w,c
  3945  000DD4  2401               	addwf	processRFID@RFIDbuf,w,c
  3946  000DD6  6ED9               	movwf	fsr2l,c
  3947  000DD8  0E00               	movlw	0
  3948  000DDA  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3949  000DDC  6EDA               	movwf	fsr2h,c
  3950  000DDE  0E00               	movlw	0
  3951  000DE0  6EDF               	movwf	indf2,c
  3952                           
  3953                           ;RFID.c: 56:            }
  3954  000DE2  2A04               	incf	processRFID@i,f,c
  3955  000DE4  0E0B               	movlw	11
  3956  000DE6  6404               	cpfsgt	processRFID@i,c
  3957  000DE8  D7F4               	goto	i2l1939
  3958  000DEA                     i2u109_40:
  3959                           
  3960                           ;RFID.c: 57:            return 0;
  3961  000DEA  0E00               	movlw	0
  3962  000DEC  0012               	return	
  3963  000DEE                     i2l1951:
  3964                           
  3965                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  3966  000DEE  503E               	movf	processRFID@position_in_buf,w,c
  3967  000DF0  2401               	addwf	processRFID@RFIDbuf,w,c
  3968  000DF2  6ED9               	movwf	fsr2l,c
  3969  000DF4  0E00               	movlw	0
  3970  000DF6  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3971  000DF8  6EDA               	movwf	fsr2h,c
  3972  000DFA  C003  FFDF         	movff	processRFID@latestChar,indf2
  3973                           
  3974                           ;RFID.c: 63:             position_in_buf++;
  3975  000DFE  2A3E               	incf	processRFID@position_in_buf,f,c
  3976  000E00  D7F4               	goto	i2u109_40
  3977  000E02                     __end_of_processRFID:
  3978                           	opt callstack 0
  3979                           
  3980                           	psect	rparam
  3981  0000                     
  3982                           	psect	temp
  3983  000045                     btemp:
  3984                           	opt callstack 0
  3985  000045                     	ds	1
  3986  0000                     int$flags	set	btemp
  3987  0000                     wtemp8	set	btemp+1
  3988  0000                     ttemp5	set	btemp+1
  3989  0000                     ttemp6	set	btemp+4
  3990  0000                     ttemp7	set	btemp+8
  3991                           tosu	equ	0xFFF
  3992                           tosh	equ	0xFFE
  3993                           tosl	equ	0xFFD
  3994                           stkptr	equ	0xFFC
  3995                           pclatu	equ	0xFFB
  3996                           pclath	equ	0xFFA
  3997                           pcl	equ	0xFF9
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           prodh	equ	0xFF4
  4003                           prodl	equ	0xFF3
  4004                           indf0	equ	0xFEF
  4005                           postinc0	equ	0xFEE
  4006                           postdec0	equ	0xFED
  4007                           preinc0	equ	0xFEC
  4008                           plusw0	equ	0xFEB
  4009                           fsr0h	equ	0xFEA
  4010                           fsr0l	equ	0xFE9
  4011                           wreg	equ	0xFE8
  4012                           indf1	equ	0xFE7
  4013                           postinc1	equ	0xFE6
  4014                           postdec1	equ	0xFE5
  4015                           preinc1	equ	0xFE4
  4016                           plusw1	equ	0xFE3
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           bsr	equ	0xFE0
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           preinc2	equ	0xFDC
  4024                           plusw2	equ	0xFDB
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8


Data Sizes:
    Strings     111
    Constant    0
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      68
    BANK0           160     26      74
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    moveToBeacon@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1857_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[16]), STR_8(CODE[16]), STR_7(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _main->_scanForBeacon
    _waitForInput->_LCD_String
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   36134
                                              0 BANK0     26    26      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4356
                                             16 COMRAM     4     4      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      10     4      6    6309
                                             42 COMRAM    10     4      6
                           _ClearLCD
                         _LCD_String
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     7      6    3683
                                             42 COMRAM    13     7      6
                      _classify_data
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       14    10      4     400
                                             10 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    3284
                                             42 COMRAM    12     4      8
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     1     12   11608
                                             42 COMRAM    13     1     12
                         _check_RFID
                       _display_RFID
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4446
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1992
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _classify_data
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      4A       5       46.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      44       1       72.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8E       3        0.0%
DATA                 0      0      8E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Mar 06 09:23:14 2020

                           l55 0E8C                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l121 058A                            l337 0B5A            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 006E  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2201 0F68                           l2205 0F7A                           l2143 093C  
                         l2305 0ADA                           l2321 0A58                           l2155 0962  
                         l2171 0994                           l2315 0B1C                           l2331 0A9A  
                         l2157 096A                           l2149 094C                           l2181 0CFE  
                         l2175 09A2                           l2167 098A                           l2351 03FE  
                         l2503 0C5C                           l2361 04AE                           l2345 03BC  
                         l2273 0D70                           l2195 0562                           l2187 0D32  
                         l2339 037A                           l2531 0684                           l2523 0624  
                         l2373 0E5A                           l2269 0D62                           l2509 0C8E  
                         l2471 0E1E                           l2391 0924                           l2535 06B2  
                         l2527 0648                           l2289 09D6                           l2449 0B7C  
                         l2299 0A18                           l2459 0CC6                           l2539 06DA  
                         l2485 0EDA                           l2493 0C44                           STR_1 0351  
                         STR_2 0341                           STR_3 0331                           STR_4 0321  
                         STR_5 036D                           STR_7 0360                           STR_8 0311  
                         STR_9 0301                           u1300 0D22                           u1310 0D52  
                         u1235 0F30                           u1307 0D18                           u1236 0F32  
                         u1500 042C                           u1317 0D48                           u1270 096E  
                         u1510 042E                           _LATB 000F8A                           u1344 0536  
                         u1600 048A                           u1520 043C                           u1345 0532  
                         u1354 057E                           u1610 048C                           u1530 043E  
                         u1355 057A                           u1540 044C                           u1365 05D6  
                         u1550 044E                           u1470 0412                           u1630 0E86  
                         u1710 0C88                           u1560 045C                           u1480 041C  
                         u1570 045E                           u1490 041E                           u1580 046C  
                         u1590 046E                           u1670 0BA8                           u1807 07F0  
                         u1817 0806                           u1907 0A0C                           u1827 0816  
                         u1917 0A8E                           u1837 0824                           u1927 0B10  
                         u1847 0832                           u1937 1030                           u1857 0844  
                         u1777 0B86                           u1947 0F7C                           u1867 0856  
                         u1787 0C66                           u1957 0D2C                           u1877 086C  
                         u1797 0DA6                           u1967 0F3E                           u1887 0880  
                         u1977 0F4E                           u1897 0892                           u1987 0C1E  
                         u1997 103E                           i1l70 003E                           i2l63 0F18  
                         i2l65 0F1A                           _dbuf 0064                           _main 05E6  
                         _prec 0038                           _nout 0060                           fsr0h 000FEA  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0045                           _stop 0D5A  
                         prodh 000FF4                           prodl 000FF3                           start 0066  
                 ___param_bank 000000                __end_of_SendLCD 0F56                __end_of_SetLine 0F84  
               ??_display_RFID 0012                          ?_main 0001            main@searching_speed 0094  
              __end_of___awdiv 09AC                          ?_stop 0022                          _T0CON 000FD5  
              ___awdiv@divisor 0013                          _PDC0H 000F78                          _PDC1H 000F76  
                        _PDC0L 000F79                          _PDC1L 000F77                          _T5CON 000FB7  
              ___awdiv@counter 0015                          _RCREG 000FAE                          _E_TOG 103A  
                        _SPBRG 000FAF                   ?_init_sensor 0001                __end_of_initPWM 1020  
                        _flags 003A                          _setup 0E88                          _width 0062  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0046  
                        ttemp6 0049                          ttemp7 004D                          stop@i 0029  
                        status 000FD8                          wtemp8 0046            __size_of_LCD_String 005E  
             __end_of_ClearLCD 103A           moveForward@max_power 0026                 __CFG_MCLRE$OFF 000000  
              __initialization 0F84                   __end_of_main 06E8                   __end_of_stop 0DB6  
               __CFG_OSC$IRCIO 000000               LCD_String@string 000F                         ??_main 0038  
                       ??_stop 0028                  __activetblptr 000002                         ?_E_TOG 0001  
                 ?_setMotorPWM 0019                   ?_moveForward 0022   scanForBeacon@beacon_location 0035  
             ___awdiv@dividend 0011                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i1l1567 0054                         i2l1931 0DC2  
                       i2l1951 0DEE                         i2l1939 0DD2                         _LCDout 0BAE  
                  SendLCD@Byte 000E                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000D                      ??_SendLCD 000E  
                    ??_SetLine 000F                  display_RFID@i 0012                         ___wmul 0FAA  
                    ??___awdiv 0015               __end_of_init_LCD 089A            init_motor_struct@mL 0022  
          init_motor_struct@mR 0024                         clear_0 0F8A                         clear_1 0F96  
             ___awdiv@quotient 0017         __size_of_scanForBeacon 0068              moveToBeacon@speed 002F  
                    ??_initPWM 000D                 _stopAndDisplay 0C26                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0022                         stop@mR 0024                   ?_processRFID 0001  
            _init_motor_struct 06E8           __end_of_display_RFID 0E88             ?_init_motor_struct 0022  
                   __accesstop 0060        __end_of__initialization 0F9C                  ___rparam_used 000001  
                  SetLine@line 000F                  __end_of_E_TOG 1048            ??_init_motor_struct 0026  
               __pcstackCOMRAM 0001                  __end_of_setup 0EBE                   ??_LCD_String 0011  
       __end_of_stopAndDisplay 0C94                        ??_E_TOG 000B  __size_of_InterruptHandlerHigh 0F1E  
                    ?_ClearLCD 0001    __end_of_InterruptHandlerLow 0066      __end_of_init_motor_struct 07D2  
        __end_of_classify_data 0928                     _check_RFID 0372           __size_of_init_sensor 001C  
                      ??_setup 0010                  ?_moveBackward 0022                     __pbssBANK0 0060  
                      ?_LCDout 0001                  _scanForBeacon 0C94             __size_of_init_RFID 001A  
           __end_of_LCD_String 0D5A                        ?___wmul 000B                  ?_moveToBeacon 002B  
                      _CAP1CON 000F63                        _DFLTCON 000F60                ?_stopAndDisplay 002B  
                   ??_ClearLCD 000F                        _RFIDbuf 0084                        _PWMCON0 000F6F  
                      _PWMCON1 000F6E                 ??_moveBackward 0028                 ?_scanForBeacon 002B  
         __size_of_setMotorPWM 0124           __size_of_moveForward 0082                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0029                  ?_waitForInput 0001  
           __size_of_turnRight 0082                        _SendLCD 0F26                        __Hparam 0000  
                      _SetLine 0F56                        __Lparam 0000                 ??_moveToBeacon 0037  
        processRFID@latestChar 0003                        ___awdiv 0928                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 000B                        __pcinit 0F84  
                      __ramtop 0300                        __ptext0 05E6                        __ptext1 0B32  
                      __ptext2 0C26                        __ptext3 0D5A                        __ptext4 0E88  
                      __ptext5 0FD0                        __ptext6 0FEC                        __ptext7 07D2  
                      __ptext8 1006                        __ptext9 0C94              __end_of_init_RFID 1006  
             check_RFID@hexBuf 0015                        _initPWM 1006                   LCDout@number 000C  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040             moveToBeacon@micros 0031  
            stop@initial_speed 0026                    ?_check_RFID 0011                 __pintcode_body 0EF2  
         end_of_initialization 0F9C             setMotorPWM@PWMduty 0020                     ??_init_LCD 000F  
         __size_of_processRFID 004C                 ??_waitForInput 0011                  __Lmediumconst 0000  
                      int_func 0EF2                      _RFID_flag 0044                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0035                     _robot_mode 003F                     _returnHome 0EBE  
                 _display_RFID 0E48                      _PORTDbits 000F83              __end_of_turnRight 0A2E  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                ??_scanForBeacon 0031             debug@smoothed_data 003C  
                moveForward@mL 0022                  moveForward@mR 0024                 __end_of_LCDout 0C26  
                    _TXSTAbits 000FAC                     main@motorL 0098                     main@motorR 00A1  
         __end_of_moveBackward 0AB0            __size_of_check_RFID 0150                 __end_of___wmul 0FD0  
                  _BAUDCONbits 000FAA            start_initialization 0F84              __size_of_ClearLCD 001A  
         __end_of_moveToBeacon 0E48          classify_data@raw_data 000B                       ??_LCDout 000B  
        moveBackward@max_power 0026   __end_of_InterruptHandlerHigh 0F26          classify_data@previous 0017  
        classify_data@smoothed 000D               ??_stopAndDisplay 0031                       ??___wmul 000F  
              scanForBeacon@mL 002B                scanForBeacon@mR 002D             turnRight@max_power 0026  
                  ?_returnHome 002B           __end_of_waitForInput 0BAE                    __pbssCOMRAM 0038  
                ??_init_sensor 000B                  __pcstackBANK0 0090   __size_of_InterruptHandlerLow 004E  
            __size_of_init_LCD 00C8                       ?_SendLCD 000D                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 0011         __size_of_classify_data 008E  
           check_RFID@checksum 0026                    __pintcodelo 0018                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       ?_initPWM 000B                    __smallconst 0300  
               __size_of_E_TOG 000E                  waitForInput@i 0013                      _init_RFID 0FEC  
          stopAndDisplay@speed 002F                  ??_setMotorPWM 001B                  ??_moveForward 0028  
                 ??_check_RFID 0013                 __size_of_setup 0036                check_RFID@byte1 0021  
              check_RFID@byte2 0022                check_RFID@byte3 0023                check_RFID@byte4 0024  
              check_RFID@byte5 0025            __end_of_init_sensor 0FEC                 ___wmul@product 000F  
          __size_of_returnHome 0034                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u109_40 0DEA          __size_of_moveBackward 0082                    turnRight@mL 0022  
                  turnRight@mR 0024                       _PIR1bits 000F9E                       _RCONbits 000FD0  
           __end_of_check_RFID 04C2              ___wmul@multiplier 000B                   setMotorPWM@m 0019  
                 moveForward@i 0029               main@moving_speed 0096          __size_of_moveToBeacon 0046  
         _InterruptHandlerHigh 0008                       _ClearLCD 1020                  _movement_time 0040  
                   ?_init_RFID 0001                      _turnRight 09AC                  ??_processRFID 0004  
                _classify_data 089A                    _INTCON2bits 000FF1                 moveBackward@mL 0022  
               moveBackward@mR 0024                   _moveBackward 0A2E            __end_of_setMotorPWM 05E6  
          __end_of_moveForward 0B32                    check_RFID@i 0027                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
        __size_of_waitForInput 007C                   _moveToBeacon 0E02               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 0FD0  
               ?_classify_data 000B              check_RFID@dataBuf 0011                     ?_turnRight 0022  
                     __ptext10 09AC                       __ptext11 089A                       __ptext20 0CFC  
                     __ptext12 0EBE                       __ptext21 0F26                       __ptext13 0A2E  
                     __ptext30 0DB6                       __ptext22 0BAE                       __ptext14 0E02  
                     __ptext23 103A                       __ptext15 0AB0                       __ptext24 06E8  
                     __ptext16 0E48                       __ptext25 04C2                       __ptext17 1020  
                     __ptext26 0FAA                       __ptext18 0372                       __ptext27 0928  
                     __ptext19 0F56          __end_of_scanForBeacon 0CFC                       _init_LCD 07D2  
                __size_of_main 0102                  __size_of_stop 005C            __end_of_processRFID 0E02  
                 _waitForInput 0B32             scanForBeacon@speed 002F                     turnRight@i 0029  
                     int$flags 0045                   ??_returnHome 0033            _InterruptHandlerLow 0018  
                   _LCD_String 0CFC          scanForBeacon@raw_data 0033                     _INTCONbits 000FF2  
                  ??_init_RFID 000B                    _setMotorPWM 04C2                    _moveForward 0AB0  
                     intlevel1 0000                       intlevel2 0000     scanForBeacon@smoothed_data 0036  
         ?_InterruptHandlerLow 0001             __end_of_returnHome 0EF2                     _OSCCONbits 000FD3  
      moveToBeacon@RFID_buffer 0033     processRFID@position_in_buf 003E         ??_InterruptHandlerHigh 0005  
              ??_classify_data 000F               stopAndDisplay@mL 002B               stopAndDisplay@mR 002D  
              returnHome@speed 002F                    ??_turnRight 0028                    _processRFID 0DB6  
           main@movementMicros 0090          ??_InterruptHandlerLow 0008                stopAndDisplay@i 0033  
               returnHome@time 0031                   returnHome@mL 002B                   returnHome@mR 002D  
