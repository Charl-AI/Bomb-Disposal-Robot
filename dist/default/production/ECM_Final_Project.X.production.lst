

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Mar 05 22:05:29 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4331 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     _PORTDbits	set	3971
    80  0000                     _CAP1BUFL	set	3944
    81  0000                     _CAP1BUFH	set	3945
    82  0000                     _CAP1CON	set	3939
    83  0000                     _DFLTCON	set	3936
    84  0000                     _ANSEL1	set	4025
    85  0000                     _ANSEL0	set	4024
    86  0000                     _T5CON	set	4023
    87  0000                     _IPR1bits	set	3999
    88  0000                     _PIE1bits	set	3997
    89  0000                     _RCSTAbits	set	4011
    90  0000                     _TXSTAbits	set	4012
    91  0000                     _BAUDCONbits	set	4010
    92  0000                     _SPBRGH	set	4016
    93  0000                     _SPBRG	set	4015
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISCbits	set	3988
    96  0000                     _LATDbits	set	3980
    97  0000                     _LATCbits	set	3979
    98  0000                     _LATAbits	set	3977
    99  0000                     _LATB	set	3978
   100  0000                     _PTPERH	set	3962
   101  0000                     _PTPERL	set	3963
   102  0000                     _PWMCON1	set	3950
   103  0000                     _PWMCON0	set	3951
   104  0000                     _PTCON1	set	3966
   105  0000                     _PTCON0	set	3967
   106  0000                     _RCREG	set	4014
   107  0000                     _PIR1bits	set	3998
   108  0000                     _TRISDbits	set	3989
   109  0000                     _TRISBbits	set	3987
   110  0000                     _RCONbits	set	4048
   111  0000                     _INTCONbits	set	4082
   112  0000                     _OSCCONbits	set	4051
   113  0000                     _OSCCON	set	4051
   114  0000                     _PDC1H	set	3958
   115  0000                     _PDC1L	set	3959
   116  0000                     _PDC0H	set	3960
   117  0000                     _PDC0L	set	3961
   118                           
   119                           	psect	smallconst
   120  000300                     __psmallconst:
   121                           	opt callstack 0
   122  000300  00                 	db	0
   123  000301                     STR_9:
   124  000301  53                 	db	83	;'S'
   125  000302  54                 	db	84	;'T'
   126  000303  41                 	db	65	;'A'
   127  000304  52                 	db	82	;'R'
   128  000305  54                 	db	84	;'T'
   129  000306  49                 	db	73	;'I'
   130  000307  4E                 	db	78	;'N'
   131  000308  47                 	db	71	;'G'
   132  000309  20                 	db	32
   133  00030A  53                 	db	83	;'S'
   134  00030B  45                 	db	69	;'E'
   135  00030C  41                 	db	65	;'A'
   136  00030D  52                 	db	82	;'R'
   137  00030E  43                 	db	67	;'C'
   138  00030F  48                 	db	72	;'H'
   139  000310  00                 	db	0
   140  000311                     STR_8:
   141  000311  54                 	db	84	;'T'
   142  000312  4F                 	db	79	;'O'
   143  000313  20                 	db	32
   144  000314  53                 	db	83	;'S'
   145  000315  54                 	db	84	;'T'
   146  000316  41                 	db	65	;'A'
   147  000317  52                 	db	82	;'R'
   148  000318  54                 	db	84	;'T'
   149  000319  20                 	db	32
   150  00031A  53                 	db	83	;'S'
   151  00031B  45                 	db	69	;'E'
   152  00031C  41                 	db	65	;'A'
   153  00031D  52                 	db	82	;'R'
   154  00031E  43                 	db	67	;'C'
   155  00031F  48                 	db	72	;'H'
   156  000320  00                 	db	0
   157  000321                     STR_4:
   158  000321  52                 	db	82	;'R'
   159  000322  45                 	db	69	;'E'
   160  000323  53                 	db	83	;'S'
   161  000324  45                 	db	69	;'E'
   162  000325  54                 	db	84	;'T'
   163  000326  54                 	db	84	;'T'
   164  000327  49                 	db	73	;'I'
   165  000328  4E                 	db	78	;'N'
   166  000329  47                 	db	71	;'G'
   167  00032A  20                 	db	32
   168  00032B  52                 	db	82	;'R'
   169  00032C  4F                 	db	79	;'O'
   170  00032D  42                 	db	66	;'B'
   171  00032E  4F                 	db	79	;'O'
   172  00032F  54                 	db	84	;'T'
   173  000330  00                 	db	0
   174  000331                     STR_3:
   175  000331  43                 	db	67	;'C'
   176  000332  48                 	db	72	;'H'
   177  000333  45                 	db	69	;'E'
   178  000334  43                 	db	67	;'C'
   179  000335  4B                 	db	75	;'K'
   180  000336  53                 	db	83	;'S'
   181  000337  55                 	db	85	;'U'
   182  000338  4D                 	db	77	;'M'
   183  000339  20                 	db	32
   184  00033A  46                 	db	70	;'F'
   185  00033B  41                 	db	65	;'A'
   186  00033C  49                 	db	73	;'I'
   187  00033D  4C                 	db	76	;'L'
   188  00033E  45                 	db	69	;'E'
   189  00033F  44                 	db	68	;'D'
   190  000340  00                 	db	0
   191  000341                     STR_2:
   192  000341  43                 	db	67	;'C'
   193  000342  48                 	db	72	;'H'
   194  000343  45                 	db	69	;'E'
   195  000344  43                 	db	67	;'C'
   196  000345  4B                 	db	75	;'K'
   197  000346  53                 	db	83	;'S'
   198  000347  55                 	db	85	;'U'
   199  000348  4D                 	db	77	;'M'
   200  000349  20                 	db	32
   201  00034A  50                 	db	80	;'P'
   202  00034B  41                 	db	65	;'A'
   203  00034C  53                 	db	83	;'S'
   204  00034D  53                 	db	83	;'S'
   205  00034E  45                 	db	69	;'E'
   206  00034F  44                 	db	68	;'D'
   207  000350  00                 	db	0
   208  000351                     STR_1:
   209  000351  43                 	db	67	;'C'
   210  000352  72                 	db	114	;'r'
   211  000353  69                 	db	105	;'i'
   212  000354  74                 	db	116	;'t'
   213  000355  69                 	db	105	;'i'
   214  000356  63                 	db	99	;'c'
   215  000357  61                 	db	97	;'a'
   216  000358  6C                 	db	108	;'l'
   217  000359  20                 	db	32
   218  00035A  45                 	db	69	;'E'
   219  00035B  72                 	db	114	;'r'
   220  00035C  72                 	db	114	;'r'
   221  00035D  6F                 	db	111	;'o'
   222  00035E  72                 	db	114	;'r'
   223  00035F  00                 	db	0
   224  000360                     STR_7:
   225  000360  50                 	db	80	;'P'
   226  000361  52                 	db	82	;'R'
   227  000362  45                 	db	69	;'E'
   228  000363  53                 	db	83	;'S'
   229  000364  53                 	db	83	;'S'
   230  000365  20                 	db	32
   231  000366  42                 	db	66	;'B'
   232  000367  55                 	db	85	;'U'
   233  000368  54                 	db	84	;'T'
   234  000369  54                 	db	84	;'T'
   235  00036A  4F                 	db	79	;'O'
   236  00036B  4E                 	db	78	;'N'
   237  00036C  00                 	db	0
   238  00036D                     STR_5:
   239  00036D  25                 	db	37
   240  00036E  75                 	db	117	;'u'
   241  00036F  00                 	db	0
   242  0000                     
   243                           ; #config settings
   244  000370  00                 	db	0	; dummy byte at the end
   245  0000                     
   246                           	psect	cinit
   247  000F7E                     __pcinit:
   248                           	opt callstack 0
   249  000F7E                     start_initialization:
   250                           	opt callstack 0
   251  000F7E                     __initialization:
   252                           	opt callstack 0
   253                           
   254                           ; Clear objects allocated to BANK0 (44 bytes)
   255  000F7E  EE00  F060         	lfsr	0,__pbssBANK0
   256  000F82  0E2C               	movlw	44
   257  000F84                     clear_0:
   258  000F84  6AEE               	clrf	postinc0,c
   259  000F86  06E8               	decf	wreg,f,c
   260  000F88  E1FD               	bnz	clear_0
   261                           
   262                           ; Clear objects allocated to COMRAM (13 bytes)
   263  000F8A  EE00  F038         	lfsr	0,__pbssCOMRAM
   264  000F8E  0E0D               	movlw	13
   265  000F90                     clear_1:
   266  000F90  6AEE               	clrf	postinc0,c
   267  000F92  06E8               	decf	wreg,f,c
   268  000F94  E1FD               	bnz	clear_1
   269  000F96                     end_of_initialization:
   270                           	opt callstack 0
   271  000F96                     __end_of__initialization:
   272                           	opt callstack 0
   273  000F96  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274  000F98  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275  000F9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   276  000F9C  6EF8               	movwf	tblptru,c
   277  000F9E  0100               	movlb	0
   278  000FA0  EFF3  F002         	goto	_main	;jump to C main() function
   279                           
   280                           	psect	bssCOMRAM
   281  000038                     __pbssCOMRAM:
   282                           	opt callstack 0
   283  000038                     	ds	2
   284  00003A                     	ds	2
   285  00003C                     	ds	2
   286  00003E                     	ds	2
   287  000040                     debug@smoothed_data:
   288                           	opt callstack 0
   289  000040                     	ds	2
   290  000042                     processRFID@position_in_buf:
   291                           	opt callstack 0
   292  000042                     	ds	1
   293  000043                     _robot_mode:
   294                           	opt callstack 0
   295  000043                     	ds	1
   296  000044                     _RFID_flag:
   297                           	opt callstack 0
   298  000044                     	ds	1
   299                           
   300                           	psect	bssBANK0
   301  000060                     __pbssBANK0:
   302                           	opt callstack 0
   303  000060                     	ds	32
   304  000080                     _RFIDbuf:
   305                           	opt callstack 0
   306  000080                     	ds	12
   307                           
   308                           	psect	cstackBANK0
   309  00008C                     __pcstackBANK0:
   310                           	opt callstack 0
   311  00008C                     main@searching_speed:
   312                           	opt callstack 0
   313                           
   314                           ; 2 bytes @ 0x0
   315  00008C                     	ds	2
   316  00008E                     main@movementMicros:
   317                           	opt callstack 0
   318                           
   319                           ; 4 bytes @ 0x2
   320  00008E                     	ds	4
   321  000092                     main@moving_speed:
   322                           	opt callstack 0
   323                           
   324                           ; 2 bytes @ 0x6
   325  000092                     	ds	2
   326  000094                     main@motorL:
   327                           	opt callstack 0
   328                           
   329                           ; 9 bytes @ 0x8
   330  000094                     	ds	9
   331  00009D                     main@motorR:
   332                           	opt callstack 0
   333                           
   334                           ; 9 bytes @ 0x11
   335  00009D                     	ds	9
   336                           
   337                           	psect	cstackCOMRAM
   338  000001                     __pcstackCOMRAM:
   339                           	opt callstack 0
   340  000001                     processRFID@RFIDbuf:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x0
   344  000001                     	ds	2
   345  000003                     processRFID@latestChar:
   346                           	opt callstack 0
   347                           
   348                           ; 1 bytes @ 0x2
   349  000003                     	ds	1
   350  000004                     processRFID@i:
   351                           	opt callstack 0
   352                           
   353                           ; 1 bytes @ 0x3
   354  000004                     	ds	1
   355  000005                     ??_InterruptHandlerHigh:
   356                           
   357                           ; 1 bytes @ 0x4
   358  000005                     	ds	3
   359  000008                     ??_LCDout:
   360  000008                     ?___wmul:
   361                           	opt callstack 0
   362  000008                     initPWM@PWMperiod:
   363                           	opt callstack 0
   364  000008                     classify_data@raw_data:
   365                           	opt callstack 0
   366  000008                     ___wmul@multiplier:
   367                           	opt callstack 0
   368                           
   369                           ; 2 bytes @ 0x7
   370  000008                     	ds	1
   371  000009                     LCDout@number:
   372                           	opt callstack 0
   373                           
   374                           ; 1 bytes @ 0x8
   375  000009                     	ds	1
   376  00000A                     SendLCD@type:
   377                           	opt callstack 0
   378  00000A                     classify_data@smoothed:
   379                           	opt callstack 0
   380  00000A                     ___wmul@multiplicand:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x9
   384  00000A                     	ds	1
   385  00000B                     SendLCD@Byte:
   386                           	opt callstack 0
   387                           
   388                           ; 1 bytes @ 0xA
   389  00000B                     	ds	1
   390  00000C                     ??_init_LCD:
   391  00000C                     ??_ClearLCD:
   392  00000C                     ??_classify_data:
   393  00000C                     SetLine@line:
   394                           	opt callstack 0
   395  00000C                     LCD_String@string:
   396                           	opt callstack 0
   397  00000C                     ___wmul@product:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0xB
   401  00000C                     	ds	1
   402  00000D                     display_RFID@dataBuf:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0xC
   406  00000D                     	ds	1
   407  00000E                     ??_waitForInput:
   408  00000E                     ?___awdiv:
   409                           	opt callstack 0
   410  00000E                     check_RFID@dataBuf:
   411                           	opt callstack 0
   412  00000E                     ___awdiv@dividend:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0xD
   416  00000E                     	ds	1
   417  00000F                     display_RFID@i:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xE
   421  00000F                     	ds	1
   422  000010                     ??_check_RFID:
   423  000010                     waitForInput@i:
   424                           	opt callstack 0
   425  000010                     ___awdiv@divisor:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0xF
   429  000010                     	ds	2
   430  000012                     ___awdiv@counter:
   431                           	opt callstack 0
   432  000012                     check_RFID@hexBuf:
   433                           	opt callstack 0
   434                           
   435                           ; 12 bytes @ 0x11
   436  000012                     	ds	1
   437  000013                     ___awdiv@sign:
   438                           	opt callstack 0
   439                           
   440                           ; 1 bytes @ 0x12
   441  000013                     	ds	1
   442  000014                     classify_data@previous:
   443                           	opt callstack 0
   444  000014                     ___awdiv@quotient:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x13
   448  000014                     	ds	2
   449  000016                     setMotorPWM@m:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x15
   453  000016                     	ds	2
   454  000018                     ??_setMotorPWM:
   455                           
   456                           ; 1 bytes @ 0x17
   457  000018                     	ds	5
   458  00001D                     setMotorPWM@PWMduty:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x1C
   462  00001D                     	ds	1
   463  00001E                     check_RFID@byte1:
   464                           	opt callstack 0
   465                           
   466                           ; 1 bytes @ 0x1D
   467  00001E                     	ds	1
   468  00001F                     check_RFID@byte2:
   469                           	opt callstack 0
   470  00001F                     stop@mL:
   471                           	opt callstack 0
   472  00001F                     turnRight@mL:
   473                           	opt callstack 0
   474  00001F                     moveForward@mL:
   475                           	opt callstack 0
   476  00001F                     moveBackward@mL:
   477                           	opt callstack 0
   478  00001F                     init_motor_struct@mL:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x1E
   482  00001F                     	ds	1
   483  000020                     check_RFID@byte3:
   484                           	opt callstack 0
   485                           
   486                           ; 1 bytes @ 0x1F
   487  000020                     	ds	1
   488  000021                     check_RFID@byte4:
   489                           	opt callstack 0
   490  000021                     stop@mR:
   491                           	opt callstack 0
   492  000021                     turnRight@mR:
   493                           	opt callstack 0
   494  000021                     moveForward@mR:
   495                           	opt callstack 0
   496  000021                     moveBackward@mR:
   497                           	opt callstack 0
   498  000021                     init_motor_struct@mR:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x20
   502  000021                     	ds	1
   503  000022                     check_RFID@byte5:
   504                           	opt callstack 0
   505                           
   506                           ; 1 bytes @ 0x21
   507  000022                     	ds	1
   508  000023                     check_RFID@checksum:
   509                           	opt callstack 0
   510  000023                     stop@initial_speed:
   511                           	opt callstack 0
   512  000023                     turnRight@max_power:
   513                           	opt callstack 0
   514  000023                     moveForward@max_power:
   515                           	opt callstack 0
   516  000023                     moveBackward@max_power:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x22
   520  000023                     	ds	1
   521  000024                     check_RFID@i:
   522                           	opt callstack 0
   523                           
   524                           ; 2 bytes @ 0x23
   525  000024                     	ds	1
   526  000025                     ??_stop:
   527  000025                     ??_turnRight:
   528  000025                     ??_moveForward:
   529  000025                     ??_moveBackward:
   530                           
   531                           ; 1 bytes @ 0x24
   532  000025                     	ds	1
   533  000026                     stop@i:
   534                           	opt callstack 0
   535  000026                     turnRight@i:
   536                           	opt callstack 0
   537  000026                     moveForward@i:
   538                           	opt callstack 0
   539  000026                     moveBackward@i:
   540                           	opt callstack 0
   541                           
   542                           ; 2 bytes @ 0x25
   543  000026                     	ds	2
   544  000028                     scanForBeacon@mL:
   545                           	opt callstack 0
   546  000028                     moveToBeacon@mL:
   547                           	opt callstack 0
   548  000028                     returnHome@mL:
   549                           	opt callstack 0
   550  000028                     stopAndDisplay@mL:
   551                           	opt callstack 0
   552                           
   553                           ; 2 bytes @ 0x27
   554  000028                     	ds	2
   555  00002A                     scanForBeacon@mR:
   556                           	opt callstack 0
   557  00002A                     moveToBeacon@mR:
   558                           	opt callstack 0
   559  00002A                     returnHome@mR:
   560                           	opt callstack 0
   561  00002A                     stopAndDisplay@mR:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x29
   565  00002A                     	ds	2
   566  00002C                     scanForBeacon@speed:
   567                           	opt callstack 0
   568  00002C                     moveToBeacon@speed:
   569                           	opt callstack 0
   570  00002C                     returnHome@speed:
   571                           	opt callstack 0
   572  00002C                     stopAndDisplay@speed:
   573                           	opt callstack 0
   574                           
   575                           ; 2 bytes @ 0x2B
   576  00002C                     	ds	2
   577  00002E                     ??_scanForBeacon:
   578  00002E                     ??_stopAndDisplay:
   579  00002E                     moveToBeacon@micros:
   580                           	opt callstack 0
   581  00002E                     returnHome@micros:
   582                           	opt callstack 0
   583                           
   584                           ; 2 bytes @ 0x2D
   585  00002E                     	ds	2
   586  000030                     scanForBeacon@raw_data:
   587                           	opt callstack 0
   588  000030                     moveToBeacon@RFID_buffer:
   589                           	opt callstack 0
   590  000030                     stopAndDisplay@i:
   591                           	opt callstack 0
   592                           
   593                           ; 2 bytes @ 0x2F
   594  000030                     	ds	2
   595  000032                     scanForBeacon@beacon_location:
   596                           	opt callstack 0
   597  000032                     moveToBeacon@exit_flag:
   598                           	opt callstack 0
   599                           
   600                           ; 2 bytes @ 0x31
   601  000032                     	ds	1
   602  000033                     scanForBeacon@smoothed_data:
   603                           	opt callstack 0
   604                           
   605                           ; 2 bytes @ 0x32
   606  000033                     	ds	1
   607  000034                     returnHome@i:
   608                           	opt callstack 0
   609                           
   610                           ; 4 bytes @ 0x33
   611  000034                     	ds	4
   612  000038                     
   613                           ; 1 bytes @ 0x37
   614 ;;
   615 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   616 ;;
   617 ;; *************** function _main *****************
   618 ;; Defined at:
   619 ;;		line 78 in file "main.c"
   620 ;; Parameters:    Size  Location     Type
   621 ;;		None
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  motorR          9   17[BANK0 ] struct DC_motor
   624 ;;  motorL          9    8[BANK0 ] struct DC_motor
   625 ;;  movementMicr    4    2[BANK0 ] unsigned long 
   626 ;;  moving_speed    2    6[BANK0 ] int 
   627 ;;  searching_sp    2    0[BANK0 ] int 
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   637 ;;      Params:         0       0       0       0
   638 ;;      Locals:         0      26       0       0
   639 ;;      Temps:          0       0       0       0
   640 ;;      Totals:         0      26       0       0
   641 ;;Total ram usage:       26 bytes
   642 ;; Hardware stack levels required when called:    8
   643 ;; This function calls:
   644 ;;		_LCD_String
   645 ;;		_init_motor_struct
   646 ;;		_moveToBeacon
   647 ;;		_returnHome
   648 ;;		_scanForBeacon
   649 ;;		_setup
   650 ;;		_stopAndDisplay
   651 ;;		_waitForInput
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text0
   658  0005E6                     __ptext0:
   659                           	opt callstack 0
   660  0005E6                     _main:
   661                           	opt callstack 23
   662                           
   663                           ;main.c: 81:   setup();
   664                           
   665                           ;incstack = 0
   666  0005E6  EC91  F007         	call	_setup	;wreg free
   667                           
   668                           ;main.c: 84:   struct DC_motor motorL, motorR;;main.c: 85:   init_motor_struct(&motorL, 
      +                          &motorR);
   669  0005EA  0E94               	movlw	low main@motorL
   670  0005EC  6E1F               	movwf	init_motor_struct@mL,c
   671  0005EE  0E00               	movlw	high main@motorL
   672  0005F0  6E20               	movwf	init_motor_struct@mL+1,c
   673  0005F2  0E9D               	movlw	low main@motorR
   674  0005F4  6E21               	movwf	init_motor_struct@mR,c
   675  0005F6  0E00               	movlw	high main@motorR
   676  0005F8  6E22               	movwf	init_motor_struct@mR+1,c
   677  0005FA  EC74  F003         	call	_init_motor_struct	;wreg free
   678                           
   679                           ;main.c: 88:   int searching_speed = 75;
   680  0005FE  0E00               	movlw	0
   681  000600  0100               	movlb	0	; () banked
   682  000602  6F8D               	movwf	(main@searching_speed+1)& (0+255),b
   683  000604  0E4B               	movlw	75
   684  000606  6F8C               	movwf	main@searching_speed& (0+255),b
   685                           
   686                           ; BSR set to: 0
   687                           ;main.c: 89:   int moving_speed = 75;
   688  000608  0E00               	movlw	0
   689  00060A  6F93               	movwf	(main@moving_speed+1)& (0+255),b
   690  00060C  0E4B               	movlw	75
   691  00060E  6F92               	movwf	main@moving_speed& (0+255),b
   692                           
   693                           ; BSR set to: 0
   694                           ;main.c: 91:   unsigned long movementMicros=0;
   695  000610  0E00               	movlw	0
   696  000612  6F8E               	movwf	main@movementMicros& (0+255),b
   697  000614  0E00               	movlw	0
   698  000616  6F8F               	movwf	(main@movementMicros+1)& (0+255),b
   699  000618  0E00               	movlw	0
   700  00061A  6F90               	movwf	(main@movementMicros+2)& (0+255),b
   701  00061C  0E00               	movlw	0
   702  00061E  6F91               	movwf	(main@movementMicros+3)& (0+255),b
   703                           
   704                           ; BSR set to: 0
   705                           ;main.c: 93:   waitForInput();
   706  000620  ECD5  F005         	call	_waitForInput	;wreg free
   707  000624                     l2500:
   708                           
   709                           ;main.c: 97:   {;main.c: 99:       if(robot_mode == 0)
   710  000624  5043               	movf	_robot_mode,w,c	;volatile
   711  000626  A4D8               	btfss	status,2,c
   712  000628  D00F               	goto	l2504
   713                           
   714                           ;main.c: 100:       {;main.c: 101:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed);
   715  00062A  0E94               	movlw	low main@motorL
   716  00062C  6E28               	movwf	scanForBeacon@mL,c
   717  00062E  0E00               	movlw	high main@motorL
   718  000630  6E29               	movwf	scanForBeacon@mL+1,c
   719  000632  0E9D               	movlw	low main@motorR
   720  000634  6E2A               	movwf	scanForBeacon@mR,c
   721  000636  0E00               	movlw	high main@motorR
   722  000638  6E2B               	movwf	scanForBeacon@mR+1,c
   723  00063A  C08C  F02C         	movff	main@searching_speed,scanForBeacon@speed
   724  00063E  C08D  F02D         	movff	main@searching_speed+1,scanForBeacon@speed+1
   725  000642  EC47  F006         	call	_scanForBeacon	;wreg free
   726  000646  D047               	goto	L3
   727  000648                     l2504:
   728  000648  0443               	decf	_robot_mode,w,c	;volatile
   729  00064A  A4D8               	btfss	status,2,c
   730  00064C  D01B               	goto	l2508
   731                           
   732                           ;main.c: 107:       {;main.c: 108:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   733  00064E  0E94               	movlw	low main@motorL
   734  000650  6E28               	movwf	moveToBeacon@mL,c
   735  000652  0E00               	movlw	high main@motorL
   736  000654  6E29               	movwf	moveToBeacon@mL+1,c
   737  000656  0E9D               	movlw	low main@motorR
   738  000658  6E2A               	movwf	moveToBeacon@mR,c
   739  00065A  0E00               	movlw	high main@motorR
   740  00065C  6E2B               	movwf	moveToBeacon@mR+1,c
   741  00065E  C092  F02C         	movff	main@moving_speed,moveToBeacon@speed
   742  000662  C093  F02D         	movff	main@moving_speed+1,moveToBeacon@speed+1
   743  000666  0E8E               	movlw	low main@movementMicros
   744  000668  6E2E               	movwf	moveToBeacon@micros,c
   745  00066A  0E00               	movlw	high main@movementMicros
   746  00066C  6E2F               	movwf	moveToBeacon@micros+1,c
   747  00066E  0E80               	movlw	low _RFIDbuf
   748  000670  6E30               	movwf	moveToBeacon@RFID_buffer,c
   749  000672  0E00               	movlw	high _RFIDbuf
   750  000674  6E31               	movwf	moveToBeacon@RFID_buffer+1,c
   751  000676  0E44               	movlw	low _RFID_flag
   752  000678  6E32               	movwf	moveToBeacon@exit_flag,c
   753  00067A  0E00               	movlw	high _RFID_flag
   754  00067C  6E33               	movwf	moveToBeacon@exit_flag+1,c
   755  00067E  EC06  F007         	call	_moveToBeacon	;wreg free
   756  000682  D029               	goto	L3
   757  000684                     l2508:
   758  000684  0E02               	movlw	2
   759  000686  1843               	xorwf	_robot_mode,w,c	;volatile
   760  000688  A4D8               	btfss	status,2,c
   761  00068A  D013               	goto	l2512
   762                           
   763                           ;main.c: 114:       {;main.c: 115:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   764  00068C  0E94               	movlw	low main@motorL
   765  00068E  6E28               	movwf	returnHome@mL,c
   766  000690  0E00               	movlw	high main@motorL
   767  000692  6E29               	movwf	returnHome@mL+1,c
   768  000694  0E9D               	movlw	low main@motorR
   769  000696  6E2A               	movwf	returnHome@mR,c
   770  000698  0E00               	movlw	high main@motorR
   771  00069A  6E2B               	movwf	returnHome@mR+1,c
   772  00069C  C092  F02C         	movff	main@moving_speed,returnHome@speed
   773  0006A0  C093  F02D         	movff	main@moving_speed+1,returnHome@speed+1
   774  0006A4  0E8E               	movlw	low main@movementMicros
   775  0006A6  6E2E               	movwf	returnHome@micros,c
   776  0006A8  0E00               	movlw	high main@movementMicros
   777  0006AA  6E2F               	movwf	returnHome@micros+1,c
   778  0006AC  ECD8  F006         	call	_returnHome	;wreg free
   779  0006B0  D012               	goto	L3
   780  0006B2                     l2512:
   781  0006B2  0E03               	movlw	3
   782  0006B4  1843               	xorwf	_robot_mode,w,c	;volatile
   783  0006B6  A4D8               	btfss	status,2,c
   784  0006B8  D010               	goto	l2516
   785                           
   786                           ;main.c: 121:       {;main.c: 122:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed);
   787  0006BA  0E94               	movlw	low main@motorL
   788  0006BC  6E28               	movwf	stopAndDisplay@mL,c
   789  0006BE  0E00               	movlw	high main@motorL
   790  0006C0  6E29               	movwf	stopAndDisplay@mL+1,c
   791  0006C2  0E9D               	movlw	low main@motorR
   792  0006C4  6E2A               	movwf	stopAndDisplay@mR,c
   793  0006C6  0E00               	movlw	high main@motorR
   794  0006C8  6E2B               	movwf	stopAndDisplay@mR+1,c
   795  0006CA  C092  F02C         	movff	main@moving_speed,stopAndDisplay@speed
   796  0006CE  C093  F02D         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   797  0006D2  EC10  F006         	call	_stopAndDisplay	;wreg free
   798  0006D6                     L3:
   799  0006D6  6E43               	movwf	_robot_mode,c	;volatile
   800                           
   801                           ;main.c: 123:       }
   802  0006D8  D7A5               	goto	l2500
   803  0006DA                     l2516:
   804                           
   805                           ;main.c: 126:       {;main.c: 127:           LCD_String("Critical Error");
   806  0006DA  0E51               	movlw	low STR_1
   807  0006DC  6E0C               	movwf	LCD_String@string,c
   808  0006DE  0E03               	movlw	high STR_1
   809  0006E0  6E0D               	movwf	LCD_String@string+1,c
   810  0006E2  EC7B  F006         	call	_LCD_String	;wreg free
   811  0006E6  D79E               	goto	l2500
   812  0006E8                     __end_of_main:
   813                           	opt callstack 0
   814                           
   815 ;; *************** function _waitForInput *****************
   816 ;; Defined at:
   817 ;;		line 121 in file "subroutines.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  i               2   15[COMRAM] int 
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   831 ;;      Params:         0       0       0       0
   832 ;;      Locals:         2       0       0       0
   833 ;;      Temps:          2       0       0       0
   834 ;;      Totals:         4       0       0       0
   835 ;;Total ram usage:        4 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    6
   838 ;; This function calls:
   839 ;;		_ClearLCD
   840 ;;		_LCD_String
   841 ;;		_SetLine
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text1
   848  000BAA                     __ptext1:
   849                           	opt callstack 0
   850  000BAA                     _waitForInput:
   851                           	opt callstack 24
   852                           
   853                           ;subroutines.c: 123:     ClearLCD();
   854                           
   855                           ;incstack = 0
   856  000BAA  EC0D  F008         	call	_ClearLCD	;wreg free
   857                           
   858                           ;subroutines.c: 124:     SetLine(1);
   859  000BAE  0E01               	movlw	1
   860  000BB0  ECA8  F007         	call	_SetLine
   861                           
   862                           ;subroutines.c: 125:     LCD_String("PRESS BUTTON");
   863  000BB4  0E60               	movlw	low STR_7
   864  000BB6  6E0C               	movwf	LCD_String@string,c
   865  000BB8  0E03               	movlw	high STR_7
   866  000BBA  6E0D               	movwf	LCD_String@string+1,c
   867  000BBC  EC7B  F006         	call	_LCD_String	;wreg free
   868                           
   869                           ;subroutines.c: 126:     SetLine(2);
   870  000BC0  0E02               	movlw	2
   871  000BC2  ECA8  F007         	call	_SetLine
   872                           
   873                           ;subroutines.c: 127:     LCD_String("TO START SEARCH");
   874  000BC6  0E11               	movlw	low STR_8
   875  000BC8  6E0C               	movwf	LCD_String@string,c
   876  000BCA  0E03               	movlw	high STR_8
   877  000BCC  6E0D               	movwf	LCD_String@string+1,c
   878  000BCE  EC7B  F006         	call	_LCD_String	;wreg free
   879  000BD2                     l322:
   880  000BD2  A483               	btfss	3971,2,c	;volatile
   881  000BD4  D7FE               	goto	l322
   882                           
   883                           ;subroutines.c: 130:     ClearLCD();
   884  000BD6  EC0D  F008         	call	_ClearLCD	;wreg free
   885                           
   886                           ;subroutines.c: 131:     LCD_String("STARTING SEARCH");
   887  000BDA  0E01               	movlw	low STR_9
   888  000BDC  6E0C               	movwf	LCD_String@string,c
   889  000BDE  0E03               	movlw	high STR_9
   890  000BE0  6E0D               	movwf	LCD_String@string+1,c
   891  000BE2  EC7B  F006         	call	_LCD_String	;wreg free
   892                           
   893                           ;subroutines.c: 132:     for(int i=0; i<10;i++)
   894  000BE6  0E00               	movlw	0
   895  000BE8  6E11               	movwf	waitForInput@i+1,c
   896  000BEA  0E00               	movlw	0
   897  000BEC  6E10               	movwf	waitForInput@i,c
   898  000BEE                     l2418:
   899                           
   900                           ;subroutines.c: 133:     {;subroutines.c: 134:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   901  000BEE  0E02               	movlw	2
   902  000BF0  6E0F               	movwf	(??_waitForInput+1)& (0+255),c
   903  000BF2  0E04               	movlw	4
   904  000BF4  6E0E               	movwf	??_waitForInput& (0+255),c
   905  000BF6  0EBA               	movlw	186
   906  000BF8                     u1737:
   907  000BF8  2EE8               	decfsz	wreg,f,c
   908  000BFA  D7FE               	bra	u1737
   909  000BFC  2E0E               	decfsz	??_waitForInput& (0+255),f,c
   910  000BFE  D7FC               	bra	u1737
   911  000C00  2E0F               	decfsz	(??_waitForInput+1)& (0+255),f,c
   912  000C02  D7FA               	bra	u1737
   913  000C04  D000               	nop2	
   914                           
   915                           ;subroutines.c: 135:     }
   916  000C06  4A10               	infsnz	waitForInput@i,f,c
   917  000C08  2A11               	incf	waitForInput@i+1,f,c
   918  000C0A  BE11               	btfsc	waitForInput@i+1,7,c
   919  000C0C  D7F0               	goto	l2418
   920  000C0E  5011               	movf	waitForInput@i+1,w,c
   921  000C10  E104               	bnz	u1630
   922  000C12  0E0A               	movlw	10
   923  000C14  5C10               	subwf	waitForInput@i,w,c
   924  000C16  A0D8               	btfss	status,0,c
   925  000C18  D7EA               	goto	l2418
   926  000C1A                     u1630:
   927                           
   928                           ;subroutines.c: 136:     ClearLCD();
   929  000C1A  EC0D  F008         	call	_ClearLCD	;wreg free
   930  000C1E  0012               	return		;funcret
   931  000C20                     __end_of_waitForInput:
   932                           	opt callstack 0
   933                           
   934 ;; *************** function _stopAndDisplay *****************
   935 ;; Defined at:
   936 ;;		line 73 in file "subroutines.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  mL              2   39[COMRAM] PTR struct DC_motor
   939 ;;		 -> main@motorL(9), 
   940 ;;  mR              2   41[COMRAM] PTR struct DC_motor
   941 ;;		 -> main@motorR(9), 
   942 ;;  speed           2   43[COMRAM] int 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  i               2   47[COMRAM] int 
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      unsigned char 
   947 ;; Registers used:
   948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   954 ;;      Params:         6       0       0       0
   955 ;;      Locals:         2       0       0       0
   956 ;;      Temps:          2       0       0       0
   957 ;;      Totals:        10       0       0       0
   958 ;;Total ram usage:       10 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    6
   961 ;; This function calls:
   962 ;;		_ClearLCD
   963 ;;		_LCD_String
   964 ;;		_stop
   965 ;; This function is called by:
   966 ;;		_main
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text2
   971  000C20                     __ptext2:
   972                           	opt callstack 0
   973  000C20                     _stopAndDisplay:
   974                           	opt callstack 24
   975                           
   976                           ;subroutines.c: 73: volatile char stopAndDisplay(struct DC_motor *mL, struct DC_motor *m
      +                          R, int speed);subroutines.c: 74: {;subroutines.c: 75:     stop(mL, mR,speed);
   977                           
   978                           ;incstack = 0
   979  000C20  C028  F01F         	movff	stopAndDisplay@mL,stop@mL
   980  000C24  C029  F020         	movff	stopAndDisplay@mL+1,stop@mL+1
   981  000C28  C02A  F021         	movff	stopAndDisplay@mR,stop@mR
   982  000C2C  C02B  F022         	movff	stopAndDisplay@mR+1,stop@mR+1
   983  000C30  C02C  F023         	movff	stopAndDisplay@speed,stop@initial_speed
   984  000C34  C02D  F024         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
   985  000C38  ECAA  F006         	call	_stop	;wreg free
   986  000C3C  D025               	goto	l2486
   987  000C3E                     l2470:
   988                           
   989                           ;subroutines.c: 80:             {;subroutines.c: 81:                 ClearLCD();
   990  000C3E  EC0D  F008         	call	_ClearLCD	;wreg free
   991                           
   992                           ;subroutines.c: 82:                 LCD_String("RESETTING ROBOT");
   993  000C42  0E21               	movlw	low STR_4
   994  000C44  6E0C               	movwf	LCD_String@string,c
   995  000C46  0E03               	movlw	high STR_4
   996  000C48  6E0D               	movwf	LCD_String@string+1,c
   997  000C4A  EC7B  F006         	call	_LCD_String	;wreg free
   998                           
   999                           ;subroutines.c: 83:                 for(int i=0; i<10;i++)
  1000  000C4E  0E00               	movlw	0
  1001  000C50  6E31               	movwf	stopAndDisplay@i+1,c
  1002  000C52  0E00               	movlw	0
  1003  000C54  6E30               	movwf	stopAndDisplay@i,c
  1004  000C56                     l2480:
  1005                           
  1006                           ;subroutines.c: 84:                 {;subroutines.c: 85:                     _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
  1007  000C56  0E02               	movlw	2
  1008  000C58  6E2F               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1009  000C5A  0E04               	movlw	4
  1010  000C5C  6E2E               	movwf	??_stopAndDisplay& (0+255),c
  1011  000C5E  0EBA               	movlw	186
  1012  000C60                     u1747:
  1013  000C60  2EE8               	decfsz	wreg,f,c
  1014  000C62  D7FE               	bra	u1747
  1015  000C64  2E2E               	decfsz	??_stopAndDisplay& (0+255),f,c
  1016  000C66  D7FC               	bra	u1747
  1017  000C68  2E2F               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1018  000C6A  D7FA               	bra	u1747
  1019  000C6C  D000               	nop2	
  1020                           
  1021                           ;subroutines.c: 86:                 }
  1022  000C6E  4A30               	infsnz	stopAndDisplay@i,f,c
  1023  000C70  2A31               	incf	stopAndDisplay@i+1,f,c
  1024  000C72  BE31               	btfsc	stopAndDisplay@i+1,7,c
  1025  000C74  D7F0               	goto	l2480
  1026  000C76  5031               	movf	stopAndDisplay@i+1,w,c
  1027  000C78  E104               	bnz	u1670
  1028  000C7A  0E0A               	movlw	10
  1029  000C7C  5C30               	subwf	stopAndDisplay@i,w,c
  1030  000C7E  A0D8               	btfss	status,0,c
  1031  000C80  D7EA               	goto	l2480
  1032  000C82                     u1670:
  1033                           
  1034                           ;subroutines.c: 87:                 ClearLCD();
  1035  000C82  EC0D  F008         	call	_ClearLCD	;wreg free
  1036  000C86  00FF               	reset		;# 
  1037  000C88                     l2486:
  1038                           
  1039                           ;subroutines.c: 79:             while(PORTDbits.RD2 == 1)
  1040  000C88  A483               	btfss	3971,2,c	;volatile
  1041  000C8A  D7FE               	goto	l2486
  1042  000C8C  D7D8               	goto	l2470
  1043  000C8E                     __end_of_stopAndDisplay:
  1044                           	opt callstack 0
  1045                           
  1046 ;; *************** function _stop *****************
  1047 ;; Defined at:
  1048 ;;		line 40 in file "dc_motor.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1051 ;;		 -> main@motorL(9), 
  1052 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1053 ;;		 -> main@motorR(9), 
  1054 ;;  initial_spee    2   34[COMRAM] int 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  i               2   37[COMRAM] int 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1066 ;;      Params:         6       0       0       0
  1067 ;;      Locals:         2       0       0       0
  1068 ;;      Temps:          1       0       0       0
  1069 ;;      Totals:         9       0       0       0
  1070 ;;Total ram usage:        9 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    4
  1073 ;; This function calls:
  1074 ;;		_setMotorPWM
  1075 ;; This function is called by:
  1076 ;;		_stopAndDisplay
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text3
  1081  000D54                     __ptext3:
  1082                           	opt callstack 0
  1083  000D54                     _stop:
  1084                           	opt callstack 25
  1085                           
  1086                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1087                           
  1088                           ;incstack = 0
  1089  000D54  C023  F026         	movff	stop@initial_speed,stop@i
  1090  000D58  C024  F027         	movff	stop@initial_speed+1,stop@i+1
  1091  000D5C                     l2244:
  1092  000D5C  BE27               	btfsc	stop@i+1,7,c
  1093  000D5E  0012               	return	
  1094  000D60  5027               	movf	stop@i+1,w,c
  1095  000D62  E103               	bnz	l2248
  1096  000D64  0426               	decf	stop@i,w,c
  1097  000D66  A0D8               	btfss	status,0,c
  1098  000D68  0012               	return	
  1099  000D6A                     l2248:
  1100                           
  1101                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1102  000D6A  C01F  FFD9         	movff	stop@mL,fsr2l
  1103  000D6E  C020  FFDA         	movff	stop@mL+1,fsr2h
  1104  000D72  C026  FFDF         	movff	stop@i,indf2
  1105                           
  1106                           ;dc_motor.c: 45:         mR->power = i;
  1107  000D76  C021  FFD9         	movff	stop@mR,fsr2l
  1108  000D7A  C022  FFDA         	movff	stop@mR+1,fsr2h
  1109  000D7E  C026  FFDF         	movff	stop@i,indf2
  1110                           
  1111                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1112  000D82  C01F  F016         	movff	stop@mL,setMotorPWM@m
  1113  000D86  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
  1114  000D8A  EC61  F002         	call	_setMotorPWM	;wreg free
  1115                           
  1116                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1117  000D8E  C021  F016         	movff	stop@mR,setMotorPWM@m
  1118  000D92  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
  1119  000D96  EC61  F002         	call	_setMotorPWM	;wreg free
  1120                           
  1121                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1122  000D9A  0E03               	movlw	3
  1123  000D9C  6E25               	movwf	??_stop& (0+255),c
  1124  000D9E  0E98               	movlw	152
  1125  000DA0                     u1757:
  1126  000DA0  2EE8               	decfsz	wreg,f,c
  1127  000DA2  D7FE               	bra	u1757
  1128  000DA4  2E25               	decfsz	??_stop& (0+255),f,c
  1129  000DA6  D7FC               	bra	u1757
  1130                           
  1131                           ;dc_motor.c: 49:     }
  1132  000DA8  0626               	decf	stop@i,f,c
  1133  000DAA  A0D8               	btfss	status,0,c
  1134  000DAC  0627               	decf	stop@i+1,f,c
  1135  000DAE  D7D6               	goto	l2244
  1136  000DB0                     __end_of_stop:
  1137                           	opt callstack 0
  1138                           
  1139 ;; *************** function _setup *****************
  1140 ;; Defined at:
  1141 ;;		line 39 in file "main.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1155 ;;      Params:         0       0       0       0
  1156 ;;      Locals:         0       0       0       0
  1157 ;;      Temps:          0       0       0       0
  1158 ;;      Totals:         0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    6
  1162 ;; This function calls:
  1163 ;;		_initPWM
  1164 ;;		_init_LCD
  1165 ;;		_init_RFID
  1166 ;;		_init_sensor
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text4
  1173  000F22                     __ptext4:
  1174                           	opt callstack 0
  1175  000F22                     _setup:
  1176                           	opt callstack 24
  1177                           
  1178                           ;main.c: 42:     OSCCON = 0x72;
  1179                           
  1180                           ;incstack = 0
  1181  000F22  0E72               	movlw	114
  1182  000F24  6ED3               	movwf	4051,c	;volatile
  1183  000F26                     l49:
  1184  000F26  A4D3               	btfss	4051,2,c	;volatile
  1185  000F28  D7FE               	goto	l49
  1186                           
  1187                           ;main.c: 44:     INTCONbits.GIEH = 1;
  1188  000F2A  8EF2               	bsf	4082,7,c	;volatile
  1189                           
  1190                           ;main.c: 45:     INTCONbits.GIEL = 1;
  1191  000F2C  8CF2               	bsf	4082,6,c	;volatile
  1192                           
  1193                           ;main.c: 46:     RCONbits.IPEN=1;
  1194  000F2E  8ED0               	bsf	4048,7,c	;volatile
  1195                           
  1196                           ;main.c: 49:     init_LCD();
  1197  000F30  ECE9  F003         	call	_init_LCD	;wreg free
  1198                           
  1199                           ;main.c: 50:     init_RFID();
  1200  000F34  ECF3  F007         	call	_init_RFID	;wreg free
  1201                           
  1202                           ;main.c: 51:     init_sensor();
  1203  000F38  ECE5  F007         	call	_init_sensor	;wreg free
  1204                           
  1205                           ;main.c: 52:     initPWM(199);
  1206  000F3C  0E00               	movlw	0
  1207  000F3E  6E09               	movwf	initPWM@PWMperiod+1,c
  1208  000F40  0EC7               	movlw	199
  1209  000F42  6E08               	movwf	initPWM@PWMperiod,c
  1210  000F44  EC00  F008         	call	_initPWM	;wreg free
  1211                           
  1212                           ;main.c: 54:     TRISBbits.RB0 = 0;
  1213  000F48  9093               	bcf	3987,0,c	;volatile
  1214                           
  1215                           ;main.c: 55:     TRISBbits.RB2 = 0;
  1216  000F4A  9493               	bcf	3987,2,c	;volatile
  1217                           
  1218                           ;main.c: 56:     TRISDbits.RD2 = 1;
  1219  000F4C  8495               	bsf	3989,2,c	;volatile
  1220  000F4E  0012               	return		;funcret
  1221  000F50                     __end_of_setup:
  1222                           	opt callstack 0
  1223                           
  1224 ;; *************** function _init_sensor *****************
  1225 ;; Defined at:
  1226 ;;		line 14 in file "signal_processing.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  throwaway       2    0        unsigned int 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0
  1241 ;;      Locals:         2       0       0       0
  1242 ;;      Temps:          0       0       0       0
  1243 ;;      Totals:         2       0       0       0
  1244 ;;Total ram usage:        2 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    2
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_setup
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text5
  1255  000FCA                     __ptext5:
  1256                           	opt callstack 0
  1257  000FCA                     _init_sensor:
  1258                           	opt callstack 27
  1259                           
  1260                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1261                           
  1262                           ;incstack = 0
  1263  000FCA  0E01               	movlw	1
  1264  000FCC  6EB7               	movwf	4023,c	;volatile
  1265                           
  1266                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1267  000FCE  8492               	bsf	3986,2,c	;volatile
  1268                           
  1269                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1270  000FD0  0E00               	movlw	0
  1271  000FD2  6EB8               	movwf	4024,c	;volatile
  1272                           
  1273                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1274  000FD4  0E00               	movlw	0
  1275  000FD6  6EB9               	movwf	4025,c	;volatile
  1276                           
  1277                           ;signal_processing.c: 23:     DFLTCON = 0b00001000;
  1278  000FD8  0E08               	movlw	8
  1279  000FDA  6E60               	movwf	3936,c	;volatile
  1280                           
  1281                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1282  000FDC  0E47               	movlw	71
  1283  000FDE  6E63               	movwf	3939,c	;volatile
  1284  000FE0  5069               	movf	3945,w,c	;volatile
  1285  000FE2  5068               	movf	3944,w,c	;volatile
  1286  000FE4  0012               	return		;funcret
  1287  000FE6                     __end_of_init_sensor:
  1288                           	opt callstack 0
  1289                           
  1290 ;; *************** function _init_RFID *****************
  1291 ;; Defined at:
  1292 ;;		line 13 in file "RFID.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg, status,2
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1306 ;;      Params:         0       0       0       0
  1307 ;;      Locals:         0       0       0       0
  1308 ;;      Temps:          0       0       0       0
  1309 ;;      Totals:         0       0       0       0
  1310 ;;Total ram usage:        0 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    2
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_setup
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text6
  1321  000FE6                     __ptext6:
  1322                           	opt callstack 0
  1323  000FE6                     _init_RFID:
  1324                           	opt callstack 27
  1325                           
  1326                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1327                           
  1328                           ;incstack = 0
  1329  000FE6  8E94               	bsf	3988,7,c	;volatile
  1330                           
  1331                           ;RFID.c: 19:     SPBRG = 203;
  1332  000FE8  0ECB               	movlw	203
  1333  000FEA  6EAF               	movwf	4015,c	;volatile
  1334                           
  1335                           ;RFID.c: 20:     SPBRGH = 0;
  1336  000FEC  0E00               	movlw	0
  1337  000FEE  6EB0               	movwf	4016,c	;volatile
  1338                           
  1339                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1340  000FF0  86AA               	bsf	4010,3,c	;volatile
  1341                           
  1342                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1343  000FF2  84AC               	bsf	4012,2,c	;volatile
  1344                           
  1345                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1346  000FF4  88AB               	bsf	4011,4,c	;volatile
  1347                           
  1348                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1349  000FF6  8EAB               	bsf	4011,7,c	;volatile
  1350                           
  1351                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1352  000FF8  8AAC               	bsf	4012,5,c	;volatile
  1353                           
  1354                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1355  000FFA  8A9D               	bsf	3997,5,c	;volatile
  1356                           
  1357                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1358  000FFC  8A9F               	bsf	3999,5,c	;volatile
  1359  000FFE  0012               	return		;funcret
  1360  001000                     __end_of_init_RFID:
  1361                           	opt callstack 0
  1362                           
  1363 ;; *************** function _init_LCD *****************
  1364 ;; Defined at:
  1365 ;;		line 56 in file "LCDIO.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1379 ;;      Params:         0       0       0       0
  1380 ;;      Locals:         0       0       0       0
  1381 ;;      Temps:          1       0       0       0
  1382 ;;      Totals:         1       0       0       0
  1383 ;;Total ram usage:        1 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    5
  1386 ;; This function calls:
  1387 ;;		_LCDout
  1388 ;;		_SendLCD
  1389 ;; This function is called by:
  1390 ;;		_setup
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text7
  1395  0007D2                     __ptext7:
  1396                           	opt callstack 0
  1397  0007D2                     _init_LCD:
  1398                           	opt callstack 24
  1399                           
  1400                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1401                           
  1402                           ;incstack = 0
  1403  0007D2  9094               	bcf	3988,0,c	;volatile
  1404                           
  1405                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1406  0007D4  9E92               	bcf	3986,7,c	;volatile
  1407                           
  1408                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1409  0007D6  9694               	bcf	3988,3,c	;volatile
  1410                           
  1411                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1412  0007D8  9095               	bcf	3989,0,c	;volatile
  1413                           
  1414                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1415  0007DA  9295               	bcf	3989,1,c	;volatile
  1416                           
  1417                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1418  0007DC  9C92               	bcf	3986,6,c	;volatile
  1419                           
  1420                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1421  0007DE  908C               	bcf	3980,0,c	;volatile
  1422                           
  1423                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1424  0007E0  928C               	bcf	3980,1,c	;volatile
  1425                           
  1426                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1427  0007E2  968B               	bcf	3979,3,c	;volatile
  1428                           
  1429                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1430  0007E4  908B               	bcf	3979,0,c	;volatile
  1431                           
  1432                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1433  0007E6  9C89               	bcf	3977,6,c	;volatile
  1434                           
  1435                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1436  0007E8  9E89               	bcf	3977,7,c	;volatile
  1437                           
  1438                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1439  0007EA  0E27               	movlw	39
  1440  0007EC  6E0C               	movwf	??_init_LCD& (0+255),c
  1441  0007EE  0EF5               	movlw	245
  1442  0007F0                     u1767:
  1443  0007F0  2EE8               	decfsz	wreg,f,c
  1444  0007F2  D7FE               	bra	u1767
  1445  0007F4  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1446  0007F6  D7FC               	bra	u1767
  1447  0007F8  F000               	nop	
  1448                           
  1449                           ;LCDIO.c: 76:  LCDout(0b0011);
  1450  0007FA  0E03               	movlw	3
  1451  0007FC  EC99  F005         	call	_LCDout
  1452                           
  1453                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1454  000800  0E0D               	movlw	13
  1455  000802  6E0C               	movwf	??_init_LCD& (0+255),c
  1456  000804  0EFC               	movlw	252
  1457  000806                     u1777:
  1458  000806  2EE8               	decfsz	wreg,f,c
  1459  000808  D7FE               	bra	u1777
  1460  00080A  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1461  00080C  D7FC               	bra	u1777
  1462                           
  1463                           ;LCDIO.c: 78:  LCDout(0b0011);
  1464  00080E  0E03               	movlw	3
  1465  000810  EC99  F005         	call	_LCDout
  1466                           
  1467                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1468  000814  0E85               	movlw	133
  1469  000816                     u1787:
  1470  000816  2EE8               	decfsz	wreg,f,c
  1471  000818  D7FE               	bra	u1787
  1472  00081A  F000               	nop	
  1473                           
  1474                           ;LCDIO.c: 80:  LCDout(0b0011);
  1475  00081C  0E03               	movlw	3
  1476  00081E  EC99  F005         	call	_LCDout
  1477                           
  1478                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1479  000822  0E21               	movlw	33
  1480  000824                     u1797:
  1481  000824  2EE8               	decfsz	wreg,f,c
  1482  000826  D7FE               	bra	u1797
  1483  000828  F000               	nop	
  1484                           
  1485                           ;LCDIO.c: 82:  LCDout(0b0010);
  1486  00082A  0E02               	movlw	2
  1487  00082C  EC99  F005         	call	_LCDout
  1488                           
  1489                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1490  000830  0E21               	movlw	33
  1491  000832                     u1807:
  1492  000832  2EE8               	decfsz	wreg,f,c
  1493  000834  D7FE               	bra	u1807
  1494  000836  F000               	nop	
  1495                           
  1496                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1497  000838  0E00               	movlw	0
  1498  00083A  6E0A               	movwf	SendLCD@type,c
  1499  00083C  0E28               	movlw	40
  1500  00083E  EC79  F007         	call	_SendLCD
  1501                           
  1502                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1503  000842  0E21               	movlw	33
  1504  000844                     u1817:
  1505  000844  2EE8               	decfsz	wreg,f,c
  1506  000846  D7FE               	bra	u1817
  1507  000848  F000               	nop	
  1508                           
  1509                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1510  00084A  0E00               	movlw	0
  1511  00084C  6E0A               	movwf	SendLCD@type,c
  1512  00084E  0E08               	movlw	8
  1513  000850  EC79  F007         	call	_SendLCD
  1514                           
  1515                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1516  000854  0E21               	movlw	33
  1517  000856                     u1827:
  1518  000856  2EE8               	decfsz	wreg,f,c
  1519  000858  D7FE               	bra	u1827
  1520  00085A  F000               	nop	
  1521                           
  1522                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1523  00085C  0E00               	movlw	0
  1524  00085E  6E0A               	movwf	SendLCD@type,c
  1525  000860  0E01               	movlw	1
  1526  000862  EC79  F007         	call	_SendLCD
  1527                           
  1528                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1529  000866  0E0D               	movlw	13
  1530  000868  6E0C               	movwf	??_init_LCD& (0+255),c
  1531  00086A  0EFC               	movlw	252
  1532  00086C                     u1837:
  1533  00086C  2EE8               	decfsz	wreg,f,c
  1534  00086E  D7FE               	bra	u1837
  1535  000870  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1536  000872  D7FC               	bra	u1837
  1537                           
  1538                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1539  000874  0E00               	movlw	0
  1540  000876  6E0A               	movwf	SendLCD@type,c
  1541  000878  0E06               	movlw	6
  1542  00087A  EC79  F007         	call	_SendLCD
  1543                           
  1544                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1545  00087E  0E21               	movlw	33
  1546  000880                     u1847:
  1547  000880  2EE8               	decfsz	wreg,f,c
  1548  000882  D7FE               	bra	u1847
  1549  000884  F000               	nop	
  1550                           
  1551                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1552  000886  0E00               	movlw	0
  1553  000888  6E0A               	movwf	SendLCD@type,c
  1554  00088A  0E0C               	movlw	12
  1555  00088C  EC79  F007         	call	_SendLCD
  1556                           
  1557                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1558  000890  0E21               	movlw	33
  1559  000892                     u1857:
  1560  000892  2EE8               	decfsz	wreg,f,c
  1561  000894  D7FE               	bra	u1857
  1562  000896  F000               	nop	
  1563  000898  0012               	return		;funcret
  1564  00089A                     __end_of_init_LCD:
  1565                           	opt callstack 0
  1566                           
  1567 ;; *************** function _initPWM *****************
  1568 ;; Defined at:
  1569 ;;		line 5 in file "dc_motor.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;  PWMperiod       2    7[COMRAM] int 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1583 ;;      Params:         2       0       0       0
  1584 ;;      Locals:         0       0       0       0
  1585 ;;      Temps:          0       0       0       0
  1586 ;;      Totals:         2       0       0       0
  1587 ;;Total ram usage:        2 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    2
  1590 ;; This function calls:
  1591 ;;		Nothing
  1592 ;; This function is called by:
  1593 ;;		_setup
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text8
  1598  001000                     __ptext8:
  1599                           	opt callstack 0
  1600  001000                     _initPWM:
  1601                           	opt callstack 27
  1602                           
  1603                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1604                           
  1605                           ;incstack = 0
  1606  001000  0E00               	movlw	0
  1607  001002  6E7F               	movwf	3967,c	;volatile
  1608                           
  1609                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1610  001004  0E80               	movlw	128
  1611  001006  6E7E               	movwf	3966,c	;volatile
  1612                           
  1613                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1614  001008  0E6F               	movlw	111
  1615  00100A  6E6F               	movwf	3951,c	;volatile
  1616                           
  1617                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1618  00100C  0E00               	movlw	0
  1619  00100E  6E6E               	movwf	3950,c	;volatile
  1620                           
  1621                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1622  001010  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1623                           
  1624                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1625  001014  5009               	movf	initPWM@PWMperiod+1,w,c
  1626  001016  6E7A               	movwf	3962,c	;volatile
  1627  001018  0012               	return		;funcret
  1628  00101A                     __end_of_initPWM:
  1629                           	opt callstack 0
  1630                           
  1631 ;; *************** function _scanForBeacon *****************
  1632 ;; Defined at:
  1633 ;;		line 17 in file "subroutines.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1636 ;;		 -> main@motorL(9), 
  1637 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1638 ;;		 -> main@motorR(9), 
  1639 ;;  speed           2   43[COMRAM] int 
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;  raw_data        2   47[COMRAM] unsigned int 
  1642 ;;  beacon_locat    1   49[COMRAM] unsigned char 
  1643 ;;  smoothed_dat    2   50[COMRAM] unsigned int 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      unsigned char 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1653 ;;      Params:         6       0       0       0
  1654 ;;      Locals:         5       0       0       0
  1655 ;;      Temps:          2       0       0       0
  1656 ;;      Totals:        13       0       0       0
  1657 ;;Total ram usage:       13 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    5
  1660 ;; This function calls:
  1661 ;;		_classify_data
  1662 ;;		_turnRight
  1663 ;; This function is called by:
  1664 ;;		_main
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text9
  1669  000C8E                     __ptext9:
  1670                           	opt callstack 0
  1671  000C8E                     _scanForBeacon:
  1672                           	opt callstack 25
  1673                           
  1674                           ;subroutines.c: 17: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 18: {;subroutines.c: 19:     turnRight(mL,mR,speed);
  1675                           
  1676                           ;incstack = 0
  1677  000C8E  C028  F01F         	movff	scanForBeacon@mL,turnRight@mL
  1678  000C92  C029  F020         	movff	scanForBeacon@mL+1,turnRight@mL+1
  1679  000C96  C02A  F021         	movff	scanForBeacon@mR,turnRight@mR
  1680  000C9A  C02B  F022         	movff	scanForBeacon@mR+1,turnRight@mR+1
  1681  000C9E  C02C  F023         	movff	scanForBeacon@speed,turnRight@max_power
  1682  000CA2  C02D  F024         	movff	scanForBeacon@speed+1,turnRight@max_power+1
  1683  000CA6  ECD6  F004         	call	_turnRight	;wreg free
  1684                           
  1685                           ;subroutines.c: 20:     unsigned int smoothed_data = (unsigned int)((CAP1BUFH << 8) | CA
      +                          P1BUFL);
  1686  000CAA  5068               	movf	3944,w,c	;volatile
  1687  000CAC  CF69 F02E          	movff	3945,??_scanForBeacon	;volatile
  1688  000CB0  6A2F               	clrf	(??_scanForBeacon+1)& (0+255),c
  1689  000CB2  C02E  F02F         	movff	??_scanForBeacon,??_scanForBeacon+1
  1690  000CB6  6A2E               	clrf	??_scanForBeacon,c
  1691  000CB8  102E               	iorwf	??_scanForBeacon,w,c
  1692  000CBA  6E33               	movwf	scanForBeacon@smoothed_data,c
  1693  000CBC  502F               	movf	??_scanForBeacon+1,w,c
  1694  000CBE  6E34               	movwf	scanForBeacon@smoothed_data+1,c
  1695  000CC0                     l2428:
  1696                           
  1697                           ;subroutines.c: 23:     {;subroutines.c: 25:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  1698  000CC0  5068               	movf	3944,w,c	;volatile
  1699  000CC2  CF69 F02E          	movff	3945,??_scanForBeacon	;volatile
  1700  000CC6  6A2F               	clrf	(??_scanForBeacon+1)& (0+255),c
  1701  000CC8  C02E  F02F         	movff	??_scanForBeacon,??_scanForBeacon+1
  1702  000CCC  6A2E               	clrf	??_scanForBeacon,c
  1703  000CCE  102E               	iorwf	??_scanForBeacon,w,c
  1704  000CD0  6E30               	movwf	scanForBeacon@raw_data,c
  1705  000CD2  502F               	movf	??_scanForBeacon+1,w,c
  1706  000CD4  6E31               	movwf	scanForBeacon@raw_data+1,c
  1707                           
  1708                           ;subroutines.c: 28:         char beacon_location = classify_data(raw_data, &smoothed_dat
      +                          a);
  1709  000CD6  C030  F008         	movff	scanForBeacon@raw_data,classify_data@raw_data
  1710  000CDA  C031  F009         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  1711  000CDE  0E33               	movlw	low scanForBeacon@smoothed_data
  1712  000CE0  6E0A               	movwf	classify_data@smoothed,c
  1713  000CE2  0E00               	movlw	high scanForBeacon@smoothed_data
  1714  000CE4  6E0B               	movwf	classify_data@smoothed+1,c
  1715  000CE6  EC4D  F004         	call	_classify_data	;wreg free
  1716  000CEA  6E32               	movwf	scanForBeacon@beacon_location,c
  1717                           
  1718                           ;subroutines.c: 31:         if(beacon_location == 1)
  1719  000CEC  0432               	decf	scanForBeacon@beacon_location,w,c
  1720  000CEE  A4D8               	btfss	status,2,c
  1721  000CF0  D7E7               	goto	l2428
  1722                           
  1723                           ;subroutines.c: 32:         {;subroutines.c: 33:             return 1;
  1724  000CF2  0E01               	movlw	1
  1725  000CF4  0012               	return		;funcret
  1726  000CF6                     __end_of_scanForBeacon:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _turnRight *****************
  1730 ;; Defined at:
  1731 ;;		line 53 in file "dc_motor.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1734 ;;		 -> main@motorL(9), 
  1735 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1736 ;;		 -> main@motorR(9), 
  1737 ;;  max_power       2   34[COMRAM] int 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  i               2   37[COMRAM] int 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1749 ;;      Params:         6       0       0       0
  1750 ;;      Locals:         2       0       0       0
  1751 ;;      Temps:          1       0       0       0
  1752 ;;      Totals:         9       0       0       0
  1753 ;;Total ram usage:        9 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    4
  1756 ;; This function calls:
  1757 ;;		_setMotorPWM
  1758 ;; This function is called by:
  1759 ;;		_scanForBeacon
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text10
  1764  0009AC                     __ptext10:
  1765                           	opt callstack 0
  1766  0009AC                     _turnRight:
  1767                           	opt callstack 25
  1768                           
  1769                           ;dc_motor.c: 53: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 1;
  1770                           
  1771                           ;incstack = 0
  1772  0009AC  EE20 F001          	lfsr	2,1
  1773  0009B0  501F               	movf	turnRight@mL,w,c
  1774  0009B2  26D9               	addwf	fsr2l,f,c
  1775  0009B4  5020               	movf	turnRight@mL+1,w,c
  1776  0009B6  22DA               	addwfc	fsr2h,f,c
  1777  0009B8  0E01               	movlw	1
  1778  0009BA  6EDF               	movwf	indf2,c
  1779                           
  1780                           ;dc_motor.c: 57:     mR->direction = 0;
  1781  0009BC  EE20 F001          	lfsr	2,1
  1782  0009C0  5021               	movf	turnRight@mR,w,c
  1783  0009C2  26D9               	addwf	fsr2l,f,c
  1784  0009C4  5022               	movf	turnRight@mR+1,w,c
  1785  0009C6  22DA               	addwfc	fsr2h,f,c
  1786  0009C8  0E00               	movlw	0
  1787  0009CA  6EDF               	movwf	indf2,c
  1788                           
  1789                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  1790  0009CC  0E00               	movlw	0
  1791  0009CE  6E27               	movwf	turnRight@i+1,c
  1792  0009D0  0E00               	movlw	0
  1793  0009D2  6E26               	movwf	turnRight@i,c
  1794  0009D4  D021               	goto	l2274
  1795  0009D6                     l2264:
  1796                           
  1797                           ;dc_motor.c: 60:         mL->power = i;
  1798  0009D6  C01F  FFD9         	movff	turnRight@mL,fsr2l
  1799  0009DA  C020  FFDA         	movff	turnRight@mL+1,fsr2h
  1800  0009DE  C026  FFDF         	movff	turnRight@i,indf2
  1801                           
  1802                           ;dc_motor.c: 61:         mR->power = i;
  1803  0009E2  C021  FFD9         	movff	turnRight@mR,fsr2l
  1804  0009E6  C022  FFDA         	movff	turnRight@mR+1,fsr2h
  1805  0009EA  C026  FFDF         	movff	turnRight@i,indf2
  1806                           
  1807                           ;dc_motor.c: 63:         setMotorPWM(mL);
  1808  0009EE  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
  1809  0009F2  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  1810  0009F6  EC61  F002         	call	_setMotorPWM	;wreg free
  1811                           
  1812                           ;dc_motor.c: 64:         setMotorPWM(mR);
  1813  0009FA  C021  F016         	movff	turnRight@mR,setMotorPWM@m
  1814  0009FE  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  1815  000A02  EC61  F002         	call	_setMotorPWM	;wreg free
  1816                           
  1817                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1818  000A06  0E03               	movlw	3
  1819  000A08  6E25               	movwf	??_turnRight& (0+255),c
  1820  000A0A  0E98               	movlw	152
  1821  000A0C                     u1867:
  1822  000A0C  2EE8               	decfsz	wreg,f,c
  1823  000A0E  D7FE               	bra	u1867
  1824  000A10  2E25               	decfsz	??_turnRight& (0+255),f,c
  1825  000A12  D7FC               	bra	u1867
  1826                           
  1827                           ;dc_motor.c: 66:     }
  1828  000A14  4A26               	infsnz	turnRight@i,f,c
  1829  000A16  2A27               	incf	turnRight@i+1,f,c
  1830  000A18                     l2274:
  1831  000A18  5023               	movf	turnRight@max_power,w,c
  1832  000A1A  5C26               	subwf	turnRight@i,w,c
  1833  000A1C  5027               	movf	turnRight@i+1,w,c
  1834  000A1E  0A80               	xorlw	128
  1835  000A20  6E25               	movwf	??_turnRight& (0+255),c
  1836  000A22  5024               	movf	turnRight@max_power+1,w,c
  1837  000A24  0A80               	xorlw	128
  1838  000A26  5825               	subwfb	??_turnRight& (0+255),w,c
  1839  000A28  B0D8               	btfsc	status,0,c
  1840  000A2A  0012               	return	
  1841  000A2C  D7D4               	goto	l2264
  1842  000A2E                     __end_of_turnRight:
  1843                           	opt callstack 0
  1844                           
  1845 ;; *************** function _classify_data *****************
  1846 ;; Defined at:
  1847 ;;		line 32 in file "signal_processing.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  raw_data        2    7[COMRAM] unsigned int 
  1850 ;;  smoothed        2    9[COMRAM] PTR unsigned int 
  1851 ;;		 -> scanForBeacon@smoothed_data(2), 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  previous        2   19[COMRAM] unsigned int 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1863 ;;      Params:         4       0       0       0
  1864 ;;      Locals:         2       0       0       0
  1865 ;;      Temps:          8       0       0       0
  1866 ;;      Totals:        14       0       0       0
  1867 ;;Total ram usage:       14 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    2
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_scanForBeacon
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text11
  1878  00089A                     __ptext11:
  1879                           	opt callstack 0
  1880  00089A                     _classify_data:
  1881                           	opt callstack 27
  1882                           
  1883                           ;signal_processing.c: 32: char classify_data(unsigned int raw_data, unsigned int *smooth
      +                          ed);signal_processing.c: 33: {;signal_processing.c: 35:     unsigned int previous = *smo
      +                          othed;
  1884                           
  1885                           ;incstack = 0
  1886  00089A  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1887  00089E  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1888  0008A2  CFDE F014          	movff	postinc2,classify_data@previous
  1889  0008A6  CFDD F015          	movff	postdec2,classify_data@previous+1
  1890                           
  1891                           ;signal_processing.c: 36:     *smoothed = *smoothed + ((raw_data - *smoothed) >> 1);
  1892  0008AA  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1893  0008AE  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1894  0008B2  CFDE F00C          	movff	postinc2,??_classify_data
  1895  0008B6  CFDD F00D          	movff	postdec2,??_classify_data+1
  1896  0008BA  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1897  0008BE  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1898  0008C2  CFDE F00E          	movff	postinc2,??_classify_data+2
  1899  0008C6  CFDD F00F          	movff	postdec2,??_classify_data+3
  1900  0008CA  C008  F010         	movff	classify_data@raw_data,??_classify_data+4
  1901  0008CE  C009  F011         	movff	classify_data@raw_data+1,??_classify_data+5
  1902  0008D2  500E               	movf	??_classify_data+2,w,c
  1903  0008D4  5E10               	subwf	??_classify_data+4,f,c
  1904  0008D6  500F               	movf	??_classify_data+3,w,c
  1905  0008D8  5A11               	subwfb	??_classify_data+5,f,c
  1906  0008DA  90D8               	bcf	status,0,c
  1907  0008DC  3011               	rrcf	??_classify_data+5,w,c
  1908  0008DE  6E13               	movwf	(??_classify_data+7)& (0+255),c
  1909  0008E0  3010               	rrcf	??_classify_data+4,w,c
  1910  0008E2  6E12               	movwf	(??_classify_data+6)& (0+255),c
  1911  0008E4  500C               	movf	??_classify_data,w,c
  1912  0008E6  2612               	addwf	??_classify_data+6,f,c
  1913  0008E8  500D               	movf	??_classify_data+1,w,c
  1914  0008EA  2213               	addwfc	??_classify_data+7,f,c
  1915  0008EC  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1916  0008F0  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1917  0008F4  C012  FFDE         	movff	??_classify_data+6,postinc2
  1918  0008F8  C013  FFDD         	movff	??_classify_data+7,postdec2
  1919                           
  1920                           ;signal_processing.c: 38:     if(*smoothed - previous >= 2000)
  1921  0008FC  C00A  FFD9         	movff	classify_data@smoothed,fsr2l
  1922  000900  C00B  FFDA         	movff	classify_data@smoothed+1,fsr2h
  1923  000904  CFDE F00C          	movff	postinc2,??_classify_data
  1924  000908  CFDD F00D          	movff	postdec2,??_classify_data+1
  1925  00090C  5014               	movf	classify_data@previous,w,c
  1926  00090E  5E0C               	subwf	??_classify_data,f,c
  1927  000910  5015               	movf	classify_data@previous+1,w,c
  1928  000912  5A0D               	subwfb	??_classify_data+1,f,c
  1929  000914  0ED0               	movlw	208
  1930  000916  5C0C               	subwf	??_classify_data,w,c
  1931  000918  0E07               	movlw	7
  1932  00091A  580D               	subwfb	??_classify_data+1,w,c
  1933  00091C  A0D8               	btfss	status,0,c
  1934  00091E  D002               	goto	l2366
  1935                           
  1936                           ;signal_processing.c: 39:     {;signal_processing.c: 40:         return 1;
  1937  000920  0E01               	movlw	1
  1938  000922  0012               	return	
  1939  000924                     l2366:
  1940                           
  1941                           ;signal_processing.c: 43:     {;signal_processing.c: 44:         return 0;
  1942  000924  0E00               	movlw	0
  1943  000926  0012               	return		;funcret
  1944  000928                     __end_of_classify_data:
  1945                           	opt callstack 0
  1946                           
  1947 ;; *************** function _returnHome *****************
  1948 ;; Defined at:
  1949 ;;		line 61 in file "subroutines.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1952 ;;		 -> main@motorL(9), 
  1953 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1954 ;;		 -> main@motorR(9), 
  1955 ;;  speed           2   43[COMRAM] int 
  1956 ;;  micros          2   45[COMRAM] PTR unsigned long 
  1957 ;;		 -> main@movementMicros(4), 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  i               4   51[COMRAM] unsigned long 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      unsigned char 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1969 ;;      Params:         8       0       0       0
  1970 ;;      Locals:         4       0       0       0
  1971 ;;      Temps:          4       0       0       0
  1972 ;;      Totals:        16       0       0       0
  1973 ;;Total ram usage:       16 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    5
  1976 ;; This function calls:
  1977 ;;		_moveBackward
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text12
  1984  000DB0                     __ptext12:
  1985                           	opt callstack 0
  1986  000DB0                     _returnHome:
  1987                           	opt callstack 25
  1988                           
  1989                           ;subroutines.c: 61: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 62:                         unsigned long *micros);subroutines.
      +                          c: 63: {;subroutines.c: 64:     moveBackward(mL,mR,speed);
  1990                           
  1991                           ;incstack = 0
  1992  000DB0  C028  F01F         	movff	returnHome@mL,moveBackward@mL
  1993  000DB4  C029  F020         	movff	returnHome@mL+1,moveBackward@mL+1
  1994  000DB8  C02A  F021         	movff	returnHome@mR,moveBackward@mR
  1995  000DBC  C02B  F022         	movff	returnHome@mR+1,moveBackward@mR+1
  1996  000DC0  C02C  F023         	movff	returnHome@speed,moveBackward@max_power
  1997  000DC4  C02D  F024         	movff	returnHome@speed+1,moveBackward@max_power+1
  1998  000DC8  EC17  F005         	call	_moveBackward	;wreg free
  1999                           
  2000                           ;subroutines.c: 66:     for(unsigned long i=0; i<*micros;i++)
  2001  000DCC  0E00               	movlw	0
  2002  000DCE  6E34               	movwf	returnHome@i,c
  2003  000DD0  0E00               	movlw	0
  2004  000DD2  6E35               	movwf	returnHome@i+1,c
  2005  000DD4  0E00               	movlw	0
  2006  000DD6  6E36               	movwf	returnHome@i+2,c
  2007  000DD8  0E00               	movlw	0
  2008  000DDA  6E37               	movwf	returnHome@i+3,c
  2009  000DDC  D007               	goto	l2462
  2010  000DDE                     l298:
  2011                           
  2012                           ;subroutines.c: 67:     {;subroutines.c: 68:         _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
  2013  000DDE  D000               	nop2		;2 cycle nop
  2014                           
  2015                           ;subroutines.c: 69:     }
  2016  000DE0  0E01               	movlw	1
  2017  000DE2  2634               	addwf	returnHome@i,f,c
  2018  000DE4  0E00               	movlw	0
  2019  000DE6  2235               	addwfc	returnHome@i+1,f,c
  2020  000DE8  2236               	addwfc	returnHome@i+2,f,c
  2021  000DEA  2237               	addwfc	returnHome@i+3,f,c
  2022  000DEC                     l2462:
  2023  000DEC  C02E  FFD9         	movff	returnHome@micros,fsr2l
  2024  000DF0  C02F  FFDA         	movff	returnHome@micros+1,fsr2h
  2025  000DF4  50DE               	movf	postinc2,w,c
  2026  000DF6  5C34               	subwf	returnHome@i,w,c
  2027  000DF8  50DE               	movf	postinc2,w,c
  2028  000DFA  5835               	subwfb	returnHome@i+1,w,c
  2029  000DFC  50DE               	movf	postinc2,w,c
  2030  000DFE  5836               	subwfb	returnHome@i+2,w,c
  2031  000E00  50DE               	movf	postinc2,w,c
  2032  000E02  5837               	subwfb	returnHome@i+3,w,c
  2033  000E04  A0D8               	btfss	status,0,c
  2034  000E06  D7EB               	goto	l298
  2035                           
  2036                           ;subroutines.c: 70:     return 3;
  2037  000E08  0E03               	movlw	3
  2038  000E0A  0012               	return		;funcret
  2039  000E0C                     __end_of_returnHome:
  2040                           	opt callstack 0
  2041                           
  2042 ;; *************** function _moveBackward *****************
  2043 ;; Defined at:
  2044 ;;		line 85 in file "dc_motor.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2047 ;;		 -> main@motorL(9), 
  2048 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2049 ;;		 -> main@motorR(9), 
  2050 ;;  max_power       2   34[COMRAM] int 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  i               2   37[COMRAM] int 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2062 ;;      Params:         6       0       0       0
  2063 ;;      Locals:         2       0       0       0
  2064 ;;      Temps:          1       0       0       0
  2065 ;;      Totals:         9       0       0       0
  2066 ;;Total ram usage:        9 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    4
  2069 ;; This function calls:
  2070 ;;		_setMotorPWM
  2071 ;; This function is called by:
  2072 ;;		_returnHome
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text13
  2077  000A2E                     __ptext13:
  2078                           	opt callstack 0
  2079  000A2E                     _moveBackward:
  2080                           	opt callstack 25
  2081                           
  2082                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2083                           
  2084                           ;incstack = 0
  2085  000A2E  EE20 F001          	lfsr	2,1
  2086  000A32  501F               	movf	moveBackward@mL,w,c
  2087  000A34  26D9               	addwf	fsr2l,f,c
  2088  000A36  5020               	movf	moveBackward@mL+1,w,c
  2089  000A38  22DA               	addwfc	fsr2h,f,c
  2090  000A3A  0E00               	movlw	0
  2091  000A3C  6EDF               	movwf	indf2,c
  2092                           
  2093                           ;dc_motor.c: 88:     mR->direction = 0;
  2094  000A3E  EE20 F001          	lfsr	2,1
  2095  000A42  5021               	movf	moveBackward@mR,w,c
  2096  000A44  26D9               	addwf	fsr2l,f,c
  2097  000A46  5022               	movf	moveBackward@mR+1,w,c
  2098  000A48  22DA               	addwfc	fsr2h,f,c
  2099  000A4A  0E00               	movlw	0
  2100  000A4C  6EDF               	movwf	indf2,c
  2101                           
  2102                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2103  000A4E  0E00               	movlw	0
  2104  000A50  6E27               	movwf	moveBackward@i+1,c
  2105  000A52  0E00               	movlw	0
  2106  000A54  6E26               	movwf	moveBackward@i,c
  2107  000A56  D021               	goto	l2306
  2108  000A58                     l2296:
  2109                           
  2110                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2111  000A58  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  2112  000A5C  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  2113  000A60  C026  FFDF         	movff	moveBackward@i,indf2
  2114                           
  2115                           ;dc_motor.c: 92:         mR->power = i;
  2116  000A64  C021  FFD9         	movff	moveBackward@mR,fsr2l
  2117  000A68  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  2118  000A6C  C026  FFDF         	movff	moveBackward@i,indf2
  2119                           
  2120                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2121  000A70  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  2122  000A74  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2123  000A78  EC61  F002         	call	_setMotorPWM	;wreg free
  2124                           
  2125                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2126  000A7C  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  2127  000A80  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2128  000A84  EC61  F002         	call	_setMotorPWM	;wreg free
  2129                           
  2130                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2131  000A88  0E03               	movlw	3
  2132  000A8A  6E25               	movwf	??_moveBackward& (0+255),c
  2133  000A8C  0E98               	movlw	152
  2134  000A8E                     u1877:
  2135  000A8E  2EE8               	decfsz	wreg,f,c
  2136  000A90  D7FE               	bra	u1877
  2137  000A92  2E25               	decfsz	??_moveBackward& (0+255),f,c
  2138  000A94  D7FC               	bra	u1877
  2139                           
  2140                           ;dc_motor.c: 96:     }
  2141  000A96  4A26               	infsnz	moveBackward@i,f,c
  2142  000A98  2A27               	incf	moveBackward@i+1,f,c
  2143  000A9A                     l2306:
  2144  000A9A  5023               	movf	moveBackward@max_power,w,c
  2145  000A9C  5C26               	subwf	moveBackward@i,w,c
  2146  000A9E  5027               	movf	moveBackward@i+1,w,c
  2147  000AA0  0A80               	xorlw	128
  2148  000AA2  6E25               	movwf	??_moveBackward& (0+255),c
  2149  000AA4  5024               	movf	moveBackward@max_power+1,w,c
  2150  000AA6  0A80               	xorlw	128
  2151  000AA8  5825               	subwfb	??_moveBackward& (0+255),w,c
  2152  000AAA  B0D8               	btfsc	status,0,c
  2153  000AAC  0012               	return	
  2154  000AAE  D7D4               	goto	l2296
  2155  000AB0                     __end_of_moveBackward:
  2156                           	opt callstack 0
  2157                           
  2158 ;; *************** function _moveToBeacon *****************
  2159 ;; Defined at:
  2160 ;;		line 38 in file "subroutines.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  2163 ;;		 -> main@motorL(9), 
  2164 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  2165 ;;		 -> main@motorR(9), 
  2166 ;;  speed           2   43[COMRAM] int 
  2167 ;;  micros          2   45[COMRAM] PTR unsigned long 
  2168 ;;		 -> main@movementMicros(4), 
  2169 ;;  RFID_buffer     2   47[COMRAM] PTR volatile unsigned ch
  2170 ;;		 -> RFIDbuf(12), 
  2171 ;;  exit_flag       2   49[COMRAM] PTR volatile unsigned ch
  2172 ;;		 -> NULL(0), RFID_flag(1), 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      unsigned char 
  2177 ;; Registers used:
  2178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2184 ;;      Params:        12       0       0       0
  2185 ;;      Locals:         0       0       0       0
  2186 ;;      Temps:          1       0       0       0
  2187 ;;      Totals:        13       0       0       0
  2188 ;;Total ram usage:       13 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    7
  2191 ;; This function calls:
  2192 ;;		_check_RFID
  2193 ;;		_display_RFID
  2194 ;;		_moveForward
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text14
  2201  000E0C                     __ptext14:
  2202                           	opt callstack 0
  2203  000E0C                     _moveToBeacon:
  2204                           	opt callstack 23
  2205                           
  2206                           ;subroutines.c: 38: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 39: unsigned long *micros, volatile char RFID_buffer[], volat
      +                          ile char *exit_flag);subroutines.c: 40: {;subroutines.c: 41:     moveForward(mL,mR,speed
      +                          );
  2207                           
  2208                           ;incstack = 0
  2209  000E0C  C028  F01F         	movff	moveToBeacon@mL,moveForward@mL
  2210  000E10  C029  F020         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2211  000E14  C02A  F021         	movff	moveToBeacon@mR,moveForward@mR
  2212  000E18  C02B  F022         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2213  000E1C  C02C  F023         	movff	moveToBeacon@speed,moveForward@max_power
  2214  000E20  C02D  F024         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2215  000E24  EC58  F005         	call	_moveForward	;wreg free
  2216  000E28                     l2440:
  2217                           
  2218                           ;subroutines.c: 45:           {;subroutines.c: 46:               _delay((unsigned long)(
      +                          (1)*(8000000/4000000.0)));
  2219  000E28  D000               	nop2		;2 cycle nop
  2220                           
  2221                           ;subroutines.c: 47:               *micros += 1;
  2222  000E2A  C02E  FFD9         	movff	moveToBeacon@micros,fsr2l
  2223  000E2E  C02F  FFDA         	movff	moveToBeacon@micros+1,fsr2h
  2224  000E32  2ADE               	incf	postinc2,f,c
  2225  000E34  0E00               	movlw	0
  2226  000E36  22DE               	addwfc	postinc2,f,c
  2227  000E38  22DE               	addwfc	postinc2,f,c
  2228  000E3A  22DE               	addwfc	postinc2,f,c
  2229                           
  2230                           ;subroutines.c: 51:               if(*exit_flag == 1)
  2231  000E3C  C032  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2232  000E40  C033  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2233  000E44  04DE               	decf	postinc2,w,c
  2234  000E46  A4D8               	btfss	status,2,c
  2235  000E48  D7EF               	goto	l2440
  2236                           
  2237                           ;subroutines.c: 52:               {;subroutines.c: 53:                   display_RFID(RF
      +                          ID_buffer);
  2238  000E4A  C030  F00D         	movff	moveToBeacon@RFID_buffer,display_RFID@dataBuf
  2239  000E4E  C031  F00E         	movff	moveToBeacon@RFID_buffer+1,display_RFID@dataBuf+1
  2240  000E52  EC59  F007         	call	_display_RFID	;wreg free
  2241                           
  2242                           ;subroutines.c: 54:                   check_RFID(RFID_buffer);
  2243  000E56  C030  F00E         	movff	moveToBeacon@RFID_buffer,check_RFID@dataBuf
  2244  000E5A  C031  F00F         	movff	moveToBeacon@RFID_buffer+1,check_RFID@dataBuf+1
  2245  000E5E  ECB9  F001         	call	_check_RFID	;wreg free
  2246                           
  2247                           ;subroutines.c: 56:                   return 2;
  2248  000E62  0E02               	movlw	2
  2249  000E64  0012               	return		;funcret
  2250  000E66                     __end_of_moveToBeacon:
  2251                           	opt callstack 0
  2252                           
  2253 ;; *************** function _moveForward *****************
  2254 ;; Defined at:
  2255 ;;		line 70 in file "dc_motor.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2258 ;;		 -> main@motorL(9), 
  2259 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2260 ;;		 -> main@motorR(9), 
  2261 ;;  max_power       2   34[COMRAM] int 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  i               2   37[COMRAM] int 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2273 ;;      Params:         6       0       0       0
  2274 ;;      Locals:         2       0       0       0
  2275 ;;      Temps:          1       0       0       0
  2276 ;;      Totals:         9       0       0       0
  2277 ;;Total ram usage:        9 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    4
  2280 ;; This function calls:
  2281 ;;		_setMotorPWM
  2282 ;; This function is called by:
  2283 ;;		_moveToBeacon
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text15
  2288  000AB0                     __ptext15:
  2289                           	opt callstack 0
  2290  000AB0                     _moveForward:
  2291                           	opt callstack 25
  2292                           
  2293                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2294                           
  2295                           ;incstack = 0
  2296  000AB0  EE20 F001          	lfsr	2,1
  2297  000AB4  501F               	movf	moveForward@mL,w,c
  2298  000AB6  26D9               	addwf	fsr2l,f,c
  2299  000AB8  5020               	movf	moveForward@mL+1,w,c
  2300  000ABA  22DA               	addwfc	fsr2h,f,c
  2301  000ABC  0E01               	movlw	1
  2302  000ABE  6EDF               	movwf	indf2,c
  2303                           
  2304                           ;dc_motor.c: 73:     mR->direction = 1;
  2305  000AC0  EE20 F001          	lfsr	2,1
  2306  000AC4  5021               	movf	moveForward@mR,w,c
  2307  000AC6  26D9               	addwf	fsr2l,f,c
  2308  000AC8  5022               	movf	moveForward@mR+1,w,c
  2309  000ACA  22DA               	addwfc	fsr2h,f,c
  2310  000ACC  0E01               	movlw	1
  2311  000ACE  6EDF               	movwf	indf2,c
  2312                           
  2313                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2314  000AD0  0E00               	movlw	0
  2315  000AD2  6E27               	movwf	moveForward@i+1,c
  2316  000AD4  0E00               	movlw	0
  2317  000AD6  6E26               	movwf	moveForward@i,c
  2318  000AD8  D021               	goto	l2290
  2319  000ADA                     l2280:
  2320                           
  2321                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2322  000ADA  C01F  FFD9         	movff	moveForward@mL,fsr2l
  2323  000ADE  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  2324  000AE2  C026  FFDF         	movff	moveForward@i,indf2
  2325                           
  2326                           ;dc_motor.c: 77:         mR->power = i;
  2327  000AE6  C021  FFD9         	movff	moveForward@mR,fsr2l
  2328  000AEA  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  2329  000AEE  C026  FFDF         	movff	moveForward@i,indf2
  2330                           
  2331                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2332  000AF2  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  2333  000AF6  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  2334  000AFA  EC61  F002         	call	_setMotorPWM	;wreg free
  2335                           
  2336                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2337  000AFE  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  2338  000B02  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  2339  000B06  EC61  F002         	call	_setMotorPWM	;wreg free
  2340                           
  2341                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2342  000B0A  0E03               	movlw	3
  2343  000B0C  6E25               	movwf	??_moveForward& (0+255),c
  2344  000B0E  0E98               	movlw	152
  2345  000B10                     u1887:
  2346  000B10  2EE8               	decfsz	wreg,f,c
  2347  000B12  D7FE               	bra	u1887
  2348  000B14  2E25               	decfsz	??_moveForward& (0+255),f,c
  2349  000B16  D7FC               	bra	u1887
  2350                           
  2351                           ;dc_motor.c: 81:     }
  2352  000B18  4A26               	infsnz	moveForward@i,f,c
  2353  000B1A  2A27               	incf	moveForward@i+1,f,c
  2354  000B1C                     l2290:
  2355  000B1C  5023               	movf	moveForward@max_power,w,c
  2356  000B1E  5C26               	subwf	moveForward@i,w,c
  2357  000B20  5027               	movf	moveForward@i+1,w,c
  2358  000B22  0A80               	xorlw	128
  2359  000B24  6E25               	movwf	??_moveForward& (0+255),c
  2360  000B26  5024               	movf	moveForward@max_power+1,w,c
  2361  000B28  0A80               	xorlw	128
  2362  000B2A  5825               	subwfb	??_moveForward& (0+255),w,c
  2363  000B2C  B0D8               	btfsc	status,0,c
  2364  000B2E  0012               	return	
  2365  000B30  D7D4               	goto	l2280
  2366  000B32                     __end_of_moveForward:
  2367                           	opt callstack 0
  2368                           
  2369 ;; *************** function _display_RFID *****************
  2370 ;; Defined at:
  2371 ;;		line 109 in file "RFID.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  dataBuf         2   12[COMRAM] PTR volatile unsigned ch
  2374 ;;		 -> RFIDbuf(12), 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  i               2   14[COMRAM] int 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2386 ;;      Params:         2       0       0       0
  2387 ;;      Locals:         2       0       0       0
  2388 ;;      Temps:          0       0       0       0
  2389 ;;      Totals:         4       0       0       0
  2390 ;;Total ram usage:        4 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    6
  2393 ;; This function calls:
  2394 ;;		_ClearLCD
  2395 ;;		_SendLCD
  2396 ;;		_SetLine
  2397 ;; This function is called by:
  2398 ;;		_moveToBeacon
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text16
  2403  000EB2                     __ptext16:
  2404                           	opt callstack 0
  2405  000EB2                     _display_RFID:
  2406                           	opt callstack 23
  2407                           
  2408                           ;RFID.c: 109: void display_RFID(volatile char dataBuf[]);RFID.c: 110: {;RFID.c: 111:    
      +                           ClearLCD();
  2409                           
  2410                           ;incstack = 0
  2411  000EB2  EC0D  F008         	call	_ClearLCD	;wreg free
  2412                           
  2413                           ;RFID.c: 112:     SetLine(1);
  2414  000EB6  0E01               	movlw	1
  2415  000EB8  ECA8  F007         	call	_SetLine
  2416                           
  2417                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  2418  000EBC  0E00               	movlw	0
  2419  000EBE  6E10               	movwf	display_RFID@i+1,c
  2420  000EC0  0E00               	movlw	0
  2421  000EC2  6E0F               	movwf	display_RFID@i,c
  2422  000EC4                     l2348:
  2423                           
  2424                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  2425  000EC4  0E01               	movlw	1
  2426  000EC6  6E0A               	movwf	SendLCD@type,c
  2427  000EC8  500F               	movf	display_RFID@i,w,c
  2428  000ECA  240D               	addwf	display_RFID@dataBuf,w,c
  2429  000ECC  6ED9               	movwf	fsr2l,c
  2430  000ECE  5010               	movf	display_RFID@i+1,w,c
  2431  000ED0  200E               	addwfc	display_RFID@dataBuf+1,w,c
  2432  000ED2  6EDA               	movwf	fsr2h,c
  2433  000ED4  50DF               	movf	indf2,w,c
  2434  000ED6  EC79  F007         	call	_SendLCD
  2435                           
  2436                           ;RFID.c: 116:     }
  2437  000EDA  4A0F               	infsnz	display_RFID@i,f,c
  2438  000EDC  2A10               	incf	display_RFID@i+1,f,c
  2439  000EDE  BE10               	btfsc	display_RFID@i+1,7,c
  2440  000EE0  D7F1               	goto	l2348
  2441  000EE2  5010               	movf	display_RFID@i+1,w,c
  2442  000EE4  E105               	bnz	u1590
  2443  000EE6  0E0A               	movlw	10
  2444  000EE8  5C0F               	subwf	display_RFID@i,w,c
  2445  000EEA  B0D8               	btfsc	status,0,c
  2446  000EEC  0012               	return	
  2447  000EEE  D7EA               	goto	l2348
  2448  000EF0                     u1590:
  2449  000EF0  0012               	return		;funcret
  2450  000EF2                     __end_of_display_RFID:
  2451                           	opt callstack 0
  2452                           
  2453 ;; *************** function _ClearLCD *****************
  2454 ;; Defined at:
  2455 ;;		line 131 in file "LCDIO.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2469 ;;      Params:         0       0       0       0
  2470 ;;      Locals:         0       0       0       0
  2471 ;;      Temps:          1       0       0       0
  2472 ;;      Totals:         1       0       0       0
  2473 ;;Total ram usage:        1 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    5
  2476 ;; This function calls:
  2477 ;;		_SendLCD
  2478 ;; This function is called by:
  2479 ;;		_display_RFID
  2480 ;;		_stopAndDisplay
  2481 ;;		_waitForInput
  2482 ;;		_debug
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text17
  2487  00101A                     __ptext17:
  2488                           	opt callstack 0
  2489  00101A                     _ClearLCD:
  2490                           	opt callstack 24
  2491                           
  2492                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  2493                           
  2494                           ;incstack = 0
  2495  00101A  0E00               	movlw	0
  2496  00101C  6E0A               	movwf	SendLCD@type,c
  2497  00101E  0E01               	movlw	1
  2498  001020  EC79  F007         	call	_SendLCD
  2499                           
  2500                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2501  001024  0E0D               	movlw	13
  2502  001026  6E0C               	movwf	??_ClearLCD& (0+255),c
  2503  001028  0EFC               	movlw	252
  2504  00102A                     u1897:
  2505  00102A  2EE8               	decfsz	wreg,f,c
  2506  00102C  D7FE               	bra	u1897
  2507  00102E  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  2508  001030  D7FC               	bra	u1897
  2509  001032  0012               	return		;funcret
  2510  001034                     __end_of_ClearLCD:
  2511                           	opt callstack 0
  2512                           
  2513 ;; *************** function _check_RFID *****************
  2514 ;; Defined at:
  2515 ;;		line 72 in file "RFID.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  dataBuf         2   13[COMRAM] PTR volatile unsigned ch
  2518 ;;		 -> RFIDbuf(12), 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  i               2   35[COMRAM] int 
  2521 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  2522 ;;  checksum        1   34[COMRAM] unsigned char 
  2523 ;;  byte5           1   33[COMRAM] unsigned char 
  2524 ;;  byte4           1   32[COMRAM] unsigned char 
  2525 ;;  byte3           1   31[COMRAM] unsigned char 
  2526 ;;  byte2           1   30[COMRAM] unsigned char 
  2527 ;;  byte1           1   29[COMRAM] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2537 ;;      Params:         2       0       0       0
  2538 ;;      Locals:        20       0       0       0
  2539 ;;      Temps:          2       0       0       0
  2540 ;;      Totals:        24       0       0       0
  2541 ;;Total ram usage:       24 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    6
  2544 ;; This function calls:
  2545 ;;		_LCD_String
  2546 ;;		_SetLine
  2547 ;; This function is called by:
  2548 ;;		_moveToBeacon
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text18
  2553  000372                     __ptext18:
  2554                           	opt callstack 0
  2555  000372                     _check_RFID:
  2556                           	opt callstack 23
  2557                           
  2558                           ;RFID.c: 72: void check_RFID(volatile char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char
      +                           hexBuf[12];;RFID.c: 77:     for(int i=0; i<12;i++)
  2559                           
  2560                           ;incstack = 0
  2561  000372  0E00               	movlw	0
  2562  000374  6E25               	movwf	check_RFID@i+1,c
  2563  000376  0E00               	movlw	0
  2564  000378  6E24               	movwf	check_RFID@i,c
  2565  00037A                     l2314:
  2566                           
  2567                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2568  00037A  5024               	movf	check_RFID@i,w,c
  2569  00037C  240E               	addwf	check_RFID@dataBuf,w,c
  2570  00037E  6ED9               	movwf	fsr2l,c
  2571  000380  5025               	movf	check_RFID@i+1,w,c
  2572  000382  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2573  000384  6EDA               	movwf	fsr2h,c
  2574  000386  0E2F               	movlw	47
  2575  000388  64DF               	cpfsgt	indf2,c
  2576  00038A  D018               	goto	l2320
  2577  00038C  5024               	movf	check_RFID@i,w,c
  2578  00038E  240E               	addwf	check_RFID@dataBuf,w,c
  2579  000390  6ED9               	movwf	fsr2l,c
  2580  000392  5025               	movf	check_RFID@i+1,w,c
  2581  000394  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2582  000396  6EDA               	movwf	fsr2h,c
  2583  000398  0E3A               	movlw	58
  2584  00039A  60DF               	cpfslt	indf2,c
  2585  00039C  D00F               	goto	l2320
  2586                           
  2587                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  2588  00039E  0E12               	movlw	low check_RFID@hexBuf
  2589  0003A0  2424               	addwf	check_RFID@i,w,c
  2590  0003A2  6ED9               	movwf	fsr2l,c
  2591  0003A4  0E00               	movlw	high check_RFID@hexBuf
  2592  0003A6  2025               	addwfc	check_RFID@i+1,w,c
  2593  0003A8  6EDA               	movwf	fsr2h,c
  2594  0003AA  5024               	movf	check_RFID@i,w,c
  2595  0003AC  240E               	addwf	check_RFID@dataBuf,w,c
  2596  0003AE  6EE1               	movwf	fsr1l,c
  2597  0003B0  5025               	movf	check_RFID@i+1,w,c
  2598  0003B2  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2599  0003B4  6EE2               	movwf	fsr1h,c
  2600  0003B6  50E7               	movf	indf1,w,c
  2601  0003B8  0FD0               	addlw	208
  2602  0003BA  D020               	goto	L4
  2603  0003BC                     l2320:
  2604  0003BC  5024               	movf	check_RFID@i,w,c
  2605  0003BE  240E               	addwf	check_RFID@dataBuf,w,c
  2606  0003C0  6ED9               	movwf	fsr2l,c
  2607  0003C2  5025               	movf	check_RFID@i+1,w,c
  2608  0003C4  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2609  0003C6  6EDA               	movwf	fsr2h,c
  2610  0003C8  0E40               	movlw	64
  2611  0003CA  64DF               	cpfsgt	indf2,c
  2612  0003CC  D018               	goto	l2326
  2613  0003CE  5024               	movf	check_RFID@i,w,c
  2614  0003D0  240E               	addwf	check_RFID@dataBuf,w,c
  2615  0003D2  6ED9               	movwf	fsr2l,c
  2616  0003D4  5025               	movf	check_RFID@i+1,w,c
  2617  0003D6  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2618  0003D8  6EDA               	movwf	fsr2h,c
  2619  0003DA  0E47               	movlw	71
  2620  0003DC  60DF               	cpfslt	indf2,c
  2621  0003DE  D00F               	goto	l2326
  2622                           
  2623                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2624  0003E0  0E12               	movlw	low check_RFID@hexBuf
  2625  0003E2  2424               	addwf	check_RFID@i,w,c
  2626  0003E4  6ED9               	movwf	fsr2l,c
  2627  0003E6  0E00               	movlw	high check_RFID@hexBuf
  2628  0003E8  2025               	addwfc	check_RFID@i+1,w,c
  2629  0003EA  6EDA               	movwf	fsr2h,c
  2630  0003EC  5024               	movf	check_RFID@i,w,c
  2631  0003EE  240E               	addwf	check_RFID@dataBuf,w,c
  2632  0003F0  6EE1               	movwf	fsr1l,c
  2633  0003F2  5025               	movf	check_RFID@i+1,w,c
  2634  0003F4  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2635  0003F6  6EE2               	movwf	fsr1h,c
  2636  0003F8  50E7               	movf	indf1,w,c
  2637  0003FA  0FC9               	addlw	201
  2638  0003FC                     L4:
  2639  0003FC  6EDF               	movwf	indf2,c
  2640  0003FE                     l2326:
  2641                           
  2642                           ;RFID.c: 86:     }
  2643  0003FE  4A24               	infsnz	check_RFID@i,f,c
  2644  000400  2A25               	incf	check_RFID@i+1,f,c
  2645  000402  BE25               	btfsc	check_RFID@i+1,7,c
  2646  000404  D7BA               	goto	l2314
  2647  000406  5025               	movf	check_RFID@i+1,w,c
  2648  000408  E104               	bnz	u1430
  2649  00040A  0E0C               	movlw	12
  2650  00040C  5C24               	subwf	check_RFID@i,w,c
  2651  00040E  A0D8               	btfss	status,0,c
  2652  000410  D7B4               	goto	l2314
  2653  000412                     u1430:
  2654                           
  2655                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2656  000412  5012               	movf	check_RFID@hexBuf,w,c
  2657  000414  A4D8               	btfss	status,2,c
  2658  000416  D002               	goto	u1440
  2659  000418  0E01               	movlw	1
  2660  00041A  D001               	goto	u1450
  2661  00041C                     u1440:
  2662  00041C  0E00               	movlw	0
  2663  00041E                     u1450:
  2664  00041E  1013               	iorwf	check_RFID@hexBuf+1,w,c
  2665  000420  6E1E               	movwf	check_RFID@byte1,c
  2666                           
  2667                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2668  000422  5014               	movf	check_RFID@hexBuf+2,w,c
  2669  000424  A4D8               	btfss	status,2,c
  2670  000426  D002               	goto	u1460
  2671  000428  0E01               	movlw	1
  2672  00042A  D001               	goto	u1470
  2673  00042C                     u1460:
  2674  00042C  0E00               	movlw	0
  2675  00042E                     u1470:
  2676  00042E  1015               	iorwf	check_RFID@hexBuf+3,w,c
  2677  000430  6E1F               	movwf	check_RFID@byte2,c
  2678                           
  2679                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2680  000432  5016               	movf	check_RFID@hexBuf+4,w,c
  2681  000434  A4D8               	btfss	status,2,c
  2682  000436  D002               	goto	u1480
  2683  000438  0E01               	movlw	1
  2684  00043A  D001               	goto	u1490
  2685  00043C                     u1480:
  2686  00043C  0E00               	movlw	0
  2687  00043E                     u1490:
  2688  00043E  1017               	iorwf	check_RFID@hexBuf+5,w,c
  2689  000440  6E20               	movwf	check_RFID@byte3,c
  2690                           
  2691                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2692  000442  5018               	movf	check_RFID@hexBuf+6,w,c
  2693  000444  A4D8               	btfss	status,2,c
  2694  000446  D002               	goto	u1500
  2695  000448  0E01               	movlw	1
  2696  00044A  D001               	goto	u1510
  2697  00044C                     u1500:
  2698  00044C  0E00               	movlw	0
  2699  00044E                     u1510:
  2700  00044E  1019               	iorwf	check_RFID@hexBuf+7,w,c
  2701  000450  6E21               	movwf	check_RFID@byte4,c
  2702                           
  2703                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2704  000452  501A               	movf	check_RFID@hexBuf+8,w,c
  2705  000454  A4D8               	btfss	status,2,c
  2706  000456  D002               	goto	u1520
  2707  000458  0E01               	movlw	1
  2708  00045A  D001               	goto	u1530
  2709  00045C                     u1520:
  2710  00045C  0E00               	movlw	0
  2711  00045E                     u1530:
  2712  00045E  101B               	iorwf	check_RFID@hexBuf+9,w,c
  2713  000460  6E22               	movwf	check_RFID@byte5,c
  2714                           
  2715                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2716  000462  501C               	movf	check_RFID@hexBuf+10,w,c
  2717  000464  A4D8               	btfss	status,2,c
  2718  000466  D002               	goto	u1540
  2719  000468  0E01               	movlw	1
  2720  00046A  D001               	goto	u1550
  2721  00046C                     u1540:
  2722  00046C  0E00               	movlw	0
  2723  00046E                     u1550:
  2724  00046E  101D               	iorwf	check_RFID@hexBuf+11,w,c
  2725  000470  6E23               	movwf	check_RFID@checksum,c
  2726                           
  2727                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2728  000472  501E               	movf	check_RFID@byte1,w,c
  2729  000474  181F               	xorwf	check_RFID@byte2,w,c
  2730  000476  1820               	xorwf	check_RFID@byte3,w,c
  2731  000478  1821               	xorwf	check_RFID@byte4,w,c
  2732  00047A  6E10               	movwf	??_check_RFID& (0+255),c
  2733  00047C  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  2734  00047E  5023               	movf	check_RFID@checksum,w,c
  2735  000480  1822               	xorwf	check_RFID@byte5,w,c
  2736  000482  A4D8               	btfss	status,2,c
  2737  000484  D002               	goto	u1560
  2738  000486  0E01               	movlw	1
  2739  000488  D001               	goto	u1570
  2740  00048A                     u1560:
  2741  00048A  0E00               	movlw	0
  2742  00048C                     u1570:
  2743  00048C  1A10               	xorwf	??_check_RFID,f,c
  2744  00048E  0E00               	movlw	0
  2745  000490  1A11               	xorwf	??_check_RFID+1,f,c
  2746  000492  5010               	movf	??_check_RFID,w,c
  2747  000494  1011               	iorwf	??_check_RFID+1,w,c
  2748  000496  B4D8               	btfsc	status,2,c
  2749  000498  D00A               	goto	l2336
  2750                           
  2751                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  2752  00049A  0E02               	movlw	2
  2753  00049C  ECA8  F007         	call	_SetLine
  2754                           
  2755                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  2756  0004A0  0E41               	movlw	low STR_2
  2757  0004A2  6E0C               	movwf	LCD_String@string,c
  2758  0004A4  0E03               	movlw	high STR_2
  2759  0004A6  6E0D               	movwf	LCD_String@string+1,c
  2760  0004A8  EC7B  F006         	call	_LCD_String	;wreg free
  2761                           
  2762                           ;RFID.c: 101:     }
  2763  0004AC  0012               	return	
  2764  0004AE                     l2336:
  2765                           
  2766                           ;RFID.c: 104:         SetLine(2);
  2767  0004AE  0E02               	movlw	2
  2768  0004B0  ECA8  F007         	call	_SetLine
  2769                           
  2770                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  2771  0004B4  0E31               	movlw	low STR_3
  2772  0004B6  6E0C               	movwf	LCD_String@string,c
  2773  0004B8  0E03               	movlw	high STR_3
  2774  0004BA  6E0D               	movwf	LCD_String@string+1,c
  2775  0004BC  EC7B  F006         	call	_LCD_String	;wreg free
  2776  0004C0  0012               	return		;funcret
  2777  0004C2                     __end_of_check_RFID:
  2778                           	opt callstack 0
  2779                           
  2780 ;; *************** function _SetLine *****************
  2781 ;; Defined at:
  2782 ;;		line 107 in file "LCDIO.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  line            1    wreg     unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  line            1   11[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2796 ;;      Params:         0       0       0       0
  2797 ;;      Locals:         1       0       0       0
  2798 ;;      Temps:          0       0       0       0
  2799 ;;      Totals:         1       0       0       0
  2800 ;;Total ram usage:        1 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    5
  2803 ;; This function calls:
  2804 ;;		_SendLCD
  2805 ;; This function is called by:
  2806 ;;		_check_RFID
  2807 ;;		_display_RFID
  2808 ;;		_waitForInput
  2809 ;;		_debug
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text19
  2814  000F50                     __ptext19:
  2815                           	opt callstack 0
  2816  000F50                     _SetLine:
  2817                           	opt callstack 24
  2818                           
  2819                           ;incstack = 0
  2820                           ;SetLine@line stored from wreg
  2821  000F50  6E0C               	movwf	SetLine@line,c
  2822                           
  2823                           ;LCDIO.c: 109:     if(line == 1){
  2824  000F52  040C               	decf	SetLine@line,w,c
  2825  000F54  A4D8               	btfss	status,2,c
  2826  000F56  D005               	goto	l2176
  2827                           
  2828                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2829  000F58  0E00               	movlw	0
  2830  000F5A  6E0A               	movwf	SendLCD@type,c
  2831  000F5C  0E80               	movlw	128
  2832  000F5E  EC79  F007         	call	_SendLCD
  2833  000F62                     l2176:
  2834                           
  2835                           ;LCDIO.c: 113:     if(line == 2){
  2836  000F62  0E02               	movlw	2
  2837  000F64  180C               	xorwf	SetLine@line,w,c
  2838  000F66  A4D8               	btfss	status,2,c
  2839  000F68  D005               	goto	l2180
  2840                           
  2841                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2842  000F6A  0E00               	movlw	0
  2843  000F6C  6E0A               	movwf	SendLCD@type,c
  2844  000F6E  0EC0               	movlw	192
  2845  000F70  EC79  F007         	call	_SendLCD
  2846  000F74                     l2180:
  2847                           
  2848                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2849  000F74  0E21               	movlw	33
  2850  000F76                     u1907:
  2851  000F76  2EE8               	decfsz	wreg,f,c
  2852  000F78  D7FE               	bra	u1907
  2853  000F7A  F000               	nop	
  2854  000F7C  0012               	return		;funcret
  2855  000F7E                     __end_of_SetLine:
  2856                           	opt callstack 0
  2857                           
  2858 ;; *************** function _LCD_String *****************
  2859 ;; Defined at:
  2860 ;;		line 119 in file "LCDIO.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  string          2   11[COMRAM] PTR unsigned char 
  2863 ;;		 -> STR_9(16), STR_8(16), STR_7(13), debug@buf2(16), 
  2864 ;;		 -> debug@buf(16), STR_4(16), STR_3(16), STR_2(16), 
  2865 ;;		 -> STR_1(15), 
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2877 ;;      Params:         2       0       0       0
  2878 ;;      Locals:         0       0       0       0
  2879 ;;      Temps:          0       0       0       0
  2880 ;;      Totals:         2       0       0       0
  2881 ;;Total ram usage:        2 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    5
  2884 ;; This function calls:
  2885 ;;		_SendLCD
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;;		_check_RFID
  2889 ;;		_stopAndDisplay
  2890 ;;		_waitForInput
  2891 ;;		_debug
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text20
  2896  000CF6                     __ptext20:
  2897                           	opt callstack 0
  2898  000CF6                     _LCD_String:
  2899                           	opt callstack 24
  2900                           
  2901                           ;LCDIO.c: 121: while(*string != 0){
  2902                           
  2903                           ;incstack = 0
  2904  000CF6  D01A               	goto	l2162
  2905  000CF8                     l2156:
  2906                           
  2907                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2908  000CF8  0E01               	movlw	1
  2909  000CFA  6E0A               	movwf	SendLCD@type,c
  2910  000CFC  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2911  000D00  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2912  000D04  6AF8               	clrf	tblptru,c
  2913  000D06  0E02               	movlw	(high __ramtop+-1)
  2914  000D08  64F7               	cpfsgt	tblptrh,c
  2915  000D0A  D003               	bra	u1267
  2916  000D0C  0008               	tblrd		*
  2917  000D0E  50F5               	movf	tablat,w,c
  2918  000D10  D005               	bra	u1260
  2919  000D12                     u1267:
  2920  000D12  CFF6 FFE9          	movff	tblptrl,fsr0l
  2921  000D16  CFF7 FFEA          	movff	tblptrh,fsr0h
  2922  000D1A  50EF               	movf	indf0,w,c
  2923  000D1C                     u1260:
  2924  000D1C  EC79  F007         	call	_SendLCD
  2925  000D20  4A0C               	infsnz	LCD_String@string,f,c
  2926  000D22  2A0D               	incf	LCD_String@string+1,f,c
  2927                           
  2928                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2929  000D24  0E21               	movlw	33
  2930  000D26                     u1917:
  2931  000D26  2EE8               	decfsz	wreg,f,c
  2932  000D28  D7FE               	bra	u1917
  2933  000D2A  F000               	nop	
  2934  000D2C                     l2162:
  2935                           
  2936                           ;LCDIO.c: 121: while(*string != 0){
  2937  000D2C  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2938  000D30  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2939  000D34  6AF8               	clrf	tblptru,c
  2940  000D36  0E02               	movlw	(high __ramtop+-1)
  2941  000D38  64F7               	cpfsgt	tblptrh,c
  2942  000D3A  D003               	bra	u1277
  2943  000D3C  0008               	tblrd		*
  2944  000D3E  50F5               	movf	tablat,w,c
  2945  000D40  D005               	bra	u1270
  2946  000D42                     u1277:
  2947  000D42  CFF6 FFE9          	movff	tblptrl,fsr0l
  2948  000D46  CFF7 FFEA          	movff	tblptrh,fsr0h
  2949  000D4A  50EF               	movf	indf0,w,c
  2950  000D4C                     u1270:
  2951  000D4C  0900               	iorlw	0
  2952  000D4E  B4D8               	btfsc	status,2,c
  2953  000D50  0012               	return	
  2954  000D52  D7D2               	goto	l2156
  2955  000D54                     __end_of_LCD_String:
  2956                           	opt callstack 0
  2957                           
  2958 ;; *************** function _SendLCD *****************
  2959 ;; Defined at:
  2960 ;;		line 44 in file "LCDIO.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  Byte            1    wreg     unsigned char 
  2963 ;;  type            1    9[COMRAM] unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  Byte            1   10[COMRAM] unsigned char 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2975 ;;      Params:         1       0       0       0
  2976 ;;      Locals:         1       0       0       0
  2977 ;;      Temps:          0       0       0       0
  2978 ;;      Totals:         2       0       0       0
  2979 ;;Total ram usage:        2 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    4
  2982 ;; This function calls:
  2983 ;;		_LCDout
  2984 ;; This function is called by:
  2985 ;;		_init_LCD
  2986 ;;		_SetLine
  2987 ;;		_LCD_String
  2988 ;;		_ClearLCD
  2989 ;;		_display_RFID
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text21
  2994  000EF2                     __ptext21:
  2995                           	opt callstack 0
  2996  000EF2                     _SendLCD:
  2997                           	opt callstack 24
  2998                           
  2999                           ;incstack = 0
  3000                           ;SendLCD@Byte stored from wreg
  3001  000EF2  6E0B               	movwf	SendLCD@Byte,c
  3002                           
  3003                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3004  000EF4  B00A               	btfsc	SendLCD@type,0,c
  3005  000EF6  D002               	bra	u1195
  3006  000EF8  9E89               	bcf	3977,7,c	;volatile
  3007  000EFA  D001               	bra	u1196
  3008  000EFC                     u1195:
  3009  000EFC  8E89               	bsf	3977,7,c	;volatile
  3010  000EFE                     u1196:
  3011                           
  3012                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3013  000EFE  380B               	swapf	SendLCD@Byte,w,c
  3014  000F00  0B0F               	andlw	15
  3015  000F02  0B0F               	andlw	15
  3016  000F04  EC99  F005         	call	_LCDout
  3017                           
  3018                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3019  000F08  0E06               	movlw	6
  3020  000F0A                     u1927:
  3021  000F0A  2EE8               	decfsz	wreg,f,c
  3022  000F0C  D7FE               	bra	u1927
  3023  000F0E  D000               	nop2	
  3024                           
  3025                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3026  000F10  500B               	movf	SendLCD@Byte,w,c
  3027  000F12  0B0F               	andlw	15
  3028  000F14  EC99  F005         	call	_LCDout
  3029                           
  3030                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3031  000F18  0E21               	movlw	33
  3032  000F1A                     u1937:
  3033  000F1A  2EE8               	decfsz	wreg,f,c
  3034  000F1C  D7FE               	bra	u1937
  3035  000F1E  F000               	nop	
  3036  000F20  0012               	return		;funcret
  3037  000F22                     __end_of_SendLCD:
  3038                           	opt callstack 0
  3039                           
  3040 ;; *************** function _LCDout *****************
  3041 ;; Defined at:
  3042 ;;		line 31 in file "LCDIO.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  number          1    wreg     unsigned char 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  number          1    8[COMRAM] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3056 ;;      Params:         0       0       0       0
  3057 ;;      Locals:         1       0       0       0
  3058 ;;      Temps:          1       0       0       0
  3059 ;;      Totals:         2       0       0       0
  3060 ;;Total ram usage:        2 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    3
  3063 ;; This function calls:
  3064 ;;		_E_TOG
  3065 ;; This function is called by:
  3066 ;;		_SendLCD
  3067 ;;		_init_LCD
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text22
  3072  000B32                     __ptext22:
  3073                           	opt callstack 0
  3074  000B32                     _LCDout:
  3075                           	opt callstack 24
  3076                           
  3077                           ;incstack = 0
  3078                           ;LCDout@number stored from wreg
  3079  000B32  6E09               	movwf	LCDout@number,c
  3080                           
  3081                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3082  000B34  C009  F008         	movff	LCDout@number,??_LCDout
  3083  000B38  0E01               	movlw	1
  3084  000B3A  1608               	andwf	??_LCDout,f,c
  3085  000B3C  508B               	movf	3979,w,c	;volatile
  3086  000B3E  1808               	xorwf	??_LCDout,w,c
  3087  000B40  0BFE               	andlw	-2
  3088  000B42  1808               	xorwf	??_LCDout,w,c
  3089  000B44  6E8B               	movwf	3979,c	;volatile
  3090                           
  3091                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3092  000B46  C009  F008         	movff	LCDout@number,??_LCDout
  3093  000B4A  90D8               	bcf	status,0,c
  3094  000B4C  3208               	rrcf	??_LCDout,f,c
  3095  000B4E  0E01               	movlw	1
  3096  000B50  1608               	andwf	??_LCDout,f,c
  3097  000B52  4608               	rlncf	??_LCDout,f,c
  3098  000B54  4608               	rlncf	??_LCDout,f,c
  3099  000B56  4608               	rlncf	??_LCDout,f,c
  3100  000B58  508B               	movf	3979,w,c	;volatile
  3101  000B5A  1808               	xorwf	??_LCDout,w,c
  3102  000B5C  0BF7               	andlw	-9
  3103  000B5E  1808               	xorwf	??_LCDout,w,c
  3104  000B60  6E8B               	movwf	3979,c	;volatile
  3105                           
  3106                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3107  000B62  C009  F008         	movff	LCDout@number,??_LCDout
  3108  000B66  90D8               	bcf	status,0,c
  3109  000B68  3208               	rrcf	??_LCDout,f,c
  3110  000B6A  90D8               	bcf	status,0,c
  3111  000B6C  3208               	rrcf	??_LCDout,f,c
  3112  000B6E  0E01               	movlw	1
  3113  000B70  1608               	andwf	??_LCDout,f,c
  3114  000B72  508C               	movf	3980,w,c	;volatile
  3115  000B74  1808               	xorwf	??_LCDout,w,c
  3116  000B76  0BFE               	andlw	-2
  3117  000B78  1808               	xorwf	??_LCDout,w,c
  3118  000B7A  6E8C               	movwf	3980,c	;volatile
  3119                           
  3120                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3121  000B7C  C009  F008         	movff	LCDout@number,??_LCDout
  3122  000B80  90D8               	bcf	status,0,c
  3123  000B82  3208               	rrcf	??_LCDout,f,c
  3124  000B84  90D8               	bcf	status,0,c
  3125  000B86  3208               	rrcf	??_LCDout,f,c
  3126  000B88  90D8               	bcf	status,0,c
  3127  000B8A  3208               	rrcf	??_LCDout,f,c
  3128  000B8C  0E01               	movlw	1
  3129  000B8E  1608               	andwf	??_LCDout,f,c
  3130  000B90  4608               	rlncf	??_LCDout,f,c
  3131  000B92  508C               	movf	3980,w,c	;volatile
  3132  000B94  1808               	xorwf	??_LCDout,w,c
  3133  000B96  0BFD               	andlw	-3
  3134  000B98  1808               	xorwf	??_LCDout,w,c
  3135  000B9A  6E8C               	movwf	3980,c	;volatile
  3136                           
  3137                           ;LCDIO.c: 39:  E_TOG();
  3138  000B9C  EC1A  F008         	call	_E_TOG	;wreg free
  3139                           
  3140                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3141  000BA0  0E03               	movlw	3
  3142  000BA2                     u1947:
  3143  000BA2  2EE8               	decfsz	wreg,f,c
  3144  000BA4  D7FE               	bra	u1947
  3145  000BA6  F000               	nop	
  3146  000BA8  0012               	return		;funcret
  3147  000BAA                     __end_of_LCDout:
  3148                           	opt callstack 0
  3149                           
  3150 ;; *************** function _E_TOG *****************
  3151 ;; Defined at:
  3152 ;;		line 23 in file "LCDIO.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3166 ;;      Params:         0       0       0       0
  3167 ;;      Locals:         0       0       0       0
  3168 ;;      Temps:          0       0       0       0
  3169 ;;      Totals:         0       0       0       0
  3170 ;;Total ram usage:        0 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    2
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_LCDout
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           	psect	text23
  3181  001034                     __ptext23:
  3182                           	opt callstack 0
  3183  001034                     _E_TOG:
  3184                           	opt callstack 24
  3185                           
  3186                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3187                           
  3188                           ;incstack = 0
  3189  001034  8C89               	bsf	3977,6,c	;volatile
  3190                           
  3191                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3192  001036  0E03               	movlw	3
  3193  001038                     u1957:
  3194  001038  2EE8               	decfsz	wreg,f,c
  3195  00103A  D7FE               	bra	u1957
  3196  00103C  F000               	nop	
  3197                           
  3198                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3199  00103E  9C89               	bcf	3977,6,c	;volatile
  3200  001040  0012               	return		;funcret
  3201  001042                     __end_of_E_TOG:
  3202                           	opt callstack 0
  3203                           
  3204 ;; *************** function _init_motor_struct *****************
  3205 ;; Defined at:
  3206 ;;		line 99 in file "dc_motor.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3209 ;;		 -> main@motorL(9), 
  3210 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3211 ;;		 -> main@motorR(9), 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3223 ;;      Params:         4       0       0       0
  3224 ;;      Locals:         0       0       0       0
  3225 ;;      Temps:          0       0       0       0
  3226 ;;      Totals:         4       0       0       0
  3227 ;;Total ram usage:        4 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    4
  3230 ;; This function calls:
  3231 ;;		_setMotorPWM
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text24
  3238  0006E8                     __ptext24:
  3239                           	opt callstack 0
  3240  0006E8                     _init_motor_struct:
  3241                           	opt callstack 26
  3242                           
  3243                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3244                           
  3245                           ;incstack = 0
  3246  0006E8  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  3247  0006EC  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3248  0006F0  0E00               	movlw	0
  3249  0006F2  6EDF               	movwf	indf2,c
  3250                           
  3251                           ;dc_motor.c: 103: mL->direction = 1;
  3252  0006F4  EE20 F001          	lfsr	2,1
  3253  0006F8  501F               	movf	init_motor_struct@mL,w,c
  3254  0006FA  26D9               	addwf	fsr2l,f,c
  3255  0006FC  5020               	movf	init_motor_struct@mL+1,w,c
  3256  0006FE  22DA               	addwfc	fsr2h,f,c
  3257  000700  0E01               	movlw	1
  3258  000702  6EDF               	movwf	indf2,c
  3259                           
  3260                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3261  000704  EE20 F002          	lfsr	2,2
  3262  000708  501F               	movf	init_motor_struct@mL,w,c
  3263  00070A  26D9               	addwf	fsr2l,f,c
  3264  00070C  5020               	movf	init_motor_struct@mL+1,w,c
  3265  00070E  22DA               	addwfc	fsr2h,f,c
  3266  000710  0E79               	movlw	121
  3267  000712  6EDE               	movwf	postinc2,c
  3268  000714  0E0F               	movlw	15
  3269  000716  6EDD               	movwf	postdec2,c
  3270                           
  3271                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3272  000718  EE20 F004          	lfsr	2,4
  3273  00071C  501F               	movf	init_motor_struct@mL,w,c
  3274  00071E  26D9               	addwf	fsr2l,f,c
  3275  000720  5020               	movf	init_motor_struct@mL+1,w,c
  3276  000722  22DA               	addwfc	fsr2h,f,c
  3277  000724  0E78               	movlw	120
  3278  000726  6EDE               	movwf	postinc2,c
  3279  000728  0E0F               	movlw	15
  3280  00072A  6EDD               	movwf	postdec2,c
  3281                           
  3282                           ;dc_motor.c: 106: mL->dir_pin=0;
  3283  00072C  EE20 F006          	lfsr	2,6
  3284  000730  501F               	movf	init_motor_struct@mL,w,c
  3285  000732  26D9               	addwf	fsr2l,f,c
  3286  000734  5020               	movf	init_motor_struct@mL+1,w,c
  3287  000736  22DA               	addwfc	fsr2h,f,c
  3288  000738  0E00               	movlw	0
  3289  00073A  6EDF               	movwf	indf2,c
  3290                           
  3291                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3292  00073C  EE20 F007          	lfsr	2,7
  3293  000740  501F               	movf	init_motor_struct@mL,w,c
  3294  000742  26D9               	addwf	fsr2l,f,c
  3295  000744  5020               	movf	init_motor_struct@mL+1,w,c
  3296  000746  22DA               	addwfc	fsr2h,f,c
  3297  000748  0EC7               	movlw	199
  3298  00074A  6EDE               	movwf	postinc2,c
  3299  00074C  0E00               	movlw	0
  3300  00074E  6EDD               	movwf	postdec2,c
  3301                           
  3302                           ;dc_motor.c: 109: mR->power = 0;
  3303  000750  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  3304  000754  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3305  000758  0E00               	movlw	0
  3306  00075A  6EDF               	movwf	indf2,c
  3307                           
  3308                           ;dc_motor.c: 110: mR->direction = 1;
  3309  00075C  EE20 F001          	lfsr	2,1
  3310  000760  5021               	movf	init_motor_struct@mR,w,c
  3311  000762  26D9               	addwf	fsr2l,f,c
  3312  000764  5022               	movf	init_motor_struct@mR+1,w,c
  3313  000766  22DA               	addwfc	fsr2h,f,c
  3314  000768  0E01               	movlw	1
  3315  00076A  6EDF               	movwf	indf2,c
  3316                           
  3317                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3318  00076C  EE20 F002          	lfsr	2,2
  3319  000770  5021               	movf	init_motor_struct@mR,w,c
  3320  000772  26D9               	addwf	fsr2l,f,c
  3321  000774  5022               	movf	init_motor_struct@mR+1,w,c
  3322  000776  22DA               	addwfc	fsr2h,f,c
  3323  000778  0E77               	movlw	119
  3324  00077A  6EDE               	movwf	postinc2,c
  3325  00077C  0E0F               	movlw	15
  3326  00077E  6EDD               	movwf	postdec2,c
  3327                           
  3328                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3329  000780  EE20 F004          	lfsr	2,4
  3330  000784  5021               	movf	init_motor_struct@mR,w,c
  3331  000786  26D9               	addwf	fsr2l,f,c
  3332  000788  5022               	movf	init_motor_struct@mR+1,w,c
  3333  00078A  22DA               	addwfc	fsr2h,f,c
  3334  00078C  0E76               	movlw	118
  3335  00078E  6EDE               	movwf	postinc2,c
  3336  000790  0E0F               	movlw	15
  3337  000792  6EDD               	movwf	postdec2,c
  3338                           
  3339                           ;dc_motor.c: 113: mR->dir_pin=2;
  3340  000794  EE20 F006          	lfsr	2,6
  3341  000798  5021               	movf	init_motor_struct@mR,w,c
  3342  00079A  26D9               	addwf	fsr2l,f,c
  3343  00079C  5022               	movf	init_motor_struct@mR+1,w,c
  3344  00079E  22DA               	addwfc	fsr2h,f,c
  3345  0007A0  0E02               	movlw	2
  3346  0007A2  6EDF               	movwf	indf2,c
  3347                           
  3348                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3349  0007A4  EE20 F007          	lfsr	2,7
  3350  0007A8  5021               	movf	init_motor_struct@mR,w,c
  3351  0007AA  26D9               	addwf	fsr2l,f,c
  3352  0007AC  5022               	movf	init_motor_struct@mR+1,w,c
  3353  0007AE  22DA               	addwfc	fsr2h,f,c
  3354  0007B0  0EC7               	movlw	199
  3355  0007B2  6EDE               	movwf	postinc2,c
  3356  0007B4  0E00               	movlw	0
  3357  0007B6  6EDD               	movwf	postdec2,c
  3358                           
  3359                           ;dc_motor.c: 116: setMotorPWM(mL);
  3360  0007B8  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  3361  0007BC  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3362  0007C0  EC61  F002         	call	_setMotorPWM	;wreg free
  3363                           
  3364                           ;dc_motor.c: 117: setMotorPWM(mR);
  3365  0007C4  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  3366  0007C8  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3367  0007CC  EC61  F002         	call	_setMotorPWM	;wreg free
  3368  0007D0  0012               	return		;funcret
  3369  0007D2                     __end_of_init_motor_struct:
  3370                           	opt callstack 0
  3371                           
  3372 ;; *************** function _setMotorPWM *****************
  3373 ;; Defined at:
  3374 ;;		line 18 in file "dc_motor.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  m               2   21[COMRAM] PTR struct DC_motor
  3377 ;;		 -> main@motorR(9), main@motorL(9), 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  PWMduty         2   28[COMRAM] int 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      void 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3389 ;;      Params:         2       0       0       0
  3390 ;;      Locals:         2       0       0       0
  3391 ;;      Temps:          5       0       0       0
  3392 ;;      Totals:         9       0       0       0
  3393 ;;Total ram usage:        9 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    3
  3396 ;; This function calls:
  3397 ;;		___awdiv
  3398 ;;		___wmul
  3399 ;; This function is called by:
  3400 ;;		_stop
  3401 ;;		_turnRight
  3402 ;;		_moveForward
  3403 ;;		_moveBackward
  3404 ;;		_init_motor_struct
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text25
  3409  0004C2                     __ptext25:
  3410                           	opt callstack 0
  3411  0004C2                     _setMotorPWM:
  3412                           	opt callstack 25
  3413                           
  3414                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3415                           
  3416                           ;incstack = 0
  3417  0004C2  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  3418  0004C6  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3419  0004CA  50DF               	movf	indf2,w,c
  3420  0004CC  6E18               	movwf	??_setMotorPWM& (0+255),c
  3421  0004CE  5018               	movf	??_setMotorPWM,w,c
  3422  0004D0  6E08               	movwf	___wmul@multiplier,c
  3423  0004D2  6A09               	clrf	___wmul@multiplier+1,c
  3424  0004D4  EE20 F007          	lfsr	2,7
  3425  0004D8  5016               	movf	setMotorPWM@m,w,c
  3426  0004DA  26D9               	addwf	fsr2l,f,c
  3427  0004DC  5017               	movf	setMotorPWM@m+1,w,c
  3428  0004DE  22DA               	addwfc	fsr2h,f,c
  3429  0004E0  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  3430  0004E4  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  3431  0004E8  ECD2  F007         	call	___wmul	;wreg free
  3432  0004EC  C008  F00E         	movff	?___wmul,___awdiv@dividend
  3433  0004F0  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  3434  0004F4  0E00               	movlw	0
  3435  0004F6  6E11               	movwf	___awdiv@divisor+1,c
  3436  0004F8  0E64               	movlw	100
  3437  0004FA  6E10               	movwf	___awdiv@divisor,c
  3438  0004FC  EC94  F004         	call	___awdiv	;wreg free
  3439  000500  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  3440  000504  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3441                           
  3442                           ;dc_motor.c: 24:     if (m->direction)
  3443  000508  EE20 F001          	lfsr	2,1
  3444  00050C  5016               	movf	setMotorPWM@m,w,c
  3445  00050E  26D9               	addwf	fsr2l,f,c
  3446  000510  5017               	movf	setMotorPWM@m+1,w,c
  3447  000512  22DA               	addwfc	fsr2h,f,c
  3448  000514  50DF               	movf	indf2,w,c
  3449  000516  B4D8               	btfsc	status,2,c
  3450  000518  D024               	goto	l2170
  3451                           
  3452                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3453  00051A  EE20 F006          	lfsr	2,6
  3454  00051E  5016               	movf	setMotorPWM@m,w,c
  3455  000520  26D9               	addwf	fsr2l,f,c
  3456  000522  5017               	movf	setMotorPWM@m+1,w,c
  3457  000524  22DA               	addwfc	fsr2h,f,c
  3458  000526  50DF               	movf	indf2,w,c
  3459  000528  6E18               	movwf	??_setMotorPWM& (0+255),c
  3460  00052A  0E01               	movlw	1
  3461  00052C  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3462  00052E  2A18               	incf	??_setMotorPWM,f,c
  3463  000530  D002               	goto	u1304
  3464  000532                     u1305:
  3465  000532  90D8               	bcf	status,0,c
  3466  000534  3619               	rlcf	??_setMotorPWM+1,f,c
  3467  000536                     u1304:
  3468  000536  2E18               	decfsz	??_setMotorPWM,f,c
  3469  000538  D7FC               	goto	u1305
  3470  00053A  5019               	movf	??_setMotorPWM+1,w,c
  3471  00053C  108A               	iorwf	3978,w,c	;volatile
  3472  00053E  6E8A               	movwf	3978,c	;volatile
  3473                           
  3474                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3475  000540  EE20 F007          	lfsr	2,7
  3476  000544  5016               	movf	setMotorPWM@m,w,c
  3477  000546  26D9               	addwf	fsr2l,f,c
  3478  000548  5017               	movf	setMotorPWM@m+1,w,c
  3479  00054A  22DA               	addwfc	fsr2h,f,c
  3480  00054C  CFDE F018          	movff	postinc2,??_setMotorPWM
  3481  000550  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3482  000554  501D               	movf	setMotorPWM@PWMduty,w,c
  3483  000556  5C18               	subwf	??_setMotorPWM,w,c
  3484  000558  6E1D               	movwf	setMotorPWM@PWMduty,c
  3485  00055A  501E               	movf	setMotorPWM@PWMduty+1,w,c
  3486  00055C  5819               	subwfb	??_setMotorPWM+1,w,c
  3487  00055E  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  3488                           
  3489                           ;dc_motor.c: 28:     }
  3490  000560  D014               	goto	l106
  3491  000562                     l2170:
  3492                           
  3493                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3494  000562  EE20 F006          	lfsr	2,6
  3495  000566  5016               	movf	setMotorPWM@m,w,c
  3496  000568  26D9               	addwf	fsr2l,f,c
  3497  00056A  5017               	movf	setMotorPWM@m+1,w,c
  3498  00056C  22DA               	addwfc	fsr2h,f,c
  3499  00056E  50DF               	movf	indf2,w,c
  3500  000570  6E18               	movwf	??_setMotorPWM& (0+255),c
  3501  000572  0E01               	movlw	1
  3502  000574  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  3503  000576  2A18               	incf	??_setMotorPWM,f,c
  3504  000578  D002               	goto	u1314
  3505  00057A                     u1315:
  3506  00057A  90D8               	bcf	status,0,c
  3507  00057C  3619               	rlcf	??_setMotorPWM+1,f,c
  3508  00057E                     u1314:
  3509  00057E  2E18               	decfsz	??_setMotorPWM,f,c
  3510  000580  D7FC               	goto	u1315
  3511  000582  5019               	movf	??_setMotorPWM+1,w,c
  3512  000584  0AFF               	xorlw	255
  3513  000586  148A               	andwf	3978,w,c	;volatile
  3514  000588  6E8A               	movwf	3978,c	;volatile
  3515  00058A                     l106:
  3516                           
  3517                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3518  00058A  EE20 F002          	lfsr	2,2
  3519  00058E  5016               	movf	setMotorPWM@m,w,c
  3520  000590  26D9               	addwf	fsr2l,f,c
  3521  000592  5017               	movf	setMotorPWM@m+1,w,c
  3522  000594  22DA               	addwfc	fsr2h,f,c
  3523  000596  CFDE F018          	movff	postinc2,??_setMotorPWM
  3524  00059A  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3525  00059E  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3526  0005A2  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3527  0005A6  441D               	rlncf	setMotorPWM@PWMduty,w,c
  3528  0005A8  46E8               	rlncf	wreg,f,c
  3529  0005AA  0BFC               	andlw	252
  3530  0005AC  6EDF               	movwf	indf2,c
  3531                           
  3532                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3533  0005AE  EE20 F004          	lfsr	2,4
  3534  0005B2  5016               	movf	setMotorPWM@m,w,c
  3535  0005B4  26D9               	addwf	fsr2l,f,c
  3536  0005B6  5017               	movf	setMotorPWM@m+1,w,c
  3537  0005B8  22DA               	addwfc	fsr2h,f,c
  3538  0005BA  CFDE F018          	movff	postinc2,??_setMotorPWM
  3539  0005BE  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  3540  0005C2  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  3541  0005C6  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3542  0005CA  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3543  0005CE  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3544  0005D2  0E06               	movlw	6
  3545  0005D4  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  3546  0005D6                     u1325:
  3547  0005D6  341B               	rlcf	??_setMotorPWM+3,w,c
  3548  0005D8  321B               	rrcf	??_setMotorPWM+3,f,c
  3549  0005DA  321A               	rrcf	??_setMotorPWM+2,f,c
  3550  0005DC  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3551  0005DE  D7FB               	goto	u1325
  3552  0005E0  501A               	movf	??_setMotorPWM+2,w,c
  3553  0005E2  6EDF               	movwf	indf2,c
  3554  0005E4  0012               	return		;funcret
  3555  0005E6                     __end_of_setMotorPWM:
  3556                           	opt callstack 0
  3557                           
  3558 ;; *************** function ___wmul *****************
  3559 ;; Defined at:
  3560 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  multiplier      2    7[COMRAM] unsigned int 
  3563 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  product         2   11[COMRAM] unsigned int 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  2    7[COMRAM] unsigned int 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, prodl, prodh
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3575 ;;      Params:         4       0       0       0
  3576 ;;      Locals:         2       0       0       0
  3577 ;;      Temps:          0       0       0       0
  3578 ;;      Totals:         6       0       0       0
  3579 ;;Total ram usage:        6 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_setMotorPWM
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text26
  3590  000FA4                     __ptext26:
  3591                           	opt callstack 0
  3592  000FA4                     ___wmul:
  3593                           	opt callstack 25
  3594                           
  3595                           ;incstack = 0
  3596  000FA4  5008               	movf	___wmul@multiplier,w,c
  3597  000FA6  020A               	mulwf	___wmul@multiplicand,c
  3598  000FA8  CFF3 F00C          	movff	prodl,___wmul@product
  3599  000FAC  CFF4 F00D          	movff	prodh,___wmul@product+1
  3600  000FB0  5008               	movf	___wmul@multiplier,w,c
  3601  000FB2  020B               	mulwf	___wmul@multiplicand+1,c
  3602  000FB4  50F3               	movf	prodl,w,c
  3603  000FB6  260D               	addwf	___wmul@product+1,f,c
  3604  000FB8  5009               	movf	___wmul@multiplier+1,w,c
  3605  000FBA  020A               	mulwf	___wmul@multiplicand,c
  3606  000FBC  50F3               	movf	prodl,w,c
  3607  000FBE  260D               	addwf	___wmul@product+1,f,c
  3608  000FC0  C00C  F008         	movff	___wmul@product,?___wmul
  3609  000FC4  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3610  000FC8  0012               	return		;funcret
  3611  000FCA                     __end_of___wmul:
  3612                           	opt callstack 0
  3613                           
  3614 ;; *************** function ___awdiv *****************
  3615 ;; Defined at:
  3616 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  dividend        2   13[COMRAM] int 
  3619 ;;  divisor         2   15[COMRAM] int 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;  quotient        2   19[COMRAM] int 
  3622 ;;  sign            1   18[COMRAM] unsigned char 
  3623 ;;  counter         1   17[COMRAM] unsigned char 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  2   13[COMRAM] int 
  3626 ;; Registers used:
  3627 ;;		wreg, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3633 ;;      Params:         4       0       0       0
  3634 ;;      Locals:         4       0       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         8       0       0       0
  3637 ;;Total ram usage:        8 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    2
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_setMotorPWM
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text27
  3648  000928                     __ptext27:
  3649                           	opt callstack 0
  3650  000928                     ___awdiv:
  3651                           	opt callstack 25
  3652                           
  3653                           ;incstack = 0
  3654  000928  0E00               	movlw	0
  3655  00092A  6E13               	movwf	___awdiv@sign,c
  3656  00092C  AE11               	btfss	___awdiv@divisor+1,7,c
  3657  00092E  D006               	goto	l2118
  3658  000930  6C10               	negf	___awdiv@divisor,c
  3659  000932  1E11               	comf	___awdiv@divisor+1,f,c
  3660  000934  B0D8               	btfsc	status,0,c
  3661  000936  2A11               	incf	___awdiv@divisor+1,f,c
  3662  000938  0E01               	movlw	1
  3663  00093A  6E13               	movwf	___awdiv@sign,c
  3664  00093C                     l2118:
  3665  00093C  AE0F               	btfss	___awdiv@dividend+1,7,c
  3666  00093E  D006               	goto	l2124
  3667  000940  6C0E               	negf	___awdiv@dividend,c
  3668  000942  1E0F               	comf	___awdiv@dividend+1,f,c
  3669  000944  B0D8               	btfsc	status,0,c
  3670  000946  2A0F               	incf	___awdiv@dividend+1,f,c
  3671  000948  0E01               	movlw	1
  3672  00094A  1A13               	xorwf	___awdiv@sign,f,c
  3673  00094C                     l2124:
  3674  00094C  0E00               	movlw	0
  3675  00094E  6E15               	movwf	___awdiv@quotient+1,c
  3676  000950  0E00               	movlw	0
  3677  000952  6E14               	movwf	___awdiv@quotient,c
  3678  000954  5010               	movf	___awdiv@divisor,w,c
  3679  000956  1011               	iorwf	___awdiv@divisor+1,w,c
  3680  000958  B4D8               	btfsc	status,2,c
  3681  00095A  D01C               	goto	l2146
  3682  00095C  0E01               	movlw	1
  3683  00095E  6E12               	movwf	___awdiv@counter,c
  3684  000960  D004               	goto	l2132
  3685  000962                     l2130:
  3686  000962  90D8               	bcf	status,0,c
  3687  000964  3610               	rlcf	___awdiv@divisor,f,c
  3688  000966  3611               	rlcf	___awdiv@divisor+1,f,c
  3689  000968  2A12               	incf	___awdiv@counter,f,c
  3690  00096A                     l2132:
  3691  00096A  AE11               	btfss	___awdiv@divisor+1,7,c
  3692  00096C  D7FA               	goto	l2130
  3693  00096E                     u1230:
  3694  00096E  90D8               	bcf	status,0,c
  3695  000970  3614               	rlcf	___awdiv@quotient,f,c
  3696  000972  3615               	rlcf	___awdiv@quotient+1,f,c
  3697  000974  5010               	movf	___awdiv@divisor,w,c
  3698  000976  5C0E               	subwf	___awdiv@dividend,w,c
  3699  000978  5011               	movf	___awdiv@divisor+1,w,c
  3700  00097A  580F               	subwfb	___awdiv@dividend+1,w,c
  3701  00097C  A0D8               	btfss	status,0,c
  3702  00097E  D005               	goto	l2142
  3703  000980  5010               	movf	___awdiv@divisor,w,c
  3704  000982  5E0E               	subwf	___awdiv@dividend,f,c
  3705  000984  5011               	movf	___awdiv@divisor+1,w,c
  3706  000986  5A0F               	subwfb	___awdiv@dividend+1,f,c
  3707  000988  8014               	bsf	___awdiv@quotient,0,c
  3708  00098A                     l2142:
  3709  00098A  90D8               	bcf	status,0,c
  3710  00098C  3211               	rrcf	___awdiv@divisor+1,f,c
  3711  00098E  3210               	rrcf	___awdiv@divisor,f,c
  3712  000990  2E12               	decfsz	___awdiv@counter,f,c
  3713  000992  D7ED               	goto	u1230
  3714  000994                     l2146:
  3715  000994  5013               	movf	___awdiv@sign,w,c
  3716  000996  B4D8               	btfsc	status,2,c
  3717  000998  D004               	goto	l2150
  3718  00099A  6C14               	negf	___awdiv@quotient,c
  3719  00099C  1E15               	comf	___awdiv@quotient+1,f,c
  3720  00099E  B0D8               	btfsc	status,0,c
  3721  0009A0  2A15               	incf	___awdiv@quotient+1,f,c
  3722  0009A2                     l2150:
  3723  0009A2  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  3724  0009A6  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  3725  0009AA  0012               	return		;funcret
  3726  0009AC                     __end_of___awdiv:
  3727                           	opt callstack 0
  3728                           
  3729 ;; *************** function _InterruptHandlerHigh *****************
  3730 ;; Defined at:
  3731 ;;		line 60 in file "main.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  throwaway       1    0        unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3745 ;;      Params:         0       0       0       0
  3746 ;;      Locals:         1       0       0       0
  3747 ;;      Temps:          2       0       0       0
  3748 ;;      Totals:         3       0       0       0
  3749 ;;Total ram usage:        3 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    1
  3752 ;; This function calls:
  3753 ;;		_processRFID
  3754 ;; This function is called by:
  3755 ;;		Interrupt level 2
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	intcode
  3760  000008                     __pintcode:
  3761                           	opt callstack 0
  3762  000008                     _InterruptHandlerHigh:
  3763                           	opt callstack 23
  3764                           
  3765                           ;incstack = 0
  3766  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3767  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3768  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3769                           
  3770                           ;main.c: 64:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3771  000012  AA9E               	btfss	3998,5,c	;volatile
  3772  000014  D00D               	goto	i2l57
  3773  000016  0443               	decf	_robot_mode,w,c	;volatile
  3774  000018  A4D8               	btfss	status,2,c
  3775  00001A  D00A               	goto	i2l57
  3776                           
  3777                           ;main.c: 65:     {;main.c: 67:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3778  00001C  0E80               	movlw	low _RFIDbuf
  3779  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  3780  000020  0E00               	movlw	high _RFIDbuf
  3781  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  3782  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3783  000028  EC33  F007         	call	_processRFID	;wreg free
  3784  00002C  6E44               	movwf	_RFID_flag,c	;volatile
  3785                           
  3786                           ;main.c: 68:     }
  3787  00002E  D001               	goto	i2l59
  3788  000030                     i2l57:
  3789  000030  50AE               	movf	4014,w,c	;volatile
  3790  000032                     i2l59:
  3791  000032  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3792  000036  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3793  00003A  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3794  00003C  0011               	retfie		f
  3795  00003E                     __end_of_InterruptHandlerHigh:
  3796                           	opt callstack 0
  3797                           
  3798 ;; *************** function _processRFID *****************
  3799 ;; Defined at:
  3800 ;;		line 34 in file "RFID.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3803 ;;		 -> RFIDbuf(12), 
  3804 ;;  latestChar      1    2[COMRAM] unsigned char 
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  i               1    3[COMRAM] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      unsigned char 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3816 ;;      Params:         3       0       0       0
  3817 ;;      Locals:         1       0       0       0
  3818 ;;      Temps:          0       0       0       0
  3819 ;;      Totals:         4       0       0       0
  3820 ;;Total ram usage:        4 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_InterruptHandlerHigh
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text29
  3830  000E66                     __ptext29:
  3831                           	opt callstack 0
  3832  000E66                     _processRFID:
  3833                           	opt callstack 23
  3834                           
  3835                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3836                           
  3837                           ;incstack = 0
  3838  000E66  0E03               	movlw	3
  3839  000E68  1803               	xorwf	processRFID@latestChar,w,c
  3840  000E6A  A4D8               	btfss	status,2,c
  3841  000E6C  D002               	goto	i2l1898
  3842                           
  3843                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3844  000E6E  0E01               	movlw	1
  3845  000E70  0012               	return	
  3846  000E72                     i2l1898:
  3847                           
  3848                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3849  000E72  0E02               	movlw	2
  3850  000E74  1803               	xorwf	processRFID@latestChar,w,c
  3851  000E76  A4D8               	btfss	status,2,c
  3852  000E78  D012               	goto	i2l1918
  3853                           
  3854                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3855  000E7A  0E00               	movlw	0
  3856  000E7C  6E42               	movwf	processRFID@position_in_buf,c
  3857                           
  3858                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3859  000E7E  0E00               	movlw	0
  3860  000E80  6E04               	movwf	processRFID@i,c
  3861  000E82                     i2l1906:
  3862                           
  3863                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3864  000E82  5004               	movf	processRFID@i,w,c
  3865  000E84  2401               	addwf	processRFID@RFIDbuf,w,c
  3866  000E86  6ED9               	movwf	fsr2l,c
  3867  000E88  0E00               	movlw	0
  3868  000E8A  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3869  000E8C  6EDA               	movwf	fsr2h,c
  3870  000E8E  0E00               	movlw	0
  3871  000E90  6EDF               	movwf	indf2,c
  3872                           
  3873                           ;RFID.c: 56:            }
  3874  000E92  2A04               	incf	processRFID@i,f,c
  3875  000E94  0E0B               	movlw	11
  3876  000E96  6404               	cpfsgt	processRFID@i,c
  3877  000E98  D7F4               	goto	i2l1906
  3878  000E9A                     i2u105_40:
  3879                           
  3880                           ;RFID.c: 58:            return 0;
  3881  000E9A  0E00               	movlw	0
  3882  000E9C  0012               	return	
  3883  000E9E                     i2l1918:
  3884                           
  3885                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  3886  000E9E  5042               	movf	processRFID@position_in_buf,w,c
  3887  000EA0  2401               	addwf	processRFID@RFIDbuf,w,c
  3888  000EA2  6ED9               	movwf	fsr2l,c
  3889  000EA4  0E00               	movlw	0
  3890  000EA6  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3891  000EA8  6EDA               	movwf	fsr2h,c
  3892  000EAA  C003  FFDF         	movff	processRFID@latestChar,indf2
  3893                           
  3894                           ;RFID.c: 64:             position_in_buf++;
  3895  000EAE  2A42               	incf	processRFID@position_in_buf,f,c
  3896  000EB0  D7F4               	goto	i2u105_40
  3897  000EB2                     __end_of_processRFID:
  3898                           	opt callstack 0
  3899                           
  3900                           	psect	rparam
  3901  0000                     
  3902                           	psect	temp
  3903  000045                     btemp:
  3904                           	opt callstack 0
  3905  000045                     	ds	1
  3906  0000                     int$flags	set	btemp
  3907  0000                     wtemp8	set	btemp+1
  3908  0000                     ttemp5	set	btemp+1
  3909  0000                     ttemp6	set	btemp+4
  3910  0000                     ttemp7	set	btemp+8
  3911                           tosu	equ	0xFFF
  3912                           tosh	equ	0xFFE
  3913                           tosl	equ	0xFFD
  3914                           stkptr	equ	0xFFC
  3915                           pclatu	equ	0xFFB
  3916                           pclath	equ	0xFFA
  3917                           pcl	equ	0xFF9
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           indf0	equ	0xFEF
  3925                           postinc0	equ	0xFEE
  3926                           postdec0	equ	0xFED
  3927                           preinc0	equ	0xFEC
  3928                           plusw0	equ	0xFEB
  3929                           fsr0h	equ	0xFEA
  3930                           fsr0l	equ	0xFE9
  3931                           wreg	equ	0xFE8
  3932                           indf1	equ	0xFE7
  3933                           postinc1	equ	0xFE6
  3934                           postdec1	equ	0xFE5
  3935                           preinc1	equ	0xFE4
  3936                           plusw1	equ	0xFE3
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           bsr	equ	0xFE0
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           preinc2	equ	0xFDC
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8


Data Sizes:
    Strings     111
    Constant    0
    Data        0
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      68
    BANK0           160     26      70
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1796_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@micros	PTR unsigned long  size(2) Largest target is 4
		 -> main@movementMicros(BANK0[4]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    classify_data@smoothed	PTR unsigned int  size(2) Largest target is 2
		 -> scanForBeacon@smoothed_data(COMRAM[2]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[16]), STR_8(CODE[16]), STR_7(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_4(CODE[16]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _waitForInput->_LCD_String
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnRight
    _turnRight->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   36242
                                              0 BANK0     26    26      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4356
                                             13 COMRAM     4     4      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      10     4      6    6309
                                             39 COMRAM    10     4      6
                           _ClearLCD
                         _LCD_String
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     7      6    3683
                                             39 COMRAM    13     7      6
                      _classify_data
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                       14    10      4     400
                                              7 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          16     8      8    3321
                                             39 COMRAM    16     8      8
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     1     12   11639
                                             39 COMRAM    13     1     12
                         _check_RFID
                       _display_RFID
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4446
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1992
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (8) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _classify_data
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      46       5       43.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      44       1       72.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A       3        0.0%
DATA                 0      0      8A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Mar 05 22:05:29 2020

                           l49 0F26                   ___awdiv@sign 0013            ___wmul@multiplicand 000A  
                ?_display_RFID 000D                    ?_LCD_String 000C                            l106 058A  
                          l322 0BD2                            l298 0DDE            display_RFID@dataBuf 000D  
               moveToBeacon@mL 0028                 moveToBeacon@mR 002A        __size_of_stopAndDisplay 006E  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2130 0962                           l2132 096A                           l2124 094C  
                         l2150 09A2                           l2142 098A                           l2118 093C  
                         l2320 03BC                           l2146 0994                           l2170 0562  
                         l2162 0D2C                           l2314 037A                           l2306 0A9A  
                         l2156 0CF8                           l2180 0F74                           l2244 0D5C  
                         l2500 0624                           l2326 03FE                           l2176 0F62  
                         l2336 04AE                           l2280 0ADA                           l2440 0E28  
                         l2264 09D6                           l2248 0D6A                           l2512 06B2  
                         l2504 0648                           l2290 0B1C                           l2274 0A18  
                         l2418 0BEE                           l2348 0EC4                           l2428 0CC0  
                         l2516 06DA                           l2508 0684                           l2462 0DEC  
                         l2366 0924                           l2470 0C3E                           l2296 0A58  
                         l2480 0C56                           l2486 0C88                           STR_1 0351  
                         STR_2 0341                           STR_3 0331                           STR_4 0321  
                         STR_5 036D                           STR_7 0360                           STR_8 0311  
                         STR_9 0301                           u1230 096E                           u1304 0536  
                         u1305 0532                           u1314 057E                           u1315 057A  
                         u1260 0D1C                           u1500 044C                           u1325 05D6  
                         u1270 0D4C                           u1510 044E                           u1430 0412  
                         _LATB 000F8A                           u1520 045C                           u1440 041C  
                         u1530 045E                           u1450 041E                           u1195 0EFC  
                         u1267 0D12                           u1196 0EFE                           u1540 046C  
                         u1460 042C                           u1277 0D42                           u1550 046E  
                         u1470 042E                           u1630 0C1A                           u1560 048A  
                         u1480 043C                           u1570 048C                           u1490 043E  
                         u1590 0EF0                           u1670 0C82                           u1807 0832  
                         u1817 0844                           u1737 0BF8                           u1907 0F76  
                         u1827 0856                           u1747 0C60                           u1917 0D26  
                         u1837 086C                           u1757 0DA0                           u1927 0F0A  
                         u1847 0880                           u1767 07F0                           u1937 0F1A  
                         u1857 0892                           u1777 0806                           u1947 0BA2  
                         u1867 0A0C                           u1787 0816                           u1957 1038  
                         u1877 0A8E                           u1797 0824                           u1887 0B10  
                         u1897 102A                           i2l57 0030                           i2l59 0032  
                         _dbuf 0060                           _main 05E6                           _prec 003C  
                         _nout 0038                           fsr0h 000FEA                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0045                           _stop 0D54                           prodh 000FF4  
                         prodl 000FF3                           start 003E                   ___param_bank 000000  
              __end_of_SendLCD 0F22                __end_of_SetLine 0F7E                 ??_display_RFID 000F  
                        ?_main 0001            main@searching_speed 008C                __end_of___awdiv 09AC  
                        ?_stop 001F                ___awdiv@divisor 0010                          _PDC0H 000F78  
                        _PDC1H 000F76                          _PDC0L 000F79                          _PDC1L 000F77  
                        _T5CON 000FB7                ___awdiv@counter 0012                          _RCREG 000FAE  
                        _E_TOG 1034                          _SPBRG 000FAF                   ?_init_sensor 0001  
              __end_of_initPWM 101A                          _flags 003E                          _setup 0F22  
                        _width 003A                          tablat 000FF5             processRFID@RFIDbuf 0001  
                        ttemp5 0046                          ttemp6 0049                          ttemp7 004D  
                        stop@i 0026                          status 000FD8                          wtemp8 0046  
          __size_of_LCD_String 005E               __end_of_ClearLCD 1034           moveForward@max_power 0023  
               __CFG_MCLRE$OFF 000000                __initialization 0F7E                   __end_of_main 06E8  
                 __end_of_stop 0DB0                 __CFG_OSC$IRCIO 000000               LCD_String@string 000C  
                       ??_main 0038                         ??_stop 0025                  __activetblptr 000002  
                       ?_E_TOG 0001                   ?_setMotorPWM 0016                   ?_moveForward 001F  
 scanForBeacon@beacon_location 0032               ___awdiv@dividend 000E                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         i2l1906 0E82  
                       i2l1918 0E9E                         i2l1898 0E72                         _LCDout 0B32  
                  SendLCD@Byte 000B                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000A                      ??_SendLCD 000B  
                    ??_SetLine 000C                  display_RFID@i 000F                         ___wmul 0FA4  
                    ??___awdiv 0012               __end_of_init_LCD 089A            init_motor_struct@mL 001F  
          init_motor_struct@mR 0021                         clear_0 0F84                         clear_1 0F90  
             ___awdiv@quotient 0014         __size_of_scanForBeacon 0068              moveToBeacon@speed 002C  
                    ??_initPWM 000A                 _stopAndDisplay 0C20                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 001F                         stop@mR 0021                   ?_processRFID 0001  
            _init_motor_struct 06E8           __end_of_display_RFID 0EF2             ?_init_motor_struct 001F  
                   __accesstop 0060        __end_of__initialization 0F96                  ___rparam_used 000001  
                  SetLine@line 000C                  __end_of_E_TOG 1042            ??_init_motor_struct 0023  
               __pcstackCOMRAM 0001                  __end_of_setup 0F50                   ??_LCD_String 000E  
       __end_of_stopAndDisplay 0C8E                        ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0036  
                    ?_ClearLCD 0001      __end_of_init_motor_struct 07D2          __end_of_classify_data 0928  
                   _check_RFID 0372           __size_of_init_sensor 001C                        ??_setup 000D  
                ?_moveBackward 001F                     __pbssBANK0 0060                        ?_LCDout 0001  
                _scanForBeacon 0C8E             __size_of_init_RFID 001A             __end_of_LCD_String 0D54  
                      ?___wmul 0008                  ?_moveToBeacon 0028                        _CAP1CON 000F63  
                      _DFLTCON 000F60                ?_stopAndDisplay 0028                     ??_ClearLCD 000C  
                      _RFIDbuf 0080                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0025                 ?_scanForBeacon 0028           __size_of_setMotorPWM 0124  
         __size_of_moveForward 0082                      ?_init_LCD 0001                __size_of_LCDout 0078  
                moveBackward@i 0026                  ?_waitForInput 0001             __size_of_turnRight 0082  
                      _SendLCD 0EF2                        __Hparam 0000                        _SetLine 0F50  
                      __Lparam 0000                 ??_moveToBeacon 0034          processRFID@latestChar 0003  
                      ___awdiv 0928                __size_of___wmul 0026                   __psmallconst 0300  
             initPWM@PWMperiod 0008                        __pcinit 0F7E                        __ramtop 0300  
                      __ptext0 05E6                        __ptext1 0BAA                        __ptext2 0C20  
                      __ptext3 0D54                        __ptext4 0F22                        __ptext5 0FCA  
                      __ptext6 0FE6                        __ptext7 07D2                        __ptext8 1000  
                      __ptext9 0C8E              __end_of_init_RFID 1000               check_RFID@hexBuf 0012  
                      _initPWM 1000                   LCDout@number 0009     __size_of_init_motor_struct 00EA  
        __size_of_display_RFID 0040             moveToBeacon@micros 002E              stop@initial_speed 0023  
                  ?_check_RFID 000E           end_of_initialization 0F96             setMotorPWM@PWMduty 001D  
                   ??_init_LCD 000C           __size_of_processRFID 004C                 ??_waitForInput 000E  
                __Lmediumconst 0000                      _RFID_flag 0044                      _RCSTAbits 000FAB  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
        moveToBeacon@exit_flag 0032                     _robot_mode 0043                     _returnHome 0DB0  
                 _display_RFID 0EB2                      _PORTDbits 000F83              __end_of_turnRight 0A2E  
                  returnHome@i 0034                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                ??_scanForBeacon 002E  
           debug@smoothed_data 0040                  moveForward@mL 001F                  moveForward@mR 0021  
               __end_of_LCDout 0BAA                      _TXSTAbits 000FAC                     main@motorL 0094  
                   main@motorR 009D           __end_of_moveBackward 0AB0            __size_of_check_RFID 0150  
               __end_of___wmul 0FCA                    _BAUDCONbits 000FAA            start_initialization 0F7E  
            __size_of_ClearLCD 001A           __end_of_moveToBeacon 0E66          classify_data@raw_data 0008  
                     ??_LCDout 0008          moveBackward@max_power 0023   __end_of_InterruptHandlerHigh 003E  
        classify_data@previous 0014          classify_data@smoothed 000A               ??_stopAndDisplay 002E  
                     ??___wmul 000C                scanForBeacon@mL 0028                scanForBeacon@mR 002A  
           turnRight@max_power 0023                    ?_returnHome 0028           __end_of_waitForInput 0C20  
                  __pbssCOMRAM 0038                  ??_init_sensor 0008                  __pcstackBANK0 008C  
            __size_of_init_LCD 00C8                       ?_SendLCD 000A                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 000E         __size_of_classify_data 008E  
           check_RFID@checksum 0023                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 0008                    __smallconst 0300                 __size_of_E_TOG 000E  
                waitForInput@i 0010                      _init_RFID 0FE6            stopAndDisplay@speed 002C  
                ??_setMotorPWM 0018                  ??_moveForward 0025                   ??_check_RFID 0010  
               __size_of_setup 002E                check_RFID@byte1 001E                check_RFID@byte2 001F  
              check_RFID@byte3 0020                check_RFID@byte4 0021                check_RFID@byte5 0022  
          __end_of_init_sensor 0FE6                 ___wmul@product 000C            __size_of_returnHome 005C  
                     _LATAbits 000F89                       _LATCbits 000F8B                       _LATDbits 000F8C  
                     _IPR1bits 000F9F                       _PIE1bits 000F9D                       i2u105_40 0E9A  
        __size_of_moveBackward 0082                    turnRight@mL 001F                    turnRight@mR 0021  
                     _PIR1bits 000F9E                       _RCONbits 000FD0             __end_of_check_RFID 04C2  
            ___wmul@multiplier 0008                   setMotorPWM@m 0016                   moveForward@i 0026  
             main@moving_speed 0092          __size_of_moveToBeacon 005A           _InterruptHandlerHigh 0008  
                     _ClearLCD 101A                     ?_init_RFID 0001                      _turnRight 09AC  
                ??_processRFID 0004                  _classify_data 089A                 moveBackward@mL 001F  
               moveBackward@mR 0021                   _moveBackward 0A2E            __end_of_setMotorPWM 05E6  
          __end_of_moveForward 0B32                    check_RFID@i 0024                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
        __size_of_waitForInput 0076                   _moveToBeacon 0E0C               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 0FCA  
               ?_classify_data 0008              check_RFID@dataBuf 000E                     ?_turnRight 001F  
                     __ptext10 09AC                       __ptext11 089A                       __ptext20 0CF6  
                     __ptext12 0DB0                       __ptext21 0EF2                       __ptext13 0A2E  
                     __ptext22 0B32                       __ptext14 0E0C                       __ptext23 1034  
                     __ptext15 0AB0                       __ptext24 06E8                       __ptext16 0EB2  
                     __ptext25 04C2                       __ptext17 101A                       __ptext26 0FA4  
                     __ptext18 0372                       __ptext27 0928                       __ptext19 0F50  
                     __ptext29 0E66          __end_of_scanForBeacon 0CF6                       _init_LCD 07D2  
                __size_of_main 0102                  __size_of_stop 005C            __end_of_processRFID 0EB2  
                 _waitForInput 0BAA             scanForBeacon@speed 002C                     turnRight@i 0026  
                     int$flags 0045                   ??_returnHome 0030                     _LCD_String 0CF6  
        scanForBeacon@raw_data 0030                     _INTCONbits 000FF2                    ??_init_RFID 0008  
                  _setMotorPWM 04C2                    _moveForward 0AB0                       intlevel2 0000  
   scanForBeacon@smoothed_data 0033             __end_of_returnHome 0E0C                     _OSCCONbits 000FD3  
             returnHome@micros 002E        moveToBeacon@RFID_buffer 0030     processRFID@position_in_buf 0042  
       ??_InterruptHandlerHigh 0005                ??_classify_data 000C               stopAndDisplay@mL 0028  
             stopAndDisplay@mR 002A                returnHome@speed 002C                    ??_turnRight 0025  
                  _processRFID 0E66             main@movementMicros 008E                stopAndDisplay@i 0030  
                 returnHome@mL 0028                   returnHome@mR 002A  
