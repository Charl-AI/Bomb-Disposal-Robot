

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 03 16:41:08 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4331 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _CAP1CON	set	3939
    74  0000                     _DFLTCON	set	3936
    75  0000                     _ANSEL1	set	4025
    76  0000                     _ANSEL0	set	4024
    77  0000                     _T5CON	set	4023
    78  0000                     _IPR1bits	set	3999
    79  0000                     _PIE1bits	set	3997
    80  0000                     _RCSTAbits	set	4011
    81  0000                     _TXSTAbits	set	4012
    82  0000                     _BAUDCONbits	set	4010
    83  0000                     _SPBRGH	set	4016
    84  0000                     _SPBRG	set	4015
    85  0000                     _TRISAbits	set	3986
    86  0000                     _TRISCbits	set	3988
    87  0000                     _LATDbits	set	3980
    88  0000                     _LATCbits	set	3979
    89  0000                     _LATAbits	set	3977
    90  0000                     _LATB	set	3978
    91  0000                     _PTPERH	set	3962
    92  0000                     _PTPERL	set	3963
    93  0000                     _PWMCON1	set	3950
    94  0000                     _PWMCON0	set	3951
    95  0000                     _PTCON1	set	3966
    96  0000                     _PTCON0	set	3967
    97  0000                     _PORTDbits	set	3971
    98  0000                     _CAP1BUFL	set	3944
    99  0000                     _CAP1BUFH	set	3945
   100  0000                     _RCREG	set	4014
   101  0000                     _PIR1bits	set	3998
   102  0000                     _TRISDbits	set	3989
   103  0000                     _TRISBbits	set	3987
   104  0000                     _RCONbits	set	4048
   105  0000                     _INTCONbits	set	4082
   106  0000                     _OSCCONbits	set	4051
   107  0000                     _OSCCON	set	4051
   108  0000                     _PDC1H	set	3958
   109  0000                     _PDC1L	set	3959
   110  0000                     _PDC0H	set	3960
   111  0000                     _PDC0L	set	3961
   112                           
   113                           	psect	smallconst
   114  000300                     __psmallconst:
   115                           	opt callstack 0
   116  000300  00                 	db	0
   117  000301                     STR_3:
   118  000301  43                 	db	67	;'C'
   119  000302  48                 	db	72	;'H'
   120  000303  45                 	db	69	;'E'
   121  000304  43                 	db	67	;'C'
   122  000305  4B                 	db	75	;'K'
   123  000306  53                 	db	83	;'S'
   124  000307  55                 	db	85	;'U'
   125  000308  4D                 	db	77	;'M'
   126  000309  20                 	db	32
   127  00030A  46                 	db	70	;'F'
   128  00030B  41                 	db	65	;'A'
   129  00030C  49                 	db	73	;'I'
   130  00030D  4C                 	db	76	;'L'
   131  00030E  45                 	db	69	;'E'
   132  00030F  44                 	db	68	;'D'
   133  000310  00                 	db	0
   134  000311                     STR_2:
   135  000311  43                 	db	67	;'C'
   136  000312  48                 	db	72	;'H'
   137  000313  45                 	db	69	;'E'
   138  000314  43                 	db	67	;'C'
   139  000315  4B                 	db	75	;'K'
   140  000316  53                 	db	83	;'S'
   141  000317  55                 	db	85	;'U'
   142  000318  4D                 	db	77	;'M'
   143  000319  20                 	db	32
   144  00031A  50                 	db	80	;'P'
   145  00031B  41                 	db	65	;'A'
   146  00031C  53                 	db	83	;'S'
   147  00031D  53                 	db	83	;'S'
   148  00031E  45                 	db	69	;'E'
   149  00031F  44                 	db	68	;'D'
   150  000320  00                 	db	0
   151  000321                     STR_1:
   152  000321  52                 	db	82	;'R'
   153  000322  45                 	db	69	;'E'
   154  000323  53                 	db	83	;'S'
   155  000324  45                 	db	69	;'E'
   156  000325  54                 	db	84	;'T'
   157  000326  54                 	db	84	;'T'
   158  000327  49                 	db	73	;'I'
   159  000328  4E                 	db	78	;'N'
   160  000329  47                 	db	71	;'G'
   161  00032A  20                 	db	32
   162  00032B  52                 	db	82	;'R'
   163  00032C  4F                 	db	79	;'O'
   164  00032D  42                 	db	66	;'B'
   165  00032E  4F                 	db	79	;'O'
   166  00032F  54                 	db	84	;'T'
   167  000330  00                 	db	0
   168                           
   169                           ; #config settings
   170  000331  00                 	db	0	; dummy byte at the end
   171  0000                     
   172                           	psect	cinit
   173  000D5A                     __pcinit:
   174                           	opt callstack 0
   175  000D5A                     start_initialization:
   176                           	opt callstack 0
   177  000D5A                     __initialization:
   178                           	opt callstack 0
   179                           
   180                           ; Clear objects allocated to COMRAM (15 bytes)
   181  000D5A  EE00  F02A         	lfsr	0,__pbssCOMRAM
   182  000D5E  0E0F               	movlw	15
   183  000D60                     clear_0:
   184  000D60  6AEE               	clrf	postinc0,c
   185  000D62  06E8               	decf	wreg,f,c
   186  000D64  E1FD               	bnz	clear_0
   187  000D66                     end_of_initialization:
   188                           	opt callstack 0
   189  000D66                     __end_of__initialization:
   190                           	opt callstack 0
   191  000D66  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   192  000D68  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   193  000D6A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   194  000D6C  6EF8               	movwf	tblptru,c
   195  000D6E  0E03               	movlw	high __Lsmallconst
   196  000D70  6EF7               	movwf	tblptrh,c
   197  000D72  0100               	movlb	0
   198  000D74  EF99  F001         	goto	_main	;jump to C main() function
   199                           
   200                           	psect	bssCOMRAM
   201  00002A                     __pbssCOMRAM:
   202                           	opt callstack 0
   203  00002A                     processRFID@position_in_buf:
   204                           	opt callstack 0
   205  00002A                     	ds	1
   206  00002B                     _RFID_flag:
   207                           	opt callstack 0
   208  00002B                     	ds	1
   209  00002C                     _robot_mode:
   210                           	opt callstack 0
   211  00002C                     	ds	1
   212  00002D                     _RFIDbuf:
   213                           	opt callstack 0
   214  00002D                     	ds	12
   215                           
   216                           	psect	cstackBANK0
   217  000060                     __pcstackBANK0:
   218                           	opt callstack 0
   219  000060                     main@searching_speed:
   220                           	opt callstack 0
   221                           
   222                           ; 2 bytes @ 0x0
   223  000060                     	ds	2
   224  000062                     main@raw_data:
   225                           	opt callstack 0
   226                           
   227                           ; 2 bytes @ 0x2
   228  000062                     	ds	2
   229  000064                     main@movementMicros:
   230                           	opt callstack 0
   231                           
   232                           ; 4 bytes @ 0x4
   233  000064                     	ds	4
   234  000068                     main@i:
   235                           	opt callstack 0
   236                           
   237                           ; 4 bytes @ 0x8
   238  000068                     	ds	4
   239  00006C                     main@beacon_location:
   240                           	opt callstack 0
   241                           
   242                           ; 1 bytes @ 0xC
   243  00006C                     	ds	1
   244  00006D                     main@i_502:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0xD
   248  00006D                     	ds	2
   249  00006F                     main@moving_speed:
   250                           	opt callstack 0
   251                           
   252                           ; 2 bytes @ 0xF
   253  00006F                     	ds	2
   254  000071                     main@motorL:
   255                           	opt callstack 0
   256                           
   257                           ; 9 bytes @ 0x11
   258  000071                     	ds	9
   259  00007A                     main@motorR:
   260                           	opt callstack 0
   261                           
   262                           ; 9 bytes @ 0x1A
   263  00007A                     	ds	9
   264                           
   265                           	psect	cstackCOMRAM
   266  000001                     __pcstackCOMRAM:
   267                           	opt callstack 0
   268  000001                     processRFID@RFIDbuf:
   269                           	opt callstack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  000001                     	ds	2
   273  000003                     processRFID@latestChar:
   274                           	opt callstack 0
   275                           
   276                           ; 1 bytes @ 0x2
   277  000003                     	ds	1
   278  000004                     processRFID@i:
   279                           	opt callstack 0
   280                           
   281                           ; 1 bytes @ 0x3
   282  000004                     	ds	1
   283  000005                     ??_InterruptHandlerHigh:
   284                           
   285                           ; 1 bytes @ 0x4
   286  000005                     	ds	3
   287  000008                     ??_LCDout:
   288  000008                     ?___wmul:
   289                           	opt callstack 0
   290  000008                     initPWM@PWMperiod:
   291                           	opt callstack 0
   292  000008                     classify_data@raw_data:
   293                           	opt callstack 0
   294  000008                     ___wmul@multiplier:
   295                           	opt callstack 0
   296                           
   297                           ; 2 bytes @ 0x7
   298  000008                     	ds	1
   299  000009                     LCDout@number:
   300                           	opt callstack 0
   301                           
   302                           ; 1 bytes @ 0x8
   303  000009                     	ds	1
   304  00000A                     SendLCD@type:
   305                           	opt callstack 0
   306  00000A                     ___wmul@multiplicand:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0x9
   310  00000A                     	ds	1
   311  00000B                     SendLCD@Byte:
   312                           	opt callstack 0
   313                           
   314                           ; 1 bytes @ 0xA
   315  00000B                     	ds	1
   316  00000C                     ??_init_LCD:
   317  00000C                     ??_ClearLCD:
   318  00000C                     SetLine@line:
   319                           	opt callstack 0
   320  00000C                     LCD_String@string:
   321                           	opt callstack 0
   322  00000C                     ___wmul@product:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0xB
   326  00000C                     	ds	1
   327  00000D                     display_RFID@dataBuf:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0xC
   331  00000D                     	ds	1
   332  00000E                     ?___awdiv:
   333                           	opt callstack 0
   334  00000E                     check_RFID@dataBuf:
   335                           	opt callstack 0
   336  00000E                     ___awdiv@dividend:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0xD
   340  00000E                     	ds	1
   341  00000F                     display_RFID@i:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0xE
   345  00000F                     	ds	1
   346  000010                     ??_check_RFID:
   347  000010                     ___awdiv@divisor:
   348                           	opt callstack 0
   349                           
   350                           ; 2 bytes @ 0xF
   351  000010                     	ds	2
   352  000012                     ___awdiv@counter:
   353                           	opt callstack 0
   354  000012                     check_RFID@hexBuf:
   355                           	opt callstack 0
   356                           
   357                           ; 12 bytes @ 0x11
   358  000012                     	ds	1
   359  000013                     ___awdiv@sign:
   360                           	opt callstack 0
   361                           
   362                           ; 1 bytes @ 0x12
   363  000013                     	ds	1
   364  000014                     ___awdiv@quotient:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x13
   368  000014                     	ds	2
   369  000016                     setMotorPWM@m:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x15
   373  000016                     	ds	2
   374  000018                     ??_setMotorPWM:
   375                           
   376                           ; 1 bytes @ 0x17
   377  000018                     	ds	5
   378  00001D                     setMotorPWM@PWMduty:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x1C
   382  00001D                     	ds	1
   383  00001E                     check_RFID@byte1:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0x1D
   387  00001E                     	ds	1
   388  00001F                     check_RFID@byte2:
   389                           	opt callstack 0
   390  00001F                     stop@mL:
   391                           	opt callstack 0
   392  00001F                     turnRight@mL:
   393                           	opt callstack 0
   394  00001F                     moveForward@mL:
   395                           	opt callstack 0
   396  00001F                     moveBackward@mL:
   397                           	opt callstack 0
   398  00001F                     init_motor_struct@mL:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x1E
   402  00001F                     	ds	1
   403  000020                     check_RFID@byte3:
   404                           	opt callstack 0
   405                           
   406                           ; 1 bytes @ 0x1F
   407  000020                     	ds	1
   408  000021                     check_RFID@byte4:
   409                           	opt callstack 0
   410  000021                     stop@mR:
   411                           	opt callstack 0
   412  000021                     turnRight@mR:
   413                           	opt callstack 0
   414  000021                     moveForward@mR:
   415                           	opt callstack 0
   416  000021                     moveBackward@mR:
   417                           	opt callstack 0
   418  000021                     init_motor_struct@mR:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x20
   422  000021                     	ds	1
   423  000022                     check_RFID@byte5:
   424                           	opt callstack 0
   425                           
   426                           ; 1 bytes @ 0x21
   427  000022                     	ds	1
   428  000023                     check_RFID@checksum:
   429                           	opt callstack 0
   430  000023                     stop@initial_speed:
   431                           	opt callstack 0
   432  000023                     turnRight@max_power:
   433                           	opt callstack 0
   434  000023                     moveForward@max_power:
   435                           	opt callstack 0
   436  000023                     moveBackward@max_power:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x22
   440  000023                     	ds	1
   441  000024                     check_RFID@i:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x23
   445  000024                     	ds	1
   446  000025                     ??_turnRight:
   447  000025                     ??_moveForward:
   448  000025                     ??_moveBackward:
   449  000025                     stop@i:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x24
   453  000025                     	ds	1
   454  000026                     turnRight@i:
   455                           	opt callstack 0
   456  000026                     moveForward@i:
   457                           	opt callstack 0
   458  000026                     moveBackward@i:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x25
   462  000026                     	ds	2
   463  000028                     ??_main:
   464                           
   465                           ; 1 bytes @ 0x27
   466  000028                     	ds	2
   467                           
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 77 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  i               2   13[BANK0 ] int 
   478 ;;  i               4    8[BANK0 ] unsigned long 
   479 ;;  raw_data        2    2[BANK0 ] unsigned int 
   480 ;;  beacon_locat    1   12[BANK0 ] unsigned char 
   481 ;;  motorR          9   26[BANK0 ] struct DC_motor
   482 ;;  motorL          9   17[BANK0 ] struct DC_motor
   483 ;;  movementMicr    4    4[BANK0 ] unsigned long 
   484 ;;  moving_speed    2   15[BANK0 ] int 
   485 ;;  searching_sp    2    0[BANK0 ] int 
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   495 ;;      Params:         0       0       0       0
   496 ;;      Locals:         0      35       0       0
   497 ;;      Temps:          2       0       0       0
   498 ;;      Totals:         2      35       0       0
   499 ;;Total ram usage:       37 bytes
   500 ;; Hardware stack levels required when called:    7
   501 ;; This function calls:
   502 ;;		_ClearLCD
   503 ;;		_LCD_String
   504 ;;		_check_RFID
   505 ;;		_classify_data
   506 ;;		_display_RFID
   507 ;;		_init_motor_struct
   508 ;;		_moveBackward
   509 ;;		_moveForward
   510 ;;		_setup
   511 ;;		_stop
   512 ;;		_turnRight
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text0
   519  000332                     __ptext0:
   520                           	opt callstack 0
   521  000332                     _main:
   522                           	opt callstack 24
   523                           
   524                           ;main.c: 80:   setup();
   525                           
   526                           ;incstack = 0
   527  000332  EC6C  F006         	call	_setup	;wreg free
   528                           
   529                           ;main.c: 83:   struct DC_motor motorL, motorR;;main.c: 84:   init_motor_struct(&motorL, 
      +                          &motorR);
   530  000336  0E71               	movlw	low main@motorL
   531  000338  6E1F               	movwf	init_motor_struct@mL,c
   532  00033A  0E00               	movlw	high main@motorL
   533  00033C  6E20               	movwf	init_motor_struct@mL+1,c
   534  00033E  0E7A               	movlw	low main@motorR
   535  000340  6E21               	movwf	init_motor_struct@mR,c
   536  000342  0E00               	movlw	high main@motorR
   537  000344  6E22               	movwf	init_motor_struct@mR+1,c
   538  000346  ECC0  F003         	call	_init_motor_struct	;wreg free
   539                           
   540                           ;main.c: 87:   int searching_speed = 50;
   541  00034A  0E00               	movlw	0
   542  00034C  0100               	movlb	0	; () banked
   543  00034E  6F61               	movwf	(main@searching_speed+1)& (0+255),b
   544  000350  0E32               	movlw	50
   545  000352  6F60               	movwf	main@searching_speed& (0+255),b
   546                           
   547                           ; BSR set to: 0
   548                           ;main.c: 88:   int moving_speed = 75;
   549  000354  0E00               	movlw	0
   550  000356  6F70               	movwf	(main@moving_speed+1)& (0+255),b
   551  000358  0E4B               	movlw	75
   552  00035A  6F6F               	movwf	main@moving_speed& (0+255),b
   553                           
   554                           ; BSR set to: 0
   555                           ;main.c: 90:   unsigned long movementMicros=0;
   556  00035C  0E00               	movlw	0
   557  00035E  6F64               	movwf	main@movementMicros& (0+255),b
   558  000360  0E00               	movlw	0
   559  000362  6F65               	movwf	(main@movementMicros+1)& (0+255),b
   560  000364  0E00               	movlw	0
   561  000366  6F66               	movwf	(main@movementMicros+2)& (0+255),b
   562  000368  0E00               	movlw	0
   563  00036A  6F67               	movwf	(main@movementMicros+3)& (0+255),b
   564  00036C                     l2083:
   565                           
   566                           ;main.c: 94:   {;main.c: 96:       if(robot_mode == 0)
   567  00036C  502C               	movf	_robot_mode,w,c	;volatile
   568  00036E  A4D8               	btfss	status,2,c
   569  000370  D02B               	goto	u1600
   570                           
   571                           ;main.c: 97:       {;main.c: 98:           turnRight(&motorL, &motorR,searching_speed);
   572  000372  0E71               	movlw	low main@motorL
   573  000374  6E1F               	movwf	turnRight@mL,c
   574  000376  0E00               	movlw	high main@motorL
   575  000378  6E20               	movwf	turnRight@mL+1,c
   576  00037A  0E7A               	movlw	low main@motorR
   577  00037C  6E21               	movwf	turnRight@mR,c
   578  00037E  0E00               	movlw	high main@motorR
   579  000380  6E22               	movwf	turnRight@mR+1,c
   580  000382  C060  F023         	movff	main@searching_speed,turnRight@max_power
   581  000386  C061  F024         	movff	main@searching_speed+1,turnRight@max_power+1
   582  00038A  ECDB  F004         	call	_turnRight	;wreg free
   583                           
   584                           ;main.c: 101:           while(robot_mode == 0)
   585  00038E  D019               	goto	l80
   586  000390                     l2087:
   587                           
   588                           ;main.c: 102:           {;main.c: 104:             unsigned int raw_data = (unsigned int
      +                          )((CAP1BUFH << 8) | CAP1BUFL);
   589  000390  5068               	movf	3944,w,c	;volatile
   590  000392  CF69 F028          	movff	3945,??_main	;volatile
   591  000396  6A29               	clrf	(??_main+1)& (0+255),c
   592  000398  C028  F029         	movff	??_main,??_main+1
   593  00039C  6A28               	clrf	??_main,c
   594  00039E  1028               	iorwf	??_main,w,c
   595  0003A0  0100               	movlb	0	; () banked
   596  0003A2  6F62               	movwf	main@raw_data& (0+255),b
   597  0003A4  5029               	movf	??_main+1,w,c
   598  0003A6  6F63               	movwf	(main@raw_data+1)& (0+255),b
   599                           
   600                           ; BSR set to: 0
   601                           ;main.c: 107:             char beacon_location = classify_data(raw_data);
   602  0003A8  C062  F008         	movff	main@raw_data,classify_data@raw_data
   603  0003AC  C063  F009         	movff	main@raw_data+1,classify_data@raw_data+1
   604  0003B0  ECEF  F006         	call	_classify_data	;wreg free
   605  0003B4  0100               	movlb	0	; () banked
   606  0003B6  6F6C               	movwf	main@beacon_location& (0+255),b
   607                           
   608                           ; BSR set to: 0
   609                           ;main.c: 110:             if(beacon_location == 1)
   610  0003B8  056C               	decf	main@beacon_location& (0+255),w,b
   611  0003BA  A4D8               	btfss	status,2,c
   612  0003BC  D002               	goto	l80
   613                           
   614                           ; BSR set to: 0
   615                           ;main.c: 111:             {;main.c: 112:                 robot_mode = 1;
   616  0003BE  0E01               	movlw	1
   617  0003C0  6E2C               	movwf	_robot_mode,c	;volatile
   618  0003C2                     l80:
   619                           
   620                           ;main.c: 101:           while(robot_mode == 0)
   621  0003C2  502C               	movf	_robot_mode,w,c	;volatile
   622  0003C4  B4D8               	btfsc	status,2,c
   623  0003C6  D7E4               	goto	l2087
   624  0003C8                     u1600:
   625                           
   626                           ;main.c: 118:       if(robot_mode == 1)
   627  0003C8  042C               	decf	_robot_mode,w,c	;volatile
   628  0003CA  A4D8               	btfss	status,2,c
   629  0003CC  D02D               	goto	u1630
   630                           
   631                           ;main.c: 119:       {;main.c: 120:           moveForward(&motorL, &motorR,moving_speed);
   632  0003CE  0E71               	movlw	low main@motorL
   633  0003D0  6E1F               	movwf	moveForward@mL,c
   634  0003D2  0E00               	movlw	high main@motorL
   635  0003D4  6E20               	movwf	moveForward@mL+1,c
   636  0003D6  0E7A               	movlw	low main@motorR
   637  0003D8  6E21               	movwf	moveForward@mR,c
   638  0003DA  0E00               	movlw	high main@motorR
   639  0003DC  6E22               	movwf	moveForward@mR+1,c
   640  0003DE  C06F  F023         	movff	main@moving_speed,moveForward@max_power
   641  0003E2  C070  F024         	movff	main@moving_speed+1,moveForward@max_power+1
   642  0003E6  EC58  F005         	call	_moveForward	;wreg free
   643                           
   644                           ;main.c: 123:           while(robot_mode == 1)
   645  0003EA  D01B               	goto	l2109
   646  0003EC                     l86:
   647                           
   648                           ;main.c: 124:           {;main.c: 125:               _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
   649  0003EC  D000               	nop2		;2 cycle nop
   650                           
   651                           ;main.c: 126:               movementMicros += 1;
   652  0003EE  0E01               	movlw	1
   653  0003F0  0100               	movlb	0	; () banked
   654  0003F2  2764               	addwf	main@movementMicros& (0+255),f,b
   655  0003F4  0E00               	movlw	0
   656  0003F6  2365               	addwfc	(main@movementMicros+1)& (0+255),f,b
   657  0003F8  2366               	addwfc	(main@movementMicros+2)& (0+255),f,b
   658  0003FA  2367               	addwfc	(main@movementMicros+3)& (0+255),f,b
   659                           
   660                           ;main.c: 130:               if(RFID_flag == 1)
   661  0003FC  042B               	decf	_RFID_flag,w,c	;volatile
   662  0003FE  A4D8               	btfss	status,2,c
   663  000400  D010               	goto	l2109
   664                           
   665                           ; BSR set to: 0
   666                           ;main.c: 131:               {;main.c: 132:                   display_RFID(RFIDbuf);
   667  000402  0E2D               	movlw	low _RFIDbuf
   668  000404  6E0D               	movwf	display_RFID@dataBuf,c
   669  000406  0E00               	movlw	high _RFIDbuf
   670  000408  6E0E               	movwf	display_RFID@dataBuf+1,c
   671  00040A  EC19  F006         	call	_display_RFID	;wreg free
   672                           
   673                           ;main.c: 133:                   check_RFID(RFIDbuf);
   674  00040E  0E2D               	movlw	low _RFIDbuf
   675  000410  6E0E               	movwf	check_RFID@dataBuf,c
   676  000412  0E00               	movlw	high _RFIDbuf
   677  000414  6E0F               	movwf	check_RFID@dataBuf+1,c
   678  000416  EC86  F002         	call	_check_RFID	;wreg free
   679                           
   680                           ;main.c: 134:                   robot_mode = 2;
   681  00041A  0E02               	movlw	2
   682  00041C  6E2C               	movwf	_robot_mode,c	;volatile
   683                           
   684                           ;main.c: 135:                   RFID_flag = 0;
   685  00041E  0E00               	movlw	0
   686  000420  6E2B               	movwf	_RFID_flag,c	;volatile
   687  000422                     l2109:
   688                           
   689                           ;main.c: 123:           while(robot_mode == 1)
   690  000422  042C               	decf	_robot_mode,w,c	;volatile
   691  000424  B4D8               	btfsc	status,2,c
   692  000426  D7E2               	goto	l86
   693  000428                     u1630:
   694                           
   695                           ;main.c: 141:       if(robot_mode == 2)
   696  000428  0E02               	movlw	2
   697  00042A  182C               	xorwf	_robot_mode,w,c	;volatile
   698  00042C  A4D8               	btfss	status,2,c
   699  00042E  D02C               	goto	l2121
   700                           
   701                           ;main.c: 142:       {;main.c: 143:           moveBackward(&motorL,&motorR,moving_speed);
   702  000430  0E71               	movlw	low main@motorL
   703  000432  6E1F               	movwf	moveBackward@mL,c
   704  000434  0E00               	movlw	high main@motorL
   705  000436  6E20               	movwf	moveBackward@mL+1,c
   706  000438  0E7A               	movlw	low main@motorR
   707  00043A  6E21               	movwf	moveBackward@mR,c
   708  00043C  0E00               	movlw	high main@motorR
   709  00043E  6E22               	movwf	moveBackward@mR+1,c
   710  000440  C06F  F023         	movff	main@moving_speed,moveBackward@max_power
   711  000444  C070  F024         	movff	main@moving_speed+1,moveBackward@max_power+1
   712  000448  EC92  F005         	call	_moveBackward	;wreg free
   713                           
   714                           ;main.c: 145:           for(unsigned long i=0; i<movementMicros;i++)
   715  00044C  0E00               	movlw	0
   716  00044E  0100               	movlb	0	; () banked
   717  000450  6F68               	movwf	main@i& (0+255),b
   718  000452  0E00               	movlw	0
   719  000454  6F69               	movwf	(main@i+1)& (0+255),b
   720  000456  0E00               	movlw	0
   721  000458  6F6A               	movwf	(main@i+2)& (0+255),b
   722  00045A  0E00               	movlw	0
   723  00045C  6F6B               	movwf	(main@i+3)& (0+255),b
   724  00045E  D008               	goto	l90
   725  000460                     l91:
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 146:           {;main.c: 147:               _delay((unsigned long)((1)*(8000000
      +                          /4000000.0)));
   729  000460  D000               	nop2		;2 cycle nop
   730                           
   731                           ;main.c: 148:           }
   732  000462  0E01               	movlw	1
   733  000464  0100               	movlb	0	; () banked
   734  000466  2768               	addwf	main@i& (0+255),f,b
   735  000468  0E00               	movlw	0
   736  00046A  2369               	addwfc	(main@i+1)& (0+255),f,b
   737  00046C  236A               	addwfc	(main@i+2)& (0+255),f,b
   738  00046E  236B               	addwfc	(main@i+3)& (0+255),f,b
   739  000470                     l90:
   740                           
   741                           ; BSR set to: 0
   742  000470  5164               	movf	main@movementMicros& (0+255),w,b
   743  000472  5D68               	subwf	main@i& (0+255),w,b
   744  000474  5165               	movf	(main@movementMicros+1)& (0+255),w,b
   745  000476  5969               	subwfb	(main@i+1)& (0+255),w,b
   746  000478  5166               	movf	(main@movementMicros+2)& (0+255),w,b
   747  00047A  596A               	subwfb	(main@i+2)& (0+255),w,b
   748  00047C  5167               	movf	(main@movementMicros+3)& (0+255),w,b
   749  00047E  596B               	subwfb	(main@i+3)& (0+255),w,b
   750  000480  A0D8               	btfss	status,0,c
   751  000482  D7EE               	goto	l91
   752                           
   753                           ; BSR set to: 0
   754                           ;main.c: 149:           robot_mode = 3;
   755  000484  0E03               	movlw	3
   756  000486  6E2C               	movwf	_robot_mode,c	;volatile
   757  000488                     l2121:
   758                           
   759                           ;main.c: 153:       if(robot_mode == 3)
   760  000488  0E03               	movlw	3
   761  00048A  182C               	xorwf	_robot_mode,w,c	;volatile
   762  00048C  A4D8               	btfss	status,2,c
   763  00048E  D76E               	goto	l2083
   764                           
   765                           ;main.c: 154:       {;main.c: 155:           stop(&motorL, &motorR,moving_speed);
   766  000490  0E71               	movlw	low main@motorL
   767  000492  6E1F               	movwf	stop@mL,c
   768  000494  0E00               	movlw	high main@motorL
   769  000496  6E20               	movwf	stop@mL+1,c
   770  000498  0E7A               	movlw	low main@motorR
   771  00049A  6E21               	movwf	stop@mR,c
   772  00049C  0E00               	movlw	high main@motorR
   773  00049E  6E22               	movwf	stop@mR+1,c
   774  0004A0  C06F  F023         	movff	main@moving_speed,stop@initial_speed
   775  0004A4  C070  F024         	movff	main@moving_speed+1,stop@initial_speed+1
   776  0004A8  ECCC  F005         	call	_stop	;wreg free
   777                           
   778                           ;main.c: 157:           while(robot_mode == 3)
   779  0004AC  D02A               	goto	u1680
   780  0004AE                     l2125:
   781                           
   782                           ;main.c: 160:               {;main.c: 161:                   ClearLCD();
   783  0004AE  ECD6  F006         	call	_ClearLCD	;wreg free
   784                           
   785                           ;main.c: 162:                   LCD_String("RESETTING ROBOT");
   786  0004B2  0E21               	movlw	low STR_1
   787  0004B4  6E0C               	movwf	LCD_String@string,c
   788  0004B6  0E03               	movlw	high STR_1
   789  0004B8  6E0D               	movwf	LCD_String@string+1,c
   790  0004BA  EC39  F006         	call	_LCD_String	;wreg free
   791                           
   792                           ;main.c: 163:                   for(int i=0; i<10;i++)
   793  0004BE  0E00               	movlw	0
   794  0004C0  0100               	movlb	0	; () banked
   795  0004C2  6F6E               	movwf	(main@i_502+1)& (0+255),b
   796  0004C4  0E00               	movlw	0
   797  0004C6  6F6D               	movwf	main@i_502& (0+255),b
   798  0004C8                     l2135:
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 164:                   {;main.c: 165:                       _delay((unsigned lo
      +                          ng)((100)*(8000000/4000.0)));
   802  0004C8  0E02               	movlw	2
   803  0004CA  6E29               	movwf	(??_main+1)& (0+255),c
   804  0004CC  0E04               	movlw	4
   805  0004CE  6E28               	movwf	??_main& (0+255),c
   806  0004D0  0EBA               	movlw	186
   807  0004D2                     u1707:
   808  0004D2  2EE8               	decfsz	wreg,f,c
   809  0004D4  D7FE               	bra	u1707
   810  0004D6  2E28               	decfsz	??_main& (0+255),f,c
   811  0004D8  D7FC               	bra	u1707
   812  0004DA  2E29               	decfsz	(??_main+1)& (0+255),f,c
   813  0004DC  D7FA               	bra	u1707
   814  0004DE  D000               	nop2	
   815                           
   816                           ;main.c: 166:                   }
   817  0004E0  0100               	movlb	0	; () banked
   818  0004E2  4B6D               	infsnz	main@i_502& (0+255),f,b
   819  0004E4  2B6E               	incf	(main@i_502+1)& (0+255),f,b
   820  0004E6  BF6E               	btfsc	(main@i_502+1)& (0+255),7,b
   821  0004E8  D7EF               	goto	l2135
   822  0004EA  516E               	movf	(main@i_502+1)& (0+255),w,b
   823  0004EC  E104               	bnz	u1670
   824  0004EE  0E0A               	movlw	10
   825  0004F0  5D6D               	subwf	main@i_502& (0+255),w,b
   826  0004F2  A0D8               	btfss	status,0,c
   827  0004F4  D7E9               	goto	l2135
   828  0004F6                     u1670:
   829                           
   830                           ; BSR set to: 0
   831                           ;main.c: 167:                   ClearLCD();
   832  0004F6  ECD6  F006         	call	_ClearLCD	;wreg free
   833                           
   834                           ;main.c: 168:                   robot_mode = 0;
   835  0004FA  0E00               	movlw	0
   836  0004FC  6E2C               	movwf	_robot_mode,c	;volatile
   837  0004FE                     l2143:
   838                           
   839                           ;main.c: 159:               while(PORTDbits.RD2 == 1)
   840  0004FE  B483               	btfsc	3971,2,c	;volatile
   841  000500  D7D6               	goto	l2125
   842  000502                     u1680:
   843                           
   844                           ;main.c: 157:           while(robot_mode == 3)
   845  000502  0E03               	movlw	3
   846  000504  182C               	xorwf	_robot_mode,w,c	;volatile
   847  000506  A4D8               	btfss	status,2,c
   848  000508  D731               	goto	l2083
   849  00050A  D7F9               	goto	l2143
   850  00050C                     __end_of_main:
   851                           	opt callstack 0
   852                           
   853 ;; *************** function _turnRight *****************
   854 ;; Defined at:
   855 ;;		line 52 in file "dc_motor.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   858 ;;		 -> main@motorL(9), 
   859 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   860 ;;		 -> main@motorR(9), 
   861 ;;  max_power       2   34[COMRAM] int 
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  i               2   37[COMRAM] int 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   873 ;;      Params:         6       0       0       0
   874 ;;      Locals:         2       0       0       0
   875 ;;      Temps:          1       0       0       0
   876 ;;      Totals:         9       0       0       0
   877 ;;Total ram usage:        9 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    4
   880 ;; This function calls:
   881 ;;		_setMotorPWM
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text1
   888  0009B6                     __ptext1:
   889                           	opt callstack 0
   890  0009B6                     _turnRight:
   891                           	opt callstack 26
   892                           
   893                           ;dc_motor.c: 52: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 53: {;dc_motor.c: 55:     mL->direction = 1;
   894                           
   895                           ;incstack = 0
   896  0009B6  EE20 F001          	lfsr	2,1
   897  0009BA  501F               	movf	turnRight@mL,w,c
   898  0009BC  26D9               	addwf	fsr2l,f,c
   899  0009BE  5020               	movf	turnRight@mL+1,w,c
   900  0009C0  22DA               	addwfc	fsr2h,f,c
   901  0009C2  0E01               	movlw	1
   902  0009C4  6EDF               	movwf	indf2,c
   903                           
   904                           ;dc_motor.c: 56:     mR->direction = 0;
   905  0009C6  EE20 F001          	lfsr	2,1
   906  0009CA  5021               	movf	turnRight@mR,w,c
   907  0009CC  26D9               	addwf	fsr2l,f,c
   908  0009CE  5022               	movf	turnRight@mR+1,w,c
   909  0009D0  22DA               	addwfc	fsr2h,f,c
   910  0009D2  0E00               	movlw	0
   911  0009D4  6EDF               	movwf	indf2,c
   912                           
   913                           ;dc_motor.c: 58:     for(int i = 0; i<max_power;i++){
   914  0009D6  0E00               	movlw	0
   915  0009D8  6E27               	movwf	turnRight@i+1,c
   916  0009DA  0E00               	movlw	0
   917  0009DC  6E26               	movwf	turnRight@i,c
   918  0009DE  D021               	goto	l1969
   919  0009E0                     l1959:
   920                           
   921                           ;dc_motor.c: 59:         mL->power = i;
   922  0009E0  C01F  FFD9         	movff	turnRight@mL,fsr2l
   923  0009E4  C020  FFDA         	movff	turnRight@mL+1,fsr2h
   924  0009E8  C026  FFDF         	movff	turnRight@i,indf2
   925                           
   926                           ;dc_motor.c: 60:         mR->power = i;
   927  0009EC  C021  FFD9         	movff	turnRight@mR,fsr2l
   928  0009F0  C022  FFDA         	movff	turnRight@mR+1,fsr2h
   929  0009F4  C026  FFDF         	movff	turnRight@i,indf2
   930                           
   931                           ;dc_motor.c: 62:         setMotorPWM(mL);
   932  0009F8  C01F  F016         	movff	turnRight@mL,setMotorPWM@m
   933  0009FC  C020  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
   934  000A00  EC2E  F003         	call	_setMotorPWM	;wreg free
   935                           
   936                           ;dc_motor.c: 63:         setMotorPWM(mR);
   937  000A04  C021  F016         	movff	turnRight@mR,setMotorPWM@m
   938  000A08  C022  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
   939  000A0C  EC2E  F003         	call	_setMotorPWM	;wreg free
   940                           
   941                           ;dc_motor.c: 64:         _delay((unsigned long)((1)*(8000000/4000.0)));
   942  000A10  0E03               	movlw	3
   943  000A12  6E25               	movwf	??_turnRight& (0+255),c
   944  000A14  0E98               	movlw	152
   945  000A16                     u1717:
   946  000A16  2EE8               	decfsz	wreg,f,c
   947  000A18  D7FE               	bra	u1717
   948  000A1A  2E25               	decfsz	??_turnRight& (0+255),f,c
   949  000A1C  D7FC               	bra	u1717
   950                           
   951                           ;dc_motor.c: 65:     }
   952  000A1E  4A26               	infsnz	turnRight@i,f,c
   953  000A20  2A27               	incf	turnRight@i+1,f,c
   954  000A22                     l1969:
   955  000A22  5023               	movf	turnRight@max_power,w,c
   956  000A24  5C26               	subwf	turnRight@i,w,c
   957  000A26  5027               	movf	turnRight@i+1,w,c
   958  000A28  0A80               	xorlw	128
   959  000A2A  6E25               	movwf	??_turnRight& (0+255),c
   960  000A2C  5024               	movf	turnRight@max_power+1,w,c
   961  000A2E  0A80               	xorlw	128
   962  000A30  5825               	subwfb	??_turnRight& (0+255),w,c
   963  000A32  B0D8               	btfsc	status,0,c
   964  000A34  0012               	return	
   965  000A36  D7D4               	goto	l1959
   966  000A38                     __end_of_turnRight:
   967                           	opt callstack 0
   968                           
   969 ;; *************** function _stop *****************
   970 ;; Defined at:
   971 ;;		line 40 in file "dc_motor.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   974 ;;		 -> main@motorL(9), 
   975 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   976 ;;		 -> main@motorR(9), 
   977 ;;  initial_spee    2   34[COMRAM] int 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  i               2   36[COMRAM] int 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   989 ;;      Params:         6       0       0       0
   990 ;;      Locals:         2       0       0       0
   991 ;;      Temps:          0       0       0       0
   992 ;;      Totals:         8       0       0       0
   993 ;;Total ram usage:        8 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    4
   996 ;; This function calls:
   997 ;;		_setMotorPWM
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text2
  1004  000B98                     __ptext2:
  1005                           	opt callstack 0
  1006  000B98                     _stop:
  1007                           	opt callstack 26
  1008                           
  1009                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1010                           
  1011                           ;incstack = 0
  1012  000B98  C023  F025         	movff	stop@initial_speed,stop@i
  1013  000B9C  C024  F026         	movff	stop@initial_speed+1,stop@i+1
  1014  000BA0                     l2059:
  1015  000BA0  BE26               	btfsc	stop@i+1,7,c
  1016  000BA2  0012               	return	
  1017  000BA4  5026               	movf	stop@i+1,w,c
  1018  000BA6  E103               	bnz	l2063
  1019  000BA8  0425               	decf	stop@i,w,c
  1020  000BAA  A0D8               	btfss	status,0,c
  1021  000BAC  0012               	return	
  1022  000BAE                     l2063:
  1023                           
  1024                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1025  000BAE  C01F  FFD9         	movff	stop@mL,fsr2l
  1026  000BB2  C020  FFDA         	movff	stop@mL+1,fsr2h
  1027  000BB6  C025  FFDF         	movff	stop@i,indf2
  1028                           
  1029                           ;dc_motor.c: 45:         mR->power = i;
  1030  000BBA  C021  FFD9         	movff	stop@mR,fsr2l
  1031  000BBE  C022  FFDA         	movff	stop@mR+1,fsr2h
  1032  000BC2  C025  FFDF         	movff	stop@i,indf2
  1033                           
  1034                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1035  000BC6  C01F  F016         	movff	stop@mL,setMotorPWM@m
  1036  000BCA  C020  F017         	movff	stop@mL+1,setMotorPWM@m+1
  1037  000BCE  EC2E  F003         	call	_setMotorPWM	;wreg free
  1038                           
  1039                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1040  000BD2  C021  F016         	movff	stop@mR,setMotorPWM@m
  1041  000BD6  C022  F017         	movff	stop@mR+1,setMotorPWM@m+1
  1042  000BDA  EC2E  F003         	call	_setMotorPWM	;wreg free
  1043                           
  1044                           ;dc_motor.c: 48:     }
  1045  000BDE  0625               	decf	stop@i,f,c
  1046  000BE0  A0D8               	btfss	status,0,c
  1047  000BE2  0626               	decf	stop@i+1,f,c
  1048  000BE4  D7DD               	goto	l2059
  1049  000BE6                     __end_of_stop:
  1050                           	opt callstack 0
  1051                           
  1052 ;; *************** function _setup *****************
  1053 ;; Defined at:
  1054 ;;		line 38 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1068 ;;      Params:         0       0       0       0
  1069 ;;      Locals:         0       0       0       0
  1070 ;;      Temps:          0       0       0       0
  1071 ;;      Totals:         0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    6
  1075 ;; This function calls:
  1076 ;;		_initPWM
  1077 ;;		_init_LCD
  1078 ;;		_init_RFID
  1079 ;;		_init_sensor
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text3
  1086  000CD8                     __ptext3:
  1087                           	opt callstack 0
  1088  000CD8                     _setup:
  1089                           	opt callstack 24
  1090                           
  1091                           ;main.c: 41:     OSCCON = 0x72;
  1092                           
  1093                           ;incstack = 0
  1094  000CD8  0E72               	movlw	114
  1095  000CDA  6ED3               	movwf	4051,c	;volatile
  1096  000CDC                     l63:
  1097  000CDC  A4D3               	btfss	4051,2,c	;volatile
  1098  000CDE  D7FE               	goto	l63
  1099                           
  1100                           ;main.c: 43:     INTCONbits.GIEH = 1;
  1101  000CE0  8EF2               	bsf	4082,7,c	;volatile
  1102                           
  1103                           ;main.c: 44:     INTCONbits.GIEL = 1;
  1104  000CE2  8CF2               	bsf	4082,6,c	;volatile
  1105                           
  1106                           ;main.c: 45:     RCONbits.IPEN=1;
  1107  000CE4  8ED0               	bsf	4048,7,c	;volatile
  1108                           
  1109                           ;main.c: 48:     init_LCD();
  1110  000CE6  EC35  F004         	call	_init_LCD	;wreg free
  1111                           
  1112                           ;main.c: 49:     init_RFID();
  1113  000CEA  ECBC  F006         	call	_init_RFID	;wreg free
  1114                           
  1115                           ;main.c: 50:     init_sensor();
  1116  000CEE  ECE3  F006         	call	_init_sensor	;wreg free
  1117                           
  1118                           ;main.c: 51:     initPWM(199);
  1119  000CF2  0E00               	movlw	0
  1120  000CF4  6E09               	movwf	initPWM@PWMperiod+1,c
  1121  000CF6  0EC7               	movlw	199
  1122  000CF8  6E08               	movwf	initPWM@PWMperiod,c
  1123  000CFA  ECC9  F006         	call	_initPWM	;wreg free
  1124                           
  1125                           ;main.c: 53:     TRISBbits.RB0 = 0;
  1126  000CFE  9093               	bcf	3987,0,c	;volatile
  1127                           
  1128                           ;main.c: 54:     TRISBbits.RB2 = 0;
  1129  000D00  9493               	bcf	3987,2,c	;volatile
  1130                           
  1131                           ;main.c: 55:     TRISDbits.RD2 = 1;
  1132  000D02  8495               	bsf	3989,2,c	;volatile
  1133  000D04  0012               	return		;funcret
  1134  000D06                     __end_of_setup:
  1135                           	opt callstack 0
  1136                           
  1137 ;; *************** function _init_sensor *****************
  1138 ;; Defined at:
  1139 ;;		line 14 in file "signal_processing.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;		None
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1153 ;;      Params:         0       0       0       0
  1154 ;;      Locals:         0       0       0       0
  1155 ;;      Temps:          0       0       0       0
  1156 ;;      Totals:         0       0       0       0
  1157 ;;Total ram usage:        0 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    2
  1160 ;; This function calls:
  1161 ;;		Nothing
  1162 ;; This function is called by:
  1163 ;;		_setup
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text4
  1168  000DC6                     __ptext4:
  1169                           	opt callstack 0
  1170  000DC6                     _init_sensor:
  1171                           	opt callstack 27
  1172                           
  1173                           ;signal_processing.c: 16:     T5CON =0b00000001;
  1174                           
  1175                           ;incstack = 0
  1176  000DC6  0E01               	movlw	1
  1177  000DC8  6EB7               	movwf	4023,c	;volatile
  1178                           
  1179                           ;signal_processing.c: 17:     TRISAbits.RA2 = 1;
  1180  000DCA  8492               	bsf	3986,2,c	;volatile
  1181                           
  1182                           ;signal_processing.c: 20:     ANSEL0 = 0;
  1183  000DCC  0E00               	movlw	0
  1184  000DCE  6EB8               	movwf	4024,c	;volatile
  1185                           
  1186                           ;signal_processing.c: 21:     ANSEL1 = 0;
  1187  000DD0  0E00               	movlw	0
  1188  000DD2  6EB9               	movwf	4025,c	;volatile
  1189                           
  1190                           ;signal_processing.c: 23:     DFLTCON = 0b00011000;
  1191  000DD4  0E18               	movlw	24
  1192  000DD6  6E60               	movwf	3936,c	;volatile
  1193                           
  1194                           ;signal_processing.c: 24:     CAP1CON = 0b01000111;
  1195  000DD8  0E47               	movlw	71
  1196  000DDA  6E63               	movwf	3939,c	;volatile
  1197  000DDC  0012               	return		;funcret
  1198  000DDE                     __end_of_init_sensor:
  1199                           	opt callstack 0
  1200                           
  1201 ;; *************** function _init_RFID *****************
  1202 ;; Defined at:
  1203 ;;		line 13 in file "RFID.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         0       0       0       0
  1218 ;;      Locals:         0       0       0       0
  1219 ;;      Temps:          0       0       0       0
  1220 ;;      Totals:         0       0       0       0
  1221 ;;Total ram usage:        0 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_setup
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text5
  1232  000D78                     __ptext5:
  1233                           	opt callstack 0
  1234  000D78                     _init_RFID:
  1235                           	opt callstack 27
  1236                           
  1237                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1238                           
  1239                           ;incstack = 0
  1240  000D78  8E94               	bsf	3988,7,c	;volatile
  1241                           
  1242                           ;RFID.c: 19:     SPBRG = 203;
  1243  000D7A  0ECB               	movlw	203
  1244  000D7C  6EAF               	movwf	4015,c	;volatile
  1245                           
  1246                           ;RFID.c: 20:     SPBRGH = 0;
  1247  000D7E  0E00               	movlw	0
  1248  000D80  6EB0               	movwf	4016,c	;volatile
  1249                           
  1250                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1251  000D82  86AA               	bsf	4010,3,c	;volatile
  1252                           
  1253                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1254  000D84  84AC               	bsf	4012,2,c	;volatile
  1255                           
  1256                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1257  000D86  88AB               	bsf	4011,4,c	;volatile
  1258                           
  1259                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1260  000D88  8EAB               	bsf	4011,7,c	;volatile
  1261                           
  1262                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1263  000D8A  8AAC               	bsf	4012,5,c	;volatile
  1264                           
  1265                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1266  000D8C  8A9D               	bsf	3997,5,c	;volatile
  1267                           
  1268                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1269  000D8E  8A9F               	bsf	3999,5,c	;volatile
  1270  000D90  0012               	return		;funcret
  1271  000D92                     __end_of_init_RFID:
  1272                           	opt callstack 0
  1273                           
  1274 ;; *************** function _init_LCD *****************
  1275 ;; Defined at:
  1276 ;;		line 56 in file "LCDIO.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1290 ;;      Params:         0       0       0       0
  1291 ;;      Locals:         0       0       0       0
  1292 ;;      Temps:          1       0       0       0
  1293 ;;      Totals:         1       0       0       0
  1294 ;;Total ram usage:        1 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    5
  1297 ;; This function calls:
  1298 ;;		_LCDout
  1299 ;;		_SendLCD
  1300 ;; This function is called by:
  1301 ;;		_setup
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text6
  1306  00086A                     __ptext6:
  1307                           	opt callstack 0
  1308  00086A                     _init_LCD:
  1309                           	opt callstack 24
  1310                           
  1311                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1312                           
  1313                           ;incstack = 0
  1314  00086A  9094               	bcf	3988,0,c	;volatile
  1315                           
  1316                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1317  00086C  9E92               	bcf	3986,7,c	;volatile
  1318                           
  1319                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1320  00086E  9694               	bcf	3988,3,c	;volatile
  1321                           
  1322                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1323  000870  9095               	bcf	3989,0,c	;volatile
  1324                           
  1325                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1326  000872  9295               	bcf	3989,1,c	;volatile
  1327                           
  1328                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1329  000874  9C92               	bcf	3986,6,c	;volatile
  1330                           
  1331                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1332  000876  908C               	bcf	3980,0,c	;volatile
  1333                           
  1334                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1335  000878  928C               	bcf	3980,1,c	;volatile
  1336                           
  1337                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1338  00087A  968B               	bcf	3979,3,c	;volatile
  1339                           
  1340                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1341  00087C  908B               	bcf	3979,0,c	;volatile
  1342                           
  1343                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1344  00087E  9C89               	bcf	3977,6,c	;volatile
  1345                           
  1346                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1347  000880  9E89               	bcf	3977,7,c	;volatile
  1348                           
  1349                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1350  000882  0E27               	movlw	39
  1351  000884  6E0C               	movwf	??_init_LCD& (0+255),c
  1352  000886  0EF5               	movlw	245
  1353  000888                     u1727:
  1354  000888  2EE8               	decfsz	wreg,f,c
  1355  00088A  D7FE               	bra	u1727
  1356  00088C  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1357  00088E  D7FC               	bra	u1727
  1358  000890  F000               	nop	
  1359                           
  1360                           ;LCDIO.c: 76:  LCDout(0b0011);
  1361  000892  0E03               	movlw	3
  1362  000894  EC1C  F005         	call	_LCDout
  1363                           
  1364                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1365  000898  0E0D               	movlw	13
  1366  00089A  6E0C               	movwf	??_init_LCD& (0+255),c
  1367  00089C  0EFC               	movlw	252
  1368  00089E                     u1737:
  1369  00089E  2EE8               	decfsz	wreg,f,c
  1370  0008A0  D7FE               	bra	u1737
  1371  0008A2  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1372  0008A4  D7FC               	bra	u1737
  1373                           
  1374                           ;LCDIO.c: 78:  LCDout(0b0011);
  1375  0008A6  0E03               	movlw	3
  1376  0008A8  EC1C  F005         	call	_LCDout
  1377                           
  1378                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1379  0008AC  0E85               	movlw	133
  1380  0008AE                     u1747:
  1381  0008AE  2EE8               	decfsz	wreg,f,c
  1382  0008B0  D7FE               	bra	u1747
  1383  0008B2  F000               	nop	
  1384                           
  1385                           ;LCDIO.c: 80:  LCDout(0b0011);
  1386  0008B4  0E03               	movlw	3
  1387  0008B6  EC1C  F005         	call	_LCDout
  1388                           
  1389                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1390  0008BA  0E21               	movlw	33
  1391  0008BC                     u1757:
  1392  0008BC  2EE8               	decfsz	wreg,f,c
  1393  0008BE  D7FE               	bra	u1757
  1394  0008C0  F000               	nop	
  1395                           
  1396                           ;LCDIO.c: 82:  LCDout(0b0010);
  1397  0008C2  0E02               	movlw	2
  1398  0008C4  EC1C  F005         	call	_LCDout
  1399                           
  1400                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1401  0008C8  0E21               	movlw	33
  1402  0008CA                     u1767:
  1403  0008CA  2EE8               	decfsz	wreg,f,c
  1404  0008CC  D7FE               	bra	u1767
  1405  0008CE  F000               	nop	
  1406                           
  1407                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1408  0008D0  0E00               	movlw	0
  1409  0008D2  6E0A               	movwf	SendLCD@type,c
  1410  0008D4  0E28               	movlw	40
  1411  0008D6  EC54  F006         	call	_SendLCD
  1412                           
  1413                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1414  0008DA  0E21               	movlw	33
  1415  0008DC                     u1777:
  1416  0008DC  2EE8               	decfsz	wreg,f,c
  1417  0008DE  D7FE               	bra	u1777
  1418  0008E0  F000               	nop	
  1419                           
  1420                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1421  0008E2  0E00               	movlw	0
  1422  0008E4  6E0A               	movwf	SendLCD@type,c
  1423  0008E6  0E08               	movlw	8
  1424  0008E8  EC54  F006         	call	_SendLCD
  1425                           
  1426                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1427  0008EC  0E21               	movlw	33
  1428  0008EE                     u1787:
  1429  0008EE  2EE8               	decfsz	wreg,f,c
  1430  0008F0  D7FE               	bra	u1787
  1431  0008F2  F000               	nop	
  1432                           
  1433                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1434  0008F4  0E00               	movlw	0
  1435  0008F6  6E0A               	movwf	SendLCD@type,c
  1436  0008F8  0E01               	movlw	1
  1437  0008FA  EC54  F006         	call	_SendLCD
  1438                           
  1439                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1440  0008FE  0E0D               	movlw	13
  1441  000900  6E0C               	movwf	??_init_LCD& (0+255),c
  1442  000902  0EFC               	movlw	252
  1443  000904                     u1797:
  1444  000904  2EE8               	decfsz	wreg,f,c
  1445  000906  D7FE               	bra	u1797
  1446  000908  2E0C               	decfsz	??_init_LCD& (0+255),f,c
  1447  00090A  D7FC               	bra	u1797
  1448                           
  1449                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1450  00090C  0E00               	movlw	0
  1451  00090E  6E0A               	movwf	SendLCD@type,c
  1452  000910  0E06               	movlw	6
  1453  000912  EC54  F006         	call	_SendLCD
  1454                           
  1455                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1456  000916  0E21               	movlw	33
  1457  000918                     u1807:
  1458  000918  2EE8               	decfsz	wreg,f,c
  1459  00091A  D7FE               	bra	u1807
  1460  00091C  F000               	nop	
  1461                           
  1462                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1463  00091E  0E00               	movlw	0
  1464  000920  6E0A               	movwf	SendLCD@type,c
  1465  000922  0E0C               	movlw	12
  1466  000924  EC54  F006         	call	_SendLCD
  1467                           
  1468                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1469  000928  0E21               	movlw	33
  1470  00092A                     u1817:
  1471  00092A  2EE8               	decfsz	wreg,f,c
  1472  00092C  D7FE               	bra	u1817
  1473  00092E  F000               	nop	
  1474  000930  0012               	return		;funcret
  1475  000932                     __end_of_init_LCD:
  1476                           	opt callstack 0
  1477                           
  1478 ;; *************** function _initPWM *****************
  1479 ;; Defined at:
  1480 ;;		line 5 in file "dc_motor.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  PWMperiod       2    7[COMRAM] int 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1494 ;;      Params:         2       0       0       0
  1495 ;;      Locals:         0       0       0       0
  1496 ;;      Temps:          0       0       0       0
  1497 ;;      Totals:         2       0       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    2
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_setup
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text7
  1509  000D92                     __ptext7:
  1510                           	opt callstack 0
  1511  000D92                     _initPWM:
  1512                           	opt callstack 27
  1513                           
  1514                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  1515                           
  1516                           ;incstack = 0
  1517  000D92  0E00               	movlw	0
  1518  000D94  6E7F               	movwf	3967,c	;volatile
  1519                           
  1520                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  1521  000D96  0E80               	movlw	128
  1522  000D98  6E7E               	movwf	3966,c	;volatile
  1523                           
  1524                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  1525  000D9A  0E6F               	movlw	111
  1526  000D9C  6E6F               	movwf	3951,c	;volatile
  1527                           
  1528                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  1529  000D9E  0E00               	movlw	0
  1530  000DA0  6E6E               	movwf	3950,c	;volatile
  1531                           
  1532                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  1533  000DA2  C008  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  1534                           
  1535                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  1536  000DA6  5009               	movf	initPWM@PWMperiod+1,w,c
  1537  000DA8  6E7A               	movwf	3962,c	;volatile
  1538  000DAA  0012               	return		;funcret
  1539  000DAC                     __end_of_initPWM:
  1540                           	opt callstack 0
  1541                           
  1542 ;; *************** function _moveForward *****************
  1543 ;; Defined at:
  1544 ;;		line 69 in file "dc_motor.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1547 ;;		 -> main@motorL(9), 
  1548 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1549 ;;		 -> main@motorR(9), 
  1550 ;;  max_power       2   34[COMRAM] int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  i               2   37[COMRAM] int 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1562 ;;      Params:         6       0       0       0
  1563 ;;      Locals:         2       0       0       0
  1564 ;;      Temps:          1       0       0       0
  1565 ;;      Totals:         9       0       0       0
  1566 ;;Total ram usage:        9 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    4
  1569 ;; This function calls:
  1570 ;;		_setMotorPWM
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text8
  1577  000AB0                     __ptext8:
  1578                           	opt callstack 0
  1579  000AB0                     _moveForward:
  1580                           	opt callstack 26
  1581                           
  1582                           ;dc_motor.c: 69: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 70: {;dc_motor.c: 71:     mL->direction = 1;
  1583                           
  1584                           ;incstack = 0
  1585  000AB0  EE20 F001          	lfsr	2,1
  1586  000AB4  501F               	movf	moveForward@mL,w,c
  1587  000AB6  26D9               	addwf	fsr2l,f,c
  1588  000AB8  5020               	movf	moveForward@mL+1,w,c
  1589  000ABA  22DA               	addwfc	fsr2h,f,c
  1590  000ABC  0E01               	movlw	1
  1591  000ABE  6EDF               	movwf	indf2,c
  1592                           
  1593                           ;dc_motor.c: 72:     mR->direction = 1;
  1594  000AC0  EE20 F001          	lfsr	2,1
  1595  000AC4  5021               	movf	moveForward@mR,w,c
  1596  000AC6  26D9               	addwf	fsr2l,f,c
  1597  000AC8  5022               	movf	moveForward@mR+1,w,c
  1598  000ACA  22DA               	addwfc	fsr2h,f,c
  1599  000ACC  0E01               	movlw	1
  1600  000ACE  6EDF               	movwf	indf2,c
  1601                           
  1602                           ;dc_motor.c: 73:     for(int i = 0; i < max_power; i++)
  1603  000AD0  0E00               	movlw	0
  1604  000AD2  6E27               	movwf	moveForward@i+1,c
  1605  000AD4  0E00               	movlw	0
  1606  000AD6  6E26               	movwf	moveForward@i,c
  1607  000AD8  D01A               	goto	l1995
  1608  000ADA                     l1987:
  1609                           
  1610                           ;dc_motor.c: 74:     {;dc_motor.c: 75:         mL->power = i;
  1611  000ADA  C01F  FFD9         	movff	moveForward@mL,fsr2l
  1612  000ADE  C020  FFDA         	movff	moveForward@mL+1,fsr2h
  1613  000AE2  C026  FFDF         	movff	moveForward@i,indf2
  1614                           
  1615                           ;dc_motor.c: 76:         mR->power = i;
  1616  000AE6  C021  FFD9         	movff	moveForward@mR,fsr2l
  1617  000AEA  C022  FFDA         	movff	moveForward@mR+1,fsr2h
  1618  000AEE  C026  FFDF         	movff	moveForward@i,indf2
  1619                           
  1620                           ;dc_motor.c: 77:         setMotorPWM(mL);
  1621  000AF2  C01F  F016         	movff	moveForward@mL,setMotorPWM@m
  1622  000AF6  C020  F017         	movff	moveForward@mL+1,setMotorPWM@m+1
  1623  000AFA  EC2E  F003         	call	_setMotorPWM	;wreg free
  1624                           
  1625                           ;dc_motor.c: 78:         setMotorPWM(mR);
  1626  000AFE  C021  F016         	movff	moveForward@mR,setMotorPWM@m
  1627  000B02  C022  F017         	movff	moveForward@mR+1,setMotorPWM@m+1
  1628  000B06  EC2E  F003         	call	_setMotorPWM	;wreg free
  1629                           
  1630                           ;dc_motor.c: 79:     }
  1631  000B0A  4A26               	infsnz	moveForward@i,f,c
  1632  000B0C  2A27               	incf	moveForward@i+1,f,c
  1633  000B0E                     l1995:
  1634  000B0E  5023               	movf	moveForward@max_power,w,c
  1635  000B10  5C26               	subwf	moveForward@i,w,c
  1636  000B12  5027               	movf	moveForward@i+1,w,c
  1637  000B14  0A80               	xorlw	128
  1638  000B16  6E25               	movwf	??_moveForward& (0+255),c
  1639  000B18  5024               	movf	moveForward@max_power+1,w,c
  1640  000B1A  0A80               	xorlw	128
  1641  000B1C  5825               	subwfb	??_moveForward& (0+255),w,c
  1642  000B1E  B0D8               	btfsc	status,0,c
  1643  000B20  0012               	return	
  1644  000B22  D7DB               	goto	l1987
  1645  000B24                     __end_of_moveForward:
  1646                           	opt callstack 0
  1647                           
  1648 ;; *************** function _moveBackward *****************
  1649 ;; Defined at:
  1650 ;;		line 83 in file "dc_motor.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1653 ;;		 -> main@motorL(9), 
  1654 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1655 ;;		 -> main@motorR(9), 
  1656 ;;  max_power       2   34[COMRAM] int 
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  i               2   37[COMRAM] int 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1668 ;;      Params:         6       0       0       0
  1669 ;;      Locals:         2       0       0       0
  1670 ;;      Temps:          1       0       0       0
  1671 ;;      Totals:         9       0       0       0
  1672 ;;Total ram usage:        9 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    4
  1675 ;; This function calls:
  1676 ;;		_setMotorPWM
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text9
  1683  000B24                     __ptext9:
  1684                           	opt callstack 0
  1685  000B24                     _moveBackward:
  1686                           	opt callstack 26
  1687                           
  1688                           ;dc_motor.c: 83: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 84: {;dc_motor.c: 85:     mL->direction = 0;
  1689                           
  1690                           ;incstack = 0
  1691  000B24  EE20 F001          	lfsr	2,1
  1692  000B28  501F               	movf	moveBackward@mL,w,c
  1693  000B2A  26D9               	addwf	fsr2l,f,c
  1694  000B2C  5020               	movf	moveBackward@mL+1,w,c
  1695  000B2E  22DA               	addwfc	fsr2h,f,c
  1696  000B30  0E00               	movlw	0
  1697  000B32  6EDF               	movwf	indf2,c
  1698                           
  1699                           ;dc_motor.c: 86:     mR->direction = 0;
  1700  000B34  EE20 F001          	lfsr	2,1
  1701  000B38  5021               	movf	moveBackward@mR,w,c
  1702  000B3A  26D9               	addwf	fsr2l,f,c
  1703  000B3C  5022               	movf	moveBackward@mR+1,w,c
  1704  000B3E  22DA               	addwfc	fsr2h,f,c
  1705  000B40  0E00               	movlw	0
  1706  000B42  6EDF               	movwf	indf2,c
  1707                           
  1708                           ;dc_motor.c: 87:     for(int i = 0; i < max_power; i++)
  1709  000B44  0E00               	movlw	0
  1710  000B46  6E27               	movwf	moveBackward@i+1,c
  1711  000B48  0E00               	movlw	0
  1712  000B4A  6E26               	movwf	moveBackward@i,c
  1713  000B4C  D01A               	goto	l2055
  1714  000B4E                     l2047:
  1715                           
  1716                           ;dc_motor.c: 88:     {;dc_motor.c: 89:         mL->power = i;
  1717  000B4E  C01F  FFD9         	movff	moveBackward@mL,fsr2l
  1718  000B52  C020  FFDA         	movff	moveBackward@mL+1,fsr2h
  1719  000B56  C026  FFDF         	movff	moveBackward@i,indf2
  1720                           
  1721                           ;dc_motor.c: 90:         mR->power = i;
  1722  000B5A  C021  FFD9         	movff	moveBackward@mR,fsr2l
  1723  000B5E  C022  FFDA         	movff	moveBackward@mR+1,fsr2h
  1724  000B62  C026  FFDF         	movff	moveBackward@i,indf2
  1725                           
  1726                           ;dc_motor.c: 91:         setMotorPWM(mL);
  1727  000B66  C01F  F016         	movff	moveBackward@mL,setMotorPWM@m
  1728  000B6A  C020  F017         	movff	moveBackward@mL+1,setMotorPWM@m+1
  1729  000B6E  EC2E  F003         	call	_setMotorPWM	;wreg free
  1730                           
  1731                           ;dc_motor.c: 92:         setMotorPWM(mR);
  1732  000B72  C021  F016         	movff	moveBackward@mR,setMotorPWM@m
  1733  000B76  C022  F017         	movff	moveBackward@mR+1,setMotorPWM@m+1
  1734  000B7A  EC2E  F003         	call	_setMotorPWM	;wreg free
  1735                           
  1736                           ;dc_motor.c: 93:     }
  1737  000B7E  4A26               	infsnz	moveBackward@i,f,c
  1738  000B80  2A27               	incf	moveBackward@i+1,f,c
  1739  000B82                     l2055:
  1740  000B82  5023               	movf	moveBackward@max_power,w,c
  1741  000B84  5C26               	subwf	moveBackward@i,w,c
  1742  000B86  5027               	movf	moveBackward@i+1,w,c
  1743  000B88  0A80               	xorlw	128
  1744  000B8A  6E25               	movwf	??_moveBackward& (0+255),c
  1745  000B8C  5024               	movf	moveBackward@max_power+1,w,c
  1746  000B8E  0A80               	xorlw	128
  1747  000B90  5825               	subwfb	??_moveBackward& (0+255),w,c
  1748  000B92  B0D8               	btfsc	status,0,c
  1749  000B94  0012               	return	
  1750  000B96  D7DB               	goto	l2047
  1751  000B98                     __end_of_moveBackward:
  1752                           	opt callstack 0
  1753                           
  1754 ;; *************** function _init_motor_struct *****************
  1755 ;; Defined at:
  1756 ;;		line 96 in file "dc_motor.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  1759 ;;		 -> main@motorL(9), 
  1760 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  1761 ;;		 -> main@motorR(9), 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1773 ;;      Params:         4       0       0       0
  1774 ;;      Locals:         0       0       0       0
  1775 ;;      Temps:          0       0       0       0
  1776 ;;      Totals:         4       0       0       0
  1777 ;;Total ram usage:        4 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    4
  1780 ;; This function calls:
  1781 ;;		_setMotorPWM
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text10
  1788  000780                     __ptext10:
  1789                           	opt callstack 0
  1790  000780                     _init_motor_struct:
  1791                           	opt callstack 26
  1792                           
  1793                           ;dc_motor.c: 96: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 97: {;dc_motor.c: 99: mL->power = 0;
  1794                           
  1795                           ;incstack = 0
  1796  000780  C01F  FFD9         	movff	init_motor_struct@mL,fsr2l
  1797  000784  C020  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  1798  000788  0E00               	movlw	0
  1799  00078A  6EDF               	movwf	indf2,c
  1800                           
  1801                           ;dc_motor.c: 100: mL->direction = 1;
  1802  00078C  EE20 F001          	lfsr	2,1
  1803  000790  501F               	movf	init_motor_struct@mL,w,c
  1804  000792  26D9               	addwf	fsr2l,f,c
  1805  000794  5020               	movf	init_motor_struct@mL+1,w,c
  1806  000796  22DA               	addwfc	fsr2h,f,c
  1807  000798  0E01               	movlw	1
  1808  00079A  6EDF               	movwf	indf2,c
  1809                           
  1810                           ;dc_motor.c: 101: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  1811  00079C  EE20 F002          	lfsr	2,2
  1812  0007A0  501F               	movf	init_motor_struct@mL,w,c
  1813  0007A2  26D9               	addwf	fsr2l,f,c
  1814  0007A4  5020               	movf	init_motor_struct@mL+1,w,c
  1815  0007A6  22DA               	addwfc	fsr2h,f,c
  1816  0007A8  0E79               	movlw	121
  1817  0007AA  6EDE               	movwf	postinc2,c
  1818  0007AC  0E0F               	movlw	15
  1819  0007AE  6EDD               	movwf	postdec2,c
  1820                           
  1821                           ;dc_motor.c: 102: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  1822  0007B0  EE20 F004          	lfsr	2,4
  1823  0007B4  501F               	movf	init_motor_struct@mL,w,c
  1824  0007B6  26D9               	addwf	fsr2l,f,c
  1825  0007B8  5020               	movf	init_motor_struct@mL+1,w,c
  1826  0007BA  22DA               	addwfc	fsr2h,f,c
  1827  0007BC  0E78               	movlw	120
  1828  0007BE  6EDE               	movwf	postinc2,c
  1829  0007C0  0E0F               	movlw	15
  1830  0007C2  6EDD               	movwf	postdec2,c
  1831                           
  1832                           ;dc_motor.c: 103: mL->dir_pin=0;
  1833  0007C4  EE20 F006          	lfsr	2,6
  1834  0007C8  501F               	movf	init_motor_struct@mL,w,c
  1835  0007CA  26D9               	addwf	fsr2l,f,c
  1836  0007CC  5020               	movf	init_motor_struct@mL+1,w,c
  1837  0007CE  22DA               	addwfc	fsr2h,f,c
  1838  0007D0  0E00               	movlw	0
  1839  0007D2  6EDF               	movwf	indf2,c
  1840                           
  1841                           ;dc_motor.c: 104: mL->PWMperiod=199;
  1842  0007D4  EE20 F007          	lfsr	2,7
  1843  0007D8  501F               	movf	init_motor_struct@mL,w,c
  1844  0007DA  26D9               	addwf	fsr2l,f,c
  1845  0007DC  5020               	movf	init_motor_struct@mL+1,w,c
  1846  0007DE  22DA               	addwfc	fsr2h,f,c
  1847  0007E0  0EC7               	movlw	199
  1848  0007E2  6EDE               	movwf	postinc2,c
  1849  0007E4  0E00               	movlw	0
  1850  0007E6  6EDD               	movwf	postdec2,c
  1851                           
  1852                           ;dc_motor.c: 106: mR->power = 0;
  1853  0007E8  C021  FFD9         	movff	init_motor_struct@mR,fsr2l
  1854  0007EC  C022  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  1855  0007F0  0E00               	movlw	0
  1856  0007F2  6EDF               	movwf	indf2,c
  1857                           
  1858                           ;dc_motor.c: 107: mR->direction = 1;
  1859  0007F4  EE20 F001          	lfsr	2,1
  1860  0007F8  5021               	movf	init_motor_struct@mR,w,c
  1861  0007FA  26D9               	addwf	fsr2l,f,c
  1862  0007FC  5022               	movf	init_motor_struct@mR+1,w,c
  1863  0007FE  22DA               	addwfc	fsr2h,f,c
  1864  000800  0E01               	movlw	1
  1865  000802  6EDF               	movwf	indf2,c
  1866                           
  1867                           ;dc_motor.c: 108: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  1868  000804  EE20 F002          	lfsr	2,2
  1869  000808  5021               	movf	init_motor_struct@mR,w,c
  1870  00080A  26D9               	addwf	fsr2l,f,c
  1871  00080C  5022               	movf	init_motor_struct@mR+1,w,c
  1872  00080E  22DA               	addwfc	fsr2h,f,c
  1873  000810  0E77               	movlw	119
  1874  000812  6EDE               	movwf	postinc2,c
  1875  000814  0E0F               	movlw	15
  1876  000816  6EDD               	movwf	postdec2,c
  1877                           
  1878                           ;dc_motor.c: 109: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  1879  000818  EE20 F004          	lfsr	2,4
  1880  00081C  5021               	movf	init_motor_struct@mR,w,c
  1881  00081E  26D9               	addwf	fsr2l,f,c
  1882  000820  5022               	movf	init_motor_struct@mR+1,w,c
  1883  000822  22DA               	addwfc	fsr2h,f,c
  1884  000824  0E76               	movlw	118
  1885  000826  6EDE               	movwf	postinc2,c
  1886  000828  0E0F               	movlw	15
  1887  00082A  6EDD               	movwf	postdec2,c
  1888                           
  1889                           ;dc_motor.c: 110: mR->dir_pin=2;
  1890  00082C  EE20 F006          	lfsr	2,6
  1891  000830  5021               	movf	init_motor_struct@mR,w,c
  1892  000832  26D9               	addwf	fsr2l,f,c
  1893  000834  5022               	movf	init_motor_struct@mR+1,w,c
  1894  000836  22DA               	addwfc	fsr2h,f,c
  1895  000838  0E02               	movlw	2
  1896  00083A  6EDF               	movwf	indf2,c
  1897                           
  1898                           ;dc_motor.c: 111: mR->PWMperiod=199;
  1899  00083C  EE20 F007          	lfsr	2,7
  1900  000840  5021               	movf	init_motor_struct@mR,w,c
  1901  000842  26D9               	addwf	fsr2l,f,c
  1902  000844  5022               	movf	init_motor_struct@mR+1,w,c
  1903  000846  22DA               	addwfc	fsr2h,f,c
  1904  000848  0EC7               	movlw	199
  1905  00084A  6EDE               	movwf	postinc2,c
  1906  00084C  0E00               	movlw	0
  1907  00084E  6EDD               	movwf	postdec2,c
  1908                           
  1909                           ;dc_motor.c: 113: setMotorPWM(mL);
  1910  000850  C01F  F016         	movff	init_motor_struct@mL,setMotorPWM@m
  1911  000854  C020  F017         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  1912  000858  EC2E  F003         	call	_setMotorPWM	;wreg free
  1913                           
  1914                           ;dc_motor.c: 114: setMotorPWM(mR);
  1915  00085C  C021  F016         	movff	init_motor_struct@mR,setMotorPWM@m
  1916  000860  C022  F017         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  1917  000864  EC2E  F003         	call	_setMotorPWM	;wreg free
  1918  000868  0012               	return		;funcret
  1919  00086A                     __end_of_init_motor_struct:
  1920                           	opt callstack 0
  1921                           
  1922 ;; *************** function _setMotorPWM *****************
  1923 ;; Defined at:
  1924 ;;		line 18 in file "dc_motor.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  m               2   21[COMRAM] PTR struct DC_motor
  1927 ;;		 -> main@motorR(9), main@motorL(9), 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  PWMduty         2   28[COMRAM] int 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1939 ;;      Params:         2       0       0       0
  1940 ;;      Locals:         2       0       0       0
  1941 ;;      Temps:          5       0       0       0
  1942 ;;      Totals:         9       0       0       0
  1943 ;;Total ram usage:        9 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    3
  1946 ;; This function calls:
  1947 ;;		___awdiv
  1948 ;;		___wmul
  1949 ;; This function is called by:
  1950 ;;		_stop
  1951 ;;		_turnRight
  1952 ;;		_moveForward
  1953 ;;		_moveBackward
  1954 ;;		_init_motor_struct
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text11
  1959  00065C                     __ptext11:
  1960                           	opt callstack 0
  1961  00065C                     _setMotorPWM:
  1962                           	opt callstack 26
  1963                           
  1964                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  1965                           
  1966                           ;incstack = 0
  1967  00065C  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  1968  000660  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1969  000664  50DF               	movf	indf2,w,c
  1970  000666  6E18               	movwf	??_setMotorPWM& (0+255),c
  1971  000668  5018               	movf	??_setMotorPWM,w,c
  1972  00066A  6E08               	movwf	___wmul@multiplier,c
  1973  00066C  6A09               	clrf	___wmul@multiplier+1,c
  1974  00066E  EE20 F007          	lfsr	2,7
  1975  000672  5016               	movf	setMotorPWM@m,w,c
  1976  000674  26D9               	addwf	fsr2l,f,c
  1977  000676  5017               	movf	setMotorPWM@m+1,w,c
  1978  000678  22DA               	addwfc	fsr2h,f,c
  1979  00067A  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  1980  00067E  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  1981  000682  EC9A  F006         	call	___wmul	;wreg free
  1982  000686  C008  F00E         	movff	?___wmul,___awdiv@dividend
  1983  00068A  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  1984  00068E  0E00               	movlw	0
  1985  000690  6E11               	movwf	___awdiv@divisor+1,c
  1986  000692  0E64               	movlw	100
  1987  000694  6E10               	movwf	___awdiv@divisor,c
  1988  000696  EC99  F004         	call	___awdiv	;wreg free
  1989  00069A  C00E  F01D         	movff	?___awdiv,setMotorPWM@PWMduty
  1990  00069E  C00F  F01E         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1991                           
  1992                           ;dc_motor.c: 24:     if (m->direction)
  1993  0006A2  EE20 F001          	lfsr	2,1
  1994  0006A6  5016               	movf	setMotorPWM@m,w,c
  1995  0006A8  26D9               	addwf	fsr2l,f,c
  1996  0006AA  5017               	movf	setMotorPWM@m+1,w,c
  1997  0006AC  22DA               	addwfc	fsr2h,f,c
  1998  0006AE  50DF               	movf	indf2,w,c
  1999  0006B0  B4D8               	btfsc	status,2,c
  2000  0006B2  D024               	goto	l1909
  2001                           
  2002                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  2003  0006B4  EE20 F006          	lfsr	2,6
  2004  0006B8  5016               	movf	setMotorPWM@m,w,c
  2005  0006BA  26D9               	addwf	fsr2l,f,c
  2006  0006BC  5017               	movf	setMotorPWM@m+1,w,c
  2007  0006BE  22DA               	addwfc	fsr2h,f,c
  2008  0006C0  50DF               	movf	indf2,w,c
  2009  0006C2  6E18               	movwf	??_setMotorPWM& (0+255),c
  2010  0006C4  0E01               	movlw	1
  2011  0006C6  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  2012  0006C8  2A18               	incf	??_setMotorPWM,f,c
  2013  0006CA  D002               	goto	u1264
  2014  0006CC                     u1265:
  2015  0006CC  90D8               	bcf	status,0,c
  2016  0006CE  3619               	rlcf	??_setMotorPWM+1,f,c
  2017  0006D0                     u1264:
  2018  0006D0  2E18               	decfsz	??_setMotorPWM,f,c
  2019  0006D2  D7FC               	goto	u1265
  2020  0006D4  5019               	movf	??_setMotorPWM+1,w,c
  2021  0006D6  108A               	iorwf	3978,w,c	;volatile
  2022  0006D8  6E8A               	movwf	3978,c	;volatile
  2023                           
  2024                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  2025  0006DA  EE20 F007          	lfsr	2,7
  2026  0006DE  5016               	movf	setMotorPWM@m,w,c
  2027  0006E0  26D9               	addwf	fsr2l,f,c
  2028  0006E2  5017               	movf	setMotorPWM@m+1,w,c
  2029  0006E4  22DA               	addwfc	fsr2h,f,c
  2030  0006E6  CFDE F018          	movff	postinc2,??_setMotorPWM
  2031  0006EA  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  2032  0006EE  501D               	movf	setMotorPWM@PWMduty,w,c
  2033  0006F0  5C18               	subwf	??_setMotorPWM,w,c
  2034  0006F2  6E1D               	movwf	setMotorPWM@PWMduty,c
  2035  0006F4  501E               	movf	setMotorPWM@PWMduty+1,w,c
  2036  0006F6  5819               	subwfb	??_setMotorPWM+1,w,c
  2037  0006F8  6E1E               	movwf	setMotorPWM@PWMduty+1,c
  2038                           
  2039                           ;dc_motor.c: 28:     }
  2040  0006FA  D014               	goto	l135
  2041  0006FC                     l1909:
  2042                           
  2043                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  2044  0006FC  EE20 F006          	lfsr	2,6
  2045  000700  5016               	movf	setMotorPWM@m,w,c
  2046  000702  26D9               	addwf	fsr2l,f,c
  2047  000704  5017               	movf	setMotorPWM@m+1,w,c
  2048  000706  22DA               	addwfc	fsr2h,f,c
  2049  000708  50DF               	movf	indf2,w,c
  2050  00070A  6E18               	movwf	??_setMotorPWM& (0+255),c
  2051  00070C  0E01               	movlw	1
  2052  00070E  6E19               	movwf	(??_setMotorPWM+1)& (0+255),c
  2053  000710  2A18               	incf	??_setMotorPWM,f,c
  2054  000712  D002               	goto	u1274
  2055  000714                     u1275:
  2056  000714  90D8               	bcf	status,0,c
  2057  000716  3619               	rlcf	??_setMotorPWM+1,f,c
  2058  000718                     u1274:
  2059  000718  2E18               	decfsz	??_setMotorPWM,f,c
  2060  00071A  D7FC               	goto	u1275
  2061  00071C  5019               	movf	??_setMotorPWM+1,w,c
  2062  00071E  0AFF               	xorlw	255
  2063  000720  148A               	andwf	3978,w,c	;volatile
  2064  000722  6E8A               	movwf	3978,c	;volatile
  2065  000724                     l135:
  2066                           
  2067                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  2068  000724  EE20 F002          	lfsr	2,2
  2069  000728  5016               	movf	setMotorPWM@m,w,c
  2070  00072A  26D9               	addwf	fsr2l,f,c
  2071  00072C  5017               	movf	setMotorPWM@m+1,w,c
  2072  00072E  22DA               	addwfc	fsr2h,f,c
  2073  000730  CFDE F018          	movff	postinc2,??_setMotorPWM
  2074  000734  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  2075  000738  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  2076  00073C  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2077  000740  441D               	rlncf	setMotorPWM@PWMduty,w,c
  2078  000742  46E8               	rlncf	wreg,f,c
  2079  000744  0BFC               	andlw	252
  2080  000746  6EDF               	movwf	indf2,c
  2081                           
  2082                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  2083  000748  EE20 F004          	lfsr	2,4
  2084  00074C  5016               	movf	setMotorPWM@m,w,c
  2085  00074E  26D9               	addwf	fsr2l,f,c
  2086  000750  5017               	movf	setMotorPWM@m+1,w,c
  2087  000752  22DA               	addwfc	fsr2h,f,c
  2088  000754  CFDE F018          	movff	postinc2,??_setMotorPWM
  2089  000758  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  2090  00075C  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  2091  000760  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2092  000764  C01D  F01A         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  2093  000768  C01E  F01B         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  2094  00076C  0E06               	movlw	6
  2095  00076E  6E1C               	movwf	(??_setMotorPWM+4)& (0+255),c
  2096  000770                     u1285:
  2097  000770  341B               	rlcf	??_setMotorPWM+3,w,c
  2098  000772  321B               	rrcf	??_setMotorPWM+3,f,c
  2099  000774  321A               	rrcf	??_setMotorPWM+2,f,c
  2100  000776  2E1C               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  2101  000778  D7FB               	goto	u1285
  2102  00077A  501A               	movf	??_setMotorPWM+2,w,c
  2103  00077C  6EDF               	movwf	indf2,c
  2104  00077E  0012               	return		;funcret
  2105  000780                     __end_of_setMotorPWM:
  2106                           	opt callstack 0
  2107                           
  2108 ;; *************** function ___wmul *****************
  2109 ;; Defined at:
  2110 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  multiplier      2    7[COMRAM] unsigned int 
  2113 ;;  multiplicand    2    9[COMRAM] unsigned int 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  product         2   11[COMRAM] unsigned int 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  2    7[COMRAM] unsigned int 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0, prodl, prodh
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2125 ;;      Params:         4       0       0       0
  2126 ;;      Locals:         2       0       0       0
  2127 ;;      Temps:          0       0       0       0
  2128 ;;      Totals:         6       0       0       0
  2129 ;;Total ram usage:        6 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    2
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_setMotorPWM
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text12
  2140  000D34                     __ptext12:
  2141                           	opt callstack 0
  2142  000D34                     ___wmul:
  2143                           	opt callstack 26
  2144                           
  2145                           ;incstack = 0
  2146  000D34  5008               	movf	___wmul@multiplier,w,c
  2147  000D36  020A               	mulwf	___wmul@multiplicand,c
  2148  000D38  CFF3 F00C          	movff	prodl,___wmul@product
  2149  000D3C  CFF4 F00D          	movff	prodh,___wmul@product+1
  2150  000D40  5008               	movf	___wmul@multiplier,w,c
  2151  000D42  020B               	mulwf	___wmul@multiplicand+1,c
  2152  000D44  50F3               	movf	prodl,w,c
  2153  000D46  260D               	addwf	___wmul@product+1,f,c
  2154  000D48  5009               	movf	___wmul@multiplier+1,w,c
  2155  000D4A  020A               	mulwf	___wmul@multiplicand,c
  2156  000D4C  50F3               	movf	prodl,w,c
  2157  000D4E  260D               	addwf	___wmul@product+1,f,c
  2158  000D50  C00C  F008         	movff	___wmul@product,?___wmul
  2159  000D54  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  2160  000D58  0012               	return		;funcret
  2161  000D5A                     __end_of___wmul:
  2162                           	opt callstack 0
  2163                           
  2164 ;; *************** function ___awdiv *****************
  2165 ;; Defined at:
  2166 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  dividend        2   13[COMRAM] int 
  2169 ;;  divisor         2   15[COMRAM] int 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  quotient        2   19[COMRAM] int 
  2172 ;;  sign            1   18[COMRAM] unsigned char 
  2173 ;;  counter         1   17[COMRAM] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  2   13[COMRAM] int 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2183 ;;      Params:         4       0       0       0
  2184 ;;      Locals:         4       0       0       0
  2185 ;;      Temps:          0       0       0       0
  2186 ;;      Totals:         8       0       0       0
  2187 ;;Total ram usage:        8 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    2
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_setMotorPWM
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text13
  2198  000932                     __ptext13:
  2199                           	opt callstack 0
  2200  000932                     ___awdiv:
  2201                           	opt callstack 26
  2202                           
  2203                           ;incstack = 0
  2204  000932  0E00               	movlw	0
  2205  000934  6E13               	movwf	___awdiv@sign,c
  2206  000936  AE11               	btfss	___awdiv@divisor+1,7,c
  2207  000938  D006               	goto	l1799
  2208  00093A  6C10               	negf	___awdiv@divisor,c
  2209  00093C  1E11               	comf	___awdiv@divisor+1,f,c
  2210  00093E  B0D8               	btfsc	status,0,c
  2211  000940  2A11               	incf	___awdiv@divisor+1,f,c
  2212  000942  0E01               	movlw	1
  2213  000944  6E13               	movwf	___awdiv@sign,c
  2214  000946                     l1799:
  2215  000946  AE0F               	btfss	___awdiv@dividend+1,7,c
  2216  000948  D006               	goto	l1805
  2217  00094A  6C0E               	negf	___awdiv@dividend,c
  2218  00094C  1E0F               	comf	___awdiv@dividend+1,f,c
  2219  00094E  B0D8               	btfsc	status,0,c
  2220  000950  2A0F               	incf	___awdiv@dividend+1,f,c
  2221  000952  0E01               	movlw	1
  2222  000954  1A13               	xorwf	___awdiv@sign,f,c
  2223  000956                     l1805:
  2224  000956  0E00               	movlw	0
  2225  000958  6E15               	movwf	___awdiv@quotient+1,c
  2226  00095A  0E00               	movlw	0
  2227  00095C  6E14               	movwf	___awdiv@quotient,c
  2228  00095E  5010               	movf	___awdiv@divisor,w,c
  2229  000960  1011               	iorwf	___awdiv@divisor+1,w,c
  2230  000962  B4D8               	btfsc	status,2,c
  2231  000964  D01C               	goto	l1827
  2232  000966  0E01               	movlw	1
  2233  000968  6E12               	movwf	___awdiv@counter,c
  2234  00096A  D004               	goto	l1813
  2235  00096C                     l1811:
  2236  00096C  90D8               	bcf	status,0,c
  2237  00096E  3610               	rlcf	___awdiv@divisor,f,c
  2238  000970  3611               	rlcf	___awdiv@divisor+1,f,c
  2239  000972  2A12               	incf	___awdiv@counter,f,c
  2240  000974                     l1813:
  2241  000974  AE11               	btfss	___awdiv@divisor+1,7,c
  2242  000976  D7FA               	goto	l1811
  2243  000978                     u1210:
  2244  000978  90D8               	bcf	status,0,c
  2245  00097A  3614               	rlcf	___awdiv@quotient,f,c
  2246  00097C  3615               	rlcf	___awdiv@quotient+1,f,c
  2247  00097E  5010               	movf	___awdiv@divisor,w,c
  2248  000980  5C0E               	subwf	___awdiv@dividend,w,c
  2249  000982  5011               	movf	___awdiv@divisor+1,w,c
  2250  000984  580F               	subwfb	___awdiv@dividend+1,w,c
  2251  000986  A0D8               	btfss	status,0,c
  2252  000988  D005               	goto	l1823
  2253  00098A  5010               	movf	___awdiv@divisor,w,c
  2254  00098C  5E0E               	subwf	___awdiv@dividend,f,c
  2255  00098E  5011               	movf	___awdiv@divisor+1,w,c
  2256  000990  5A0F               	subwfb	___awdiv@dividend+1,f,c
  2257  000992  8014               	bsf	___awdiv@quotient,0,c
  2258  000994                     l1823:
  2259  000994  90D8               	bcf	status,0,c
  2260  000996  3211               	rrcf	___awdiv@divisor+1,f,c
  2261  000998  3210               	rrcf	___awdiv@divisor,f,c
  2262  00099A  2E12               	decfsz	___awdiv@counter,f,c
  2263  00099C  D7ED               	goto	u1210
  2264  00099E                     l1827:
  2265  00099E  5013               	movf	___awdiv@sign,w,c
  2266  0009A0  B4D8               	btfsc	status,2,c
  2267  0009A2  D004               	goto	l1831
  2268  0009A4  6C14               	negf	___awdiv@quotient,c
  2269  0009A6  1E15               	comf	___awdiv@quotient+1,f,c
  2270  0009A8  B0D8               	btfsc	status,0,c
  2271  0009AA  2A15               	incf	___awdiv@quotient+1,f,c
  2272  0009AC                     l1831:
  2273  0009AC  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  2274  0009B0  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  2275  0009B4  0012               	return		;funcret
  2276  0009B6                     __end_of___awdiv:
  2277                           	opt callstack 0
  2278                           
  2279 ;; *************** function _display_RFID *****************
  2280 ;; Defined at:
  2281 ;;		line 109 in file "RFID.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  dataBuf         2   12[COMRAM] PTR volatile unsigned ch
  2284 ;;		 -> RFIDbuf(12), 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  i               2   14[COMRAM] int 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2296 ;;      Params:         2       0       0       0
  2297 ;;      Locals:         2       0       0       0
  2298 ;;      Temps:          0       0       0       0
  2299 ;;      Totals:         4       0       0       0
  2300 ;;Total ram usage:        4 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    6
  2303 ;; This function calls:
  2304 ;;		_ClearLCD
  2305 ;;		_SendLCD
  2306 ;;		_SetLine
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text14
  2313  000C32                     __ptext14:
  2314                           	opt callstack 0
  2315  000C32                     _display_RFID:
  2316                           	opt callstack 24
  2317                           
  2318                           ;RFID.c: 109: void display_RFID(volatile char dataBuf[]);RFID.c: 110: {;RFID.c: 111:    
      +                           ClearLCD();
  2319                           
  2320                           ;incstack = 0
  2321  000C32  ECD6  F006         	call	_ClearLCD	;wreg free
  2322                           
  2323                           ;RFID.c: 112:     SetLine(1);
  2324  000C36  0E01               	movlw	1
  2325  000C38  EC83  F006         	call	_SetLine
  2326                           
  2327                           ;RFID.c: 113:     for(int i=0;i<10;i++)
  2328  000C3C  0E00               	movlw	0
  2329  000C3E  6E10               	movwf	display_RFID@i+1,c
  2330  000C40  0E00               	movlw	0
  2331  000C42  6E0F               	movwf	display_RFID@i,c
  2332  000C44                     l2005:
  2333                           
  2334                           ;RFID.c: 114:     {;RFID.c: 115:         SendLCD(dataBuf[i],1);
  2335  000C44  0E01               	movlw	1
  2336  000C46  6E0A               	movwf	SendLCD@type,c
  2337  000C48  500F               	movf	display_RFID@i,w,c
  2338  000C4A  240D               	addwf	display_RFID@dataBuf,w,c
  2339  000C4C  6ED9               	movwf	fsr2l,c
  2340  000C4E  5010               	movf	display_RFID@i+1,w,c
  2341  000C50  200E               	addwfc	display_RFID@dataBuf+1,w,c
  2342  000C52  6EDA               	movwf	fsr2h,c
  2343  000C54  50DF               	movf	indf2,w,c
  2344  000C56  EC54  F006         	call	_SendLCD
  2345                           
  2346                           ;RFID.c: 116:     }
  2347  000C5A  4A0F               	infsnz	display_RFID@i,f,c
  2348  000C5C  2A10               	incf	display_RFID@i+1,f,c
  2349  000C5E  BE10               	btfsc	display_RFID@i+1,7,c
  2350  000C60  D7F1               	goto	l2005
  2351  000C62  5010               	movf	display_RFID@i+1,w,c
  2352  000C64  E105               	bnz	u1350
  2353  000C66  0E0A               	movlw	10
  2354  000C68  5C0F               	subwf	display_RFID@i,w,c
  2355  000C6A  B0D8               	btfsc	status,0,c
  2356  000C6C  0012               	return	
  2357  000C6E  D7EA               	goto	l2005
  2358  000C70                     u1350:
  2359  000C70  0012               	return		;funcret
  2360  000C72                     __end_of_display_RFID:
  2361                           	opt callstack 0
  2362                           
  2363 ;; *************** function _ClearLCD *****************
  2364 ;; Defined at:
  2365 ;;		line 131 in file "LCDIO.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2379 ;;      Params:         0       0       0       0
  2380 ;;      Locals:         0       0       0       0
  2381 ;;      Temps:          1       0       0       0
  2382 ;;      Totals:         1       0       0       0
  2383 ;;Total ram usage:        1 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    5
  2386 ;; This function calls:
  2387 ;;		_SendLCD
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;;		_display_RFID
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text15
  2395  000DAC                     __ptext15:
  2396                           	opt callstack 0
  2397  000DAC                     _ClearLCD:
  2398                           	opt callstack 24
  2399                           
  2400                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  2401                           
  2402                           ;incstack = 0
  2403  000DAC  0E00               	movlw	0
  2404  000DAE  6E0A               	movwf	SendLCD@type,c
  2405  000DB0  0E01               	movlw	1
  2406  000DB2  EC54  F006         	call	_SendLCD
  2407                           
  2408                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2409  000DB6  0E0D               	movlw	13
  2410  000DB8  6E0C               	movwf	??_ClearLCD& (0+255),c
  2411  000DBA  0EFC               	movlw	252
  2412  000DBC                     u1827:
  2413  000DBC  2EE8               	decfsz	wreg,f,c
  2414  000DBE  D7FE               	bra	u1827
  2415  000DC0  2E0C               	decfsz	??_ClearLCD& (0+255),f,c
  2416  000DC2  D7FC               	bra	u1827
  2417  000DC4  0012               	return		;funcret
  2418  000DC6                     __end_of_ClearLCD:
  2419                           	opt callstack 0
  2420                           
  2421 ;; *************** function _classify_data *****************
  2422 ;; Defined at:
  2423 ;;		line 30 in file "signal_processing.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  raw_data        2    7[COMRAM] int 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      unsigned char 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2437 ;;      Params:         2       0       0       0
  2438 ;;      Locals:         0       0       0       0
  2439 ;;      Temps:          0       0       0       0
  2440 ;;      Totals:         2       0       0       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text16
  2452  000DDE                     __ptext16:
  2453                           	opt callstack 0
  2454  000DDE                     _classify_data:
  2455                           	opt callstack 28
  2456                           
  2457                           ;signal_processing.c: 30: char classify_data(int raw_data);signal_processing.c: 31: {;si
      +                          gnal_processing.c: 32:     if(raw_data > 10000)
  2458                           
  2459                           ;incstack = 0
  2460  000DDE  BE09               	btfsc	classify_data@raw_data+1,7,c
  2461  000DE0  D008               	goto	l1979
  2462  000DE2  0E11               	movlw	17
  2463  000DE4  5C08               	subwf	classify_data@raw_data,w,c
  2464  000DE6  0E27               	movlw	39
  2465  000DE8  5809               	subwfb	classify_data@raw_data+1,w,c
  2466  000DEA  A0D8               	btfss	status,0,c
  2467  000DEC  D002               	goto	l1979
  2468                           
  2469                           ;signal_processing.c: 33:     {;signal_processing.c: 34:         return 1;
  2470  000DEE  0E01               	movlw	1
  2471  000DF0  0012               	return	
  2472  000DF2                     l1979:
  2473                           
  2474                           ;signal_processing.c: 37:     {;signal_processing.c: 38:         return 0;
  2475  000DF2  0E00               	movlw	0
  2476  000DF4  0012               	return		;funcret
  2477  000DF6                     __end_of_classify_data:
  2478                           	opt callstack 0
  2479                           
  2480 ;; *************** function _check_RFID *****************
  2481 ;; Defined at:
  2482 ;;		line 72 in file "RFID.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  dataBuf         2   13[COMRAM] PTR volatile unsigned ch
  2485 ;;		 -> RFIDbuf(12), 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  i               2   35[COMRAM] int 
  2488 ;;  hexBuf         12   17[COMRAM] unsigned char [12]
  2489 ;;  checksum        1   34[COMRAM] unsigned char 
  2490 ;;  byte5           1   33[COMRAM] unsigned char 
  2491 ;;  byte4           1   32[COMRAM] unsigned char 
  2492 ;;  byte3           1   31[COMRAM] unsigned char 
  2493 ;;  byte2           1   30[COMRAM] unsigned char 
  2494 ;;  byte1           1   29[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2504 ;;      Params:         2       0       0       0
  2505 ;;      Locals:        20       0       0       0
  2506 ;;      Temps:          2       0       0       0
  2507 ;;      Totals:        24       0       0       0
  2508 ;;Total ram usage:       24 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    6
  2511 ;; This function calls:
  2512 ;;		_LCD_String
  2513 ;;		_SetLine
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text17
  2520  00050C                     __ptext17:
  2521                           	opt callstack 0
  2522  00050C                     _check_RFID:
  2523                           	opt callstack 24
  2524                           
  2525                           ;RFID.c: 72: void check_RFID(volatile char dataBuf[]);RFID.c: 73: {;RFID.c: 75:     char
      +                           hexBuf[12];;RFID.c: 77:     for(int i=0; i<12;i++)
  2526                           
  2527                           ;incstack = 0
  2528  00050C  0E00               	movlw	0
  2529  00050E  6E25               	movwf	check_RFID@i+1,c
  2530  000510  0E00               	movlw	0
  2531  000512  6E24               	movwf	check_RFID@i,c
  2532  000514                     l2017:
  2533                           
  2534                           ;RFID.c: 78:     {;RFID.c: 79:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  2535  000514  5024               	movf	check_RFID@i,w,c
  2536  000516  240E               	addwf	check_RFID@dataBuf,w,c
  2537  000518  6ED9               	movwf	fsr2l,c
  2538  00051A  5025               	movf	check_RFID@i+1,w,c
  2539  00051C  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2540  00051E  6EDA               	movwf	fsr2h,c
  2541  000520  0E2F               	movlw	47
  2542  000522  64DF               	cpfsgt	indf2,c
  2543  000524  D018               	goto	l2023
  2544  000526  5024               	movf	check_RFID@i,w,c
  2545  000528  240E               	addwf	check_RFID@dataBuf,w,c
  2546  00052A  6ED9               	movwf	fsr2l,c
  2547  00052C  5025               	movf	check_RFID@i+1,w,c
  2548  00052E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2549  000530  6EDA               	movwf	fsr2h,c
  2550  000532  0E3A               	movlw	58
  2551  000534  60DF               	cpfslt	indf2,c
  2552  000536  D00F               	goto	l2023
  2553                           
  2554                           ;RFID.c: 80:         {;RFID.c: 81:             hexBuf[i] = dataBuf[i] - '0';
  2555  000538  0E12               	movlw	low check_RFID@hexBuf
  2556  00053A  2424               	addwf	check_RFID@i,w,c
  2557  00053C  6ED9               	movwf	fsr2l,c
  2558  00053E  0E00               	movlw	high check_RFID@hexBuf
  2559  000540  2025               	addwfc	check_RFID@i+1,w,c
  2560  000542  6EDA               	movwf	fsr2h,c
  2561  000544  5024               	movf	check_RFID@i,w,c
  2562  000546  240E               	addwf	check_RFID@dataBuf,w,c
  2563  000548  6EE1               	movwf	fsr1l,c
  2564  00054A  5025               	movf	check_RFID@i+1,w,c
  2565  00054C  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2566  00054E  6EE2               	movwf	fsr1h,c
  2567  000550  50E7               	movf	indf1,w,c
  2568  000552  0FD0               	addlw	208
  2569  000554  D020               	goto	L1
  2570  000556                     l2023:
  2571  000556  5024               	movf	check_RFID@i,w,c
  2572  000558  240E               	addwf	check_RFID@dataBuf,w,c
  2573  00055A  6ED9               	movwf	fsr2l,c
  2574  00055C  5025               	movf	check_RFID@i+1,w,c
  2575  00055E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2576  000560  6EDA               	movwf	fsr2h,c
  2577  000562  0E40               	movlw	64
  2578  000564  64DF               	cpfsgt	indf2,c
  2579  000566  D018               	goto	l2029
  2580  000568  5024               	movf	check_RFID@i,w,c
  2581  00056A  240E               	addwf	check_RFID@dataBuf,w,c
  2582  00056C  6ED9               	movwf	fsr2l,c
  2583  00056E  5025               	movf	check_RFID@i+1,w,c
  2584  000570  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2585  000572  6EDA               	movwf	fsr2h,c
  2586  000574  0E47               	movlw	71
  2587  000576  60DF               	cpfslt	indf2,c
  2588  000578  D00F               	goto	l2029
  2589                           
  2590                           ;RFID.c: 83:         {;RFID.c: 84:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  2591  00057A  0E12               	movlw	low check_RFID@hexBuf
  2592  00057C  2424               	addwf	check_RFID@i,w,c
  2593  00057E  6ED9               	movwf	fsr2l,c
  2594  000580  0E00               	movlw	high check_RFID@hexBuf
  2595  000582  2025               	addwfc	check_RFID@i+1,w,c
  2596  000584  6EDA               	movwf	fsr2h,c
  2597  000586  5024               	movf	check_RFID@i,w,c
  2598  000588  240E               	addwf	check_RFID@dataBuf,w,c
  2599  00058A  6EE1               	movwf	fsr1l,c
  2600  00058C  5025               	movf	check_RFID@i+1,w,c
  2601  00058E  200F               	addwfc	check_RFID@dataBuf+1,w,c
  2602  000590  6EE2               	movwf	fsr1h,c
  2603  000592  50E7               	movf	indf1,w,c
  2604  000594  0FC9               	addlw	201
  2605  000596                     L1:
  2606  000596  6EDF               	movwf	indf2,c
  2607  000598                     l2029:
  2608                           
  2609                           ;RFID.c: 86:     }
  2610  000598  4A24               	infsnz	check_RFID@i,f,c
  2611  00059A  2A25               	incf	check_RFID@i+1,f,c
  2612  00059C  BE25               	btfsc	check_RFID@i+1,7,c
  2613  00059E  D7BA               	goto	l2017
  2614  0005A0  5025               	movf	check_RFID@i+1,w,c
  2615  0005A2  E104               	bnz	u1400
  2616  0005A4  0E0C               	movlw	12
  2617  0005A6  5C24               	subwf	check_RFID@i,w,c
  2618  0005A8  A0D8               	btfss	status,0,c
  2619  0005AA  D7B4               	goto	l2017
  2620  0005AC                     u1400:
  2621                           
  2622                           ;RFID.c: 88:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  2623  0005AC  5012               	movf	check_RFID@hexBuf,w,c
  2624  0005AE  A4D8               	btfss	status,2,c
  2625  0005B0  D002               	goto	u1410
  2626  0005B2  0E01               	movlw	1
  2627  0005B4  D001               	goto	u1420
  2628  0005B6                     u1410:
  2629  0005B6  0E00               	movlw	0
  2630  0005B8                     u1420:
  2631  0005B8  1013               	iorwf	check_RFID@hexBuf+1,w,c
  2632  0005BA  6E1E               	movwf	check_RFID@byte1,c
  2633                           
  2634                           ;RFID.c: 89:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  2635  0005BC  5014               	movf	check_RFID@hexBuf+2,w,c
  2636  0005BE  A4D8               	btfss	status,2,c
  2637  0005C0  D002               	goto	u1430
  2638  0005C2  0E01               	movlw	1
  2639  0005C4  D001               	goto	u1440
  2640  0005C6                     u1430:
  2641  0005C6  0E00               	movlw	0
  2642  0005C8                     u1440:
  2643  0005C8  1015               	iorwf	check_RFID@hexBuf+3,w,c
  2644  0005CA  6E1F               	movwf	check_RFID@byte2,c
  2645                           
  2646                           ;RFID.c: 90:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  2647  0005CC  5016               	movf	check_RFID@hexBuf+4,w,c
  2648  0005CE  A4D8               	btfss	status,2,c
  2649  0005D0  D002               	goto	u1450
  2650  0005D2  0E01               	movlw	1
  2651  0005D4  D001               	goto	u1460
  2652  0005D6                     u1450:
  2653  0005D6  0E00               	movlw	0
  2654  0005D8                     u1460:
  2655  0005D8  1017               	iorwf	check_RFID@hexBuf+5,w,c
  2656  0005DA  6E20               	movwf	check_RFID@byte3,c
  2657                           
  2658                           ;RFID.c: 91:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  2659  0005DC  5018               	movf	check_RFID@hexBuf+6,w,c
  2660  0005DE  A4D8               	btfss	status,2,c
  2661  0005E0  D002               	goto	u1470
  2662  0005E2  0E01               	movlw	1
  2663  0005E4  D001               	goto	u1480
  2664  0005E6                     u1470:
  2665  0005E6  0E00               	movlw	0
  2666  0005E8                     u1480:
  2667  0005E8  1019               	iorwf	check_RFID@hexBuf+7,w,c
  2668  0005EA  6E21               	movwf	check_RFID@byte4,c
  2669                           
  2670                           ;RFID.c: 92:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  2671  0005EC  501A               	movf	check_RFID@hexBuf+8,w,c
  2672  0005EE  A4D8               	btfss	status,2,c
  2673  0005F0  D002               	goto	u1490
  2674  0005F2  0E01               	movlw	1
  2675  0005F4  D001               	goto	u1500
  2676  0005F6                     u1490:
  2677  0005F6  0E00               	movlw	0
  2678  0005F8                     u1500:
  2679  0005F8  101B               	iorwf	check_RFID@hexBuf+9,w,c
  2680  0005FA  6E22               	movwf	check_RFID@byte5,c
  2681                           
  2682                           ;RFID.c: 93:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  2683  0005FC  501C               	movf	check_RFID@hexBuf+10,w,c
  2684  0005FE  A4D8               	btfss	status,2,c
  2685  000600  D002               	goto	u1510
  2686  000602  0E01               	movlw	1
  2687  000604  D001               	goto	u1520
  2688  000606                     u1510:
  2689  000606  0E00               	movlw	0
  2690  000608                     u1520:
  2691  000608  101D               	iorwf	check_RFID@hexBuf+11,w,c
  2692  00060A  6E23               	movwf	check_RFID@checksum,c
  2693                           
  2694                           ;RFID.c: 96:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  2695  00060C  501E               	movf	check_RFID@byte1,w,c
  2696  00060E  181F               	xorwf	check_RFID@byte2,w,c
  2697  000610  1820               	xorwf	check_RFID@byte3,w,c
  2698  000612  1821               	xorwf	check_RFID@byte4,w,c
  2699  000614  6E10               	movwf	??_check_RFID& (0+255),c
  2700  000616  6A11               	clrf	(??_check_RFID+1)& (0+255),c
  2701  000618  5023               	movf	check_RFID@checksum,w,c
  2702  00061A  1822               	xorwf	check_RFID@byte5,w,c
  2703  00061C  A4D8               	btfss	status,2,c
  2704  00061E  D002               	goto	u1530
  2705  000620  0E01               	movlw	1
  2706  000622  D001               	goto	u1540
  2707  000624                     u1530:
  2708  000624  0E00               	movlw	0
  2709  000626                     u1540:
  2710  000626  1A10               	xorwf	??_check_RFID,f,c
  2711  000628  0E00               	movlw	0
  2712  00062A  1A11               	xorwf	??_check_RFID+1,f,c
  2713  00062C  5010               	movf	??_check_RFID,w,c
  2714  00062E  1011               	iorwf	??_check_RFID+1,w,c
  2715  000630  B4D8               	btfsc	status,2,c
  2716  000632  D00A               	goto	l2039
  2717                           
  2718                           ;RFID.c: 97:     {;RFID.c: 99:         SetLine(2);
  2719  000634  0E02               	movlw	2
  2720  000636  EC83  F006         	call	_SetLine
  2721                           
  2722                           ;RFID.c: 100:         LCD_String("CHECKSUM PASSED");
  2723  00063A  0E11               	movlw	low STR_2
  2724  00063C  6E0C               	movwf	LCD_String@string,c
  2725  00063E  0E03               	movlw	high STR_2
  2726  000640  6E0D               	movwf	LCD_String@string+1,c
  2727  000642  EC39  F006         	call	_LCD_String	;wreg free
  2728                           
  2729                           ;RFID.c: 101:     }
  2730  000646  0012               	return	
  2731  000648                     l2039:
  2732                           
  2733                           ;RFID.c: 104:         SetLine(2);
  2734  000648  0E02               	movlw	2
  2735  00064A  EC83  F006         	call	_SetLine
  2736                           
  2737                           ;RFID.c: 105:         LCD_String("CHECKSUM FAILED");
  2738  00064E  0E01               	movlw	low STR_3
  2739  000650  6E0C               	movwf	LCD_String@string,c
  2740  000652  0E03               	movlw	high STR_3
  2741  000654  6E0D               	movwf	LCD_String@string+1,c
  2742  000656  EC39  F006         	call	_LCD_String	;wreg free
  2743  00065A  0012               	return		;funcret
  2744  00065C                     __end_of_check_RFID:
  2745                           	opt callstack 0
  2746                           
  2747 ;; *************** function _SetLine *****************
  2748 ;; Defined at:
  2749 ;;		line 107 in file "LCDIO.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  line            1    wreg     unsigned char 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  line            1   11[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2763 ;;      Params:         0       0       0       0
  2764 ;;      Locals:         1       0       0       0
  2765 ;;      Temps:          0       0       0       0
  2766 ;;      Totals:         1       0       0       0
  2767 ;;Total ram usage:        1 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    5
  2770 ;; This function calls:
  2771 ;;		_SendLCD
  2772 ;; This function is called by:
  2773 ;;		_check_RFID
  2774 ;;		_display_RFID
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text18
  2779  000D06                     __ptext18:
  2780                           	opt callstack 0
  2781  000D06                     _SetLine:
  2782                           	opt callstack 24
  2783                           
  2784                           ;incstack = 0
  2785                           ;SetLine@line stored from wreg
  2786  000D06  6E0C               	movwf	SetLine@line,c
  2787                           
  2788                           ;LCDIO.c: 109:     if(line == 1){
  2789  000D08  040C               	decf	SetLine@line,w,c
  2790  000D0A  A4D8               	btfss	status,2,c
  2791  000D0C  D005               	goto	l1915
  2792                           
  2793                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  2794  000D0E  0E00               	movlw	0
  2795  000D10  6E0A               	movwf	SendLCD@type,c
  2796  000D12  0E80               	movlw	128
  2797  000D14  EC54  F006         	call	_SendLCD
  2798  000D18                     l1915:
  2799                           
  2800                           ;LCDIO.c: 113:     if(line == 2){
  2801  000D18  0E02               	movlw	2
  2802  000D1A  180C               	xorwf	SetLine@line,w,c
  2803  000D1C  A4D8               	btfss	status,2,c
  2804  000D1E  D005               	goto	l1919
  2805                           
  2806                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  2807  000D20  0E00               	movlw	0
  2808  000D22  6E0A               	movwf	SendLCD@type,c
  2809  000D24  0EC0               	movlw	192
  2810  000D26  EC54  F006         	call	_SendLCD
  2811  000D2A                     l1919:
  2812                           
  2813                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2814  000D2A  0E21               	movlw	33
  2815  000D2C                     u1837:
  2816  000D2C  2EE8               	decfsz	wreg,f,c
  2817  000D2E  D7FE               	bra	u1837
  2818  000D30  F000               	nop	
  2819  000D32  0012               	return		;funcret
  2820  000D34                     __end_of_SetLine:
  2821                           	opt callstack 0
  2822                           
  2823 ;; *************** function _LCD_String *****************
  2824 ;; Defined at:
  2825 ;;		line 119 in file "LCDIO.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  string          2   11[COMRAM] PTR unsigned char 
  2828 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2840 ;;      Params:         2       0       0       0
  2841 ;;      Locals:         0       0       0       0
  2842 ;;      Temps:          0       0       0       0
  2843 ;;      Totals:         2       0       0       0
  2844 ;;Total ram usage:        2 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    5
  2847 ;; This function calls:
  2848 ;;		_SendLCD
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;;		_check_RFID
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text19
  2856  000C72                     __ptext19:
  2857                           	opt callstack 0
  2858  000C72                     _LCD_String:
  2859                           	opt callstack 24
  2860                           
  2861                           ;LCDIO.c: 121: while(*string != 0){
  2862                           
  2863                           ;incstack = 0
  2864  000C72  D010               	goto	l1901
  2865  000C74                     l1895:
  2866                           
  2867                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2868  000C74  0E01               	movlw	1
  2869  000C76  6E0A               	movwf	SendLCD@type,c
  2870  000C78  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2871  000C7C  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2872  000C80                     	if	0	;tblptru may be non-zero
  2873  000C80                     	endif
  2874  000C80                     	if	0	;tblptru may be non-zero
  2875  000C80                     	endif
  2876  000C80  0008               	tblrd		*
  2877  000C82  50F5               	movf	tablat,w,c
  2878  000C84  EC54  F006         	call	_SendLCD
  2879  000C88  4A0C               	infsnz	LCD_String@string,f,c
  2880  000C8A  2A0D               	incf	LCD_String@string+1,f,c
  2881                           
  2882                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2883  000C8C  0E21               	movlw	33
  2884  000C8E                     u1847:
  2885  000C8E  2EE8               	decfsz	wreg,f,c
  2886  000C90  D7FE               	bra	u1847
  2887  000C92  F000               	nop	
  2888  000C94                     l1901:
  2889                           
  2890                           ;LCDIO.c: 121: while(*string != 0){
  2891  000C94  C00C  FFF6         	movff	LCD_String@string,tblptrl
  2892  000C98  C00D  FFF7         	movff	LCD_String@string+1,tblptrh
  2893  000C9C                     	if	0	;tblptru may be non-zero
  2894  000C9C                     	endif
  2895  000C9C                     	if	0	;tblptru may be non-zero
  2896  000C9C                     	endif
  2897  000C9C  0008               	tblrd		*
  2898  000C9E  50F5               	movf	tablat,w,c
  2899  000CA0  0900               	iorlw	0
  2900  000CA2  B4D8               	btfsc	status,2,c
  2901  000CA4  0012               	return	
  2902  000CA6  D7E6               	goto	l1895
  2903  000CA8                     __end_of_LCD_String:
  2904                           	opt callstack 0
  2905                           
  2906 ;; *************** function _SendLCD *****************
  2907 ;; Defined at:
  2908 ;;		line 44 in file "LCDIO.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  Byte            1    wreg     unsigned char 
  2911 ;;  type            1    9[COMRAM] unsigned char 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  Byte            1   10[COMRAM] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2923 ;;      Params:         1       0       0       0
  2924 ;;      Locals:         1       0       0       0
  2925 ;;      Temps:          0       0       0       0
  2926 ;;      Totals:         2       0       0       0
  2927 ;;Total ram usage:        2 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    4
  2930 ;; This function calls:
  2931 ;;		_LCDout
  2932 ;; This function is called by:
  2933 ;;		_init_LCD
  2934 ;;		_SetLine
  2935 ;;		_LCD_String
  2936 ;;		_ClearLCD
  2937 ;;		_display_RFID
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text20
  2942  000CA8                     __ptext20:
  2943                           	opt callstack 0
  2944  000CA8                     _SendLCD:
  2945                           	opt callstack 24
  2946                           
  2947                           ;incstack = 0
  2948                           ;SendLCD@Byte stored from wreg
  2949  000CA8  6E0B               	movwf	SendLCD@Byte,c
  2950                           
  2951                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  2952  000CAA  B00A               	btfsc	SendLCD@type,0,c
  2953  000CAC  D002               	bra	u1175
  2954  000CAE  9E89               	bcf	3977,7,c	;volatile
  2955  000CB0  D001               	bra	u1176
  2956  000CB2                     u1175:
  2957  000CB2  8E89               	bsf	3977,7,c	;volatile
  2958  000CB4                     u1176:
  2959                           
  2960                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  2961  000CB4  380B               	swapf	SendLCD@Byte,w,c
  2962  000CB6  0B0F               	andlw	15
  2963  000CB8  0B0F               	andlw	15
  2964  000CBA  EC1C  F005         	call	_LCDout
  2965                           
  2966                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  2967  000CBE  0E06               	movlw	6
  2968  000CC0                     u1857:
  2969  000CC0  2EE8               	decfsz	wreg,f,c
  2970  000CC2  D7FE               	bra	u1857
  2971  000CC4  D000               	nop2	
  2972                           
  2973                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  2974  000CC6  500B               	movf	SendLCD@Byte,w,c
  2975  000CC8  0B0F               	andlw	15
  2976  000CCA  EC1C  F005         	call	_LCDout
  2977                           
  2978                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2979  000CCE  0E21               	movlw	33
  2980  000CD0                     u1867:
  2981  000CD0  2EE8               	decfsz	wreg,f,c
  2982  000CD2  D7FE               	bra	u1867
  2983  000CD4  F000               	nop	
  2984  000CD6  0012               	return		;funcret
  2985  000CD8                     __end_of_SendLCD:
  2986                           	opt callstack 0
  2987                           
  2988 ;; *************** function _LCDout *****************
  2989 ;; Defined at:
  2990 ;;		line 31 in file "LCDIO.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  number          1    wreg     unsigned char 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  number          1    8[COMRAM] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3004 ;;      Params:         0       0       0       0
  3005 ;;      Locals:         1       0       0       0
  3006 ;;      Temps:          1       0       0       0
  3007 ;;      Totals:         2       0       0       0
  3008 ;;Total ram usage:        2 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    3
  3011 ;; This function calls:
  3012 ;;		_E_TOG
  3013 ;; This function is called by:
  3014 ;;		_SendLCD
  3015 ;;		_init_LCD
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text21
  3020  000A38                     __ptext21:
  3021                           	opt callstack 0
  3022  000A38                     _LCDout:
  3023                           	opt callstack 24
  3024                           
  3025                           ;incstack = 0
  3026                           ;LCDout@number stored from wreg
  3027  000A38  6E09               	movwf	LCDout@number,c
  3028                           
  3029                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3030  000A3A  C009  F008         	movff	LCDout@number,??_LCDout
  3031  000A3E  0E01               	movlw	1
  3032  000A40  1608               	andwf	??_LCDout,f,c
  3033  000A42  508B               	movf	3979,w,c	;volatile
  3034  000A44  1808               	xorwf	??_LCDout,w,c
  3035  000A46  0BFE               	andlw	-2
  3036  000A48  1808               	xorwf	??_LCDout,w,c
  3037  000A4A  6E8B               	movwf	3979,c	;volatile
  3038                           
  3039                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3040  000A4C  C009  F008         	movff	LCDout@number,??_LCDout
  3041  000A50  90D8               	bcf	status,0,c
  3042  000A52  3208               	rrcf	??_LCDout,f,c
  3043  000A54  0E01               	movlw	1
  3044  000A56  1608               	andwf	??_LCDout,f,c
  3045  000A58  4608               	rlncf	??_LCDout,f,c
  3046  000A5A  4608               	rlncf	??_LCDout,f,c
  3047  000A5C  4608               	rlncf	??_LCDout,f,c
  3048  000A5E  508B               	movf	3979,w,c	;volatile
  3049  000A60  1808               	xorwf	??_LCDout,w,c
  3050  000A62  0BF7               	andlw	-9
  3051  000A64  1808               	xorwf	??_LCDout,w,c
  3052  000A66  6E8B               	movwf	3979,c	;volatile
  3053                           
  3054                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3055  000A68  C009  F008         	movff	LCDout@number,??_LCDout
  3056  000A6C  90D8               	bcf	status,0,c
  3057  000A6E  3208               	rrcf	??_LCDout,f,c
  3058  000A70  90D8               	bcf	status,0,c
  3059  000A72  3208               	rrcf	??_LCDout,f,c
  3060  000A74  0E01               	movlw	1
  3061  000A76  1608               	andwf	??_LCDout,f,c
  3062  000A78  508C               	movf	3980,w,c	;volatile
  3063  000A7A  1808               	xorwf	??_LCDout,w,c
  3064  000A7C  0BFE               	andlw	-2
  3065  000A7E  1808               	xorwf	??_LCDout,w,c
  3066  000A80  6E8C               	movwf	3980,c	;volatile
  3067                           
  3068                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3069  000A82  C009  F008         	movff	LCDout@number,??_LCDout
  3070  000A86  90D8               	bcf	status,0,c
  3071  000A88  3208               	rrcf	??_LCDout,f,c
  3072  000A8A  90D8               	bcf	status,0,c
  3073  000A8C  3208               	rrcf	??_LCDout,f,c
  3074  000A8E  90D8               	bcf	status,0,c
  3075  000A90  3208               	rrcf	??_LCDout,f,c
  3076  000A92  0E01               	movlw	1
  3077  000A94  1608               	andwf	??_LCDout,f,c
  3078  000A96  4608               	rlncf	??_LCDout,f,c
  3079  000A98  508C               	movf	3980,w,c	;volatile
  3080  000A9A  1808               	xorwf	??_LCDout,w,c
  3081  000A9C  0BFD               	andlw	-3
  3082  000A9E  1808               	xorwf	??_LCDout,w,c
  3083  000AA0  6E8C               	movwf	3980,c	;volatile
  3084                           
  3085                           ;LCDIO.c: 39:  E_TOG();
  3086  000AA2  ECFB  F006         	call	_E_TOG	;wreg free
  3087                           
  3088                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3089  000AA6  0E03               	movlw	3
  3090  000AA8                     u1877:
  3091  000AA8  2EE8               	decfsz	wreg,f,c
  3092  000AAA  D7FE               	bra	u1877
  3093  000AAC  F000               	nop	
  3094  000AAE  0012               	return		;funcret
  3095  000AB0                     __end_of_LCDout:
  3096                           	opt callstack 0
  3097                           
  3098 ;; *************** function _E_TOG *****************
  3099 ;; Defined at:
  3100 ;;		line 23 in file "LCDIO.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3114 ;;      Params:         0       0       0       0
  3115 ;;      Locals:         0       0       0       0
  3116 ;;      Temps:          0       0       0       0
  3117 ;;      Totals:         0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    2
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_LCDout
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text22
  3129  000DF6                     __ptext22:
  3130                           	opt callstack 0
  3131  000DF6                     _E_TOG:
  3132                           	opt callstack 24
  3133                           
  3134                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3135                           
  3136                           ;incstack = 0
  3137  000DF6  8C89               	bsf	3977,6,c	;volatile
  3138                           
  3139                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3140  000DF8  0E03               	movlw	3
  3141  000DFA                     u1887:
  3142  000DFA  2EE8               	decfsz	wreg,f,c
  3143  000DFC  D7FE               	bra	u1887
  3144  000DFE  F000               	nop	
  3145                           
  3146                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3147  000E00  9C89               	bcf	3977,6,c	;volatile
  3148  000E02  0012               	return		;funcret
  3149  000E04                     __end_of_E_TOG:
  3150                           	opt callstack 0
  3151                           
  3152 ;; *************** function _InterruptHandlerHigh *****************
  3153 ;; Defined at:
  3154 ;;		line 59 in file "main.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  throwaway       1    0        unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       0       0       0
  3169 ;;      Locals:         1       0       0       0
  3170 ;;      Temps:          2       0       0       0
  3171 ;;      Totals:         3       0       0       0
  3172 ;;Total ram usage:        3 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    1
  3175 ;; This function calls:
  3176 ;;		_processRFID
  3177 ;; This function is called by:
  3178 ;;		Interrupt level 2
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	intcode
  3183  000008                     __pintcode:
  3184                           	opt callstack 0
  3185  000008                     _InterruptHandlerHigh:
  3186                           	opt callstack 24
  3187                           
  3188                           ;incstack = 0
  3189  000008  8239               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3190  00000A  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3191  00000E  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3192                           
  3193                           ;main.c: 63:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3194  000012  AA9E               	btfss	3998,5,c	;volatile
  3195  000014  D00D               	goto	i2l71
  3196  000016  042C               	decf	_robot_mode,w,c	;volatile
  3197  000018  A4D8               	btfss	status,2,c
  3198  00001A  D00A               	goto	i2l71
  3199                           
  3200                           ;main.c: 64:     {;main.c: 66:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3201  00001C  0E2D               	movlw	low _RFIDbuf
  3202  00001E  6E01               	movwf	processRFID@RFIDbuf,c
  3203  000020  0E00               	movlw	high _RFIDbuf
  3204  000022  6E02               	movwf	processRFID@RFIDbuf+1,c
  3205  000024  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3206  000028  ECF3  F005         	call	_processRFID	;wreg free
  3207  00002C  6E2B               	movwf	_RFID_flag,c	;volatile
  3208                           
  3209                           ;main.c: 67:     }
  3210  00002E  D001               	goto	i2l73
  3211  000030                     i2l71:
  3212  000030  50AE               	movf	4014,w,c	;volatile
  3213  000032                     i2l73:
  3214  000032  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3215  000036  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3216  00003A  9239               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3217  00003C  0011               	retfie		f
  3218  00003E                     __end_of_InterruptHandlerHigh:
  3219                           	opt callstack 0
  3220                           
  3221 ;; *************** function _processRFID *****************
  3222 ;; Defined at:
  3223 ;;		line 34 in file "RFID.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3226 ;;		 -> RFIDbuf(12), 
  3227 ;;  latestChar      1    2[COMRAM] unsigned char 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  i               1    3[COMRAM] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  1    wreg      unsigned char 
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3239 ;;      Params:         3       0       0       0
  3240 ;;      Locals:         1       0       0       0
  3241 ;;      Temps:          0       0       0       0
  3242 ;;      Totals:         4       0       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_InterruptHandlerHigh
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text24
  3253  000BE6                     __ptext24:
  3254                           	opt callstack 0
  3255  000BE6                     _processRFID:
  3256                           	opt callstack 24
  3257                           
  3258                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  3259                           
  3260                           ;incstack = 0
  3261  000BE6  0E03               	movlw	3
  3262  000BE8  1803               	xorwf	processRFID@latestChar,w,c
  3263  000BEA  A4D8               	btfss	status,2,c
  3264  000BEC  D002               	goto	i2l1521
  3265                           
  3266                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  3267  000BEE  0E01               	movlw	1
  3268  000BF0  0012               	return	
  3269  000BF2                     i2l1521:
  3270                           
  3271                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  3272  000BF2  0E02               	movlw	2
  3273  000BF4  1803               	xorwf	processRFID@latestChar,w,c
  3274  000BF6  A4D8               	btfss	status,2,c
  3275  000BF8  D012               	goto	i2l1541
  3276                           
  3277                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  3278  000BFA  0E00               	movlw	0
  3279  000BFC  6E2A               	movwf	processRFID@position_in_buf,c
  3280                           
  3281                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  3282  000BFE  0E00               	movlw	0
  3283  000C00  6E04               	movwf	processRFID@i,c
  3284  000C02                     i2l1529:
  3285                           
  3286                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  3287  000C02  5004               	movf	processRFID@i,w,c
  3288  000C04  2401               	addwf	processRFID@RFIDbuf,w,c
  3289  000C06  6ED9               	movwf	fsr2l,c
  3290  000C08  0E00               	movlw	0
  3291  000C0A  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3292  000C0C  6EDA               	movwf	fsr2h,c
  3293  000C0E  0E00               	movlw	0
  3294  000C10  6EDF               	movwf	indf2,c
  3295                           
  3296                           ;RFID.c: 56:            }
  3297  000C12  2A04               	incf	processRFID@i,f,c
  3298  000C14  0E0B               	movlw	11
  3299  000C16  6404               	cpfsgt	processRFID@i,c
  3300  000C18  D7F4               	goto	i2l1529
  3301  000C1A                     i2u76_40:
  3302                           
  3303                           ;RFID.c: 58:            return 0;
  3304  000C1A  0E00               	movlw	0
  3305  000C1C  0012               	return	
  3306  000C1E                     i2l1541:
  3307                           
  3308                           ;RFID.c: 62:         {;RFID.c: 63:             RFIDbuf[position_in_buf] = latestChar;
  3309  000C1E  502A               	movf	processRFID@position_in_buf,w,c
  3310  000C20  2401               	addwf	processRFID@RFIDbuf,w,c
  3311  000C22  6ED9               	movwf	fsr2l,c
  3312  000C24  0E00               	movlw	0
  3313  000C26  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  3314  000C28  6EDA               	movwf	fsr2h,c
  3315  000C2A  C003  FFDF         	movff	processRFID@latestChar,indf2
  3316                           
  3317                           ;RFID.c: 64:             position_in_buf++;
  3318  000C2E  2A2A               	incf	processRFID@position_in_buf,f,c
  3319  000C30  D7F4               	goto	i2u76_40
  3320  000C32                     __end_of_processRFID:
  3321                           	opt callstack 0
  3322                           
  3323                           	psect	rparam
  3324  0000                     
  3325                           	psect	temp
  3326  000039                     btemp:
  3327                           	opt callstack 0
  3328  000039                     	ds	1
  3329  0000                     int$flags	set	btemp
  3330  0000                     wtemp8	set	btemp+1
  3331  0000                     ttemp5	set	btemp+1
  3332  0000                     ttemp6	set	btemp+4
  3333  0000                     ttemp7	set	btemp+8
  3334                           tosu	equ	0xFFF
  3335                           tosh	equ	0xFFE
  3336                           tosl	equ	0xFFD
  3337                           stkptr	equ	0xFFC
  3338                           pclatu	equ	0xFFB
  3339                           pclath	equ	0xFFA
  3340                           pcl	equ	0xFF9
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           prodh	equ	0xFF4
  3346                           prodl	equ	0xFF3
  3347                           indf0	equ	0xFEF
  3348                           postinc0	equ	0xFEE
  3349                           postdec0	equ	0xFED
  3350                           preinc0	equ	0xFEC
  3351                           plusw0	equ	0xFEB
  3352                           fsr0h	equ	0xFEA
  3353                           fsr0l	equ	0xFE9
  3354                           wreg	equ	0xFE8
  3355                           indf1	equ	0xFE7
  3356                           postinc1	equ	0xFE6
  3357                           postdec1	equ	0xFE5
  3358                           preinc1	equ	0xFE4
  3359                           plusw1	equ	0xFE3
  3360                           fsr1h	equ	0xFE2
  3361                           fsr1l	equ	0xFE1
  3362                           bsr	equ	0xFE0
  3363                           indf2	equ	0xFDF
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           preinc2	equ	0xFDC
  3367                           plusw2	equ	0xFDB
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      56
    BANK0           160     35      35
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S326DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S326DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveBackward
    _main->_moveForward
    _main->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _moveForward->_setMotorPWM
    _moveBackward->_setMotorPWM
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _ClearLCD->_SendLCD
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                37    37      0   25899
                                             39 COMRAM     2     2      0
                                              0 BANK0     35    35      0
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                      _classify_data
                       _display_RFID
                  _init_motor_struct
                       _moveBackward
                        _moveForward
                              _setup
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 8     2      6    2719
                                             30 COMRAM     8     2      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1321
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1169
                                             11 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _moveForward                                          9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBackward                                         9     3      6    2750
                                             30 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2778
                                             30 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    2164
                                             21 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     352
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     565
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _display_RFID                                         4     2      2    3525
                                             12 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1081
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _classify_data                                        2     0      2     121
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _check_RFID                                          24    22      2    3834
                                             13 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1143
                                             11 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1416
                                             11 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1081
                                              9 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                              7 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (7) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClearLCD
     _SendLCD
       _LCDout
         _E_TOG
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _check_RFID
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _classify_data
   _display_RFID
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveBackward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveForward
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnRight
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      23       5       21.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      38       1       59.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B       3        0.0%
DATA                 0      0      5B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 03 16:41:08 2020

                           l63 0CDC                             l80 03C2                             l90 0470  
                           l91 0460                             l86 03EC                   ___awdiv@sign 0013  
          ___wmul@multiplicand 000A                  ?_display_RFID 000D                    ?_LCD_String 000C  
                          l135 0724            display_RFID@dataBuf 000D                            wreg 000FE8  
                 processRFID@i 0004                   __CFG_LVP$OFF 000000                           l2005 0C44  
                         l2023 0556                           l2017 0514                           l2121 0488  
                         l2029 0598                           l2125 04AE                           l2109 0422  
                         l2039 0648                           l2047 0B4E                           l2055 0B82  
                         l2063 0BAE                           l2143 04FE                           l2135 04C8  
                         l2059 0BA0                           l2083 036C                           l2087 0390  
                         l1811 096C                           l1901 0C94                           l1813 0974  
                         l1805 0956                           l1831 09AC                           l1823 0994  
                         l1915 0D18                           l1827 099E                           l1909 06FC  
                         l1919 0D2A                           l1895 0C74                           l1799 0946  
                         l1959 09E0                           l1969 0A22                           l1979 0DF2  
                         l1987 0ADA                           l1995 0B0E                           STR_1 0321  
                         STR_2 0311                           STR_3 0301                           u1210 0978  
                         u1400 05AC                           u1410 05B6                           u1500 05F8  
                         u1420 05B8                           u1510 0606                           u1430 05C6  
                         u1350 0C70                           _LATB 000F8A                           u1175 0CB2  
                         u1176 0CB4                           u1520 0608                           u1440 05C8  
                         u1264 06D0                           u1600 03C8                           u1265 06CC  
                         u1530 0624                           u1450 05D6                           u1274 0718  
                         u1275 0714                           u1540 0626                           u1460 05D8  
                         u1285 0770                           u1470 05E6                           u1630 0428  
                         u1480 05E8                           u1490 05F6                           u1707 04D2  
                         u1717 0A16                           u1670 04F6                           u1807 0918  
                         u1727 0888                           u1680 0502                           u1817 092A  
                         u1737 089E                           u1827 0DBC                           u1747 08AE  
                         u1837 0D2C                           u1757 08BC                           u1847 0C8E  
                         u1767 08CA                           u1857 0CC0                           u1777 08DC  
                         u1867 0CD0                           u1787 08EE                           u1877 0AA8  
                         u1797 0904                           u1887 0DFA                           i2l71 0030  
                         i2l73 0032                           _main 0332                           fsr2h 000FDA  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0039                           _stop 0B98  
                         prodh 000FF4                           prodl 000FF3                           start 003E  
                 ___param_bank 000000                __end_of_SendLCD 0CD8                __end_of_SetLine 0D34  
               ??_display_RFID 000F                          ?_main 0001            main@searching_speed 0060  
              __end_of___awdiv 09B6                          ?_stop 001F                ___awdiv@divisor 0010  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0012  
                        _RCREG 000FAE                          _E_TOG 0DF6                          _SPBRG 000FAF  
                 ?_init_sensor 0001                   main@raw_data 0062                __end_of_initPWM 0DAC  
                        _setup 0CD8                          main@i 0068                          tablat 000FF5  
           processRFID@RFIDbuf 0001                          ttemp5 003A                          ttemp6 003D  
                        ttemp7 0041                          stop@i 0025                          status 000FD8  
                        wtemp8 003A            __size_of_LCD_String 0036               __end_of_ClearLCD 0DC6  
         moveForward@max_power 0023                 __CFG_MCLRE$OFF 000000                __initialization 0D5A  
                 __end_of_main 050C                   __end_of_stop 0BE6                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000C                         ??_main 0028                         ??_stop 0025  
                __activetblptr 000001                         ?_E_TOG 0001                   ?_setMotorPWM 0016  
                 ?_moveForward 001F               ___awdiv@dividend 000E                         ?_setup 0001  
                       _ANSEL0 000FB8                         _ANSEL1 000FB9                         i2l1521 0BF2  
                       i2l1541 0C1E                         i2l1529 0C02                         _LCDout 0A38  
                  SendLCD@Byte 000B                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000A            main@beacon_location 006C  
                    ??_SendLCD 000B                      ??_SetLine 000C                  display_RFID@i 000F  
                       ___wmul 0D34                      ??___awdiv 0012               __end_of_init_LCD 0932  
          init_motor_struct@mL 001F            init_motor_struct@mR 0021                         clear_0 0D60  
             ___awdiv@quotient 0014                      ??_initPWM 000A                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 001F                         stop@mR 0021                   ?_processRFID 0001  
            _init_motor_struct 0780           __end_of_display_RFID 0C72             ?_init_motor_struct 001F  
                   __accesstop 0060        __end_of__initialization 0D66                  ___rparam_used 000001  
                  SetLine@line 000C                  __end_of_E_TOG 0E04            ??_init_motor_struct 0023  
               __pcstackCOMRAM 0001                  __end_of_setup 0D06                   ??_LCD_String 000E  
                      ??_E_TOG 0008  __size_of_InterruptHandlerHigh 0036                      ?_ClearLCD 0001  
    __end_of_init_motor_struct 086A          __end_of_classify_data 0DF6                     _check_RFID 050C  
         __size_of_init_sensor 0018                        ??_setup 000D                  ?_moveBackward 001F  
                      ?_LCDout 0001             __size_of_init_RFID 001A             __end_of_LCD_String 0CA8  
                      ?___wmul 0008                        _CAP1CON 000F63                        _DFLTCON 000F60  
                   ??_ClearLCD 000C                        _RFIDbuf 002D                        i2u76_40 0C1A  
                      _PWMCON0 000F6F                        _PWMCON1 000F6E                 ??_moveBackward 0025  
         __size_of_setMotorPWM 0124           __size_of_moveForward 0074                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0026             __size_of_turnRight 0082  
                      _SendLCD 0CA8                        __Hparam 0000                        _SetLine 0D06  
                      __Lparam 0000          processRFID@latestChar 0003                        ___awdiv 0932  
              __size_of___wmul 0026                   __psmallconst 0300               initPWM@PWMperiod 0008  
                      __pcinit 0D5A                        __ramtop 0300                        __ptext0 0332  
                      __ptext1 09B6                        __ptext2 0B98                        __ptext3 0CD8  
                      __ptext4 0DC6                        __ptext5 0D78                        __ptext6 086A  
                      __ptext7 0D92                        __ptext8 0AB0                        __ptext9 0B24  
            __end_of_init_RFID 0D92               check_RFID@hexBuf 0012                        _initPWM 0D92  
                 LCDout@number 0009     __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040  
            stop@initial_speed 0023                    ?_check_RFID 000E           end_of_initialization 0D66  
           setMotorPWM@PWMduty 001D                     ??_init_LCD 000C           __size_of_processRFID 004C  
                    _RFID_flag 002B                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                     _robot_mode 002C  
                 _display_RFID 0C32                      _PORTDbits 000F83              __end_of_turnRight 0A38  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                    _TRISDbits 000F95                  moveForward@mL 001F                  moveForward@mR 0021  
               __end_of_LCDout 0AB0                      _TXSTAbits 000FAC                     main@motorL 0071  
                   main@motorR 007A           __end_of_moveBackward 0B98            __size_of_check_RFID 0150  
               __end_of___wmul 0D5A                    _BAUDCONbits 000FAA            start_initialization 0D5A  
            __size_of_ClearLCD 001A          classify_data@raw_data 0008                       ??_LCDout 0008  
        moveBackward@max_power 0023   __end_of_InterruptHandlerHigh 003E                       ??___wmul 000C  
           turnRight@max_power 0023                    __pbssCOMRAM 002A                  ??_init_sensor 0008  
                __pcstackBANK0 0060              __size_of_init_LCD 00C8                       ?_SendLCD 000A  
                     ?_SetLine 0001                      __pintcode 0008                       ?___awdiv 000E  
       __size_of_classify_data 0018             check_RFID@checksum 0023                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       ?_initPWM 0008                    __smallconst 0300  
               __size_of_E_TOG 000E                      _init_RFID 0D78                  ??_setMotorPWM 0018  
                ??_moveForward 0025                   ??_check_RFID 0010                 __size_of_setup 002E  
              check_RFID@byte1 001E                check_RFID@byte2 001F                check_RFID@byte3 0020  
              check_RFID@byte4 0021                check_RFID@byte5 0022            __end_of_init_sensor 0DDE  
               ___wmul@product 000C                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
        __size_of_moveBackward 0074                    turnRight@mL 001F                    turnRight@mR 0021  
                     _PIR1bits 000F9E                       _RCONbits 000FD0             __end_of_check_RFID 065C  
                    main@i_502 006D              ___wmul@multiplier 0008                   setMotorPWM@m 0016  
                 moveForward@i 0026               main@moving_speed 006F           _InterruptHandlerHigh 0008  
                     _ClearLCD 0DAC                     ?_init_RFID 0001                      _turnRight 09B6  
                ??_processRFID 0004                  _classify_data 0DDE                 moveBackward@mL 001F  
               moveBackward@mR 0021                   _moveBackward 0B24            __end_of_setMotorPWM 0780  
          __end_of_moveForward 0B24                    check_RFID@i 0024                       __Hrparam 0000  
             __size_of_SendLCD 0030                       __Lrparam 0000               __size_of_SetLine 002E  
                 __Lsmallconst 0300               __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001  
             __size_of_initPWM 001A                    _init_sensor 0DC6                 ?_classify_data 0008  
            check_RFID@dataBuf 000E                     ?_turnRight 001F                       __ptext10 0780  
                     __ptext11 065C                       __ptext20 0CA8                       __ptext12 0D34  
                     __ptext21 0A38                       __ptext13 0932                       __ptext22 0DF6  
                     __ptext14 0C32                       __ptext15 0DAC                       __ptext24 0BE6  
                     __ptext16 0DDE                       __ptext17 050C                       __ptext18 0D06  
                     __ptext19 0C72                       _init_LCD 086A                  __size_of_main 01DA  
                __size_of_stop 004E            __end_of_processRFID 0C32                     turnRight@i 0026  
                     int$flags 0039                     _LCD_String 0C72                     _INTCONbits 000FF2  
                  ??_init_RFID 0008                    _setMotorPWM 065C                    _moveForward 0AB0  
                     intlevel2 0000                     _OSCCONbits 000FD3     processRFID@position_in_buf 002A  
       ??_InterruptHandlerHigh 0005                ??_classify_data 000A                    ??_turnRight 0025  
                  _processRFID 0BE6             main@movementMicros 0064  
