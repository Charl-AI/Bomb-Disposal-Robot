

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 10 14:02:08 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 2.05
    50                           ; Generated 20/12/2018 GMT
    51                           ; 
    52                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4331 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	smallconst
    85  000300                     __psmallconst:
    86                           	opt callstack 0
    87  000300  00                 	db	0
    88  000301  4268               	dw	17000
    89  000303                     __end_ofmoveToBeacon@ERROR_THRESHOLD:
    90                           	opt callstack 0
    91  000303  005F               	dw	95
    92  000305                     __end_ofmain@MOVING_SPEED:
    93                           	opt callstack 0
    94  000305  0032               	dw	50
    95  000307                     __end_ofmain@SEARCHING_SPEED:
    96                           	opt callstack 0
    97  0000                     _PORTDbits	set	3971
    98  0000                     _CAP1BUFL	set	3944
    99  0000                     _CAP1BUFH	set	3945
   100  0000                     _CAP1CON	set	3939
   101  0000                     _ANSEL1	set	4025
   102  0000                     _ANSEL0	set	4024
   103  0000                     _T5CON	set	4023
   104  0000                     _IPR1bits	set	3999
   105  0000                     _PIE1bits	set	3997
   106  0000                     _RCSTAbits	set	4011
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _BAUDCONbits	set	4010
   109  0000                     _SPBRGH	set	4016
   110  0000                     _SPBRG	set	4015
   111  0000                     _TRISAbits	set	3986
   112  0000                     _TRISCbits	set	3988
   113  0000                     _LATDbits	set	3980
   114  0000                     _LATCbits	set	3979
   115  0000                     _LATAbits	set	3977
   116  0000                     _LATB	set	3978
   117  0000                     _PTPERH	set	3962
   118  0000                     _PTPERL	set	3963
   119  0000                     _PWMCON1	set	3950
   120  0000                     _PWMCON0	set	3951
   121  0000                     _PTCON1	set	3966
   122  0000                     _PTCON0	set	3967
   123  0000                     _RCREG	set	4014
   124  0000                     _PIR1bits	set	3998
   125  0000                     _INTCON2bits	set	4081
   126  0000                     _T0CON	set	4053
   127  0000                     _TRISDbits	set	3989
   128  0000                     _TRISBbits	set	3987
   129  0000                     _RCONbits	set	4048
   130  0000                     _INTCONbits	set	4082
   131  0000                     _OSCCONbits	set	4051
   132  0000                     _OSCCON	set	4051
   133  0000                     _PDC1H	set	3958
   134  0000                     _PDC1L	set	3959
   135  0000                     _PDC0H	set	3960
   136  0000                     _PDC0L	set	3961
   137  000307                     STR_10:
   138  000307  53                 	db	83	;'S'
   139  000308  54                 	db	84	;'T'
   140  000309  41                 	db	65	;'A'
   141  00030A  52                 	db	82	;'R'
   142  00030B  54                 	db	84	;'T'
   143  00030C  49                 	db	73	;'I'
   144  00030D  4E                 	db	78	;'N'
   145  00030E  47                 	db	71	;'G'
   146  00030F  20                 	db	32
   147  000310  53                 	db	83	;'S'
   148  000311  45                 	db	69	;'E'
   149  000312  41                 	db	65	;'A'
   150  000313  52                 	db	82	;'R'
   151  000314  43                 	db	67	;'C'
   152  000315  48                 	db	72	;'H'
   153  000316  00                 	db	0
   154  000317                     STR_9:
   155  000317  54                 	db	84	;'T'
   156  000318  4F                 	db	79	;'O'
   157  000319  20                 	db	32
   158  00031A  53                 	db	83	;'S'
   159  00031B  54                 	db	84	;'T'
   160  00031C  41                 	db	65	;'A'
   161  00031D  52                 	db	82	;'R'
   162  00031E  54                 	db	84	;'T'
   163  00031F  20                 	db	32
   164  000320  53                 	db	83	;'S'
   165  000321  45                 	db	69	;'E'
   166  000322  41                 	db	65	;'A'
   167  000323  52                 	db	82	;'R'
   168  000324  43                 	db	67	;'C'
   169  000325  48                 	db	72	;'H'
   170  000326  00                 	db	0
   171  000327                     STR_7:
   172  000327  52                 	db	82	;'R'
   173  000328  45                 	db	69	;'E'
   174  000329  53                 	db	83	;'S'
   175  00032A  45                 	db	69	;'E'
   176  00032B  54                 	db	84	;'T'
   177  00032C  54                 	db	84	;'T'
   178  00032D  49                 	db	73	;'I'
   179  00032E  4E                 	db	78	;'N'
   180  00032F  47                 	db	71	;'G'
   181  000330  20                 	db	32
   182  000331  52                 	db	82	;'R'
   183  000332  4F                 	db	79	;'O'
   184  000333  42                 	db	66	;'B'
   185  000334  4F                 	db	79	;'O'
   186  000335  54                 	db	84	;'T'
   187  000336  00                 	db	0
   188  000337                     STR_3:
   189  000337  43                 	db	67	;'C'
   190  000338  48                 	db	72	;'H'
   191  000339  45                 	db	69	;'E'
   192  00033A  43                 	db	67	;'C'
   193  00033B  4B                 	db	75	;'K'
   194  00033C  53                 	db	83	;'S'
   195  00033D  55                 	db	85	;'U'
   196  00033E  4D                 	db	77	;'M'
   197  00033F  20                 	db	32
   198  000340  46                 	db	70	;'F'
   199  000341  41                 	db	65	;'A'
   200  000342  49                 	db	73	;'I'
   201  000343  4C                 	db	76	;'L'
   202  000344  45                 	db	69	;'E'
   203  000345  44                 	db	68	;'D'
   204  000346  00                 	db	0
   205  000347                     STR_2:
   206  000347  43                 	db	67	;'C'
   207  000348  48                 	db	72	;'H'
   208  000349  45                 	db	69	;'E'
   209  00034A  43                 	db	67	;'C'
   210  00034B  4B                 	db	75	;'K'
   211  00034C  53                 	db	83	;'S'
   212  00034D  55                 	db	85	;'U'
   213  00034E  4D                 	db	77	;'M'
   214  00034F  20                 	db	32
   215  000350  50                 	db	80	;'P'
   216  000351  41                 	db	65	;'A'
   217  000352  53                 	db	83	;'S'
   218  000353  53                 	db	83	;'S'
   219  000354  45                 	db	69	;'E'
   220  000355  44                 	db	68	;'D'
   221  000356  00                 	db	0
   222  000357                     STR_5:
   223  000357  4D                 	db	77	;'M'
   224  000358  4F                 	db	79	;'O'
   225  000359  56                 	db	86	;'V'
   226  00035A  49                 	db	73	;'I'
   227  00035B  4E                 	db	78	;'N'
   228  00035C  47                 	db	71	;'G'
   229  00035D  20                 	db	32
   230  00035E  54                 	db	84	;'T'
   231  00035F  4F                 	db	79	;'O'
   232  000360  20                 	db	32
   233  000361  42                 	db	66	;'B'
   234  000362  4F                 	db	79	;'O'
   235  000363  4D                 	db	77	;'M'
   236  000364  42                 	db	66	;'B'
   237  000365  00                 	db	0
   238  000366                     STR_6:
   239  000366  52                 	db	82	;'R'
   240  000367  45                 	db	69	;'E'
   241  000368  54                 	db	84	;'T'
   242  000369  55                 	db	85	;'U'
   243  00036A  52                 	db	82	;'R'
   244  00036B  4E                 	db	78	;'N'
   245  00036C  49                 	db	73	;'I'
   246  00036D  4E                 	db	78	;'N'
   247  00036E  47                 	db	71	;'G'
   248  00036F  20                 	db	32
   249  000370  48                 	db	72	;'H'
   250  000371  4F                 	db	79	;'O'
   251  000372  4D                 	db	77	;'M'
   252  000373  45                 	db	69	;'E'
   253  000374  00                 	db	0
   254  000375                     STR_1:
   255  000375  43                 	db	67	;'C'
   256  000376  72                 	db	114	;'r'
   257  000377  69                 	db	105	;'i'
   258  000378  74                 	db	116	;'t'
   259  000379  69                 	db	105	;'i'
   260  00037A  63                 	db	99	;'c'
   261  00037B  61                 	db	97	;'a'
   262  00037C  6C                 	db	108	;'l'
   263  00037D  20                 	db	32
   264  00037E  45                 	db	69	;'E'
   265  00037F  72                 	db	114	;'r'
   266  000380  72                 	db	114	;'r'
   267  000381  6F                 	db	111	;'o'
   268  000382  72                 	db	114	;'r'
   269  000383  00                 	db	0
   270  000384                     STR_8:
   271  000384  50                 	db	80	;'P'
   272  000385  52                 	db	82	;'R'
   273  000386  45                 	db	69	;'E'
   274  000387  53                 	db	83	;'S'
   275  000388  53                 	db	83	;'S'
   276  000389  20                 	db	32
   277  00038A  42                 	db	66	;'B'
   278  00038B  55                 	db	85	;'U'
   279  00038C  54                 	db	84	;'T'
   280  00038D  54                 	db	84	;'T'
   281  00038E  4F                 	db	79	;'O'
   282  00038F  4E                 	db	78	;'N'
   283  000390  00                 	db	0
   284  000391                     STR_4:
   285  000391  53                 	db	83	;'S'
   286  000392  45                 	db	69	;'E'
   287  000393  41                 	db	65	;'A'
   288  000394  52                 	db	82	;'R'
   289  000395  43                 	db	67	;'C'
   290  000396  48                 	db	72	;'H'
   291  000397  49                 	db	73	;'I'
   292  000398  4E                 	db	78	;'N'
   293  000399  47                 	db	71	;'G'
   294  00039A  00                 	db	0
   295                           
   296                           ; #config settings
   297  00039B  00                 	db	0	; dummy byte at the end
   298  0000                     
   299                           	psect	cinit
   300  001052                     __pcinit:
   301                           	opt callstack 0
   302  001052                     start_initialization:
   303                           	opt callstack 0
   304  001052                     __initialization:
   305                           	opt callstack 0
   306                           
   307                           ; Clear objects allocated to BANK0 (61 bytes)
   308  001052  EE00  F060         	lfsr	0,__pbssBANK0
   309  001056  0E3D               	movlw	61
   310  001058                     clear_0:
   311  001058  6AEE               	clrf	postinc0,c
   312  00105A  06E8               	decf	wreg,f,c
   313  00105C  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to COMRAM (17 bytes)
   316  00105E  EE00  F038         	lfsr	0,__pbssCOMRAM
   317  001062  0E11               	movlw	17
   318  001064                     clear_1:
   319  001064  6AEE               	clrf	postinc0,c
   320  001066  06E8               	decf	wreg,f,c
   321  001068  E1FD               	bnz	clear_1
   322  00106A                     end_of_initialization:
   323                           	opt callstack 0
   324  00106A                     __end_of__initialization:
   325                           	opt callstack 0
   326  00106A  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   327  00106C  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   328  00106E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   329  001070  6EF8               	movwf	tblptru,c
   330  001072  0E03               	movlw	high __Lsmallconst
   331  001074  6EF7               	movwf	tblptrh,c
   332  001076  0100               	movlb	0
   333  001078  EF91  F004         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMRAM
   336  000038                     __pbssCOMRAM:
   337                           	opt callstack 0
   338  000038                     classify_data@smoothed:
   339                           	opt callstack 0
   340  000038                     	ds	2
   341  00003A                     processRFID@position_in_buf:
   342                           	opt callstack 0
   343  00003A                     	ds	1
   344  00003B                     _robot_mode:
   345                           	opt callstack 0
   346  00003B                     	ds	1
   347  00003C                     _RFIDbuf:
   348                           	opt callstack 0
   349  00003C                     	ds	12
   350  000048                     _RFID_flag:
   351                           	opt callstack 0
   352  000048                     	ds	1
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt callstack 0
   357  000060                     _travel_moves:
   358                           	opt callstack 0
   359  000060                     	ds	61
   360                           
   361                           	psect	cstackBANK0
   362  00009D                     __pcstackBANK0:
   363                           	opt callstack 0
   364  00009D                     main@motorL:
   365                           	opt callstack 0
   366                           
   367                           ; 9 bytes @ 0x0
   368  00009D                     	ds	9
   369  0000A6                     main@motorR:
   370                           	opt callstack 0
   371                           
   372                           ; 9 bytes @ 0x9
   373  0000A6                     	ds	9
   374                           
   375                           	psect	cstackCOMRAM
   376  000001                     __pcstackCOMRAM:
   377                           	opt callstack 0
   378  000001                     processRFID@RFIDbuf:
   379                           	opt callstack 0
   380                           
   381                           ; 1 bytes @ 0x0
   382  000001                     	ds	1
   383  000002                     processRFID@latestChar:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0x1
   387  000002                     	ds	1
   388  000003                     processRFID@i:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x2
   392  000003                     	ds	1
   393  000004                     ??_InterruptHandlerHigh:
   394                           
   395                           ; 1 bytes @ 0x3
   396  000004                     	ds	3
   397  000007                     ??_InterruptHandlerLow:
   398                           
   399                           ; 1 bytes @ 0x6
   400  000007                     	ds	7
   401  00000E                     ??_LCDout:
   402  00000E                     ?___wmul:
   403                           	opt callstack 0
   404  00000E                     initPWM@PWMperiod:
   405                           	opt callstack 0
   406  00000E                     classify_data@raw_data:
   407                           	opt callstack 0
   408  00000E                     ___wmul@multiplier:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0xD
   412  00000E                     	ds	1
   413  00000F                     LCDout@number:
   414                           	opt callstack 0
   415                           
   416                           ; 1 bytes @ 0xE
   417  00000F                     	ds	1
   418  000010                     ??_classify_data:
   419  000010                     SendLCD@type:
   420                           	opt callstack 0
   421  000010                     ___wmul@multiplicand:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0xF
   425  000010                     	ds	1
   426  000011                     SendLCD@Byte:
   427                           	opt callstack 0
   428                           
   429                           ; 1 bytes @ 0x10
   430  000011                     	ds	1
   431  000012                     ??_init_LCD:
   432  000012                     ??_clearLCD:
   433  000012                     SetLine@line:
   434                           	opt callstack 0
   435  000012                     LCDString@string:
   436                           	opt callstack 0
   437  000012                     classify_data@filtered:
   438                           	opt callstack 0
   439  000012                     ___wmul@product:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x11
   443  000012                     	ds	1
   444  000013                     ??_waitForInput:
   445  000013                     check_RFID@dataBuf:
   446                           	opt callstack 0
   447  000013                     display_RFID@dataBuf:
   448                           	opt callstack 0
   449                           
   450                           ; 1 bytes @ 0x12
   451  000013                     	ds	1
   452  000014                     ??_stabiliseAverage:
   453  000014                     ??_check_RFID:
   454  000014                     ?___awdiv:
   455                           	opt callstack 0
   456  000014                     display_RFID@i:
   457                           	opt callstack 0
   458  000014                     ___awdiv@dividend:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x13
   462  000014                     	ds	1
   463  000015                     waitForInput@i:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x14
   467  000015                     	ds	1
   468  000016                     ___awdiv@divisor:
   469                           	opt callstack 0
   470  000016                     check_RFID@hexBuf:
   471                           	opt callstack 0
   472                           
   473                           ; 12 bytes @ 0x15
   474  000016                     	ds	1
   475  000017                     stabiliseAverage@raw_data:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x16
   479  000017                     	ds	1
   480  000018                     ___awdiv@counter:
   481                           	opt callstack 0
   482                           
   483                           ; 1 bytes @ 0x17
   484  000018                     	ds	1
   485  000019                     ___awdiv@sign:
   486                           	opt callstack 0
   487  000019                     stabiliseAverage@i:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x18
   491  000019                     	ds	1
   492  00001A                     ___awdiv@quotient:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x19
   496  00001A                     	ds	2
   497  00001C                     setMotorPWM@m:
   498                           	opt callstack 0
   499                           
   500                           ; 1 bytes @ 0x1B
   501  00001C                     	ds	1
   502  00001D                     ??_setMotorPWM:
   503                           
   504                           ; 1 bytes @ 0x1C
   505  00001D                     	ds	5
   506  000022                     check_RFID@byte1:
   507                           	opt callstack 0
   508  000022                     setMotorPWM@PWMduty:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x21
   512  000022                     	ds	1
   513  000023                     check_RFID@byte2:
   514                           	opt callstack 0
   515                           
   516                           ; 1 bytes @ 0x22
   517  000023                     	ds	1
   518  000024                     stop@mL:
   519                           	opt callstack 0
   520  000024                     turnLeft@mL:
   521                           	opt callstack 0
   522  000024                     turnRight@mL:
   523                           	opt callstack 0
   524  000024                     moveForward@mL:
   525                           	opt callstack 0
   526  000024                     moveBackward@mL:
   527                           	opt callstack 0
   528  000024                     initMotorValues@mL:
   529                           	opt callstack 0
   530  000024                     check_RFID@byte3:
   531                           	opt callstack 0
   532                           
   533                           ; 1 bytes @ 0x23
   534  000024                     	ds	1
   535  000025                     stop@mR:
   536                           	opt callstack 0
   537  000025                     turnLeft@mR:
   538                           	opt callstack 0
   539  000025                     turnRight@mR:
   540                           	opt callstack 0
   541  000025                     moveForward@mR:
   542                           	opt callstack 0
   543  000025                     moveBackward@mR:
   544                           	opt callstack 0
   545  000025                     initMotorValues@mR:
   546                           	opt callstack 0
   547  000025                     check_RFID@byte4:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x24
   551  000025                     	ds	1
   552  000026                     check_RFID@byte5:
   553                           	opt callstack 0
   554  000026                     stop@initial_speed:
   555                           	opt callstack 0
   556  000026                     turnLeft@max_power:
   557                           	opt callstack 0
   558  000026                     turnRight@max_power:
   559                           	opt callstack 0
   560  000026                     moveForward@max_power:
   561                           	opt callstack 0
   562  000026                     moveBackward@max_power:
   563                           	opt callstack 0
   564                           
   565                           ; 2 bytes @ 0x25
   566  000026                     	ds	1
   567  000027                     check_RFID@checksum:
   568                           	opt callstack 0
   569                           
   570                           ; 1 bytes @ 0x26
   571  000027                     	ds	1
   572  000028                     ??_stop:
   573  000028                     ??_turnLeft:
   574  000028                     ??_turnRight:
   575  000028                     ??_moveForward:
   576  000028                     ??_moveBackward:
   577  000028                     check_RFID@i:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x27
   581  000028                     	ds	1
   582  000029                     stop@i:
   583                           	opt callstack 0
   584  000029                     turnLeft@i:
   585                           	opt callstack 0
   586  000029                     turnRight@i:
   587                           	opt callstack 0
   588  000029                     moveForward@i:
   589                           	opt callstack 0
   590  000029                     moveBackward@i:
   591                           	opt callstack 0
   592                           
   593                           ; 2 bytes @ 0x28
   594  000029                     	ds	2
   595  00002B                     scanForBeacon@mL:
   596                           	opt callstack 0
   597  00002B                     moveToBeacon@mL:
   598                           	opt callstack 0
   599  00002B                     returnHome@mL:
   600                           	opt callstack 0
   601  00002B                     stopAndDisplay@mL:
   602                           	opt callstack 0
   603                           
   604                           ; 1 bytes @ 0x2A
   605  00002B                     	ds	1
   606  00002C                     scanForBeacon@mR:
   607                           	opt callstack 0
   608  00002C                     moveToBeacon@mR:
   609                           	opt callstack 0
   610  00002C                     returnHome@mR:
   611                           	opt callstack 0
   612  00002C                     stopAndDisplay@mR:
   613                           	opt callstack 0
   614                           
   615                           ; 1 bytes @ 0x2B
   616  00002C                     	ds	1
   617  00002D                     scanForBeacon@speed:
   618                           	opt callstack 0
   619  00002D                     moveToBeacon@speed:
   620                           	opt callstack 0
   621  00002D                     returnHome@move_speed:
   622                           	opt callstack 0
   623  00002D                     stopAndDisplay@speed:
   624                           	opt callstack 0
   625                           
   626                           ; 2 bytes @ 0x2C
   627  00002D                     	ds	2
   628  00002F                     scanForBeacon@move:
   629                           	opt callstack 0
   630  00002F                     moveToBeacon@move:
   631                           	opt callstack 0
   632  00002F                     stopAndDisplay@RFID_buffer:
   633                           	opt callstack 0
   634  00002F                     returnHome@search_speed:
   635                           	opt callstack 0
   636                           
   637                           ; 2 bytes @ 0x2E
   638  00002F                     	ds	1
   639  000030                     ??_stopAndDisplay:
   640  000030                     scanForBeacon@exit_flag:
   641                           	opt callstack 0
   642  000030                     moveToBeacon@exit_flag:
   643                           	opt callstack 0
   644                           
   645                           ; 1 bytes @ 0x2F
   646  000030                     	ds	1
   647  000031                     ??_scanForBeacon:
   648  000031                     ??_moveToBeacon:
   649  000031                     returnHome@move:
   650                           	opt callstack 0
   651                           
   652                           ; 1 bytes @ 0x30
   653  000031                     	ds	1
   654  000032                     ??_returnHome:
   655  000032                     stopAndDisplay@i:
   656                           	opt callstack 0
   657                           
   658                           ; 2 bytes @ 0x31
   659  000032                     	ds	1
   660  000033                     scanForBeacon@raw_data:
   661                           	opt callstack 0
   662  000033                     moveToBeacon@raw_data:
   663                           	opt callstack 0
   664                           
   665                           ; 2 bytes @ 0x32
   666  000033                     	ds	2
   667  000035                     scanForBeacon@beacon_location:
   668                           	opt callstack 0
   669  000035                     moveToBeacon@beacon_location:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0x34
   673  000035                     	ds	1
   674  000036                     moveToBeacon@error_counter:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0x35
   678  000036                     	ds	2
   679  000038                     
   680                           ; 1 bytes @ 0x37
   681 ;;
   682 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   683 ;;
   684 ;; *************** function _main *****************
   685 ;; Defined at:
   686 ;;		line 125 in file "main.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;		None
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  motorR          9    9[BANK0 ] struct DC_motor
   691 ;;  motorL          9    0[BANK0 ] struct DC_motor
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   701 ;;      Params:         0       0       0       0
   702 ;;      Locals:         0      18       0       0
   703 ;;      Temps:          0       0       0       0
   704 ;;      Totals:         0      18       0       0
   705 ;;Total ram usage:       18 bytes
   706 ;; Hardware stack levels required when called:    9
   707 ;; This function calls:
   708 ;;		_LCDString
   709 ;;		_initMotorValues
   710 ;;		_moveToBeacon
   711 ;;		_returnHome
   712 ;;		_scanForBeacon
   713 ;;		_setup
   714 ;;		_stabiliseAverage
   715 ;;		_stopAndDisplay
   716 ;;		_waitForInput
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text0
   723  000922                     __ptext0:
   724                           	opt callstack 0
   725  000922                     _main:
   726                           	opt callstack 22
   727                           
   728                           ;main.c: 128:   setup();
   729                           
   730                           ;incstack = 0
   731  000922  ECAE  F007         	call	_setup	;wreg free
   732                           
   733                           ;main.c: 131:   struct DC_motor motorL, motorR;;main.c: 132:   initMotorValues(&motorL, 
      +                          &motorR);
   734  000926  0E9D               	movlw	low main@motorL
   735  000928  6E24               	movwf	initMotorValues@mL,c
   736  00092A  0EA6               	movlw	low main@motorR
   737  00092C  6E25               	movwf	initMotorValues@mR,c
   738  00092E  EC6A  F003         	call	_initMotorValues	;wreg free
   739                           
   740                           ;main.c: 135:   const int SEARCHING_SPEED = 50;;main.c: 136:   const int MOVING_SPEED = 
      +                          95;;main.c: 138:   stabiliseAverage();
   741  000932  EC70  F007         	call	_stabiliseAverage	;wreg free
   742                           
   743                           ;main.c: 139:   waitForInput();
   744  000936  ECCC  F006         	call	_waitForInput	;wreg free
   745  00093A                     l2724:
   746                           
   747                           ;main.c: 143:   {;main.c: 145:       if(robot_mode == 0)
   748  00093A  503B               	movf	_robot_mode,w,c	;volatile
   749  00093C  A4D8               	btfss	status,2,c
   750  00093E  D00F               	goto	l2728
   751                           
   752                           ;main.c: 146:       {;main.c: 147:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , SEARCHING_SPEED,
   753  000940  0E9D               	movlw	low main@motorL
   754  000942  6E2B               	movwf	scanForBeacon@mL,c
   755  000944  0EA6               	movlw	low main@motorR
   756  000946  6E2C               	movwf	scanForBeacon@mR,c
   757  000948  0E00               	movlw	0
   758  00094A  6E2E               	movwf	scanForBeacon@speed+1,c
   759  00094C  0E32               	movlw	50
   760  00094E  6E2D               	movwf	scanForBeacon@speed,c
   761  000950  0E60               	movlw	low _travel_moves
   762  000952  6E2F               	movwf	scanForBeacon@move,c
   763  000954  0E48               	movlw	low _RFID_flag
   764  000956  6E30               	movwf	scanForBeacon@exit_flag,c
   765  000958  ECED  F004         	call	_scanForBeacon	;wreg free
   766  00095C  D037               	goto	L3
   767  00095E                     l2728:
   768  00095E  043B               	decf	_robot_mode,w,c	;volatile
   769  000960  A4D8               	btfss	status,2,c
   770  000962  D00F               	goto	l2732
   771                           
   772                           ;main.c: 153:       {;main.c: 154:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           MOVING_SPEED,
   773  000964  0E9D               	movlw	low main@motorL
   774  000966  6E2B               	movwf	moveToBeacon@mL,c
   775  000968  0EA6               	movlw	low main@motorR
   776  00096A  6E2C               	movwf	moveToBeacon@mR,c
   777  00096C  0E00               	movlw	0
   778  00096E  6E2E               	movwf	moveToBeacon@speed+1,c
   779  000970  0E5F               	movlw	95
   780  000972  6E2D               	movwf	moveToBeacon@speed,c
   781  000974  0E60               	movlw	low _travel_moves
   782  000976  6E2F               	movwf	moveToBeacon@move,c
   783  000978  0E48               	movlw	low _RFID_flag
   784  00097A  6E30               	movwf	moveToBeacon@exit_flag,c
   785  00097C  EC33  F004         	call	_moveToBeacon	;wreg free
   786  000980  D025               	goto	L3
   787  000982                     l2732:
   788  000982  0E02               	movlw	2
   789  000984  183B               	xorwf	_robot_mode,w,c	;volatile
   790  000986  A4D8               	btfss	status,2,c
   791  000988  D011               	goto	l2736
   792                           
   793                           ;main.c: 160:       {;main.c: 161:           robot_mode = returnHome(&motorL, &motorR, M
      +                          OVING_SPEED,
   794  00098A  0E9D               	movlw	low main@motorL
   795  00098C  6E2B               	movwf	returnHome@mL,c
   796  00098E  0EA6               	movlw	low main@motorR
   797  000990  6E2C               	movwf	returnHome@mR,c
   798  000992  0E00               	movlw	0
   799  000994  6E2E               	movwf	returnHome@move_speed+1,c
   800  000996  0E5F               	movlw	95
   801  000998  6E2D               	movwf	returnHome@move_speed,c
   802  00099A  0E00               	movlw	0
   803  00099C  6E30               	movwf	returnHome@search_speed+1,c
   804  00099E  0E32               	movlw	50
   805  0009A0  6E2F               	movwf	returnHome@search_speed,c
   806  0009A2  0E60               	movlw	low _travel_moves
   807  0009A4  6E31               	movwf	returnHome@move,c
   808  0009A6  ECEC  F002         	call	_returnHome	;wreg free
   809  0009AA  D010               	goto	L3
   810  0009AC                     l2736:
   811  0009AC  0E03               	movlw	3
   812  0009AE  183B               	xorwf	_robot_mode,w,c	;volatile
   813  0009B0  A4D8               	btfss	status,2,c
   814  0009B2  D00E               	goto	l2740
   815                           
   816                           ;main.c: 167:       {;main.c: 168:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, MOVING_SPEED,RFIDbuf);
   817  0009B4  0E9D               	movlw	low main@motorL
   818  0009B6  6E2B               	movwf	stopAndDisplay@mL,c
   819  0009B8  0EA6               	movlw	low main@motorR
   820  0009BA  6E2C               	movwf	stopAndDisplay@mR,c
   821  0009BC  0E00               	movlw	0
   822  0009BE  6E2E               	movwf	stopAndDisplay@speed+1,c
   823  0009C0  0E5F               	movlw	95
   824  0009C2  6E2D               	movwf	stopAndDisplay@speed,c
   825  0009C4  0E3C               	movlw	low _RFIDbuf
   826  0009C6  6E2F               	movwf	stopAndDisplay@RFID_buffer,c
   827  0009C8  EC21  F006         	call	_stopAndDisplay	;wreg free
   828  0009CC                     L3:
   829  0009CC  6E3B               	movwf	_robot_mode,c	;volatile
   830                           
   831                           ;main.c: 169:       }
   832  0009CE  D7B5               	goto	l2724
   833  0009D0                     l2740:
   834                           
   835                           ;main.c: 173:       {;main.c: 174:           LCDString("Critical Error");
   836  0009D0  0E75               	movlw	low STR_1
   837  0009D2  6E12               	movwf	LCDString@string,c
   838  0009D4  EC13  F008         	call	_LCDString	;wreg free
   839  0009D8  D7B0               	goto	l2724
   840  0009DA                     __end_of_main:
   841                           	opt callstack 0
   842                           
   843 ;; *************** function _waitForInput *****************
   844 ;; Defined at:
   845 ;;		line 176 in file "subroutines.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  i               2   20[COMRAM] int 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   859 ;;      Params:         0       0       0       0
   860 ;;      Locals:         2       0       0       0
   861 ;;      Temps:          2       0       0       0
   862 ;;      Totals:         4       0       0       0
   863 ;;Total ram usage:        4 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    7
   866 ;; This function calls:
   867 ;;		_LCDString
   868 ;;		_SetLine
   869 ;;		_clearLCD
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text1
   876  000D98                     __ptext1:
   877                           	opt callstack 0
   878  000D98                     _waitForInput:
   879                           	opt callstack 23
   880                           
   881                           ;subroutines.c: 179:     clearLCD();
   882                           
   883                           ;incstack = 0
   884  000D98  EC6B  F008         	call	_clearLCD	;wreg free
   885                           
   886                           ;subroutines.c: 180:     SetLine(1);
   887  000D9C  0E01               	movlw	1
   888  000D9E  ECFC  F007         	call	_SetLine
   889                           
   890                           ;subroutines.c: 181:     LCDString("PRESS BUTTON");
   891  000DA2  0E84               	movlw	low STR_8
   892  000DA4  6E12               	movwf	LCDString@string,c
   893  000DA6  EC13  F008         	call	_LCDString	;wreg free
   894                           
   895                           ;subroutines.c: 182:     SetLine(2);
   896  000DAA  0E02               	movlw	2
   897  000DAC  ECFC  F007         	call	_SetLine
   898                           
   899                           ;subroutines.c: 183:     LCDString("TO START SEARCH");
   900  000DB0  0E17               	movlw	low STR_9
   901  000DB2  6E12               	movwf	LCDString@string,c
   902  000DB4  EC13  F008         	call	_LCDString	;wreg free
   903  000DB8                     l369:
   904  000DB8  A483               	btfss	3971,2,c	;volatile
   905  000DBA  D7FE               	goto	l369
   906                           
   907                           ;subroutines.c: 189:     clearLCD();
   908  000DBC  EC6B  F008         	call	_clearLCD	;wreg free
   909                           
   910                           ;subroutines.c: 190:     SetLine(1);
   911  000DC0  0E01               	movlw	1
   912  000DC2  ECFC  F007         	call	_SetLine
   913                           
   914                           ;subroutines.c: 191:     LCDString("STARTING SEARCH");
   915  000DC6  0E07               	movlw	low STR_10
   916  000DC8  6E12               	movwf	LCDString@string,c
   917  000DCA  EC13  F008         	call	_LCDString	;wreg free
   918                           
   919                           ;subroutines.c: 192:     for(int i=0; i<10;i++)
   920  000DCE  0E00               	movlw	0
   921  000DD0  6E16               	movwf	waitForInput@i+1,c
   922  000DD2  0E00               	movlw	0
   923  000DD4  6E15               	movwf	waitForInput@i,c
   924  000DD6                     l2590:
   925                           
   926                           ;subroutines.c: 193:     {;subroutines.c: 194:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   927  000DD6  0E02               	movlw	2
   928  000DD8  6E14               	movwf	(??_waitForInput+1)& (0+255),c
   929  000DDA  0E04               	movlw	4
   930  000DDC  6E13               	movwf	??_waitForInput& (0+255),c
   931  000DDE  0EBA               	movlw	186
   932  000DE0                     u2097:
   933  000DE0  2EE8               	decfsz	wreg,f,c
   934  000DE2  D7FE               	bra	u2097
   935  000DE4  2E13               	decfsz	??_waitForInput& (0+255),f,c
   936  000DE6  D7FC               	bra	u2097
   937  000DE8  2E14               	decfsz	(??_waitForInput+1)& (0+255),f,c
   938  000DEA  D7FA               	bra	u2097
   939  000DEC  D000               	nop2	
   940                           
   941                           ;subroutines.c: 195:     }
   942  000DEE  4A15               	infsnz	waitForInput@i,f,c
   943  000DF0  2A16               	incf	waitForInput@i+1,f,c
   944  000DF2  BE16               	btfsc	waitForInput@i+1,7,c
   945  000DF4  D7F0               	goto	l2590
   946  000DF6  5016               	movf	waitForInput@i+1,w,c
   947  000DF8  E104               	bnz	u1910
   948  000DFA  0E0A               	movlw	10
   949  000DFC  5C15               	subwf	waitForInput@i,w,c
   950  000DFE  A0D8               	btfss	status,0,c
   951  000E00  D7EA               	goto	l2590
   952  000E02                     u1910:
   953                           
   954                           ;subroutines.c: 196:     clearLCD();
   955  000E02  EC6B  F008         	call	_clearLCD	;wreg free
   956  000E06  0012               	return		;funcret
   957  000E08                     __end_of_waitForInput:
   958                           	opt callstack 0
   959                           
   960 ;; *************** function _stopAndDisplay *****************
   961 ;; Defined at:
   962 ;;		line 149 in file "subroutines.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  mL              1   42[COMRAM] PTR struct DC_motor
   965 ;;		 -> main@motorL(9), 
   966 ;;  mR              1   43[COMRAM] PTR struct DC_motor
   967 ;;		 -> main@motorR(9), 
   968 ;;  speed           2   44[COMRAM] int 
   969 ;;  RFID_buffer     1   46[COMRAM] PTR volatile unsigned ch
   970 ;;		 -> RFIDbuf(12), 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  i               2   49[COMRAM] int 
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      unsigned char 
   975 ;; Registers used:
   976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   982 ;;      Params:         5       0       0       0
   983 ;;      Locals:         2       0       0       0
   984 ;;      Temps:          2       0       0       0
   985 ;;      Totals:         9       0       0       0
   986 ;;Total ram usage:        9 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    8
   989 ;; This function calls:
   990 ;;		_LCDString
   991 ;;		_check_RFID
   992 ;;		_clearLCD
   993 ;;		_display_RFID
   994 ;;		_stop
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text2
  1001  000C42                     __ptext2:
  1002                           	opt callstack 0
  1003  000C42                     _stopAndDisplay:
  1004                           	opt callstack 22
  1005                           
  1006                           ;subroutines.c: 149: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *m
      +                          R, int speed,;subroutines.c: 150:                                 volatile char RFID_buf
      +                          fer[]);subroutines.c: 151: {;subroutines.c: 152:     stop(mL, mR,speed);
  1007                           
  1008                           ;incstack = 0
  1009  000C42  C02B  F024         	movff	stopAndDisplay@mL,stop@mL
  1010  000C46  C02C  F025         	movff	stopAndDisplay@mR,stop@mR
  1011  000C4A  C02D  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1012  000C4E  C02E  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1013  000C52  EC04  F007         	call	_stop	;wreg free
  1014                           
  1015                           ;subroutines.c: 155:     display_RFID(RFID_buffer);
  1016  000C56  C02F  F013         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1017  000C5A  EC90  F007         	call	_display_RFID	;wreg free
  1018                           
  1019                           ;subroutines.c: 156:     check_RFID(RFID_buffer);
  1020  000C5E  C02F  F013         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1021  000C62  ECCE  F001         	call	_check_RFID	;wreg free
  1022  000C66  D023               	goto	l2714
  1023  000C68                     l2698:
  1024                           
  1025                           ;subroutines.c: 162:         {;subroutines.c: 163:             clearLCD();
  1026  000C68  EC6B  F008         	call	_clearLCD	;wreg free
  1027                           
  1028                           ;subroutines.c: 164:             LCDString("RESETTING ROBOT");
  1029  000C6C  0E27               	movlw	low STR_7
  1030  000C6E  6E12               	movwf	LCDString@string,c
  1031  000C70  EC13  F008         	call	_LCDString	;wreg free
  1032                           
  1033                           ;subroutines.c: 165:             for(int i=0; i<10;i++)
  1034  000C74  0E00               	movlw	0
  1035  000C76  6E33               	movwf	stopAndDisplay@i+1,c
  1036  000C78  0E00               	movlw	0
  1037  000C7A  6E32               	movwf	stopAndDisplay@i,c
  1038  000C7C                     l2708:
  1039                           
  1040                           ;subroutines.c: 166:             {;subroutines.c: 167:                 _delay((unsigned 
      +                          long)((100)*(8000000/4000.0)));
  1041  000C7C  0E02               	movlw	2
  1042  000C7E  6E31               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1043  000C80  0E04               	movlw	4
  1044  000C82  6E30               	movwf	??_stopAndDisplay& (0+255),c
  1045  000C84  0EBA               	movlw	186
  1046  000C86                     u2107:
  1047  000C86  2EE8               	decfsz	wreg,f,c
  1048  000C88  D7FE               	bra	u2107
  1049  000C8A  2E30               	decfsz	??_stopAndDisplay& (0+255),f,c
  1050  000C8C  D7FC               	bra	u2107
  1051  000C8E  2E31               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1052  000C90  D7FA               	bra	u2107
  1053  000C92  D000               	nop2	
  1054                           
  1055                           ;subroutines.c: 168:             }
  1056  000C94  4A32               	infsnz	stopAndDisplay@i,f,c
  1057  000C96  2A33               	incf	stopAndDisplay@i+1,f,c
  1058  000C98  BE33               	btfsc	stopAndDisplay@i+1,7,c
  1059  000C9A  D7F0               	goto	l2708
  1060  000C9C  5033               	movf	stopAndDisplay@i+1,w,c
  1061  000C9E  E104               	bnz	u2030
  1062  000CA0  0E0A               	movlw	10
  1063  000CA2  5C32               	subwf	stopAndDisplay@i,w,c
  1064  000CA4  A0D8               	btfss	status,0,c
  1065  000CA6  D7EA               	goto	l2708
  1066  000CA8                     u2030:
  1067                           
  1068                           ;subroutines.c: 169:             clearLCD();
  1069  000CA8  EC6B  F008         	call	_clearLCD	;wreg free
  1070  000CAC  00FF               	reset		;# 
  1071  000CAE                     l2714:
  1072                           
  1073                           ;subroutines.c: 161:         while(PORTDbits.RD2 == 1)
  1074  000CAE  A483               	btfss	3971,2,c	;volatile
  1075  000CB0  D7FE               	goto	l2714
  1076  000CB2  D7DA               	goto	l2698
  1077  000CB4                     __end_of_stopAndDisplay:
  1078                           	opt callstack 0
  1079                           
  1080 ;; *************** function _display_RFID *****************
  1081 ;; Defined at:
  1082 ;;		line 104 in file "RFID.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;  dataBuf         1   18[COMRAM] PTR volatile unsigned ch
  1085 ;;		 -> RFIDbuf(12), 
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;  i               2   19[COMRAM] int 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1097 ;;      Params:         1       0       0       0
  1098 ;;      Locals:         2       0       0       0
  1099 ;;      Temps:          0       0       0       0
  1100 ;;      Totals:         3       0       0       0
  1101 ;;Total ram usage:        3 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    7
  1104 ;; This function calls:
  1105 ;;		_SendLCD
  1106 ;;		_SetLine
  1107 ;;		_clearLCD
  1108 ;; This function is called by:
  1109 ;;		_stopAndDisplay
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text3
  1114  000F20                     __ptext3:
  1115                           	opt callstack 0
  1116  000F20                     _display_RFID:
  1117                           	opt callstack 22
  1118                           
  1119                           ;RFID.c: 104: void display_RFID(volatile char dataBuf[]);RFID.c: 105: {;RFID.c: 106:    
      +                           clearLCD();
  1120                           
  1121                           ;incstack = 0
  1122  000F20  EC6B  F008         	call	_clearLCD	;wreg free
  1123                           
  1124                           ;RFID.c: 107:     SetLine(1);
  1125  000F24  0E01               	movlw	1
  1126  000F26  ECFC  F007         	call	_SetLine
  1127                           
  1128                           ;RFID.c: 108:     for(int i=0;i<10;i++)
  1129  000F2A  0E00               	movlw	0
  1130  000F2C  6E15               	movwf	display_RFID@i+1,c
  1131  000F2E  0E00               	movlw	0
  1132  000F30  6E14               	movwf	display_RFID@i,c
  1133  000F32                     l2502:
  1134                           
  1135                           ;RFID.c: 109:     {;RFID.c: 110:         SendLCD(dataBuf[i],1);
  1136  000F32  0E01               	movlw	1
  1137  000F34  6E10               	movwf	SendLCD@type,c
  1138  000F36  5013               	movf	display_RFID@dataBuf,w,c
  1139  000F38  2414               	addwf	display_RFID@i,w,c
  1140  000F3A  6ED9               	movwf	fsr2l,c
  1141  000F3C  6ADA               	clrf	fsr2h,c
  1142  000F3E  50DF               	movf	indf2,w,c
  1143  000F40  ECE4  F007         	call	_SendLCD
  1144                           
  1145                           ;RFID.c: 111:     }
  1146  000F44  4A14               	infsnz	display_RFID@i,f,c
  1147  000F46  2A15               	incf	display_RFID@i+1,f,c
  1148  000F48  BE15               	btfsc	display_RFID@i+1,7,c
  1149  000F4A  D7F3               	goto	l2502
  1150  000F4C  5015               	movf	display_RFID@i+1,w,c
  1151  000F4E  E105               	bnz	u1860
  1152  000F50  0E0A               	movlw	10
  1153  000F52  5C14               	subwf	display_RFID@i,w,c
  1154  000F54  B0D8               	btfsc	status,0,c
  1155  000F56  0012               	return	
  1156  000F58  D7EC               	goto	l2502
  1157  000F5A                     u1860:
  1158  000F5A  0012               	return		;funcret
  1159  000F5C                     __end_of_display_RFID:
  1160                           	opt callstack 0
  1161                           
  1162 ;; *************** function _check_RFID *****************
  1163 ;; Defined at:
  1164 ;;		line 67 in file "RFID.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;  dataBuf         1   18[COMRAM] PTR volatile unsigned ch
  1167 ;;		 -> RFIDbuf(12), 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  i               2   39[COMRAM] int 
  1170 ;;  hexBuf         12   21[COMRAM] unsigned char [12]
  1171 ;;  checksum        1   38[COMRAM] unsigned char 
  1172 ;;  byte5           1   37[COMRAM] unsigned char 
  1173 ;;  byte4           1   36[COMRAM] unsigned char 
  1174 ;;  byte3           1   35[COMRAM] unsigned char 
  1175 ;;  byte2           1   34[COMRAM] unsigned char 
  1176 ;;  byte1           1   33[COMRAM] unsigned char 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1186 ;;      Params:         1       0       0       0
  1187 ;;      Locals:        20       0       0       0
  1188 ;;      Temps:          2       0       0       0
  1189 ;;      Totals:        23       0       0       0
  1190 ;;Total ram usage:       23 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    7
  1193 ;; This function calls:
  1194 ;;		_LCDString
  1195 ;;		_SetLine
  1196 ;; This function is called by:
  1197 ;;		_stopAndDisplay
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text4
  1202  00039C                     __ptext4:
  1203                           	opt callstack 0
  1204  00039C                     _check_RFID:
  1205                           	opt callstack 22
  1206                           
  1207                           ;RFID.c: 67: void check_RFID(volatile char dataBuf[]);RFID.c: 68: {;RFID.c: 70:     char
      +                           hexBuf[12];;RFID.c: 72:     for(int i=0; i<12;i++)
  1208                           
  1209                           ;incstack = 0
  1210  00039C  0E00               	movlw	0
  1211  00039E  6E29               	movwf	check_RFID@i+1,c
  1212  0003A0  0E00               	movlw	0
  1213  0003A2  6E28               	movwf	check_RFID@i,c
  1214  0003A4                     l2468:
  1215                           
  1216                           ;RFID.c: 73:     {;RFID.c: 74:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1217  0003A4  5013               	movf	check_RFID@dataBuf,w,c
  1218  0003A6  2428               	addwf	check_RFID@i,w,c
  1219  0003A8  6ED9               	movwf	fsr2l,c
  1220  0003AA  6ADA               	clrf	fsr2h,c
  1221  0003AC  0E2F               	movlw	47
  1222  0003AE  64DF               	cpfsgt	indf2,c
  1223  0003B0  D012               	goto	l2474
  1224  0003B2  5013               	movf	check_RFID@dataBuf,w,c
  1225  0003B4  2428               	addwf	check_RFID@i,w,c
  1226  0003B6  6ED9               	movwf	fsr2l,c
  1227  0003B8  6ADA               	clrf	fsr2h,c
  1228  0003BA  0E3A               	movlw	58
  1229  0003BC  60DF               	cpfslt	indf2,c
  1230  0003BE  D00B               	goto	l2474
  1231                           
  1232                           ;RFID.c: 75:         {;RFID.c: 76:             hexBuf[i] = dataBuf[i] - '0';
  1233  0003C0  5028               	movf	check_RFID@i,w,c
  1234  0003C2  0F16               	addlw	low check_RFID@hexBuf
  1235  0003C4  6ED9               	movwf	fsr2l,c
  1236  0003C6  6ADA               	clrf	fsr2h,c
  1237  0003C8  5013               	movf	check_RFID@dataBuf,w,c
  1238  0003CA  2428               	addwf	check_RFID@i,w,c
  1239  0003CC  6EE1               	movwf	fsr1l,c
  1240  0003CE  6AE2               	clrf	fsr1h,c
  1241  0003D0  50E7               	movf	indf1,w,c
  1242  0003D2  0FD0               	addlw	208
  1243  0003D4  D018               	goto	L4
  1244  0003D6                     l2474:
  1245  0003D6  5013               	movf	check_RFID@dataBuf,w,c
  1246  0003D8  2428               	addwf	check_RFID@i,w,c
  1247  0003DA  6ED9               	movwf	fsr2l,c
  1248  0003DC  6ADA               	clrf	fsr2h,c
  1249  0003DE  0E40               	movlw	64
  1250  0003E0  64DF               	cpfsgt	indf2,c
  1251  0003E2  D012               	goto	l2480
  1252  0003E4  5013               	movf	check_RFID@dataBuf,w,c
  1253  0003E6  2428               	addwf	check_RFID@i,w,c
  1254  0003E8  6ED9               	movwf	fsr2l,c
  1255  0003EA  6ADA               	clrf	fsr2h,c
  1256  0003EC  0E47               	movlw	71
  1257  0003EE  60DF               	cpfslt	indf2,c
  1258  0003F0  D00B               	goto	l2480
  1259                           
  1260                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1261  0003F2  5028               	movf	check_RFID@i,w,c
  1262  0003F4  0F16               	addlw	low check_RFID@hexBuf
  1263  0003F6  6ED9               	movwf	fsr2l,c
  1264  0003F8  6ADA               	clrf	fsr2h,c
  1265  0003FA  5013               	movf	check_RFID@dataBuf,w,c
  1266  0003FC  2428               	addwf	check_RFID@i,w,c
  1267  0003FE  6EE1               	movwf	fsr1l,c
  1268  000400  6AE2               	clrf	fsr1h,c
  1269  000402  50E7               	movf	indf1,w,c
  1270  000404  0FC9               	addlw	201
  1271  000406                     L4:
  1272  000406  6EDF               	movwf	indf2,c
  1273  000408                     l2480:
  1274                           
  1275                           ;RFID.c: 81:     }
  1276  000408  4A28               	infsnz	check_RFID@i,f,c
  1277  00040A  2A29               	incf	check_RFID@i+1,f,c
  1278  00040C  BE29               	btfsc	check_RFID@i+1,7,c
  1279  00040E  D7CA               	goto	l2468
  1280  000410  5029               	movf	check_RFID@i+1,w,c
  1281  000412  E104               	bnz	u1700
  1282  000414  0E0C               	movlw	12
  1283  000416  5C28               	subwf	check_RFID@i,w,c
  1284  000418  A0D8               	btfss	status,0,c
  1285  00041A  D7C4               	goto	l2468
  1286  00041C                     u1700:
  1287                           
  1288                           ;RFID.c: 83:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1289  00041C  5016               	movf	check_RFID@hexBuf,w,c
  1290  00041E  A4D8               	btfss	status,2,c
  1291  000420  D002               	goto	u1710
  1292  000422  0E01               	movlw	1
  1293  000424  D001               	goto	u1720
  1294  000426                     u1710:
  1295  000426  0E00               	movlw	0
  1296  000428                     u1720:
  1297  000428  1017               	iorwf	check_RFID@hexBuf+1,w,c
  1298  00042A  6E22               	movwf	check_RFID@byte1,c
  1299                           
  1300                           ;RFID.c: 84:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1301  00042C  5018               	movf	check_RFID@hexBuf+2,w,c
  1302  00042E  A4D8               	btfss	status,2,c
  1303  000430  D002               	goto	u1730
  1304  000432  0E01               	movlw	1
  1305  000434  D001               	goto	u1740
  1306  000436                     u1730:
  1307  000436  0E00               	movlw	0
  1308  000438                     u1740:
  1309  000438  1019               	iorwf	check_RFID@hexBuf+3,w,c
  1310  00043A  6E23               	movwf	check_RFID@byte2,c
  1311                           
  1312                           ;RFID.c: 85:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1313  00043C  501A               	movf	check_RFID@hexBuf+4,w,c
  1314  00043E  A4D8               	btfss	status,2,c
  1315  000440  D002               	goto	u1750
  1316  000442  0E01               	movlw	1
  1317  000444  D001               	goto	u1760
  1318  000446                     u1750:
  1319  000446  0E00               	movlw	0
  1320  000448                     u1760:
  1321  000448  101B               	iorwf	check_RFID@hexBuf+5,w,c
  1322  00044A  6E24               	movwf	check_RFID@byte3,c
  1323                           
  1324                           ;RFID.c: 86:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1325  00044C  501C               	movf	check_RFID@hexBuf+6,w,c
  1326  00044E  A4D8               	btfss	status,2,c
  1327  000450  D002               	goto	u1770
  1328  000452  0E01               	movlw	1
  1329  000454  D001               	goto	u1780
  1330  000456                     u1770:
  1331  000456  0E00               	movlw	0
  1332  000458                     u1780:
  1333  000458  101D               	iorwf	check_RFID@hexBuf+7,w,c
  1334  00045A  6E25               	movwf	check_RFID@byte4,c
  1335                           
  1336                           ;RFID.c: 87:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1337  00045C  501E               	movf	check_RFID@hexBuf+8,w,c
  1338  00045E  A4D8               	btfss	status,2,c
  1339  000460  D002               	goto	u1790
  1340  000462  0E01               	movlw	1
  1341  000464  D001               	goto	u1800
  1342  000466                     u1790:
  1343  000466  0E00               	movlw	0
  1344  000468                     u1800:
  1345  000468  101F               	iorwf	check_RFID@hexBuf+9,w,c
  1346  00046A  6E26               	movwf	check_RFID@byte5,c
  1347                           
  1348                           ;RFID.c: 88:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1349  00046C  5020               	movf	check_RFID@hexBuf+10,w,c
  1350  00046E  A4D8               	btfss	status,2,c
  1351  000470  D002               	goto	u1810
  1352  000472  0E01               	movlw	1
  1353  000474  D001               	goto	u1820
  1354  000476                     u1810:
  1355  000476  0E00               	movlw	0
  1356  000478                     u1820:
  1357  000478  1021               	iorwf	check_RFID@hexBuf+11,w,c
  1358  00047A  6E27               	movwf	check_RFID@checksum,c
  1359                           
  1360                           ;RFID.c: 91:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1361  00047C  5022               	movf	check_RFID@byte1,w,c
  1362  00047E  1823               	xorwf	check_RFID@byte2,w,c
  1363  000480  1824               	xorwf	check_RFID@byte3,w,c
  1364  000482  1825               	xorwf	check_RFID@byte4,w,c
  1365  000484  6E14               	movwf	??_check_RFID& (0+255),c
  1366  000486  6A15               	clrf	(??_check_RFID+1)& (0+255),c
  1367  000488  5027               	movf	check_RFID@checksum,w,c
  1368  00048A  1826               	xorwf	check_RFID@byte5,w,c
  1369  00048C  A4D8               	btfss	status,2,c
  1370  00048E  D002               	goto	u1830
  1371  000490  0E01               	movlw	1
  1372  000492  D001               	goto	u1840
  1373  000494                     u1830:
  1374  000494  0E00               	movlw	0
  1375  000496                     u1840:
  1376  000496  1A14               	xorwf	??_check_RFID,f,c
  1377  000498  0E00               	movlw	0
  1378  00049A  1A15               	xorwf	??_check_RFID+1,f,c
  1379  00049C  5014               	movf	??_check_RFID,w,c
  1380  00049E  1015               	iorwf	??_check_RFID+1,w,c
  1381  0004A0  B4D8               	btfsc	status,2,c
  1382  0004A2  D008               	goto	l2490
  1383                           
  1384                           ;RFID.c: 92:     {;RFID.c: 94:         SetLine(2);
  1385  0004A4  0E02               	movlw	2
  1386  0004A6  ECFC  F007         	call	_SetLine
  1387                           
  1388                           ;RFID.c: 95:         LCDString("CHECKSUM PASSED");
  1389  0004AA  0E47               	movlw	low STR_2
  1390  0004AC  6E12               	movwf	LCDString@string,c
  1391  0004AE  EC13  F008         	call	_LCDString	;wreg free
  1392                           
  1393                           ;RFID.c: 96:     }
  1394  0004B2  0012               	return	
  1395  0004B4                     l2490:
  1396                           
  1397                           ;RFID.c: 99:         SetLine(2);
  1398  0004B4  0E02               	movlw	2
  1399  0004B6  ECFC  F007         	call	_SetLine
  1400                           
  1401                           ;RFID.c: 100:         LCDString("CHECKSUM FAILED");
  1402  0004BA  0E37               	movlw	low STR_3
  1403  0004BC  6E12               	movwf	LCDString@string,c
  1404  0004BE  EC13  F008         	call	_LCDString	;wreg free
  1405  0004C2  0012               	return		;funcret
  1406  0004C4                     __end_of_check_RFID:
  1407                           	opt callstack 0
  1408                           
  1409 ;; *************** function _SetLine *****************
  1410 ;; Defined at:
  1411 ;;		line 107 in file "LCDIO.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  line            1    wreg     unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  line            1   17[COMRAM] unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1425 ;;      Params:         0       0       0       0
  1426 ;;      Locals:         1       0       0       0
  1427 ;;      Temps:          0       0       0       0
  1428 ;;      Totals:         1       0       0       0
  1429 ;;Total ram usage:        1 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    6
  1432 ;; This function calls:
  1433 ;;		_SendLCD
  1434 ;; This function is called by:
  1435 ;;		_check_RFID
  1436 ;;		_display_RFID
  1437 ;;		_waitForInput
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text5
  1442  000FF8                     __ptext5:
  1443                           	opt callstack 0
  1444  000FF8                     _SetLine:
  1445                           	opt callstack 23
  1446                           
  1447                           ;incstack = 0
  1448                           ;SetLine@line stored from wreg
  1449  000FF8  6E12               	movwf	SetLine@line,c
  1450                           
  1451                           ;LCDIO.c: 109:     if(line == 1){
  1452  000FFA  0412               	decf	SetLine@line,w,c
  1453  000FFC  A4D8               	btfss	status,2,c
  1454  000FFE  D005               	goto	l2310
  1455                           
  1456                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1457  001000  0E00               	movlw	0
  1458  001002  6E10               	movwf	SendLCD@type,c
  1459  001004  0E80               	movlw	128
  1460  001006  ECE4  F007         	call	_SendLCD
  1461  00100A                     l2310:
  1462                           
  1463                           ;LCDIO.c: 113:     if(line == 2){
  1464  00100A  0E02               	movlw	2
  1465  00100C  1812               	xorwf	SetLine@line,w,c
  1466  00100E  A4D8               	btfss	status,2,c
  1467  001010  D005               	goto	l2314
  1468                           
  1469                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1470  001012  0E00               	movlw	0
  1471  001014  6E10               	movwf	SendLCD@type,c
  1472  001016  0EC0               	movlw	192
  1473  001018  ECE4  F007         	call	_SendLCD
  1474  00101C                     l2314:
  1475                           
  1476                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1477  00101C  0E21               	movlw	33
  1478  00101E                     u2117:
  1479  00101E  2EE8               	decfsz	wreg,f,c
  1480  001020  D7FE               	bra	u2117
  1481  001022  F000               	nop	
  1482  001024  0012               	return		;funcret
  1483  001026                     __end_of_SetLine:
  1484                           	opt callstack 0
  1485                           
  1486 ;; *************** function _stabiliseAverage *****************
  1487 ;; Defined at:
  1488 ;;		line 59 in file "signal_processing.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  raw_data        2   22[COMRAM] unsigned int 
  1493 ;;  throwaway       1    0        unsigned char 
  1494 ;;  i               2   24[COMRAM] int 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       0       0       0
  1505 ;;      Locals:         5       0       0       0
  1506 ;;      Temps:          2       0       0       0
  1507 ;;      Totals:         7       0       0       0
  1508 ;;Total ram usage:        7 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    4
  1511 ;; This function calls:
  1512 ;;		_classify_data
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text6
  1519  000EE0                     __ptext6:
  1520                           	opt callstack 0
  1521  000EE0                     _stabiliseAverage:
  1522                           	opt callstack 26
  1523                           
  1524                           ;signal_processing.c: 62:     for(int i =0;i<500;i++)
  1525                           
  1526                           ;incstack = 0
  1527  000EE0  0E00               	movlw	0
  1528  000EE2  6E1A               	movwf	stabiliseAverage@i+1,c
  1529  000EE4  0E00               	movlw	0
  1530  000EE6  6E19               	movwf	stabiliseAverage@i,c
  1531  000EE8                     l2566:
  1532                           
  1533                           ;signal_processing.c: 63:     {;signal_processing.c: 64:         unsigned int raw_data =
      +                           (unsigned int)((CAP1BUFH << 8) | CAP1BUFL);
  1534  000EE8  5068               	movf	3944,w,c	;volatile
  1535  000EEA  CF69 F014          	movff	3945,??_stabiliseAverage	;volatile
  1536  000EEE  6A15               	clrf	(??_stabiliseAverage+1)& (0+255),c
  1537  000EF0  C014  F015         	movff	??_stabiliseAverage,??_stabiliseAverage+1
  1538  000EF4  6A14               	clrf	??_stabiliseAverage,c
  1539  000EF6  1014               	iorwf	??_stabiliseAverage,w,c
  1540  000EF8  6E17               	movwf	stabiliseAverage@raw_data,c
  1541  000EFA  5015               	movf	??_stabiliseAverage+1,w,c
  1542  000EFC  6E18               	movwf	stabiliseAverage@raw_data+1,c
  1543  000EFE  C017  F00E         	movff	stabiliseAverage@raw_data,classify_data@raw_data
  1544  000F02  C018  F00F         	movff	stabiliseAverage@raw_data+1,classify_data@raw_data+1
  1545  000F06  EC2C  F007         	call	_classify_data	;wreg free
  1546                           
  1547                           ;signal_processing.c: 66:     }
  1548  000F0A  4A19               	infsnz	stabiliseAverage@i,f,c
  1549  000F0C  2A1A               	incf	stabiliseAverage@i+1,f,c
  1550  000F0E  BE1A               	btfsc	stabiliseAverage@i+1,7,c
  1551  000F10  D7EB               	goto	l2566
  1552  000F12  0EF4               	movlw	244
  1553  000F14  5C19               	subwf	stabiliseAverage@i,w,c
  1554  000F16  0E01               	movlw	1
  1555  000F18  581A               	subwfb	stabiliseAverage@i+1,w,c
  1556  000F1A  B0D8               	btfsc	status,0,c
  1557  000F1C  0012               	return	
  1558  000F1E  D7E4               	goto	l2566
  1559  000F20                     __end_of_stabiliseAverage:
  1560                           	opt callstack 0
  1561                           
  1562 ;; *************** function _setup *****************
  1563 ;; Defined at:
  1564 ;;		line 54 in file "main.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1578 ;;      Params:         0       0       0       0
  1579 ;;      Locals:         0       0       0       0
  1580 ;;      Temps:          0       0       0       0
  1581 ;;      Totals:         0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    7
  1585 ;; This function calls:
  1586 ;;		_initPWM
  1587 ;;		_init_LCD
  1588 ;;		_init_RFID
  1589 ;;		_init_sensor
  1590 ;; This function is called by:
  1591 ;;		_main
  1592 ;; This function uses a non-reentrant model
  1593 ;;
  1594                           
  1595                           	psect	text7
  1596  000F5C                     __ptext7:
  1597                           	opt callstack 0
  1598  000F5C                     _setup:
  1599                           	opt callstack 23
  1600                           
  1601                           ;main.c: 57:     OSCCON = 0x72;
  1602                           
  1603                           ;incstack = 0
  1604  000F5C  0E72               	movlw	114
  1605  000F5E  6ED3               	movwf	4051,c	;volatile
  1606  000F60                     l57:
  1607  000F60  A4D3               	btfss	4051,2,c	;volatile
  1608  000F62  D7FE               	goto	l57
  1609                           
  1610                           ;main.c: 59:     INTCONbits.GIEH = 1;
  1611  000F64  8EF2               	bsf	4082,7,c	;volatile
  1612                           
  1613                           ;main.c: 60:     INTCONbits.GIEL = 1;
  1614  000F66  8CF2               	bsf	4082,6,c	;volatile
  1615                           
  1616                           ;main.c: 61:     RCONbits.IPEN=1;
  1617  000F68  8ED0               	bsf	4048,7,c	;volatile
  1618                           
  1619                           ;main.c: 64:     init_LCD();
  1620  000F6A  ECCF  F003         	call	_init_LCD	;wreg free
  1621                           
  1622                           ;main.c: 65:     init_RFID();
  1623  000F6E  EC51  F008         	call	_init_RFID	;wreg free
  1624                           
  1625                           ;main.c: 66:     init_sensor();
  1626  000F72  EC78  F008         	call	_init_sensor	;wreg free
  1627                           
  1628                           ;main.c: 67:     initPWM(199);
  1629  000F76  0E00               	movlw	0
  1630  000F78  6E0F               	movwf	initPWM@PWMperiod+1,c
  1631  000F7A  0EC7               	movlw	199
  1632  000F7C  6E0E               	movwf	initPWM@PWMperiod,c
  1633  000F7E  EC5E  F008         	call	_initPWM	;wreg free
  1634                           
  1635                           ;main.c: 70:     TRISBbits.RB0 = 0;
  1636  000F82  9093               	bcf	3987,0,c	;volatile
  1637                           
  1638                           ;main.c: 71:     TRISBbits.RB2 = 0;
  1639  000F84  9493               	bcf	3987,2,c	;volatile
  1640                           
  1641                           ;main.c: 73:     TRISDbits.RD2 = 1;
  1642  000F86  8495               	bsf	3989,2,c	;volatile
  1643                           
  1644                           ;main.c: 76:     T0CON = 0b11000111;
  1645  000F88  0EC7               	movlw	199
  1646  000F8A  6ED5               	movwf	4053,c	;volatile
  1647                           
  1648                           ;main.c: 79:     INTCONbits.TMR0IE=1;
  1649  000F8C  8AF2               	bsf	4082,5,c	;volatile
  1650                           
  1651                           ;main.c: 80:     INTCON2bits.TMR0IP=0;
  1652  000F8E  94F1               	bcf	4081,2,c	;volatile
  1653  000F90  0012               	return		;funcret
  1654  000F92                     __end_of_setup:
  1655                           	opt callstack 0
  1656                           
  1657 ;; *************** function _init_sensor *****************
  1658 ;; Defined at:
  1659 ;;		line 18 in file "signal_processing.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		wreg, status,2
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1673 ;;      Params:         0       0       0       0
  1674 ;;      Locals:         0       0       0       0
  1675 ;;      Temps:          0       0       0       0
  1676 ;;      Totals:         0       0       0       0
  1677 ;;Total ram usage:        0 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    3
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_setup
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text8
  1688  0010F0                     __ptext8:
  1689                           	opt callstack 0
  1690  0010F0                     _init_sensor:
  1691                           	opt callstack 26
  1692                           
  1693                           ;signal_processing.c: 20:     T5CON =0b00000001;
  1694                           
  1695                           ;incstack = 0
  1696  0010F0  0E01               	movlw	1
  1697  0010F2  6EB7               	movwf	4023,c	;volatile
  1698                           
  1699                           ;signal_processing.c: 21:     TRISAbits.RA2 = 1;
  1700  0010F4  8492               	bsf	3986,2,c	;volatile
  1701                           
  1702                           ;signal_processing.c: 24:     ANSEL0 = 0;
  1703  0010F6  0E00               	movlw	0
  1704  0010F8  6EB8               	movwf	4024,c	;volatile
  1705                           
  1706                           ;signal_processing.c: 25:     ANSEL1 = 0;
  1707  0010FA  0E00               	movlw	0
  1708  0010FC  6EB9               	movwf	4025,c	;volatile
  1709                           
  1710                           ;signal_processing.c: 27:     CAP1CON = 0b01000111;
  1711  0010FE  0E47               	movlw	71
  1712  001100  6E63               	movwf	3939,c	;volatile
  1713  001102  0012               	return		;funcret
  1714  001104                     __end_of_init_sensor:
  1715                           	opt callstack 0
  1716                           
  1717 ;; *************** function _init_RFID *****************
  1718 ;; Defined at:
  1719 ;;		line 13 in file "RFID.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1733 ;;      Params:         0       0       0       0
  1734 ;;      Locals:         0       0       0       0
  1735 ;;      Temps:          0       0       0       0
  1736 ;;      Totals:         0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_setup
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text9
  1748  0010A2                     __ptext9:
  1749                           	opt callstack 0
  1750  0010A2                     _init_RFID:
  1751                           	opt callstack 26
  1752                           
  1753                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1754                           
  1755                           ;incstack = 0
  1756  0010A2  8E94               	bsf	3988,7,c	;volatile
  1757                           
  1758                           ;RFID.c: 19:     SPBRG = 203;
  1759  0010A4  0ECB               	movlw	203
  1760  0010A6  6EAF               	movwf	4015,c	;volatile
  1761                           
  1762                           ;RFID.c: 20:     SPBRGH = 0;
  1763  0010A8  0E00               	movlw	0
  1764  0010AA  6EB0               	movwf	4016,c	;volatile
  1765                           
  1766                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1767  0010AC  86AA               	bsf	4010,3,c	;volatile
  1768                           
  1769                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1770  0010AE  84AC               	bsf	4012,2,c	;volatile
  1771                           
  1772                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1773  0010B0  88AB               	bsf	4011,4,c	;volatile
  1774                           
  1775                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1776  0010B2  8EAB               	bsf	4011,7,c	;volatile
  1777                           
  1778                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1779  0010B4  8AAC               	bsf	4012,5,c	;volatile
  1780                           
  1781                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1782  0010B6  8A9D               	bsf	3997,5,c	;volatile
  1783                           
  1784                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1785  0010B8  8A9F               	bsf	3999,5,c	;volatile
  1786  0010BA  0012               	return		;funcret
  1787  0010BC                     __end_of_init_RFID:
  1788                           	opt callstack 0
  1789                           
  1790 ;; *************** function _init_LCD *****************
  1791 ;; Defined at:
  1792 ;;		line 56 in file "LCDIO.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1806 ;;      Params:         0       0       0       0
  1807 ;;      Locals:         0       0       0       0
  1808 ;;      Temps:          1       0       0       0
  1809 ;;      Totals:         1       0       0       0
  1810 ;;Total ram usage:        1 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    6
  1813 ;; This function calls:
  1814 ;;		_LCDout
  1815 ;;		_SendLCD
  1816 ;; This function is called by:
  1817 ;;		_setup
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text10
  1822  00079E                     __ptext10:
  1823                           	opt callstack 0
  1824  00079E                     _init_LCD:
  1825                           	opt callstack 23
  1826                           
  1827                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1828                           
  1829                           ;incstack = 0
  1830  00079E  9094               	bcf	3988,0,c	;volatile
  1831                           
  1832                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1833  0007A0  9E92               	bcf	3986,7,c	;volatile
  1834                           
  1835                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1836  0007A2  9694               	bcf	3988,3,c	;volatile
  1837                           
  1838                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1839  0007A4  9095               	bcf	3989,0,c	;volatile
  1840                           
  1841                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1842  0007A6  9295               	bcf	3989,1,c	;volatile
  1843                           
  1844                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1845  0007A8  9C92               	bcf	3986,6,c	;volatile
  1846                           
  1847                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1848  0007AA  908C               	bcf	3980,0,c	;volatile
  1849                           
  1850                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1851  0007AC  928C               	bcf	3980,1,c	;volatile
  1852                           
  1853                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1854  0007AE  968B               	bcf	3979,3,c	;volatile
  1855                           
  1856                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1857  0007B0  908B               	bcf	3979,0,c	;volatile
  1858                           
  1859                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1860  0007B2  9C89               	bcf	3977,6,c	;volatile
  1861                           
  1862                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1863  0007B4  9E89               	bcf	3977,7,c	;volatile
  1864                           
  1865                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1866  0007B6  0E27               	movlw	39
  1867  0007B8  6E12               	movwf	??_init_LCD& (0+255),c
  1868  0007BA  0EF5               	movlw	245
  1869  0007BC                     u2127:
  1870  0007BC  2EE8               	decfsz	wreg,f,c
  1871  0007BE  D7FE               	bra	u2127
  1872  0007C0  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1873  0007C2  D7FC               	bra	u2127
  1874  0007C4  F000               	nop	
  1875                           
  1876                           ;LCDIO.c: 76:  LCDout(0b0011);
  1877  0007C6  0E03               	movlw	3
  1878  0007C8  EC71  F005         	call	_LCDout
  1879                           
  1880                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1881  0007CC  0E0D               	movlw	13
  1882  0007CE  6E12               	movwf	??_init_LCD& (0+255),c
  1883  0007D0  0EFC               	movlw	252
  1884  0007D2                     u2137:
  1885  0007D2  2EE8               	decfsz	wreg,f,c
  1886  0007D4  D7FE               	bra	u2137
  1887  0007D6  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1888  0007D8  D7FC               	bra	u2137
  1889                           
  1890                           ;LCDIO.c: 78:  LCDout(0b0011);
  1891  0007DA  0E03               	movlw	3
  1892  0007DC  EC71  F005         	call	_LCDout
  1893                           
  1894                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1895  0007E0  0E85               	movlw	133
  1896  0007E2                     u2147:
  1897  0007E2  2EE8               	decfsz	wreg,f,c
  1898  0007E4  D7FE               	bra	u2147
  1899  0007E6  F000               	nop	
  1900                           
  1901                           ;LCDIO.c: 80:  LCDout(0b0011);
  1902  0007E8  0E03               	movlw	3
  1903  0007EA  EC71  F005         	call	_LCDout
  1904                           
  1905                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1906  0007EE  0E21               	movlw	33
  1907  0007F0                     u2157:
  1908  0007F0  2EE8               	decfsz	wreg,f,c
  1909  0007F2  D7FE               	bra	u2157
  1910  0007F4  F000               	nop	
  1911                           
  1912                           ;LCDIO.c: 82:  LCDout(0b0010);
  1913  0007F6  0E02               	movlw	2
  1914  0007F8  EC71  F005         	call	_LCDout
  1915                           
  1916                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1917  0007FC  0E21               	movlw	33
  1918  0007FE                     u2167:
  1919  0007FE  2EE8               	decfsz	wreg,f,c
  1920  000800  D7FE               	bra	u2167
  1921  000802  F000               	nop	
  1922                           
  1923                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1924  000804  0E00               	movlw	0
  1925  000806  6E10               	movwf	SendLCD@type,c
  1926  000808  0E28               	movlw	40
  1927  00080A  ECE4  F007         	call	_SendLCD
  1928                           
  1929                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1930  00080E  0E21               	movlw	33
  1931  000810                     u2177:
  1932  000810  2EE8               	decfsz	wreg,f,c
  1933  000812  D7FE               	bra	u2177
  1934  000814  F000               	nop	
  1935                           
  1936                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1937  000816  0E00               	movlw	0
  1938  000818  6E10               	movwf	SendLCD@type,c
  1939  00081A  0E08               	movlw	8
  1940  00081C  ECE4  F007         	call	_SendLCD
  1941                           
  1942                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1943  000820  0E21               	movlw	33
  1944  000822                     u2187:
  1945  000822  2EE8               	decfsz	wreg,f,c
  1946  000824  D7FE               	bra	u2187
  1947  000826  F000               	nop	
  1948                           
  1949                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1950  000828  0E00               	movlw	0
  1951  00082A  6E10               	movwf	SendLCD@type,c
  1952  00082C  0E01               	movlw	1
  1953  00082E  ECE4  F007         	call	_SendLCD
  1954                           
  1955                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1956  000832  0E0D               	movlw	13
  1957  000834  6E12               	movwf	??_init_LCD& (0+255),c
  1958  000836  0EFC               	movlw	252
  1959  000838                     u2197:
  1960  000838  2EE8               	decfsz	wreg,f,c
  1961  00083A  D7FE               	bra	u2197
  1962  00083C  2E12               	decfsz	??_init_LCD& (0+255),f,c
  1963  00083E  D7FC               	bra	u2197
  1964                           
  1965                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  1966  000840  0E00               	movlw	0
  1967  000842  6E10               	movwf	SendLCD@type,c
  1968  000844  0E06               	movlw	6
  1969  000846  ECE4  F007         	call	_SendLCD
  1970                           
  1971                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1972  00084A  0E21               	movlw	33
  1973  00084C                     u2207:
  1974  00084C  2EE8               	decfsz	wreg,f,c
  1975  00084E  D7FE               	bra	u2207
  1976  000850  F000               	nop	
  1977                           
  1978                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  1979  000852  0E00               	movlw	0
  1980  000854  6E10               	movwf	SendLCD@type,c
  1981  000856  0E0C               	movlw	12
  1982  000858  ECE4  F007         	call	_SendLCD
  1983                           
  1984                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1985  00085C  0E21               	movlw	33
  1986  00085E                     u2217:
  1987  00085E  2EE8               	decfsz	wreg,f,c
  1988  000860  D7FE               	bra	u2217
  1989  000862  F000               	nop	
  1990  000864  0012               	return		;funcret
  1991  000866                     __end_of_init_LCD:
  1992                           	opt callstack 0
  1993                           
  1994 ;; *************** function _initPWM *****************
  1995 ;; Defined at:
  1996 ;;		line 6 in file "dc_motor.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  PWMperiod       2   13[COMRAM] int 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2010 ;;      Params:         2       0       0       0
  2011 ;;      Locals:         0       0       0       0
  2012 ;;      Temps:          0       0       0       0
  2013 ;;      Totals:         2       0       0       0
  2014 ;;Total ram usage:        2 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    3
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		_setup
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text11
  2025  0010BC                     __ptext11:
  2026                           	opt callstack 0
  2027  0010BC                     _initPWM:
  2028                           	opt callstack 26
  2029                           
  2030                           ;dc_motor.c: 8:     PTCON0 = 0b00000000;
  2031                           
  2032                           ;incstack = 0
  2033  0010BC  0E00               	movlw	0
  2034  0010BE  6E7F               	movwf	3967,c	;volatile
  2035                           
  2036                           ;dc_motor.c: 9:     PTCON1 = 0b10000000;
  2037  0010C0  0E80               	movlw	128
  2038  0010C2  6E7E               	movwf	3966,c	;volatile
  2039                           
  2040                           ;dc_motor.c: 11:     PWMCON0 = 0b01101111;
  2041  0010C4  0E6F               	movlw	111
  2042  0010C6  6E6F               	movwf	3951,c	;volatile
  2043                           
  2044                           ;dc_motor.c: 12:     PWMCON1 = 0x00;
  2045  0010C8  0E00               	movlw	0
  2046  0010CA  6E6E               	movwf	3950,c	;volatile
  2047                           
  2048                           ;dc_motor.c: 14:     PTPERL = (0b11111111 & PWMperiod);
  2049  0010CC  C00E  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2050                           
  2051                           ;dc_motor.c: 15:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2052  0010D0  C00F  FF7A         	movff	initPWM@PWMperiod+1,3962	;volatile
  2053  0010D4  0012               	return		;funcret
  2054  0010D6                     __end_of_initPWM:
  2055                           	opt callstack 0
  2056                           
  2057 ;; *************** function _scanForBeacon *****************
  2058 ;; Defined at:
  2059 ;;		line 23 in file "subroutines.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2062 ;;		 -> main@motorL(9), 
  2063 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2064 ;;		 -> main@motorR(9), 
  2065 ;;  speed           2   44[COMRAM] int 
  2066 ;;  move            1   46[COMRAM] PTR struct Movement_stor
  2067 ;;		 -> travel_moves(61), 
  2068 ;;  exit_flag       1   47[COMRAM] PTR volatile unsigned ch
  2069 ;;		 -> RFID_flag(1), 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  raw_data        2   50[COMRAM] unsigned int 
  2072 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      unsigned char 
  2075 ;; Registers used:
  2076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2082 ;;      Params:         6       0       0       0
  2083 ;;      Locals:         3       0       0       0
  2084 ;;      Temps:          2       0       0       0
  2085 ;;      Totals:        11       0       0       0
  2086 ;;Total ram usage:       11 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    7
  2089 ;; This function calls:
  2090 ;;		_LCDString
  2091 ;;		_classify_data
  2092 ;;		_clearLCD
  2093 ;;		_turnLeft
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text12
  2100  0009DA                     __ptext12:
  2101                           	opt callstack 0
  2102  0009DA                     _scanForBeacon:
  2103                           	opt callstack 23
  2104                           
  2105                           ;subroutines.c: 23: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 24:                         struct Movement_storage *move, v
      +                          olatile char *exit_flag);subroutines.c: 25: {;subroutines.c: 26:     move-> move_type[mo
      +                          ve->move_number] = 1;
  2106                           
  2107                           ;incstack = 0
  2108  0009DA  502F               	movf	scanForBeacon@move,w,c
  2109  0009DC  6ED9               	movwf	fsr2l,c
  2110  0009DE  6ADA               	clrf	fsr2h,c
  2111  0009E0  0E3C               	movlw	60
  2112  0009E2  26D9               	addwf	fsr2l,f,c
  2113  0009E4  50DF               	movf	indf2,w,c
  2114  0009E6  6E31               	movwf	??_scanForBeacon& (0+255),c
  2115  0009E8  502F               	movf	scanForBeacon@move,w,c
  2116  0009EA  2431               	addwf	??_scanForBeacon,w,c
  2117  0009EC  6ED9               	movwf	fsr2l,c
  2118  0009EE  6ADA               	clrf	fsr2h,c
  2119  0009F0  0E01               	movlw	1
  2120  0009F2  6EDF               	movwf	indf2,c
  2121                           
  2122                           ;subroutines.c: 27:     turnLeft(mL,mR,speed);
  2123  0009F4  C02B  F024         	movff	scanForBeacon@mL,turnLeft@mL
  2124  0009F8  C02C  F025         	movff	scanForBeacon@mR,turnLeft@mR
  2125  0009FC  C02D  F026         	movff	scanForBeacon@speed,turnLeft@max_power
  2126  000A00  C02E  F027         	movff	scanForBeacon@speed+1,turnLeft@max_power+1
  2127  000A04  EC5A  F006         	call	_turnLeft	;wreg free
  2128                           
  2129                           ;subroutines.c: 28:     clearLCD();
  2130  000A08  EC6B  F008         	call	_clearLCD	;wreg free
  2131                           
  2132                           ;subroutines.c: 29:     LCDString("SEARCHING");
  2133  000A0C  0E91               	movlw	low STR_4
  2134  000A0E  6E12               	movwf	LCDString@string,c
  2135  000A10  EC13  F008         	call	_LCDString	;wreg free
  2136  000A14                     l2604:
  2137                           
  2138                           ;subroutines.c: 33:     {;subroutines.c: 35:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2139  000A14  5068               	movf	3944,w,c	;volatile
  2140  000A16  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2141  000A1A  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2142  000A1C  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2143  000A20  6A31               	clrf	??_scanForBeacon,c
  2144  000A22  1031               	iorwf	??_scanForBeacon,w,c
  2145  000A24  6E33               	movwf	scanForBeacon@raw_data,c
  2146  000A26  5032               	movf	??_scanForBeacon+1,w,c
  2147  000A28  6E34               	movwf	scanForBeacon@raw_data+1,c
  2148                           
  2149                           ;subroutines.c: 38:         char beacon_location = classify_data(raw_data);
  2150  000A2A  C033  F00E         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2151  000A2E  C034  F00F         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2152  000A32  EC2C  F007         	call	_classify_data	;wreg free
  2153  000A36  6E35               	movwf	scanForBeacon@beacon_location,c
  2154                           
  2155                           ;subroutines.c: 41:         if(*exit_flag == 1)
  2156  000A38  5030               	movf	scanForBeacon@exit_flag,w,c
  2157  000A3A  6ED9               	movwf	fsr2l,c
  2158  000A3C  6ADA               	clrf	fsr2h,c
  2159  000A3E  04DE               	decf	postinc2,w,c
  2160  000A40  A4D8               	btfss	status,2,c
  2161  000A42  D002               	goto	l2616
  2162                           
  2163                           ;subroutines.c: 42:         {;subroutines.c: 43:             return 2;
  2164  000A44  0E02               	movlw	2
  2165  000A46  0012               	return	
  2166  000A48                     l2616:
  2167  000A48  0435               	decf	scanForBeacon@beacon_location,w,c
  2168  000A4A  A4D8               	btfss	status,2,c
  2169  000A4C  D7E3               	goto	l2604
  2170                           
  2171                           ;subroutines.c: 47:         {;subroutines.c: 48:             move-> move_number += 1;
  2172  000A4E  502F               	movf	scanForBeacon@move,w,c
  2173  000A50  6ED9               	movwf	fsr2l,c
  2174  000A52  6ADA               	clrf	fsr2h,c
  2175  000A54  0E3C               	movlw	60
  2176  000A56  26D9               	addwf	fsr2l,f,c
  2177  000A58  2ADF               	incf	indf2,f,c
  2178                           
  2179                           ;subroutines.c: 49:             return 1;
  2180  000A5A  0E01               	movlw	1
  2181  000A5C  0012               	return		;funcret
  2182  000A5E                     __end_of_scanForBeacon:
  2183                           	opt callstack 0
  2184                           
  2185 ;; *************** function _turnLeft *****************
  2186 ;; Defined at:
  2187 ;;		line 54 in file "dc_motor.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2190 ;;		 -> main@motorL(9), 
  2191 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2192 ;;		 -> main@motorR(9), 
  2193 ;;  max_power       2   37[COMRAM] int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  i               2   40[COMRAM] int 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2205 ;;      Params:         4       0       0       0
  2206 ;;      Locals:         2       0       0       0
  2207 ;;      Temps:          1       0       0       0
  2208 ;;      Totals:         7       0       0       0
  2209 ;;Total ram usage:        7 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    5
  2212 ;; This function calls:
  2213 ;;		_setMotorPWM
  2214 ;; This function is called by:
  2215 ;;		_scanForBeacon
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text13
  2220  000CB4                     __ptext13:
  2221                           	opt callstack 0
  2222  000CB4                     _turnLeft:
  2223                           	opt callstack 24
  2224                           
  2225                           ;dc_motor.c: 54: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, int max_power);
      +                          dc_motor.c: 55: {;dc_motor.c: 57:     mL->direction = 0;
  2226                           
  2227                           ;incstack = 0
  2228  000CB4  5024               	movf	turnLeft@mL,w,c
  2229  000CB6  6ED9               	movwf	fsr2l,c
  2230  000CB8  6ADA               	clrf	fsr2h,c
  2231  000CBA  0E01               	movlw	1
  2232  000CBC  26D9               	addwf	fsr2l,f,c
  2233  000CBE  0E00               	movlw	0
  2234  000CC0  6EDF               	movwf	indf2,c
  2235                           
  2236                           ;dc_motor.c: 58:     mR->direction = 1;
  2237  000CC2  5025               	movf	turnLeft@mR,w,c
  2238  000CC4  6ED9               	movwf	fsr2l,c
  2239  000CC6  6ADA               	clrf	fsr2h,c
  2240  000CC8  0E01               	movlw	1
  2241  000CCA  26D9               	addwf	fsr2l,f,c
  2242  000CCC  0E01               	movlw	1
  2243  000CCE  6EDF               	movwf	indf2,c
  2244                           
  2245                           ;dc_motor.c: 60:     for(int i = 0; i<max_power;i++){
  2246  000CD0  0E00               	movlw	0
  2247  000CD2  6E2A               	movwf	turnLeft@i+1,c
  2248  000CD4  0E00               	movlw	0
  2249  000CD6  6E29               	movwf	turnLeft@i,c
  2250  000CD8  D01B               	goto	l2408
  2251  000CDA                     l2398:
  2252                           
  2253                           ;dc_motor.c: 61:         mL->power = i;
  2254  000CDA  5024               	movf	turnLeft@mL,w,c
  2255  000CDC  6ED9               	movwf	fsr2l,c
  2256  000CDE  6ADA               	clrf	fsr2h,c
  2257  000CE0  C029  FFDF         	movff	turnLeft@i,indf2
  2258                           
  2259                           ;dc_motor.c: 62:         mR->power = i;
  2260  000CE4  5025               	movf	turnLeft@mR,w,c
  2261  000CE6  6ED9               	movwf	fsr2l,c
  2262  000CE8  6ADA               	clrf	fsr2h,c
  2263  000CEA  C029  FFDF         	movff	turnLeft@i,indf2
  2264                           
  2265                           ;dc_motor.c: 64:         setMotorPWM(mL);
  2266  000CEE  C024  F01C         	movff	turnLeft@mL,setMotorPWM@m
  2267  000CF2  EC62  F002         	call	_setMotorPWM	;wreg free
  2268                           
  2269                           ;dc_motor.c: 65:         setMotorPWM(mR);
  2270  000CF6  C025  F01C         	movff	turnLeft@mR,setMotorPWM@m
  2271  000CFA  EC62  F002         	call	_setMotorPWM	;wreg free
  2272                           
  2273                           ;dc_motor.c: 66:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2274  000CFE  0E03               	movlw	3
  2275  000D00  6E28               	movwf	??_turnLeft& (0+255),c
  2276  000D02  0E98               	movlw	152
  2277  000D04                     u2227:
  2278  000D04  2EE8               	decfsz	wreg,f,c
  2279  000D06  D7FE               	bra	u2227
  2280  000D08  2E28               	decfsz	??_turnLeft& (0+255),f,c
  2281  000D0A  D7FC               	bra	u2227
  2282                           
  2283                           ;dc_motor.c: 67:     }
  2284  000D0C  4A29               	infsnz	turnLeft@i,f,c
  2285  000D0E  2A2A               	incf	turnLeft@i+1,f,c
  2286  000D10                     l2408:
  2287  000D10  5026               	movf	turnLeft@max_power,w,c
  2288  000D12  5C29               	subwf	turnLeft@i,w,c
  2289  000D14  502A               	movf	turnLeft@i+1,w,c
  2290  000D16  0A80               	xorlw	128
  2291  000D18  6E28               	movwf	??_turnLeft& (0+255),c
  2292  000D1A  5027               	movf	turnLeft@max_power+1,w,c
  2293  000D1C  0A80               	xorlw	128
  2294  000D1E  5828               	subwfb	??_turnLeft& (0+255),w,c
  2295  000D20  B0D8               	btfsc	status,0,c
  2296  000D22  0012               	return	
  2297  000D24  D7DA               	goto	l2398
  2298  000D26                     __end_of_turnLeft:
  2299                           	opt callstack 0
  2300                           
  2301 ;; *************** function _returnHome *****************
  2302 ;; Defined at:
  2303 ;;		line 119 in file "subroutines.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2306 ;;		 -> main@motorL(9), 
  2307 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2308 ;;		 -> main@motorR(9), 
  2309 ;;  move_speed      2   44[COMRAM] int 
  2310 ;;  search_speed    2   46[COMRAM] int 
  2311 ;;  move            1   48[COMRAM] PTR struct Movement_stor
  2312 ;;		 -> travel_moves(61), 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  i               2    0        int 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      unsigned char 
  2317 ;; Registers used:
  2318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2324 ;;      Params:         7       0       0       0
  2325 ;;      Locals:         2       0       0       0
  2326 ;;      Temps:          2       0       0       0
  2327 ;;      Totals:        11       0       0       0
  2328 ;;Total ram usage:       11 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    7
  2331 ;; This function calls:
  2332 ;;		_LCDString
  2333 ;;		_clearLCD
  2334 ;;		_moveBackward
  2335 ;;		_stop
  2336 ;;		_turnRight
  2337 ;; This function is called by:
  2338 ;;		_main
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text14
  2343  0005D8                     __ptext14:
  2344                           	opt callstack 0
  2345  0005D8                     _returnHome:
  2346                           	opt callstack 23
  2347                           
  2348                           ;subroutines.c: 119: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, 
      +                          int move_speed,;subroutines.c: 120:                             int search_speed, struct
      +                           Movement_storage *move);subroutines.c: 121: {;subroutines.c: 123:     stop(mL,mR,move_s
      +                          peed);
  2349                           
  2350                           ;incstack = 0
  2351  0005D8  C02B  F024         	movff	returnHome@mL,stop@mL
  2352  0005DC  C02C  F025         	movff	returnHome@mR,stop@mR
  2353  0005E0  C02D  F026         	movff	returnHome@move_speed,stop@initial_speed
  2354  0005E4  C02E  F027         	movff	returnHome@move_speed+1,stop@initial_speed+1
  2355  0005E8  EC04  F007         	call	_stop	;wreg free
  2356                           
  2357                           ;subroutines.c: 124:     clearLCD();
  2358  0005EC  EC6B  F008         	call	_clearLCD	;wreg free
  2359                           
  2360                           ;subroutines.c: 125:     LCDString("RETURNING HOME");
  2361  0005F0  0E66               	movlw	low STR_6
  2362  0005F2  6E12               	movwf	LCDString@string,c
  2363  0005F4  EC13  F008         	call	_LCDString	;wreg free
  2364  0005F8  D063               	goto	l343
  2365  0005FA                     l2674:
  2366                           
  2367                           ;subroutines.c: 129:     {;subroutines.c: 131:         if(move->move_type[move->move_num
      +                          ber] == 0)
  2368  0005FA  5031               	movf	returnHome@move,w,c
  2369  0005FC  6ED9               	movwf	fsr2l,c
  2370  0005FE  6ADA               	clrf	fsr2h,c
  2371  000600  0E3C               	movlw	60
  2372  000602  26D9               	addwf	fsr2l,f,c
  2373  000604  50DF               	movf	indf2,w,c
  2374  000606  6E32               	movwf	??_returnHome& (0+255),c
  2375  000608  5031               	movf	returnHome@move,w,c
  2376  00060A  2432               	addwf	??_returnHome,w,c
  2377  00060C  6ED9               	movwf	fsr2l,c
  2378  00060E  6ADA               	clrf	fsr2h,c
  2379  000610  50DF               	movf	indf2,w,c
  2380  000612  A4D8               	btfss	status,2,c
  2381  000614  D021               	goto	l2680
  2382                           
  2383                           ;subroutines.c: 132:         {;subroutines.c: 134:             moveBackward(mL,mR,move_s
      +                          peed);
  2384  000616  C02B  F024         	movff	returnHome@mL,moveBackward@mL
  2385  00061A  C02C  F025         	movff	returnHome@mR,moveBackward@mR
  2386  00061E  C02D  F026         	movff	returnHome@move_speed,moveBackward@max_power
  2387  000622  C02E  F027         	movff	returnHome@move_speed+1,moveBackward@max_power+1
  2388  000626  ECAD  F005         	call	_moveBackward	;wreg free
  2389  00062A                     l2678:
  2390  00062A  5031               	movf	returnHome@move,w,c
  2391  00062C  6ED9               	movwf	fsr2l,c
  2392  00062E  6ADA               	clrf	fsr2h,c
  2393  000630  0E3C               	movlw	60
  2394  000632  26D9               	addwf	fsr2l,f,c
  2395  000634  50DF               	movf	indf2,w,c
  2396  000636  0D02               	mullw	2
  2397  000638  5031               	movf	returnHome@move,w,c
  2398  00063A  24F3               	addwf	prodl,w,c
  2399  00063C  6ED9               	movwf	fsr2l,c
  2400  00063E  6ADA               	clrf	fsr2h,c
  2401  000640  0E14               	movlw	20
  2402  000642  26D9               	addwf	fsr2l,f,c
  2403  000644  0E01               	movlw	1
  2404  000646  BEDB               	btfsc	plusw2,7,c
  2405  000648  D035               	goto	u2010
  2406  00064A  0E01               	movlw	1
  2407  00064C  50DB               	movf	plusw2,w,c
  2408  00064E  E1ED               	bnz	l2678
  2409  000650  04DE               	decf	postinc2,w,c
  2410  000652  A0D8               	btfss	status,0,c
  2411  000654  D02F               	goto	u2010
  2412  000656  D7E9               	goto	l2678
  2413  000658                     l2680:
  2414  000658  5031               	movf	returnHome@move,w,c
  2415  00065A  6ED9               	movwf	fsr2l,c
  2416  00065C  6ADA               	clrf	fsr2h,c
  2417  00065E  0E3C               	movlw	60
  2418  000660  26D9               	addwf	fsr2l,f,c
  2419  000662  50DF               	movf	indf2,w,c
  2420  000664  6E32               	movwf	??_returnHome& (0+255),c
  2421  000666  5031               	movf	returnHome@move,w,c
  2422  000668  2432               	addwf	??_returnHome,w,c
  2423  00066A  6ED9               	movwf	fsr2l,c
  2424  00066C  6ADA               	clrf	fsr2h,c
  2425  00066E  04DE               	decf	postinc2,w,c
  2426  000670  A4D8               	btfss	status,2,c
  2427  000672  D020               	goto	u2010
  2428                           
  2429                           ;subroutines.c: 139:         {;subroutines.c: 141:             turnRight(mL,mR,search_sp
      +                          eed);
  2430  000674  C02B  F024         	movff	returnHome@mL,turnRight@mL
  2431  000678  C02C  F025         	movff	returnHome@mR,turnRight@mR
  2432  00067C  C02F  F026         	movff	returnHome@search_speed,turnRight@max_power
  2433  000680  C030  F027         	movff	returnHome@search_speed+1,turnRight@max_power+1
  2434  000684  EC93  F006         	call	_turnRight	;wreg free
  2435  000688                     l2684:
  2436  000688  5031               	movf	returnHome@move,w,c
  2437  00068A  6ED9               	movwf	fsr2l,c
  2438  00068C  6ADA               	clrf	fsr2h,c
  2439  00068E  0E3C               	movlw	60
  2440  000690  26D9               	addwf	fsr2l,f,c
  2441  000692  50DF               	movf	indf2,w,c
  2442  000694  0D02               	mullw	2
  2443  000696  5031               	movf	returnHome@move,w,c
  2444  000698  24F3               	addwf	prodl,w,c
  2445  00069A  6ED9               	movwf	fsr2l,c
  2446  00069C  6ADA               	clrf	fsr2h,c
  2447  00069E  0E14               	movlw	20
  2448  0006A0  26D9               	addwf	fsr2l,f,c
  2449  0006A2  0E01               	movlw	1
  2450  0006A4  BEDB               	btfsc	plusw2,7,c
  2451  0006A6  D006               	goto	u2010
  2452  0006A8  0E01               	movlw	1
  2453  0006AA  50DB               	movf	plusw2,w,c
  2454  0006AC  E1ED               	bnz	l2684
  2455  0006AE  04DE               	decf	postinc2,w,c
  2456  0006B0  B0D8               	btfsc	status,0,c
  2457  0006B2  D7EA               	goto	l2684
  2458  0006B4                     u2010:
  2459                           
  2460                           ;subroutines.c: 144:     }
  2461  0006B4  5031               	movf	returnHome@move,w,c
  2462  0006B6  6ED9               	movwf	fsr2l,c
  2463  0006B8  6ADA               	clrf	fsr2h,c
  2464  0006BA  0E3C               	movlw	60
  2465  0006BC  26D9               	addwf	fsr2l,f,c
  2466  0006BE  06DF               	decf	indf2,f,c
  2467  0006C0                     l343:
  2468  0006C0  5031               	movf	returnHome@move,w,c
  2469  0006C2  6ED9               	movwf	fsr2l,c
  2470  0006C4  6ADA               	clrf	fsr2h,c
  2471  0006C6  0E3C               	movlw	60
  2472  0006C8  26D9               	addwf	fsr2l,f,c
  2473  0006CA  50DF               	movf	indf2,w,c
  2474  0006CC  A4D8               	btfss	status,2,c
  2475  0006CE  D795               	goto	l2674
  2476                           
  2477                           ;subroutines.c: 145:     return 3;
  2478  0006D0  0E03               	movlw	3
  2479  0006D2  0012               	return		;funcret
  2480  0006D4                     __end_of_returnHome:
  2481                           	opt callstack 0
  2482                           
  2483 ;; *************** function _turnRight *****************
  2484 ;; Defined at:
  2485 ;;		line 70 in file "dc_motor.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2488 ;;		 -> main@motorL(9), 
  2489 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2490 ;;		 -> main@motorR(9), 
  2491 ;;  max_power       2   37[COMRAM] int 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  i               2   40[COMRAM] int 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2503 ;;      Params:         4       0       0       0
  2504 ;;      Locals:         2       0       0       0
  2505 ;;      Temps:          1       0       0       0
  2506 ;;      Totals:         7       0       0       0
  2507 ;;Total ram usage:        7 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    5
  2510 ;; This function calls:
  2511 ;;		_setMotorPWM
  2512 ;; This function is called by:
  2513 ;;		_returnHome
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text15
  2518  000D26                     __ptext15:
  2519                           	opt callstack 0
  2520  000D26                     _turnRight:
  2521                           	opt callstack 24
  2522                           
  2523                           ;dc_motor.c: 70: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 71: {;dc_motor.c: 73:     mL->direction = 1;
  2524                           
  2525                           ;incstack = 0
  2526  000D26  5024               	movf	turnRight@mL,w,c
  2527  000D28  6ED9               	movwf	fsr2l,c
  2528  000D2A  6ADA               	clrf	fsr2h,c
  2529  000D2C  0E01               	movlw	1
  2530  000D2E  26D9               	addwf	fsr2l,f,c
  2531  000D30  0E01               	movlw	1
  2532  000D32  6EDF               	movwf	indf2,c
  2533                           
  2534                           ;dc_motor.c: 74:     mR->direction = 0;
  2535  000D34  5025               	movf	turnRight@mR,w,c
  2536  000D36  6ED9               	movwf	fsr2l,c
  2537  000D38  6ADA               	clrf	fsr2h,c
  2538  000D3A  0E01               	movlw	1
  2539  000D3C  26D9               	addwf	fsr2l,f,c
  2540  000D3E  0E00               	movlw	0
  2541  000D40  6EDF               	movwf	indf2,c
  2542                           
  2543                           ;dc_motor.c: 76:     for(int i = 0; i<max_power;i++){
  2544  000D42  0E00               	movlw	0
  2545  000D44  6E2A               	movwf	turnRight@i+1,c
  2546  000D46  0E00               	movlw	0
  2547  000D48  6E29               	movwf	turnRight@i,c
  2548  000D4A  D01B               	goto	l2424
  2549  000D4C                     l2414:
  2550                           
  2551                           ;dc_motor.c: 77:         mL->power = i;
  2552  000D4C  5024               	movf	turnRight@mL,w,c
  2553  000D4E  6ED9               	movwf	fsr2l,c
  2554  000D50  6ADA               	clrf	fsr2h,c
  2555  000D52  C029  FFDF         	movff	turnRight@i,indf2
  2556                           
  2557                           ;dc_motor.c: 78:         mR->power = i;
  2558  000D56  5025               	movf	turnRight@mR,w,c
  2559  000D58  6ED9               	movwf	fsr2l,c
  2560  000D5A  6ADA               	clrf	fsr2h,c
  2561  000D5C  C029  FFDF         	movff	turnRight@i,indf2
  2562                           
  2563                           ;dc_motor.c: 80:         setMotorPWM(mL);
  2564  000D60  C024  F01C         	movff	turnRight@mL,setMotorPWM@m
  2565  000D64  EC62  F002         	call	_setMotorPWM	;wreg free
  2566                           
  2567                           ;dc_motor.c: 81:         setMotorPWM(mR);
  2568  000D68  C025  F01C         	movff	turnRight@mR,setMotorPWM@m
  2569  000D6C  EC62  F002         	call	_setMotorPWM	;wreg free
  2570                           
  2571                           ;dc_motor.c: 82:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2572  000D70  0E03               	movlw	3
  2573  000D72  6E28               	movwf	??_turnRight& (0+255),c
  2574  000D74  0E98               	movlw	152
  2575  000D76                     u2237:
  2576  000D76  2EE8               	decfsz	wreg,f,c
  2577  000D78  D7FE               	bra	u2237
  2578  000D7A  2E28               	decfsz	??_turnRight& (0+255),f,c
  2579  000D7C  D7FC               	bra	u2237
  2580                           
  2581                           ;dc_motor.c: 83:     }
  2582  000D7E  4A29               	infsnz	turnRight@i,f,c
  2583  000D80  2A2A               	incf	turnRight@i+1,f,c
  2584  000D82                     l2424:
  2585  000D82  5026               	movf	turnRight@max_power,w,c
  2586  000D84  5C29               	subwf	turnRight@i,w,c
  2587  000D86  502A               	movf	turnRight@i+1,w,c
  2588  000D88  0A80               	xorlw	128
  2589  000D8A  6E28               	movwf	??_turnRight& (0+255),c
  2590  000D8C  5027               	movf	turnRight@max_power+1,w,c
  2591  000D8E  0A80               	xorlw	128
  2592  000D90  5828               	subwfb	??_turnRight& (0+255),w,c
  2593  000D92  B0D8               	btfsc	status,0,c
  2594  000D94  0012               	return	
  2595  000D96  D7DA               	goto	l2414
  2596  000D98                     __end_of_turnRight:
  2597                           	opt callstack 0
  2598                           
  2599 ;; *************** function _stop *****************
  2600 ;; Defined at:
  2601 ;;		line 41 in file "dc_motor.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2604 ;;		 -> main@motorL(9), 
  2605 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2606 ;;		 -> main@motorR(9), 
  2607 ;;  initial_spee    2   37[COMRAM] int 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  i               2   40[COMRAM] int 
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2619 ;;      Params:         4       0       0       0
  2620 ;;      Locals:         2       0       0       0
  2621 ;;      Temps:          1       0       0       0
  2622 ;;      Totals:         7       0       0       0
  2623 ;;Total ram usage:        7 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    5
  2626 ;; This function calls:
  2627 ;;		_setMotorPWM
  2628 ;; This function is called by:
  2629 ;;		_returnHome
  2630 ;;		_stopAndDisplay
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text16
  2635  000E08                     __ptext16:
  2636                           	opt callstack 0
  2637  000E08                     _stop:
  2638                           	opt callstack 24
  2639                           
  2640                           ;dc_motor.c: 41: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 42: {;dc_motor.c: 43:  for(int i = initial_speed; i > 0; i--)
  2641                           
  2642                           ;incstack = 0
  2643  000E08  C026  F029         	movff	stop@initial_speed,stop@i
  2644  000E0C  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  2645  000E10                     l2378:
  2646  000E10  BE2A               	btfsc	stop@i+1,7,c
  2647  000E12  0012               	return	
  2648  000E14  502A               	movf	stop@i+1,w,c
  2649  000E16  E103               	bnz	l2382
  2650  000E18  0429               	decf	stop@i,w,c
  2651  000E1A  A0D8               	btfss	status,0,c
  2652  000E1C  0012               	return	
  2653  000E1E                     l2382:
  2654                           
  2655                           ;dc_motor.c: 44:     {;dc_motor.c: 45:         mL->power = i;
  2656  000E1E  5024               	movf	stop@mL,w,c
  2657  000E20  6ED9               	movwf	fsr2l,c
  2658  000E22  6ADA               	clrf	fsr2h,c
  2659  000E24  C029  FFDF         	movff	stop@i,indf2
  2660                           
  2661                           ;dc_motor.c: 46:         mR->power = i;
  2662  000E28  5025               	movf	stop@mR,w,c
  2663  000E2A  6ED9               	movwf	fsr2l,c
  2664  000E2C  6ADA               	clrf	fsr2h,c
  2665  000E2E  C029  FFDF         	movff	stop@i,indf2
  2666                           
  2667                           ;dc_motor.c: 47:         setMotorPWM(mL);
  2668  000E32  C024  F01C         	movff	stop@mL,setMotorPWM@m
  2669  000E36  EC62  F002         	call	_setMotorPWM	;wreg free
  2670                           
  2671                           ;dc_motor.c: 48:         setMotorPWM(mR);
  2672  000E3A  C025  F01C         	movff	stop@mR,setMotorPWM@m
  2673  000E3E  EC62  F002         	call	_setMotorPWM	;wreg free
  2674                           
  2675                           ;dc_motor.c: 49:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2676  000E42  0E03               	movlw	3
  2677  000E44  6E28               	movwf	??_stop& (0+255),c
  2678  000E46  0E98               	movlw	152
  2679  000E48                     u2247:
  2680  000E48  2EE8               	decfsz	wreg,f,c
  2681  000E4A  D7FE               	bra	u2247
  2682  000E4C  2E28               	decfsz	??_stop& (0+255),f,c
  2683  000E4E  D7FC               	bra	u2247
  2684                           
  2685                           ;dc_motor.c: 50:     }
  2686  000E50  0629               	decf	stop@i,f,c
  2687  000E52  A0D8               	btfss	status,0,c
  2688  000E54  062A               	decf	stop@i+1,f,c
  2689  000E56  D7DC               	goto	l2378
  2690  000E58                     __end_of_stop:
  2691                           	opt callstack 0
  2692                           
  2693 ;; *************** function _moveBackward *****************
  2694 ;; Defined at:
  2695 ;;		line 102 in file "dc_motor.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2698 ;;		 -> main@motorL(9), 
  2699 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2700 ;;		 -> main@motorR(9), 
  2701 ;;  max_power       2   37[COMRAM] int 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  i               2   40[COMRAM] int 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2713 ;;      Params:         4       0       0       0
  2714 ;;      Locals:         2       0       0       0
  2715 ;;      Temps:          1       0       0       0
  2716 ;;      Totals:         7       0       0       0
  2717 ;;Total ram usage:        7 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    5
  2720 ;; This function calls:
  2721 ;;		_setMotorPWM
  2722 ;; This function is called by:
  2723 ;;		_returnHome
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text17
  2728  000B5A                     __ptext17:
  2729                           	opt callstack 0
  2730  000B5A                     _moveBackward:
  2731                           	opt callstack 24
  2732                           
  2733                           ;dc_motor.c: 102: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_po
      +                          wer);dc_motor.c: 103: {;dc_motor.c: 104:     mL->direction = 0;
  2734                           
  2735                           ;incstack = 0
  2736  000B5A  5024               	movf	moveBackward@mL,w,c
  2737  000B5C  6ED9               	movwf	fsr2l,c
  2738  000B5E  6ADA               	clrf	fsr2h,c
  2739  000B60  0E01               	movlw	1
  2740  000B62  26D9               	addwf	fsr2l,f,c
  2741  000B64  0E00               	movlw	0
  2742  000B66  6EDF               	movwf	indf2,c
  2743                           
  2744                           ;dc_motor.c: 105:     mR->direction = 0;
  2745  000B68  5025               	movf	moveBackward@mR,w,c
  2746  000B6A  6ED9               	movwf	fsr2l,c
  2747  000B6C  6ADA               	clrf	fsr2h,c
  2748  000B6E  0E01               	movlw	1
  2749  000B70  26D9               	addwf	fsr2l,f,c
  2750  000B72  0E00               	movlw	0
  2751  000B74  6EDF               	movwf	indf2,c
  2752                           
  2753                           ;dc_motor.c: 106:     for(int i = 5; i < max_power; i++)
  2754  000B76  0E00               	movlw	0
  2755  000B78  6E2A               	movwf	moveBackward@i+1,c
  2756  000B7A  0E05               	movlw	5
  2757  000B7C  6E29               	movwf	moveBackward@i,c
  2758  000B7E  D01C               	goto	l2460
  2759  000B80                     l2448:
  2760                           
  2761                           ;dc_motor.c: 107:     {;dc_motor.c: 108:         mL->power = i;
  2762  000B80  5024               	movf	moveBackward@mL,w,c
  2763  000B82  6ED9               	movwf	fsr2l,c
  2764  000B84  6ADA               	clrf	fsr2h,c
  2765  000B86  C029  FFDF         	movff	moveBackward@i,indf2
  2766                           
  2767                           ;dc_motor.c: 109:         mR->power = i - 5;
  2768  000B8A  5025               	movf	moveBackward@mR,w,c
  2769  000B8C  6ED9               	movwf	fsr2l,c
  2770  000B8E  6ADA               	clrf	fsr2h,c
  2771  000B90  5029               	movf	moveBackward@i,w,c
  2772  000B92  0FFB               	addlw	251
  2773  000B94  6EDF               	movwf	indf2,c
  2774                           
  2775                           ;dc_motor.c: 110:         setMotorPWM(mL);
  2776  000B96  C024  F01C         	movff	moveBackward@mL,setMotorPWM@m
  2777  000B9A  EC62  F002         	call	_setMotorPWM	;wreg free
  2778                           
  2779                           ;dc_motor.c: 111:         setMotorPWM(mR);
  2780  000B9E  C025  F01C         	movff	moveBackward@mR,setMotorPWM@m
  2781  000BA2  EC62  F002         	call	_setMotorPWM	;wreg free
  2782                           
  2783                           ;dc_motor.c: 112:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2784  000BA6  0E03               	movlw	3
  2785  000BA8  6E28               	movwf	??_moveBackward& (0+255),c
  2786  000BAA  0E98               	movlw	152
  2787  000BAC                     u2257:
  2788  000BAC  2EE8               	decfsz	wreg,f,c
  2789  000BAE  D7FE               	bra	u2257
  2790  000BB0  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2791  000BB2  D7FC               	bra	u2257
  2792                           
  2793                           ;dc_motor.c: 113:     }
  2794  000BB4  4A29               	infsnz	moveBackward@i,f,c
  2795  000BB6  2A2A               	incf	moveBackward@i+1,f,c
  2796  000BB8                     l2460:
  2797  000BB8  5026               	movf	moveBackward@max_power,w,c
  2798  000BBA  5C29               	subwf	moveBackward@i,w,c
  2799  000BBC  502A               	movf	moveBackward@i+1,w,c
  2800  000BBE  0A80               	xorlw	128
  2801  000BC0  6E28               	movwf	??_moveBackward& (0+255),c
  2802  000BC2  5027               	movf	moveBackward@max_power+1,w,c
  2803  000BC4  0A80               	xorlw	128
  2804  000BC6  5828               	subwfb	??_moveBackward& (0+255),w,c
  2805  000BC8  B0D8               	btfsc	status,0,c
  2806  000BCA  0012               	return	
  2807  000BCC  D7D9               	goto	l2448
  2808  000BCE                     __end_of_moveBackward:
  2809                           	opt callstack 0
  2810                           
  2811 ;; *************** function _moveToBeacon *****************
  2812 ;; Defined at:
  2813 ;;		line 56 in file "subroutines.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  mL              1   42[COMRAM] PTR struct DC_motor
  2816 ;;		 -> main@motorL(9), 
  2817 ;;  mR              1   43[COMRAM] PTR struct DC_motor
  2818 ;;		 -> main@motorR(9), 
  2819 ;;  speed           2   44[COMRAM] int 
  2820 ;;  move            1   46[COMRAM] PTR struct Movement_stor
  2821 ;;		 -> travel_moves(61), 
  2822 ;;  exit_flag       1   47[COMRAM] PTR volatile unsigned ch
  2823 ;;		 -> RFID_flag(1), 
  2824 ;; Auto vars:     Size  Location     Type
  2825 ;;  raw_data        2   50[COMRAM] unsigned int 
  2826 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2827 ;;  error_counte    2   53[COMRAM] int 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      unsigned char 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2837 ;;      Params:         6       0       0       0
  2838 ;;      Locals:         5       0       0       0
  2839 ;;      Temps:          2       0       0       0
  2840 ;;      Totals:        13       0       0       0
  2841 ;;Total ram usage:       13 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    7
  2844 ;; This function calls:
  2845 ;;		_LCDString
  2846 ;;		_classify_data
  2847 ;;		_clearLCD
  2848 ;;		_moveForward
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text18
  2855  000866                     __ptext18:
  2856                           	opt callstack 0
  2857  000866                     _moveToBeacon:
  2858                           	opt callstack 23
  2859                           
  2860                           ;subroutines.c: 56: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 57:                         struct Movement_storage *move, vo
      +                          latile char *exit_flag);subroutines.c: 58: {;subroutines.c: 59:     move->move_type[move
      +                          ->move_number] = 0;
  2861                           
  2862                           ;incstack = 0
  2863  000866  502F               	movf	moveToBeacon@move,w,c
  2864  000868  6ED9               	movwf	fsr2l,c
  2865  00086A  6ADA               	clrf	fsr2h,c
  2866  00086C  0E3C               	movlw	60
  2867  00086E  26D9               	addwf	fsr2l,f,c
  2868  000870  50DF               	movf	indf2,w,c
  2869  000872  6E31               	movwf	??_moveToBeacon& (0+255),c
  2870  000874  502F               	movf	moveToBeacon@move,w,c
  2871  000876  2431               	addwf	??_moveToBeacon,w,c
  2872  000878  6ED9               	movwf	fsr2l,c
  2873  00087A  6ADA               	clrf	fsr2h,c
  2874  00087C  0E00               	movlw	0
  2875  00087E  6EDF               	movwf	indf2,c
  2876                           
  2877                           ;subroutines.c: 60:     moveForward(mL,mR,speed);
  2878  000880  C02B  F024         	movff	moveToBeacon@mL,moveForward@mL
  2879  000884  C02C  F025         	movff	moveToBeacon@mR,moveForward@mR
  2880  000888  C02D  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2881  00088C  C02E  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2882  000890  ECE7  F005         	call	_moveForward	;wreg free
  2883                           
  2884                           ;subroutines.c: 61:     clearLCD();
  2885  000894  EC6B  F008         	call	_clearLCD	;wreg free
  2886                           
  2887                           ;subroutines.c: 62:     LCDString("MOVING TO BOMB");
  2888  000898  0E57               	movlw	low STR_5
  2889  00089A  6E12               	movwf	LCDString@string,c
  2890  00089C  EC13  F008         	call	_LCDString	;wreg free
  2891                           
  2892                           ;subroutines.c: 70:     int error_counter = 0;
  2893  0008A0  0E00               	movlw	0
  2894  0008A2  6E37               	movwf	moveToBeacon@error_counter+1,c
  2895  0008A4  0E00               	movlw	0
  2896  0008A6  6E36               	movwf	moveToBeacon@error_counter,c
  2897  0008A8                     l2634:
  2898                           
  2899                           ;subroutines.c: 75:     {;subroutines.c: 77:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2900  0008A8  5068               	movf	3944,w,c	;volatile
  2901  0008AA  CF69 F031          	movff	3945,??_moveToBeacon	;volatile
  2902  0008AE  6A32               	clrf	(??_moveToBeacon+1)& (0+255),c
  2903  0008B0  C031  F032         	movff	??_moveToBeacon,??_moveToBeacon+1
  2904  0008B4  6A31               	clrf	??_moveToBeacon,c
  2905  0008B6  1031               	iorwf	??_moveToBeacon,w,c
  2906  0008B8  6E33               	movwf	moveToBeacon@raw_data,c
  2907  0008BA  5032               	movf	??_moveToBeacon+1,w,c
  2908  0008BC  6E34               	movwf	moveToBeacon@raw_data+1,c
  2909                           
  2910                           ;subroutines.c: 80:         char beacon_location = classify_data(raw_data);
  2911  0008BE  C033  F00E         	movff	moveToBeacon@raw_data,classify_data@raw_data
  2912  0008C2  C034  F00F         	movff	moveToBeacon@raw_data+1,classify_data@raw_data+1
  2913  0008C6  EC2C  F007         	call	_classify_data	;wreg free
  2914  0008CA  6E35               	movwf	moveToBeacon@beacon_location,c
  2915                           
  2916                           ;subroutines.c: 83:         if(*exit_flag == 1)
  2917  0008CC  5030               	movf	moveToBeacon@exit_flag,w,c
  2918  0008CE  6ED9               	movwf	fsr2l,c
  2919  0008D0  6ADA               	clrf	fsr2h,c
  2920  0008D2  04DE               	decf	postinc2,w,c
  2921  0008D4  A4D8               	btfss	status,2,c
  2922  0008D6  D002               	goto	l2646
  2923  0008D8                     u1940:
  2924                           
  2925                           ;subroutines.c: 84:         {;subroutines.c: 85:             return 2;
  2926  0008D8  0E02               	movlw	2
  2927  0008DA  0012               	return	
  2928  0008DC                     l2646:
  2929  0008DC  5035               	movf	moveToBeacon@beacon_location,w,c
  2930  0008DE  A4D8               	btfss	status,2,c
  2931  0008E0  D003               	goto	l2650
  2932                           
  2933                           ;subroutines.c: 90:         {;subroutines.c: 91:             error_counter += 1;
  2934  0008E2  4A36               	infsnz	moveToBeacon@error_counter,f,c
  2935  0008E4  2A37               	incf	moveToBeacon@error_counter+1,f,c
  2936                           
  2937                           ;subroutines.c: 92:         }
  2938  0008E6  D004               	goto	l2652
  2939  0008E8                     l2650:
  2940                           
  2941                           ;subroutines.c: 95:         {;subroutines.c: 96:             error_counter = 0;
  2942  0008E8  0E00               	movlw	0
  2943  0008EA  6E37               	movwf	moveToBeacon@error_counter+1,c
  2944  0008EC  0E00               	movlw	0
  2945  0008EE  6E36               	movwf	moveToBeacon@error_counter,c
  2946  0008F0                     l2652:
  2947                           
  2948                           ;subroutines.c: 101:         if(error_counter >= ERROR_THRESHOLD)
  2949  0008F0  BE37               	btfsc	moveToBeacon@error_counter+1,7,c
  2950  0008F2  D7DA               	goto	l2634
  2951  0008F4  0E68               	movlw	104
  2952  0008F6  5C36               	subwf	moveToBeacon@error_counter,w,c
  2953  0008F8  0E42               	movlw	66
  2954  0008FA  5837               	subwfb	moveToBeacon@error_counter+1,w,c
  2955  0008FC  A0D8               	btfss	status,0,c
  2956  0008FE  D7D4               	goto	l2634
  2957                           
  2958                           ;subroutines.c: 102:         {;subroutines.c: 103:             move-> move_number += 1;
  2959  000900  502F               	movf	moveToBeacon@move,w,c
  2960  000902  6ED9               	movwf	fsr2l,c
  2961  000904  6ADA               	clrf	fsr2h,c
  2962  000906  0E3C               	movlw	60
  2963  000908  26D9               	addwf	fsr2l,f,c
  2964  00090A  2ADF               	incf	indf2,f,c
  2965                           
  2966                           ;subroutines.c: 106:             if(move->move_number >= 19)
  2967  00090C  502F               	movf	moveToBeacon@move,w,c
  2968  00090E  6ED9               	movwf	fsr2l,c
  2969  000910  6ADA               	clrf	fsr2h,c
  2970  000912  0E3C               	movlw	60
  2971  000914  26D9               	addwf	fsr2l,f,c
  2972  000916  0E12               	movlw	18
  2973  000918  64DF               	cpfsgt	indf2,c
  2974  00091A  D001               	goto	l2662
  2975  00091C  D7DD               	goto	u1940
  2976  00091E                     l2662:
  2977                           
  2978                           ;subroutines.c: 111:             {;subroutines.c: 112:                  return 0;
  2979  00091E  0E00               	movlw	0
  2980  000920  0012               	return		;funcret
  2981  000922                     __end_of_moveToBeacon:
  2982                           	opt callstack 0
  2983                           
  2984 ;; *************** function _moveForward *****************
  2985 ;; Defined at:
  2986 ;;		line 87 in file "dc_motor.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  2989 ;;		 -> main@motorL(9), 
  2990 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  2991 ;;		 -> main@motorR(9), 
  2992 ;;  max_power       2   37[COMRAM] int 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  i               2   40[COMRAM] int 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3004 ;;      Params:         4       0       0       0
  3005 ;;      Locals:         2       0       0       0
  3006 ;;      Temps:          1       0       0       0
  3007 ;;      Totals:         7       0       0       0
  3008 ;;Total ram usage:        7 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    5
  3011 ;; This function calls:
  3012 ;;		_setMotorPWM
  3013 ;; This function is called by:
  3014 ;;		_moveToBeacon
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text19
  3019  000BCE                     __ptext19:
  3020                           	opt callstack 0
  3021  000BCE                     _moveForward:
  3022                           	opt callstack 24
  3023                           
  3024                           ;dc_motor.c: 87: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 88: {;dc_motor.c: 89:     mL->direction = 1;
  3025                           
  3026                           ;incstack = 0
  3027  000BCE  5024               	movf	moveForward@mL,w,c
  3028  000BD0  6ED9               	movwf	fsr2l,c
  3029  000BD2  6ADA               	clrf	fsr2h,c
  3030  000BD4  0E01               	movlw	1
  3031  000BD6  26D9               	addwf	fsr2l,f,c
  3032  000BD8  0E01               	movlw	1
  3033  000BDA  6EDF               	movwf	indf2,c
  3034                           
  3035                           ;dc_motor.c: 90:     mR->direction = 1;
  3036  000BDC  5025               	movf	moveForward@mR,w,c
  3037  000BDE  6ED9               	movwf	fsr2l,c
  3038  000BE0  6ADA               	clrf	fsr2h,c
  3039  000BE2  0E01               	movlw	1
  3040  000BE4  26D9               	addwf	fsr2l,f,c
  3041  000BE6  0E01               	movlw	1
  3042  000BE8  6EDF               	movwf	indf2,c
  3043                           
  3044                           ;dc_motor.c: 91:     for(int i = 5; i < max_power; i++)
  3045  000BEA  0E00               	movlw	0
  3046  000BEC  6E2A               	movwf	moveForward@i+1,c
  3047  000BEE  0E05               	movlw	5
  3048  000BF0  6E29               	movwf	moveForward@i,c
  3049  000BF2  D01C               	goto	l2442
  3050  000BF4                     l2430:
  3051                           
  3052                           ;dc_motor.c: 92:     {;dc_motor.c: 93:         mL->power = i;
  3053  000BF4  5024               	movf	moveForward@mL,w,c
  3054  000BF6  6ED9               	movwf	fsr2l,c
  3055  000BF8  6ADA               	clrf	fsr2h,c
  3056  000BFA  C029  FFDF         	movff	moveForward@i,indf2
  3057                           
  3058                           ;dc_motor.c: 94:         mR->power = i - 5;
  3059  000BFE  5025               	movf	moveForward@mR,w,c
  3060  000C00  6ED9               	movwf	fsr2l,c
  3061  000C02  6ADA               	clrf	fsr2h,c
  3062  000C04  5029               	movf	moveForward@i,w,c
  3063  000C06  0FFB               	addlw	251
  3064  000C08  6EDF               	movwf	indf2,c
  3065                           
  3066                           ;dc_motor.c: 95:         setMotorPWM(mL);
  3067  000C0A  C024  F01C         	movff	moveForward@mL,setMotorPWM@m
  3068  000C0E  EC62  F002         	call	_setMotorPWM	;wreg free
  3069                           
  3070                           ;dc_motor.c: 96:         setMotorPWM(mR);
  3071  000C12  C025  F01C         	movff	moveForward@mR,setMotorPWM@m
  3072  000C16  EC62  F002         	call	_setMotorPWM	;wreg free
  3073                           
  3074                           ;dc_motor.c: 97:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3075  000C1A  0E03               	movlw	3
  3076  000C1C  6E28               	movwf	??_moveForward& (0+255),c
  3077  000C1E  0E98               	movlw	152
  3078  000C20                     u2267:
  3079  000C20  2EE8               	decfsz	wreg,f,c
  3080  000C22  D7FE               	bra	u2267
  3081  000C24  2E28               	decfsz	??_moveForward& (0+255),f,c
  3082  000C26  D7FC               	bra	u2267
  3083                           
  3084                           ;dc_motor.c: 98:     }
  3085  000C28  4A29               	infsnz	moveForward@i,f,c
  3086  000C2A  2A2A               	incf	moveForward@i+1,f,c
  3087  000C2C                     l2442:
  3088  000C2C  5026               	movf	moveForward@max_power,w,c
  3089  000C2E  5C29               	subwf	moveForward@i,w,c
  3090  000C30  502A               	movf	moveForward@i+1,w,c
  3091  000C32  0A80               	xorlw	128
  3092  000C34  6E28               	movwf	??_moveForward& (0+255),c
  3093  000C36  5027               	movf	moveForward@max_power+1,w,c
  3094  000C38  0A80               	xorlw	128
  3095  000C3A  5828               	subwfb	??_moveForward& (0+255),w,c
  3096  000C3C  B0D8               	btfsc	status,0,c
  3097  000C3E  0012               	return	
  3098  000C40  D7D9               	goto	l2430
  3099  000C42                     __end_of_moveForward:
  3100                           	opt callstack 0
  3101                           
  3102 ;; *************** function _clearLCD *****************
  3103 ;; Defined at:
  3104 ;;		line 131 in file "LCDIO.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3118 ;;      Params:         0       0       0       0
  3119 ;;      Locals:         0       0       0       0
  3120 ;;      Temps:          1       0       0       0
  3121 ;;      Totals:         1       0       0       0
  3122 ;;Total ram usage:        1 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    6
  3125 ;; This function calls:
  3126 ;;		_SendLCD
  3127 ;; This function is called by:
  3128 ;;		_display_RFID
  3129 ;;		_scanForBeacon
  3130 ;;		_moveToBeacon
  3131 ;;		_returnHome
  3132 ;;		_stopAndDisplay
  3133 ;;		_waitForInput
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           	psect	text20
  3138  0010D6                     __ptext20:
  3139                           	opt callstack 0
  3140  0010D6                     _clearLCD:
  3141                           	opt callstack 23
  3142                           
  3143                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3144                           
  3145                           ;incstack = 0
  3146  0010D6  0E00               	movlw	0
  3147  0010D8  6E10               	movwf	SendLCD@type,c
  3148  0010DA  0E01               	movlw	1
  3149  0010DC  ECE4  F007         	call	_SendLCD
  3150                           
  3151                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3152  0010E0  0E0D               	movlw	13
  3153  0010E2  6E12               	movwf	??_clearLCD& (0+255),c
  3154  0010E4  0EFC               	movlw	252
  3155  0010E6                     u2277:
  3156  0010E6  2EE8               	decfsz	wreg,f,c
  3157  0010E8  D7FE               	bra	u2277
  3158  0010EA  2E12               	decfsz	??_clearLCD& (0+255),f,c
  3159  0010EC  D7FC               	bra	u2277
  3160  0010EE  0012               	return		;funcret
  3161  0010F0                     __end_of_clearLCD:
  3162                           	opt callstack 0
  3163                           
  3164 ;; *************** function _classify_data *****************
  3165 ;; Defined at:
  3166 ;;		line 34 in file "signal_processing.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  raw_data        2   13[COMRAM] unsigned int 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  filtered        2   17[COMRAM] unsigned int 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      unsigned char 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3180 ;;      Params:         2       0       0       0
  3181 ;;      Locals:         2       0       0       0
  3182 ;;      Temps:          2       0       0       0
  3183 ;;      Totals:         6       0       0       0
  3184 ;;Total ram usage:        6 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    3
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_stabiliseAverage
  3191 ;;		_scanForBeacon
  3192 ;;		_moveToBeacon
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text21
  3197  000E58                     __ptext21:
  3198                           	opt callstack 0
  3199  000E58                     _classify_data:
  3200                           	opt callstack 26
  3201                           
  3202                           ;signal_processing.c: 34: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           35: {;signal_processing.c: 38:     static unsigned int smoothed;;signal_processing.c: 4
      +                          3:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  3203                           
  3204                           ;incstack = 0
  3205  000E58  5038               	movf	classify_data@smoothed,w,c
  3206  000E5A  5C0E               	subwf	classify_data@raw_data,w,c
  3207  000E5C  6E10               	movwf	??_classify_data& (0+255),c
  3208  000E5E  5039               	movf	classify_data@smoothed+1,w,c
  3209  000E60  580F               	subwfb	classify_data@raw_data+1,w,c
  3210  000E62  6E11               	movwf	(??_classify_data+1)& (0+255),c
  3211  000E64  90D8               	bcf	status,0,c
  3212  000E66  3211               	rrcf	??_classify_data+1,f,c
  3213  000E68  3210               	rrcf	??_classify_data,f,c
  3214  000E6A  90D8               	bcf	status,0,c
  3215  000E6C  3211               	rrcf	??_classify_data+1,f,c
  3216  000E6E  3210               	rrcf	??_classify_data,f,c
  3217  000E70  5038               	movf	classify_data@smoothed,w,c
  3218  000E72  2410               	addwf	??_classify_data,w,c
  3219  000E74  6E38               	movwf	classify_data@smoothed,c
  3220  000E76  5039               	movf	classify_data@smoothed+1,w,c
  3221  000E78  2011               	addwfc	??_classify_data+1,w,c
  3222  000E7A  6E39               	movwf	classify_data@smoothed+1,c
  3223                           
  3224                           ;signal_processing.c: 44:     unsigned int filtered = raw_data - smoothed;
  3225  000E7C  5038               	movf	classify_data@smoothed,w,c
  3226  000E7E  5C0E               	subwf	classify_data@raw_data,w,c
  3227  000E80  6E12               	movwf	classify_data@filtered,c
  3228  000E82  5039               	movf	classify_data@smoothed+1,w,c
  3229  000E84  580F               	subwfb	classify_data@raw_data+1,w,c
  3230  000E86  6E13               	movwf	classify_data@filtered+1,c
  3231                           
  3232                           ;signal_processing.c: 47:     if(filtered >= 100)
  3233  000E88  5013               	movf	classify_data@filtered+1,w,c
  3234  000E8A  E104               	bnz	u1870
  3235  000E8C  0E64               	movlw	100
  3236  000E8E  5C12               	subwf	classify_data@filtered,w,c
  3237  000E90  A0D8               	btfss	status,0,c
  3238  000E92  D002               	goto	l2516
  3239  000E94                     u1870:
  3240                           
  3241                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 1;
  3242  000E94  0E01               	movlw	1
  3243  000E96  0012               	return	
  3244  000E98                     l2516:
  3245                           
  3246                           ;signal_processing.c: 52:     {;signal_processing.c: 53:         return 0;
  3247  000E98  0E00               	movlw	0
  3248  000E9A  0012               	return		;funcret
  3249  000E9C                     __end_of_classify_data:
  3250                           	opt callstack 0
  3251                           
  3252 ;; *************** function _LCDString *****************
  3253 ;; Defined at:
  3254 ;;		line 119 in file "LCDIO.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  string          1   17[COMRAM] PTR unsigned char 
  3257 ;;		 -> STR_10(16), STR_9(16), STR_8(13), STR_7(16), 
  3258 ;;		 -> STR_6(15), STR_5(15), STR_4(10), STR_3(16), 
  3259 ;;		 -> STR_2(16), STR_1(15), 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;		None
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3271 ;;      Params:         1       0       0       0
  3272 ;;      Locals:         0       0       0       0
  3273 ;;      Temps:          0       0       0       0
  3274 ;;      Totals:         1       0       0       0
  3275 ;;Total ram usage:        1 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    6
  3278 ;; This function calls:
  3279 ;;		_SendLCD
  3280 ;; This function is called by:
  3281 ;;		_main
  3282 ;;		_check_RFID
  3283 ;;		_scanForBeacon
  3284 ;;		_moveToBeacon
  3285 ;;		_returnHome
  3286 ;;		_stopAndDisplay
  3287 ;;		_waitForInput
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text22
  3292  001026                     __ptext22:
  3293                           	opt callstack 0
  3294  001026                     _LCDString:
  3295                           	opt callstack 23
  3296                           
  3297                           ;LCDIO.c: 121: while(*string != 0){
  3298                           
  3299                           ;incstack = 0
  3300  001026  D00D               	goto	l2296
  3301  001028                     l2290:
  3302                           
  3303                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3304  001028  0E01               	movlw	1
  3305  00102A  6E10               	movwf	SendLCD@type,c
  3306  00102C  C012  FFF6         	movff	LCDString@string,tblptrl
  3307  001030                     	if	0	;There is only one active tblptr byte
  3308  001030                     	endif
  3309  001030                     	if	0	;tblptru may be non-zero
  3310  001030                     	endif
  3311  001030                     	if	0	;tblptru may be non-zero
  3312  001030                     	endif
  3313  001030  0008               	tblrd		*
  3314  001032  50F5               	movf	tablat,w,c
  3315  001034  ECE4  F007         	call	_SendLCD
  3316  001038  2A12               	incf	LCDString@string,f,c
  3317                           
  3318                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3319  00103A  0E21               	movlw	33
  3320  00103C                     u2287:
  3321  00103C  2EE8               	decfsz	wreg,f,c
  3322  00103E  D7FE               	bra	u2287
  3323  001040  F000               	nop	
  3324  001042                     l2296:
  3325                           
  3326                           ;LCDIO.c: 121: while(*string != 0){
  3327  001042  C012  FFF6         	movff	LCDString@string,tblptrl
  3328  001046                     	if	0	;There is only one active tblptr byte
  3329  001046                     	endif
  3330  001046                     	if	0	;tblptru may be non-zero
  3331  001046                     	endif
  3332  001046                     	if	0	;tblptru may be non-zero
  3333  001046                     	endif
  3334  001046  0008               	tblrd		*
  3335  001048  50F5               	movf	tablat,w,c
  3336  00104A  0900               	iorlw	0
  3337  00104C  B4D8               	btfsc	status,2,c
  3338  00104E  0012               	return	
  3339  001050  D7EB               	goto	l2290
  3340  001052                     __end_of_LCDString:
  3341                           	opt callstack 0
  3342                           
  3343 ;; *************** function _SendLCD *****************
  3344 ;; Defined at:
  3345 ;;		line 44 in file "LCDIO.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;  Byte            1    wreg     unsigned char 
  3348 ;;  type            1   15[COMRAM] unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  Byte            1   16[COMRAM] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3360 ;;      Params:         1       0       0       0
  3361 ;;      Locals:         1       0       0       0
  3362 ;;      Temps:          0       0       0       0
  3363 ;;      Totals:         2       0       0       0
  3364 ;;Total ram usage:        2 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    5
  3367 ;; This function calls:
  3368 ;;		_LCDout
  3369 ;; This function is called by:
  3370 ;;		_init_LCD
  3371 ;;		_SetLine
  3372 ;;		_LCDString
  3373 ;;		_clearLCD
  3374 ;;		_display_RFID
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text23
  3379  000FC8                     __ptext23:
  3380                           	opt callstack 0
  3381  000FC8                     _SendLCD:
  3382                           	opt callstack 23
  3383                           
  3384                           ;incstack = 0
  3385                           ;SendLCD@Byte stored from wreg
  3386  000FC8  6E11               	movwf	SendLCD@Byte,c
  3387                           
  3388                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3389  000FCA  B010               	btfsc	SendLCD@type,0,c
  3390  000FCC  D002               	bra	u1475
  3391  000FCE  9E89               	bcf	3977,7,c	;volatile
  3392  000FD0  D001               	bra	u1476
  3393  000FD2                     u1475:
  3394  000FD2  8E89               	bsf	3977,7,c	;volatile
  3395  000FD4                     u1476:
  3396                           
  3397                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3398  000FD4  3811               	swapf	SendLCD@Byte,w,c
  3399  000FD6  0B0F               	andlw	15
  3400  000FD8  0B0F               	andlw	15
  3401  000FDA  EC71  F005         	call	_LCDout
  3402                           
  3403                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3404  000FDE  0E06               	movlw	6
  3405  000FE0                     u2297:
  3406  000FE0  2EE8               	decfsz	wreg,f,c
  3407  000FE2  D7FE               	bra	u2297
  3408  000FE4  D000               	nop2	
  3409                           
  3410                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3411  000FE6  5011               	movf	SendLCD@Byte,w,c
  3412  000FE8  0B0F               	andlw	15
  3413  000FEA  EC71  F005         	call	_LCDout
  3414                           
  3415                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3416  000FEE  0E21               	movlw	33
  3417  000FF0                     u2307:
  3418  000FF0  2EE8               	decfsz	wreg,f,c
  3419  000FF2  D7FE               	bra	u2307
  3420  000FF4  F000               	nop	
  3421  000FF6  0012               	return		;funcret
  3422  000FF8                     __end_of_SendLCD:
  3423                           	opt callstack 0
  3424                           
  3425 ;; *************** function _LCDout *****************
  3426 ;; Defined at:
  3427 ;;		line 31 in file "LCDIO.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;  number          1    wreg     unsigned char 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  number          1   14[COMRAM] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3441 ;;      Params:         0       0       0       0
  3442 ;;      Locals:         1       0       0       0
  3443 ;;      Temps:          1       0       0       0
  3444 ;;      Totals:         2       0       0       0
  3445 ;;Total ram usage:        2 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		_E_TOG
  3450 ;; This function is called by:
  3451 ;;		_SendLCD
  3452 ;;		_init_LCD
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text24
  3457  000AE2                     __ptext24:
  3458                           	opt callstack 0
  3459  000AE2                     _LCDout:
  3460                           	opt callstack 23
  3461                           
  3462                           ;incstack = 0
  3463                           ;LCDout@number stored from wreg
  3464  000AE2  6E0F               	movwf	LCDout@number,c
  3465                           
  3466                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3467  000AE4  C00F  F00E         	movff	LCDout@number,??_LCDout
  3468  000AE8  0E01               	movlw	1
  3469  000AEA  160E               	andwf	??_LCDout,f,c
  3470  000AEC  508B               	movf	3979,w,c	;volatile
  3471  000AEE  180E               	xorwf	??_LCDout,w,c
  3472  000AF0  0BFE               	andlw	-2
  3473  000AF2  180E               	xorwf	??_LCDout,w,c
  3474  000AF4  6E8B               	movwf	3979,c	;volatile
  3475                           
  3476                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3477  000AF6  C00F  F00E         	movff	LCDout@number,??_LCDout
  3478  000AFA  90D8               	bcf	status,0,c
  3479  000AFC  320E               	rrcf	??_LCDout,f,c
  3480  000AFE  0E01               	movlw	1
  3481  000B00  160E               	andwf	??_LCDout,f,c
  3482  000B02  460E               	rlncf	??_LCDout,f,c
  3483  000B04  460E               	rlncf	??_LCDout,f,c
  3484  000B06  460E               	rlncf	??_LCDout,f,c
  3485  000B08  508B               	movf	3979,w,c	;volatile
  3486  000B0A  180E               	xorwf	??_LCDout,w,c
  3487  000B0C  0BF7               	andlw	-9
  3488  000B0E  180E               	xorwf	??_LCDout,w,c
  3489  000B10  6E8B               	movwf	3979,c	;volatile
  3490                           
  3491                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3492  000B12  C00F  F00E         	movff	LCDout@number,??_LCDout
  3493  000B16  90D8               	bcf	status,0,c
  3494  000B18  320E               	rrcf	??_LCDout,f,c
  3495  000B1A  90D8               	bcf	status,0,c
  3496  000B1C  320E               	rrcf	??_LCDout,f,c
  3497  000B1E  0E01               	movlw	1
  3498  000B20  160E               	andwf	??_LCDout,f,c
  3499  000B22  508C               	movf	3980,w,c	;volatile
  3500  000B24  180E               	xorwf	??_LCDout,w,c
  3501  000B26  0BFE               	andlw	-2
  3502  000B28  180E               	xorwf	??_LCDout,w,c
  3503  000B2A  6E8C               	movwf	3980,c	;volatile
  3504                           
  3505                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3506  000B2C  C00F  F00E         	movff	LCDout@number,??_LCDout
  3507  000B30  90D8               	bcf	status,0,c
  3508  000B32  320E               	rrcf	??_LCDout,f,c
  3509  000B34  90D8               	bcf	status,0,c
  3510  000B36  320E               	rrcf	??_LCDout,f,c
  3511  000B38  90D8               	bcf	status,0,c
  3512  000B3A  320E               	rrcf	??_LCDout,f,c
  3513  000B3C  0E01               	movlw	1
  3514  000B3E  160E               	andwf	??_LCDout,f,c
  3515  000B40  460E               	rlncf	??_LCDout,f,c
  3516  000B42  508C               	movf	3980,w,c	;volatile
  3517  000B44  180E               	xorwf	??_LCDout,w,c
  3518  000B46  0BFD               	andlw	-3
  3519  000B48  180E               	xorwf	??_LCDout,w,c
  3520  000B4A  6E8C               	movwf	3980,c	;volatile
  3521                           
  3522                           ;LCDIO.c: 39:  E_TOG();
  3523  000B4C  EC82  F008         	call	_E_TOG	;wreg free
  3524                           
  3525                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3526  000B50  0E03               	movlw	3
  3527  000B52                     u2317:
  3528  000B52  2EE8               	decfsz	wreg,f,c
  3529  000B54  D7FE               	bra	u2317
  3530  000B56  F000               	nop	
  3531  000B58  0012               	return		;funcret
  3532  000B5A                     __end_of_LCDout:
  3533                           	opt callstack 0
  3534                           
  3535 ;; *************** function _E_TOG *****************
  3536 ;; Defined at:
  3537 ;;		line 23 in file "LCDIO.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3551 ;;      Params:         0       0       0       0
  3552 ;;      Locals:         0       0       0       0
  3553 ;;      Temps:          0       0       0       0
  3554 ;;      Totals:         0       0       0       0
  3555 ;;Total ram usage:        0 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:    3
  3558 ;; This function calls:
  3559 ;;		Nothing
  3560 ;; This function is called by:
  3561 ;;		_LCDout
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text25
  3566  001104                     __ptext25:
  3567                           	opt callstack 0
  3568  001104                     _E_TOG:
  3569                           	opt callstack 23
  3570                           
  3571                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3572                           
  3573                           ;incstack = 0
  3574  001104  8C89               	bsf	3977,6,c	;volatile
  3575                           
  3576                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3577  001106  0E03               	movlw	3
  3578  001108                     u2327:
  3579  001108  2EE8               	decfsz	wreg,f,c
  3580  00110A  D7FE               	bra	u2327
  3581  00110C  F000               	nop	
  3582                           
  3583                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3584  00110E  9C89               	bcf	3977,6,c	;volatile
  3585  001110  0012               	return		;funcret
  3586  001112                     __end_of_E_TOG:
  3587                           	opt callstack 0
  3588                           
  3589 ;; *************** function _initMotorValues *****************
  3590 ;; Defined at:
  3591 ;;		line 116 in file "dc_motor.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  mL              1   35[COMRAM] PTR struct DC_motor
  3594 ;;		 -> main@motorL(9), 
  3595 ;;  mR              1   36[COMRAM] PTR struct DC_motor
  3596 ;;		 -> main@motorR(9), 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      void 
  3601 ;; Registers used:
  3602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3608 ;;      Params:         2       0       0       0
  3609 ;;      Locals:         0       0       0       0
  3610 ;;      Temps:          0       0       0       0
  3611 ;;      Totals:         2       0       0       0
  3612 ;;Total ram usage:        2 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    5
  3615 ;; This function calls:
  3616 ;;		_setMotorPWM
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text26
  3623  0006D4                     __ptext26:
  3624                           	opt callstack 0
  3625  0006D4                     _initMotorValues:
  3626                           	opt callstack 25
  3627                           
  3628                           ;dc_motor.c: 116: void initMotorValues(struct DC_motor *mL, struct DC_motor *mR);dc_moto
      +                          r.c: 117: {;dc_motor.c: 119: mL->power = 0;
  3629                           
  3630                           ;incstack = 0
  3631  0006D4  5024               	movf	initMotorValues@mL,w,c
  3632  0006D6  6ED9               	movwf	fsr2l,c
  3633  0006D8  6ADA               	clrf	fsr2h,c
  3634  0006DA  0E00               	movlw	0
  3635  0006DC  6EDF               	movwf	indf2,c
  3636                           
  3637                           ;dc_motor.c: 120: mL->direction = 1;
  3638  0006DE  5024               	movf	initMotorValues@mL,w,c
  3639  0006E0  6ED9               	movwf	fsr2l,c
  3640  0006E2  6ADA               	clrf	fsr2h,c
  3641  0006E4  0E01               	movlw	1
  3642  0006E6  26D9               	addwf	fsr2l,f,c
  3643  0006E8  0E01               	movlw	1
  3644  0006EA  6EDF               	movwf	indf2,c
  3645                           
  3646                           ;dc_motor.c: 121: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3647  0006EC  5024               	movf	initMotorValues@mL,w,c
  3648  0006EE  6ED9               	movwf	fsr2l,c
  3649  0006F0  6ADA               	clrf	fsr2h,c
  3650  0006F2  0E02               	movlw	2
  3651  0006F4  26D9               	addwf	fsr2l,f,c
  3652  0006F6  0E79               	movlw	121
  3653  0006F8  6EDE               	movwf	postinc2,c
  3654  0006FA  0E0F               	movlw	15
  3655  0006FC  6EDD               	movwf	postdec2,c
  3656                           
  3657                           ;dc_motor.c: 122: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3658  0006FE  5024               	movf	initMotorValues@mL,w,c
  3659  000700  6ED9               	movwf	fsr2l,c
  3660  000702  6ADA               	clrf	fsr2h,c
  3661  000704  0E04               	movlw	4
  3662  000706  26D9               	addwf	fsr2l,f,c
  3663  000708  0E78               	movlw	120
  3664  00070A  6EDE               	movwf	postinc2,c
  3665  00070C  0E0F               	movlw	15
  3666  00070E  6EDD               	movwf	postdec2,c
  3667                           
  3668                           ;dc_motor.c: 123: mL->dir_pin=0;
  3669  000710  5024               	movf	initMotorValues@mL,w,c
  3670  000712  6ED9               	movwf	fsr2l,c
  3671  000714  6ADA               	clrf	fsr2h,c
  3672  000716  0E06               	movlw	6
  3673  000718  26D9               	addwf	fsr2l,f,c
  3674  00071A  0E00               	movlw	0
  3675  00071C  6EDF               	movwf	indf2,c
  3676                           
  3677                           ;dc_motor.c: 124: mL->PWMperiod=199;
  3678  00071E  5024               	movf	initMotorValues@mL,w,c
  3679  000720  6ED9               	movwf	fsr2l,c
  3680  000722  6ADA               	clrf	fsr2h,c
  3681  000724  0E07               	movlw	7
  3682  000726  26D9               	addwf	fsr2l,f,c
  3683  000728  0EC7               	movlw	199
  3684  00072A  6EDE               	movwf	postinc2,c
  3685  00072C  0E00               	movlw	0
  3686  00072E  6EDD               	movwf	postdec2,c
  3687                           
  3688                           ;dc_motor.c: 126: mR->power = 0;
  3689  000730  5025               	movf	initMotorValues@mR,w,c
  3690  000732  6ED9               	movwf	fsr2l,c
  3691  000734  6ADA               	clrf	fsr2h,c
  3692  000736  0E00               	movlw	0
  3693  000738  6EDF               	movwf	indf2,c
  3694                           
  3695                           ;dc_motor.c: 127: mR->direction = 1;
  3696  00073A  5025               	movf	initMotorValues@mR,w,c
  3697  00073C  6ED9               	movwf	fsr2l,c
  3698  00073E  6ADA               	clrf	fsr2h,c
  3699  000740  0E01               	movlw	1
  3700  000742  26D9               	addwf	fsr2l,f,c
  3701  000744  0E01               	movlw	1
  3702  000746  6EDF               	movwf	indf2,c
  3703                           
  3704                           ;dc_motor.c: 128: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3705  000748  5025               	movf	initMotorValues@mR,w,c
  3706  00074A  6ED9               	movwf	fsr2l,c
  3707  00074C  6ADA               	clrf	fsr2h,c
  3708  00074E  0E02               	movlw	2
  3709  000750  26D9               	addwf	fsr2l,f,c
  3710  000752  0E77               	movlw	119
  3711  000754  6EDE               	movwf	postinc2,c
  3712  000756  0E0F               	movlw	15
  3713  000758  6EDD               	movwf	postdec2,c
  3714                           
  3715                           ;dc_motor.c: 129: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3716  00075A  5025               	movf	initMotorValues@mR,w,c
  3717  00075C  6ED9               	movwf	fsr2l,c
  3718  00075E  6ADA               	clrf	fsr2h,c
  3719  000760  0E04               	movlw	4
  3720  000762  26D9               	addwf	fsr2l,f,c
  3721  000764  0E76               	movlw	118
  3722  000766  6EDE               	movwf	postinc2,c
  3723  000768  0E0F               	movlw	15
  3724  00076A  6EDD               	movwf	postdec2,c
  3725                           
  3726                           ;dc_motor.c: 130: mR->dir_pin=2;
  3727  00076C  5025               	movf	initMotorValues@mR,w,c
  3728  00076E  6ED9               	movwf	fsr2l,c
  3729  000770  6ADA               	clrf	fsr2h,c
  3730  000772  0E06               	movlw	6
  3731  000774  26D9               	addwf	fsr2l,f,c
  3732  000776  0E02               	movlw	2
  3733  000778  6EDF               	movwf	indf2,c
  3734                           
  3735                           ;dc_motor.c: 131: mR->PWMperiod=199;
  3736  00077A  5025               	movf	initMotorValues@mR,w,c
  3737  00077C  6ED9               	movwf	fsr2l,c
  3738  00077E  6ADA               	clrf	fsr2h,c
  3739  000780  0E07               	movlw	7
  3740  000782  26D9               	addwf	fsr2l,f,c
  3741  000784  0EC7               	movlw	199
  3742  000786  6EDE               	movwf	postinc2,c
  3743  000788  0E00               	movlw	0
  3744  00078A  6EDD               	movwf	postdec2,c
  3745                           
  3746                           ;dc_motor.c: 133: setMotorPWM(mL);
  3747  00078C  C024  F01C         	movff	initMotorValues@mL,setMotorPWM@m
  3748  000790  EC62  F002         	call	_setMotorPWM	;wreg free
  3749                           
  3750                           ;dc_motor.c: 134: setMotorPWM(mR);
  3751  000794  C025  F01C         	movff	initMotorValues@mR,setMotorPWM@m
  3752  000798  EC62  F002         	call	_setMotorPWM	;wreg free
  3753  00079C  0012               	return		;funcret
  3754  00079E                     __end_of_initMotorValues:
  3755                           	opt callstack 0
  3756                           
  3757 ;; *************** function _setMotorPWM *****************
  3758 ;; Defined at:
  3759 ;;		line 19 in file "dc_motor.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  m               1   27[COMRAM] PTR struct DC_motor
  3762 ;;		 -> main@motorR(9), main@motorL(9), 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  PWMduty         2   33[COMRAM] int 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3774 ;;      Params:         1       0       0       0
  3775 ;;      Locals:         2       0       0       0
  3776 ;;      Temps:          5       0       0       0
  3777 ;;      Totals:         8       0       0       0
  3778 ;;Total ram usage:        8 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    4
  3781 ;; This function calls:
  3782 ;;		___awdiv
  3783 ;;		___wmul
  3784 ;; This function is called by:
  3785 ;;		_stop
  3786 ;;		_turnLeft
  3787 ;;		_turnRight
  3788 ;;		_moveForward
  3789 ;;		_moveBackward
  3790 ;;		_initMotorValues
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794                           	psect	text27
  3795  0004C4                     __ptext27:
  3796                           	opt callstack 0
  3797  0004C4                     _setMotorPWM:
  3798                           	opt callstack 24
  3799                           
  3800                           ;dc_motor.c: 19: void setMotorPWM(struct DC_motor *m);dc_motor.c: 20: {;dc_motor.c: 21: 
      +                              int PWMduty;;dc_motor.c: 23:     PWMduty = (m->power*m->PWMperiod)/100;
  3801                           
  3802                           ;incstack = 0
  3803  0004C4  501C               	movf	setMotorPWM@m,w,c
  3804  0004C6  6ED9               	movwf	fsr2l,c
  3805  0004C8  6ADA               	clrf	fsr2h,c
  3806  0004CA  50DF               	movf	indf2,w,c
  3807  0004CC  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3808  0004CE  501D               	movf	??_setMotorPWM,w,c
  3809  0004D0  6E0E               	movwf	___wmul@multiplier,c
  3810  0004D2  6A0F               	clrf	___wmul@multiplier+1,c
  3811  0004D4  501C               	movf	setMotorPWM@m,w,c
  3812  0004D6  6ED9               	movwf	fsr2l,c
  3813  0004D8  6ADA               	clrf	fsr2h,c
  3814  0004DA  0E07               	movlw	7
  3815  0004DC  26D9               	addwf	fsr2l,f,c
  3816  0004DE  CFDE F010          	movff	postinc2,___wmul@multiplicand
  3817  0004E2  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  3818  0004E6  EC3E  F008         	call	___wmul	;wreg free
  3819  0004EA  C00E  F014         	movff	?___wmul,___awdiv@dividend
  3820  0004EE  C00F  F015         	movff	?___wmul+1,___awdiv@dividend+1
  3821  0004F2  0E00               	movlw	0
  3822  0004F4  6E17               	movwf	___awdiv@divisor+1,c
  3823  0004F6  0E64               	movlw	100
  3824  0004F8  6E16               	movwf	___awdiv@divisor,c
  3825  0004FA  EC2F  F005         	call	___awdiv	;wreg free
  3826  0004FE  C014  F022         	movff	?___awdiv,setMotorPWM@PWMduty
  3827  000502  C015  F023         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3828                           
  3829                           ;dc_motor.c: 25:     if (m->direction)
  3830  000506  501C               	movf	setMotorPWM@m,w,c
  3831  000508  6ED9               	movwf	fsr2l,c
  3832  00050A  6ADA               	clrf	fsr2h,c
  3833  00050C  0E01               	movlw	1
  3834  00050E  26D9               	addwf	fsr2l,f,c
  3835  000510  50DF               	movf	indf2,w,c
  3836  000512  B4D8               	btfsc	status,2,c
  3837  000514  D022               	goto	l2304
  3838                           
  3839                           ;dc_motor.c: 26:     {;dc_motor.c: 27:         LATB=LATB|(1<<(m->dir_pin));
  3840  000516  501C               	movf	setMotorPWM@m,w,c
  3841  000518  6ED9               	movwf	fsr2l,c
  3842  00051A  6ADA               	clrf	fsr2h,c
  3843  00051C  0E06               	movlw	6
  3844  00051E  26D9               	addwf	fsr2l,f,c
  3845  000520  50DF               	movf	indf2,w,c
  3846  000522  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3847  000524  0E01               	movlw	1
  3848  000526  6E1E               	movwf	(??_setMotorPWM+1)& (0+255),c
  3849  000528  2A1D               	incf	??_setMotorPWM,f,c
  3850  00052A  D002               	goto	u1564
  3851  00052C                     u1565:
  3852  00052C  90D8               	bcf	status,0,c
  3853  00052E  361E               	rlcf	??_setMotorPWM+1,f,c
  3854  000530                     u1564:
  3855  000530  2E1D               	decfsz	??_setMotorPWM,f,c
  3856  000532  D7FC               	goto	u1565
  3857  000534  501E               	movf	??_setMotorPWM+1,w,c
  3858  000536  108A               	iorwf	3978,w,c	;volatile
  3859  000538  6E8A               	movwf	3978,c	;volatile
  3860                           
  3861                           ;dc_motor.c: 28:   PWMduty=m->PWMperiod-PWMduty;
  3862  00053A  501C               	movf	setMotorPWM@m,w,c
  3863  00053C  6ED9               	movwf	fsr2l,c
  3864  00053E  6ADA               	clrf	fsr2h,c
  3865  000540  0E07               	movlw	7
  3866  000542  26D9               	addwf	fsr2l,f,c
  3867  000544  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3868  000548  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3869  00054C  5022               	movf	setMotorPWM@PWMduty,w,c
  3870  00054E  5C1D               	subwf	??_setMotorPWM,w,c
  3871  000550  6E22               	movwf	setMotorPWM@PWMduty,c
  3872  000552  5023               	movf	setMotorPWM@PWMduty+1,w,c
  3873  000554  581E               	subwfb	??_setMotorPWM+1,w,c
  3874  000556  6E23               	movwf	setMotorPWM@PWMduty+1,c
  3875                           
  3876                           ;dc_motor.c: 29:     }
  3877  000558  D013               	goto	l131
  3878  00055A                     l2304:
  3879                           
  3880                           ;dc_motor.c: 31:     {;dc_motor.c: 32:         LATB=LATB&(~(1<<(m->dir_pin)));
  3881  00055A  501C               	movf	setMotorPWM@m,w,c
  3882  00055C  6ED9               	movwf	fsr2l,c
  3883  00055E  6ADA               	clrf	fsr2h,c
  3884  000560  0E06               	movlw	6
  3885  000562  26D9               	addwf	fsr2l,f,c
  3886  000564  50DF               	movf	indf2,w,c
  3887  000566  6E1D               	movwf	??_setMotorPWM& (0+255),c
  3888  000568  0E01               	movlw	1
  3889  00056A  6E1E               	movwf	(??_setMotorPWM+1)& (0+255),c
  3890  00056C  2A1D               	incf	??_setMotorPWM,f,c
  3891  00056E  D002               	goto	u1574
  3892  000570                     u1575:
  3893  000570  90D8               	bcf	status,0,c
  3894  000572  361E               	rlcf	??_setMotorPWM+1,f,c
  3895  000574                     u1574:
  3896  000574  2E1D               	decfsz	??_setMotorPWM,f,c
  3897  000576  D7FC               	goto	u1575
  3898  000578  501E               	movf	??_setMotorPWM+1,w,c
  3899  00057A  0AFF               	xorlw	255
  3900  00057C  148A               	andwf	3978,w,c	;volatile
  3901  00057E  6E8A               	movwf	3978,c	;volatile
  3902  000580                     l131:
  3903                           
  3904                           ;dc_motor.c: 36:     *(m->dutyLowByte)=PWMduty<<2;
  3905  000580  501C               	movf	setMotorPWM@m,w,c
  3906  000582  6ED9               	movwf	fsr2l,c
  3907  000584  6ADA               	clrf	fsr2h,c
  3908  000586  0E02               	movlw	2
  3909  000588  26D9               	addwf	fsr2l,f,c
  3910  00058A  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3911  00058E  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3912  000592  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  3913  000596  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3914  00059A  4422               	rlncf	setMotorPWM@PWMduty,w,c
  3915  00059C  46E8               	rlncf	wreg,f,c
  3916  00059E  0BFC               	andlw	252
  3917  0005A0  6EDF               	movwf	indf2,c
  3918                           
  3919                           ;dc_motor.c: 37:     *(m->dutyHighByte)=PWMduty>>6;
  3920  0005A2  501C               	movf	setMotorPWM@m,w,c
  3921  0005A4  6ED9               	movwf	fsr2l,c
  3922  0005A6  6ADA               	clrf	fsr2h,c
  3923  0005A8  0E04               	movlw	4
  3924  0005AA  26D9               	addwf	fsr2l,f,c
  3925  0005AC  CFDE F01D          	movff	postinc2,??_setMotorPWM
  3926  0005B0  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  3927  0005B4  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  3928  0005B8  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3929  0005BC  C022  F01F         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3930  0005C0  C023  F020         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3931  0005C4  0E06               	movlw	6
  3932  0005C6  6E21               	movwf	(??_setMotorPWM+4)& (0+255),c
  3933  0005C8                     u1585:
  3934  0005C8  3420               	rlcf	??_setMotorPWM+3,w,c
  3935  0005CA  3220               	rrcf	??_setMotorPWM+3,f,c
  3936  0005CC  321F               	rrcf	??_setMotorPWM+2,f,c
  3937  0005CE  2E21               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3938  0005D0  D7FB               	goto	u1585
  3939  0005D2  501F               	movf	??_setMotorPWM+2,w,c
  3940  0005D4  6EDF               	movwf	indf2,c
  3941  0005D6  0012               	return		;funcret
  3942  0005D8                     __end_of_setMotorPWM:
  3943                           	opt callstack 0
  3944                           
  3945 ;; *************** function ___wmul *****************
  3946 ;; Defined at:
  3947 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  multiplier      2   13[COMRAM] unsigned int 
  3950 ;;  multiplicand    2   15[COMRAM] unsigned int 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  product         2   17[COMRAM] unsigned int 
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  2   13[COMRAM] unsigned int 
  3955 ;; Registers used:
  3956 ;;		wreg, status,2, status,0, prodl, prodh
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3962 ;;      Params:         4       0       0       0
  3963 ;;      Locals:         2       0       0       0
  3964 ;;      Temps:          0       0       0       0
  3965 ;;      Totals:         6       0       0       0
  3966 ;;Total ram usage:        6 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    3
  3969 ;; This function calls:
  3970 ;;		Nothing
  3971 ;; This function is called by:
  3972 ;;		_setMotorPWM
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text28
  3977  00107C                     __ptext28:
  3978                           	opt callstack 0
  3979  00107C                     ___wmul:
  3980                           	opt callstack 24
  3981                           
  3982                           ;incstack = 0
  3983  00107C  500E               	movf	___wmul@multiplier,w,c
  3984  00107E  0210               	mulwf	___wmul@multiplicand,c
  3985  001080  CFF3 F012          	movff	prodl,___wmul@product
  3986  001084  CFF4 F013          	movff	prodh,___wmul@product+1
  3987  001088  500E               	movf	___wmul@multiplier,w,c
  3988  00108A  0211               	mulwf	___wmul@multiplicand+1,c
  3989  00108C  50F3               	movf	prodl,w,c
  3990  00108E  2613               	addwf	___wmul@product+1,f,c
  3991  001090  500F               	movf	___wmul@multiplier+1,w,c
  3992  001092  0210               	mulwf	___wmul@multiplicand,c
  3993  001094  50F3               	movf	prodl,w,c
  3994  001096  2613               	addwf	___wmul@product+1,f,c
  3995  001098  C012  F00E         	movff	___wmul@product,?___wmul
  3996  00109C  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  3997  0010A0  0012               	return		;funcret
  3998  0010A2                     __end_of___wmul:
  3999                           	opt callstack 0
  4000                           
  4001 ;; *************** function ___awdiv *****************
  4002 ;; Defined at:
  4003 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  dividend        2   19[COMRAM] int 
  4006 ;;  divisor         2   21[COMRAM] int 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  quotient        2   25[COMRAM] int 
  4009 ;;  sign            1   24[COMRAM] unsigned char 
  4010 ;;  counter         1   23[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  2   19[COMRAM] int 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4020 ;;      Params:         4       0       0       0
  4021 ;;      Locals:         4       0       0       0
  4022 ;;      Temps:          0       0       0       0
  4023 ;;      Totals:         8       0       0       0
  4024 ;;Total ram usage:        8 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    3
  4027 ;; This function calls:
  4028 ;;		Nothing
  4029 ;; This function is called by:
  4030 ;;		_setMotorPWM
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text29
  4035  000A5E                     __ptext29:
  4036                           	opt callstack 0
  4037  000A5E                     ___awdiv:
  4038                           	opt callstack 24
  4039                           
  4040                           ;incstack = 0
  4041  000A5E  0E00               	movlw	0
  4042  000A60  6E19               	movwf	___awdiv@sign,c
  4043  000A62  AE17               	btfss	___awdiv@divisor+1,7,c
  4044  000A64  D006               	goto	l2252
  4045  000A66  6C16               	negf	___awdiv@divisor,c
  4046  000A68  1E17               	comf	___awdiv@divisor+1,f,c
  4047  000A6A  B0D8               	btfsc	status,0,c
  4048  000A6C  2A17               	incf	___awdiv@divisor+1,f,c
  4049  000A6E  0E01               	movlw	1
  4050  000A70  6E19               	movwf	___awdiv@sign,c
  4051  000A72                     l2252:
  4052  000A72  AE15               	btfss	___awdiv@dividend+1,7,c
  4053  000A74  D006               	goto	l2258
  4054  000A76  6C14               	negf	___awdiv@dividend,c
  4055  000A78  1E15               	comf	___awdiv@dividend+1,f,c
  4056  000A7A  B0D8               	btfsc	status,0,c
  4057  000A7C  2A15               	incf	___awdiv@dividend+1,f,c
  4058  000A7E  0E01               	movlw	1
  4059  000A80  1A19               	xorwf	___awdiv@sign,f,c
  4060  000A82                     l2258:
  4061  000A82  0E00               	movlw	0
  4062  000A84  6E1B               	movwf	___awdiv@quotient+1,c
  4063  000A86  0E00               	movlw	0
  4064  000A88  6E1A               	movwf	___awdiv@quotient,c
  4065  000A8A  5016               	movf	___awdiv@divisor,w,c
  4066  000A8C  1017               	iorwf	___awdiv@divisor+1,w,c
  4067  000A8E  B4D8               	btfsc	status,2,c
  4068  000A90  D01C               	goto	l2280
  4069  000A92  0E01               	movlw	1
  4070  000A94  6E18               	movwf	___awdiv@counter,c
  4071  000A96  D004               	goto	l2266
  4072  000A98                     l2264:
  4073  000A98  90D8               	bcf	status,0,c
  4074  000A9A  3616               	rlcf	___awdiv@divisor,f,c
  4075  000A9C  3617               	rlcf	___awdiv@divisor+1,f,c
  4076  000A9E  2A18               	incf	___awdiv@counter,f,c
  4077  000AA0                     l2266:
  4078  000AA0  AE17               	btfss	___awdiv@divisor+1,7,c
  4079  000AA2  D7FA               	goto	l2264
  4080  000AA4                     u1510:
  4081  000AA4  90D8               	bcf	status,0,c
  4082  000AA6  361A               	rlcf	___awdiv@quotient,f,c
  4083  000AA8  361B               	rlcf	___awdiv@quotient+1,f,c
  4084  000AAA  5016               	movf	___awdiv@divisor,w,c
  4085  000AAC  5C14               	subwf	___awdiv@dividend,w,c
  4086  000AAE  5017               	movf	___awdiv@divisor+1,w,c
  4087  000AB0  5815               	subwfb	___awdiv@dividend+1,w,c
  4088  000AB2  A0D8               	btfss	status,0,c
  4089  000AB4  D005               	goto	l2276
  4090  000AB6  5016               	movf	___awdiv@divisor,w,c
  4091  000AB8  5E14               	subwf	___awdiv@dividend,f,c
  4092  000ABA  5017               	movf	___awdiv@divisor+1,w,c
  4093  000ABC  5A15               	subwfb	___awdiv@dividend+1,f,c
  4094  000ABE  801A               	bsf	___awdiv@quotient,0,c
  4095  000AC0                     l2276:
  4096  000AC0  90D8               	bcf	status,0,c
  4097  000AC2  3217               	rrcf	___awdiv@divisor+1,f,c
  4098  000AC4  3216               	rrcf	___awdiv@divisor,f,c
  4099  000AC6  2E18               	decfsz	___awdiv@counter,f,c
  4100  000AC8  D7ED               	goto	u1510
  4101  000ACA                     l2280:
  4102  000ACA  5019               	movf	___awdiv@sign,w,c
  4103  000ACC  B4D8               	btfsc	status,2,c
  4104  000ACE  D004               	goto	l2284
  4105  000AD0  6C1A               	negf	___awdiv@quotient,c
  4106  000AD2  1E1B               	comf	___awdiv@quotient+1,f,c
  4107  000AD4  B0D8               	btfsc	status,0,c
  4108  000AD6  2A1B               	incf	___awdiv@quotient+1,f,c
  4109  000AD8                     l2284:
  4110  000AD8  C01A  F014         	movff	___awdiv@quotient,?___awdiv
  4111  000ADC  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
  4112  000AE0  0012               	return		;funcret
  4113  000AE2                     __end_of___awdiv:
  4114                           	opt callstack 0
  4115                           
  4116 ;; *************** function _InterruptHandlerLow *****************
  4117 ;; Defined at:
  4118 ;;		line 102 in file "main.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4132 ;;      Params:         0       0       0       0
  4133 ;;      Locals:         0       0       0       0
  4134 ;;      Temps:          7       0       0       0
  4135 ;;      Totals:         7       0       0       0
  4136 ;;Total ram usage:        7 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    2
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		Interrupt level 1
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	intcodelo
  4147  000018                     __pintcodelo:
  4148                           	opt callstack 0
  4149  000018                     _InterruptHandlerLow:
  4150                           	opt callstack 22
  4151                           
  4152                           ;incstack = 0
  4153  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4154  00001A  CFD8 F007          	movff	status,??_InterruptHandlerLow
  4155  00001E  CFE8 F008          	movff	wreg,??_InterruptHandlerLow+1
  4156  000022  CFE0 F009          	movff	bsr,??_InterruptHandlerLow+2
  4157  000026  CFD9 F00A          	movff	fsr2l,??_InterruptHandlerLow+3
  4158  00002A  CFDA F00B          	movff	fsr2h,??_InterruptHandlerLow+4
  4159  00002E  CFF3 F00C          	movff	prodl,??_InterruptHandlerLow+5
  4160  000032  CFF4 F00D          	movff	prodh,??_InterruptHandlerLow+6
  4161                           
  4162                           ;main.c: 105:     if((INTCONbits.TMR0IF) && ((robot_mode == 1) || (robot_mode == 0)))
  4163  000036  A4F2               	btfss	4082,2,c	;volatile
  4164  000038  D011               	goto	i1l74
  4165  00003A  043B               	decf	_robot_mode,w,c	;volatile
  4166  00003C  B4D8               	btfsc	status,2,c
  4167  00003E  D003               	goto	i1u140_20
  4168  000040  503B               	movf	_robot_mode,w,c	;volatile
  4169  000042  A4D8               	btfss	status,2,c
  4170  000044  D00B               	goto	i1l74
  4171  000046                     i1u140_20:
  4172                           
  4173                           ;main.c: 106:     {;main.c: 108:         travel_moves.time_taken[travel_moves.move_numbe
      +                          r] += 1;
  4174  000046  0100               	movlb	0	; () banked
  4175  000048  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4176  00004A  0D02               	mullw	2
  4177  00004C  50F3               	movf	prodl,w,c
  4178  00004E  0F74               	addlw	low (_travel_moves+20)
  4179  000050  6ED9               	movwf	fsr2l,c
  4180  000052  6ADA               	clrf	fsr2h,c
  4181  000054  2ADE               	incf	postinc2,f,c
  4182  000056  0E00               	movlw	0
  4183  000058  22DD               	addwfc	postdec2,f,c
  4184  00005A  D010               	goto	i1l2190
  4185  00005C                     i1l74:
  4186  00005C  A4F2               	btfss	4082,2,c	;volatile
  4187  00005E  D00E               	goto	i1l2190
  4188  000060  0E02               	movlw	2
  4189  000062  183B               	xorwf	_robot_mode,w,c	;volatile
  4190  000064  A4D8               	btfss	status,2,c
  4191  000066  D00A               	goto	i1l2190
  4192                           
  4193                           ;main.c: 113:     {;main.c: 114:         travel_moves.time_taken[travel_moves.move_numbe
      +                          r] -= 1;
  4194  000068  0100               	movlb	0	; () banked
  4195  00006A  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4196  00006C  0D02               	mullw	2
  4197  00006E  50F3               	movf	prodl,w,c
  4198  000070  0F74               	addlw	low (_travel_moves+20)
  4199  000072  6ED9               	movwf	fsr2l,c
  4200  000074  6ADA               	clrf	fsr2h,c
  4201  000076  06DE               	decf	postinc2,f,c
  4202  000078  0E00               	movlw	0
  4203  00007A  5ADD               	subwfb	postdec2,f,c
  4204  00007C                     i1l2190:
  4205                           
  4206                           ;main.c: 119:     {;main.c: 120:         INTCONbits.TMR0IF = 0;
  4207                           
  4208                           ;main.c: 118:     else
  4209                           
  4210                           ;main.c: 116:     }
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;main.c: 115:         INTCONbits.TMR0IF = 0;
  4214  00007C  94F2               	bcf	4082,2,c	;volatile
  4215  00007E  C00D  FFF4         	movff	??_InterruptHandlerLow+6,prodh
  4216  000082  C00C  FFF3         	movff	??_InterruptHandlerLow+5,prodl
  4217  000086  C00B  FFDA         	movff	??_InterruptHandlerLow+4,fsr2h
  4218  00008A  C00A  FFD9         	movff	??_InterruptHandlerLow+3,fsr2l
  4219  00008E  C009  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4220  000092  C008  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4221  000096  C007  FFD8         	movff	??_InterruptHandlerLow,status
  4222  00009A  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4223  00009C  0010               	retfie	
  4224  00009E                     __end_of_InterruptHandlerLow:
  4225                           	opt callstack 0
  4226                           
  4227 ;; *************** function _InterruptHandlerHigh *****************
  4228 ;; Defined at:
  4229 ;;		line 84 in file "main.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  throwaway       1    0        unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4243 ;;      Params:         0       0       0       0
  4244 ;;      Locals:         1       0       0       0
  4245 ;;      Temps:          2       0       0       0
  4246 ;;      Totals:         3       0       0       0
  4247 ;;Total ram usage:        3 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    1
  4250 ;; This function calls:
  4251 ;;		_processRFID
  4252 ;; This function is called by:
  4253 ;;		Interrupt level 2
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	intcode
  4258  000008                     __pintcode:
  4259                           	opt callstack 0
  4260  000008                     _InterruptHandlerHigh:
  4261                           	opt callstack 22
  4262                           
  4263                           ;incstack = 0
  4264  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4265  00000A  EFC9  F007         	goto	int_func
  4266                           
  4267                           	psect	intcode_body
  4268  000F92                     __pintcode_body:
  4269                           	opt callstack 22
  4270  000F92                     int_func:
  4271                           	opt callstack 22
  4272  000F92  CFD9 F004          	movff	fsr2l,??_InterruptHandlerHigh
  4273  000F96  CFDA F005          	movff	fsr2h,??_InterruptHandlerHigh+1
  4274                           
  4275                           ;main.c: 88:     if((PIR1bits.RCIF) && ((robot_mode == 1) || robot_mode==0))
  4276  000F9A  AA9E               	btfss	3998,5,c	;volatile
  4277  000F9C  D00E               	goto	i2l65
  4278  000F9E  043B               	decf	_robot_mode,w,c	;volatile
  4279  000FA0  B4D8               	btfsc	status,2,c
  4280  000FA2  D003               	goto	i2u137_40
  4281  000FA4  503B               	movf	_robot_mode,w,c	;volatile
  4282  000FA6  A4D8               	btfss	status,2,c
  4283  000FA8  D008               	goto	i2l65
  4284  000FAA                     i2u137_40:
  4285                           
  4286                           ;main.c: 89:     {;main.c: 91:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4287  000FAA  0E3C               	movlw	low _RFIDbuf
  4288  000FAC  6E01               	movwf	processRFID@RFIDbuf,c
  4289  000FAE  CFAE F002          	movff	4014,processRFID@latestChar	;volatile
  4290  000FB2  EC4E  F007         	call	_processRFID	;wreg free
  4291  000FB6  6E48               	movwf	_RFID_flag,c	;volatile
  4292                           
  4293                           ;main.c: 92:     }
  4294  000FB8  D001               	goto	i2l69
  4295  000FBA                     i2l65:
  4296  000FBA  50AE               	movf	4014,w,c	;volatile
  4297  000FBC                     i2l69:
  4298  000FBC  C005  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4299  000FC0  C004  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4300  000FC4  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4301  000FC6  0011               	retfie		f
  4302  000FC8                     __end_of_InterruptHandlerHigh:
  4303                           	opt callstack 0
  4304                           
  4305 ;; *************** function _processRFID *****************
  4306 ;; Defined at:
  4307 ;;		line 34 in file "RFID.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  RFIDbuf         1    0[COMRAM] PTR volatile unsigned ch
  4310 ;;		 -> RFIDbuf(12), 
  4311 ;;  latestChar      1    1[COMRAM] unsigned char 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  i               1    2[COMRAM] unsigned char 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      unsigned char 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4323 ;;      Params:         2       0       0       0
  4324 ;;      Locals:         1       0       0       0
  4325 ;;      Temps:          0       0       0       0
  4326 ;;      Totals:         3       0       0       0
  4327 ;;Total ram usage:        3 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_InterruptHandlerHigh
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text32
  4337  000E9C                     __ptext32:
  4338                           	opt callstack 0
  4339  000E9C                     _processRFID:
  4340                           	opt callstack 22
  4341                           
  4342                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4343                           
  4344                           ;incstack = 0
  4345  000E9C  0E03               	movlw	3
  4346  000E9E  1802               	xorwf	processRFID@latestChar,w,c
  4347  000EA0  A4D8               	btfss	status,2,c
  4348  000EA2  D002               	goto	i2l1966
  4349                           
  4350                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4351  000EA4  0E01               	movlw	1
  4352  000EA6  0012               	return	
  4353  000EA8                     i2l1966:
  4354  000EA8  0E02               	movlw	2
  4355  000EAA  1802               	xorwf	processRFID@latestChar,w,c
  4356  000EAC  A4D8               	btfss	status,2,c
  4357  000EAE  D010               	goto	i2l1986
  4358                           
  4359                           ;RFID.c: 48:     {;RFID.c: 50:        position_in_buf = 0;
  4360  000EB0  0E00               	movlw	0
  4361  000EB2  6E3A               	movwf	processRFID@position_in_buf,c
  4362                           
  4363                           ;RFID.c: 51:        for(char i=0 ;i<12 ;i++)
  4364  000EB4  0E00               	movlw	0
  4365  000EB6  6E03               	movwf	processRFID@i,c
  4366  000EB8                     i2l1974:
  4367                           
  4368                           ;RFID.c: 52:        {;RFID.c: 53:             RFIDbuf[i] = 0;
  4369  000EB8  5001               	movf	processRFID@RFIDbuf,w,c
  4370  000EBA  2403               	addwf	processRFID@i,w,c
  4371  000EBC  6ED9               	movwf	fsr2l,c
  4372  000EBE  6ADA               	clrf	fsr2h,c
  4373  000EC0  0E00               	movlw	0
  4374  000EC2  6EDF               	movwf	indf2,c
  4375                           
  4376                           ;RFID.c: 54:        }
  4377  000EC4  2A03               	incf	processRFID@i,f,c
  4378  000EC6  0E0B               	movlw	11
  4379  000EC8  6403               	cpfsgt	processRFID@i,c
  4380  000ECA  D7F6               	goto	i2l1974
  4381  000ECC                     i2u118_40:
  4382                           
  4383                           ;RFID.c: 55:         return 0;
  4384  000ECC  0E00               	movlw	0
  4385  000ECE  0012               	return	
  4386  000ED0                     i2l1986:
  4387                           
  4388                           ;RFID.c: 59:     {;RFID.c: 60:         RFIDbuf[position_in_buf] = latestChar;
  4389  000ED0  5001               	movf	processRFID@RFIDbuf,w,c
  4390  000ED2  243A               	addwf	processRFID@position_in_buf,w,c
  4391  000ED4  6ED9               	movwf	fsr2l,c
  4392  000ED6  6ADA               	clrf	fsr2h,c
  4393  000ED8  C002  FFDF         	movff	processRFID@latestChar,indf2
  4394                           
  4395                           ;RFID.c: 61:         position_in_buf++;
  4396  000EDC  2A3A               	incf	processRFID@position_in_buf,f,c
  4397  000EDE  D7F6               	goto	i2u118_40
  4398  000EE0                     __end_of_processRFID:
  4399                           	opt callstack 0
  4400                           
  4401                           	psect	rparam
  4402  0000                     
  4403                           	psect	temp
  4404  000049                     btemp:
  4405                           	opt callstack 0
  4406  000049                     	ds	1
  4407  0000                     int$flags	set	btemp
  4408  0000                     wtemp8	set	btemp+1
  4409  0000                     ttemp5	set	btemp+1
  4410  0000                     ttemp6	set	btemp+4
  4411  0000                     ttemp7	set	btemp+8
  4412                           tosu	equ	0xFFF
  4413                           tosh	equ	0xFFE
  4414                           tosl	equ	0xFFD
  4415                           stkptr	equ	0xFFC
  4416                           pclatu	equ	0xFFB
  4417                           pclath	equ	0xFFA
  4418                           pcl	equ	0xFF9
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           indf0	equ	0xFEF
  4426                           postinc0	equ	0xFEE
  4427                           postdec0	equ	0xFED
  4428                           preinc0	equ	0xFEC
  4429                           plusw0	equ	0xFEB
  4430                           fsr0h	equ	0xFEA
  4431                           fsr0l	equ	0xFE9
  4432                           wreg	equ	0xFE8
  4433                           indf1	equ	0xFE7
  4434                           postinc1	equ	0xFE6
  4435                           postdec1	equ	0xFE5
  4436                           preinc1	equ	0xFE4
  4437                           plusw1	equ	0xFE3
  4438                           fsr1h	equ	0xFE2
  4439                           fsr1l	equ	0xFE1
  4440                           bsr	equ	0xFE0
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           preinc2	equ	0xFDC
  4445                           plusw2	equ	0xFDB
  4446                           fsr2h	equ	0xFDA
  4447                           fsr2l	equ	0xFD9
  4448                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    6
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      72
    BANK0           160     18      79
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@move	PTR struct Movement_storage size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    returnHome@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(1) Largest target is 1
		 -> RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@move	PTR struct Movement_storage size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    scanForBeacon@exit_flag	PTR volatile unsigned char  size(1) Largest target is 1
		 -> RFID_flag(COMRAM[1]), 

    scanForBeacon@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@move	PTR struct Movement_storage size(1) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(1) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCDString@string	PTR unsigned char  size(1) Largest target is 16
		 -> STR_10(CODE[16]), STR_9(CODE[16]), STR_8(CODE[13]), STR_7(CODE[16]), 
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    initMotorValues@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    initMotorValues@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    initMotorValues@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    initMotorValues@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    initMotorValues@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    initMotorValues@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(1) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S370DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S370DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _waitForInput->_LCDString
    _waitForInput->_SetLine
    _waitForInput->_clearLCD
    _stopAndDisplay->_stop
    _display_RFID->_SetLine
    _display_RFID->_clearLCD
    _check_RFID->_LCDString
    _check_RFID->_SetLine
    _SetLine->_SendLCD
    _stabiliseAverage->_classify_data
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnLeft
    _turnLeft->_setMotorPWM
    _returnHome->_moveBackward
    _returnHome->_stop
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _clearLCD->_SendLCD
    _LCDString->_SendLCD
    _SendLCD->_LCDout
    _initMotorValues->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   54843
                                              0 BANK0     18    18      0
                          _LCDString
                    _initMotorValues
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                   _stabiliseAverage
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         4     4      0    4446
                                             18 COMRAM     4     4      0
                          _LCDString
                            _SetLine
                           _clearLCD
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                       9     4      5   15120
                                             42 COMRAM     9     4      5
                          _LCDString
                         _check_RFID
                           _clearLCD
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         3     2      1    3633
                                             18 COMRAM     3     2      1
                            _SendLCD
                            _SetLine
                           _clearLCD
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          23    22      1    4536
                                             18 COMRAM    23    22      1
                          _LCDString
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             17 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _stabiliseAverage                                     7     7      0     471
                                             19 COMRAM     7     7      0
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             17 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     155
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       11     5      6    7230
                                             42 COMRAM    11     5      6
                          _LCDString
                      _classify_data
                           _clearLCD
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          11     4      7   13301
                                             42 COMRAM    11     4      7
                          _LCDString
                           _clearLCD
                       _moveBackward
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 7     3      4    3169
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        13     7      6    7301
                                             42 COMRAM    13     7      6
                          _LCDString
                      _classify_data
                           _clearLCD
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          7     3      4    2930
                                             35 COMRAM     7     3      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             1     1      0    1117
                                             17 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     366
                                             13 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCDString                                            1     0      1    2082
                                             17 COMRAM     1     0      1
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             15 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             13 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorValues                                      2     0      2    2958
                                             35 COMRAM     2     0      2
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          8     7      1    2344
                                             27 COMRAM     8     7      1
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     352
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             19 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  7     7      0       0
                                              6 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              3 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDString
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorValues
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _LCDString
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _clearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _LCDString
       _SendLCD
         _LCDout
           _E_TOG
     _clearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _LCDString
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _clearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stabiliseAverage
     _classify_data
   _stopAndDisplay
     _LCDString
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCDString
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _clearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _display_RFID
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
       _clearLCD
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _LCDString
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _clearLCD
       _SendLCD
         _LCDout
           _E_TOG

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      4F       5       49.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97       3        0.0%
DATA                 0      0      97      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 10 14:02:08 2020

                                 l57 0F60                         ___awdiv@sign 0019  
                                 bsr 000FE0                  ___wmul@multiplicand 0010  
                      ?_display_RFID 0013                      _initMotorValues 06D4  
                                l131 0580                                  l343 06C0  
                                l369 0DB8                  display_RFID@dataBuf 0013  
                     moveToBeacon@mL 002B                       moveToBeacon@mR 002C  
            __size_of_stopAndDisplay 0072                                  wreg 000FE8  
                       processRFID@i 0003                         __CFG_LVP$OFF 000000  
                               l2310 100A                                 l2304 055A  
                               l2314 101C                                 l2252 0A72  
                               l2430 0BF4                                 l2414 0D4C  
                               l2502 0F32                                 l2264 0A98  
                               l2280 0ACA                                 l2424 0D82  
                               l2408 0D10                                 l2266 0AA0  
                               l2258 0A82                                 l2290 1028  
                               l2442 0C2C                                 l2284 0AD8  
                               l2276 0AC0                                 l2516 0E98  
                               l2460 0BB8                                 l2604 0A14  
                               l2382 0E1E                                 l2296 1042  
                               l2448 0B80                                 l2616 0A48  
                               l2480 0408                                 l2650 08E8  
                               l2634 08A8                                 l2378 0E10  
                               l2490 04B4                                 l2474 03D6  
                               l2714 0CAE                                 l2652 08F0  
                               l2468 03A4                                 l2708 0C7C  
                               l2740 09D0                                 l2732 0982  
                               l2724 093A                                 l2662 091E  
                               l2646 08DC                                 l2398 0CDA  
                               l2566 0EE8                                 l2590 0DD6  
                               l2680 0658                                 l2736 09AC  
                               l2728 095E                                 l2674 05FA  
                               l2684 0688                                 l2678 062A  
                               l2698 0C68                                 STR_1 0375  
                               STR_2 0347                                 STR_3 0337  
                               STR_4 0391                                 STR_5 0357  
                               STR_6 0366                                 STR_7 0327  
                               STR_8 0384                                 STR_9 0317  
                               u2010 06B4                                 u2030 0CA8  
                               u2107 0C86                                 u2117 101E  
                               u1510 0AA4                                 _LATB 000F8A  
                               u2207 084C                                 u2127 07BC  
                               u2217 085E                                 u2137 07D2  
                               u2307 0FF0                                 u2227 0D04  
                               u2147 07E2                                 u1700 041C  
                               u2317 0B52                                 u2237 0D76  
                               u2157 07F0                                 u1710 0426  
                               u2327 1108                                 u2247 0E48  
                               u2167 07FE                                 u1800 0468  
                               u1720 0428                                 u2257 0BAC  
                               u2177 0810                                 u2097 0DE0  
                               u1810 0476                                 u1730 0436  
                               u1475 0FD2                                 u2267 0C20  
                               u2187 0822                                 u1564 0530  
                               u1476 0FD4                                 u1820 0478  
                               u1740 0438                                 u1565 052C  
                               u2277 10E6                                 u2197 0838  
                               u1574 0574                                 u1830 0494  
                               u1750 0446                                 u1910 0E02  
                               u1575 0570                                 u2287 103C  
                               u1840 0496                                 u1760 0448  
                               u1585 05C8                                 u2297 0FE0  
                               u1770 0456                                 u1940 08D8  
                               u1780 0458                                 u1860 0F5A  
                               u1870 0E94                                 u1790 0466  
                               i1l74 005C                                 i2l65 0FBA  
                               i2l69 0FBC                         _travel_moves 0060  
                               _main 0922                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0049  
                               _stop 0E08                                 prodh 000FF4  
                               prodl 000FF3                                 start 009E  
                 __size_of_LCDString 002C                    ?_stabiliseAverage 0001  
                       ___param_bank 000000                   ??_stabiliseAverage 0014  
                    __end_of_SendLCD 0FF8                      __end_of_SetLine 1026  
                     ??_display_RFID 0014                                ?_main 0001  
                    __end_of___awdiv 0AE2                                STR_10 0307  
                              ?_stop 0024                                _T0CON 000FD5  
                    ___awdiv@divisor 0016                                _PDC0H 000F78  
                              _PDC1H 000F76                                _PDC0L 000F79  
                              _PDC1L 000F77                                _T5CON 000FB7  
                    ___awdiv@counter 0018                                _RCREG 000FAE  
                              _E_TOG 1104                                _SPBRG 000FAF  
                       ?_init_sensor 0001                      __end_of_initPWM 10D6  
                              _setup 0F5C                     moveToBeacon@move 002F  
                              tablat 000FF5                                plusw2 000FDB  
                 processRFID@RFIDbuf 0001                                ttemp5 004A  
                              ttemp6 004D                                ttemp7 0051  
                              stop@i 0029                                status 000FD8  
                              wtemp8 004A                 moveForward@max_power 0026  
                     __CFG_MCLRE$OFF 000000                      __initialization 1052  
            __end_of_initMotorValues 079E                         __end_of_main 09DA  
                       __end_of_stop 0E58                       __CFG_OSC$IRCIO 000000  
                             ??_main 0038          moveToBeacon@beacon_location 0035  
                             ??_stop 0028                        __activetblptr 000001  
                             ?_E_TOG 0001                    __end_of_LCDString 1052  
                       ?_setMotorPWM 001C                         ?_moveForward 0024  
       scanForBeacon@beacon_location 0035                     ___awdiv@dividend 0014  
                             ?_setup 0001                               _ANSEL0 000FB8  
                             _ANSEL1 000FB9                               i1l2190 007C  
                             i2l1974 0EB8                               i2l1966 0EA8  
                             i2l1986 0ED0                               _LCDout 0AE2  
                        SendLCD@Byte 0011                               _OSCCON 000FD3  
                             _PTCON0 000F7F                               _PTCON1 000F7E  
                             _SPBRGH 000FB0          __end_ofmain@SEARCHING_SPEED 0307  
                             _PTPERH 000F7A                               _PTPERL 000F7B  
                        SendLCD@type 0010                     __end_of_clearLCD 10F0  
                          ??_SendLCD 0011                            ??_SetLine 0012  
                      display_RFID@i 0014                               ___wmul 107C  
                          ??___awdiv 0018                     __end_of_init_LCD 0866  
                             clear_0 1058                               clear_1 1064  
                   ___awdiv@quotient 001A               __size_of_scanForBeacon 0084  
                  moveToBeacon@speed 002D                            ??_initPWM 0010  
                     _stopAndDisplay 0C42                         __mediumconst 0000  
__end_ofmoveToBeacon@ERROR_THRESHOLD 0303          moveToBeacon@ERROR_THRESHOLD 0301  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               stop@mL 0024  
                             stop@mR 0025                         ?_processRFID 0001  
                   __end_of_turnLeft 0D26                 __end_of_display_RFID 0F5C  
                         __accesstop 0060              __end_of__initialization 106A  
                      ___rparam_used 000001                          SetLine@line 0012  
                      __end_of_E_TOG 1112            moveToBeacon@error_counter 0036  
                     __pcstackCOMRAM 0001                     ?_initMotorValues 0024  
                      __end_of_setup 0F92               __end_of_stopAndDisplay 0CB4  
                            ??_E_TOG 000E        __size_of_InterruptHandlerHigh 0FC0  
        __end_of_InterruptHandlerLow 009E                __end_of_classify_data 0E9C  
                         _check_RFID 039C                 __size_of_init_sensor 0014  
                            ??_setup 0013                        ?_moveBackward 0024  
                         __pbssBANK0 0060                              ?_LCDout 0001  
                      _scanForBeacon 09DA                   __size_of_init_RFID 001A  
                            ?___wmul 000E                        ?_moveToBeacon 002B  
                            _CAP1CON 000F63                      ?_stopAndDisplay 002B  
          __size_of_stabiliseAverage 0040                            ?_clearLCD 0001  
                            _RFIDbuf 003C                              _PWMCON0 000F6F  
                            _PWMCON1 000F6E                       ??_moveBackward 0028  
                     ?_scanForBeacon 002B                 __size_of_setMotorPWM 0114  
               __size_of_moveForward 0074            stopAndDisplay@RFID_buffer 002F  
                          ?_init_LCD 0001                      __size_of_LCDout 0078  
                      moveBackward@i 0029                        ?_waitForInput 0001  
                 __size_of_turnRight 0072                              _SendLCD 0FC8  
                            __Hparam 0000                              _SetLine 0FF8  
                            __Lparam 0000                       ??_moveToBeacon 0031  
              processRFID@latestChar 0002                              ___awdiv 0A5E  
                    __size_of___wmul 0026                         __psmallconst 0300  
                   initPWM@PWMperiod 000E                              __pcinit 1052  
                            __ramtop 0300                            ?_turnLeft 0024  
                            __ptext0 0922                              __ptext1 0D98  
                            __ptext2 0C42                              __ptext3 0F20  
                            __ptext4 039C                              __ptext5 0FF8  
                            __ptext6 0EE0                              __ptext7 0F5C  
                            __ptext8 10F0                              __ptext9 10A2  
                  __end_of_init_RFID 10BC                     check_RFID@hexBuf 0016  
                            _initPWM 10BC                           ??_clearLCD 0012  
                       LCDout@number 000F                    scanForBeacon@move 002F  
              __size_of_display_RFID 003C                    stop@initial_speed 0026  
                        ?_check_RFID 0013                       __pintcode_body 0F92  
                          _LCDString 1026                 end_of_initialization 106A  
                 setMotorPWM@PWMduty 0022                           ??_init_LCD 0012  
               __size_of_processRFID 0044                       ??_waitForInput 0013  
                            int_func 0F92                            _RFID_flag 0048  
                          _RCSTAbits 000FAB                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              moveToBeacon@exit_flag 0030                           _robot_mode 003B  
                         _returnHome 05D8                    initMotorValues@mL 0024  
                  initMotorValues@mR 0025                         _display_RFID 0F20  
                         ??_turnLeft 0028                            _PORTDbits 000F83  
                  __end_of_turnRight 0D98                            _TRISAbits 000F92  
                          _TRISBbits 000F93                            _TRISCbits 000F94  
                          _TRISDbits 000F95                      ??_scanForBeacon 0031  
                         ?_LCDString 0012                        moveForward@mL 0024  
                      moveForward@mR 0025                       __end_of_LCDout 0B5A  
                          _TXSTAbits 000FAC                           main@motorL 009D  
                         main@motorR 00A6                 __end_of_moveBackward 0BCE  
                __size_of_check_RFID 0128                       __end_of___wmul 10A2  
                        _BAUDCONbits 000FAA                     _stabiliseAverage 0EE0  
                  stabiliseAverage@i 0019                classify_data@filtered 0012  
                start_initialization 1052                 __end_of_moveToBeacon 0922  
              classify_data@raw_data 000E                             ??_LCDout 000E  
              moveBackward@max_power 0026         __end_of_InterruptHandlerHigh 0FC8  
              classify_data@smoothed 0038                     ??_stopAndDisplay 0030  
                           ??___wmul 0012                      scanForBeacon@mL 002B  
                    scanForBeacon@mR 002C                   turnRight@max_power 0026  
                   main@MOVING_SPEED 0303                          ?_returnHome 002B  
               __end_of_waitForInput 0E08             __size_of_initMotorValues 00CA  
                        __pbssCOMRAM 0038                        ??_init_sensor 000E  
                  turnLeft@max_power 0026                        __pcstackBANK0 009D  
                  __size_of_clearLCD 001A                          ??_LCDString 0013  
       __size_of_InterruptHandlerLow 0086                    __size_of_init_LCD 00C8  
                           ?_SendLCD 0010                             ?_SetLine 0001  
                          __pintcode 0008                             ?___awdiv 0014  
             __size_of_classify_data 0044                   check_RFID@checksum 0027  
                        __pintcodelo 0018                             _CAP1BUFH 000F69  
                           _CAP1BUFL 000F68                             ?_initPWM 000E  
                        __smallconst 0300                       __size_of_E_TOG 000E  
                  __size_of_turnLeft 0072                        waitForInput@i 0015  
                          _init_RFID 10A2                  stopAndDisplay@speed 002D  
                      ??_setMotorPWM 001D                        ??_moveForward 0028  
                       ??_check_RFID 0014                       __size_of_setup 0036  
                    check_RFID@byte1 0022                      check_RFID@byte2 0023  
                    check_RFID@byte3 0024                      check_RFID@byte4 0025  
                    check_RFID@byte5 0026                  __end_of_init_sensor 1104  
                     ___wmul@product 0012                  __size_of_returnHome 00FC  
                           _LATAbits 000F89                             _LATCbits 000F8B  
                           _LATDbits 000F8C                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             i1u140_20 0046  
              __size_of_moveBackward 0074                             i2u118_40 0ECC  
                        turnRight@mL 0024                          turnRight@mR 0025  
                           i2u137_40 0FAA                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                 moveToBeacon@raw_data 0033  
                 __end_of_check_RFID 04C4                    ___wmul@multiplier 000E  
                       setMotorPWM@m 001C                         moveForward@i 0029  
                    LCDString@string 0012                __size_of_moveToBeacon 00BC  
               _InterruptHandlerHigh 0008                           ?_init_RFID 0001  
                main@SEARCHING_SPEED 0305                            _turnRight 0D26  
                      ??_processRFID 0003                        _classify_data 0E58  
             returnHome@search_speed 002F                          _INTCON2bits 000FF1  
             scanForBeacon@exit_flag 0030                    ??_initMotorValues 0026  
                     moveBackward@mL 0024                       moveBackward@mR 0025  
                       _moveBackward 0B5A                  __end_of_setMotorPWM 05D8  
                __end_of_moveForward 0C42                          check_RFID@i 0028  
           __end_of_stabiliseAverage 0F20                             __Hrparam 0000  
                   __size_of_SendLCD 0030                             __Lrparam 0000  
                   __size_of_SetLine 002E                         __Lsmallconst 0300  
              __size_of_waitForInput 0070                         _moveToBeacon 0866  
                   __size_of___awdiv 0084                ?_InterruptHandlerHigh 0001  
                   __size_of_initPWM 001A                             _clearLCD 10D6  
                        _init_sensor 10F0                       ?_classify_data 000E  
                  check_RFID@dataBuf 0013                           ?_turnRight 0024  
                           __ptext10 079E                             __ptext11 10BC  
                           __ptext20 10D6                             __ptext12 09DA  
                           __ptext21 0E58                             __ptext13 0CB4  
                           __ptext22 1026                             __ptext14 05D8  
                           __ptext23 0FC8                             __ptext15 0D26  
                           __ptext32 0E9C                             __ptext24 0AE2  
                           __ptext16 0E08                             __ptext25 1104  
                           __ptext17 0B5A                             __ptext26 06D4  
                           __ptext18 0866                             __ptext27 04C4  
                           __ptext19 0BCE                             __ptext28 107C  
                           __ptext29 0A5E                __end_of_scanForBeacon 0A5E  
           __end_ofmain@MOVING_SPEED 0305                             _init_LCD 079E  
                      __size_of_main 00B8                        __size_of_stop 0050  
                         turnLeft@mL 0024                           turnLeft@mR 0025  
                __end_of_processRFID 0EE0                         _waitForInput 0D98  
                 scanForBeacon@speed 002D                           turnRight@i 0029  
                           int$flags 0049                         ??_returnHome 0032  
                _InterruptHandlerLow 0018                             _turnLeft 0CB4  
              scanForBeacon@raw_data 0033                           _INTCONbits 000FF2  
           stabiliseAverage@raw_data 0017                          ??_init_RFID 000E  
                        _setMotorPWM 04C4                          _moveForward 0BCE  
                           intlevel1 0000                             intlevel2 0000  
               ?_InterruptHandlerLow 0001                   __end_of_returnHome 06D4  
                          turnLeft@i 0029                           _OSCCONbits 000FD3  
         processRFID@position_in_buf 003A               ??_InterruptHandlerHigh 0004  
                    ??_classify_data 0010                     stopAndDisplay@mL 002B  
                   stopAndDisplay@mR 002C                 returnHome@move_speed 002D  
                        ??_turnRight 0028                          _processRFID 0E9C  
              ??_InterruptHandlerLow 0007                      stopAndDisplay@i 0032  
                     returnHome@move 0031                         returnHome@mL 002B  
                       returnHome@mR 002C  
