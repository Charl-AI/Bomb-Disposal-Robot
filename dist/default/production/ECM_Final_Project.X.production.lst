

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 21:39:23 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4331 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     _PORTDbits	set	3971
    83  0000                     _CAP1BUFL	set	3944
    84  0000                     _CAP1BUFH	set	3945
    85  0000                     _CAP1CON	set	3939
    86  0000                     _ANSEL1	set	4025
    87  0000                     _ANSEL0	set	4024
    88  0000                     _T5CON	set	4023
    89  0000                     _IPR1bits	set	3999
    90  0000                     _PIE1bits	set	3997
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _TXSTAbits	set	4012
    93  0000                     _BAUDCONbits	set	4010
    94  0000                     _SPBRGH	set	4016
    95  0000                     _SPBRG	set	4015
    96  0000                     _TRISAbits	set	3986
    97  0000                     _TRISCbits	set	3988
    98  0000                     _LATDbits	set	3980
    99  0000                     _LATCbits	set	3979
   100  0000                     _LATAbits	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _PTPERH	set	3962
   103  0000                     _PTPERL	set	3963
   104  0000                     _PWMCON1	set	3950
   105  0000                     _PWMCON0	set	3951
   106  0000                     _PTCON1	set	3966
   107  0000                     _PTCON0	set	3967
   108  0000                     _RCREG	set	4014
   109  0000                     _PIR1bits	set	3998
   110  0000                     _INTCON2bits	set	4081
   111  0000                     _T0CON	set	4053
   112  0000                     _TRISDbits	set	3989
   113  0000                     _TRISBbits	set	3987
   114  0000                     _RCONbits	set	4048
   115  0000                     _INTCONbits	set	4082
   116  0000                     _OSCCONbits	set	4051
   117  0000                     _OSCCON	set	4051
   118  0000                     _PDC1H	set	3958
   119  0000                     _PDC1L	set	3959
   120  0000                     _PDC0H	set	3960
   121  0000                     _PDC0L	set	3961
   122                           
   123                           	psect	smallconst
   124  000300                     __psmallconst:
   125                           	opt callstack 0
   126  000300  00                 	db	0
   127  000301                     STR_10:
   128  000301  53                 	db	83	;'S'
   129  000302  54                 	db	84	;'T'
   130  000303  41                 	db	65	;'A'
   131  000304  52                 	db	82	;'R'
   132  000305  54                 	db	84	;'T'
   133  000306  49                 	db	73	;'I'
   134  000307  4E                 	db	78	;'N'
   135  000308  47                 	db	71	;'G'
   136  000309  20                 	db	32
   137  00030A  53                 	db	83	;'S'
   138  00030B  45                 	db	69	;'E'
   139  00030C  41                 	db	65	;'A'
   140  00030D  52                 	db	82	;'R'
   141  00030E  43                 	db	67	;'C'
   142  00030F  48                 	db	72	;'H'
   143  000310  00                 	db	0
   144  000311                     STR_9:
   145  000311  54                 	db	84	;'T'
   146  000312  4F                 	db	79	;'O'
   147  000313  20                 	db	32
   148  000314  53                 	db	83	;'S'
   149  000315  54                 	db	84	;'T'
   150  000316  41                 	db	65	;'A'
   151  000317  52                 	db	82	;'R'
   152  000318  54                 	db	84	;'T'
   153  000319  20                 	db	32
   154  00031A  53                 	db	83	;'S'
   155  00031B  45                 	db	69	;'E'
   156  00031C  41                 	db	65	;'A'
   157  00031D  52                 	db	82	;'R'
   158  00031E  43                 	db	67	;'C'
   159  00031F  48                 	db	72	;'H'
   160  000320  00                 	db	0
   161  000321                     STR_7:
   162  000321  52                 	db	82	;'R'
   163  000322  45                 	db	69	;'E'
   164  000323  53                 	db	83	;'S'
   165  000324  45                 	db	69	;'E'
   166  000325  54                 	db	84	;'T'
   167  000326  54                 	db	84	;'T'
   168  000327  49                 	db	73	;'I'
   169  000328  4E                 	db	78	;'N'
   170  000329  47                 	db	71	;'G'
   171  00032A  20                 	db	32
   172  00032B  52                 	db	82	;'R'
   173  00032C  4F                 	db	79	;'O'
   174  00032D  42                 	db	66	;'B'
   175  00032E  4F                 	db	79	;'O'
   176  00032F  54                 	db	84	;'T'
   177  000330  00                 	db	0
   178  000331                     STR_3:
   179  000331  43                 	db	67	;'C'
   180  000332  48                 	db	72	;'H'
   181  000333  45                 	db	69	;'E'
   182  000334  43                 	db	67	;'C'
   183  000335  4B                 	db	75	;'K'
   184  000336  53                 	db	83	;'S'
   185  000337  55                 	db	85	;'U'
   186  000338  4D                 	db	77	;'M'
   187  000339  20                 	db	32
   188  00033A  46                 	db	70	;'F'
   189  00033B  41                 	db	65	;'A'
   190  00033C  49                 	db	73	;'I'
   191  00033D  4C                 	db	76	;'L'
   192  00033E  45                 	db	69	;'E'
   193  00033F  44                 	db	68	;'D'
   194  000340  00                 	db	0
   195  000341                     STR_2:
   196  000341  43                 	db	67	;'C'
   197  000342  48                 	db	72	;'H'
   198  000343  45                 	db	69	;'E'
   199  000344  43                 	db	67	;'C'
   200  000345  4B                 	db	75	;'K'
   201  000346  53                 	db	83	;'S'
   202  000347  55                 	db	85	;'U'
   203  000348  4D                 	db	77	;'M'
   204  000349  20                 	db	32
   205  00034A  50                 	db	80	;'P'
   206  00034B  41                 	db	65	;'A'
   207  00034C  53                 	db	83	;'S'
   208  00034D  53                 	db	83	;'S'
   209  00034E  45                 	db	69	;'E'
   210  00034F  44                 	db	68	;'D'
   211  000350  00                 	db	0
   212  000351                     STR_5:
   213  000351  4D                 	db	77	;'M'
   214  000352  4F                 	db	79	;'O'
   215  000353  56                 	db	86	;'V'
   216  000354  49                 	db	73	;'I'
   217  000355  4E                 	db	78	;'N'
   218  000356  47                 	db	71	;'G'
   219  000357  20                 	db	32
   220  000358  54                 	db	84	;'T'
   221  000359  4F                 	db	79	;'O'
   222  00035A  20                 	db	32
   223  00035B  42                 	db	66	;'B'
   224  00035C  4F                 	db	79	;'O'
   225  00035D  4D                 	db	77	;'M'
   226  00035E  42                 	db	66	;'B'
   227  00035F  00                 	db	0
   228  000360                     STR_6:
   229  000360  52                 	db	82	;'R'
   230  000361  45                 	db	69	;'E'
   231  000362  54                 	db	84	;'T'
   232  000363  55                 	db	85	;'U'
   233  000364  52                 	db	82	;'R'
   234  000365  4E                 	db	78	;'N'
   235  000366  49                 	db	73	;'I'
   236  000367  4E                 	db	78	;'N'
   237  000368  47                 	db	71	;'G'
   238  000369  20                 	db	32
   239  00036A  48                 	db	72	;'H'
   240  00036B  4F                 	db	79	;'O'
   241  00036C  4D                 	db	77	;'M'
   242  00036D  45                 	db	69	;'E'
   243  00036E  00                 	db	0
   244  00036F                     STR_1:
   245  00036F  43                 	db	67	;'C'
   246  000370  72                 	db	114	;'r'
   247  000371  69                 	db	105	;'i'
   248  000372  74                 	db	116	;'t'
   249  000373  69                 	db	105	;'i'
   250  000374  63                 	db	99	;'c'
   251  000375  61                 	db	97	;'a'
   252  000376  6C                 	db	108	;'l'
   253  000377  20                 	db	32
   254  000378  45                 	db	69	;'E'
   255  000379  72                 	db	114	;'r'
   256  00037A  72                 	db	114	;'r'
   257  00037B  6F                 	db	111	;'o'
   258  00037C  72                 	db	114	;'r'
   259  00037D  00                 	db	0
   260  00037E                     STR_8:
   261  00037E  50                 	db	80	;'P'
   262  00037F  52                 	db	82	;'R'
   263  000380  45                 	db	69	;'E'
   264  000381  53                 	db	83	;'S'
   265  000382  53                 	db	83	;'S'
   266  000383  20                 	db	32
   267  000384  42                 	db	66	;'B'
   268  000385  55                 	db	85	;'U'
   269  000386  54                 	db	84	;'T'
   270  000387  54                 	db	84	;'T'
   271  000388  4F                 	db	79	;'O'
   272  000389  4E                 	db	78	;'N'
   273  00038A  00                 	db	0
   274  00038B                     STR_4:
   275  00038B  53                 	db	83	;'S'
   276  00038C  45                 	db	69	;'E'
   277  00038D  41                 	db	65	;'A'
   278  00038E  52                 	db	82	;'R'
   279  00038F  43                 	db	67	;'C'
   280  000390  48                 	db	72	;'H'
   281  000391  49                 	db	73	;'I'
   282  000392  4E                 	db	78	;'N'
   283  000393  47                 	db	71	;'G'
   284  000394  00                 	db	0
   285                           
   286                           ; #config settings
   287  000395  00                 	db	0	; dummy byte at the end
   288  0000                     
   289                           	psect	cinit
   290  0011DC                     __pcinit:
   291                           	opt callstack 0
   292  0011DC                     start_initialization:
   293                           	opt callstack 0
   294  0011DC                     __initialization:
   295                           	opt callstack 0
   296                           
   297                           ; Clear objects allocated to BANK0 (62 bytes)
   298  0011DC  EE00  F060         	lfsr	0,__pbssBANK0
   299  0011E0  0E3E               	movlw	62
   300  0011E2                     clear_0:
   301  0011E2  6AEE               	clrf	postinc0,c
   302  0011E4  06E8               	decf	wreg,f,c
   303  0011E6  E1FD               	bnz	clear_0
   304                           
   305                           ; Clear objects allocated to COMRAM (16 bytes)
   306  0011E8  EE00  F040         	lfsr	0,__pbssCOMRAM
   307  0011EC  0E10               	movlw	16
   308  0011EE                     clear_1:
   309  0011EE  6AEE               	clrf	postinc0,c
   310  0011F0  06E8               	decf	wreg,f,c
   311  0011F2  E1FD               	bnz	clear_1
   312  0011F4                     end_of_initialization:
   313                           	opt callstack 0
   314  0011F4                     __end_of__initialization:
   315                           	opt callstack 0
   316  0011F4  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   317  0011F6  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   318  0011F8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   319  0011FA  6EF8               	movwf	tblptru,c
   320  0011FC  0E03               	movlw	high __Lsmallconst
   321  0011FE  6EF7               	movwf	tblptrh,c
   322  001200  0100               	movlb	0
   323  001202  EFAF  F003         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMRAM
   326  000040                     __pbssCOMRAM:
   327                           	opt callstack 0
   328  000040                     classify_data@smoothed:
   329                           	opt callstack 0
   330  000040                     	ds	2
   331  000042                     processRFID@position_in_buf:
   332                           	opt callstack 0
   333  000042                     	ds	1
   334  000043                     _robot_mode:
   335                           	opt callstack 0
   336  000043                     	ds	1
   337  000044                     _RFIDbuf:
   338                           	opt callstack 0
   339  000044                     	ds	12
   340                           
   341                           	psect	bssBANK0
   342  000060                     __pbssBANK0:
   343                           	opt callstack 0
   344  000060                     _travel_moves:
   345                           	opt callstack 0
   346  000060                     	ds	61
   347  00009D                     _RFID_flag:
   348                           	opt callstack 0
   349  00009D                     	ds	1
   350                           
   351                           	psect	cstackBANK0
   352  00009E                     __pcstackBANK0:
   353                           	opt callstack 0
   354  00009E                     main@searching_speed:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x0
   358  00009E                     	ds	2
   359  0000A0                     main@moving_speed:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x2
   363  0000A0                     	ds	2
   364  0000A2                     main@motorL:
   365                           	opt callstack 0
   366                           
   367                           ; 9 bytes @ 0x4
   368  0000A2                     	ds	9
   369  0000AB                     main@motorR:
   370                           	opt callstack 0
   371                           
   372                           ; 9 bytes @ 0xD
   373  0000AB                     	ds	9
   374                           
   375                           	psect	cstackCOMRAM
   376  000001                     __pcstackCOMRAM:
   377                           	opt callstack 0
   378  000001                     processRFID@RFIDbuf:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x0
   382  000001                     	ds	2
   383  000003                     processRFID@latestChar:
   384                           	opt callstack 0
   385                           
   386                           ; 1 bytes @ 0x2
   387  000003                     	ds	1
   388  000004                     processRFID@i:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x3
   392  000004                     	ds	1
   393  000005                     ??_InterruptHandlerHigh:
   394                           
   395                           ; 1 bytes @ 0x4
   396  000005                     	ds	3
   397  000008                     ??_InterruptHandlerLow:
   398                           
   399                           ; 1 bytes @ 0x7
   400  000008                     	ds	7
   401  00000F                     ??_LCDout:
   402  00000F                     ?___wmul:
   403                           	opt callstack 0
   404  00000F                     initPWM@PWMperiod:
   405                           	opt callstack 0
   406  00000F                     classify_data@raw_data:
   407                           	opt callstack 0
   408  00000F                     ___wmul@multiplier:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0xE
   412  00000F                     	ds	1
   413  000010                     LCDout@number:
   414                           	opt callstack 0
   415                           
   416                           ; 1 bytes @ 0xF
   417  000010                     	ds	1
   418  000011                     ??_classify_data:
   419  000011                     SendLCD@type:
   420                           	opt callstack 0
   421  000011                     ___wmul@multiplicand:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x10
   425  000011                     	ds	1
   426  000012                     SendLCD@Byte:
   427                           	opt callstack 0
   428                           
   429                           ; 1 bytes @ 0x11
   430  000012                     	ds	1
   431  000013                     ??_init_LCD:
   432  000013                     ??_ClearLCD:
   433  000013                     SetLine@line:
   434                           	opt callstack 0
   435  000013                     LCD_String@string:
   436                           	opt callstack 0
   437  000013                     classify_data@filtered:
   438                           	opt callstack 0
   439  000013                     ___wmul@product:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x12
   443  000013                     	ds	1
   444  000014                     display_RFID@dataBuf:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x13
   448  000014                     	ds	1
   449  000015                     ??_waitForInput:
   450  000015                     ?___awdiv:
   451                           	opt callstack 0
   452  000015                     check_RFID@dataBuf:
   453                           	opt callstack 0
   454  000015                     ___awdiv@dividend:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x14
   458  000015                     	ds	1
   459  000016                     display_RFID@i:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x15
   463  000016                     	ds	1
   464  000017                     ??_check_RFID:
   465  000017                     ___awdiv@divisor:
   466                           	opt callstack 0
   467                           
   468                           ; 2 bytes @ 0x16
   469  000017                     	ds	1
   470  000018                     waitForInput@raw_data:
   471                           	opt callstack 0
   472                           
   473                           ; 2 bytes @ 0x17
   474  000018                     	ds	1
   475  000019                     ___awdiv@counter:
   476                           	opt callstack 0
   477  000019                     check_RFID@hexBuf:
   478                           	opt callstack 0
   479                           
   480                           ; 12 bytes @ 0x18
   481  000019                     	ds	1
   482  00001A                     ___awdiv@sign:
   483                           	opt callstack 0
   484  00001A                     waitForInput@i:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x19
   488  00001A                     	ds	1
   489  00001B                     ___awdiv@quotient:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x1A
   493  00001B                     	ds	1
   494  00001C                     waitForInput@i_1391:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x1B
   498  00001C                     	ds	1
   499  00001D                     setMotorPWM@m:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x1C
   503  00001D                     	ds	2
   504  00001F                     ??_setMotorPWM:
   505                           
   506                           ; 1 bytes @ 0x1E
   507  00001F                     	ds	5
   508  000024                     setMotorPWM@PWMduty:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x23
   512  000024                     	ds	1
   513  000025                     check_RFID@byte1:
   514                           	opt callstack 0
   515                           
   516                           ; 1 bytes @ 0x24
   517  000025                     	ds	1
   518  000026                     check_RFID@byte2:
   519                           	opt callstack 0
   520  000026                     stop@mL:
   521                           	opt callstack 0
   522  000026                     turnLeft@mL:
   523                           	opt callstack 0
   524  000026                     turnRight@mL:
   525                           	opt callstack 0
   526  000026                     moveForward@mL:
   527                           	opt callstack 0
   528  000026                     moveBackward@mL:
   529                           	opt callstack 0
   530  000026                     init_motor_struct@mL:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x25
   534  000026                     	ds	1
   535  000027                     check_RFID@byte3:
   536                           	opt callstack 0
   537                           
   538                           ; 1 bytes @ 0x26
   539  000027                     	ds	1
   540  000028                     check_RFID@byte4:
   541                           	opt callstack 0
   542  000028                     stop@mR:
   543                           	opt callstack 0
   544  000028                     turnLeft@mR:
   545                           	opt callstack 0
   546  000028                     turnRight@mR:
   547                           	opt callstack 0
   548  000028                     moveForward@mR:
   549                           	opt callstack 0
   550  000028                     moveBackward@mR:
   551                           	opt callstack 0
   552  000028                     init_motor_struct@mR:
   553                           	opt callstack 0
   554                           
   555                           ; 2 bytes @ 0x27
   556  000028                     	ds	1
   557  000029                     check_RFID@byte5:
   558                           	opt callstack 0
   559                           
   560                           ; 1 bytes @ 0x28
   561  000029                     	ds	1
   562  00002A                     check_RFID@checksum:
   563                           	opt callstack 0
   564  00002A                     stop@initial_speed:
   565                           	opt callstack 0
   566  00002A                     turnLeft@max_power:
   567                           	opt callstack 0
   568  00002A                     turnRight@max_power:
   569                           	opt callstack 0
   570  00002A                     moveForward@max_power:
   571                           	opt callstack 0
   572  00002A                     moveBackward@max_power:
   573                           	opt callstack 0
   574                           
   575                           ; 2 bytes @ 0x29
   576  00002A                     	ds	1
   577  00002B                     check_RFID@i:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x2A
   581  00002B                     	ds	1
   582  00002C                     ??_stop:
   583  00002C                     ??_turnLeft:
   584  00002C                     ??_turnRight:
   585  00002C                     ??_moveForward:
   586  00002C                     ??_moveBackward:
   587                           
   588                           ; 1 bytes @ 0x2B
   589  00002C                     	ds	1
   590  00002D                     stop@i:
   591                           	opt callstack 0
   592  00002D                     turnLeft@i:
   593                           	opt callstack 0
   594  00002D                     turnRight@i:
   595                           	opt callstack 0
   596  00002D                     moveForward@i:
   597                           	opt callstack 0
   598  00002D                     moveBackward@i:
   599                           	opt callstack 0
   600                           
   601                           ; 2 bytes @ 0x2C
   602  00002D                     	ds	2
   603  00002F                     scanForBeacon@mL:
   604                           	opt callstack 0
   605  00002F                     moveToBeacon@mL:
   606                           	opt callstack 0
   607  00002F                     returnHome@mL:
   608                           	opt callstack 0
   609  00002F                     stopAndDisplay@mL:
   610                           	opt callstack 0
   611                           
   612                           ; 2 bytes @ 0x2E
   613  00002F                     	ds	2
   614  000031                     scanForBeacon@mR:
   615                           	opt callstack 0
   616  000031                     moveToBeacon@mR:
   617                           	opt callstack 0
   618  000031                     returnHome@mR:
   619                           	opt callstack 0
   620  000031                     stopAndDisplay@mR:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x30
   624  000031                     	ds	2
   625  000033                     scanForBeacon@speed:
   626                           	opt callstack 0
   627  000033                     moveToBeacon@speed:
   628                           	opt callstack 0
   629  000033                     returnHome@move_speed:
   630                           	opt callstack 0
   631  000033                     stopAndDisplay@speed:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x32
   635  000033                     	ds	2
   636  000035                     scanForBeacon@move:
   637                           	opt callstack 0
   638  000035                     moveToBeacon@move:
   639                           	opt callstack 0
   640  000035                     returnHome@search_speed:
   641                           	opt callstack 0
   642  000035                     stopAndDisplay@RFID_buffer:
   643                           	opt callstack 0
   644                           
   645                           ; 2 bytes @ 0x34
   646  000035                     	ds	2
   647  000037                     ??_scanForBeacon:
   648  000037                     ??_stopAndDisplay:
   649  000037                     moveToBeacon@exit_flag:
   650                           	opt callstack 0
   651  000037                     returnHome@move:
   652                           	opt callstack 0
   653                           
   654                           ; 2 bytes @ 0x36
   655  000037                     	ds	2
   656  000039                     ??_moveToBeacon:
   657  000039                     ??_returnHome:
   658  000039                     scanForBeacon@raw_data:
   659                           	opt callstack 0
   660  000039                     stopAndDisplay@i:
   661                           	opt callstack 0
   662                           
   663                           ; 2 bytes @ 0x38
   664  000039                     	ds	2
   665  00003B                     scanForBeacon@beacon_location:
   666                           	opt callstack 0
   667  00003B                     moveToBeacon@raw_data:
   668                           	opt callstack 0
   669                           
   670                           ; 2 bytes @ 0x3A
   671  00003B                     	ds	2
   672  00003D                     moveToBeacon@beacon_location:
   673                           	opt callstack 0
   674                           
   675                           ; 1 bytes @ 0x3C
   676  00003D                     	ds	1
   677  00003E                     moveToBeacon@count:
   678                           	opt callstack 0
   679                           
   680                           ; 2 bytes @ 0x3D
   681  00003E                     	ds	2
   682  000040                     
   683                           ; 1 bytes @ 0x3F
   684 ;;
   685 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   686 ;;
   687 ;; *************** function _main *****************
   688 ;; Defined at:
   689 ;;		line 117 in file "main.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  motorR          9   13[BANK0 ] struct DC_motor
   694 ;;  motorL          9    4[BANK0 ] struct DC_motor
   695 ;;  moving_speed    2    2[BANK0 ] int 
   696 ;;  searching_sp    2    0[BANK0 ] int 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   706 ;;      Params:         0       0       0       0
   707 ;;      Locals:         0      22       0       0
   708 ;;      Temps:          0       0       0       0
   709 ;;      Totals:         0      22       0       0
   710 ;;Total ram usage:       22 bytes
   711 ;; Hardware stack levels required when called:    9
   712 ;; This function calls:
   713 ;;		_LCD_String
   714 ;;		_init_motor_struct
   715 ;;		_moveToBeacon
   716 ;;		_returnHome
   717 ;;		_scanForBeacon
   718 ;;		_setup
   719 ;;		_stopAndDisplay
   720 ;;		_waitForInput
   721 ;; This function is called by:
   722 ;;		Startup code after reset
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text0
   727  00075E                     __ptext0:
   728                           	opt callstack 0
   729  00075E                     _main:
   730                           	opt callstack 22
   731                           
   732                           ;main.c: 120:   setup();
   733                           
   734                           ;incstack = 0
   735  00075E  EC6E  F008         	call	_setup	;wreg free
   736                           
   737                           ;main.c: 123:   struct DC_motor motorL, motorR;;main.c: 124:   init_motor_struct(&motorL
      +                          , &motorR);
   738  000762  0EA2               	movlw	low main@motorL
   739  000764  6E26               	movwf	init_motor_struct@mL,c
   740  000766  0E00               	movlw	high main@motorL
   741  000768  6E27               	movwf	init_motor_struct@mL+1,c
   742  00076A  0EAB               	movlw	low main@motorR
   743  00076C  6E28               	movwf	init_motor_struct@mR,c
   744  00076E  0E00               	movlw	high main@motorR
   745  000770  6E29               	movwf	init_motor_struct@mR+1,c
   746  000772  EC30  F004         	call	_init_motor_struct	;wreg free
   747                           
   748                           ;main.c: 127:   int searching_speed = 55;
   749  000776  0E00               	movlw	0
   750  000778  0100               	movlb	0	; () banked
   751  00077A  6F9F               	movwf	(main@searching_speed+1)& (0+255),b
   752  00077C  0E37               	movlw	55
   753  00077E  6F9E               	movwf	main@searching_speed& (0+255),b
   754                           
   755                           ; BSR set to: 0
   756                           ;main.c: 128:   int moving_speed = 95;
   757  000780  0E00               	movlw	0
   758  000782  6FA1               	movwf	(main@moving_speed+1)& (0+255),b
   759  000784  0E5F               	movlw	95
   760  000786  6FA0               	movwf	main@moving_speed& (0+255),b
   761                           
   762                           ; BSR set to: 0
   763                           ;main.c: 130:   waitForInput();
   764  000788  EC69  F005         	call	_waitForInput	;wreg free
   765  00078C                     l2157:
   766                           
   767                           ;main.c: 134:   {;main.c: 136:       if(robot_mode == 0)
   768  00078C  5043               	movf	_robot_mode,w,c	;volatile
   769  00078E  A4D8               	btfss	status,2,c
   770  000790  D013               	goto	l2161
   771                           
   772                           ;main.c: 137:       {;main.c: 138:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed, &travel_moves);
   773  000792  0EA2               	movlw	low main@motorL
   774  000794  6E2F               	movwf	scanForBeacon@mL,c
   775  000796  0E00               	movlw	high main@motorL
   776  000798  6E30               	movwf	scanForBeacon@mL+1,c
   777  00079A  0EAB               	movlw	low main@motorR
   778  00079C  6E31               	movwf	scanForBeacon@mR,c
   779  00079E  0E00               	movlw	high main@motorR
   780  0007A0  6E32               	movwf	scanForBeacon@mR+1,c
   781  0007A2  C09E  F033         	movff	main@searching_speed,scanForBeacon@speed
   782  0007A6  C09F  F034         	movff	main@searching_speed+1,scanForBeacon@speed+1
   783  0007AA  0E60               	movlw	low _travel_moves
   784  0007AC  6E35               	movwf	scanForBeacon@move,c
   785  0007AE  0E00               	movlw	high _travel_moves
   786  0007B0  6E36               	movwf	scanForBeacon@move+1,c
   787  0007B2  EC12  F006         	call	_scanForBeacon	;wreg free
   788  0007B6  D04B               	goto	L3
   789  0007B8                     l2161:
   790  0007B8  0443               	decf	_robot_mode,w,c	;volatile
   791  0007BA  A4D8               	btfss	status,2,c
   792  0007BC  D017               	goto	l2165
   793                           
   794                           ;main.c: 144:       {;main.c: 145:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   795  0007BE  0EA2               	movlw	low main@motorL
   796  0007C0  6E2F               	movwf	moveToBeacon@mL,c
   797  0007C2  0E00               	movlw	high main@motorL
   798  0007C4  6E30               	movwf	moveToBeacon@mL+1,c
   799  0007C6  0EAB               	movlw	low main@motorR
   800  0007C8  6E31               	movwf	moveToBeacon@mR,c
   801  0007CA  0E00               	movlw	high main@motorR
   802  0007CC  6E32               	movwf	moveToBeacon@mR+1,c
   803  0007CE  C0A0  F033         	movff	main@moving_speed,moveToBeacon@speed
   804  0007D2  C0A1  F034         	movff	main@moving_speed+1,moveToBeacon@speed+1
   805  0007D6  0E60               	movlw	low _travel_moves
   806  0007D8  6E35               	movwf	moveToBeacon@move,c
   807  0007DA  0E00               	movlw	high _travel_moves
   808  0007DC  6E36               	movwf	moveToBeacon@move+1,c
   809  0007DE  0E9D               	movlw	low _RFID_flag
   810  0007E0  6E37               	movwf	moveToBeacon@exit_flag,c
   811  0007E2  0E00               	movlw	high _RFID_flag
   812  0007E4  6E38               	movwf	moveToBeacon@exit_flag+1,c
   813  0007E6  EC09  F005         	call	_moveToBeacon	;wreg free
   814  0007EA  D031               	goto	L3
   815  0007EC                     l2165:
   816  0007EC  0E02               	movlw	2
   817  0007EE  1843               	xorwf	_robot_mode,w,c	;volatile
   818  0007F0  A4D8               	btfss	status,2,c
   819  0007F2  D017               	goto	l2169
   820                           
   821                           ;main.c: 151:       {;main.c: 152:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   822  0007F4  0EA2               	movlw	low main@motorL
   823  0007F6  6E2F               	movwf	returnHome@mL,c
   824  0007F8  0E00               	movlw	high main@motorL
   825  0007FA  6E30               	movwf	returnHome@mL+1,c
   826  0007FC  0EAB               	movlw	low main@motorR
   827  0007FE  6E31               	movwf	returnHome@mR,c
   828  000800  0E00               	movlw	high main@motorR
   829  000802  6E32               	movwf	returnHome@mR+1,c
   830  000804  C0A0  F033         	movff	main@moving_speed,returnHome@move_speed
   831  000808  C0A1  F034         	movff	main@moving_speed+1,returnHome@move_speed+1
   832  00080C  C09E  F035         	movff	main@searching_speed,returnHome@search_speed
   833  000810  C09F  F036         	movff	main@searching_speed+1,returnHome@search_speed+1
   834  000814  0E60               	movlw	low _travel_moves
   835  000816  6E37               	movwf	returnHome@move,c
   836  000818  0E00               	movlw	high _travel_moves
   837  00081A  6E38               	movwf	returnHome@move+1,c
   838  00081C  ECCB  F001         	call	_returnHome	;wreg free
   839  000820  D016               	goto	L3
   840  000822                     l2169:
   841  000822  0E03               	movlw	3
   842  000824  1843               	xorwf	_robot_mode,w,c	;volatile
   843  000826  A4D8               	btfss	status,2,c
   844  000828  D014               	goto	l2173
   845                           
   846                           ;main.c: 158:       {;main.c: 159:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   847  00082A  0EA2               	movlw	low main@motorL
   848  00082C  6E2F               	movwf	stopAndDisplay@mL,c
   849  00082E  0E00               	movlw	high main@motorL
   850  000830  6E30               	movwf	stopAndDisplay@mL+1,c
   851  000832  0EAB               	movlw	low main@motorR
   852  000834  6E31               	movwf	stopAndDisplay@mR,c
   853  000836  0E00               	movlw	high main@motorR
   854  000838  6E32               	movwf	stopAndDisplay@mR+1,c
   855  00083A  C0A0  F033         	movff	main@moving_speed,stopAndDisplay@speed
   856  00083E  C0A1  F034         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   857  000842  0E44               	movlw	low _RFIDbuf
   858  000844  6E35               	movwf	stopAndDisplay@RFID_buffer,c
   859  000846  0E00               	movlw	high _RFIDbuf
   860  000848  6E36               	movwf	stopAndDisplay@RFID_buffer+1,c
   861  00084A  ECC6  F005         	call	_stopAndDisplay	;wreg free
   862  00084E                     L3:
   863  00084E  6E43               	movwf	_robot_mode,c	;volatile
   864                           
   865                           ;main.c: 160:       }
   866  000850  D79D               	goto	l2157
   867  000852                     l2173:
   868                           
   869                           ;main.c: 164:       {;main.c: 165:           LCD_String("Critical Error");
   870  000852  0E6F               	movlw	low STR_1
   871  000854  6E13               	movwf	LCD_String@string,c
   872  000856  0E03               	movlw	high STR_1
   873  000858  6E14               	movwf	LCD_String@string+1,c
   874  00085A  EC89  F008         	call	_LCD_String	;wreg free
   875  00085E  D796               	goto	l2157
   876  000860                     __end_of_main:
   877                           	opt callstack 0
   878                           
   879 ;; *************** function _waitForInput *****************
   880 ;; Defined at:
   881 ;;		line 149 in file "subroutines.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  raw_data        2   23[COMRAM] unsigned int 
   886 ;;  throwaway       1    0        unsigned char 
   887 ;;  i               2   27[COMRAM] int 
   888 ;;  i               2   25[COMRAM] int 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   898 ;;      Params:         0       0       0       0
   899 ;;      Locals:         7       0       0       0
   900 ;;      Temps:          2       0       0       0
   901 ;;      Totals:         9       0       0       0
   902 ;;Total ram usage:        9 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    7
   905 ;; This function calls:
   906 ;;		_ClearLCD
   907 ;;		_LCD_String
   908 ;;		_SetLine
   909 ;;		_classify_data
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text1
   916  000AD2                     __ptext1:
   917                           	opt callstack 0
   918  000AD2                     _waitForInput:
   919                           	opt callstack 23
   920                           
   921                           ;subroutines.c: 152:     for(int i =0;i<500;i++)
   922                           
   923                           ;incstack = 0
   924  000AD2  0E00               	movlw	0
   925  000AD4  6E1B               	movwf	waitForInput@i+1,c
   926  000AD6  0E00               	movlw	0
   927  000AD8  6E1A               	movwf	waitForInput@i,c
   928  000ADA                     l1981:
   929                           
   930                           ;subroutines.c: 153:     {;subroutines.c: 154:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   931  000ADA  5068               	movf	3944,w,c	;volatile
   932  000ADC  CF69 F015          	movff	3945,??_waitForInput	;volatile
   933  000AE0  6A16               	clrf	(??_waitForInput+1)& (0+255),c
   934  000AE2  C015  F016         	movff	??_waitForInput,??_waitForInput+1
   935  000AE6  6A15               	clrf	??_waitForInput,c
   936  000AE8  1015               	iorwf	??_waitForInput,w,c
   937  000AEA  6E18               	movwf	waitForInput@raw_data,c
   938  000AEC  5016               	movf	??_waitForInput+1,w,c
   939  000AEE  6E19               	movwf	waitForInput@raw_data+1,c
   940  000AF0  C018  F00F         	movff	waitForInput@raw_data,classify_data@raw_data
   941  000AF4  C019  F010         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   942  000AF8  EC2C  F008         	call	_classify_data	;wreg free
   943                           
   944                           ;subroutines.c: 156:     }
   945  000AFC  4A1A               	infsnz	waitForInput@i,f,c
   946  000AFE  2A1B               	incf	waitForInput@i+1,f,c
   947  000B00  BE1B               	btfsc	waitForInput@i+1,7,c
   948  000B02  D7EB               	goto	l1981
   949  000B04  0EF4               	movlw	244
   950  000B06  5C1A               	subwf	waitForInput@i,w,c
   951  000B08  0E01               	movlw	1
   952  000B0A  581B               	subwfb	waitForInput@i+1,w,c
   953  000B0C  A0D8               	btfss	status,0,c
   954  000B0E  D7E5               	goto	l1981
   955                           
   956                           ;subroutines.c: 159:     ClearLCD();
   957  000B10  EC30  F009         	call	_ClearLCD	;wreg free
   958                           
   959                           ;subroutines.c: 160:     SetLine(1);
   960  000B14  0E01               	movlw	1
   961  000B16  ECD7  F008         	call	_SetLine
   962                           
   963                           ;subroutines.c: 161:     LCD_String("PRESS BUTTON");
   964  000B1A  0E7E               	movlw	low STR_8
   965  000B1C  6E13               	movwf	LCD_String@string,c
   966  000B1E  0E03               	movlw	high STR_8
   967  000B20  6E14               	movwf	LCD_String@string+1,c
   968  000B22  EC89  F008         	call	_LCD_String	;wreg free
   969                           
   970                           ;subroutines.c: 162:     SetLine(2);
   971  000B26  0E02               	movlw	2
   972  000B28  ECD7  F008         	call	_SetLine
   973                           
   974                           ;subroutines.c: 163:     LCD_String("TO START SEARCH");
   975  000B2C  0E11               	movlw	low STR_9
   976  000B2E  6E13               	movwf	LCD_String@string,c
   977  000B30  0E03               	movlw	high STR_9
   978  000B32  6E14               	movwf	LCD_String@string+1,c
   979  000B34  EC89  F008         	call	_LCD_String	;wreg free
   980  000B38                     l350:
   981  000B38  A483               	btfss	3971,2,c	;volatile
   982  000B3A  D7FE               	goto	l350
   983                           
   984                           ;subroutines.c: 169:     ClearLCD();
   985  000B3C  EC30  F009         	call	_ClearLCD	;wreg free
   986                           
   987                           ;subroutines.c: 170:     SetLine(1);
   988  000B40  0E01               	movlw	1
   989  000B42  ECD7  F008         	call	_SetLine
   990                           
   991                           ;subroutines.c: 171:     LCD_String("STARTING SEARCH");
   992  000B46  0E01               	movlw	low STR_10
   993  000B48  6E13               	movwf	LCD_String@string,c
   994  000B4A  0E03               	movlw	high STR_10
   995  000B4C  6E14               	movwf	LCD_String@string+1,c
   996  000B4E  EC89  F008         	call	_LCD_String	;wreg free
   997                           
   998                           ;subroutines.c: 172:     for(int i=0; i<10;i++)
   999  000B52  0E00               	movlw	0
  1000  000B54  6E1D               	movwf	waitForInput@i_1391+1,c
  1001  000B56  0E00               	movlw	0
  1002  000B58  6E1C               	movwf	waitForInput@i_1391,c
  1003  000B5A                     l2005:
  1004                           
  1005                           ;subroutines.c: 173:     {;subroutines.c: 174:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
  1006  000B5A  0E02               	movlw	2
  1007  000B5C  6E16               	movwf	(??_waitForInput+1)& (0+255),c
  1008  000B5E  0E04               	movlw	4
  1009  000B60  6E15               	movwf	??_waitForInput& (0+255),c
  1010  000B62  0EBA               	movlw	186
  1011  000B64                     u1437:
  1012  000B64  2EE8               	decfsz	wreg,f,c
  1013  000B66  D7FE               	bra	u1437
  1014  000B68  2E15               	decfsz	??_waitForInput& (0+255),f,c
  1015  000B6A  D7FC               	bra	u1437
  1016  000B6C  2E16               	decfsz	(??_waitForInput+1)& (0+255),f,c
  1017  000B6E  D7FA               	bra	u1437
  1018  000B70  D000               	nop2	
  1019                           
  1020                           ;subroutines.c: 175:     }
  1021  000B72  4A1C               	infsnz	waitForInput@i_1391,f,c
  1022  000B74  2A1D               	incf	waitForInput@i_1391+1,f,c
  1023  000B76  BE1D               	btfsc	waitForInput@i_1391+1,7,c
  1024  000B78  D7F0               	goto	l2005
  1025  000B7A  501D               	movf	waitForInput@i_1391+1,w,c
  1026  000B7C  E104               	bnz	u1190
  1027  000B7E  0E0A               	movlw	10
  1028  000B80  5C1C               	subwf	waitForInput@i_1391,w,c
  1029  000B82  A0D8               	btfss	status,0,c
  1030  000B84  D7EA               	goto	l2005
  1031  000B86                     u1190:
  1032                           
  1033                           ;subroutines.c: 176:     ClearLCD();
  1034  000B86  EC30  F009         	call	_ClearLCD	;wreg free
  1035  000B8A  0012               	return		;funcret
  1036  000B8C                     __end_of_waitForInput:
  1037                           	opt callstack 0
  1038                           
  1039 ;; *************** function _stopAndDisplay *****************
  1040 ;; Defined at:
  1041 ;;		line 117 in file "subroutines.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  1044 ;;		 -> main@motorL(9), 
  1045 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  1046 ;;		 -> main@motorR(9), 
  1047 ;;  speed           2   50[COMRAM] int 
  1048 ;;  RFID_buffer     2   52[COMRAM] PTR volatile unsigned ch
  1049 ;;		 -> RFIDbuf(12), 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  i               2   56[COMRAM] int 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      unsigned char 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1061 ;;      Params:         8       0       0       0
  1062 ;;      Locals:         2       0       0       0
  1063 ;;      Temps:          2       0       0       0
  1064 ;;      Totals:        12       0       0       0
  1065 ;;Total ram usage:       12 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    8
  1068 ;; This function calls:
  1069 ;;		_ClearLCD
  1070 ;;		_LCD_String
  1071 ;;		_check_RFID
  1072 ;;		_display_RFID
  1073 ;;		_stop
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text2
  1080  000B8C                     __ptext2:
  1081                           	opt callstack 0
  1082  000B8C                     _stopAndDisplay:
  1083                           	opt callstack 22
  1084                           
  1085                           ;subroutines.c: 117: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *m
      +                          R, int speed,;subroutines.c: 118:                                 volatile char RFID_buf
      +                          fer[]);subroutines.c: 119: {;subroutines.c: 120:     stop(mL, mR,speed);
  1086                           
  1087                           ;incstack = 0
  1088  000B8C  C02F  F026         	movff	stopAndDisplay@mL,stop@mL
  1089  000B90  C030  F027         	movff	stopAndDisplay@mL+1,stop@mL+1
  1090  000B94  C031  F028         	movff	stopAndDisplay@mR,stop@mR
  1091  000B98  C032  F029         	movff	stopAndDisplay@mR+1,stop@mR+1
  1092  000B9C  C033  F02A         	movff	stopAndDisplay@speed,stop@initial_speed
  1093  000BA0  C034  F02B         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1094  000BA4  ECD8  F007         	call	_stop	;wreg free
  1095                           
  1096                           ;subroutines.c: 122:     display_RFID(RFID_buffer);
  1097  000BA8  C035  F014         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1098  000BAC  C036  F015         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1099  000BB0  EC4E  F008         	call	_display_RFID	;wreg free
  1100                           
  1101                           ;subroutines.c: 123:     check_RFID(RFID_buffer);
  1102  000BB4  C035  F015         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1103  000BB8  C036  F016         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1104  000BBC  EC75  F002         	call	_check_RFID	;wreg free
  1105                           
  1106                           ;subroutines.c: 125:     if(RFID_buffer[0] != 0)
  1107  000BC0  C035  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1108  000BC4  C036  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1109  000BC8  50DF               	movf	indf2,w,c
  1110  000BCA  A4D8               	btfss	status,2,c
  1111  000BCC  D026               	goto	l2119
  1112  000BCE  D028               	goto	l2121
  1113  000BD0                     l2103:
  1114                           
  1115                           ;subroutines.c: 130:             {;subroutines.c: 131:                 ClearLCD();
  1116  000BD0  EC30  F009         	call	_ClearLCD	;wreg free
  1117                           
  1118                           ;subroutines.c: 132:                 LCD_String("RESETTING ROBOT");
  1119  000BD4  0E21               	movlw	low STR_7
  1120  000BD6  6E13               	movwf	LCD_String@string,c
  1121  000BD8  0E03               	movlw	high STR_7
  1122  000BDA  6E14               	movwf	LCD_String@string+1,c
  1123  000BDC  EC89  F008         	call	_LCD_String	;wreg free
  1124                           
  1125                           ;subroutines.c: 133:                 for(int i=0; i<10;i++)
  1126  000BE0  0E00               	movlw	0
  1127  000BE2  6E3A               	movwf	stopAndDisplay@i+1,c
  1128  000BE4  0E00               	movlw	0
  1129  000BE6  6E39               	movwf	stopAndDisplay@i,c
  1130  000BE8                     l2113:
  1131                           
  1132                           ;subroutines.c: 134:                 {;subroutines.c: 135:                     _delay((u
      +                          nsigned long)((100)*(8000000/4000.0)));
  1133  000BE8  0E02               	movlw	2
  1134  000BEA  6E38               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1135  000BEC  0E04               	movlw	4
  1136  000BEE  6E37               	movwf	??_stopAndDisplay& (0+255),c
  1137  000BF0  0EBA               	movlw	186
  1138  000BF2                     u1447:
  1139  000BF2  2EE8               	decfsz	wreg,f,c
  1140  000BF4  D7FE               	bra	u1447
  1141  000BF6  2E37               	decfsz	??_stopAndDisplay& (0+255),f,c
  1142  000BF8  D7FC               	bra	u1447
  1143  000BFA  2E38               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1144  000BFC  D7FA               	bra	u1447
  1145  000BFE  D000               	nop2	
  1146                           
  1147                           ;subroutines.c: 136:                 }
  1148  000C00  4A39               	infsnz	stopAndDisplay@i,f,c
  1149  000C02  2A3A               	incf	stopAndDisplay@i+1,f,c
  1150  000C04  BE3A               	btfsc	stopAndDisplay@i+1,7,c
  1151  000C06  D7F0               	goto	l2113
  1152  000C08  503A               	movf	stopAndDisplay@i+1,w,c
  1153  000C0A  E104               	bnz	u1300
  1154  000C0C  0E0A               	movlw	10
  1155  000C0E  5C39               	subwf	stopAndDisplay@i,w,c
  1156  000C10  A0D8               	btfss	status,0,c
  1157  000C12  D7EA               	goto	l2113
  1158  000C14                     u1300:
  1159                           
  1160                           ;subroutines.c: 137:                 ClearLCD();
  1161  000C14  EC30  F009         	call	_ClearLCD	;wreg free
  1162  000C18  00FF               	reset		;# 
  1163  000C1A                     l2119:
  1164                           
  1165                           ;subroutines.c: 129:             while(PORTDbits.RD2 == 1)
  1166  000C1A  A483               	btfss	3971,2,c	;volatile
  1167  000C1C  D7FE               	goto	l2119
  1168  000C1E  D7D8               	goto	l2103
  1169  000C20                     l2121:
  1170                           
  1171                           ;subroutines.c: 143:     {;subroutines.c: 144:         return 0;
  1172  000C20  0E00               	movlw	0
  1173  000C22  0012               	return		;funcret
  1174  000C24                     __end_of_stopAndDisplay:
  1175                           	opt callstack 0
  1176                           
  1177 ;; *************** function _display_RFID *****************
  1178 ;; Defined at:
  1179 ;;		line 107 in file "RFID.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  dataBuf         2   19[COMRAM] PTR volatile unsigned ch
  1182 ;;		 -> RFIDbuf(12), 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  i               2   21[COMRAM] int 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1194 ;;      Params:         2       0       0       0
  1195 ;;      Locals:         2       0       0       0
  1196 ;;      Temps:          0       0       0       0
  1197 ;;      Totals:         4       0       0       0
  1198 ;;Total ram usage:        4 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; Hardware stack levels required when called:    7
  1201 ;; This function calls:
  1202 ;;		_ClearLCD
  1203 ;;		_SendLCD
  1204 ;;		_SetLine
  1205 ;; This function is called by:
  1206 ;;		_stopAndDisplay
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text3
  1211  00109C                     __ptext3:
  1212                           	opt callstack 0
  1213  00109C                     _display_RFID:
  1214                           	opt callstack 22
  1215                           
  1216                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1217                           
  1218                           ;incstack = 0
  1219  00109C  EC30  F009         	call	_ClearLCD	;wreg free
  1220                           
  1221                           ;RFID.c: 110:     SetLine(1);
  1222  0010A0  0E01               	movlw	1
  1223  0010A2  ECD7  F008         	call	_SetLine
  1224                           
  1225                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1226  0010A6  0E00               	movlw	0
  1227  0010A8  6E17               	movwf	display_RFID@i+1,c
  1228  0010AA  0E00               	movlw	0
  1229  0010AC  6E16               	movwf	display_RFID@i,c
  1230  0010AE                     l1881:
  1231                           
  1232                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1233  0010AE  0E01               	movlw	1
  1234  0010B0  6E11               	movwf	SendLCD@type,c
  1235  0010B2  5016               	movf	display_RFID@i,w,c
  1236  0010B4  2414               	addwf	display_RFID@dataBuf,w,c
  1237  0010B6  6ED9               	movwf	fsr2l,c
  1238  0010B8  5017               	movf	display_RFID@i+1,w,c
  1239  0010BA  2015               	addwfc	display_RFID@dataBuf+1,w,c
  1240  0010BC  6EDA               	movwf	fsr2h,c
  1241  0010BE  50DF               	movf	indf2,w,c
  1242  0010C0  ECBF  F008         	call	_SendLCD
  1243                           
  1244                           ;RFID.c: 114:     }
  1245  0010C4  4A16               	infsnz	display_RFID@i,f,c
  1246  0010C6  2A17               	incf	display_RFID@i+1,f,c
  1247  0010C8  BE17               	btfsc	display_RFID@i+1,7,c
  1248  0010CA  D7F1               	goto	l1881
  1249  0010CC  5017               	movf	display_RFID@i+1,w,c
  1250  0010CE  E105               	bnz	u1110
  1251  0010D0  0E0A               	movlw	10
  1252  0010D2  5C16               	subwf	display_RFID@i,w,c
  1253  0010D4  B0D8               	btfsc	status,0,c
  1254  0010D6  0012               	return	
  1255  0010D8  D7EA               	goto	l1881
  1256  0010DA                     u1110:
  1257  0010DA  0012               	return		;funcret
  1258  0010DC                     __end_of_display_RFID:
  1259                           	opt callstack 0
  1260                           
  1261 ;; *************** function _check_RFID *****************
  1262 ;; Defined at:
  1263 ;;		line 70 in file "RFID.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  dataBuf         2   20[COMRAM] PTR volatile unsigned ch
  1266 ;;		 -> RFIDbuf(12), 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  i               2   42[COMRAM] int 
  1269 ;;  hexBuf         12   24[COMRAM] unsigned char [12]
  1270 ;;  checksum        1   41[COMRAM] unsigned char 
  1271 ;;  byte5           1   40[COMRAM] unsigned char 
  1272 ;;  byte4           1   39[COMRAM] unsigned char 
  1273 ;;  byte3           1   38[COMRAM] unsigned char 
  1274 ;;  byte2           1   37[COMRAM] unsigned char 
  1275 ;;  byte1           1   36[COMRAM] unsigned char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1285 ;;      Params:         2       0       0       0
  1286 ;;      Locals:        20       0       0       0
  1287 ;;      Temps:          2       0       0       0
  1288 ;;      Totals:        24       0       0       0
  1289 ;;Total ram usage:       24 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    7
  1292 ;; This function calls:
  1293 ;;		_LCD_String
  1294 ;;		_SetLine
  1295 ;; This function is called by:
  1296 ;;		_stopAndDisplay
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text4
  1301  0004EA                     __ptext4:
  1302                           	opt callstack 0
  1303  0004EA                     _check_RFID:
  1304                           	opt callstack 22
  1305                           
  1306                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1307                           
  1308                           ;incstack = 0
  1309  0004EA  0E00               	movlw	0
  1310  0004EC  6E2C               	movwf	check_RFID@i+1,c
  1311  0004EE  0E00               	movlw	0
  1312  0004F0  6E2B               	movwf	check_RFID@i,c
  1313  0004F2                     l1847:
  1314                           
  1315                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1316  0004F2  502B               	movf	check_RFID@i,w,c
  1317  0004F4  2415               	addwf	check_RFID@dataBuf,w,c
  1318  0004F6  6ED9               	movwf	fsr2l,c
  1319  0004F8  502C               	movf	check_RFID@i+1,w,c
  1320  0004FA  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1321  0004FC  6EDA               	movwf	fsr2h,c
  1322  0004FE  0E2F               	movlw	47
  1323  000500  64DF               	cpfsgt	indf2,c
  1324  000502  D018               	goto	l1853
  1325  000504  502B               	movf	check_RFID@i,w,c
  1326  000506  2415               	addwf	check_RFID@dataBuf,w,c
  1327  000508  6ED9               	movwf	fsr2l,c
  1328  00050A  502C               	movf	check_RFID@i+1,w,c
  1329  00050C  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1330  00050E  6EDA               	movwf	fsr2h,c
  1331  000510  0E3A               	movlw	58
  1332  000512  60DF               	cpfslt	indf2,c
  1333  000514  D00F               	goto	l1853
  1334                           
  1335                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1336  000516  0E19               	movlw	low check_RFID@hexBuf
  1337  000518  242B               	addwf	check_RFID@i,w,c
  1338  00051A  6ED9               	movwf	fsr2l,c
  1339  00051C  0E00               	movlw	high check_RFID@hexBuf
  1340  00051E  202C               	addwfc	check_RFID@i+1,w,c
  1341  000520  6EDA               	movwf	fsr2h,c
  1342  000522  502B               	movf	check_RFID@i,w,c
  1343  000524  2415               	addwf	check_RFID@dataBuf,w,c
  1344  000526  6EE1               	movwf	fsr1l,c
  1345  000528  502C               	movf	check_RFID@i+1,w,c
  1346  00052A  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1347  00052C  6EE2               	movwf	fsr1h,c
  1348  00052E  50E7               	movf	indf1,w,c
  1349  000530  0FD0               	addlw	208
  1350  000532  D020               	goto	L4
  1351  000534                     l1853:
  1352  000534  502B               	movf	check_RFID@i,w,c
  1353  000536  2415               	addwf	check_RFID@dataBuf,w,c
  1354  000538  6ED9               	movwf	fsr2l,c
  1355  00053A  502C               	movf	check_RFID@i+1,w,c
  1356  00053C  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1357  00053E  6EDA               	movwf	fsr2h,c
  1358  000540  0E40               	movlw	64
  1359  000542  64DF               	cpfsgt	indf2,c
  1360  000544  D018               	goto	l1859
  1361  000546  502B               	movf	check_RFID@i,w,c
  1362  000548  2415               	addwf	check_RFID@dataBuf,w,c
  1363  00054A  6ED9               	movwf	fsr2l,c
  1364  00054C  502C               	movf	check_RFID@i+1,w,c
  1365  00054E  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1366  000550  6EDA               	movwf	fsr2h,c
  1367  000552  0E47               	movlw	71
  1368  000554  60DF               	cpfslt	indf2,c
  1369  000556  D00F               	goto	l1859
  1370                           
  1371                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1372  000558  0E19               	movlw	low check_RFID@hexBuf
  1373  00055A  242B               	addwf	check_RFID@i,w,c
  1374  00055C  6ED9               	movwf	fsr2l,c
  1375  00055E  0E00               	movlw	high check_RFID@hexBuf
  1376  000560  202C               	addwfc	check_RFID@i+1,w,c
  1377  000562  6EDA               	movwf	fsr2h,c
  1378  000564  502B               	movf	check_RFID@i,w,c
  1379  000566  2415               	addwf	check_RFID@dataBuf,w,c
  1380  000568  6EE1               	movwf	fsr1l,c
  1381  00056A  502C               	movf	check_RFID@i+1,w,c
  1382  00056C  2016               	addwfc	check_RFID@dataBuf+1,w,c
  1383  00056E  6EE2               	movwf	fsr1h,c
  1384  000570  50E7               	movf	indf1,w,c
  1385  000572  0FC9               	addlw	201
  1386  000574                     L4:
  1387  000574  6EDF               	movwf	indf2,c
  1388  000576                     l1859:
  1389                           
  1390                           ;RFID.c: 84:     }
  1391  000576  4A2B               	infsnz	check_RFID@i,f,c
  1392  000578  2A2C               	incf	check_RFID@i+1,f,c
  1393  00057A  BE2C               	btfsc	check_RFID@i+1,7,c
  1394  00057C  D7BA               	goto	l1847
  1395  00057E  502C               	movf	check_RFID@i+1,w,c
  1396  000580  E104               	bnz	u950
  1397  000582  0E0C               	movlw	12
  1398  000584  5C2B               	subwf	check_RFID@i,w,c
  1399  000586  A0D8               	btfss	status,0,c
  1400  000588  D7B4               	goto	l1847
  1401  00058A                     u950:
  1402                           
  1403                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1404  00058A  5019               	movf	check_RFID@hexBuf,w,c
  1405  00058C  A4D8               	btfss	status,2,c
  1406  00058E  D002               	goto	u960
  1407  000590  0E01               	movlw	1
  1408  000592  D001               	goto	u970
  1409  000594                     u960:
  1410  000594  0E00               	movlw	0
  1411  000596                     u970:
  1412  000596  101A               	iorwf	check_RFID@hexBuf+1,w,c
  1413  000598  6E25               	movwf	check_RFID@byte1,c
  1414                           
  1415                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1416  00059A  501B               	movf	check_RFID@hexBuf+2,w,c
  1417  00059C  A4D8               	btfss	status,2,c
  1418  00059E  D002               	goto	u980
  1419  0005A0  0E01               	movlw	1
  1420  0005A2  D001               	goto	u990
  1421  0005A4                     u980:
  1422  0005A4  0E00               	movlw	0
  1423  0005A6                     u990:
  1424  0005A6  101C               	iorwf	check_RFID@hexBuf+3,w,c
  1425  0005A8  6E26               	movwf	check_RFID@byte2,c
  1426                           
  1427                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1428  0005AA  501D               	movf	check_RFID@hexBuf+4,w,c
  1429  0005AC  A4D8               	btfss	status,2,c
  1430  0005AE  D002               	goto	u1000
  1431  0005B0  0E01               	movlw	1
  1432  0005B2  D001               	goto	u1010
  1433  0005B4                     u1000:
  1434  0005B4  0E00               	movlw	0
  1435  0005B6                     u1010:
  1436  0005B6  101E               	iorwf	check_RFID@hexBuf+5,w,c
  1437  0005B8  6E27               	movwf	check_RFID@byte3,c
  1438                           
  1439                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1440  0005BA  501F               	movf	check_RFID@hexBuf+6,w,c
  1441  0005BC  A4D8               	btfss	status,2,c
  1442  0005BE  D002               	goto	u1020
  1443  0005C0  0E01               	movlw	1
  1444  0005C2  D001               	goto	u1030
  1445  0005C4                     u1020:
  1446  0005C4  0E00               	movlw	0
  1447  0005C6                     u1030:
  1448  0005C6  1020               	iorwf	check_RFID@hexBuf+7,w,c
  1449  0005C8  6E28               	movwf	check_RFID@byte4,c
  1450                           
  1451                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1452  0005CA  5021               	movf	check_RFID@hexBuf+8,w,c
  1453  0005CC  A4D8               	btfss	status,2,c
  1454  0005CE  D002               	goto	u1040
  1455  0005D0  0E01               	movlw	1
  1456  0005D2  D001               	goto	u1050
  1457  0005D4                     u1040:
  1458  0005D4  0E00               	movlw	0
  1459  0005D6                     u1050:
  1460  0005D6  1022               	iorwf	check_RFID@hexBuf+9,w,c
  1461  0005D8  6E29               	movwf	check_RFID@byte5,c
  1462                           
  1463                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1464  0005DA  5023               	movf	check_RFID@hexBuf+10,w,c
  1465  0005DC  A4D8               	btfss	status,2,c
  1466  0005DE  D002               	goto	u1060
  1467  0005E0  0E01               	movlw	1
  1468  0005E2  D001               	goto	u1070
  1469  0005E4                     u1060:
  1470  0005E4  0E00               	movlw	0
  1471  0005E6                     u1070:
  1472  0005E6  1024               	iorwf	check_RFID@hexBuf+11,w,c
  1473  0005E8  6E2A               	movwf	check_RFID@checksum,c
  1474                           
  1475                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1476  0005EA  5025               	movf	check_RFID@byte1,w,c
  1477  0005EC  1826               	xorwf	check_RFID@byte2,w,c
  1478  0005EE  1827               	xorwf	check_RFID@byte3,w,c
  1479  0005F0  1828               	xorwf	check_RFID@byte4,w,c
  1480  0005F2  6E17               	movwf	??_check_RFID& (0+255),c
  1481  0005F4  6A18               	clrf	(??_check_RFID+1)& (0+255),c
  1482  0005F6  502A               	movf	check_RFID@checksum,w,c
  1483  0005F8  1829               	xorwf	check_RFID@byte5,w,c
  1484  0005FA  A4D8               	btfss	status,2,c
  1485  0005FC  D002               	goto	u1080
  1486  0005FE  0E01               	movlw	1
  1487  000600  D001               	goto	u1090
  1488  000602                     u1080:
  1489  000602  0E00               	movlw	0
  1490  000604                     u1090:
  1491  000604  1A17               	xorwf	??_check_RFID,f,c
  1492  000606  0E00               	movlw	0
  1493  000608  1A18               	xorwf	??_check_RFID+1,f,c
  1494  00060A  5017               	movf	??_check_RFID,w,c
  1495  00060C  1018               	iorwf	??_check_RFID+1,w,c
  1496  00060E  B4D8               	btfsc	status,2,c
  1497  000610  D00A               	goto	l1869
  1498                           
  1499                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1500  000612  0E02               	movlw	2
  1501  000614  ECD7  F008         	call	_SetLine
  1502                           
  1503                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1504  000618  0E41               	movlw	low STR_2
  1505  00061A  6E13               	movwf	LCD_String@string,c
  1506  00061C  0E03               	movlw	high STR_2
  1507  00061E  6E14               	movwf	LCD_String@string+1,c
  1508  000620  EC89  F008         	call	_LCD_String	;wreg free
  1509                           
  1510                           ;RFID.c: 99:     }
  1511  000624  0012               	return	
  1512  000626                     l1869:
  1513                           
  1514                           ;RFID.c: 102:         SetLine(2);
  1515  000626  0E02               	movlw	2
  1516  000628  ECD7  F008         	call	_SetLine
  1517                           
  1518                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1519  00062C  0E31               	movlw	low STR_3
  1520  00062E  6E13               	movwf	LCD_String@string,c
  1521  000630  0E03               	movlw	high STR_3
  1522  000632  6E14               	movwf	LCD_String@string+1,c
  1523  000634  EC89  F008         	call	_LCD_String	;wreg free
  1524  000638  0012               	return		;funcret
  1525  00063A                     __end_of_check_RFID:
  1526                           	opt callstack 0
  1527                           
  1528 ;; *************** function _SetLine *****************
  1529 ;; Defined at:
  1530 ;;		line 107 in file "LCDIO.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  line            1    wreg     unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  line            1   18[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1544 ;;      Params:         0       0       0       0
  1545 ;;      Locals:         1       0       0       0
  1546 ;;      Temps:          0       0       0       0
  1547 ;;      Totals:         1       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    6
  1551 ;; This function calls:
  1552 ;;		_SendLCD
  1553 ;; This function is called by:
  1554 ;;		_check_RFID
  1555 ;;		_display_RFID
  1556 ;;		_waitForInput
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text5
  1561  0011AE                     __ptext5:
  1562                           	opt callstack 0
  1563  0011AE                     _SetLine:
  1564                           	opt callstack 23
  1565                           
  1566                           ;incstack = 0
  1567                           ;SetLine@line stored from wreg
  1568  0011AE  6E13               	movwf	SetLine@line,c
  1569                           
  1570                           ;LCDIO.c: 109:     if(line == 1){
  1571  0011B0  0413               	decf	SetLine@line,w,c
  1572  0011B2  A4D8               	btfss	status,2,c
  1573  0011B4  D005               	goto	l1695
  1574                           
  1575                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1576  0011B6  0E00               	movlw	0
  1577  0011B8  6E11               	movwf	SendLCD@type,c
  1578  0011BA  0E80               	movlw	128
  1579  0011BC  ECBF  F008         	call	_SendLCD
  1580  0011C0                     l1695:
  1581                           
  1582                           ;LCDIO.c: 113:     if(line == 2){
  1583  0011C0  0E02               	movlw	2
  1584  0011C2  1813               	xorwf	SetLine@line,w,c
  1585  0011C4  A4D8               	btfss	status,2,c
  1586  0011C6  D005               	goto	l1699
  1587                           
  1588                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1589  0011C8  0E00               	movlw	0
  1590  0011CA  6E11               	movwf	SendLCD@type,c
  1591  0011CC  0EC0               	movlw	192
  1592  0011CE  ECBF  F008         	call	_SendLCD
  1593  0011D2                     l1699:
  1594                           
  1595                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1596  0011D2  0E21               	movlw	33
  1597  0011D4                     u1457:
  1598  0011D4  2EE8               	decfsz	wreg,f,c
  1599  0011D6  D7FE               	bra	u1457
  1600  0011D8  F000               	nop	
  1601  0011DA  0012               	return		;funcret
  1602  0011DC                     __end_of_SetLine:
  1603                           	opt callstack 0
  1604                           
  1605 ;; *************** function _setup *****************
  1606 ;; Defined at:
  1607 ;;		line 46 in file "main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2, status,0, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1621 ;;      Params:         0       0       0       0
  1622 ;;      Locals:         0       0       0       0
  1623 ;;      Temps:          0       0       0       0
  1624 ;;      Totals:         0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    7
  1628 ;; This function calls:
  1629 ;;		_initPWM
  1630 ;;		_init_LCD
  1631 ;;		_init_RFID
  1632 ;;		_init_sensor
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text6
  1639  0010DC                     __ptext6:
  1640                           	opt callstack 0
  1641  0010DC                     _setup:
  1642                           	opt callstack 23
  1643                           
  1644                           ;main.c: 49:     OSCCON = 0x72;
  1645                           
  1646                           ;incstack = 0
  1647  0010DC  0E72               	movlw	114
  1648  0010DE  6ED3               	movwf	4051,c	;volatile
  1649  0010E0                     l55:
  1650  0010E0  A4D3               	btfss	4051,2,c	;volatile
  1651  0010E2  D7FE               	goto	l55
  1652                           
  1653                           ;main.c: 51:     INTCONbits.GIEH = 1;
  1654  0010E4  8EF2               	bsf	4082,7,c	;volatile
  1655                           
  1656                           ;main.c: 52:     INTCONbits.GIEL = 1;
  1657  0010E6  8CF2               	bsf	4082,6,c	;volatile
  1658                           
  1659                           ;main.c: 53:     RCONbits.IPEN=1;
  1660  0010E8  8ED0               	bsf	4048,7,c	;volatile
  1661                           
  1662                           ;main.c: 56:     init_LCD();
  1663  0010EA  ECA5  F004         	call	_init_LCD	;wreg free
  1664                           
  1665                           ;main.c: 57:     init_RFID();
  1666  0010EE  EC16  F009         	call	_init_RFID	;wreg free
  1667                           
  1668                           ;main.c: 58:     init_sensor();
  1669  0010F2  EC3D  F009         	call	_init_sensor	;wreg free
  1670                           
  1671                           ;main.c: 59:     initPWM(199);
  1672  0010F6  0E00               	movlw	0
  1673  0010F8  6E10               	movwf	initPWM@PWMperiod+1,c
  1674  0010FA  0EC7               	movlw	199
  1675  0010FC  6E0F               	movwf	initPWM@PWMperiod,c
  1676  0010FE  EC23  F009         	call	_initPWM	;wreg free
  1677                           
  1678                           ;main.c: 62:     TRISBbits.RB0 = 0;
  1679  001102  9093               	bcf	3987,0,c	;volatile
  1680                           
  1681                           ;main.c: 63:     TRISBbits.RB2 = 0;
  1682  001104  9493               	bcf	3987,2,c	;volatile
  1683                           
  1684                           ;main.c: 65:     TRISDbits.RD2 = 1;
  1685  001106  8495               	bsf	3989,2,c	;volatile
  1686                           
  1687                           ;main.c: 68:     T0CON = 0b11000111;
  1688  001108  0EC7               	movlw	199
  1689  00110A  6ED5               	movwf	4053,c	;volatile
  1690                           
  1691                           ;main.c: 71:     INTCONbits.TMR0IE=1;
  1692  00110C  8AF2               	bsf	4082,5,c	;volatile
  1693                           
  1694                           ;main.c: 72:     INTCON2bits.TMR0IP=0;
  1695  00110E  94F1               	bcf	4081,2,c	;volatile
  1696  001110  0012               	return		;funcret
  1697  001112                     __end_of_setup:
  1698                           	opt callstack 0
  1699                           
  1700 ;; *************** function _init_sensor *****************
  1701 ;; Defined at:
  1702 ;;		line 17 in file "signal_processing.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;		None
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;		None
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1716 ;;      Params:         0       0       0       0
  1717 ;;      Locals:         0       0       0       0
  1718 ;;      Temps:          0       0       0       0
  1719 ;;      Totals:         0       0       0       0
  1720 ;;Total ram usage:        0 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    3
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_setup
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text7
  1731  00127A                     __ptext7:
  1732                           	opt callstack 0
  1733  00127A                     _init_sensor:
  1734                           	opt callstack 26
  1735                           
  1736                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1737                           
  1738                           ;incstack = 0
  1739  00127A  0E01               	movlw	1
  1740  00127C  6EB7               	movwf	4023,c	;volatile
  1741                           
  1742                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1743  00127E  8492               	bsf	3986,2,c	;volatile
  1744                           
  1745                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1746  001280  0E00               	movlw	0
  1747  001282  6EB8               	movwf	4024,c	;volatile
  1748                           
  1749                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1750  001284  0E00               	movlw	0
  1751  001286  6EB9               	movwf	4025,c	;volatile
  1752                           
  1753                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1754  001288  0E47               	movlw	71
  1755  00128A  6E63               	movwf	3939,c	;volatile
  1756  00128C  0012               	return		;funcret
  1757  00128E                     __end_of_init_sensor:
  1758                           	opt callstack 0
  1759                           
  1760 ;; *************** function _init_RFID *****************
  1761 ;; Defined at:
  1762 ;;		line 13 in file "RFID.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1776 ;;      Params:         0       0       0       0
  1777 ;;      Locals:         0       0       0       0
  1778 ;;      Temps:          0       0       0       0
  1779 ;;      Totals:         0       0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    3
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_setup
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text8
  1791  00122C                     __ptext8:
  1792                           	opt callstack 0
  1793  00122C                     _init_RFID:
  1794                           	opt callstack 26
  1795                           
  1796                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1797                           
  1798                           ;incstack = 0
  1799  00122C  8E94               	bsf	3988,7,c	;volatile
  1800                           
  1801                           ;RFID.c: 19:     SPBRG = 203;
  1802  00122E  0ECB               	movlw	203
  1803  001230  6EAF               	movwf	4015,c	;volatile
  1804                           
  1805                           ;RFID.c: 20:     SPBRGH = 0;
  1806  001232  0E00               	movlw	0
  1807  001234  6EB0               	movwf	4016,c	;volatile
  1808                           
  1809                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1810  001236  86AA               	bsf	4010,3,c	;volatile
  1811                           
  1812                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1813  001238  84AC               	bsf	4012,2,c	;volatile
  1814                           
  1815                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1816  00123A  88AB               	bsf	4011,4,c	;volatile
  1817                           
  1818                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1819  00123C  8EAB               	bsf	4011,7,c	;volatile
  1820                           
  1821                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1822  00123E  8AAC               	bsf	4012,5,c	;volatile
  1823                           
  1824                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1825  001240  8A9D               	bsf	3997,5,c	;volatile
  1826                           
  1827                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1828  001242  8A9F               	bsf	3999,5,c	;volatile
  1829  001244  0012               	return		;funcret
  1830  001246                     __end_of_init_RFID:
  1831                           	opt callstack 0
  1832                           
  1833 ;; *************** function _init_LCD *****************
  1834 ;; Defined at:
  1835 ;;		line 56 in file "LCDIO.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1849 ;;      Params:         0       0       0       0
  1850 ;;      Locals:         0       0       0       0
  1851 ;;      Temps:          1       0       0       0
  1852 ;;      Totals:         1       0       0       0
  1853 ;;Total ram usage:        1 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    6
  1856 ;; This function calls:
  1857 ;;		_LCDout
  1858 ;;		_SendLCD
  1859 ;; This function is called by:
  1860 ;;		_setup
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text9
  1865  00094A                     __ptext9:
  1866                           	opt callstack 0
  1867  00094A                     _init_LCD:
  1868                           	opt callstack 23
  1869                           
  1870                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1871                           
  1872                           ;incstack = 0
  1873  00094A  9094               	bcf	3988,0,c	;volatile
  1874                           
  1875                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1876  00094C  9E92               	bcf	3986,7,c	;volatile
  1877                           
  1878                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1879  00094E  9694               	bcf	3988,3,c	;volatile
  1880                           
  1881                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1882  000950  9095               	bcf	3989,0,c	;volatile
  1883                           
  1884                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1885  000952  9295               	bcf	3989,1,c	;volatile
  1886                           
  1887                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1888  000954  9C92               	bcf	3986,6,c	;volatile
  1889                           
  1890                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1891  000956  908C               	bcf	3980,0,c	;volatile
  1892                           
  1893                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1894  000958  928C               	bcf	3980,1,c	;volatile
  1895                           
  1896                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1897  00095A  968B               	bcf	3979,3,c	;volatile
  1898                           
  1899                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1900  00095C  908B               	bcf	3979,0,c	;volatile
  1901                           
  1902                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1903  00095E  9C89               	bcf	3977,6,c	;volatile
  1904                           
  1905                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1906  000960  9E89               	bcf	3977,7,c	;volatile
  1907                           
  1908                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1909  000962  0E27               	movlw	39
  1910  000964  6E13               	movwf	??_init_LCD& (0+255),c
  1911  000966  0EF5               	movlw	245
  1912  000968                     u1467:
  1913  000968  2EE8               	decfsz	wreg,f,c
  1914  00096A  D7FE               	bra	u1467
  1915  00096C  2E13               	decfsz	??_init_LCD& (0+255),f,c
  1916  00096E  D7FC               	bra	u1467
  1917  000970  F000               	nop	
  1918                           
  1919                           ;LCDIO.c: 76:  LCDout(0b0011);
  1920  000972  0E03               	movlw	3
  1921  000974  EC9C  F007         	call	_LCDout
  1922                           
  1923                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1924  000978  0E0D               	movlw	13
  1925  00097A  6E13               	movwf	??_init_LCD& (0+255),c
  1926  00097C  0EFC               	movlw	252
  1927  00097E                     u1477:
  1928  00097E  2EE8               	decfsz	wreg,f,c
  1929  000980  D7FE               	bra	u1477
  1930  000982  2E13               	decfsz	??_init_LCD& (0+255),f,c
  1931  000984  D7FC               	bra	u1477
  1932                           
  1933                           ;LCDIO.c: 78:  LCDout(0b0011);
  1934  000986  0E03               	movlw	3
  1935  000988  EC9C  F007         	call	_LCDout
  1936                           
  1937                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  1938  00098C  0E85               	movlw	133
  1939  00098E                     u1487:
  1940  00098E  2EE8               	decfsz	wreg,f,c
  1941  000990  D7FE               	bra	u1487
  1942  000992  F000               	nop	
  1943                           
  1944                           ;LCDIO.c: 80:  LCDout(0b0011);
  1945  000994  0E03               	movlw	3
  1946  000996  EC9C  F007         	call	_LCDout
  1947                           
  1948                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1949  00099A  0E21               	movlw	33
  1950  00099C                     u1497:
  1951  00099C  2EE8               	decfsz	wreg,f,c
  1952  00099E  D7FE               	bra	u1497
  1953  0009A0  F000               	nop	
  1954                           
  1955                           ;LCDIO.c: 82:  LCDout(0b0010);
  1956  0009A2  0E02               	movlw	2
  1957  0009A4  EC9C  F007         	call	_LCDout
  1958                           
  1959                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1960  0009A8  0E21               	movlw	33
  1961  0009AA                     u1507:
  1962  0009AA  2EE8               	decfsz	wreg,f,c
  1963  0009AC  D7FE               	bra	u1507
  1964  0009AE  F000               	nop	
  1965                           
  1966                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  1967  0009B0  0E00               	movlw	0
  1968  0009B2  6E11               	movwf	SendLCD@type,c
  1969  0009B4  0E28               	movlw	40
  1970  0009B6  ECBF  F008         	call	_SendLCD
  1971                           
  1972                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1973  0009BA  0E21               	movlw	33
  1974  0009BC                     u1517:
  1975  0009BC  2EE8               	decfsz	wreg,f,c
  1976  0009BE  D7FE               	bra	u1517
  1977  0009C0  F000               	nop	
  1978                           
  1979                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  1980  0009C2  0E00               	movlw	0
  1981  0009C4  6E11               	movwf	SendLCD@type,c
  1982  0009C6  0E08               	movlw	8
  1983  0009C8  ECBF  F008         	call	_SendLCD
  1984                           
  1985                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1986  0009CC  0E21               	movlw	33
  1987  0009CE                     u1527:
  1988  0009CE  2EE8               	decfsz	wreg,f,c
  1989  0009D0  D7FE               	bra	u1527
  1990  0009D2  F000               	nop	
  1991                           
  1992                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  1993  0009D4  0E00               	movlw	0
  1994  0009D6  6E11               	movwf	SendLCD@type,c
  1995  0009D8  0E01               	movlw	1
  1996  0009DA  ECBF  F008         	call	_SendLCD
  1997                           
  1998                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1999  0009DE  0E0D               	movlw	13
  2000  0009E0  6E13               	movwf	??_init_LCD& (0+255),c
  2001  0009E2  0EFC               	movlw	252
  2002  0009E4                     u1537:
  2003  0009E4  2EE8               	decfsz	wreg,f,c
  2004  0009E6  D7FE               	bra	u1537
  2005  0009E8  2E13               	decfsz	??_init_LCD& (0+255),f,c
  2006  0009EA  D7FC               	bra	u1537
  2007                           
  2008                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2009  0009EC  0E00               	movlw	0
  2010  0009EE  6E11               	movwf	SendLCD@type,c
  2011  0009F0  0E06               	movlw	6
  2012  0009F2  ECBF  F008         	call	_SendLCD
  2013                           
  2014                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2015  0009F6  0E21               	movlw	33
  2016  0009F8                     u1547:
  2017  0009F8  2EE8               	decfsz	wreg,f,c
  2018  0009FA  D7FE               	bra	u1547
  2019  0009FC  F000               	nop	
  2020                           
  2021                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2022  0009FE  0E00               	movlw	0
  2023  000A00  6E11               	movwf	SendLCD@type,c
  2024  000A02  0E0C               	movlw	12
  2025  000A04  ECBF  F008         	call	_SendLCD
  2026                           
  2027                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2028  000A08  0E21               	movlw	33
  2029  000A0A                     u1557:
  2030  000A0A  2EE8               	decfsz	wreg,f,c
  2031  000A0C  D7FE               	bra	u1557
  2032  000A0E  F000               	nop	
  2033  000A10  0012               	return		;funcret
  2034  000A12                     __end_of_init_LCD:
  2035                           	opt callstack 0
  2036                           
  2037 ;; *************** function _initPWM *****************
  2038 ;; Defined at:
  2039 ;;		line 5 in file "dc_motor.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  PWMperiod       2   14[COMRAM] int 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2053 ;;      Params:         2       0       0       0
  2054 ;;      Locals:         0       0       0       0
  2055 ;;      Temps:          0       0       0       0
  2056 ;;      Totals:         2       0       0       0
  2057 ;;Total ram usage:        2 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    3
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_setup
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text10
  2068  001246                     __ptext10:
  2069                           	opt callstack 0
  2070  001246                     _initPWM:
  2071                           	opt callstack 26
  2072                           
  2073                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2074                           
  2075                           ;incstack = 0
  2076  001246  0E00               	movlw	0
  2077  001248  6E7F               	movwf	3967,c	;volatile
  2078                           
  2079                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2080  00124A  0E80               	movlw	128
  2081  00124C  6E7E               	movwf	3966,c	;volatile
  2082                           
  2083                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2084  00124E  0E6F               	movlw	111
  2085  001250  6E6F               	movwf	3951,c	;volatile
  2086                           
  2087                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2088  001252  0E00               	movlw	0
  2089  001254  6E6E               	movwf	3950,c	;volatile
  2090                           
  2091                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2092  001256  C00F  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2093                           
  2094                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2095  00125A  5010               	movf	initPWM@PWMperiod+1,w,c
  2096  00125C  6E7A               	movwf	3962,c	;volatile
  2097  00125E  0012               	return		;funcret
  2098  001260                     __end_of_initPWM:
  2099                           	opt callstack 0
  2100                           
  2101 ;; *************** function _scanForBeacon *****************
  2102 ;; Defined at:
  2103 ;;		line 23 in file "subroutines.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2106 ;;		 -> main@motorL(9), 
  2107 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2108 ;;		 -> main@motorR(9), 
  2109 ;;  speed           2   50[COMRAM] int 
  2110 ;;  move            2   52[COMRAM] PTR struct Movements
  2111 ;;		 -> travel_moves(61), 
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  raw_data        2   56[COMRAM] unsigned int 
  2114 ;;  beacon_locat    1   58[COMRAM] unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      unsigned char 
  2117 ;; Registers used:
  2118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2124 ;;      Params:         8       0       0       0
  2125 ;;      Locals:         3       0       0       0
  2126 ;;      Temps:          2       0       0       0
  2127 ;;      Totals:        13       0       0       0
  2128 ;;Total ram usage:       13 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    7
  2131 ;; This function calls:
  2132 ;;		_ClearLCD
  2133 ;;		_LCD_String
  2134 ;;		_classify_data
  2135 ;;		_turnLeft
  2136 ;; This function is called by:
  2137 ;;		_main
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text11
  2142  000C24                     __ptext11:
  2143                           	opt callstack 0
  2144  000C24                     _scanForBeacon:
  2145                           	opt callstack 23
  2146                           
  2147                           ;subroutines.c: 23: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed,;subroutines.c: 24:                             struct Movements *move);subr
      +                          outines.c: 25: {;subroutines.c: 26:     move-> move_type[move->move_number] = 1;
  2148                           
  2149                           ;incstack = 0
  2150  000C24  EE20 F03C          	lfsr	2,60
  2151  000C28  5035               	movf	scanForBeacon@move,w,c
  2152  000C2A  26D9               	addwf	fsr2l,f,c
  2153  000C2C  5036               	movf	scanForBeacon@move+1,w,c
  2154  000C2E  22DA               	addwfc	fsr2h,f,c
  2155  000C30  50DF               	movf	indf2,w,c
  2156  000C32  6E37               	movwf	??_scanForBeacon& (0+255),c
  2157  000C34  5037               	movf	??_scanForBeacon,w,c
  2158  000C36  2435               	addwf	scanForBeacon@move,w,c
  2159  000C38  6ED9               	movwf	fsr2l,c
  2160  000C3A  0E00               	movlw	0
  2161  000C3C  2036               	addwfc	scanForBeacon@move+1,w,c
  2162  000C3E  6EDA               	movwf	fsr2h,c
  2163  000C40  0E01               	movlw	1
  2164  000C42  6EDF               	movwf	indf2,c
  2165                           
  2166                           ;subroutines.c: 27:     turnLeft(mL,mR,speed);
  2167  000C44  C02F  F026         	movff	scanForBeacon@mL,turnLeft@mL
  2168  000C48  C030  F027         	movff	scanForBeacon@mL+1,turnLeft@mL+1
  2169  000C4C  C031  F028         	movff	scanForBeacon@mR,turnLeft@mR
  2170  000C50  C032  F029         	movff	scanForBeacon@mR+1,turnLeft@mR+1
  2171  000C54  C033  F02A         	movff	scanForBeacon@speed,turnLeft@max_power
  2172  000C58  C034  F02B         	movff	scanForBeacon@speed+1,turnLeft@max_power+1
  2173  000C5C  EC98  F006         	call	_turnLeft	;wreg free
  2174                           
  2175                           ;subroutines.c: 28:     ClearLCD();
  2176  000C60  EC30  F009         	call	_ClearLCD	;wreg free
  2177                           
  2178                           ;subroutines.c: 29:     LCD_String("SEARCHING");
  2179  000C64  0E8B               	movlw	low STR_4
  2180  000C66  6E13               	movwf	LCD_String@string,c
  2181  000C68  0E03               	movlw	high STR_4
  2182  000C6A  6E14               	movwf	LCD_String@string+1,c
  2183  000C6C  EC89  F008         	call	_LCD_String	;wreg free
  2184  000C70                     l2019:
  2185                           
  2186                           ;subroutines.c: 33:     {;subroutines.c: 35:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2187  000C70  5068               	movf	3944,w,c	;volatile
  2188  000C72  CF69 F037          	movff	3945,??_scanForBeacon	;volatile
  2189  000C76  6A38               	clrf	(??_scanForBeacon+1)& (0+255),c
  2190  000C78  C037  F038         	movff	??_scanForBeacon,??_scanForBeacon+1
  2191  000C7C  6A37               	clrf	??_scanForBeacon,c
  2192  000C7E  1037               	iorwf	??_scanForBeacon,w,c
  2193  000C80  6E39               	movwf	scanForBeacon@raw_data,c
  2194  000C82  5038               	movf	??_scanForBeacon+1,w,c
  2195  000C84  6E3A               	movwf	scanForBeacon@raw_data+1,c
  2196                           
  2197                           ;subroutines.c: 38:         char beacon_location = classify_data(raw_data);
  2198  000C86  C039  F00F         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2199  000C8A  C03A  F010         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2200  000C8E  EC2C  F008         	call	_classify_data	;wreg free
  2201  000C92  6E3B               	movwf	scanForBeacon@beacon_location,c
  2202                           
  2203                           ;subroutines.c: 41:         if(beacon_location == 1)
  2204  000C94  043B               	decf	scanForBeacon@beacon_location,w,c
  2205  000C96  A4D8               	btfss	status,2,c
  2206  000C98  D7EB               	goto	l2019
  2207                           
  2208                           ;subroutines.c: 42:         {;subroutines.c: 43:             move-> move_number += 1;
  2209  000C9A  EE20 F03C          	lfsr	2,60
  2210  000C9E  5035               	movf	scanForBeacon@move,w,c
  2211  000CA0  26D9               	addwf	fsr2l,f,c
  2212  000CA2  5036               	movf	scanForBeacon@move+1,w,c
  2213  000CA4  22DA               	addwfc	fsr2h,f,c
  2214  000CA6  2ADF               	incf	indf2,f,c
  2215                           
  2216                           ;subroutines.c: 44:             return 1;
  2217  000CA8  0E01               	movlw	1
  2218  000CAA  0012               	return		;funcret
  2219  000CAC                     __end_of_scanForBeacon:
  2220                           	opt callstack 0
  2221                           
  2222 ;; *************** function _turnLeft *****************
  2223 ;; Defined at:
  2224 ;;		line 53 in file "dc_motor.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2227 ;;		 -> main@motorL(9), 
  2228 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2229 ;;		 -> main@motorR(9), 
  2230 ;;  max_power       2   41[COMRAM] int 
  2231 ;; Auto vars:     Size  Location     Type
  2232 ;;  i               2   44[COMRAM] int 
  2233 ;; Return value:  Size  Location     Type
  2234 ;;                  1    wreg      void 
  2235 ;; Registers used:
  2236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2237 ;; Tracked objects:
  2238 ;;		On entry : 0/0
  2239 ;;		On exit  : 0/0
  2240 ;;		Unchanged: 0/0
  2241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2242 ;;      Params:         6       0       0       0
  2243 ;;      Locals:         2       0       0       0
  2244 ;;      Temps:          1       0       0       0
  2245 ;;      Totals:         9       0       0       0
  2246 ;;Total ram usage:        9 bytes
  2247 ;; Hardware stack levels used:    1
  2248 ;; Hardware stack levels required when called:    5
  2249 ;; This function calls:
  2250 ;;		_setMotorPWM
  2251 ;; This function is called by:
  2252 ;;		_scanForBeacon
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text12
  2257  000D30                     __ptext12:
  2258                           	opt callstack 0
  2259  000D30                     _turnLeft:
  2260                           	opt callstack 24
  2261                           
  2262                           ;dc_motor.c: 53: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, int max_power);
      +                          dc_motor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2263                           
  2264                           ;incstack = 0
  2265  000D30  EE20 F001          	lfsr	2,1
  2266  000D34  5026               	movf	turnLeft@mL,w,c
  2267  000D36  26D9               	addwf	fsr2l,f,c
  2268  000D38  5027               	movf	turnLeft@mL+1,w,c
  2269  000D3A  22DA               	addwfc	fsr2h,f,c
  2270  000D3C  0E00               	movlw	0
  2271  000D3E  6EDF               	movwf	indf2,c
  2272                           
  2273                           ;dc_motor.c: 57:     mR->direction = 1;
  2274  000D40  EE20 F001          	lfsr	2,1
  2275  000D44  5028               	movf	turnLeft@mR,w,c
  2276  000D46  26D9               	addwf	fsr2l,f,c
  2277  000D48  5029               	movf	turnLeft@mR+1,w,c
  2278  000D4A  22DA               	addwfc	fsr2h,f,c
  2279  000D4C  0E01               	movlw	1
  2280  000D4E  6EDF               	movwf	indf2,c
  2281                           
  2282                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2283  000D50  0E00               	movlw	0
  2284  000D52  6E2E               	movwf	turnLeft@i+1,c
  2285  000D54  0E00               	movlw	0
  2286  000D56  6E2D               	movwf	turnLeft@i,c
  2287  000D58  D021               	goto	l1791
  2288  000D5A                     l1781:
  2289                           
  2290                           ;dc_motor.c: 60:         mL->power = i;
  2291  000D5A  C026  FFD9         	movff	turnLeft@mL,fsr2l
  2292  000D5E  C027  FFDA         	movff	turnLeft@mL+1,fsr2h
  2293  000D62  C02D  FFDF         	movff	turnLeft@i,indf2
  2294                           
  2295                           ;dc_motor.c: 61:         mR->power = i;
  2296  000D66  C028  FFD9         	movff	turnLeft@mR,fsr2l
  2297  000D6A  C029  FFDA         	movff	turnLeft@mR+1,fsr2h
  2298  000D6E  C02D  FFDF         	movff	turnLeft@i,indf2
  2299                           
  2300                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2301  000D72  C026  F01D         	movff	turnLeft@mL,setMotorPWM@m
  2302  000D76  C027  F01E         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2303  000D7A  EC1D  F003         	call	_setMotorPWM	;wreg free
  2304                           
  2305                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2306  000D7E  C028  F01D         	movff	turnLeft@mR,setMotorPWM@m
  2307  000D82  C029  F01E         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2308  000D86  EC1D  F003         	call	_setMotorPWM	;wreg free
  2309                           
  2310                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2311  000D8A  0E03               	movlw	3
  2312  000D8C  6E2C               	movwf	??_turnLeft& (0+255),c
  2313  000D8E  0E98               	movlw	152
  2314  000D90                     u1567:
  2315  000D90  2EE8               	decfsz	wreg,f,c
  2316  000D92  D7FE               	bra	u1567
  2317  000D94  2E2C               	decfsz	??_turnLeft& (0+255),f,c
  2318  000D96  D7FC               	bra	u1567
  2319                           
  2320                           ;dc_motor.c: 66:     }
  2321  000D98  4A2D               	infsnz	turnLeft@i,f,c
  2322  000D9A  2A2E               	incf	turnLeft@i+1,f,c
  2323  000D9C                     l1791:
  2324  000D9C  502A               	movf	turnLeft@max_power,w,c
  2325  000D9E  5C2D               	subwf	turnLeft@i,w,c
  2326  000DA0  502E               	movf	turnLeft@i+1,w,c
  2327  000DA2  0A80               	xorlw	128
  2328  000DA4  6E2C               	movwf	??_turnLeft& (0+255),c
  2329  000DA6  502B               	movf	turnLeft@max_power+1,w,c
  2330  000DA8  0A80               	xorlw	128
  2331  000DAA  582C               	subwfb	??_turnLeft& (0+255),w,c
  2332  000DAC  B0D8               	btfsc	status,0,c
  2333  000DAE  0012               	return	
  2334  000DB0  D7D4               	goto	l1781
  2335  000DB2                     __end_of_turnLeft:
  2336                           	opt callstack 0
  2337                           
  2338 ;; *************** function _returnHome *****************
  2339 ;; Defined at:
  2340 ;;		line 92 in file "subroutines.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2343 ;;		 -> main@motorL(9), 
  2344 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2345 ;;		 -> main@motorR(9), 
  2346 ;;  move_speed      2   50[COMRAM] int 
  2347 ;;  search_speed    2   52[COMRAM] int 
  2348 ;;  move            2   54[COMRAM] PTR struct Movements
  2349 ;;		 -> travel_moves(61), 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  i               2    0        int 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      unsigned char 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2361 ;;      Params:        10       0       0       0
  2362 ;;      Locals:         2       0       0       0
  2363 ;;      Temps:          5       0       0       0
  2364 ;;      Totals:        17       0       0       0
  2365 ;;Total ram usage:       17 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    7
  2368 ;; This function calls:
  2369 ;;		_ClearLCD
  2370 ;;		_LCD_String
  2371 ;;		_moveBackward
  2372 ;;		_stop
  2373 ;;		_turnRight
  2374 ;; This function is called by:
  2375 ;;		_main
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text13
  2380  000396                     __ptext13:
  2381                           	opt callstack 0
  2382  000396                     _returnHome:
  2383                           	opt callstack 23
  2384                           
  2385                           ;subroutines.c: 92: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt move_speed,;subroutines.c: 93:                             int search_speed, struct M
      +                          ovements *move);subroutines.c: 94: {;subroutines.c: 95:     stop(mL,mR,move_speed);
  2386                           
  2387                           ;incstack = 0
  2388  000396  C02F  F026         	movff	returnHome@mL,stop@mL
  2389  00039A  C030  F027         	movff	returnHome@mL+1,stop@mL+1
  2390  00039E  C031  F028         	movff	returnHome@mR,stop@mR
  2391  0003A2  C032  F029         	movff	returnHome@mR+1,stop@mR+1
  2392  0003A6  C033  F02A         	movff	returnHome@move_speed,stop@initial_speed
  2393  0003AA  C034  F02B         	movff	returnHome@move_speed+1,stop@initial_speed+1
  2394  0003AE  ECD8  F007         	call	_stop	;wreg free
  2395                           
  2396                           ;subroutines.c: 96:     ClearLCD();
  2397  0003B2  EC30  F009         	call	_ClearLCD	;wreg free
  2398                           
  2399                           ;subroutines.c: 97:     LCD_String("RETURNING HOME");
  2400  0003B6  0E60               	movlw	low STR_6
  2401  0003B8  6E13               	movwf	LCD_String@string,c
  2402  0003BA  0E03               	movlw	high STR_6
  2403  0003BC  6E14               	movwf	LCD_String@string+1,c
  2404  0003BE  EC89  F008         	call	_LCD_String	;wreg free
  2405  0003C2  D088               	goto	l320
  2406  0003C4                     l2077:
  2407                           
  2408                           ;subroutines.c: 100:     {;subroutines.c: 101:         if(move->move_type[move->move_num
      +                          ber] == 0)
  2409  0003C4  EE20 F03C          	lfsr	2,60
  2410  0003C8  5037               	movf	returnHome@move,w,c
  2411  0003CA  26D9               	addwf	fsr2l,f,c
  2412  0003CC  5038               	movf	returnHome@move+1,w,c
  2413  0003CE  22DA               	addwfc	fsr2h,f,c
  2414  0003D0  50DF               	movf	indf2,w,c
  2415  0003D2  6E39               	movwf	??_returnHome& (0+255),c
  2416  0003D4  5039               	movf	??_returnHome,w,c
  2417  0003D6  2437               	addwf	returnHome@move,w,c
  2418  0003D8  6ED9               	movwf	fsr2l,c
  2419  0003DA  0E00               	movlw	0
  2420  0003DC  2038               	addwfc	returnHome@move+1,w,c
  2421  0003DE  6EDA               	movwf	fsr2h,c
  2422  0003E0  50DF               	movf	indf2,w,c
  2423  0003E2  A4D8               	btfss	status,2,c
  2424  0003E4  D030               	goto	l2083
  2425                           
  2426                           ;subroutines.c: 102:         {;subroutines.c: 103:             moveBackward(mL,mR,move_s
      +                          peed);
  2427  0003E6  C02F  F026         	movff	returnHome@mL,moveBackward@mL
  2428  0003EA  C030  F027         	movff	returnHome@mL+1,moveBackward@mL+1
  2429  0003EE  C031  F028         	movff	returnHome@mR,moveBackward@mR
  2430  0003F2  C032  F029         	movff	returnHome@mR+1,moveBackward@mR+1
  2431  0003F6  C033  F02A         	movff	returnHome@move_speed,moveBackward@max_power
  2432  0003FA  C034  F02B         	movff	returnHome@move_speed+1,moveBackward@max_power+1
  2433  0003FE  EC1A  F007         	call	_moveBackward	;wreg free
  2434  000402                     l2081:
  2435  000402  EE20 F03C          	lfsr	2,60
  2436  000406  5037               	movf	returnHome@move,w,c
  2437  000408  26D9               	addwf	fsr2l,f,c
  2438  00040A  5038               	movf	returnHome@move+1,w,c
  2439  00040C  22DA               	addwfc	fsr2h,f,c
  2440  00040E  50DF               	movf	indf2,w,c
  2441  000410  6E39               	movwf	??_returnHome& (0+255),c
  2442  000412  5039               	movf	??_returnHome,w,c
  2443  000414  0D02               	mullw	2
  2444  000416  C037  F03A         	movff	returnHome@move,??_returnHome+1
  2445  00041A  C038  F03B         	movff	returnHome@move+1,??_returnHome+2
  2446  00041E  50F3               	movf	prodl,w,c
  2447  000420  263A               	addwf	??_returnHome+1,f,c
  2448  000422  50F4               	movf	prodh,w,c
  2449  000424  223B               	addwfc	??_returnHome+2,f,c
  2450  000426  0E14               	movlw	20
  2451  000428  243A               	addwf	??_returnHome+1,w,c
  2452  00042A  6ED9               	movwf	fsr2l,c
  2453  00042C  0E00               	movlw	0
  2454  00042E  203B               	addwfc	??_returnHome+2,w,c
  2455  000430  6EDA               	movwf	fsr2h,c
  2456  000432  0E01               	movlw	1
  2457  000434  BEDB               	btfsc	plusw2,7,c
  2458  000436  D047               	goto	u1270
  2459  000438  0E01               	movlw	1
  2460  00043A  50DB               	movf	plusw2,w,c
  2461  00043C  E1E2               	bnz	l2081
  2462  00043E  04DE               	decf	postinc2,w,c
  2463  000440  A0D8               	btfss	status,0,c
  2464  000442  D041               	goto	u1270
  2465  000444  D7DE               	goto	l2081
  2466  000446                     l2083:
  2467  000446  EE20 F03C          	lfsr	2,60
  2468  00044A  5037               	movf	returnHome@move,w,c
  2469  00044C  26D9               	addwf	fsr2l,f,c
  2470  00044E  5038               	movf	returnHome@move+1,w,c
  2471  000450  22DA               	addwfc	fsr2h,f,c
  2472  000452  50DF               	movf	indf2,w,c
  2473  000454  6E39               	movwf	??_returnHome& (0+255),c
  2474  000456  5039               	movf	??_returnHome,w,c
  2475  000458  2437               	addwf	returnHome@move,w,c
  2476  00045A  6ED9               	movwf	fsr2l,c
  2477  00045C  0E00               	movlw	0
  2478  00045E  2038               	addwfc	returnHome@move+1,w,c
  2479  000460  6EDA               	movwf	fsr2h,c
  2480  000462  04DE               	decf	postinc2,w,c
  2481  000464  A4D8               	btfss	status,2,c
  2482  000466  D02F               	goto	u1270
  2483                           
  2484                           ;subroutines.c: 107:         {;subroutines.c: 108:             turnRight(mL,mR,search_sp
      +                          eed);
  2485  000468  C02F  F026         	movff	returnHome@mL,turnRight@mL
  2486  00046C  C030  F027         	movff	returnHome@mL+1,turnRight@mL+1
  2487  000470  C031  F028         	movff	returnHome@mR,turnRight@mR
  2488  000474  C032  F029         	movff	returnHome@mR+1,turnRight@mR+1
  2489  000478  C035  F02A         	movff	returnHome@search_speed,turnRight@max_power
  2490  00047C  C036  F02B         	movff	returnHome@search_speed+1,turnRight@max_power+1
  2491  000480  ECD9  F006         	call	_turnRight	;wreg free
  2492  000484                     l2087:
  2493  000484  EE20 F03C          	lfsr	2,60
  2494  000488  5037               	movf	returnHome@move,w,c
  2495  00048A  26D9               	addwf	fsr2l,f,c
  2496  00048C  5038               	movf	returnHome@move+1,w,c
  2497  00048E  22DA               	addwfc	fsr2h,f,c
  2498  000490  50DF               	movf	indf2,w,c
  2499  000492  6E39               	movwf	??_returnHome& (0+255),c
  2500  000494  5039               	movf	??_returnHome,w,c
  2501  000496  0D02               	mullw	2
  2502  000498  C037  F03A         	movff	returnHome@move,??_returnHome+1
  2503  00049C  C038  F03B         	movff	returnHome@move+1,??_returnHome+2
  2504  0004A0  50F3               	movf	prodl,w,c
  2505  0004A2  263A               	addwf	??_returnHome+1,f,c
  2506  0004A4  50F4               	movf	prodh,w,c
  2507  0004A6  223B               	addwfc	??_returnHome+2,f,c
  2508  0004A8  0E14               	movlw	20
  2509  0004AA  243A               	addwf	??_returnHome+1,w,c
  2510  0004AC  6ED9               	movwf	fsr2l,c
  2511  0004AE  0E00               	movlw	0
  2512  0004B0  203B               	addwfc	??_returnHome+2,w,c
  2513  0004B2  6EDA               	movwf	fsr2h,c
  2514  0004B4  0E01               	movlw	1
  2515  0004B6  BEDB               	btfsc	plusw2,7,c
  2516  0004B8  D006               	goto	u1270
  2517  0004BA  0E01               	movlw	1
  2518  0004BC  50DB               	movf	plusw2,w,c
  2519  0004BE  E1E2               	bnz	l2087
  2520  0004C0  04DE               	decf	postinc2,w,c
  2521  0004C2  B0D8               	btfsc	status,0,c
  2522  0004C4  D7DF               	goto	l2087
  2523  0004C6                     u1270:
  2524                           
  2525                           ;subroutines.c: 111:     }
  2526  0004C6  EE20 F03C          	lfsr	2,60
  2527  0004CA  5037               	movf	returnHome@move,w,c
  2528  0004CC  26D9               	addwf	fsr2l,f,c
  2529  0004CE  5038               	movf	returnHome@move+1,w,c
  2530  0004D0  22DA               	addwfc	fsr2h,f,c
  2531  0004D2  06DF               	decf	indf2,f,c
  2532  0004D4                     l320:
  2533  0004D4  EE20 F03C          	lfsr	2,60
  2534  0004D8  5037               	movf	returnHome@move,w,c
  2535  0004DA  26D9               	addwf	fsr2l,f,c
  2536  0004DC  5038               	movf	returnHome@move+1,w,c
  2537  0004DE  22DA               	addwfc	fsr2h,f,c
  2538  0004E0  50DF               	movf	indf2,w,c
  2539  0004E2  A4D8               	btfss	status,2,c
  2540  0004E4  D76F               	goto	l2077
  2541                           
  2542                           ;subroutines.c: 113:     return 3;
  2543  0004E6  0E03               	movlw	3
  2544  0004E8  0012               	return		;funcret
  2545  0004EA                     __end_of_returnHome:
  2546                           	opt callstack 0
  2547                           
  2548 ;; *************** function _turnRight *****************
  2549 ;; Defined at:
  2550 ;;		line 69 in file "dc_motor.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2553 ;;		 -> main@motorL(9), 
  2554 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2555 ;;		 -> main@motorR(9), 
  2556 ;;  max_power       2   41[COMRAM] int 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  i               2   44[COMRAM] int 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2568 ;;      Params:         6       0       0       0
  2569 ;;      Locals:         2       0       0       0
  2570 ;;      Temps:          1       0       0       0
  2571 ;;      Totals:         9       0       0       0
  2572 ;;Total ram usage:        9 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    5
  2575 ;; This function calls:
  2576 ;;		_setMotorPWM
  2577 ;; This function is called by:
  2578 ;;		_returnHome
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text14
  2583  000DB2                     __ptext14:
  2584                           	opt callstack 0
  2585  000DB2                     _turnRight:
  2586                           	opt callstack 24
  2587                           
  2588                           ;dc_motor.c: 69: void turnRight(struct DC_motor *mL, struct DC_motor *mR, int max_power)
      +                          ;dc_motor.c: 70: {;dc_motor.c: 72:     mL->direction = 1;
  2589                           
  2590                           ;incstack = 0
  2591  000DB2  EE20 F001          	lfsr	2,1
  2592  000DB6  5026               	movf	turnRight@mL,w,c
  2593  000DB8  26D9               	addwf	fsr2l,f,c
  2594  000DBA  5027               	movf	turnRight@mL+1,w,c
  2595  000DBC  22DA               	addwfc	fsr2h,f,c
  2596  000DBE  0E01               	movlw	1
  2597  000DC0  6EDF               	movwf	indf2,c
  2598                           
  2599                           ;dc_motor.c: 73:     mR->direction = 0;
  2600  000DC2  EE20 F001          	lfsr	2,1
  2601  000DC6  5028               	movf	turnRight@mR,w,c
  2602  000DC8  26D9               	addwf	fsr2l,f,c
  2603  000DCA  5029               	movf	turnRight@mR+1,w,c
  2604  000DCC  22DA               	addwfc	fsr2h,f,c
  2605  000DCE  0E00               	movlw	0
  2606  000DD0  6EDF               	movwf	indf2,c
  2607                           
  2608                           ;dc_motor.c: 75:     for(int i = 0; i<max_power;i++){
  2609  000DD2  0E00               	movlw	0
  2610  000DD4  6E2E               	movwf	turnRight@i+1,c
  2611  000DD6  0E00               	movlw	0
  2612  000DD8  6E2D               	movwf	turnRight@i,c
  2613  000DDA  D021               	goto	l1807
  2614  000DDC                     l1797:
  2615                           
  2616                           ;dc_motor.c: 76:         mL->power = i;
  2617  000DDC  C026  FFD9         	movff	turnRight@mL,fsr2l
  2618  000DE0  C027  FFDA         	movff	turnRight@mL+1,fsr2h
  2619  000DE4  C02D  FFDF         	movff	turnRight@i,indf2
  2620                           
  2621                           ;dc_motor.c: 77:         mR->power = i;
  2622  000DE8  C028  FFD9         	movff	turnRight@mR,fsr2l
  2623  000DEC  C029  FFDA         	movff	turnRight@mR+1,fsr2h
  2624  000DF0  C02D  FFDF         	movff	turnRight@i,indf2
  2625                           
  2626                           ;dc_motor.c: 79:         setMotorPWM(mL);
  2627  000DF4  C026  F01D         	movff	turnRight@mL,setMotorPWM@m
  2628  000DF8  C027  F01E         	movff	turnRight@mL+1,setMotorPWM@m+1
  2629  000DFC  EC1D  F003         	call	_setMotorPWM	;wreg free
  2630                           
  2631                           ;dc_motor.c: 80:         setMotorPWM(mR);
  2632  000E00  C028  F01D         	movff	turnRight@mR,setMotorPWM@m
  2633  000E04  C029  F01E         	movff	turnRight@mR+1,setMotorPWM@m+1
  2634  000E08  EC1D  F003         	call	_setMotorPWM	;wreg free
  2635                           
  2636                           ;dc_motor.c: 81:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2637  000E0C  0E03               	movlw	3
  2638  000E0E  6E2C               	movwf	??_turnRight& (0+255),c
  2639  000E10  0E98               	movlw	152
  2640  000E12                     u1577:
  2641  000E12  2EE8               	decfsz	wreg,f,c
  2642  000E14  D7FE               	bra	u1577
  2643  000E16  2E2C               	decfsz	??_turnRight& (0+255),f,c
  2644  000E18  D7FC               	bra	u1577
  2645                           
  2646                           ;dc_motor.c: 82:     }
  2647  000E1A  4A2D               	infsnz	turnRight@i,f,c
  2648  000E1C  2A2E               	incf	turnRight@i+1,f,c
  2649  000E1E                     l1807:
  2650  000E1E  502A               	movf	turnRight@max_power,w,c
  2651  000E20  5C2D               	subwf	turnRight@i,w,c
  2652  000E22  502E               	movf	turnRight@i+1,w,c
  2653  000E24  0A80               	xorlw	128
  2654  000E26  6E2C               	movwf	??_turnRight& (0+255),c
  2655  000E28  502B               	movf	turnRight@max_power+1,w,c
  2656  000E2A  0A80               	xorlw	128
  2657  000E2C  582C               	subwfb	??_turnRight& (0+255),w,c
  2658  000E2E  B0D8               	btfsc	status,0,c
  2659  000E30  0012               	return	
  2660  000E32  D7D4               	goto	l1797
  2661  000E34                     __end_of_turnRight:
  2662                           	opt callstack 0
  2663                           
  2664 ;; *************** function _stop *****************
  2665 ;; Defined at:
  2666 ;;		line 40 in file "dc_motor.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2669 ;;		 -> main@motorL(9), 
  2670 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2671 ;;		 -> main@motorR(9), 
  2672 ;;  initial_spee    2   41[COMRAM] int 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  i               2   44[COMRAM] int 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2684 ;;      Params:         6       0       0       0
  2685 ;;      Locals:         2       0       0       0
  2686 ;;      Temps:          1       0       0       0
  2687 ;;      Totals:         9       0       0       0
  2688 ;;Total ram usage:        9 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    5
  2691 ;; This function calls:
  2692 ;;		_setMotorPWM
  2693 ;; This function is called by:
  2694 ;;		_returnHome
  2695 ;;		_stopAndDisplay
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text15
  2700  000FB0                     __ptext15:
  2701                           	opt callstack 0
  2702  000FB0                     _stop:
  2703                           	opt callstack 24
  2704                           
  2705                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  2706                           
  2707                           ;incstack = 0
  2708  000FB0  C02A  F02D         	movff	stop@initial_speed,stop@i
  2709  000FB4  C02B  F02E         	movff	stop@initial_speed+1,stop@i+1
  2710  000FB8                     l1761:
  2711  000FB8  BE2E               	btfsc	stop@i+1,7,c
  2712  000FBA  0012               	return	
  2713  000FBC  502E               	movf	stop@i+1,w,c
  2714  000FBE  E103               	bnz	l1765
  2715  000FC0  042D               	decf	stop@i,w,c
  2716  000FC2  A0D8               	btfss	status,0,c
  2717  000FC4  0012               	return	
  2718  000FC6                     l1765:
  2719                           
  2720                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  2721  000FC6  C026  FFD9         	movff	stop@mL,fsr2l
  2722  000FCA  C027  FFDA         	movff	stop@mL+1,fsr2h
  2723  000FCE  C02D  FFDF         	movff	stop@i,indf2
  2724                           
  2725                           ;dc_motor.c: 45:         mR->power = i;
  2726  000FD2  C028  FFD9         	movff	stop@mR,fsr2l
  2727  000FD6  C029  FFDA         	movff	stop@mR+1,fsr2h
  2728  000FDA  C02D  FFDF         	movff	stop@i,indf2
  2729                           
  2730                           ;dc_motor.c: 46:         setMotorPWM(mL);
  2731  000FDE  C026  F01D         	movff	stop@mL,setMotorPWM@m
  2732  000FE2  C027  F01E         	movff	stop@mL+1,setMotorPWM@m+1
  2733  000FE6  EC1D  F003         	call	_setMotorPWM	;wreg free
  2734                           
  2735                           ;dc_motor.c: 47:         setMotorPWM(mR);
  2736  000FEA  C028  F01D         	movff	stop@mR,setMotorPWM@m
  2737  000FEE  C029  F01E         	movff	stop@mR+1,setMotorPWM@m+1
  2738  000FF2  EC1D  F003         	call	_setMotorPWM	;wreg free
  2739                           
  2740                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2741  000FF6  0E03               	movlw	3
  2742  000FF8  6E2C               	movwf	??_stop& (0+255),c
  2743  000FFA  0E98               	movlw	152
  2744  000FFC                     u1587:
  2745  000FFC  2EE8               	decfsz	wreg,f,c
  2746  000FFE  D7FE               	bra	u1587
  2747  001000  2E2C               	decfsz	??_stop& (0+255),f,c
  2748  001002  D7FC               	bra	u1587
  2749                           
  2750                           ;dc_motor.c: 49:     }
  2751  001004  062D               	decf	stop@i,f,c
  2752  001006  A0D8               	btfss	status,0,c
  2753  001008  062E               	decf	stop@i+1,f,c
  2754  00100A  D7D6               	goto	l1761
  2755  00100C                     __end_of_stop:
  2756                           	opt callstack 0
  2757                           
  2758 ;; *************** function _moveBackward *****************
  2759 ;; Defined at:
  2760 ;;		line 101 in file "dc_motor.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2763 ;;		 -> main@motorL(9), 
  2764 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2765 ;;		 -> main@motorR(9), 
  2766 ;;  max_power       2   41[COMRAM] int 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  i               2   44[COMRAM] int 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2778 ;;      Params:         6       0       0       0
  2779 ;;      Locals:         2       0       0       0
  2780 ;;      Temps:          1       0       0       0
  2781 ;;      Totals:         9       0       0       0
  2782 ;;Total ram usage:        9 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    5
  2785 ;; This function calls:
  2786 ;;		_setMotorPWM
  2787 ;; This function is called by:
  2788 ;;		_returnHome
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           	psect	text16
  2793  000E34                     __ptext16:
  2794                           	opt callstack 0
  2795  000E34                     _moveBackward:
  2796                           	opt callstack 24
  2797                           
  2798                           ;dc_motor.c: 101: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_po
      +                          wer);dc_motor.c: 102: {;dc_motor.c: 103:     mL->direction = 0;
  2799                           
  2800                           ;incstack = 0
  2801  000E34  EE20 F001          	lfsr	2,1
  2802  000E38  5026               	movf	moveBackward@mL,w,c
  2803  000E3A  26D9               	addwf	fsr2l,f,c
  2804  000E3C  5027               	movf	moveBackward@mL+1,w,c
  2805  000E3E  22DA               	addwfc	fsr2h,f,c
  2806  000E40  0E00               	movlw	0
  2807  000E42  6EDF               	movwf	indf2,c
  2808                           
  2809                           ;dc_motor.c: 104:     mR->direction = 0;
  2810  000E44  EE20 F001          	lfsr	2,1
  2811  000E48  5028               	movf	moveBackward@mR,w,c
  2812  000E4A  26D9               	addwf	fsr2l,f,c
  2813  000E4C  5029               	movf	moveBackward@mR+1,w,c
  2814  000E4E  22DA               	addwfc	fsr2h,f,c
  2815  000E50  0E00               	movlw	0
  2816  000E52  6EDF               	movwf	indf2,c
  2817                           
  2818                           ;dc_motor.c: 105:     for(int i = 0; i < max_power; i++)
  2819  000E54  0E00               	movlw	0
  2820  000E56  6E2E               	movwf	moveBackward@i+1,c
  2821  000E58  0E00               	movlw	0
  2822  000E5A  6E2D               	movwf	moveBackward@i,c
  2823  000E5C  D021               	goto	l1839
  2824  000E5E                     l1829:
  2825                           
  2826                           ;dc_motor.c: 106:     {;dc_motor.c: 107:         mL->power = i;
  2827  000E5E  C026  FFD9         	movff	moveBackward@mL,fsr2l
  2828  000E62  C027  FFDA         	movff	moveBackward@mL+1,fsr2h
  2829  000E66  C02D  FFDF         	movff	moveBackward@i,indf2
  2830                           
  2831                           ;dc_motor.c: 108:         mR->power = i;
  2832  000E6A  C028  FFD9         	movff	moveBackward@mR,fsr2l
  2833  000E6E  C029  FFDA         	movff	moveBackward@mR+1,fsr2h
  2834  000E72  C02D  FFDF         	movff	moveBackward@i,indf2
  2835                           
  2836                           ;dc_motor.c: 109:         setMotorPWM(mL);
  2837  000E76  C026  F01D         	movff	moveBackward@mL,setMotorPWM@m
  2838  000E7A  C027  F01E         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2839  000E7E  EC1D  F003         	call	_setMotorPWM	;wreg free
  2840                           
  2841                           ;dc_motor.c: 110:         setMotorPWM(mR);
  2842  000E82  C028  F01D         	movff	moveBackward@mR,setMotorPWM@m
  2843  000E86  C029  F01E         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2844  000E8A  EC1D  F003         	call	_setMotorPWM	;wreg free
  2845                           
  2846                           ;dc_motor.c: 111:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2847  000E8E  0E03               	movlw	3
  2848  000E90  6E2C               	movwf	??_moveBackward& (0+255),c
  2849  000E92  0E98               	movlw	152
  2850  000E94                     u1597:
  2851  000E94  2EE8               	decfsz	wreg,f,c
  2852  000E96  D7FE               	bra	u1597
  2853  000E98  2E2C               	decfsz	??_moveBackward& (0+255),f,c
  2854  000E9A  D7FC               	bra	u1597
  2855                           
  2856                           ;dc_motor.c: 112:     }
  2857  000E9C  4A2D               	infsnz	moveBackward@i,f,c
  2858  000E9E  2A2E               	incf	moveBackward@i+1,f,c
  2859  000EA0                     l1839:
  2860  000EA0  502A               	movf	moveBackward@max_power,w,c
  2861  000EA2  5C2D               	subwf	moveBackward@i,w,c
  2862  000EA4  502E               	movf	moveBackward@i+1,w,c
  2863  000EA6  0A80               	xorlw	128
  2864  000EA8  6E2C               	movwf	??_moveBackward& (0+255),c
  2865  000EAA  502B               	movf	moveBackward@max_power+1,w,c
  2866  000EAC  0A80               	xorlw	128
  2867  000EAE  582C               	subwfb	??_moveBackward& (0+255),w,c
  2868  000EB0  B0D8               	btfsc	status,0,c
  2869  000EB2  0012               	return	
  2870  000EB4  D7D4               	goto	l1829
  2871  000EB6                     __end_of_moveBackward:
  2872                           	opt callstack 0
  2873                           
  2874 ;; *************** function _moveToBeacon *****************
  2875 ;; Defined at:
  2876 ;;		line 51 in file "subroutines.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2879 ;;		 -> main@motorL(9), 
  2880 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2881 ;;		 -> main@motorR(9), 
  2882 ;;  speed           2   50[COMRAM] int 
  2883 ;;  move            2   52[COMRAM] PTR struct Movements
  2884 ;;		 -> travel_moves(61), 
  2885 ;;  exit_flag       2   54[COMRAM] PTR volatile unsigned ch
  2886 ;;		 -> NULL(0), RFID_flag(1), 
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  raw_data        2   58[COMRAM] unsigned int 
  2889 ;;  beacon_locat    1   60[COMRAM] unsigned char 
  2890 ;;  count           2   61[COMRAM] int 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      unsigned char 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2900 ;;      Params:        10       0       0       0
  2901 ;;      Locals:         5       0       0       0
  2902 ;;      Temps:          2       0       0       0
  2903 ;;      Totals:        17       0       0       0
  2904 ;;Total ram usage:       17 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    7
  2907 ;; This function calls:
  2908 ;;		_ClearLCD
  2909 ;;		_LCD_String
  2910 ;;		_classify_data
  2911 ;;		_moveForward
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text17
  2918  000A12                     __ptext17:
  2919                           	opt callstack 0
  2920  000A12                     _moveToBeacon:
  2921                           	opt callstack 23
  2922                           
  2923                           ;subroutines.c: 51: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 52:                         struct Movements *move, volatile 
      +                          char *exit_flag);subroutines.c: 53: {;subroutines.c: 54:     move->move_type[move->move_
      +                          number] = 0;
  2924                           
  2925                           ;incstack = 0
  2926  000A12  EE20 F03C          	lfsr	2,60
  2927  000A16  5035               	movf	moveToBeacon@move,w,c
  2928  000A18  26D9               	addwf	fsr2l,f,c
  2929  000A1A  5036               	movf	moveToBeacon@move+1,w,c
  2930  000A1C  22DA               	addwfc	fsr2h,f,c
  2931  000A1E  50DF               	movf	indf2,w,c
  2932  000A20  6E39               	movwf	??_moveToBeacon& (0+255),c
  2933  000A22  5039               	movf	??_moveToBeacon,w,c
  2934  000A24  2435               	addwf	moveToBeacon@move,w,c
  2935  000A26  6ED9               	movwf	fsr2l,c
  2936  000A28  0E00               	movlw	0
  2937  000A2A  2036               	addwfc	moveToBeacon@move+1,w,c
  2938  000A2C  6EDA               	movwf	fsr2h,c
  2939  000A2E  0E00               	movlw	0
  2940  000A30  6EDF               	movwf	indf2,c
  2941                           
  2942                           ;subroutines.c: 55:     moveForward(mL,mR,speed);
  2943  000A32  C02F  F026         	movff	moveToBeacon@mL,moveForward@mL
  2944  000A36  C030  F027         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2945  000A3A  C031  F028         	movff	moveToBeacon@mR,moveForward@mR
  2946  000A3E  C032  F029         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2947  000A42  C033  F02A         	movff	moveToBeacon@speed,moveForward@max_power
  2948  000A46  C034  F02B         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2949  000A4A  EC5B  F007         	call	_moveForward	;wreg free
  2950                           
  2951                           ;subroutines.c: 56:     ClearLCD();
  2952  000A4E  EC30  F009         	call	_ClearLCD	;wreg free
  2953                           
  2954                           ;subroutines.c: 57:     LCD_String("MOVING TO BOMB");
  2955  000A52  0E51               	movlw	low STR_5
  2956  000A54  6E13               	movwf	LCD_String@string,c
  2957  000A56  0E03               	movlw	high STR_5
  2958  000A58  6E14               	movwf	LCD_String@string+1,c
  2959  000A5A  EC89  F008         	call	_LCD_String	;wreg free
  2960                           
  2961                           ;subroutines.c: 58:     int count = 0;
  2962  000A5E  0E00               	movlw	0
  2963  000A60  6E3F               	movwf	moveToBeacon@count+1,c
  2964  000A62  0E00               	movlw	0
  2965  000A64  6E3E               	movwf	moveToBeacon@count,c
  2966  000A66                     l2041:
  2967                           
  2968                           ;subroutines.c: 61:     {;subroutines.c: 63:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2969  000A66  5068               	movf	3944,w,c	;volatile
  2970  000A68  CF69 F039          	movff	3945,??_moveToBeacon	;volatile
  2971  000A6C  6A3A               	clrf	(??_moveToBeacon+1)& (0+255),c
  2972  000A6E  C039  F03A         	movff	??_moveToBeacon,??_moveToBeacon+1
  2973  000A72  6A39               	clrf	??_moveToBeacon,c
  2974  000A74  1039               	iorwf	??_moveToBeacon,w,c
  2975  000A76  6E3B               	movwf	moveToBeacon@raw_data,c
  2976  000A78  503A               	movf	??_moveToBeacon+1,w,c
  2977  000A7A  6E3C               	movwf	moveToBeacon@raw_data+1,c
  2978                           
  2979                           ;subroutines.c: 66:         char beacon_location = classify_data(raw_data);
  2980  000A7C  C03B  F00F         	movff	moveToBeacon@raw_data,classify_data@raw_data
  2981  000A80  C03C  F010         	movff	moveToBeacon@raw_data+1,classify_data@raw_data+1
  2982  000A84  EC2C  F008         	call	_classify_data	;wreg free
  2983  000A88  6E3D               	movwf	moveToBeacon@beacon_location,c
  2984                           
  2985                           ;subroutines.c: 68:         if(*exit_flag == 1)
  2986  000A8A  C037  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2987  000A8E  C038  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2988  000A92  04DE               	decf	postinc2,w,c
  2989  000A94  A4D8               	btfss	status,2,c
  2990  000A96  D002               	goto	l2055
  2991                           
  2992                           ;subroutines.c: 71:             return 2;
  2993  000A98  0E02               	movlw	2
  2994  000A9A  0012               	return	
  2995  000A9C                     l2055:
  2996  000A9C  503D               	movf	moveToBeacon@beacon_location,w,c
  2997  000A9E  A4D8               	btfss	status,2,c
  2998  000AA0  D003               	goto	l2059
  2999                           
  3000                           ;subroutines.c: 75:         {;subroutines.c: 76:             count += 1;
  3001  000AA2  4A3E               	infsnz	moveToBeacon@count,f,c
  3002  000AA4  2A3F               	incf	moveToBeacon@count+1,f,c
  3003                           
  3004                           ;subroutines.c: 77:         }
  3005  000AA6  D004               	goto	l2061
  3006  000AA8                     l2059:
  3007                           
  3008                           ;subroutines.c: 79:         {;subroutines.c: 80:             count = 0;
  3009  000AA8  0E00               	movlw	0
  3010  000AAA  6E3F               	movwf	moveToBeacon@count+1,c
  3011  000AAC  0E00               	movlw	0
  3012  000AAE  6E3E               	movwf	moveToBeacon@count,c
  3013  000AB0                     l2061:
  3014                           
  3015                           ;subroutines.c: 83:         if(count >=18000)
  3016  000AB0  BE3F               	btfsc	moveToBeacon@count+1,7,c
  3017  000AB2  D7D9               	goto	l2041
  3018  000AB4  0E50               	movlw	80
  3019  000AB6  5C3E               	subwf	moveToBeacon@count,w,c
  3020  000AB8  0E46               	movlw	70
  3021  000ABA  583F               	subwfb	moveToBeacon@count+1,w,c
  3022  000ABC  A0D8               	btfss	status,0,c
  3023  000ABE  D7D3               	goto	l2041
  3024                           
  3025                           ;subroutines.c: 84:         {;subroutines.c: 85:             move-> move_number += 1;
  3026  000AC0  EE20 F03C          	lfsr	2,60
  3027  000AC4  5035               	movf	moveToBeacon@move,w,c
  3028  000AC6  26D9               	addwf	fsr2l,f,c
  3029  000AC8  5036               	movf	moveToBeacon@move+1,w,c
  3030  000ACA  22DA               	addwfc	fsr2h,f,c
  3031  000ACC  2ADF               	incf	indf2,f,c
  3032                           
  3033                           ;subroutines.c: 86:             return 0;
  3034  000ACE  0E00               	movlw	0
  3035  000AD0  0012               	return		;funcret
  3036  000AD2                     __end_of_moveToBeacon:
  3037                           	opt callstack 0
  3038                           
  3039 ;; *************** function _moveForward *****************
  3040 ;; Defined at:
  3041 ;;		line 86 in file "dc_motor.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3044 ;;		 -> main@motorL(9), 
  3045 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3046 ;;		 -> main@motorR(9), 
  3047 ;;  max_power       2   41[COMRAM] int 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  i               2   44[COMRAM] int 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3059 ;;      Params:         6       0       0       0
  3060 ;;      Locals:         2       0       0       0
  3061 ;;      Temps:          1       0       0       0
  3062 ;;      Totals:         9       0       0       0
  3063 ;;Total ram usage:        9 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    5
  3066 ;; This function calls:
  3067 ;;		_setMotorPWM
  3068 ;; This function is called by:
  3069 ;;		_moveToBeacon
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text18
  3074  000EB6                     __ptext18:
  3075                           	opt callstack 0
  3076  000EB6                     _moveForward:
  3077                           	opt callstack 24
  3078                           
  3079                           ;dc_motor.c: 86: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 87: {;dc_motor.c: 88:     mL->direction = 1;
  3080                           
  3081                           ;incstack = 0
  3082  000EB6  EE20 F001          	lfsr	2,1
  3083  000EBA  5026               	movf	moveForward@mL,w,c
  3084  000EBC  26D9               	addwf	fsr2l,f,c
  3085  000EBE  5027               	movf	moveForward@mL+1,w,c
  3086  000EC0  22DA               	addwfc	fsr2h,f,c
  3087  000EC2  0E01               	movlw	1
  3088  000EC4  6EDF               	movwf	indf2,c
  3089                           
  3090                           ;dc_motor.c: 89:     mR->direction = 1;
  3091  000EC6  EE20 F001          	lfsr	2,1
  3092  000ECA  5028               	movf	moveForward@mR,w,c
  3093  000ECC  26D9               	addwf	fsr2l,f,c
  3094  000ECE  5029               	movf	moveForward@mR+1,w,c
  3095  000ED0  22DA               	addwfc	fsr2h,f,c
  3096  000ED2  0E01               	movlw	1
  3097  000ED4  6EDF               	movwf	indf2,c
  3098                           
  3099                           ;dc_motor.c: 90:     for(int i = 0; i < max_power; i++)
  3100  000ED6  0E00               	movlw	0
  3101  000ED8  6E2E               	movwf	moveForward@i+1,c
  3102  000EDA  0E00               	movlw	0
  3103  000EDC  6E2D               	movwf	moveForward@i,c
  3104  000EDE  D021               	goto	l1823
  3105  000EE0                     l1813:
  3106                           
  3107                           ;dc_motor.c: 91:     {;dc_motor.c: 92:         mL->power = i;
  3108  000EE0  C026  FFD9         	movff	moveForward@mL,fsr2l
  3109  000EE4  C027  FFDA         	movff	moveForward@mL+1,fsr2h
  3110  000EE8  C02D  FFDF         	movff	moveForward@i,indf2
  3111                           
  3112                           ;dc_motor.c: 93:         mR->power = i;
  3113  000EEC  C028  FFD9         	movff	moveForward@mR,fsr2l
  3114  000EF0  C029  FFDA         	movff	moveForward@mR+1,fsr2h
  3115  000EF4  C02D  FFDF         	movff	moveForward@i,indf2
  3116                           
  3117                           ;dc_motor.c: 94:         setMotorPWM(mL);
  3118  000EF8  C026  F01D         	movff	moveForward@mL,setMotorPWM@m
  3119  000EFC  C027  F01E         	movff	moveForward@mL+1,setMotorPWM@m+1
  3120  000F00  EC1D  F003         	call	_setMotorPWM	;wreg free
  3121                           
  3122                           ;dc_motor.c: 95:         setMotorPWM(mR);
  3123  000F04  C028  F01D         	movff	moveForward@mR,setMotorPWM@m
  3124  000F08  C029  F01E         	movff	moveForward@mR+1,setMotorPWM@m+1
  3125  000F0C  EC1D  F003         	call	_setMotorPWM	;wreg free
  3126                           
  3127                           ;dc_motor.c: 96:         _delay((unsigned long)((1)*(8000000/4000.0)));
  3128  000F10  0E03               	movlw	3
  3129  000F12  6E2C               	movwf	??_moveForward& (0+255),c
  3130  000F14  0E98               	movlw	152
  3131  000F16                     u1607:
  3132  000F16  2EE8               	decfsz	wreg,f,c
  3133  000F18  D7FE               	bra	u1607
  3134  000F1A  2E2C               	decfsz	??_moveForward& (0+255),f,c
  3135  000F1C  D7FC               	bra	u1607
  3136                           
  3137                           ;dc_motor.c: 97:     }
  3138  000F1E  4A2D               	infsnz	moveForward@i,f,c
  3139  000F20  2A2E               	incf	moveForward@i+1,f,c
  3140  000F22                     l1823:
  3141  000F22  502A               	movf	moveForward@max_power,w,c
  3142  000F24  5C2D               	subwf	moveForward@i,w,c
  3143  000F26  502E               	movf	moveForward@i+1,w,c
  3144  000F28  0A80               	xorlw	128
  3145  000F2A  6E2C               	movwf	??_moveForward& (0+255),c
  3146  000F2C  502B               	movf	moveForward@max_power+1,w,c
  3147  000F2E  0A80               	xorlw	128
  3148  000F30  582C               	subwfb	??_moveForward& (0+255),w,c
  3149  000F32  B0D8               	btfsc	status,0,c
  3150  000F34  0012               	return	
  3151  000F36  D7D4               	goto	l1813
  3152  000F38                     __end_of_moveForward:
  3153                           	opt callstack 0
  3154                           
  3155 ;; *************** function _classify_data *****************
  3156 ;; Defined at:
  3157 ;;		line 33 in file "signal_processing.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  raw_data        2   14[COMRAM] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  filtered        2   18[COMRAM] unsigned int 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  1    wreg      unsigned char 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3171 ;;      Params:         2       0       0       0
  3172 ;;      Locals:         2       0       0       0
  3173 ;;      Temps:          2       0       0       0
  3174 ;;      Totals:         6       0       0       0
  3175 ;;Total ram usage:        6 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    3
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_scanForBeacon
  3182 ;;		_moveToBeacon
  3183 ;;		_waitForInput
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text19
  3188  001058                     __ptext19:
  3189                           	opt callstack 0
  3190  001058                     _classify_data:
  3191                           	opt callstack 26
  3192                           
  3193                           ;signal_processing.c: 33: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           34: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 4
      +                          2:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  3194                           
  3195                           ;incstack = 0
  3196  001058  5040               	movf	classify_data@smoothed,w,c
  3197  00105A  5C0F               	subwf	classify_data@raw_data,w,c
  3198  00105C  6E11               	movwf	??_classify_data& (0+255),c
  3199  00105E  5041               	movf	classify_data@smoothed+1,w,c
  3200  001060  5810               	subwfb	classify_data@raw_data+1,w,c
  3201  001062  6E12               	movwf	(??_classify_data+1)& (0+255),c
  3202  001064  90D8               	bcf	status,0,c
  3203  001066  3212               	rrcf	??_classify_data+1,f,c
  3204  001068  3211               	rrcf	??_classify_data,f,c
  3205  00106A  90D8               	bcf	status,0,c
  3206  00106C  3212               	rrcf	??_classify_data+1,f,c
  3207  00106E  3211               	rrcf	??_classify_data,f,c
  3208  001070  5040               	movf	classify_data@smoothed,w,c
  3209  001072  2411               	addwf	??_classify_data,w,c
  3210  001074  6E40               	movwf	classify_data@smoothed,c
  3211  001076  5041               	movf	classify_data@smoothed+1,w,c
  3212  001078  2012               	addwfc	??_classify_data+1,w,c
  3213  00107A  6E41               	movwf	classify_data@smoothed+1,c
  3214                           
  3215                           ;signal_processing.c: 43:     unsigned int filtered = raw_data - smoothed;
  3216  00107C  5040               	movf	classify_data@smoothed,w,c
  3217  00107E  5C0F               	subwf	classify_data@raw_data,w,c
  3218  001080  6E13               	movwf	classify_data@filtered,c
  3219  001082  5041               	movf	classify_data@smoothed+1,w,c
  3220  001084  5810               	subwfb	classify_data@raw_data+1,w,c
  3221  001086  6E14               	movwf	classify_data@filtered+1,c
  3222                           
  3223                           ;signal_processing.c: 46:     if(filtered >= 100)
  3224  001088  5014               	movf	classify_data@filtered+1,w,c
  3225  00108A  E104               	bnz	u1120
  3226  00108C  0E64               	movlw	100
  3227  00108E  5C13               	subwf	classify_data@filtered,w,c
  3228  001090  A0D8               	btfss	status,0,c
  3229  001092  D002               	goto	l1895
  3230  001094                     u1120:
  3231                           
  3232                           ;signal_processing.c: 47:     {;signal_processing.c: 48:         return 1;
  3233  001094  0E01               	movlw	1
  3234  001096  0012               	return	
  3235  001098                     l1895:
  3236                           
  3237                           ;signal_processing.c: 51:     {;signal_processing.c: 52:         return 0;
  3238  001098  0E00               	movlw	0
  3239  00109A  0012               	return		;funcret
  3240  00109C                     __end_of_classify_data:
  3241                           	opt callstack 0
  3242                           
  3243 ;; *************** function _LCD_String *****************
  3244 ;; Defined at:
  3245 ;;		line 119 in file "LCDIO.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  string          2   18[COMRAM] PTR unsigned char 
  3248 ;;		 -> STR_10(16), STR_9(16), STR_8(13), STR_7(16), 
  3249 ;;		 -> STR_6(15), STR_5(15), STR_4(10), STR_3(16), 
  3250 ;;		 -> STR_2(16), STR_1(15), 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;		None
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      void 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3262 ;;      Params:         2       0       0       0
  3263 ;;      Locals:         0       0       0       0
  3264 ;;      Temps:          0       0       0       0
  3265 ;;      Totals:         2       0       0       0
  3266 ;;Total ram usage:        2 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    6
  3269 ;; This function calls:
  3270 ;;		_SendLCD
  3271 ;; This function is called by:
  3272 ;;		_main
  3273 ;;		_check_RFID
  3274 ;;		_scanForBeacon
  3275 ;;		_moveToBeacon
  3276 ;;		_returnHome
  3277 ;;		_stopAndDisplay
  3278 ;;		_waitForInput
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text20
  3283  001112                     __ptext20:
  3284                           	opt callstack 0
  3285  001112                     _LCD_String:
  3286                           	opt callstack 23
  3287                           
  3288                           ;LCDIO.c: 121: while(*string != 0){
  3289                           
  3290                           ;incstack = 0
  3291  001112  D010               	goto	l1681
  3292  001114                     l1675:
  3293                           
  3294                           ;LCDIO.c: 124: SendLCD(*string++,1);
  3295  001114  0E01               	movlw	1
  3296  001116  6E11               	movwf	SendLCD@type,c
  3297  001118  C013  FFF6         	movff	LCD_String@string,tblptrl
  3298  00111C  C014  FFF7         	movff	LCD_String@string+1,tblptrh
  3299  001120                     	if	0	;tblptru may be non-zero
  3300  001120                     	endif
  3301  001120                     	if	0	;tblptru may be non-zero
  3302  001120                     	endif
  3303  001120  0008               	tblrd		*
  3304  001122  50F5               	movf	tablat,w,c
  3305  001124  ECBF  F008         	call	_SendLCD
  3306  001128  4A13               	infsnz	LCD_String@string,f,c
  3307  00112A  2A14               	incf	LCD_String@string+1,f,c
  3308                           
  3309                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3310  00112C  0E21               	movlw	33
  3311  00112E                     u1617:
  3312  00112E  2EE8               	decfsz	wreg,f,c
  3313  001130  D7FE               	bra	u1617
  3314  001132  F000               	nop	
  3315  001134                     l1681:
  3316                           
  3317                           ;LCDIO.c: 121: while(*string != 0){
  3318  001134  C013  FFF6         	movff	LCD_String@string,tblptrl
  3319  001138  C014  FFF7         	movff	LCD_String@string+1,tblptrh
  3320  00113C                     	if	0	;tblptru may be non-zero
  3321  00113C                     	endif
  3322  00113C                     	if	0	;tblptru may be non-zero
  3323  00113C                     	endif
  3324  00113C  0008               	tblrd		*
  3325  00113E  50F5               	movf	tablat,w,c
  3326  001140  0900               	iorlw	0
  3327  001142  B4D8               	btfsc	status,2,c
  3328  001144  0012               	return	
  3329  001146  D7E6               	goto	l1675
  3330  001148                     __end_of_LCD_String:
  3331                           	opt callstack 0
  3332                           
  3333 ;; *************** function _ClearLCD *****************
  3334 ;; Defined at:
  3335 ;;		line 131 in file "LCDIO.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3349 ;;      Params:         0       0       0       0
  3350 ;;      Locals:         0       0       0       0
  3351 ;;      Temps:          1       0       0       0
  3352 ;;      Totals:         1       0       0       0
  3353 ;;Total ram usage:        1 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    6
  3356 ;; This function calls:
  3357 ;;		_SendLCD
  3358 ;; This function is called by:
  3359 ;;		_display_RFID
  3360 ;;		_scanForBeacon
  3361 ;;		_moveToBeacon
  3362 ;;		_returnHome
  3363 ;;		_stopAndDisplay
  3364 ;;		_waitForInput
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text21
  3369  001260                     __ptext21:
  3370                           	opt callstack 0
  3371  001260                     _ClearLCD:
  3372                           	opt callstack 23
  3373                           
  3374                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3375                           
  3376                           ;incstack = 0
  3377  001260  0E00               	movlw	0
  3378  001262  6E11               	movwf	SendLCD@type,c
  3379  001264  0E01               	movlw	1
  3380  001266  ECBF  F008         	call	_SendLCD
  3381                           
  3382                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3383  00126A  0E0D               	movlw	13
  3384  00126C  6E13               	movwf	??_ClearLCD& (0+255),c
  3385  00126E  0EFC               	movlw	252
  3386  001270                     u1627:
  3387  001270  2EE8               	decfsz	wreg,f,c
  3388  001272  D7FE               	bra	u1627
  3389  001274  2E13               	decfsz	??_ClearLCD& (0+255),f,c
  3390  001276  D7FC               	bra	u1627
  3391  001278  0012               	return		;funcret
  3392  00127A                     __end_of_ClearLCD:
  3393                           	opt callstack 0
  3394                           
  3395 ;; *************** function _SendLCD *****************
  3396 ;; Defined at:
  3397 ;;		line 44 in file "LCDIO.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  Byte            1    wreg     unsigned char 
  3400 ;;  type            1   16[COMRAM] unsigned char 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  Byte            1   17[COMRAM] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3412 ;;      Params:         1       0       0       0
  3413 ;;      Locals:         1       0       0       0
  3414 ;;      Temps:          0       0       0       0
  3415 ;;      Totals:         2       0       0       0
  3416 ;;Total ram usage:        2 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    5
  3419 ;; This function calls:
  3420 ;;		_LCDout
  3421 ;; This function is called by:
  3422 ;;		_init_LCD
  3423 ;;		_SetLine
  3424 ;;		_LCD_String
  3425 ;;		_ClearLCD
  3426 ;;		_display_RFID
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text22
  3431  00117E                     __ptext22:
  3432                           	opt callstack 0
  3433  00117E                     _SendLCD:
  3434                           	opt callstack 23
  3435                           
  3436                           ;incstack = 0
  3437                           ;SendLCD@Byte stored from wreg
  3438  00117E  6E12               	movwf	SendLCD@Byte,c
  3439                           
  3440                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3441  001180  B011               	btfsc	SendLCD@type,0,c
  3442  001182  D002               	bra	u725
  3443  001184  9E89               	bcf	3977,7,c	;volatile
  3444  001186  D001               	bra	u726
  3445  001188                     u725:
  3446  001188  8E89               	bsf	3977,7,c	;volatile
  3447  00118A                     u726:
  3448                           
  3449                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3450  00118A  3812               	swapf	SendLCD@Byte,w,c
  3451  00118C  0B0F               	andlw	15
  3452  00118E  0B0F               	andlw	15
  3453  001190  EC9C  F007         	call	_LCDout
  3454                           
  3455                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3456  001194  0E06               	movlw	6
  3457  001196                     u1637:
  3458  001196  2EE8               	decfsz	wreg,f,c
  3459  001198  D7FE               	bra	u1637
  3460  00119A  D000               	nop2	
  3461                           
  3462                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3463  00119C  5012               	movf	SendLCD@Byte,w,c
  3464  00119E  0B0F               	andlw	15
  3465  0011A0  EC9C  F007         	call	_LCDout
  3466                           
  3467                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3468  0011A4  0E21               	movlw	33
  3469  0011A6                     u1647:
  3470  0011A6  2EE8               	decfsz	wreg,f,c
  3471  0011A8  D7FE               	bra	u1647
  3472  0011AA  F000               	nop	
  3473  0011AC  0012               	return		;funcret
  3474  0011AE                     __end_of_SendLCD:
  3475                           	opt callstack 0
  3476                           
  3477 ;; *************** function _LCDout *****************
  3478 ;; Defined at:
  3479 ;;		line 31 in file "LCDIO.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  number          1    wreg     unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  number          1   15[COMRAM] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3493 ;;      Params:         0       0       0       0
  3494 ;;      Locals:         1       0       0       0
  3495 ;;      Temps:          1       0       0       0
  3496 ;;      Totals:         2       0       0       0
  3497 ;;Total ram usage:        2 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    4
  3500 ;; This function calls:
  3501 ;;		_E_TOG
  3502 ;; This function is called by:
  3503 ;;		_SendLCD
  3504 ;;		_init_LCD
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text23
  3509  000F38                     __ptext23:
  3510                           	opt callstack 0
  3511  000F38                     _LCDout:
  3512                           	opt callstack 23
  3513                           
  3514                           ;incstack = 0
  3515                           ;LCDout@number stored from wreg
  3516  000F38  6E10               	movwf	LCDout@number,c
  3517                           
  3518                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3519  000F3A  C010  F00F         	movff	LCDout@number,??_LCDout
  3520  000F3E  0E01               	movlw	1
  3521  000F40  160F               	andwf	??_LCDout,f,c
  3522  000F42  508B               	movf	3979,w,c	;volatile
  3523  000F44  180F               	xorwf	??_LCDout,w,c
  3524  000F46  0BFE               	andlw	-2
  3525  000F48  180F               	xorwf	??_LCDout,w,c
  3526  000F4A  6E8B               	movwf	3979,c	;volatile
  3527                           
  3528                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3529  000F4C  C010  F00F         	movff	LCDout@number,??_LCDout
  3530  000F50  90D8               	bcf	status,0,c
  3531  000F52  320F               	rrcf	??_LCDout,f,c
  3532  000F54  0E01               	movlw	1
  3533  000F56  160F               	andwf	??_LCDout,f,c
  3534  000F58  460F               	rlncf	??_LCDout,f,c
  3535  000F5A  460F               	rlncf	??_LCDout,f,c
  3536  000F5C  460F               	rlncf	??_LCDout,f,c
  3537  000F5E  508B               	movf	3979,w,c	;volatile
  3538  000F60  180F               	xorwf	??_LCDout,w,c
  3539  000F62  0BF7               	andlw	-9
  3540  000F64  180F               	xorwf	??_LCDout,w,c
  3541  000F66  6E8B               	movwf	3979,c	;volatile
  3542                           
  3543                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3544  000F68  C010  F00F         	movff	LCDout@number,??_LCDout
  3545  000F6C  90D8               	bcf	status,0,c
  3546  000F6E  320F               	rrcf	??_LCDout,f,c
  3547  000F70  90D8               	bcf	status,0,c
  3548  000F72  320F               	rrcf	??_LCDout,f,c
  3549  000F74  0E01               	movlw	1
  3550  000F76  160F               	andwf	??_LCDout,f,c
  3551  000F78  508C               	movf	3980,w,c	;volatile
  3552  000F7A  180F               	xorwf	??_LCDout,w,c
  3553  000F7C  0BFE               	andlw	-2
  3554  000F7E  180F               	xorwf	??_LCDout,w,c
  3555  000F80  6E8C               	movwf	3980,c	;volatile
  3556                           
  3557                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3558  000F82  C010  F00F         	movff	LCDout@number,??_LCDout
  3559  000F86  90D8               	bcf	status,0,c
  3560  000F88  320F               	rrcf	??_LCDout,f,c
  3561  000F8A  90D8               	bcf	status,0,c
  3562  000F8C  320F               	rrcf	??_LCDout,f,c
  3563  000F8E  90D8               	bcf	status,0,c
  3564  000F90  320F               	rrcf	??_LCDout,f,c
  3565  000F92  0E01               	movlw	1
  3566  000F94  160F               	andwf	??_LCDout,f,c
  3567  000F96  460F               	rlncf	??_LCDout,f,c
  3568  000F98  508C               	movf	3980,w,c	;volatile
  3569  000F9A  180F               	xorwf	??_LCDout,w,c
  3570  000F9C  0BFD               	andlw	-3
  3571  000F9E  180F               	xorwf	??_LCDout,w,c
  3572  000FA0  6E8C               	movwf	3980,c	;volatile
  3573                           
  3574                           ;LCDIO.c: 39:  E_TOG();
  3575  000FA2  EC47  F009         	call	_E_TOG	;wreg free
  3576                           
  3577                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3578  000FA6  0E03               	movlw	3
  3579  000FA8                     u1657:
  3580  000FA8  2EE8               	decfsz	wreg,f,c
  3581  000FAA  D7FE               	bra	u1657
  3582  000FAC  F000               	nop	
  3583  000FAE  0012               	return		;funcret
  3584  000FB0                     __end_of_LCDout:
  3585                           	opt callstack 0
  3586                           
  3587 ;; *************** function _E_TOG *****************
  3588 ;; Defined at:
  3589 ;;		line 23 in file "LCDIO.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  1    wreg      void 
  3596 ;; Registers used:
  3597 ;;		wreg
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3603 ;;      Params:         0       0       0       0
  3604 ;;      Locals:         0       0       0       0
  3605 ;;      Temps:          0       0       0       0
  3606 ;;      Totals:         0       0       0       0
  3607 ;;Total ram usage:        0 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    3
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		_LCDout
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text24
  3618  00128E                     __ptext24:
  3619                           	opt callstack 0
  3620  00128E                     _E_TOG:
  3621                           	opt callstack 23
  3622                           
  3623                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3624                           
  3625                           ;incstack = 0
  3626  00128E  8C89               	bsf	3977,6,c	;volatile
  3627                           
  3628                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3629  001290  0E03               	movlw	3
  3630  001292                     u1667:
  3631  001292  2EE8               	decfsz	wreg,f,c
  3632  001294  D7FE               	bra	u1667
  3633  001296  F000               	nop	
  3634                           
  3635                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3636  001298  9C89               	bcf	3977,6,c	;volatile
  3637  00129A  0012               	return		;funcret
  3638  00129C                     __end_of_E_TOG:
  3639                           	opt callstack 0
  3640                           
  3641 ;; *************** function _init_motor_struct *****************
  3642 ;; Defined at:
  3643 ;;		line 115 in file "dc_motor.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3646 ;;		 -> main@motorL(9), 
  3647 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3648 ;;		 -> main@motorR(9), 
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      void 
  3653 ;; Registers used:
  3654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3660 ;;      Params:         4       0       0       0
  3661 ;;      Locals:         0       0       0       0
  3662 ;;      Temps:          0       0       0       0
  3663 ;;      Totals:         4       0       0       0
  3664 ;;Total ram usage:        4 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    5
  3667 ;; This function calls:
  3668 ;;		_setMotorPWM
  3669 ;; This function is called by:
  3670 ;;		_main
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text25
  3675  000860                     __ptext25:
  3676                           	opt callstack 0
  3677  000860                     _init_motor_struct:
  3678                           	opt callstack 25
  3679                           
  3680                           ;dc_motor.c: 115: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mo
      +                          tor.c: 116: {;dc_motor.c: 118: mL->power = 0;
  3681                           
  3682                           ;incstack = 0
  3683  000860  C026  FFD9         	movff	init_motor_struct@mL,fsr2l
  3684  000864  C027  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3685  000868  0E00               	movlw	0
  3686  00086A  6EDF               	movwf	indf2,c
  3687                           
  3688                           ;dc_motor.c: 119: mL->direction = 1;
  3689  00086C  EE20 F001          	lfsr	2,1
  3690  000870  5026               	movf	init_motor_struct@mL,w,c
  3691  000872  26D9               	addwf	fsr2l,f,c
  3692  000874  5027               	movf	init_motor_struct@mL+1,w,c
  3693  000876  22DA               	addwfc	fsr2h,f,c
  3694  000878  0E01               	movlw	1
  3695  00087A  6EDF               	movwf	indf2,c
  3696                           
  3697                           ;dc_motor.c: 120: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3698  00087C  EE20 F002          	lfsr	2,2
  3699  000880  5026               	movf	init_motor_struct@mL,w,c
  3700  000882  26D9               	addwf	fsr2l,f,c
  3701  000884  5027               	movf	init_motor_struct@mL+1,w,c
  3702  000886  22DA               	addwfc	fsr2h,f,c
  3703  000888  0E79               	movlw	121
  3704  00088A  6EDE               	movwf	postinc2,c
  3705  00088C  0E0F               	movlw	15
  3706  00088E  6EDD               	movwf	postdec2,c
  3707                           
  3708                           ;dc_motor.c: 121: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3709  000890  EE20 F004          	lfsr	2,4
  3710  000894  5026               	movf	init_motor_struct@mL,w,c
  3711  000896  26D9               	addwf	fsr2l,f,c
  3712  000898  5027               	movf	init_motor_struct@mL+1,w,c
  3713  00089A  22DA               	addwfc	fsr2h,f,c
  3714  00089C  0E78               	movlw	120
  3715  00089E  6EDE               	movwf	postinc2,c
  3716  0008A0  0E0F               	movlw	15
  3717  0008A2  6EDD               	movwf	postdec2,c
  3718                           
  3719                           ;dc_motor.c: 122: mL->dir_pin=0;
  3720  0008A4  EE20 F006          	lfsr	2,6
  3721  0008A8  5026               	movf	init_motor_struct@mL,w,c
  3722  0008AA  26D9               	addwf	fsr2l,f,c
  3723  0008AC  5027               	movf	init_motor_struct@mL+1,w,c
  3724  0008AE  22DA               	addwfc	fsr2h,f,c
  3725  0008B0  0E00               	movlw	0
  3726  0008B2  6EDF               	movwf	indf2,c
  3727                           
  3728                           ;dc_motor.c: 123: mL->PWMperiod=199;
  3729  0008B4  EE20 F007          	lfsr	2,7
  3730  0008B8  5026               	movf	init_motor_struct@mL,w,c
  3731  0008BA  26D9               	addwf	fsr2l,f,c
  3732  0008BC  5027               	movf	init_motor_struct@mL+1,w,c
  3733  0008BE  22DA               	addwfc	fsr2h,f,c
  3734  0008C0  0EC7               	movlw	199
  3735  0008C2  6EDE               	movwf	postinc2,c
  3736  0008C4  0E00               	movlw	0
  3737  0008C6  6EDD               	movwf	postdec2,c
  3738                           
  3739                           ;dc_motor.c: 125: mR->power = 0;
  3740  0008C8  C028  FFD9         	movff	init_motor_struct@mR,fsr2l
  3741  0008CC  C029  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3742  0008D0  0E00               	movlw	0
  3743  0008D2  6EDF               	movwf	indf2,c
  3744                           
  3745                           ;dc_motor.c: 126: mR->direction = 1;
  3746  0008D4  EE20 F001          	lfsr	2,1
  3747  0008D8  5028               	movf	init_motor_struct@mR,w,c
  3748  0008DA  26D9               	addwf	fsr2l,f,c
  3749  0008DC  5029               	movf	init_motor_struct@mR+1,w,c
  3750  0008DE  22DA               	addwfc	fsr2h,f,c
  3751  0008E0  0E01               	movlw	1
  3752  0008E2  6EDF               	movwf	indf2,c
  3753                           
  3754                           ;dc_motor.c: 127: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3755  0008E4  EE20 F002          	lfsr	2,2
  3756  0008E8  5028               	movf	init_motor_struct@mR,w,c
  3757  0008EA  26D9               	addwf	fsr2l,f,c
  3758  0008EC  5029               	movf	init_motor_struct@mR+1,w,c
  3759  0008EE  22DA               	addwfc	fsr2h,f,c
  3760  0008F0  0E77               	movlw	119
  3761  0008F2  6EDE               	movwf	postinc2,c
  3762  0008F4  0E0F               	movlw	15
  3763  0008F6  6EDD               	movwf	postdec2,c
  3764                           
  3765                           ;dc_motor.c: 128: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3766  0008F8  EE20 F004          	lfsr	2,4
  3767  0008FC  5028               	movf	init_motor_struct@mR,w,c
  3768  0008FE  26D9               	addwf	fsr2l,f,c
  3769  000900  5029               	movf	init_motor_struct@mR+1,w,c
  3770  000902  22DA               	addwfc	fsr2h,f,c
  3771  000904  0E76               	movlw	118
  3772  000906  6EDE               	movwf	postinc2,c
  3773  000908  0E0F               	movlw	15
  3774  00090A  6EDD               	movwf	postdec2,c
  3775                           
  3776                           ;dc_motor.c: 129: mR->dir_pin=2;
  3777  00090C  EE20 F006          	lfsr	2,6
  3778  000910  5028               	movf	init_motor_struct@mR,w,c
  3779  000912  26D9               	addwf	fsr2l,f,c
  3780  000914  5029               	movf	init_motor_struct@mR+1,w,c
  3781  000916  22DA               	addwfc	fsr2h,f,c
  3782  000918  0E02               	movlw	2
  3783  00091A  6EDF               	movwf	indf2,c
  3784                           
  3785                           ;dc_motor.c: 130: mR->PWMperiod=199;
  3786  00091C  EE20 F007          	lfsr	2,7
  3787  000920  5028               	movf	init_motor_struct@mR,w,c
  3788  000922  26D9               	addwf	fsr2l,f,c
  3789  000924  5029               	movf	init_motor_struct@mR+1,w,c
  3790  000926  22DA               	addwfc	fsr2h,f,c
  3791  000928  0EC7               	movlw	199
  3792  00092A  6EDE               	movwf	postinc2,c
  3793  00092C  0E00               	movlw	0
  3794  00092E  6EDD               	movwf	postdec2,c
  3795                           
  3796                           ;dc_motor.c: 132: setMotorPWM(mL);
  3797  000930  C026  F01D         	movff	init_motor_struct@mL,setMotorPWM@m
  3798  000934  C027  F01E         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3799  000938  EC1D  F003         	call	_setMotorPWM	;wreg free
  3800                           
  3801                           ;dc_motor.c: 133: setMotorPWM(mR);
  3802  00093C  C028  F01D         	movff	init_motor_struct@mR,setMotorPWM@m
  3803  000940  C029  F01E         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3804  000944  EC1D  F003         	call	_setMotorPWM	;wreg free
  3805  000948  0012               	return		;funcret
  3806  00094A                     __end_of_init_motor_struct:
  3807                           	opt callstack 0
  3808                           
  3809 ;; *************** function _setMotorPWM *****************
  3810 ;; Defined at:
  3811 ;;		line 18 in file "dc_motor.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  m               2   28[COMRAM] PTR struct DC_motor
  3814 ;;		 -> main@motorR(9), main@motorL(9), 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  PWMduty         2   35[COMRAM] int 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3826 ;;      Params:         2       0       0       0
  3827 ;;      Locals:         2       0       0       0
  3828 ;;      Temps:          5       0       0       0
  3829 ;;      Totals:         9       0       0       0
  3830 ;;Total ram usage:        9 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    4
  3833 ;; This function calls:
  3834 ;;		___awdiv
  3835 ;;		___wmul
  3836 ;; This function is called by:
  3837 ;;		_stop
  3838 ;;		_turnLeft
  3839 ;;		_turnRight
  3840 ;;		_moveForward
  3841 ;;		_moveBackward
  3842 ;;		_init_motor_struct
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text26
  3847  00063A                     __ptext26:
  3848                           	opt callstack 0
  3849  00063A                     _setMotorPWM:
  3850                           	opt callstack 24
  3851                           
  3852                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3853                           
  3854                           ;incstack = 0
  3855  00063A  C01D  FFD9         	movff	setMotorPWM@m,fsr2l
  3856  00063E  C01E  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3857  000642  50DF               	movf	indf2,w,c
  3858  000644  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3859  000646  501F               	movf	??_setMotorPWM,w,c
  3860  000648  6E0F               	movwf	___wmul@multiplier,c
  3861  00064A  6A10               	clrf	___wmul@multiplier+1,c
  3862  00064C  EE20 F007          	lfsr	2,7
  3863  000650  501D               	movf	setMotorPWM@m,w,c
  3864  000652  26D9               	addwf	fsr2l,f,c
  3865  000654  501E               	movf	setMotorPWM@m+1,w,c
  3866  000656  22DA               	addwfc	fsr2h,f,c
  3867  000658  CFDE F011          	movff	postinc2,___wmul@multiplicand
  3868  00065C  CFDD F012          	movff	postdec2,___wmul@multiplicand+1
  3869  000660  EC03  F009         	call	___wmul	;wreg free
  3870  000664  C00F  F015         	movff	?___wmul,___awdiv@dividend
  3871  000668  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  3872  00066C  0E00               	movlw	0
  3873  00066E  6E18               	movwf	___awdiv@divisor+1,c
  3874  000670  0E64               	movlw	100
  3875  000672  6E17               	movwf	___awdiv@divisor,c
  3876  000674  EC56  F006         	call	___awdiv	;wreg free
  3877  000678  C015  F024         	movff	?___awdiv,setMotorPWM@PWMduty
  3878  00067C  C016  F025         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3879                           
  3880                           ;dc_motor.c: 24:     if (m->direction)
  3881  000680  EE20 F001          	lfsr	2,1
  3882  000684  501D               	movf	setMotorPWM@m,w,c
  3883  000686  26D9               	addwf	fsr2l,f,c
  3884  000688  501E               	movf	setMotorPWM@m+1,w,c
  3885  00068A  22DA               	addwfc	fsr2h,f,c
  3886  00068C  50DF               	movf	indf2,w,c
  3887  00068E  B4D8               	btfsc	status,2,c
  3888  000690  D024               	goto	l1689
  3889                           
  3890                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3891  000692  EE20 F006          	lfsr	2,6
  3892  000696  501D               	movf	setMotorPWM@m,w,c
  3893  000698  26D9               	addwf	fsr2l,f,c
  3894  00069A  501E               	movf	setMotorPWM@m+1,w,c
  3895  00069C  22DA               	addwfc	fsr2h,f,c
  3896  00069E  50DF               	movf	indf2,w,c
  3897  0006A0  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3898  0006A2  0E01               	movlw	1
  3899  0006A4  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3900  0006A6  2A1F               	incf	??_setMotorPWM,f,c
  3901  0006A8  D002               	goto	u814
  3902  0006AA                     u815:
  3903  0006AA  90D8               	bcf	status,0,c
  3904  0006AC  3620               	rlcf	??_setMotorPWM+1,f,c
  3905  0006AE                     u814:
  3906  0006AE  2E1F               	decfsz	??_setMotorPWM,f,c
  3907  0006B0  D7FC               	goto	u815
  3908  0006B2  5020               	movf	??_setMotorPWM+1,w,c
  3909  0006B4  108A               	iorwf	3978,w,c	;volatile
  3910  0006B6  6E8A               	movwf	3978,c	;volatile
  3911                           
  3912                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3913  0006B8  EE20 F007          	lfsr	2,7
  3914  0006BC  501D               	movf	setMotorPWM@m,w,c
  3915  0006BE  26D9               	addwf	fsr2l,f,c
  3916  0006C0  501E               	movf	setMotorPWM@m+1,w,c
  3917  0006C2  22DA               	addwfc	fsr2h,f,c
  3918  0006C4  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3919  0006C8  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3920  0006CC  5024               	movf	setMotorPWM@PWMduty,w,c
  3921  0006CE  5C1F               	subwf	??_setMotorPWM,w,c
  3922  0006D0  6E24               	movwf	setMotorPWM@PWMduty,c
  3923  0006D2  5025               	movf	setMotorPWM@PWMduty+1,w,c
  3924  0006D4  5820               	subwfb	??_setMotorPWM+1,w,c
  3925  0006D6  6E25               	movwf	setMotorPWM@PWMduty+1,c
  3926                           
  3927                           ;dc_motor.c: 28:     }
  3928  0006D8  D014               	goto	l123
  3929  0006DA                     l1689:
  3930                           
  3931                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3932  0006DA  EE20 F006          	lfsr	2,6
  3933  0006DE  501D               	movf	setMotorPWM@m,w,c
  3934  0006E0  26D9               	addwf	fsr2l,f,c
  3935  0006E2  501E               	movf	setMotorPWM@m+1,w,c
  3936  0006E4  22DA               	addwfc	fsr2h,f,c
  3937  0006E6  50DF               	movf	indf2,w,c
  3938  0006E8  6E1F               	movwf	??_setMotorPWM& (0+255),c
  3939  0006EA  0E01               	movlw	1
  3940  0006EC  6E20               	movwf	(??_setMotorPWM+1)& (0+255),c
  3941  0006EE  2A1F               	incf	??_setMotorPWM,f,c
  3942  0006F0  D002               	goto	u824
  3943  0006F2                     u825:
  3944  0006F2  90D8               	bcf	status,0,c
  3945  0006F4  3620               	rlcf	??_setMotorPWM+1,f,c
  3946  0006F6                     u824:
  3947  0006F6  2E1F               	decfsz	??_setMotorPWM,f,c
  3948  0006F8  D7FC               	goto	u825
  3949  0006FA  5020               	movf	??_setMotorPWM+1,w,c
  3950  0006FC  0AFF               	xorlw	255
  3951  0006FE  148A               	andwf	3978,w,c	;volatile
  3952  000700  6E8A               	movwf	3978,c	;volatile
  3953  000702                     l123:
  3954                           
  3955                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3956  000702  EE20 F002          	lfsr	2,2
  3957  000706  501D               	movf	setMotorPWM@m,w,c
  3958  000708  26D9               	addwf	fsr2l,f,c
  3959  00070A  501E               	movf	setMotorPWM@m+1,w,c
  3960  00070C  22DA               	addwfc	fsr2h,f,c
  3961  00070E  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3962  000712  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3963  000716  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3964  00071A  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3965  00071E  4424               	rlncf	setMotorPWM@PWMduty,w,c
  3966  000720  46E8               	rlncf	wreg,f,c
  3967  000722  0BFC               	andlw	252
  3968  000724  6EDF               	movwf	indf2,c
  3969                           
  3970                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3971  000726  EE20 F004          	lfsr	2,4
  3972  00072A  501D               	movf	setMotorPWM@m,w,c
  3973  00072C  26D9               	addwf	fsr2l,f,c
  3974  00072E  501E               	movf	setMotorPWM@m+1,w,c
  3975  000730  22DA               	addwfc	fsr2h,f,c
  3976  000732  CFDE F01F          	movff	postinc2,??_setMotorPWM
  3977  000736  CFDD F020          	movff	postdec2,??_setMotorPWM+1
  3978  00073A  C01F  FFD9         	movff	??_setMotorPWM,fsr2l
  3979  00073E  C020  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3980  000742  C024  F021         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3981  000746  C025  F022         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3982  00074A  0E06               	movlw	6
  3983  00074C  6E23               	movwf	(??_setMotorPWM+4)& (0+255),c
  3984  00074E                     u835:
  3985  00074E  3422               	rlcf	??_setMotorPWM+3,w,c
  3986  000750  3222               	rrcf	??_setMotorPWM+3,f,c
  3987  000752  3221               	rrcf	??_setMotorPWM+2,f,c
  3988  000754  2E23               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3989  000756  D7FB               	goto	u835
  3990  000758  5021               	movf	??_setMotorPWM+2,w,c
  3991  00075A  6EDF               	movwf	indf2,c
  3992  00075C  0012               	return		;funcret
  3993  00075E                     __end_of_setMotorPWM:
  3994                           	opt callstack 0
  3995                           
  3996 ;; *************** function ___wmul *****************
  3997 ;; Defined at:
  3998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  multiplier      2   14[COMRAM] unsigned int 
  4001 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  product         2   18[COMRAM] unsigned int 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  2   14[COMRAM] unsigned int 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0, prodl, prodh
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4013 ;;      Params:         4       0       0       0
  4014 ;;      Locals:         2       0       0       0
  4015 ;;      Temps:          0       0       0       0
  4016 ;;      Totals:         6       0       0       0
  4017 ;;Total ram usage:        6 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    3
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_setMotorPWM
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text27
  4028  001206                     __ptext27:
  4029                           	opt callstack 0
  4030  001206                     ___wmul:
  4031                           	opt callstack 24
  4032                           
  4033                           ;incstack = 0
  4034  001206  500F               	movf	___wmul@multiplier,w,c
  4035  001208  0211               	mulwf	___wmul@multiplicand,c
  4036  00120A  CFF3 F013          	movff	prodl,___wmul@product
  4037  00120E  CFF4 F014          	movff	prodh,___wmul@product+1
  4038  001212  500F               	movf	___wmul@multiplier,w,c
  4039  001214  0212               	mulwf	___wmul@multiplicand+1,c
  4040  001216  50F3               	movf	prodl,w,c
  4041  001218  2614               	addwf	___wmul@product+1,f,c
  4042  00121A  5010               	movf	___wmul@multiplier+1,w,c
  4043  00121C  0211               	mulwf	___wmul@multiplicand,c
  4044  00121E  50F3               	movf	prodl,w,c
  4045  001220  2614               	addwf	___wmul@product+1,f,c
  4046  001222  C013  F00F         	movff	___wmul@product,?___wmul
  4047  001226  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4048  00122A  0012               	return		;funcret
  4049  00122C                     __end_of___wmul:
  4050                           	opt callstack 0
  4051                           
  4052 ;; *************** function ___awdiv *****************
  4053 ;; Defined at:
  4054 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  dividend        2   20[COMRAM] int 
  4057 ;;  divisor         2   22[COMRAM] int 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  quotient        2   26[COMRAM] int 
  4060 ;;  sign            1   25[COMRAM] unsigned char 
  4061 ;;  counter         1   24[COMRAM] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  2   20[COMRAM] int 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4071 ;;      Params:         4       0       0       0
  4072 ;;      Locals:         4       0       0       0
  4073 ;;      Temps:          0       0       0       0
  4074 ;;      Totals:         8       0       0       0
  4075 ;;Total ram usage:        8 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    3
  4078 ;; This function calls:
  4079 ;;		Nothing
  4080 ;; This function is called by:
  4081 ;;		_setMotorPWM
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text28
  4086  000CAC                     __ptext28:
  4087                           	opt callstack 0
  4088  000CAC                     ___awdiv:
  4089                           	opt callstack 24
  4090                           
  4091                           ;incstack = 0
  4092  000CAC  0E00               	movlw	0
  4093  000CAE  6E1A               	movwf	___awdiv@sign,c
  4094  000CB0  AE18               	btfss	___awdiv@divisor+1,7,c
  4095  000CB2  D006               	goto	l1637
  4096  000CB4  6C17               	negf	___awdiv@divisor,c
  4097  000CB6  1E18               	comf	___awdiv@divisor+1,f,c
  4098  000CB8  B0D8               	btfsc	status,0,c
  4099  000CBA  2A18               	incf	___awdiv@divisor+1,f,c
  4100  000CBC  0E01               	movlw	1
  4101  000CBE  6E1A               	movwf	___awdiv@sign,c
  4102  000CC0                     l1637:
  4103  000CC0  AE16               	btfss	___awdiv@dividend+1,7,c
  4104  000CC2  D006               	goto	l1643
  4105  000CC4  6C15               	negf	___awdiv@dividend,c
  4106  000CC6  1E16               	comf	___awdiv@dividend+1,f,c
  4107  000CC8  B0D8               	btfsc	status,0,c
  4108  000CCA  2A16               	incf	___awdiv@dividend+1,f,c
  4109  000CCC  0E01               	movlw	1
  4110  000CCE  1A1A               	xorwf	___awdiv@sign,f,c
  4111  000CD0                     l1643:
  4112  000CD0  0E00               	movlw	0
  4113  000CD2  6E1C               	movwf	___awdiv@quotient+1,c
  4114  000CD4  0E00               	movlw	0
  4115  000CD6  6E1B               	movwf	___awdiv@quotient,c
  4116  000CD8  5017               	movf	___awdiv@divisor,w,c
  4117  000CDA  1018               	iorwf	___awdiv@divisor+1,w,c
  4118  000CDC  B4D8               	btfsc	status,2,c
  4119  000CDE  D01C               	goto	l1665
  4120  000CE0  0E01               	movlw	1
  4121  000CE2  6E19               	movwf	___awdiv@counter,c
  4122  000CE4  D004               	goto	l1651
  4123  000CE6                     l1649:
  4124  000CE6  90D8               	bcf	status,0,c
  4125  000CE8  3617               	rlcf	___awdiv@divisor,f,c
  4126  000CEA  3618               	rlcf	___awdiv@divisor+1,f,c
  4127  000CEC  2A19               	incf	___awdiv@counter,f,c
  4128  000CEE                     l1651:
  4129  000CEE  AE18               	btfss	___awdiv@divisor+1,7,c
  4130  000CF0  D7FA               	goto	l1649
  4131  000CF2                     u760:
  4132  000CF2  90D8               	bcf	status,0,c
  4133  000CF4  361B               	rlcf	___awdiv@quotient,f,c
  4134  000CF6  361C               	rlcf	___awdiv@quotient+1,f,c
  4135  000CF8  5017               	movf	___awdiv@divisor,w,c
  4136  000CFA  5C15               	subwf	___awdiv@dividend,w,c
  4137  000CFC  5018               	movf	___awdiv@divisor+1,w,c
  4138  000CFE  5816               	subwfb	___awdiv@dividend+1,w,c
  4139  000D00  A0D8               	btfss	status,0,c
  4140  000D02  D005               	goto	l1661
  4141  000D04  5017               	movf	___awdiv@divisor,w,c
  4142  000D06  5E15               	subwf	___awdiv@dividend,f,c
  4143  000D08  5018               	movf	___awdiv@divisor+1,w,c
  4144  000D0A  5A16               	subwfb	___awdiv@dividend+1,f,c
  4145  000D0C  801B               	bsf	___awdiv@quotient,0,c
  4146  000D0E                     l1661:
  4147  000D0E  90D8               	bcf	status,0,c
  4148  000D10  3218               	rrcf	___awdiv@divisor+1,f,c
  4149  000D12  3217               	rrcf	___awdiv@divisor,f,c
  4150  000D14  2E19               	decfsz	___awdiv@counter,f,c
  4151  000D16  D7ED               	goto	u760
  4152  000D18                     l1665:
  4153  000D18  501A               	movf	___awdiv@sign,w,c
  4154  000D1A  B4D8               	btfsc	status,2,c
  4155  000D1C  D004               	goto	l1669
  4156  000D1E  6C1B               	negf	___awdiv@quotient,c
  4157  000D20  1E1C               	comf	___awdiv@quotient+1,f,c
  4158  000D22  B0D8               	btfsc	status,0,c
  4159  000D24  2A1C               	incf	___awdiv@quotient+1,f,c
  4160  000D26                     l1669:
  4161  000D26  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  4162  000D2A  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  4163  000D2E  0012               	return		;funcret
  4164  000D30                     __end_of___awdiv:
  4165                           	opt callstack 0
  4166                           
  4167 ;; *************** function _InterruptHandlerLow *****************
  4168 ;; Defined at:
  4169 ;;		line 94 in file "main.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;		None
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;		None
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      void 
  4176 ;; Registers used:
  4177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4183 ;;      Params:         0       0       0       0
  4184 ;;      Locals:         0       0       0       0
  4185 ;;      Temps:          7       0       0       0
  4186 ;;      Totals:         7       0       0       0
  4187 ;;Total ram usage:        7 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    2
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		Interrupt level 1
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	intcodelo
  4198  000018                     __pintcodelo:
  4199                           	opt callstack 0
  4200  000018                     _InterruptHandlerLow:
  4201                           	opt callstack 22
  4202                           
  4203                           ;incstack = 0
  4204  000018  8050               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4205  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  4206  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  4207  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  4208  000026  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerLow+3
  4209  00002A  CFDA F00C          	movff	fsr2h,??_InterruptHandlerLow+4
  4210  00002E  CFF3 F00D          	movff	prodl,??_InterruptHandlerLow+5
  4211  000032  CFF4 F00E          	movff	prodh,??_InterruptHandlerLow+6
  4212                           
  4213                           ;main.c: 97:     if((INTCONbits.TMR0IF) && ((robot_mode == 1) || (robot_mode == 0)))
  4214  000036  A4F2               	btfss	4082,2,c	;volatile
  4215  000038  D013               	goto	i1l70
  4216  00003A  0443               	decf	_robot_mode,w,c	;volatile
  4217  00003C  B4D8               	btfsc	status,2,c
  4218  00003E  D003               	goto	i1u136_20
  4219  000040  5043               	movf	_robot_mode,w,c	;volatile
  4220  000042  A4D8               	btfss	status,2,c
  4221  000044  D00D               	goto	i1l70
  4222  000046                     i1u136_20:
  4223                           
  4224                           ;main.c: 98:     {;main.c: 100:         travel_moves.time_taken[travel_moves.move_number
      +                          ] += 1;
  4225  000046  0100               	movlb	0	; () banked
  4226  000048  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4227  00004A  0D02               	mullw	2
  4228  00004C  0E74               	movlw	low (_travel_moves+20)
  4229  00004E  24F3               	addwf	prodl,w,c
  4230  000050  6ED9               	movwf	fsr2l,c
  4231  000052  0E00               	movlw	high (_travel_moves+20)
  4232  000054  20F4               	addwfc	prodh,w,c
  4233  000056  6EDA               	movwf	fsr2h,c
  4234  000058  2ADE               	incf	postinc2,f,c
  4235  00005A  0E00               	movlw	0
  4236  00005C  22DD               	addwfc	postdec2,f,c
  4237  00005E  D012               	goto	i1l2145
  4238  000060                     i1l70:
  4239  000060  A4F2               	btfss	4082,2,c	;volatile
  4240  000062  D010               	goto	i1l2145
  4241  000064  0E02               	movlw	2
  4242  000066  1843               	xorwf	_robot_mode,w,c	;volatile
  4243  000068  A4D8               	btfss	status,2,c
  4244  00006A  D00C               	goto	i1l2145
  4245                           
  4246                           ;main.c: 105:     {;main.c: 106:         travel_moves.time_taken[travel_moves.move_numbe
      +                          r] -= 1;
  4247  00006C  0100               	movlb	0	; () banked
  4248  00006E  519C               	movf	(_travel_moves+60)& (0+255),w,b
  4249  000070  0D02               	mullw	2
  4250  000072  0E74               	movlw	low (_travel_moves+20)
  4251  000074  24F3               	addwf	prodl,w,c
  4252  000076  6ED9               	movwf	fsr2l,c
  4253  000078  0E00               	movlw	high (_travel_moves+20)
  4254  00007A  20F4               	addwfc	prodh,w,c
  4255  00007C  6EDA               	movwf	fsr2h,c
  4256  00007E  06DE               	decf	postinc2,f,c
  4257  000080  0E00               	movlw	0
  4258  000082  5ADD               	subwfb	postdec2,f,c
  4259  000084                     i1l2145:
  4260                           
  4261                           ;main.c: 111:     {;main.c: 112:         INTCONbits.TMR0IF = 0;
  4262                           
  4263                           ;main.c: 110:     else
  4264                           
  4265                           ;main.c: 108:     }
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;main.c: 107:         INTCONbits.TMR0IF = 0;
  4269  000084  94F2               	bcf	4082,2,c	;volatile
  4270  000086  C00E  FFF4         	movff	??_InterruptHandlerLow+6,prodh
  4271  00008A  C00D  FFF3         	movff	??_InterruptHandlerLow+5,prodl
  4272  00008E  C00C  FFDA         	movff	??_InterruptHandlerLow+4,fsr2h
  4273  000092  C00B  FFD9         	movff	??_InterruptHandlerLow+3,fsr2l
  4274  000096  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  4275  00009A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  4276  00009E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  4277  0000A2  9050               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4278  0000A4  0010               	retfie	
  4279  0000A6                     __end_of_InterruptHandlerLow:
  4280                           	opt callstack 0
  4281                           
  4282 ;; *************** function _InterruptHandlerHigh *****************
  4283 ;; Defined at:
  4284 ;;		line 76 in file "main.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  throwaway       1    0        unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      void 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4298 ;;      Params:         0       0       0       0
  4299 ;;      Locals:         1       0       0       0
  4300 ;;      Temps:          2       0       0       0
  4301 ;;      Totals:         3       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    1
  4305 ;; This function calls:
  4306 ;;		_processRFID
  4307 ;; This function is called by:
  4308 ;;		Interrupt level 2
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	intcode
  4313  000008                     __pintcode:
  4314                           	opt callstack 0
  4315  000008                     _InterruptHandlerHigh:
  4316                           	opt callstack 22
  4317                           
  4318                           ;incstack = 0
  4319  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4320  00000A  EFA4  F008         	goto	int_func
  4321                           
  4322                           	psect	intcode_body
  4323  001148                     __pintcode_body:
  4324                           	opt callstack 22
  4325  001148                     int_func:
  4326                           	opt callstack 22
  4327  001148  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  4328  00114C  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  4329                           
  4330                           ;main.c: 80:     if((PIR1bits.RCIF) && (robot_mode == 1))
  4331  001150  AA9E               	btfss	3998,5,c	;volatile
  4332  001152  D00E               	goto	i2l63
  4333  001154  0443               	decf	_robot_mode,w,c	;volatile
  4334  001156  A4D8               	btfss	status,2,c
  4335  001158  D00B               	goto	i2l63
  4336                           
  4337                           ;main.c: 81:     {;main.c: 83:         RFID_flag = processRFID(RFIDbuf, RCREG);
  4338  00115A  0E44               	movlw	low _RFIDbuf
  4339  00115C  6E01               	movwf	processRFID@RFIDbuf,c
  4340  00115E  0E00               	movlw	high _RFIDbuf
  4341  001160  6E02               	movwf	processRFID@RFIDbuf+1,c
  4342  001162  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  4343  001166  EC06  F008         	call	_processRFID	;wreg free
  4344  00116A  0100               	movlb	0	; () banked
  4345  00116C  6F9D               	movwf	_RFID_flag& (0+255),b	;volatile
  4346                           
  4347                           ;main.c: 84:     }
  4348  00116E  D001               	goto	i2l65
  4349  001170                     i2l63:
  4350  001170  50AE               	movf	4014,w,c	;volatile
  4351  001172                     i2l65:
  4352  001172  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  4353  001176  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  4354  00117A  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4355  00117C  0011               	retfie		f
  4356  00117E                     __end_of_InterruptHandlerHigh:
  4357                           	opt callstack 0
  4358                           
  4359 ;; *************** function _processRFID *****************
  4360 ;; Defined at:
  4361 ;;		line 34 in file "RFID.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  4364 ;;		 -> RFIDbuf(12), 
  4365 ;;  latestChar      1    2[COMRAM] unsigned char 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  i               1    3[COMRAM] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      unsigned char 
  4370 ;; Registers used:
  4371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4377 ;;      Params:         3       0       0       0
  4378 ;;      Locals:         1       0       0       0
  4379 ;;      Temps:          0       0       0       0
  4380 ;;      Totals:         4       0       0       0
  4381 ;;Total ram usage:        4 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_InterruptHandlerHigh
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text31
  4391  00100C                     __ptext31:
  4392                           	opt callstack 0
  4393  00100C                     _processRFID:
  4394                           	opt callstack 22
  4395                           
  4396                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4397                           
  4398                           ;incstack = 0
  4399  00100C  0E03               	movlw	3
  4400  00100E  1803               	xorwf	processRFID@latestChar,w,c
  4401  001010  A4D8               	btfss	status,2,c
  4402  001012  D002               	goto	i2l1929
  4403                           
  4404                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4405  001014  0E01               	movlw	1
  4406  001016  0012               	return	
  4407  001018                     i2l1929:
  4408                           
  4409                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4410  001018  0E02               	movlw	2
  4411  00101A  1803               	xorwf	processRFID@latestChar,w,c
  4412  00101C  A4D8               	btfss	status,2,c
  4413  00101E  D012               	goto	i2l1949
  4414                           
  4415                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4416  001020  0E00               	movlw	0
  4417  001022  6E42               	movwf	processRFID@position_in_buf,c
  4418                           
  4419                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4420  001024  0E00               	movlw	0
  4421  001026  6E04               	movwf	processRFID@i,c
  4422  001028                     i2l1937:
  4423                           
  4424                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4425  001028  5004               	movf	processRFID@i,w,c
  4426  00102A  2401               	addwf	processRFID@RFIDbuf,w,c
  4427  00102C  6ED9               	movwf	fsr2l,c
  4428  00102E  0E00               	movlw	0
  4429  001030  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4430  001032  6EDA               	movwf	fsr2h,c
  4431  001034  0E00               	movlw	0
  4432  001036  6EDF               	movwf	indf2,c
  4433                           
  4434                           ;RFID.c: 56:            }
  4435  001038  2A04               	incf	processRFID@i,f,c
  4436  00103A  0E0B               	movlw	11
  4437  00103C  6404               	cpfsgt	processRFID@i,c
  4438  00103E  D7F4               	goto	i2l1937
  4439  001040                     i2u116_40:
  4440                           
  4441                           ;RFID.c: 57:            return 0;
  4442  001040  0E00               	movlw	0
  4443  001042  0012               	return	
  4444  001044                     i2l1949:
  4445                           
  4446                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4447  001044  5042               	movf	processRFID@position_in_buf,w,c
  4448  001046  2401               	addwf	processRFID@RFIDbuf,w,c
  4449  001048  6ED9               	movwf	fsr2l,c
  4450  00104A  0E00               	movlw	0
  4451  00104C  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4452  00104E  6EDA               	movwf	fsr2h,c
  4453  001050  C003  FFDF         	movff	processRFID@latestChar,indf2
  4454                           
  4455                           ;RFID.c: 63:             position_in_buf++;
  4456  001054  2A42               	incf	processRFID@position_in_buf,f,c
  4457  001056  D7F4               	goto	i2u116_40
  4458  001058                     __end_of_processRFID:
  4459                           	opt callstack 0
  4460                           
  4461                           	psect	rparam
  4462  0000                     
  4463                           	psect	temp
  4464  000050                     btemp:
  4465                           	opt callstack 0
  4466  000050                     	ds	1
  4467  0000                     int$flags	set	btemp
  4468  0000                     wtemp8	set	btemp+1
  4469  0000                     ttemp5	set	btemp+1
  4470  0000                     ttemp6	set	btemp+4
  4471  0000                     ttemp7	set	btemp+8
  4472                           tosu	equ	0xFFF
  4473                           tosh	equ	0xFFE
  4474                           tosl	equ	0xFFD
  4475                           stkptr	equ	0xFFC
  4476                           pclatu	equ	0xFFB
  4477                           pclath	equ	0xFFA
  4478                           pcl	equ	0xFF9
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           indf0	equ	0xFEF
  4486                           postinc0	equ	0xFEE
  4487                           postdec0	equ	0xFED
  4488                           preinc0	equ	0xFEC
  4489                           plusw0	equ	0xFEB
  4490                           fsr0h	equ	0xFEA
  4491                           fsr0l	equ	0xFE9
  4492                           wreg	equ	0xFE8
  4493                           indf1	equ	0xFE7
  4494                           postinc1	equ	0xFE6
  4495                           postdec1	equ	0xFE5
  4496                           preinc1	equ	0xFE4
  4497                           plusw1	equ	0xFE3
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           bsr	equ	0xFE0
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           preinc2	equ	0xFDC
  4505                           plusw2	equ	0xFDB
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    0
    Data        0
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      79
    BANK0           160     22      84
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(BANK0[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@move	PTR struct Movements size(2) Largest target is 61
		 -> travel_moves(BANK0[61]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(COMRAM[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_10(CODE[16]), STR_9(CODE[16]), STR_8(CODE[13]), STR_7(CODE[16]), 
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[10]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S370DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S370DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_moveToBeacon
    _main->_returnHome
    _waitForInput->_LCD_String
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turnLeft
    _turnLeft->_setMotorPWM
    _returnHome->_moveBackward
    _returnHome->_stop
    _returnHome->_turnRight
    _turnRight->_setMotorPWM
    _stop->_setMotorPWM
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   43533
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    4002
                                             20 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   12102
                                             46 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    2952
                                             19 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    3568
                                             20 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0     958
                                             18 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1122
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1002
                                             18 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     120
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       13     5      8    5671
                                             46 COMRAM    13     5      8
                           _ClearLCD
                         _LCD_String
                      _classify_data
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             9     3      6    2261
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          17     7     10   10443
                                             46 COMRAM    17     7     10
                           _ClearLCD
                         _LCD_String
                       _moveBackward
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            9     3      6    2261
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2467
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2261
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        17     7     10    5795
                                             46 COMRAM    17     7     10
                           _ClearLCD
                         _LCD_String
                      _classify_data
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2261
                                             37 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     295
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1719
                                             18 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0     914
                                             18 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1     914
                                             16 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0      88
                                             14 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2271
                                             37 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1811
                                             28 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     257
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  7     7      0       0
                                              7 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnRight
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turnLeft
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      54       5       52.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      4F       1       84.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A3       3        0.0%
DATA                 0      0      A3      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 21:39:23 2020

                           l55 10E0                   ___awdiv@sign 001A                             bsr 000FE0  
          ___wmul@multiplicand 0011                  ?_display_RFID 0014                    ?_LCD_String 0013  
                          l123 0702                            l320 04D4                            l350 0B38  
          display_RFID@dataBuf 0014                            u725 1188                            u814 06AE  
                          u726 118A                            u815 06AA                            u760 0CF2  
                          u824 06F6                            u825 06F2                            u835 074E  
                          u950 058A                            u960 0594                            u970 0596  
                          u980 05A4                            u990 05A6                 moveToBeacon@mL 002F  
               moveToBeacon@mR 0031        __size_of_stopAndDisplay 0098                            prod 000FF3  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2005 0B5A                           l2103 0BD0                           l2041 0A66  
                         l2113 0BE8                           l2121 0C20                           l2019 0C70  
                         l2061 0AB0                           l2055 0A9C                           l2119 0C1A  
                         l2081 0402                           l2161 07B8                           l2059 0AA8  
                         l2083 0446                           l2077 03C4                           l2173 0852  
                         l2165 07EC                           l2157 078C                           l2087 0484  
                         l2169 0822                           l1651 0CEE                           l1643 0CD0  
                         l1661 0D0E                           l1637 0CC0                           l1813 0EE0  
                         l1823 0F22                           l1807 0E1E                           l1649 0CE6  
                         l1665 0D18                           l1681 1134                           l1761 0FB8  
                         l1675 1114                           l1669 0D26                           l1829 0E5E  
                         l1765 0FC6                           l1781 0D5A                           l1853 0534  
                         l1839 0EA0                           l1791 0D9C                           l1695 11C0  
                         l1847 04F2                           l1689 06DA                           l1881 10AE  
                         l1699 11D2                           l1859 0576                           l1797 0DDC  
                         l1869 0626                           l1981 0ADA                           l1895 1098  
                         STR_1 036F                           STR_2 0341                           STR_3 0331  
                         STR_4 038B                           STR_5 0351                           STR_6 0360  
                         STR_7 0321                           STR_8 037E                           STR_9 0311  
                         u1000 05B4                           u1010 05B6                           u1020 05C4  
                         u1030 05C6                           u1110 10DA                           u1120 1094  
                         u1040 05D4                           u1050 05D6                           u1060 05E4  
                         u1300 0C14                           u1070 05E6                           u1080 0602  
                         u1090 0604                           u1270 04C6                           u1190 0B86  
                         _LATB 000F8A                           u1507 09AA                           u1517 09BC  
                         u1437 0B64                           u1607 0F16                           u1527 09CE  
                         u1447 0BF2                           u1617 112E                           u1537 09E4  
                         u1457 11D4                           u1627 1270                           u1547 09F8  
                         u1467 0968                           u1637 1196                           u1557 0A0A  
                         u1477 097E                           u1647 11A6                           u1567 0D90  
                         u1487 098E                           u1657 0FA8                           u1577 0E12  
                         u1497 099C                           u1667 1292                           u1587 0FFC  
                         u1597 0E94                           i1l70 0060                           i2l63 1170  
                         i2l65 1172                   _travel_moves 0060                           _main 075E  
                         fsr2h 000FDA                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 0050  
                         _stop 0FB0                           prodh 000FF4                           prodl 000FF3  
                         start 00A6                   ___param_bank 000000                __end_of_SendLCD 11AE  
              __end_of_SetLine 11DC                 ??_display_RFID 0016                          ?_main 0001  
          main@searching_speed 009E                __end_of___awdiv 0D30                          STR_10 0301  
                        ?_stop 0026                          _T0CON 000FD5                ___awdiv@divisor 0017  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0019  
                        _RCREG 000FAE                          _E_TOG 128E                          _SPBRG 000FAF  
                 ?_init_sensor 0001                __end_of_initPWM 1260                          _setup 10DC  
             moveToBeacon@move 0035                          tablat 000FF5                          plusw2 000FDB  
           processRFID@RFIDbuf 0001                          ttemp5 0051                          ttemp6 0054  
                        ttemp7 0058                          stop@i 002D                          status 000FD8  
                        wtemp8 0051            __size_of_LCD_String 0036               __end_of_ClearLCD 127A  
         moveForward@max_power 002A                 __CFG_MCLRE$OFF 000000                __initialization 11DC  
                 __end_of_main 0860                   __end_of_stop 100C                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 0013                         ??_main 0040    moveToBeacon@beacon_location 003D  
                       ??_stop 002C                  __activetblptr 000001                         ?_E_TOG 0001  
                 ?_setMotorPWM 001D                   ?_moveForward 0026   scanForBeacon@beacon_location 003B  
             ___awdiv@dividend 0015                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i1l2145 0084                         i2l1937 1028  
                       i2l1929 1018                         i2l1949 1044                         _LCDout 0F38  
                  SendLCD@Byte 0012                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 0011                      ??_SendLCD 0012  
                    ??_SetLine 0013                  display_RFID@i 0016                         ___wmul 1206  
                    ??___awdiv 0019               __end_of_init_LCD 0A12            init_motor_struct@mL 0026  
          init_motor_struct@mR 0028                         clear_0 11E2                         clear_1 11EE  
             ___awdiv@quotient 001B              moveToBeacon@count 003E         __size_of_scanForBeacon 0088  
            moveToBeacon@speed 0033                      ??_initPWM 0011                 _stopAndDisplay 0B8C  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                         stop@mL 0026                         stop@mR 0028  
                 ?_processRFID 0001              _init_motor_struct 0860               __end_of_turnLeft 0DB2  
         __end_of_display_RFID 10DC             ?_init_motor_struct 0026                     __accesstop 0060  
      __end_of__initialization 11F4                  ___rparam_used 000001                    SetLine@line 0013  
                __end_of_E_TOG 129C            ??_init_motor_struct 002A                 __pcstackCOMRAM 0001  
                __end_of_setup 1112                   ??_LCD_String 0015         __end_of_stopAndDisplay 0C24  
                      ??_E_TOG 000F  __size_of_InterruptHandlerHigh 1176                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 00A6      __end_of_init_motor_struct 094A          __end_of_classify_data 109C  
                   _check_RFID 04EA           __size_of_init_sensor 0014                        ??_setup 0014  
                ?_moveBackward 0026                     __pbssBANK0 0060                        ?_LCDout 0001  
                _scanForBeacon 0C24             __size_of_init_RFID 001A             __end_of_LCD_String 1148  
           waitForInput@i_1391 001C                        ?___wmul 000F                  ?_moveToBeacon 002F  
                      _CAP1CON 000F63                ?_stopAndDisplay 002F                     ??_ClearLCD 0013  
                      _RFIDbuf 0044                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 002C                 ?_scanForBeacon 002F           __size_of_setMotorPWM 0124  
         __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0035                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 002D                  ?_waitForInput 0001  
           __size_of_turnRight 0082                        _SendLCD 117E                        __Hparam 0000  
                      _SetLine 11AE                        __Lparam 0000                 ??_moveToBeacon 0039  
        processRFID@latestChar 0003                        ___awdiv 0CAC                __size_of___wmul 0026  
                 __psmallconst 0300               initPWM@PWMperiod 000F                        __pcinit 11DC  
                      __ramtop 0300                      ?_turnLeft 0026                        __ptext0 075E  
                      __ptext1 0AD2                        __ptext2 0B8C                        __ptext3 109C  
                      __ptext4 04EA                        __ptext5 11AE                        __ptext6 10DC  
                      __ptext7 127A                        __ptext8 122C                        __ptext9 094A  
            __end_of_init_RFID 1246               check_RFID@hexBuf 0019                        _initPWM 1246  
         waitForInput@raw_data 0018                   LCDout@number 0010              scanForBeacon@move 0035  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040              stop@initial_speed 002A  
                  ?_check_RFID 0015                 __pintcode_body 1148           end_of_initialization 11F4  
           setMotorPWM@PWMduty 0024                     ??_init_LCD 0013           __size_of_processRFID 004C  
               ??_waitForInput 0015                        int_func 1148                      _RFID_flag 009D  
                    _RCSTAbits 000FAB                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE          moveToBeacon@exit_flag 0037                     _robot_mode 0043  
                   _returnHome 0396                   _display_RFID 109C                     ??_turnLeft 002C  
                    _PORTDbits 000F83              __end_of_turnRight 0E34                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISDbits 000F95  
              ??_scanForBeacon 0037                  moveForward@mL 0026                  moveForward@mR 0028  
               __end_of_LCDout 0FB0                      _TXSTAbits 000FAC                     main@motorL 00A2  
                   main@motorR 00AB           __end_of_moveBackward 0EB6            __size_of_check_RFID 0150  
               __end_of___wmul 122C                    _BAUDCONbits 000FAA          classify_data@filtered 0013  
          start_initialization 11DC              __size_of_ClearLCD 001A           __end_of_moveToBeacon 0AD2  
        classify_data@raw_data 000F                       ??_LCDout 000F          moveBackward@max_power 002A  
 __end_of_InterruptHandlerHigh 117E          classify_data@smoothed 0040               ??_stopAndDisplay 0037  
                     ??___wmul 0013                scanForBeacon@mL 002F                scanForBeacon@mR 0031  
           turnRight@max_power 002A                    ?_returnHome 002F           __end_of_waitForInput 0B8C  
                  __pbssCOMRAM 0040                  ??_init_sensor 000F              turnLeft@max_power 002A  
                __pcstackBANK0 009E   __size_of_InterruptHandlerLow 008E              __size_of_init_LCD 00C8  
                     ?_SendLCD 0011                       ?_SetLine 0001                      __pintcode 0008  
                     ?___awdiv 0015         __size_of_classify_data 0044             check_RFID@checksum 002A  
                  __pintcodelo 0018                       _CAP1BUFH 000F69                       _CAP1BUFL 000F68  
                     ?_initPWM 000F                    __smallconst 0300                 __size_of_E_TOG 000E  
            __size_of_turnLeft 0082                  waitForInput@i 001A                      _init_RFID 122C  
          stopAndDisplay@speed 0033                  ??_setMotorPWM 001F                  ??_moveForward 002C  
                 ??_check_RFID 0017                 __size_of_setup 0036                check_RFID@byte1 0025  
              check_RFID@byte2 0026                check_RFID@byte3 0027                check_RFID@byte4 0028  
              check_RFID@byte5 0029            __end_of_init_sensor 128E                 ___wmul@product 0013  
          __size_of_returnHome 0154                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i1u136_20 0046                       i2u116_40 1040          __size_of_moveBackward 0082  
                  turnRight@mL 0026                    turnRight@mR 0028                       _PIR1bits 000F9E  
                     _RCONbits 000FD0           moveToBeacon@raw_data 003B             __end_of_check_RFID 063A  
            ___wmul@multiplier 000F                   setMotorPWM@m 001D                   moveForward@i 002D  
             main@moving_speed 00A0          __size_of_moveToBeacon 00C0           _InterruptHandlerHigh 0008  
                     _ClearLCD 1260                     ?_init_RFID 0001                      _turnRight 0DB2  
                ??_processRFID 0004                  _classify_data 1058         returnHome@search_speed 0035  
                  _INTCON2bits 000FF1                 moveBackward@mL 0026                 moveBackward@mR 0028  
                 _moveBackward 0E34            __end_of_setMotorPWM 075E            __end_of_moveForward 0F38  
                  check_RFID@i 002B                       __Hrparam 0000               __size_of_SendLCD 0030  
                     __Lrparam 0000               __size_of_SetLine 002E                   __Lsmallconst 0300  
        __size_of_waitForInput 00BA                   _moveToBeacon 0A12               __size_of___awdiv 0084  
        ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A                    _init_sensor 127A  
               ?_classify_data 000F              check_RFID@dataBuf 0015                     ?_turnRight 0026  
                     __ptext10 1246                       __ptext11 0C24                       __ptext20 1112  
                     __ptext12 0D30                       __ptext21 1260                       __ptext13 0396  
                     __ptext22 117E                       __ptext14 0DB2                       __ptext31 100C  
                     __ptext23 0F38                       __ptext15 0FB0                       __ptext24 128E  
                     __ptext16 0E34                       __ptext25 0860                       __ptext17 0A12  
                     __ptext26 063A                       __ptext18 0EB6                       __ptext27 1206  
                     __ptext19 1058                       __ptext28 0CAC          __end_of_scanForBeacon 0CAC  
                     _init_LCD 094A                  __size_of_main 0102                  __size_of_stop 005C  
                   turnLeft@mL 0026                     turnLeft@mR 0028            __end_of_processRFID 1058  
                 _waitForInput 0AD2             scanForBeacon@speed 0033                     turnRight@i 002D  
                     int$flags 0050                   ??_returnHome 0039            _InterruptHandlerLow 0018  
                   _LCD_String 1112                       _turnLeft 0D30          scanForBeacon@raw_data 0039  
                   _INTCONbits 000FF2                    ??_init_RFID 000F                    _setMotorPWM 063A  
                  _moveForward 0EB6                       intlevel1 0000                       intlevel2 0000  
         ?_InterruptHandlerLow 0001             __end_of_returnHome 04EA                      turnLeft@i 002D  
                   _OSCCONbits 000FD3     processRFID@position_in_buf 0042         ??_InterruptHandlerHigh 0005  
              ??_classify_data 0011               stopAndDisplay@mL 002F               stopAndDisplay@mR 0031  
         returnHome@move_speed 0033                    ??_turnRight 002C                    _processRFID 100C  
        ??_InterruptHandlerLow 0008                stopAndDisplay@i 0039                 returnHome@move 0037  
                 returnHome@mL 002F                   returnHome@mR 0031  
