

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 09 16:11:17 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4331 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     _PORTDbits	set	3971
    82  0000                     _CAP1BUFL	set	3944
    83  0000                     _CAP1BUFH	set	3945
    84  0000                     _CAP1CON	set	3939
    85  0000                     _ANSEL1	set	4025
    86  0000                     _ANSEL0	set	4024
    87  0000                     _T5CON	set	4023
    88  0000                     _IPR1bits	set	3999
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCSTAbits	set	4011
    91  0000                     _TXSTAbits	set	4012
    92  0000                     _BAUDCONbits	set	4010
    93  0000                     _SPBRGH	set	4016
    94  0000                     _SPBRG	set	4015
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISCbits	set	3988
    97  0000                     _LATDbits	set	3980
    98  0000                     _LATCbits	set	3979
    99  0000                     _LATAbits	set	3977
   100  0000                     _LATB	set	3978
   101  0000                     _PTPERH	set	3962
   102  0000                     _PTPERL	set	3963
   103  0000                     _PWMCON1	set	3950
   104  0000                     _PWMCON0	set	3951
   105  0000                     _PTCON1	set	3966
   106  0000                     _PTCON0	set	3967
   107  0000                     _RCREG	set	4014
   108  0000                     _PIR1bits	set	3998
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _T0CON	set	4053
   111  0000                     _TRISDbits	set	3989
   112  0000                     _TRISBbits	set	3987
   113  0000                     _RCONbits	set	4048
   114  0000                     _INTCONbits	set	4082
   115  0000                     _OSCCONbits	set	4051
   116  0000                     _OSCCON	set	4051
   117  0000                     _PDC1H	set	3958
   118  0000                     _PDC1L	set	3959
   119  0000                     _PDC0H	set	3960
   120  0000                     _PDC0L	set	3961
   121                           
   122                           	psect	smallconst
   123  000300                     __psmallconst:
   124                           	opt callstack 0
   125  000300  00                 	db	0
   126  000301                     STR_12:
   127  000301  53                 	db	83	;'S'
   128  000302  54                 	db	84	;'T'
   129  000303  41                 	db	65	;'A'
   130  000304  52                 	db	82	;'R'
   131  000305  54                 	db	84	;'T'
   132  000306  49                 	db	73	;'I'
   133  000307  4E                 	db	78	;'N'
   134  000308  47                 	db	71	;'G'
   135  000309  20                 	db	32
   136  00030A  53                 	db	83	;'S'
   137  00030B  45                 	db	69	;'E'
   138  00030C  41                 	db	65	;'A'
   139  00030D  52                 	db	82	;'R'
   140  00030E  43                 	db	67	;'C'
   141  00030F  48                 	db	72	;'H'
   142  000310  00                 	db	0
   143  000311                     STR_11:
   144  000311  54                 	db	84	;'T'
   145  000312  4F                 	db	79	;'O'
   146  000313  20                 	db	32
   147  000314  53                 	db	83	;'S'
   148  000315  54                 	db	84	;'T'
   149  000316  41                 	db	65	;'A'
   150  000317  52                 	db	82	;'R'
   151  000318  54                 	db	84	;'T'
   152  000319  20                 	db	32
   153  00031A  53                 	db	83	;'S'
   154  00031B  45                 	db	69	;'E'
   155  00031C  41                 	db	65	;'A'
   156  00031D  52                 	db	82	;'R'
   157  00031E  43                 	db	67	;'C'
   158  00031F  48                 	db	72	;'H'
   159  000320  00                 	db	0
   160  000321                     STR_7:
   161  000321  52                 	db	82	;'R'
   162  000322  45                 	db	69	;'E'
   163  000323  53                 	db	83	;'S'
   164  000324  45                 	db	69	;'E'
   165  000325  54                 	db	84	;'T'
   166  000326  54                 	db	84	;'T'
   167  000327  49                 	db	73	;'I'
   168  000328  4E                 	db	78	;'N'
   169  000329  47                 	db	71	;'G'
   170  00032A  20                 	db	32
   171  00032B  52                 	db	82	;'R'
   172  00032C  4F                 	db	79	;'O'
   173  00032D  42                 	db	66	;'B'
   174  00032E  4F                 	db	79	;'O'
   175  00032F  54                 	db	84	;'T'
   176  000330  00                 	db	0
   177  000331                     STR_3:
   178  000331  43                 	db	67	;'C'
   179  000332  48                 	db	72	;'H'
   180  000333  45                 	db	69	;'E'
   181  000334  43                 	db	67	;'C'
   182  000335  4B                 	db	75	;'K'
   183  000336  53                 	db	83	;'S'
   184  000337  55                 	db	85	;'U'
   185  000338  4D                 	db	77	;'M'
   186  000339  20                 	db	32
   187  00033A  46                 	db	70	;'F'
   188  00033B  41                 	db	65	;'A'
   189  00033C  49                 	db	73	;'I'
   190  00033D  4C                 	db	76	;'L'
   191  00033E  45                 	db	69	;'E'
   192  00033F  44                 	db	68	;'D'
   193  000340  00                 	db	0
   194  000341                     STR_2:
   195  000341  43                 	db	67	;'C'
   196  000342  48                 	db	72	;'H'
   197  000343  45                 	db	69	;'E'
   198  000344  43                 	db	67	;'C'
   199  000345  4B                 	db	75	;'K'
   200  000346  53                 	db	83	;'S'
   201  000347  55                 	db	85	;'U'
   202  000348  4D                 	db	77	;'M'
   203  000349  20                 	db	32
   204  00034A  50                 	db	80	;'P'
   205  00034B  41                 	db	65	;'A'
   206  00034C  53                 	db	83	;'S'
   207  00034D  53                 	db	83	;'S'
   208  00034E  45                 	db	69	;'E'
   209  00034F  44                 	db	68	;'D'
   210  000350  00                 	db	0
   211  000351                     STR_5:
   212  000351  4D                 	db	77	;'M'
   213  000352  4F                 	db	79	;'O'
   214  000353  56                 	db	86	;'V'
   215  000354  49                 	db	73	;'I'
   216  000355  4E                 	db	78	;'N'
   217  000356  47                 	db	71	;'G'
   218  000357  20                 	db	32
   219  000358  54                 	db	84	;'T'
   220  000359  4F                 	db	79	;'O'
   221  00035A  20                 	db	32
   222  00035B  42                 	db	66	;'B'
   223  00035C  4F                 	db	79	;'O'
   224  00035D  4D                 	db	77	;'M'
   225  00035E  42                 	db	66	;'B'
   226  00035F  00                 	db	0
   227  000360                     STR_6:
   228  000360  52                 	db	82	;'R'
   229  000361  45                 	db	69	;'E'
   230  000362  54                 	db	84	;'T'
   231  000363  55                 	db	85	;'U'
   232  000364  52                 	db	82	;'R'
   233  000365  4E                 	db	78	;'N'
   234  000366  49                 	db	73	;'I'
   235  000367  4E                 	db	78	;'N'
   236  000368  47                 	db	71	;'G'
   237  000369  20                 	db	32
   238  00036A  48                 	db	72	;'H'
   239  00036B  4F                 	db	79	;'O'
   240  00036C  4D                 	db	77	;'M'
   241  00036D  45                 	db	69	;'E'
   242  00036E  00                 	db	0
   243  00036F                     STR_1:
   244  00036F  43                 	db	67	;'C'
   245  000370  72                 	db	114	;'r'
   246  000371  69                 	db	105	;'i'
   247  000372  74                 	db	116	;'t'
   248  000373  69                 	db	105	;'i'
   249  000374  63                 	db	99	;'c'
   250  000375  61                 	db	97	;'a'
   251  000376  6C                 	db	108	;'l'
   252  000377  20                 	db	32
   253  000378  45                 	db	69	;'E'
   254  000379  72                 	db	114	;'r'
   255  00037A  72                 	db	114	;'r'
   256  00037B  6F                 	db	111	;'o'
   257  00037C  72                 	db	114	;'r'
   258  00037D  00                 	db	0
   259  00037E                     STR_10:
   260  00037E  50                 	db	80	;'P'
   261  00037F  52                 	db	82	;'R'
   262  000380  45                 	db	69	;'E'
   263  000381  53                 	db	83	;'S'
   264  000382  53                 	db	83	;'S'
   265  000383  20                 	db	32
   266  000384  42                 	db	66	;'B'
   267  000385  55                 	db	85	;'U'
   268  000386  54                 	db	84	;'T'
   269  000387  54                 	db	84	;'T'
   270  000388  4F                 	db	79	;'O'
   271  000389  4E                 	db	78	;'N'
   272  00038A  00                 	db	0
   273  00038B                     STR_4:
   274  00038B  53                 	db	83	;'S'
   275  00038C  45                 	db	69	;'E'
   276  00038D  41                 	db	65	;'A'
   277  00038E  52                 	db	82	;'R'
   278  00038F  43                 	db	67	;'C'
   279  000390  48                 	db	72	;'H'
   280  000391  49                 	db	73	;'I'
   281  000392  4E                 	db	78	;'N'
   282  000393  47                 	db	71	;'G'
   283  000394  00                 	db	0
   284  000395                     STR_8:
   285  000395  25                 	db	37
   286  000396  75                 	db	117	;'u'
   287  000397  00                 	db	0
   288  0000                     
   289                           ; #config settings
   290  000398  00                 	db	0	; dummy byte at the end
   291  0000                     
   292                           	psect	cinit
   293  000FB4                     __pcinit:
   294                           	opt callstack 0
   295  000FB4                     start_initialization:
   296                           	opt callstack 0
   297  000FB4                     __initialization:
   298                           	opt callstack 0
   299                           
   300                           ; Clear objects allocated to BANK0 (46 bytes)
   301  000FB4  EE00  F060         	lfsr	0,__pbssBANK0
   302  000FB8  0E2E               	movlw	46
   303  000FBA                     clear_0:
   304  000FBA  6AEE               	clrf	postinc0,c
   305  000FBC  06E8               	decf	wreg,f,c
   306  000FBE  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to COMRAM (17 bytes)
   309  000FC0  EE00  F037         	lfsr	0,__pbssCOMRAM
   310  000FC4  0E11               	movlw	17
   311  000FC6                     clear_1:
   312  000FC6  6AEE               	clrf	postinc0,c
   313  000FC8  06E8               	decf	wreg,f,c
   314  000FCA  E1FD               	bnz	clear_1
   315  000FCC                     end_of_initialization:
   316                           	opt callstack 0
   317  000FCC                     __end_of__initialization:
   318                           	opt callstack 0
   319  000FCC  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   320  000FCE  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   321  000FD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   322  000FD2  6EF8               	movwf	tblptru,c
   323  000FD4  0100               	movlb	0
   324  000FD6  EF07  F003         	goto	_main	;jump to C main() function
   325                           
   326                           	psect	bssCOMRAM
   327  000037                     __pbssCOMRAM:
   328                           	opt callstack 0
   329  000037                     	ds	2
   330  000039                     	ds	2
   331  00003B                     	ds	2
   332  00003D                     debug@smoothed_data:
   333                           	opt callstack 0
   334  00003D                     	ds	2
   335  00003F                     classify_data@smoothed:
   336                           	opt callstack 0
   337  00003F                     	ds	2
   338  000041                     processRFID@position_in_buf:
   339                           	opt callstack 0
   340  000041                     	ds	1
   341  000042                     _robot_mode:
   342                           	opt callstack 0
   343  000042                     	ds	1
   344  000043                     _movement_time:
   345                           	opt callstack 0
   346  000043                     	ds	4
   347  000047                     _RFID_flag:
   348                           	opt callstack 0
   349  000047                     	ds	1
   350                           
   351                           	psect	bssBANK0
   352  000060                     __pbssBANK0:
   353                           	opt callstack 0
   354  000060                     	ds	2
   355  000062                     	ds	32
   356  000082                     _RFIDbuf:
   357                           	opt callstack 0
   358  000082                     	ds	12
   359                           
   360                           	psect	cstackBANK0
   361  00008E                     __pcstackBANK0:
   362                           	opt callstack 0
   363  00008E                     main@searching_speed:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x0
   367  00008E                     	ds	2
   368  000090                     main@moving_speed:
   369                           	opt callstack 0
   370                           
   371                           ; 2 bytes @ 0x2
   372  000090                     	ds	2
   373  000092                     main@motorL:
   374                           	opt callstack 0
   375                           
   376                           ; 9 bytes @ 0x4
   377  000092                     	ds	9
   378  00009B                     main@motorR:
   379                           	opt callstack 0
   380                           
   381                           ; 9 bytes @ 0xD
   382  00009B                     	ds	9
   383                           
   384                           	psect	cstackCOMRAM
   385  000001                     __pcstackCOMRAM:
   386                           	opt callstack 0
   387  000001                     processRFID@RFIDbuf:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x0
   391  000001                     	ds	2
   392  000003                     processRFID@latestChar:
   393                           	opt callstack 0
   394                           
   395                           ; 1 bytes @ 0x2
   396  000003                     	ds	1
   397  000004                     processRFID@i:
   398                           	opt callstack 0
   399                           
   400                           ; 1 bytes @ 0x3
   401  000004                     	ds	1
   402  000005                     ??_InterruptHandlerHigh:
   403                           
   404                           ; 1 bytes @ 0x4
   405  000005                     	ds	3
   406  000008                     ??_InterruptHandlerLow:
   407                           
   408                           ; 1 bytes @ 0x7
   409  000008                     	ds	3
   410  00000B                     ??_LCDout:
   411  00000B                     ?___wmul:
   412                           	opt callstack 0
   413  00000B                     initPWM@PWMperiod:
   414                           	opt callstack 0
   415  00000B                     classify_data@raw_data:
   416                           	opt callstack 0
   417  00000B                     ___wmul@multiplier:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xA
   421  00000B                     	ds	1
   422  00000C                     LCDout@number:
   423                           	opt callstack 0
   424                           
   425                           ; 1 bytes @ 0xB
   426  00000C                     	ds	1
   427  00000D                     ??_classify_data:
   428  00000D                     SendLCD@type:
   429                           	opt callstack 0
   430  00000D                     ___wmul@multiplicand:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0xC
   434  00000D                     	ds	1
   435  00000E                     SendLCD@Byte:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0xD
   439  00000E                     	ds	1
   440  00000F                     ??_init_LCD:
   441  00000F                     ??_ClearLCD:
   442  00000F                     SetLine@line:
   443                           	opt callstack 0
   444  00000F                     LCD_String@string:
   445                           	opt callstack 0
   446  00000F                     classify_data@filtered:
   447                           	opt callstack 0
   448  00000F                     ___wmul@product:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0xE
   452  00000F                     	ds	1
   453  000010                     display_RFID@dataBuf:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0xF
   457  000010                     	ds	1
   458  000011                     ??_waitForInput:
   459  000011                     ?___awdiv:
   460                           	opt callstack 0
   461  000011                     check_RFID@dataBuf:
   462                           	opt callstack 0
   463  000011                     ___awdiv@dividend:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x10
   467  000011                     	ds	1
   468  000012                     display_RFID@i:
   469                           	opt callstack 0
   470                           
   471                           ; 2 bytes @ 0x11
   472  000012                     	ds	1
   473  000013                     ??_check_RFID:
   474  000013                     ___awdiv@divisor:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x12
   478  000013                     	ds	1
   479  000014                     waitForInput@raw_data:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x13
   483  000014                     	ds	1
   484  000015                     ___awdiv@counter:
   485                           	opt callstack 0
   486  000015                     check_RFID@hexBuf:
   487                           	opt callstack 0
   488                           
   489                           ; 12 bytes @ 0x14
   490  000015                     	ds	1
   491  000016                     ___awdiv@sign:
   492                           	opt callstack 0
   493  000016                     waitForInput@i:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x15
   497  000016                     	ds	1
   498  000017                     ___awdiv@quotient:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x16
   502  000017                     	ds	1
   503  000018                     waitForInput@i_1361:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x17
   507  000018                     	ds	1
   508  000019                     setMotorPWM@m:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x18
   512  000019                     	ds	2
   513  00001B                     ??_setMotorPWM:
   514                           
   515                           ; 1 bytes @ 0x1A
   516  00001B                     	ds	5
   517  000020                     setMotorPWM@PWMduty:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x1F
   521  000020                     	ds	1
   522  000021                     check_RFID@byte1:
   523                           	opt callstack 0
   524                           
   525                           ; 1 bytes @ 0x20
   526  000021                     	ds	1
   527  000022                     check_RFID@byte2:
   528                           	opt callstack 0
   529  000022                     stop@mL:
   530                           	opt callstack 0
   531  000022                     turn@mL:
   532                           	opt callstack 0
   533  000022                     moveForward@mL:
   534                           	opt callstack 0
   535  000022                     moveBackward@mL:
   536                           	opt callstack 0
   537  000022                     init_motor_struct@mL:
   538                           	opt callstack 0
   539                           
   540                           ; 2 bytes @ 0x21
   541  000022                     	ds	1
   542  000023                     check_RFID@byte3:
   543                           	opt callstack 0
   544                           
   545                           ; 1 bytes @ 0x22
   546  000023                     	ds	1
   547  000024                     check_RFID@byte4:
   548                           	opt callstack 0
   549  000024                     stop@mR:
   550                           	opt callstack 0
   551  000024                     turn@mR:
   552                           	opt callstack 0
   553  000024                     moveForward@mR:
   554                           	opt callstack 0
   555  000024                     moveBackward@mR:
   556                           	opt callstack 0
   557  000024                     init_motor_struct@mR:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x23
   561  000024                     	ds	1
   562  000025                     check_RFID@byte5:
   563                           	opt callstack 0
   564                           
   565                           ; 1 bytes @ 0x24
   566  000025                     	ds	1
   567  000026                     check_RFID@checksum:
   568                           	opt callstack 0
   569  000026                     stop@initial_speed:
   570                           	opt callstack 0
   571  000026                     turn@max_power:
   572                           	opt callstack 0
   573  000026                     moveForward@max_power:
   574                           	opt callstack 0
   575  000026                     moveBackward@max_power:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x25
   579  000026                     	ds	1
   580  000027                     check_RFID@i:
   581                           	opt callstack 0
   582                           
   583                           ; 2 bytes @ 0x26
   584  000027                     	ds	1
   585  000028                     ??_stop:
   586  000028                     ??_turn:
   587  000028                     ??_moveForward:
   588  000028                     ??_moveBackward:
   589                           
   590                           ; 1 bytes @ 0x27
   591  000028                     	ds	1
   592  000029                     stop@i:
   593                           	opt callstack 0
   594  000029                     turn@i:
   595                           	opt callstack 0
   596  000029                     moveForward@i:
   597                           	opt callstack 0
   598  000029                     moveBackward@i:
   599                           	opt callstack 0
   600                           
   601                           ; 2 bytes @ 0x28
   602  000029                     	ds	2
   603  00002B                     scanForBeacon@mL:
   604                           	opt callstack 0
   605  00002B                     moveToBeacon@mL:
   606                           	opt callstack 0
   607  00002B                     returnHome@mL:
   608                           	opt callstack 0
   609  00002B                     stopAndDisplay@mL:
   610                           	opt callstack 0
   611                           
   612                           ; 2 bytes @ 0x2A
   613  00002B                     	ds	2
   614  00002D                     scanForBeacon@mR:
   615                           	opt callstack 0
   616  00002D                     moveToBeacon@mR:
   617                           	opt callstack 0
   618  00002D                     returnHome@mR:
   619                           	opt callstack 0
   620  00002D                     stopAndDisplay@mR:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x2C
   624  00002D                     	ds	2
   625  00002F                     scanForBeacon@speed:
   626                           	opt callstack 0
   627  00002F                     moveToBeacon@speed:
   628                           	opt callstack 0
   629  00002F                     returnHome@speed:
   630                           	opt callstack 0
   631  00002F                     stopAndDisplay@speed:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0x2E
   635  00002F                     	ds	2
   636  000031                     ??_scanForBeacon:
   637  000031                     moveToBeacon@time:
   638                           	opt callstack 0
   639  000031                     returnHome@time:
   640                           	opt callstack 0
   641  000031                     stopAndDisplay@RFID_buffer:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0x30
   645  000031                     	ds	2
   646  000033                     ??_stopAndDisplay:
   647  000033                     scanForBeacon@raw_data:
   648                           	opt callstack 0
   649  000033                     moveToBeacon@exit_flag:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0x32
   653  000033                     	ds	2
   654  000035                     scanForBeacon@beacon_location:
   655                           	opt callstack 0
   656  000035                     stopAndDisplay@i:
   657                           	opt callstack 0
   658                           
   659                           ; 2 bytes @ 0x34
   660  000035                     	ds	2
   661  000037                     
   662                           ; 1 bytes @ 0x36
   663 ;;
   664 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   665 ;;
   666 ;; *************** function _main *****************
   667 ;; Defined at:
   668 ;;		line 115 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  motorR          9   13[BANK0 ] struct DC_motor
   673 ;;  motorL          9    4[BANK0 ] struct DC_motor
   674 ;;  moving_speed    2    2[BANK0 ] int 
   675 ;;  searching_sp    2    0[BANK0 ] int 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   685 ;;      Params:         0       0       0       0
   686 ;;      Locals:         0      22       0       0
   687 ;;      Temps:          0       0       0       0
   688 ;;      Totals:         0      22       0       0
   689 ;;Total ram usage:       22 bytes
   690 ;; Hardware stack levels required when called:    9
   691 ;; This function calls:
   692 ;;		_LCD_String
   693 ;;		_init_motor_struct
   694 ;;		_moveToBeacon
   695 ;;		_returnHome
   696 ;;		_scanForBeacon
   697 ;;		_setup
   698 ;;		_stopAndDisplay
   699 ;;		_waitForInput
   700 ;; This function is called by:
   701 ;;		Startup code after reset
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text0
   706  00060E                     __ptext0:
   707                           	opt callstack 0
   708  00060E                     _main:
   709                           	opt callstack 22
   710                           
   711                           ;main.c: 118:   setup();
   712                           
   713                           ;incstack = 0
   714  00060E  EC76  F007         	call	_setup	;wreg free
   715                           
   716                           ;main.c: 121:   struct DC_motor motorL, motorR;;main.c: 122:   init_motor_struct(&motorL
      +                          , &motorR);
   717  000612  0E92               	movlw	low main@motorL
   718  000614  6E22               	movwf	init_motor_struct@mL,c
   719  000616  0E00               	movlw	high main@motorL
   720  000618  6E23               	movwf	init_motor_struct@mL+1,c
   721  00061A  0E9B               	movlw	low main@motorR
   722  00061C  6E24               	movwf	init_motor_struct@mR,c
   723  00061E  0E00               	movlw	high main@motorR
   724  000620  6E25               	movwf	init_motor_struct@mR+1,c
   725  000622  EC80  F003         	call	_init_motor_struct	;wreg free
   726                           
   727                           ;main.c: 125:   int searching_speed = 65;
   728  000626  0E00               	movlw	0
   729  000628  0100               	movlb	0	; () banked
   730  00062A  6F8F               	movwf	(main@searching_speed+1)& (0+255),b
   731  00062C  0E41               	movlw	65
   732  00062E  6F8E               	movwf	main@searching_speed& (0+255),b
   733                           
   734                           ; BSR set to: 0
   735                           ;main.c: 126:   int moving_speed = 95;
   736  000630  0E00               	movlw	0
   737  000632  6F91               	movwf	(main@moving_speed+1)& (0+255),b
   738  000634  0E5F               	movlw	95
   739  000636  6F90               	movwf	main@moving_speed& (0+255),b
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 128:   waitForInput();
   743  000638  EC59  F004         	call	_waitForInput	;wreg free
   744  00063C                     l2599:
   745                           
   746                           ;main.c: 132:   {;main.c: 134:       if(robot_mode == 0)
   747  00063C  5042               	movf	_robot_mode,w,c	;volatile
   748  00063E  A4D8               	btfss	status,2,c
   749  000640  D00F               	goto	l2603
   750                           
   751                           ;main.c: 135:       {;main.c: 136:           robot_mode = scanForBeacon(&motorL, &motorR
      +                          , searching_speed);
   752  000642  0E92               	movlw	low main@motorL
   753  000644  6E2B               	movwf	scanForBeacon@mL,c
   754  000646  0E00               	movlw	high main@motorL
   755  000648  6E2C               	movwf	scanForBeacon@mL+1,c
   756  00064A  0E9B               	movlw	low main@motorR
   757  00064C  6E2D               	movwf	scanForBeacon@mR,c
   758  00064E  0E00               	movlw	high main@motorR
   759  000650  6E2E               	movwf	scanForBeacon@mR+1,c
   760  000652  C08E  F02F         	movff	main@searching_speed,scanForBeacon@speed
   761  000656  C08F  F030         	movff	main@searching_speed+1,scanForBeacon@speed+1
   762  00065A  ECA0  F006         	call	_scanForBeacon	;wreg free
   763  00065E  D047               	goto	L3
   764  000660                     l2603:
   765  000660  0442               	decf	_robot_mode,w,c	;volatile
   766  000662  A4D8               	btfss	status,2,c
   767  000664  D017               	goto	l2607
   768                           
   769                           ;main.c: 142:       {;main.c: 143:           robot_mode = moveToBeacon(&motorL, &motorR,
      +                           moving_speed,
   770  000666  0E92               	movlw	low main@motorL
   771  000668  6E2B               	movwf	moveToBeacon@mL,c
   772  00066A  0E00               	movlw	high main@motorL
   773  00066C  6E2C               	movwf	moveToBeacon@mL+1,c
   774  00066E  0E9B               	movlw	low main@motorR
   775  000670  6E2D               	movwf	moveToBeacon@mR,c
   776  000672  0E00               	movlw	high main@motorR
   777  000674  6E2E               	movwf	moveToBeacon@mR+1,c
   778  000676  C090  F02F         	movff	main@moving_speed,moveToBeacon@speed
   779  00067A  C091  F030         	movff	main@moving_speed+1,moveToBeacon@speed+1
   780  00067E  0E43               	movlw	low _movement_time
   781  000680  6E31               	movwf	moveToBeacon@time,c
   782  000682  0E00               	movlw	high _movement_time
   783  000684  6E32               	movwf	moveToBeacon@time+1,c
   784  000686  0E47               	movlw	low _RFID_flag
   785  000688  6E33               	movwf	moveToBeacon@exit_flag,c
   786  00068A  0E00               	movlw	high _RFID_flag
   787  00068C  6E34               	movwf	moveToBeacon@exit_flag+1,c
   788  00068E  EC57  F007         	call	_moveToBeacon	;wreg free
   789  000692  D02D               	goto	L3
   790  000694                     l2607:
   791  000694  0E02               	movlw	2
   792  000696  1842               	xorwf	_robot_mode,w,c	;volatile
   793  000698  A4D8               	btfss	status,2,c
   794  00069A  D013               	goto	l2611
   795                           
   796                           ;main.c: 149:       {;main.c: 150:           robot_mode = returnHome(&motorL, &motorR, m
      +                          oving_speed,
   797  00069C  0E92               	movlw	low main@motorL
   798  00069E  6E2B               	movwf	returnHome@mL,c
   799  0006A0  0E00               	movlw	high main@motorL
   800  0006A2  6E2C               	movwf	returnHome@mL+1,c
   801  0006A4  0E9B               	movlw	low main@motorR
   802  0006A6  6E2D               	movwf	returnHome@mR,c
   803  0006A8  0E00               	movlw	high main@motorR
   804  0006AA  6E2E               	movwf	returnHome@mR+1,c
   805  0006AC  C090  F02F         	movff	main@moving_speed,returnHome@speed
   806  0006B0  C091  F030         	movff	main@moving_speed+1,returnHome@speed+1
   807  0006B4  0E43               	movlw	low _movement_time
   808  0006B6  6E31               	movwf	returnHome@time,c
   809  0006B8  0E00               	movlw	high _movement_time
   810  0006BA  6E32               	movwf	returnHome@time+1,c
   811  0006BC  EC15  F007         	call	_returnHome	;wreg free
   812  0006C0  D016               	goto	L3
   813  0006C2                     l2611:
   814  0006C2  0E03               	movlw	3
   815  0006C4  1842               	xorwf	_robot_mode,w,c	;volatile
   816  0006C6  A4D8               	btfss	status,2,c
   817  0006C8  D014               	goto	l2615
   818                           
   819                           ;main.c: 156:       {;main.c: 157:           robot_mode = stopAndDisplay(&motorL, &motor
      +                          R, moving_speed,RFIDbuf);
   820  0006CA  0E92               	movlw	low main@motorL
   821  0006CC  6E2B               	movwf	stopAndDisplay@mL,c
   822  0006CE  0E00               	movlw	high main@motorL
   823  0006D0  6E2C               	movwf	stopAndDisplay@mL+1,c
   824  0006D2  0E9B               	movlw	low main@motorR
   825  0006D4  6E2D               	movwf	stopAndDisplay@mR,c
   826  0006D6  0E00               	movlw	high main@motorR
   827  0006D8  6E2E               	movwf	stopAndDisplay@mR+1,c
   828  0006DA  C090  F02F         	movff	main@moving_speed,stopAndDisplay@speed
   829  0006DE  C091  F030         	movff	main@moving_speed+1,stopAndDisplay@speed+1
   830  0006E2  0E82               	movlw	low _RFIDbuf
   831  0006E4  6E31               	movwf	stopAndDisplay@RFID_buffer,c
   832  0006E6  0E00               	movlw	high _RFIDbuf
   833  0006E8  6E32               	movwf	stopAndDisplay@RFID_buffer+1,c
   834  0006EA  ECB6  F004         	call	_stopAndDisplay	;wreg free
   835  0006EE                     L3:
   836  0006EE  6E42               	movwf	_robot_mode,c	;volatile
   837                           
   838                           ;main.c: 158:       }
   839  0006F0  D7A5               	goto	l2599
   840  0006F2                     l2615:
   841                           
   842                           ;main.c: 162:       {;main.c: 163:           LCD_String("Critical Error");
   843  0006F2  0E6F               	movlw	low STR_1
   844  0006F4  6E0F               	movwf	LCD_String@string,c
   845  0006F6  0E03               	movlw	high STR_1
   846  0006F8  6E10               	movwf	LCD_String@string+1,c
   847  0006FA  EC43  F006         	call	_LCD_String	;wreg free
   848  0006FE  D79E               	goto	l2599
   849  000700                     __end_of_main:
   850                           	opt callstack 0
   851                           
   852 ;; *************** function _waitForInput *****************
   853 ;; Defined at:
   854 ;;		line 143 in file "subroutines.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  raw_data        2   19[COMRAM] unsigned int 
   859 ;;  throwaway       1    0        unsigned char 
   860 ;;  i               2   23[COMRAM] int 
   861 ;;  i               2   21[COMRAM] int 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   871 ;;      Params:         0       0       0       0
   872 ;;      Locals:         7       0       0       0
   873 ;;      Temps:          2       0       0       0
   874 ;;      Totals:         9       0       0       0
   875 ;;Total ram usage:        9 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    7
   878 ;; This function calls:
   879 ;;		_ClearLCD
   880 ;;		_LCD_String
   881 ;;		_SetLine
   882 ;;		_classify_data
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text1
   889  0008B2                     __ptext1:
   890                           	opt callstack 0
   891  0008B2                     _waitForInput:
   892                           	opt callstack 23
   893                           
   894                           ;subroutines.c: 146:     for(int i =0;i<500;i++)
   895                           
   896                           ;incstack = 0
   897  0008B2  0E00               	movlw	0
   898  0008B4  6E17               	movwf	waitForInput@i+1,c
   899  0008B6  0E00               	movlw	0
   900  0008B8  6E16               	movwf	waitForInput@i,c
   901  0008BA                     l2487:
   902                           
   903                           ;subroutines.c: 147:     {;subroutines.c: 148:         unsigned int raw_data = (unsigned
      +                           int)((CAP1BUFH << 8) | CAP1BUFL);
   904  0008BA  5068               	movf	3944,w,c	;volatile
   905  0008BC  CF69 F011          	movff	3945,??_waitForInput	;volatile
   906  0008C0  6A12               	clrf	(??_waitForInput+1)& (0+255),c
   907  0008C2  C011  F012         	movff	??_waitForInput,??_waitForInput+1
   908  0008C6  6A11               	clrf	??_waitForInput,c
   909  0008C8  1011               	iorwf	??_waitForInput,w,c
   910  0008CA  6E14               	movwf	waitForInput@raw_data,c
   911  0008CC  5012               	movf	??_waitForInput+1,w,c
   912  0008CE  6E15               	movwf	waitForInput@raw_data+1,c
   913  0008D0  C014  F00B         	movff	waitForInput@raw_data,classify_data@raw_data
   914  0008D4  C015  F00C         	movff	waitForInput@raw_data+1,classify_data@raw_data+1
   915  0008D8  ECF3  F006         	call	_classify_data	;wreg free
   916                           
   917                           ;subroutines.c: 150:     }
   918  0008DC  4A16               	infsnz	waitForInput@i,f,c
   919  0008DE  2A17               	incf	waitForInput@i+1,f,c
   920  0008E0  BE17               	btfsc	waitForInput@i+1,7,c
   921  0008E2  D7EB               	goto	l2487
   922  0008E4  0EF4               	movlw	244
   923  0008E6  5C16               	subwf	waitForInput@i,w,c
   924  0008E8  0E01               	movlw	1
   925  0008EA  5817               	subwfb	waitForInput@i+1,w,c
   926  0008EC  A0D8               	btfss	status,0,c
   927  0008EE  D7E5               	goto	l2487
   928                           
   929                           ;subroutines.c: 153:     ClearLCD();
   930  0008F0  EC1A  F008         	call	_ClearLCD	;wreg free
   931                           
   932                           ;subroutines.c: 154:     SetLine(1);
   933  0008F4  0E01               	movlw	1
   934  0008F6  ECC3  F007         	call	_SetLine
   935                           
   936                           ;subroutines.c: 155:     LCD_String("PRESS BUTTON");
   937  0008FA  0E7E               	movlw	low STR_10
   938  0008FC  6E0F               	movwf	LCD_String@string,c
   939  0008FE  0E03               	movlw	high STR_10
   940  000900  6E10               	movwf	LCD_String@string+1,c
   941  000902  EC43  F006         	call	_LCD_String	;wreg free
   942                           
   943                           ;subroutines.c: 156:     SetLine(2);
   944  000906  0E02               	movlw	2
   945  000908  ECC3  F007         	call	_SetLine
   946                           
   947                           ;subroutines.c: 157:     LCD_String("TO START SEARCH");
   948  00090C  0E11               	movlw	low STR_11
   949  00090E  6E0F               	movwf	LCD_String@string,c
   950  000910  0E03               	movlw	high STR_11
   951  000912  6E10               	movwf	LCD_String@string+1,c
   952  000914  EC43  F006         	call	_LCD_String	;wreg free
   953  000918                     l341:
   954  000918  A483               	btfss	3971,2,c	;volatile
   955  00091A  D7FE               	goto	l341
   956                           
   957                           ;subroutines.c: 163:     ClearLCD();
   958  00091C  EC1A  F008         	call	_ClearLCD	;wreg free
   959                           
   960                           ;subroutines.c: 164:     SetLine(1);
   961  000920  0E01               	movlw	1
   962  000922  ECC3  F007         	call	_SetLine
   963                           
   964                           ;subroutines.c: 165:     LCD_String("STARTING SEARCH");
   965  000926  0E01               	movlw	low STR_12
   966  000928  6E0F               	movwf	LCD_String@string,c
   967  00092A  0E03               	movlw	high STR_12
   968  00092C  6E10               	movwf	LCD_String@string+1,c
   969  00092E  EC43  F006         	call	_LCD_String	;wreg free
   970                           
   971                           ;subroutines.c: 166:     for(int i=0; i<10;i++)
   972  000932  0E00               	movlw	0
   973  000934  6E19               	movwf	waitForInput@i_1361+1,c
   974  000936  0E00               	movlw	0
   975  000938  6E18               	movwf	waitForInput@i_1361,c
   976  00093A                     l2511:
   977                           
   978                           ;subroutines.c: 167:     {;subroutines.c: 168:         _delay((unsigned long)((100)*(800
      +                          0000/4000.0)));
   979  00093A  0E02               	movlw	2
   980  00093C  6E12               	movwf	(??_waitForInput+1)& (0+255),c
   981  00093E  0E04               	movlw	4
   982  000940  6E11               	movwf	??_waitForInput& (0+255),c
   983  000942  0EBA               	movlw	186
   984  000944                     u1837:
   985  000944  2EE8               	decfsz	wreg,f,c
   986  000946  D7FE               	bra	u1837
   987  000948  2E11               	decfsz	??_waitForInput& (0+255),f,c
   988  00094A  D7FC               	bra	u1837
   989  00094C  2E12               	decfsz	(??_waitForInput+1)& (0+255),f,c
   990  00094E  D7FA               	bra	u1837
   991  000950  D000               	nop2	
   992                           
   993                           ;subroutines.c: 169:     }
   994  000952  4A18               	infsnz	waitForInput@i_1361,f,c
   995  000954  2A19               	incf	waitForInput@i_1361+1,f,c
   996  000956  BE19               	btfsc	waitForInput@i_1361+1,7,c
   997  000958  D7F0               	goto	l2511
   998  00095A  5019               	movf	waitForInput@i_1361+1,w,c
   999  00095C  E104               	bnz	u1720
  1000  00095E  0E0A               	movlw	10
  1001  000960  5C18               	subwf	waitForInput@i_1361,w,c
  1002  000962  A0D8               	btfss	status,0,c
  1003  000964  D7EA               	goto	l2511
  1004  000966                     u1720:
  1005                           
  1006                           ;subroutines.c: 170:     ClearLCD();
  1007  000966  EC1A  F008         	call	_ClearLCD	;wreg free
  1008  00096A  0012               	return		;funcret
  1009  00096C                     __end_of_waitForInput:
  1010                           	opt callstack 0
  1011                           
  1012 ;; *************** function _stopAndDisplay *****************
  1013 ;; Defined at:
  1014 ;;		line 81 in file "subroutines.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  1017 ;;		 -> main@motorL(9), 
  1018 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  1019 ;;		 -> main@motorR(9), 
  1020 ;;  speed           2   46[COMRAM] int 
  1021 ;;  RFID_buffer     2   48[COMRAM] PTR volatile unsigned ch
  1022 ;;		 -> RFIDbuf(12), 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  i               2   52[COMRAM] int 
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      unsigned char 
  1027 ;; Registers used:
  1028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1034 ;;      Params:         8       0       0       0
  1035 ;;      Locals:         2       0       0       0
  1036 ;;      Temps:          2       0       0       0
  1037 ;;      Totals:        12       0       0       0
  1038 ;;Total ram usage:       12 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    8
  1041 ;; This function calls:
  1042 ;;		_ClearLCD
  1043 ;;		_LCD_String
  1044 ;;		_check_RFID
  1045 ;;		_display_RFID
  1046 ;;		_stop
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text2
  1053  00096C                     __ptext2:
  1054                           	opt callstack 0
  1055  00096C                     _stopAndDisplay:
  1056                           	opt callstack 22
  1057                           
  1058                           ;subroutines.c: 81: volatile char stopAndDisplay(struct DC_motor *mL,struct DC_motor *mR
      +                          , int speed,;subroutines.c: 82:                                 volatile char RFID_buffe
      +                          r[]);subroutines.c: 83: {;subroutines.c: 84:     stop(mL, mR,speed);
  1059                           
  1060                           ;incstack = 0
  1061  00096C  C02B  F022         	movff	stopAndDisplay@mL,stop@mL
  1062  000970  C02C  F023         	movff	stopAndDisplay@mL+1,stop@mL+1
  1063  000974  C02D  F024         	movff	stopAndDisplay@mR,stop@mR
  1064  000978  C02E  F025         	movff	stopAndDisplay@mR+1,stop@mR+1
  1065  00097C  C02F  F026         	movff	stopAndDisplay@speed,stop@initial_speed
  1066  000980  C030  F027         	movff	stopAndDisplay@speed+1,stop@initial_speed+1
  1067  000984  EC72  F006         	call	_stop	;wreg free
  1068                           
  1069                           ;subroutines.c: 86:     display_RFID(RFID_buffer);
  1070  000988  C031  F010         	movff	stopAndDisplay@RFID_buffer,display_RFID@dataBuf
  1071  00098C  C032  F011         	movff	stopAndDisplay@RFID_buffer+1,display_RFID@dataBuf+1
  1072  000990  EC37  F007         	call	_display_RFID	;wreg free
  1073                           
  1074                           ;subroutines.c: 87:     check_RFID(RFID_buffer);
  1075  000994  C031  F011         	movff	stopAndDisplay@RFID_buffer,check_RFID@dataBuf
  1076  000998  C032  F012         	movff	stopAndDisplay@RFID_buffer+1,check_RFID@dataBuf+1
  1077  00099C  ECCD  F001         	call	_check_RFID	;wreg free
  1078                           
  1079                           ;subroutines.c: 89:     if(RFID_buffer[0] != 0)
  1080  0009A0  C031  FFD9         	movff	stopAndDisplay@RFID_buffer,fsr2l
  1081  0009A4  C032  FFDA         	movff	stopAndDisplay@RFID_buffer+1,fsr2h
  1082  0009A8  50DF               	movf	indf2,w,c
  1083  0009AA  A4D8               	btfss	status,2,c
  1084  0009AC  D026               	goto	l2583
  1085  0009AE  D028               	goto	l2585
  1086  0009B0                     l2567:
  1087                           
  1088                           ;subroutines.c: 94:             {;subroutines.c: 95:                 ClearLCD();
  1089  0009B0  EC1A  F008         	call	_ClearLCD	;wreg free
  1090                           
  1091                           ;subroutines.c: 96:                 LCD_String("RESETTING ROBOT");
  1092  0009B4  0E21               	movlw	low STR_7
  1093  0009B6  6E0F               	movwf	LCD_String@string,c
  1094  0009B8  0E03               	movlw	high STR_7
  1095  0009BA  6E10               	movwf	LCD_String@string+1,c
  1096  0009BC  EC43  F006         	call	_LCD_String	;wreg free
  1097                           
  1098                           ;subroutines.c: 97:                 for(int i=0; i<10;i++)
  1099  0009C0  0E00               	movlw	0
  1100  0009C2  6E36               	movwf	stopAndDisplay@i+1,c
  1101  0009C4  0E00               	movlw	0
  1102  0009C6  6E35               	movwf	stopAndDisplay@i,c
  1103  0009C8                     l2577:
  1104                           
  1105                           ;subroutines.c: 98:                 {;subroutines.c: 99:                     _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
  1106  0009C8  0E02               	movlw	2
  1107  0009CA  6E34               	movwf	(??_stopAndDisplay+1)& (0+255),c
  1108  0009CC  0E04               	movlw	4
  1109  0009CE  6E33               	movwf	??_stopAndDisplay& (0+255),c
  1110  0009D0  0EBA               	movlw	186
  1111  0009D2                     u1847:
  1112  0009D2  2EE8               	decfsz	wreg,f,c
  1113  0009D4  D7FE               	bra	u1847
  1114  0009D6  2E33               	decfsz	??_stopAndDisplay& (0+255),f,c
  1115  0009D8  D7FC               	bra	u1847
  1116  0009DA  2E34               	decfsz	(??_stopAndDisplay+1)& (0+255),f,c
  1117  0009DC  D7FA               	bra	u1847
  1118  0009DE  D000               	nop2	
  1119                           
  1120                           ;subroutines.c: 100:                 }
  1121  0009E0  4A35               	infsnz	stopAndDisplay@i,f,c
  1122  0009E2  2A36               	incf	stopAndDisplay@i+1,f,c
  1123  0009E4  BE36               	btfsc	stopAndDisplay@i+1,7,c
  1124  0009E6  D7F0               	goto	l2577
  1125  0009E8  5036               	movf	stopAndDisplay@i+1,w,c
  1126  0009EA  E104               	bnz	u1770
  1127  0009EC  0E0A               	movlw	10
  1128  0009EE  5C35               	subwf	stopAndDisplay@i,w,c
  1129  0009F0  A0D8               	btfss	status,0,c
  1130  0009F2  D7EA               	goto	l2577
  1131  0009F4                     u1770:
  1132                           
  1133                           ;subroutines.c: 101:                 ClearLCD();
  1134  0009F4  EC1A  F008         	call	_ClearLCD	;wreg free
  1135  0009F8  00FF               	reset		;# 
  1136  0009FA                     l2583:
  1137                           
  1138                           ;subroutines.c: 93:             while(PORTDbits.RD2 == 1)
  1139  0009FA  A483               	btfss	3971,2,c	;volatile
  1140  0009FC  D7FE               	goto	l2583
  1141  0009FE  D7D8               	goto	l2567
  1142  000A00                     l2585:
  1143                           
  1144                           ;subroutines.c: 107:     {;subroutines.c: 108:         return 0;
  1145  000A00  0E00               	movlw	0
  1146  000A02  0012               	return		;funcret
  1147  000A04                     __end_of_stopAndDisplay:
  1148                           	opt callstack 0
  1149                           
  1150 ;; *************** function _stop *****************
  1151 ;; Defined at:
  1152 ;;		line 40 in file "dc_motor.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  1155 ;;		 -> main@motorL(9), 
  1156 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  1157 ;;		 -> main@motorR(9), 
  1158 ;;  initial_spee    2   37[COMRAM] int 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  i               2   40[COMRAM] int 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1170 ;;      Params:         6       0       0       0
  1171 ;;      Locals:         2       0       0       0
  1172 ;;      Temps:          1       0       0       0
  1173 ;;      Totals:         9       0       0       0
  1174 ;;Total ram usage:        9 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    5
  1177 ;; This function calls:
  1178 ;;		_setMotorPWM
  1179 ;; This function is called by:
  1180 ;;		_stopAndDisplay
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           	psect	text3
  1185  000CE4                     __ptext3:
  1186                           	opt callstack 0
  1187  000CE4                     _stop:
  1188                           	opt callstack 24
  1189                           
  1190                           ;dc_motor.c: 40: void stop(struct DC_motor *mL, struct DC_motor *mR, int initial_speed);
      +                          dc_motor.c: 41: {;dc_motor.c: 42:  for(int i = initial_speed; i > 0; i--)
  1191                           
  1192                           ;incstack = 0
  1193  000CE4  C026  F029         	movff	stop@initial_speed,stop@i
  1194  000CE8  C027  F02A         	movff	stop@initial_speed+1,stop@i+1
  1195  000CEC                     l2321:
  1196  000CEC  BE2A               	btfsc	stop@i+1,7,c
  1197  000CEE  0012               	return	
  1198  000CF0  502A               	movf	stop@i+1,w,c
  1199  000CF2  E103               	bnz	l2325
  1200  000CF4  0429               	decf	stop@i,w,c
  1201  000CF6  A0D8               	btfss	status,0,c
  1202  000CF8  0012               	return	
  1203  000CFA                     l2325:
  1204                           
  1205                           ;dc_motor.c: 43:     {;dc_motor.c: 44:         mL->power = i;
  1206  000CFA  C022  FFD9         	movff	stop@mL,fsr2l
  1207  000CFE  C023  FFDA         	movff	stop@mL+1,fsr2h
  1208  000D02  C029  FFDF         	movff	stop@i,indf2
  1209                           
  1210                           ;dc_motor.c: 45:         mR->power = i;
  1211  000D06  C024  FFD9         	movff	stop@mR,fsr2l
  1212  000D0A  C025  FFDA         	movff	stop@mR+1,fsr2h
  1213  000D0E  C029  FFDF         	movff	stop@i,indf2
  1214                           
  1215                           ;dc_motor.c: 46:         setMotorPWM(mL);
  1216  000D12  C022  F019         	movff	stop@mL,setMotorPWM@m
  1217  000D16  C023  F01A         	movff	stop@mL+1,setMotorPWM@m+1
  1218  000D1A  EC75  F002         	call	_setMotorPWM	;wreg free
  1219                           
  1220                           ;dc_motor.c: 47:         setMotorPWM(mR);
  1221  000D1E  C024  F019         	movff	stop@mR,setMotorPWM@m
  1222  000D22  C025  F01A         	movff	stop@mR+1,setMotorPWM@m+1
  1223  000D26  EC75  F002         	call	_setMotorPWM	;wreg free
  1224                           
  1225                           ;dc_motor.c: 48:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1226  000D2A  0E03               	movlw	3
  1227  000D2C  6E28               	movwf	??_stop& (0+255),c
  1228  000D2E  0E98               	movlw	152
  1229  000D30                     u1857:
  1230  000D30  2EE8               	decfsz	wreg,f,c
  1231  000D32  D7FE               	bra	u1857
  1232  000D34  2E28               	decfsz	??_stop& (0+255),f,c
  1233  000D36  D7FC               	bra	u1857
  1234                           
  1235                           ;dc_motor.c: 49:     }
  1236  000D38  0629               	decf	stop@i,f,c
  1237  000D3A  A0D8               	btfss	status,0,c
  1238  000D3C  062A               	decf	stop@i+1,f,c
  1239  000D3E  D7D6               	goto	l2321
  1240  000D40                     __end_of_stop:
  1241                           	opt callstack 0
  1242                           
  1243 ;; *************** function _display_RFID *****************
  1244 ;; Defined at:
  1245 ;;		line 107 in file "RFID.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  dataBuf         2   15[COMRAM] PTR volatile unsigned ch
  1248 ;;		 -> RFIDbuf(12), 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  i               2   17[COMRAM] int 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1260 ;;      Params:         2       0       0       0
  1261 ;;      Locals:         2       0       0       0
  1262 ;;      Temps:          0       0       0       0
  1263 ;;      Totals:         4       0       0       0
  1264 ;;Total ram usage:        4 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    7
  1267 ;; This function calls:
  1268 ;;		_ClearLCD
  1269 ;;		_SendLCD
  1270 ;;		_SetLine
  1271 ;; This function is called by:
  1272 ;;		_stopAndDisplay
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text4
  1277  000E6E                     __ptext4:
  1278                           	opt callstack 0
  1279  000E6E                     _display_RFID:
  1280                           	opt callstack 22
  1281                           
  1282                           ;RFID.c: 107: void display_RFID(volatile char dataBuf[]);RFID.c: 108: {;RFID.c: 109:    
      +                           ClearLCD();
  1283                           
  1284                           ;incstack = 0
  1285  000E6E  EC1A  F008         	call	_ClearLCD	;wreg free
  1286                           
  1287                           ;RFID.c: 110:     SetLine(1);
  1288  000E72  0E01               	movlw	1
  1289  000E74  ECC3  F007         	call	_SetLine
  1290                           
  1291                           ;RFID.c: 111:     for(int i=0;i<10;i++)
  1292  000E78  0E00               	movlw	0
  1293  000E7A  6E13               	movwf	display_RFID@i+1,c
  1294  000E7C  0E00               	movlw	0
  1295  000E7E  6E12               	movwf	display_RFID@i,c
  1296  000E80                     l2425:
  1297                           
  1298                           ;RFID.c: 112:     {;RFID.c: 113:         SendLCD(dataBuf[i],1);
  1299  000E80  0E01               	movlw	1
  1300  000E82  6E0D               	movwf	SendLCD@type,c
  1301  000E84  5012               	movf	display_RFID@i,w,c
  1302  000E86  2410               	addwf	display_RFID@dataBuf,w,c
  1303  000E88  6ED9               	movwf	fsr2l,c
  1304  000E8A  5013               	movf	display_RFID@i+1,w,c
  1305  000E8C  2011               	addwfc	display_RFID@dataBuf+1,w,c
  1306  000E8E  6EDA               	movwf	fsr2h,c
  1307  000E90  50DF               	movf	indf2,w,c
  1308  000E92  ECAB  F007         	call	_SendLCD
  1309                           
  1310                           ;RFID.c: 114:     }
  1311  000E96  4A12               	infsnz	display_RFID@i,f,c
  1312  000E98  2A13               	incf	display_RFID@i+1,f,c
  1313  000E9A  BE13               	btfsc	display_RFID@i+1,7,c
  1314  000E9C  D7F1               	goto	l2425
  1315  000E9E  5013               	movf	display_RFID@i+1,w,c
  1316  000EA0  E105               	bnz	u1670
  1317  000EA2  0E0A               	movlw	10
  1318  000EA4  5C12               	subwf	display_RFID@i,w,c
  1319  000EA6  B0D8               	btfsc	status,0,c
  1320  000EA8  0012               	return	
  1321  000EAA  D7EA               	goto	l2425
  1322  000EAC                     u1670:
  1323  000EAC  0012               	return		;funcret
  1324  000EAE                     __end_of_display_RFID:
  1325                           	opt callstack 0
  1326                           
  1327 ;; *************** function _check_RFID *****************
  1328 ;; Defined at:
  1329 ;;		line 70 in file "RFID.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;  dataBuf         2   16[COMRAM] PTR volatile unsigned ch
  1332 ;;		 -> RFIDbuf(12), 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  i               2   38[COMRAM] int 
  1335 ;;  hexBuf         12   20[COMRAM] unsigned char [12]
  1336 ;;  checksum        1   37[COMRAM] unsigned char 
  1337 ;;  byte5           1   36[COMRAM] unsigned char 
  1338 ;;  byte4           1   35[COMRAM] unsigned char 
  1339 ;;  byte3           1   34[COMRAM] unsigned char 
  1340 ;;  byte2           1   33[COMRAM] unsigned char 
  1341 ;;  byte1           1   32[COMRAM] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1351 ;;      Params:         2       0       0       0
  1352 ;;      Locals:        20       0       0       0
  1353 ;;      Temps:          2       0       0       0
  1354 ;;      Totals:        24       0       0       0
  1355 ;;Total ram usage:       24 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    7
  1358 ;; This function calls:
  1359 ;;		_LCD_String
  1360 ;;		_SetLine
  1361 ;; This function is called by:
  1362 ;;		_stopAndDisplay
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text5
  1367  00039A                     __ptext5:
  1368                           	opt callstack 0
  1369  00039A                     _check_RFID:
  1370                           	opt callstack 22
  1371                           
  1372                           ;RFID.c: 70: void check_RFID(volatile char dataBuf[]);RFID.c: 71: {;RFID.c: 73:     char
      +                           hexBuf[12];;RFID.c: 75:     for(int i=0; i<12;i++)
  1373                           
  1374                           ;incstack = 0
  1375  00039A  0E00               	movlw	0
  1376  00039C  6E28               	movwf	check_RFID@i+1,c
  1377  00039E  0E00               	movlw	0
  1378  0003A0  6E27               	movwf	check_RFID@i,c
  1379  0003A2                     l2391:
  1380                           
  1381                           ;RFID.c: 76:     {;RFID.c: 77:         if ((dataBuf[i] >= '0') && (dataBuf[i] <= '9'))
  1382  0003A2  5027               	movf	check_RFID@i,w,c
  1383  0003A4  2411               	addwf	check_RFID@dataBuf,w,c
  1384  0003A6  6ED9               	movwf	fsr2l,c
  1385  0003A8  5028               	movf	check_RFID@i+1,w,c
  1386  0003AA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1387  0003AC  6EDA               	movwf	fsr2h,c
  1388  0003AE  0E2F               	movlw	47
  1389  0003B0  64DF               	cpfsgt	indf2,c
  1390  0003B2  D018               	goto	l2397
  1391  0003B4  5027               	movf	check_RFID@i,w,c
  1392  0003B6  2411               	addwf	check_RFID@dataBuf,w,c
  1393  0003B8  6ED9               	movwf	fsr2l,c
  1394  0003BA  5028               	movf	check_RFID@i+1,w,c
  1395  0003BC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1396  0003BE  6EDA               	movwf	fsr2h,c
  1397  0003C0  0E3A               	movlw	58
  1398  0003C2  60DF               	cpfslt	indf2,c
  1399  0003C4  D00F               	goto	l2397
  1400                           
  1401                           ;RFID.c: 78:         {;RFID.c: 79:             hexBuf[i] = dataBuf[i] - '0';
  1402  0003C6  0E15               	movlw	low check_RFID@hexBuf
  1403  0003C8  2427               	addwf	check_RFID@i,w,c
  1404  0003CA  6ED9               	movwf	fsr2l,c
  1405  0003CC  0E00               	movlw	high check_RFID@hexBuf
  1406  0003CE  2028               	addwfc	check_RFID@i+1,w,c
  1407  0003D0  6EDA               	movwf	fsr2h,c
  1408  0003D2  5027               	movf	check_RFID@i,w,c
  1409  0003D4  2411               	addwf	check_RFID@dataBuf,w,c
  1410  0003D6  6EE1               	movwf	fsr1l,c
  1411  0003D8  5028               	movf	check_RFID@i+1,w,c
  1412  0003DA  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1413  0003DC  6EE2               	movwf	fsr1h,c
  1414  0003DE  50E7               	movf	indf1,w,c
  1415  0003E0  0FD0               	addlw	208
  1416  0003E2  D020               	goto	L4
  1417  0003E4                     l2397:
  1418  0003E4  5027               	movf	check_RFID@i,w,c
  1419  0003E6  2411               	addwf	check_RFID@dataBuf,w,c
  1420  0003E8  6ED9               	movwf	fsr2l,c
  1421  0003EA  5028               	movf	check_RFID@i+1,w,c
  1422  0003EC  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1423  0003EE  6EDA               	movwf	fsr2h,c
  1424  0003F0  0E40               	movlw	64
  1425  0003F2  64DF               	cpfsgt	indf2,c
  1426  0003F4  D018               	goto	l2403
  1427  0003F6  5027               	movf	check_RFID@i,w,c
  1428  0003F8  2411               	addwf	check_RFID@dataBuf,w,c
  1429  0003FA  6ED9               	movwf	fsr2l,c
  1430  0003FC  5028               	movf	check_RFID@i+1,w,c
  1431  0003FE  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1432  000400  6EDA               	movwf	fsr2h,c
  1433  000402  0E47               	movlw	71
  1434  000404  60DF               	cpfslt	indf2,c
  1435  000406  D00F               	goto	l2403
  1436                           
  1437                           ;RFID.c: 81:         {;RFID.c: 82:             hexBuf[i] = 10 + dataBuf[i] - 'A';
  1438  000408  0E15               	movlw	low check_RFID@hexBuf
  1439  00040A  2427               	addwf	check_RFID@i,w,c
  1440  00040C  6ED9               	movwf	fsr2l,c
  1441  00040E  0E00               	movlw	high check_RFID@hexBuf
  1442  000410  2028               	addwfc	check_RFID@i+1,w,c
  1443  000412  6EDA               	movwf	fsr2h,c
  1444  000414  5027               	movf	check_RFID@i,w,c
  1445  000416  2411               	addwf	check_RFID@dataBuf,w,c
  1446  000418  6EE1               	movwf	fsr1l,c
  1447  00041A  5028               	movf	check_RFID@i+1,w,c
  1448  00041C  2012               	addwfc	check_RFID@dataBuf+1,w,c
  1449  00041E  6EE2               	movwf	fsr1h,c
  1450  000420  50E7               	movf	indf1,w,c
  1451  000422  0FC9               	addlw	201
  1452  000424                     L4:
  1453  000424  6EDF               	movwf	indf2,c
  1454  000426                     l2403:
  1455                           
  1456                           ;RFID.c: 84:     }
  1457  000426  4A27               	infsnz	check_RFID@i,f,c
  1458  000428  2A28               	incf	check_RFID@i+1,f,c
  1459  00042A  BE28               	btfsc	check_RFID@i+1,7,c
  1460  00042C  D7BA               	goto	l2391
  1461  00042E  5028               	movf	check_RFID@i+1,w,c
  1462  000430  E104               	bnz	u1510
  1463  000432  0E0C               	movlw	12
  1464  000434  5C27               	subwf	check_RFID@i,w,c
  1465  000436  A0D8               	btfss	status,0,c
  1466  000438  D7B4               	goto	l2391
  1467  00043A                     u1510:
  1468                           
  1469                           ;RFID.c: 86:     char byte1 = 0x00 | (hexBuf[0] < 1) | hexBuf[1];
  1470  00043A  5015               	movf	check_RFID@hexBuf,w,c
  1471  00043C  A4D8               	btfss	status,2,c
  1472  00043E  D002               	goto	u1520
  1473  000440  0E01               	movlw	1
  1474  000442  D001               	goto	u1530
  1475  000444                     u1520:
  1476  000444  0E00               	movlw	0
  1477  000446                     u1530:
  1478  000446  1016               	iorwf	check_RFID@hexBuf+1,w,c
  1479  000448  6E21               	movwf	check_RFID@byte1,c
  1480                           
  1481                           ;RFID.c: 87:     char byte2 = 0x00 | (hexBuf[2] < 1) | hexBuf[3];
  1482  00044A  5017               	movf	check_RFID@hexBuf+2,w,c
  1483  00044C  A4D8               	btfss	status,2,c
  1484  00044E  D002               	goto	u1540
  1485  000450  0E01               	movlw	1
  1486  000452  D001               	goto	u1550
  1487  000454                     u1540:
  1488  000454  0E00               	movlw	0
  1489  000456                     u1550:
  1490  000456  1018               	iorwf	check_RFID@hexBuf+3,w,c
  1491  000458  6E22               	movwf	check_RFID@byte2,c
  1492                           
  1493                           ;RFID.c: 88:     char byte3 = 0x00 | (hexBuf[4] < 1) | hexBuf[5];
  1494  00045A  5019               	movf	check_RFID@hexBuf+4,w,c
  1495  00045C  A4D8               	btfss	status,2,c
  1496  00045E  D002               	goto	u1560
  1497  000460  0E01               	movlw	1
  1498  000462  D001               	goto	u1570
  1499  000464                     u1560:
  1500  000464  0E00               	movlw	0
  1501  000466                     u1570:
  1502  000466  101A               	iorwf	check_RFID@hexBuf+5,w,c
  1503  000468  6E23               	movwf	check_RFID@byte3,c
  1504                           
  1505                           ;RFID.c: 89:     char byte4 = 0x00 | (hexBuf[6] < 1) | hexBuf[7];
  1506  00046A  501B               	movf	check_RFID@hexBuf+6,w,c
  1507  00046C  A4D8               	btfss	status,2,c
  1508  00046E  D002               	goto	u1580
  1509  000470  0E01               	movlw	1
  1510  000472  D001               	goto	u1590
  1511  000474                     u1580:
  1512  000474  0E00               	movlw	0
  1513  000476                     u1590:
  1514  000476  101C               	iorwf	check_RFID@hexBuf+7,w,c
  1515  000478  6E24               	movwf	check_RFID@byte4,c
  1516                           
  1517                           ;RFID.c: 90:     char byte5 = 0x00 | (hexBuf[8] < 1) | hexBuf[9];
  1518  00047A  501D               	movf	check_RFID@hexBuf+8,w,c
  1519  00047C  A4D8               	btfss	status,2,c
  1520  00047E  D002               	goto	u1600
  1521  000480  0E01               	movlw	1
  1522  000482  D001               	goto	u1610
  1523  000484                     u1600:
  1524  000484  0E00               	movlw	0
  1525  000486                     u1610:
  1526  000486  101E               	iorwf	check_RFID@hexBuf+9,w,c
  1527  000488  6E25               	movwf	check_RFID@byte5,c
  1528                           
  1529                           ;RFID.c: 91:     char checksum = 0x00 | (hexBuf[10] < 1) | hexBuf[11];
  1530  00048A  501F               	movf	check_RFID@hexBuf+10,w,c
  1531  00048C  A4D8               	btfss	status,2,c
  1532  00048E  D002               	goto	u1620
  1533  000490  0E01               	movlw	1
  1534  000492  D001               	goto	u1630
  1535  000494                     u1620:
  1536  000494  0E00               	movlw	0
  1537  000496                     u1630:
  1538  000496  1020               	iorwf	check_RFID@hexBuf+11,w,c
  1539  000498  6E26               	movwf	check_RFID@checksum,c
  1540                           
  1541                           ;RFID.c: 94:     if(byte1^byte2^byte3^byte4^byte5 == checksum)
  1542  00049A  5021               	movf	check_RFID@byte1,w,c
  1543  00049C  1822               	xorwf	check_RFID@byte2,w,c
  1544  00049E  1823               	xorwf	check_RFID@byte3,w,c
  1545  0004A0  1824               	xorwf	check_RFID@byte4,w,c
  1546  0004A2  6E13               	movwf	??_check_RFID& (0+255),c
  1547  0004A4  6A14               	clrf	(??_check_RFID+1)& (0+255),c
  1548  0004A6  5026               	movf	check_RFID@checksum,w,c
  1549  0004A8  1825               	xorwf	check_RFID@byte5,w,c
  1550  0004AA  A4D8               	btfss	status,2,c
  1551  0004AC  D002               	goto	u1640
  1552  0004AE  0E01               	movlw	1
  1553  0004B0  D001               	goto	u1650
  1554  0004B2                     u1640:
  1555  0004B2  0E00               	movlw	0
  1556  0004B4                     u1650:
  1557  0004B4  1A13               	xorwf	??_check_RFID,f,c
  1558  0004B6  0E00               	movlw	0
  1559  0004B8  1A14               	xorwf	??_check_RFID+1,f,c
  1560  0004BA  5013               	movf	??_check_RFID,w,c
  1561  0004BC  1014               	iorwf	??_check_RFID+1,w,c
  1562  0004BE  B4D8               	btfsc	status,2,c
  1563  0004C0  D00A               	goto	l2413
  1564                           
  1565                           ;RFID.c: 95:     {;RFID.c: 97:         SetLine(2);
  1566  0004C2  0E02               	movlw	2
  1567  0004C4  ECC3  F007         	call	_SetLine
  1568                           
  1569                           ;RFID.c: 98:         LCD_String("CHECKSUM PASSED");
  1570  0004C8  0E41               	movlw	low STR_2
  1571  0004CA  6E0F               	movwf	LCD_String@string,c
  1572  0004CC  0E03               	movlw	high STR_2
  1573  0004CE  6E10               	movwf	LCD_String@string+1,c
  1574  0004D0  EC43  F006         	call	_LCD_String	;wreg free
  1575                           
  1576                           ;RFID.c: 99:     }
  1577  0004D4  0012               	return	
  1578  0004D6                     l2413:
  1579                           
  1580                           ;RFID.c: 102:         SetLine(2);
  1581  0004D6  0E02               	movlw	2
  1582  0004D8  ECC3  F007         	call	_SetLine
  1583                           
  1584                           ;RFID.c: 103:         LCD_String("CHECKSUM FAILED");
  1585  0004DC  0E31               	movlw	low STR_3
  1586  0004DE  6E0F               	movwf	LCD_String@string,c
  1587  0004E0  0E03               	movlw	high STR_3
  1588  0004E2  6E10               	movwf	LCD_String@string+1,c
  1589  0004E4  EC43  F006         	call	_LCD_String	;wreg free
  1590  0004E8  0012               	return		;funcret
  1591  0004EA                     __end_of_check_RFID:
  1592                           	opt callstack 0
  1593                           
  1594 ;; *************** function _SetLine *****************
  1595 ;; Defined at:
  1596 ;;		line 107 in file "LCDIO.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  line            1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  line            1   14[COMRAM] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1610 ;;      Params:         0       0       0       0
  1611 ;;      Locals:         1       0       0       0
  1612 ;;      Temps:          0       0       0       0
  1613 ;;      Totals:         1       0       0       0
  1614 ;;Total ram usage:        1 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    6
  1617 ;; This function calls:
  1618 ;;		_SendLCD
  1619 ;; This function is called by:
  1620 ;;		_check_RFID
  1621 ;;		_display_RFID
  1622 ;;		_waitForInput
  1623 ;;		_debug
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text6
  1628  000F86                     __ptext6:
  1629                           	opt callstack 0
  1630  000F86                     _SetLine:
  1631                           	opt callstack 23
  1632                           
  1633                           ;incstack = 0
  1634                           ;SetLine@line stored from wreg
  1635  000F86  6E0F               	movwf	SetLine@line,c
  1636                           
  1637                           ;LCDIO.c: 109:     if(line == 1){
  1638  000F88  040F               	decf	SetLine@line,w,c
  1639  000F8A  A4D8               	btfss	status,2,c
  1640  000F8C  D005               	goto	l2253
  1641                           
  1642                           ;LCDIO.c: 110:         SendLCD(0x80,0);
  1643  000F8E  0E00               	movlw	0
  1644  000F90  6E0D               	movwf	SendLCD@type,c
  1645  000F92  0E80               	movlw	128
  1646  000F94  ECAB  F007         	call	_SendLCD
  1647  000F98                     l2253:
  1648                           
  1649                           ;LCDIO.c: 113:     if(line == 2){
  1650  000F98  0E02               	movlw	2
  1651  000F9A  180F               	xorwf	SetLine@line,w,c
  1652  000F9C  A4D8               	btfss	status,2,c
  1653  000F9E  D005               	goto	l2257
  1654                           
  1655                           ;LCDIO.c: 114:         SendLCD(0xC0,0);
  1656  000FA0  0E00               	movlw	0
  1657  000FA2  6E0D               	movwf	SendLCD@type,c
  1658  000FA4  0EC0               	movlw	192
  1659  000FA6  ECAB  F007         	call	_SendLCD
  1660  000FAA                     l2257:
  1661                           
  1662                           ;LCDIO.c: 116:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  1663  000FAA  0E21               	movlw	33
  1664  000FAC                     u1867:
  1665  000FAC  2EE8               	decfsz	wreg,f,c
  1666  000FAE  D7FE               	bra	u1867
  1667  000FB0  F000               	nop	
  1668  000FB2  0012               	return		;funcret
  1669  000FB4                     __end_of_SetLine:
  1670                           	opt callstack 0
  1671                           
  1672 ;; *************** function _setup *****************
  1673 ;; Defined at:
  1674 ;;		line 45 in file "main.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    7
  1695 ;; This function calls:
  1696 ;;		_initPWM
  1697 ;;		_init_LCD
  1698 ;;		_init_RFID
  1699 ;;		_init_sensor
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text7
  1706  000EEC                     __ptext7:
  1707                           	opt callstack 0
  1708  000EEC                     _setup:
  1709                           	opt callstack 23
  1710                           
  1711                           ;main.c: 48:     OSCCON = 0x72;
  1712                           
  1713                           ;incstack = 0
  1714  000EEC  0E72               	movlw	114
  1715  000EEE  6ED3               	movwf	4051,c	;volatile
  1716  000EF0                     l55:
  1717  000EF0  A4D3               	btfss	4051,2,c	;volatile
  1718  000EF2  D7FE               	goto	l55
  1719                           
  1720                           ;main.c: 50:     INTCONbits.GIEH = 1;
  1721  000EF4  8EF2               	bsf	4082,7,c	;volatile
  1722                           
  1723                           ;main.c: 51:     INTCONbits.GIEL = 1;
  1724  000EF6  8CF2               	bsf	4082,6,c	;volatile
  1725                           
  1726                           ;main.c: 52:     RCONbits.IPEN=1;
  1727  000EF8  8ED0               	bsf	4048,7,c	;volatile
  1728                           
  1729                           ;main.c: 55:     init_LCD();
  1730  000EFA  ECF5  F003         	call	_init_LCD	;wreg free
  1731                           
  1732                           ;main.c: 56:     init_RFID();
  1733  000EFE  EC00  F008         	call	_init_RFID	;wreg free
  1734                           
  1735                           ;main.c: 57:     init_sensor();
  1736  000F02  EC27  F008         	call	_init_sensor	;wreg free
  1737                           
  1738                           ;main.c: 58:     initPWM(199);
  1739  000F06  0E00               	movlw	0
  1740  000F08  6E0C               	movwf	initPWM@PWMperiod+1,c
  1741  000F0A  0EC7               	movlw	199
  1742  000F0C  6E0B               	movwf	initPWM@PWMperiod,c
  1743  000F0E  EC0D  F008         	call	_initPWM	;wreg free
  1744                           
  1745                           ;main.c: 61:     TRISBbits.RB0 = 0;
  1746  000F12  9093               	bcf	3987,0,c	;volatile
  1747                           
  1748                           ;main.c: 62:     TRISBbits.RB2 = 0;
  1749  000F14  9493               	bcf	3987,2,c	;volatile
  1750                           
  1751                           ;main.c: 64:     TRISDbits.RD2 = 1;
  1752  000F16  8495               	bsf	3989,2,c	;volatile
  1753                           
  1754                           ;main.c: 66:     T0CON = 0b11001000;
  1755  000F18  0EC8               	movlw	200
  1756  000F1A  6ED5               	movwf	4053,c	;volatile
  1757                           
  1758                           ;main.c: 70:     INTCONbits.TMR0IE=1;
  1759  000F1C  8AF2               	bsf	4082,5,c	;volatile
  1760                           
  1761                           ;main.c: 71:     INTCON2bits.TMR0IP=0;
  1762  000F1E  94F1               	bcf	4081,2,c	;volatile
  1763  000F20  0012               	return		;funcret
  1764  000F22                     __end_of_setup:
  1765                           	opt callstack 0
  1766                           
  1767 ;; *************** function _init_sensor *****************
  1768 ;; Defined at:
  1769 ;;		line 17 in file "signal_processing.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  throwaway       2    0        unsigned int 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1783 ;;      Params:         0       0       0       0
  1784 ;;      Locals:         2       0       0       0
  1785 ;;      Temps:          0       0       0       0
  1786 ;;      Totals:         2       0       0       0
  1787 ;;Total ram usage:        2 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    3
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_setup
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           	psect	text8
  1798  00104E                     __ptext8:
  1799                           	opt callstack 0
  1800  00104E                     _init_sensor:
  1801                           	opt callstack 26
  1802                           
  1803                           ;signal_processing.c: 19:     T5CON =0b00000001;
  1804                           
  1805                           ;incstack = 0
  1806  00104E  0E01               	movlw	1
  1807  001050  6EB7               	movwf	4023,c	;volatile
  1808                           
  1809                           ;signal_processing.c: 20:     TRISAbits.RA2 = 1;
  1810  001052  8492               	bsf	3986,2,c	;volatile
  1811                           
  1812                           ;signal_processing.c: 23:     ANSEL0 = 0;
  1813  001054  0E00               	movlw	0
  1814  001056  6EB8               	movwf	4024,c	;volatile
  1815                           
  1816                           ;signal_processing.c: 24:     ANSEL1 = 0;
  1817  001058  0E00               	movlw	0
  1818  00105A  6EB9               	movwf	4025,c	;volatile
  1819                           
  1820                           ;signal_processing.c: 26:     CAP1CON = 0b01000111;
  1821  00105C  0E47               	movlw	71
  1822  00105E  6E63               	movwf	3939,c	;volatile
  1823  001060  5069               	movf	3945,w,c	;volatile
  1824  001062  5068               	movf	3944,w,c	;volatile
  1825  001064  0012               	return		;funcret
  1826  001066                     __end_of_init_sensor:
  1827                           	opt callstack 0
  1828                           
  1829 ;; *************** function _init_RFID *****************
  1830 ;; Defined at:
  1831 ;;		line 13 in file "RFID.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1845 ;;      Params:         0       0       0       0
  1846 ;;      Locals:         0       0       0       0
  1847 ;;      Temps:          0       0       0       0
  1848 ;;      Totals:         0       0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    3
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_setup
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text9
  1860  001000                     __ptext9:
  1861                           	opt callstack 0
  1862  001000                     _init_RFID:
  1863                           	opt callstack 26
  1864                           
  1865                           ;RFID.c: 16:     TRISCbits.RC7 = 1;
  1866                           
  1867                           ;incstack = 0
  1868  001000  8E94               	bsf	3988,7,c	;volatile
  1869                           
  1870                           ;RFID.c: 19:     SPBRG = 203;
  1871  001002  0ECB               	movlw	203
  1872  001004  6EAF               	movwf	4015,c	;volatile
  1873                           
  1874                           ;RFID.c: 20:     SPBRGH = 0;
  1875  001006  0E00               	movlw	0
  1876  001008  6EB0               	movwf	4016,c	;volatile
  1877                           
  1878                           ;RFID.c: 22:     BAUDCONbits.BRG16=1;
  1879  00100A  86AA               	bsf	4010,3,c	;volatile
  1880                           
  1881                           ;RFID.c: 23:     TXSTAbits.BRGH = 1;
  1882  00100C  84AC               	bsf	4012,2,c	;volatile
  1883                           
  1884                           ;RFID.c: 24:     RCSTAbits.CREN = 1;
  1885  00100E  88AB               	bsf	4011,4,c	;volatile
  1886                           
  1887                           ;RFID.c: 25:     RCSTAbits.SPEN = 1;
  1888  001010  8EAB               	bsf	4011,7,c	;volatile
  1889                           
  1890                           ;RFID.c: 26:     TXSTAbits.TXEN = 1;
  1891  001012  8AAC               	bsf	4012,5,c	;volatile
  1892                           
  1893                           ;RFID.c: 28:     PIE1bits.RC1IE = 1;
  1894  001014  8A9D               	bsf	3997,5,c	;volatile
  1895                           
  1896                           ;RFID.c: 29:     IPR1bits.RC1IP = 1;
  1897  001016  8A9F               	bsf	3999,5,c	;volatile
  1898  001018  0012               	return		;funcret
  1899  00101A                     __end_of_init_RFID:
  1900                           	opt callstack 0
  1901                           
  1902 ;; *************** function _init_LCD *****************
  1903 ;; Defined at:
  1904 ;;		line 56 in file "LCDIO.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       0       0       0
  1919 ;;      Locals:         0       0       0       0
  1920 ;;      Temps:          1       0       0       0
  1921 ;;      Totals:         1       0       0       0
  1922 ;;Total ram usage:        1 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    6
  1925 ;; This function calls:
  1926 ;;		_LCDout
  1927 ;;		_SendLCD
  1928 ;; This function is called by:
  1929 ;;		_setup
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           	psect	text10
  1934  0007EA                     __ptext10:
  1935                           	opt callstack 0
  1936  0007EA                     _init_LCD:
  1937                           	opt callstack 23
  1938                           
  1939                           ;LCDIO.c: 59:  TRISCbits.RC0 = 0;
  1940                           
  1941                           ;incstack = 0
  1942  0007EA  9094               	bcf	3988,0,c	;volatile
  1943                           
  1944                           ;LCDIO.c: 60:  TRISAbits.RA7 = 0;
  1945  0007EC  9E92               	bcf	3986,7,c	;volatile
  1946                           
  1947                           ;LCDIO.c: 61:  TRISCbits.RC3 = 0;
  1948  0007EE  9694               	bcf	3988,3,c	;volatile
  1949                           
  1950                           ;LCDIO.c: 62:  TRISDbits.RD0 = 0;
  1951  0007F0  9095               	bcf	3989,0,c	;volatile
  1952                           
  1953                           ;LCDIO.c: 63:  TRISDbits.RD1 = 0;
  1954  0007F2  9295               	bcf	3989,1,c	;volatile
  1955                           
  1956                           ;LCDIO.c: 64:  TRISAbits.RA6 = 0;
  1957  0007F4  9C92               	bcf	3986,6,c	;volatile
  1958                           
  1959                           ;LCDIO.c: 67:  LATDbits.LATD0 = 0;
  1960  0007F6  908C               	bcf	3980,0,c	;volatile
  1961                           
  1962                           ;LCDIO.c: 68:  LATDbits.LATD1 = 0;
  1963  0007F8  928C               	bcf	3980,1,c	;volatile
  1964                           
  1965                           ;LCDIO.c: 69:  LATCbits.LATC3 = 0;
  1966  0007FA  968B               	bcf	3979,3,c	;volatile
  1967                           
  1968                           ;LCDIO.c: 70:  LATCbits.LATC0 = 0;
  1969  0007FC  908B               	bcf	3979,0,c	;volatile
  1970                           
  1971                           ;LCDIO.c: 71:  LATAbits.LATA6 = 0;
  1972  0007FE  9C89               	bcf	3977,6,c	;volatile
  1973                           
  1974                           ;LCDIO.c: 72:  LATAbits.LATA7 = 0;
  1975  000800  9E89               	bcf	3977,7,c	;volatile
  1976                           
  1977                           ;LCDIO.c: 75:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1978  000802  0E27               	movlw	39
  1979  000804  6E0F               	movwf	??_init_LCD& (0+255),c
  1980  000806  0EF5               	movlw	245
  1981  000808                     u1877:
  1982  000808  2EE8               	decfsz	wreg,f,c
  1983  00080A  D7FE               	bra	u1877
  1984  00080C  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  1985  00080E  D7FC               	bra	u1877
  1986  000810  F000               	nop	
  1987                           
  1988                           ;LCDIO.c: 76:  LCDout(0b0011);
  1989  000812  0E03               	movlw	3
  1990  000814  EC07  F006         	call	_LCDout
  1991                           
  1992                           ;LCDIO.c: 77:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1993  000818  0E0D               	movlw	13
  1994  00081A  6E0F               	movwf	??_init_LCD& (0+255),c
  1995  00081C  0EFC               	movlw	252
  1996  00081E                     u1887:
  1997  00081E  2EE8               	decfsz	wreg,f,c
  1998  000820  D7FE               	bra	u1887
  1999  000822  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2000  000824  D7FC               	bra	u1887
  2001                           
  2002                           ;LCDIO.c: 78:  LCDout(0b0011);
  2003  000826  0E03               	movlw	3
  2004  000828  EC07  F006         	call	_LCDout
  2005                           
  2006                           ;LCDIO.c: 79:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2007  00082C  0E85               	movlw	133
  2008  00082E                     u1897:
  2009  00082E  2EE8               	decfsz	wreg,f,c
  2010  000830  D7FE               	bra	u1897
  2011  000832  F000               	nop	
  2012                           
  2013                           ;LCDIO.c: 80:  LCDout(0b0011);
  2014  000834  0E03               	movlw	3
  2015  000836  EC07  F006         	call	_LCDout
  2016                           
  2017                           ;LCDIO.c: 81:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2018  00083A  0E21               	movlw	33
  2019  00083C                     u1907:
  2020  00083C  2EE8               	decfsz	wreg,f,c
  2021  00083E  D7FE               	bra	u1907
  2022  000840  F000               	nop	
  2023                           
  2024                           ;LCDIO.c: 82:  LCDout(0b0010);
  2025  000842  0E02               	movlw	2
  2026  000844  EC07  F006         	call	_LCDout
  2027                           
  2028                           ;LCDIO.c: 83:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2029  000848  0E21               	movlw	33
  2030  00084A                     u1917:
  2031  00084A  2EE8               	decfsz	wreg,f,c
  2032  00084C  D7FE               	bra	u1917
  2033  00084E  F000               	nop	
  2034                           
  2035                           ;LCDIO.c: 86:  SendLCD(0b00101000,0);
  2036  000850  0E00               	movlw	0
  2037  000852  6E0D               	movwf	SendLCD@type,c
  2038  000854  0E28               	movlw	40
  2039  000856  ECAB  F007         	call	_SendLCD
  2040                           
  2041                           ;LCDIO.c: 87:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2042  00085A  0E21               	movlw	33
  2043  00085C                     u1927:
  2044  00085C  2EE8               	decfsz	wreg,f,c
  2045  00085E  D7FE               	bra	u1927
  2046  000860  F000               	nop	
  2047                           
  2048                           ;LCDIO.c: 90:  SendLCD(0b00001000,0);
  2049  000862  0E00               	movlw	0
  2050  000864  6E0D               	movwf	SendLCD@type,c
  2051  000866  0E08               	movlw	8
  2052  000868  ECAB  F007         	call	_SendLCD
  2053                           
  2054                           ;LCDIO.c: 91:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2055  00086C  0E21               	movlw	33
  2056  00086E                     u1937:
  2057  00086E  2EE8               	decfsz	wreg,f,c
  2058  000870  D7FE               	bra	u1937
  2059  000872  F000               	nop	
  2060                           
  2061                           ;LCDIO.c: 94:  SendLCD(0b00000001,0);
  2062  000874  0E00               	movlw	0
  2063  000876  6E0D               	movwf	SendLCD@type,c
  2064  000878  0E01               	movlw	1
  2065  00087A  ECAB  F007         	call	_SendLCD
  2066                           
  2067                           ;LCDIO.c: 95:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2068  00087E  0E0D               	movlw	13
  2069  000880  6E0F               	movwf	??_init_LCD& (0+255),c
  2070  000882  0EFC               	movlw	252
  2071  000884                     u1947:
  2072  000884  2EE8               	decfsz	wreg,f,c
  2073  000886  D7FE               	bra	u1947
  2074  000888  2E0F               	decfsz	??_init_LCD& (0+255),f,c
  2075  00088A  D7FC               	bra	u1947
  2076                           
  2077                           ;LCDIO.c: 98:  SendLCD(0b00000110,0);
  2078  00088C  0E00               	movlw	0
  2079  00088E  6E0D               	movwf	SendLCD@type,c
  2080  000890  0E06               	movlw	6
  2081  000892  ECAB  F007         	call	_SendLCD
  2082                           
  2083                           ;LCDIO.c: 99:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2084  000896  0E21               	movlw	33
  2085  000898                     u1957:
  2086  000898  2EE8               	decfsz	wreg,f,c
  2087  00089A  D7FE               	bra	u1957
  2088  00089C  F000               	nop	
  2089                           
  2090                           ;LCDIO.c: 102:  SendLCD(0b00001100,0);
  2091  00089E  0E00               	movlw	0
  2092  0008A0  6E0D               	movwf	SendLCD@type,c
  2093  0008A2  0E0C               	movlw	12
  2094  0008A4  ECAB  F007         	call	_SendLCD
  2095                           
  2096                           ;LCDIO.c: 103:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2097  0008A8  0E21               	movlw	33
  2098  0008AA                     u1967:
  2099  0008AA  2EE8               	decfsz	wreg,f,c
  2100  0008AC  D7FE               	bra	u1967
  2101  0008AE  F000               	nop	
  2102  0008B0  0012               	return		;funcret
  2103  0008B2                     __end_of_init_LCD:
  2104                           	opt callstack 0
  2105                           
  2106 ;; *************** function _initPWM *****************
  2107 ;; Defined at:
  2108 ;;		line 5 in file "dc_motor.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  PWMperiod       2   10[COMRAM] int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2122 ;;      Params:         2       0       0       0
  2123 ;;      Locals:         0       0       0       0
  2124 ;;      Temps:          0       0       0       0
  2125 ;;      Totals:         2       0       0       0
  2126 ;;Total ram usage:        2 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_setup
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text11
  2137  00101A                     __ptext11:
  2138                           	opt callstack 0
  2139  00101A                     _initPWM:
  2140                           	opt callstack 26
  2141                           
  2142                           ;dc_motor.c: 7:     PTCON0 = 0b00000000;
  2143                           
  2144                           ;incstack = 0
  2145  00101A  0E00               	movlw	0
  2146  00101C  6E7F               	movwf	3967,c	;volatile
  2147                           
  2148                           ;dc_motor.c: 8:     PTCON1 = 0b10000000;
  2149  00101E  0E80               	movlw	128
  2150  001020  6E7E               	movwf	3966,c	;volatile
  2151                           
  2152                           ;dc_motor.c: 10:     PWMCON0 = 0b01101111;
  2153  001022  0E6F               	movlw	111
  2154  001024  6E6F               	movwf	3951,c	;volatile
  2155                           
  2156                           ;dc_motor.c: 11:     PWMCON1 = 0x00;
  2157  001026  0E00               	movlw	0
  2158  001028  6E6E               	movwf	3950,c	;volatile
  2159                           
  2160                           ;dc_motor.c: 13:     PTPERL = (0b11111111 & PWMperiod);
  2161  00102A  C00B  FF7B         	movff	initPWM@PWMperiod,3963	;volatile
  2162                           
  2163                           ;dc_motor.c: 14:     PTPERH = (0b1111111100000000 & PWMperiod) >> 8;
  2164  00102E  500C               	movf	initPWM@PWMperiod+1,w,c
  2165  001030  6E7A               	movwf	3962,c	;volatile
  2166  001032  0012               	return		;funcret
  2167  001034                     __end_of_initPWM:
  2168                           	opt callstack 0
  2169                           
  2170 ;; *************** function _scanForBeacon *****************
  2171 ;; Defined at:
  2172 ;;		line 18 in file "subroutines.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2175 ;;		 -> main@motorL(9), 
  2176 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2177 ;;		 -> main@motorR(9), 
  2178 ;;  speed           2   46[COMRAM] int 
  2179 ;; Auto vars:     Size  Location     Type
  2180 ;;  raw_data        2   50[COMRAM] unsigned int 
  2181 ;;  beacon_locat    1   52[COMRAM] unsigned char 
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      unsigned char 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2191 ;;      Params:         6       0       0       0
  2192 ;;      Locals:         3       0       0       0
  2193 ;;      Temps:          2       0       0       0
  2194 ;;      Totals:        11       0       0       0
  2195 ;;Total ram usage:       11 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:    7
  2198 ;; This function calls:
  2199 ;;		_ClearLCD
  2200 ;;		_LCD_String
  2201 ;;		_classify_data
  2202 ;;		_turn
  2203 ;; This function is called by:
  2204 ;;		_main
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text12
  2209  000D40                     __ptext12:
  2210                           	opt callstack 0
  2211  000D40                     _scanForBeacon:
  2212                           	opt callstack 23
  2213                           
  2214                           ;subroutines.c: 18: volatile char scanForBeacon(struct DC_motor *mL, struct DC_motor *mR
      +                          , int speed);subroutines.c: 19: {;subroutines.c: 20:     turn(mL,mR,speed);
  2215                           
  2216                           ;incstack = 0
  2217  000D40  C02B  F022         	movff	scanForBeacon@mL,turn@mL
  2218  000D44  C02C  F023         	movff	scanForBeacon@mL+1,turn@mL+1
  2219  000D48  C02D  F024         	movff	scanForBeacon@mR,turn@mR
  2220  000D4C  C02E  F025         	movff	scanForBeacon@mR+1,turn@mR+1
  2221  000D50  C02F  F026         	movff	scanForBeacon@speed,turn@max_power
  2222  000D54  C030  F027         	movff	scanForBeacon@speed+1,turn@max_power+1
  2223  000D58  EC44  F005         	call	_turn	;wreg free
  2224                           
  2225                           ;subroutines.c: 21:     ClearLCD();
  2226  000D5C  EC1A  F008         	call	_ClearLCD	;wreg free
  2227                           
  2228                           ;subroutines.c: 22:     LCD_String("SEARCHING");
  2229  000D60  0E8B               	movlw	low STR_4
  2230  000D62  6E0F               	movwf	LCD_String@string,c
  2231  000D64  0E03               	movlw	high STR_4
  2232  000D66  6E10               	movwf	LCD_String@string+1,c
  2233  000D68  EC43  F006         	call	_LCD_String	;wreg free
  2234  000D6C                     l2523:
  2235                           
  2236                           ;subroutines.c: 26:     {;subroutines.c: 28:         unsigned int raw_data = (unsigned i
      +                          nt)((CAP1BUFH << 8) | CAP1BUFL);
  2237  000D6C  5068               	movf	3944,w,c	;volatile
  2238  000D6E  CF69 F031          	movff	3945,??_scanForBeacon	;volatile
  2239  000D72  6A32               	clrf	(??_scanForBeacon+1)& (0+255),c
  2240  000D74  C031  F032         	movff	??_scanForBeacon,??_scanForBeacon+1
  2241  000D78  6A31               	clrf	??_scanForBeacon,c
  2242  000D7A  1031               	iorwf	??_scanForBeacon,w,c
  2243  000D7C  6E33               	movwf	scanForBeacon@raw_data,c
  2244  000D7E  5032               	movf	??_scanForBeacon+1,w,c
  2245  000D80  6E34               	movwf	scanForBeacon@raw_data+1,c
  2246                           
  2247                           ;subroutines.c: 31:         char beacon_location = classify_data(raw_data);
  2248  000D82  C033  F00B         	movff	scanForBeacon@raw_data,classify_data@raw_data
  2249  000D86  C034  F00C         	movff	scanForBeacon@raw_data+1,classify_data@raw_data+1
  2250  000D8A  ECF3  F006         	call	_classify_data	;wreg free
  2251  000D8E  6E35               	movwf	scanForBeacon@beacon_location,c
  2252                           
  2253                           ;subroutines.c: 34:         if(beacon_location == 1)
  2254  000D90  0435               	decf	scanForBeacon@beacon_location,w,c
  2255  000D92  A4D8               	btfss	status,2,c
  2256  000D94  D7EB               	goto	l2523
  2257                           
  2258                           ;subroutines.c: 35:         {;subroutines.c: 36:             return 1;
  2259  000D96  0E01               	movlw	1
  2260  000D98  0012               	return		;funcret
  2261  000D9A                     __end_of_scanForBeacon:
  2262                           	opt callstack 0
  2263                           
  2264 ;; *************** function _turn *****************
  2265 ;; Defined at:
  2266 ;;		line 53 in file "dc_motor.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2269 ;;		 -> main@motorL(9), 
  2270 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2271 ;;		 -> main@motorR(9), 
  2272 ;;  max_power       2   37[COMRAM] int 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  i               2   40[COMRAM] int 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;                  1    wreg      void 
  2277 ;; Registers used:
  2278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2284 ;;      Params:         6       0       0       0
  2285 ;;      Locals:         2       0       0       0
  2286 ;;      Temps:          1       0       0       0
  2287 ;;      Totals:         9       0       0       0
  2288 ;;Total ram usage:        9 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    5
  2291 ;; This function calls:
  2292 ;;		_setMotorPWM
  2293 ;; This function is called by:
  2294 ;;		_scanForBeacon
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text13
  2299  000A88                     __ptext13:
  2300                           	opt callstack 0
  2301  000A88                     _turn:
  2302                           	opt callstack 24
  2303                           
  2304                           ;dc_motor.c: 53: void turn(struct DC_motor *mL, struct DC_motor *mR, int max_power);dc_m
      +                          otor.c: 54: {;dc_motor.c: 56:     mL->direction = 0;
  2305                           
  2306                           ;incstack = 0
  2307  000A88  EE20 F001          	lfsr	2,1
  2308  000A8C  5022               	movf	turn@mL,w,c
  2309  000A8E  26D9               	addwf	fsr2l,f,c
  2310  000A90  5023               	movf	turn@mL+1,w,c
  2311  000A92  22DA               	addwfc	fsr2h,f,c
  2312  000A94  0E00               	movlw	0
  2313  000A96  6EDF               	movwf	indf2,c
  2314                           
  2315                           ;dc_motor.c: 57:     mR->direction = 1;
  2316  000A98  EE20 F001          	lfsr	2,1
  2317  000A9C  5024               	movf	turn@mR,w,c
  2318  000A9E  26D9               	addwf	fsr2l,f,c
  2319  000AA0  5025               	movf	turn@mR+1,w,c
  2320  000AA2  22DA               	addwfc	fsr2h,f,c
  2321  000AA4  0E01               	movlw	1
  2322  000AA6  6EDF               	movwf	indf2,c
  2323                           
  2324                           ;dc_motor.c: 59:     for(int i = 0; i<max_power;i++){
  2325  000AA8  0E00               	movlw	0
  2326  000AAA  6E2A               	movwf	turn@i+1,c
  2327  000AAC  0E00               	movlw	0
  2328  000AAE  6E29               	movwf	turn@i,c
  2329  000AB0  D021               	goto	l2351
  2330  000AB2                     l2341:
  2331                           
  2332                           ;dc_motor.c: 60:         mL->power = i;
  2333  000AB2  C022  FFD9         	movff	turn@mL,fsr2l
  2334  000AB6  C023  FFDA         	movff	turn@mL+1,fsr2h
  2335  000ABA  C029  FFDF         	movff	turn@i,indf2
  2336                           
  2337                           ;dc_motor.c: 61:         mR->power = i;
  2338  000ABE  C024  FFD9         	movff	turn@mR,fsr2l
  2339  000AC2  C025  FFDA         	movff	turn@mR+1,fsr2h
  2340  000AC6  C029  FFDF         	movff	turn@i,indf2
  2341                           
  2342                           ;dc_motor.c: 63:         setMotorPWM(mL);
  2343  000ACA  C022  F019         	movff	turn@mL,setMotorPWM@m
  2344  000ACE  C023  F01A         	movff	turn@mL+1,setMotorPWM@m+1
  2345  000AD2  EC75  F002         	call	_setMotorPWM	;wreg free
  2346                           
  2347                           ;dc_motor.c: 64:         setMotorPWM(mR);
  2348  000AD6  C024  F019         	movff	turn@mR,setMotorPWM@m
  2349  000ADA  C025  F01A         	movff	turn@mR+1,setMotorPWM@m+1
  2350  000ADE  EC75  F002         	call	_setMotorPWM	;wreg free
  2351                           
  2352                           ;dc_motor.c: 65:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2353  000AE2  0E03               	movlw	3
  2354  000AE4  6E28               	movwf	??_turn& (0+255),c
  2355  000AE6  0E98               	movlw	152
  2356  000AE8                     u1977:
  2357  000AE8  2EE8               	decfsz	wreg,f,c
  2358  000AEA  D7FE               	bra	u1977
  2359  000AEC  2E28               	decfsz	??_turn& (0+255),f,c
  2360  000AEE  D7FC               	bra	u1977
  2361                           
  2362                           ;dc_motor.c: 66:     }
  2363  000AF0  4A29               	infsnz	turn@i,f,c
  2364  000AF2  2A2A               	incf	turn@i+1,f,c
  2365  000AF4                     l2351:
  2366  000AF4  5026               	movf	turn@max_power,w,c
  2367  000AF6  5C29               	subwf	turn@i,w,c
  2368  000AF8  502A               	movf	turn@i+1,w,c
  2369  000AFA  0A80               	xorlw	128
  2370  000AFC  6E28               	movwf	??_turn& (0+255),c
  2371  000AFE  5027               	movf	turn@max_power+1,w,c
  2372  000B00  0A80               	xorlw	128
  2373  000B02  5828               	subwfb	??_turn& (0+255),w,c
  2374  000B04  B0D8               	btfsc	status,0,c
  2375  000B06  0012               	return	
  2376  000B08  D7D4               	goto	l2341
  2377  000B0A                     __end_of_turn:
  2378                           	opt callstack 0
  2379                           
  2380 ;; *************** function _classify_data *****************
  2381 ;; Defined at:
  2382 ;;		line 35 in file "signal_processing.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  raw_data        2   10[COMRAM] unsigned int 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  filtered        2   14[COMRAM] unsigned int 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      unsigned char 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2396 ;;      Params:         2       0       0       0
  2397 ;;      Locals:         2       0       0       0
  2398 ;;      Temps:          2       0       0       0
  2399 ;;      Totals:         6       0       0       0
  2400 ;;Total ram usage:        6 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    3
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_scanForBeacon
  2407 ;;		_waitForInput
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text14
  2412  000DE6                     __ptext14:
  2413                           	opt callstack 0
  2414  000DE6                     _classify_data:
  2415                           	opt callstack 26
  2416                           
  2417                           ;signal_processing.c: 35: char classify_data(unsigned int raw_data);signal_processing.c:
      +                           36: {;signal_processing.c: 37:     static unsigned int smoothed;;signal_processing.c: 3
      +                          9:     smoothed = smoothed + ((raw_data - smoothed) >> 2);
  2418                           
  2419                           ;incstack = 0
  2420  000DE6  503F               	movf	classify_data@smoothed,w,c
  2421  000DE8  5C0B               	subwf	classify_data@raw_data,w,c
  2422  000DEA  6E0D               	movwf	??_classify_data& (0+255),c
  2423  000DEC  5040               	movf	classify_data@smoothed+1,w,c
  2424  000DEE  580C               	subwfb	classify_data@raw_data+1,w,c
  2425  000DF0  6E0E               	movwf	(??_classify_data+1)& (0+255),c
  2426  000DF2  90D8               	bcf	status,0,c
  2427  000DF4  320E               	rrcf	??_classify_data+1,f,c
  2428  000DF6  320D               	rrcf	??_classify_data,f,c
  2429  000DF8  90D8               	bcf	status,0,c
  2430  000DFA  320E               	rrcf	??_classify_data+1,f,c
  2431  000DFC  320D               	rrcf	??_classify_data,f,c
  2432  000DFE  503F               	movf	classify_data@smoothed,w,c
  2433  000E00  240D               	addwf	??_classify_data,w,c
  2434  000E02  6E3F               	movwf	classify_data@smoothed,c
  2435  000E04  5040               	movf	classify_data@smoothed+1,w,c
  2436  000E06  200E               	addwfc	??_classify_data+1,w,c
  2437  000E08  6E40               	movwf	classify_data@smoothed+1,c
  2438                           
  2439                           ;signal_processing.c: 40:     unsigned int filtered = raw_data - smoothed;
  2440  000E0A  503F               	movf	classify_data@smoothed,w,c
  2441  000E0C  5C0B               	subwf	classify_data@raw_data,w,c
  2442  000E0E  6E0F               	movwf	classify_data@filtered,c
  2443  000E10  5040               	movf	classify_data@smoothed+1,w,c
  2444  000E12  580C               	subwfb	classify_data@raw_data+1,w,c
  2445  000E14  6E10               	movwf	classify_data@filtered+1,c
  2446                           
  2447                           ;signal_processing.c: 43:     if(filtered >= 100)
  2448  000E16  5010               	movf	classify_data@filtered+1,w,c
  2449  000E18  E104               	bnz	u1680
  2450  000E1A  0E64               	movlw	100
  2451  000E1C  5C0F               	subwf	classify_data@filtered,w,c
  2452  000E1E  A0D8               	btfss	status,0,c
  2453  000E20  D002               	goto	l2439
  2454  000E22                     u1680:
  2455                           
  2456                           ;signal_processing.c: 44:     {;signal_processing.c: 45:         return 1;
  2457  000E22  0E01               	movlw	1
  2458  000E24  0012               	return	
  2459  000E26                     l2439:
  2460                           
  2461                           ;signal_processing.c: 48:     {;signal_processing.c: 49:         return 0;
  2462  000E26  0E00               	movlw	0
  2463  000E28  0012               	return		;funcret
  2464  000E2A                     __end_of_classify_data:
  2465                           	opt callstack 0
  2466                           
  2467 ;; *************** function _returnHome *****************
  2468 ;; Defined at:
  2469 ;;		line 69 in file "subroutines.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2472 ;;		 -> main@motorL(9), 
  2473 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2474 ;;		 -> main@motorR(9), 
  2475 ;;  speed           2   46[COMRAM] int 
  2476 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2477 ;;		 -> movement_time(4), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      unsigned char 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2489 ;;      Params:         8       0       0       0
  2490 ;;      Locals:         0       0       0       0
  2491 ;;      Temps:          4       0       0       0
  2492 ;;      Totals:        12       0       0       0
  2493 ;;Total ram usage:       12 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    7
  2496 ;; This function calls:
  2497 ;;		_ClearLCD
  2498 ;;		_LCD_String
  2499 ;;		_moveBackward
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text15
  2506  000E2A                     __ptext15:
  2507                           	opt callstack 0
  2508  000E2A                     _returnHome:
  2509                           	opt callstack 23
  2510                           
  2511                           ;subroutines.c: 69: volatile char returnHome(struct DC_motor *mL, struct DC_motor *mR, i
      +                          nt speed,;subroutines.c: 70:                             volatile unsigned long *time);s
      +                          ubroutines.c: 71: {;subroutines.c: 72:     moveBackward(mL,mR,speed);
  2512                           
  2513                           ;incstack = 0
  2514  000E2A  C02B  F022         	movff	returnHome@mL,moveBackward@mL
  2515  000E2E  C02C  F023         	movff	returnHome@mL+1,moveBackward@mL+1
  2516  000E32  C02D  F024         	movff	returnHome@mR,moveBackward@mR
  2517  000E36  C02E  F025         	movff	returnHome@mR+1,moveBackward@mR+1
  2518  000E3A  C02F  F026         	movff	returnHome@speed,moveBackward@max_power
  2519  000E3E  C030  F027         	movff	returnHome@speed+1,moveBackward@max_power+1
  2520  000E42  EC85  F005         	call	_moveBackward	;wreg free
  2521                           
  2522                           ;subroutines.c: 74:     ClearLCD();
  2523  000E46  EC1A  F008         	call	_ClearLCD	;wreg free
  2524                           
  2525                           ;subroutines.c: 75:     LCD_String("RETURNING HOME");
  2526  000E4A  0E60               	movlw	low STR_6
  2527  000E4C  6E0F               	movwf	LCD_String@string,c
  2528  000E4E  0E03               	movlw	high STR_6
  2529  000E50  6E10               	movwf	LCD_String@string+1,c
  2530  000E52  EC43  F006         	call	_LCD_String	;wreg free
  2531  000E56                     l2553:
  2532  000E56  C031  FFD9         	movff	returnHome@time,fsr2l
  2533  000E5A  C032  FFDA         	movff	returnHome@time+1,fsr2h
  2534  000E5E  50DE               	movf	postinc2,w,c
  2535  000E60  10DE               	iorwf	postinc2,w,c
  2536  000E62  10DE               	iorwf	postinc2,w,c
  2537  000E64  10DE               	iorwf	postinc2,w,c
  2538  000E66  A4D8               	btfss	status,2,c
  2539  000E68  D7F6               	goto	l2553
  2540                           
  2541                           ;subroutines.c: 77:     return 3;
  2542  000E6A  0E03               	movlw	3
  2543  000E6C  0012               	return		;funcret
  2544  000E6E                     __end_of_returnHome:
  2545                           	opt callstack 0
  2546                           
  2547 ;; *************** function _moveBackward *****************
  2548 ;; Defined at:
  2549 ;;		line 85 in file "dc_motor.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2552 ;;		 -> main@motorL(9), 
  2553 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2554 ;;		 -> main@motorR(9), 
  2555 ;;  max_power       2   37[COMRAM] int 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  i               2   40[COMRAM] int 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2567 ;;      Params:         6       0       0       0
  2568 ;;      Locals:         2       0       0       0
  2569 ;;      Temps:          1       0       0       0
  2570 ;;      Totals:         9       0       0       0
  2571 ;;Total ram usage:        9 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    5
  2574 ;; This function calls:
  2575 ;;		_setMotorPWM
  2576 ;; This function is called by:
  2577 ;;		_returnHome
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text16
  2582  000B0A                     __ptext16:
  2583                           	opt callstack 0
  2584  000B0A                     _moveBackward:
  2585                           	opt callstack 24
  2586                           
  2587                           ;dc_motor.c: 85: void moveBackward(struct DC_motor *mL, struct DC_motor *mR, int max_pow
      +                          er);dc_motor.c: 86: {;dc_motor.c: 87:     mL->direction = 0;
  2588                           
  2589                           ;incstack = 0
  2590  000B0A  EE20 F001          	lfsr	2,1
  2591  000B0E  5022               	movf	moveBackward@mL,w,c
  2592  000B10  26D9               	addwf	fsr2l,f,c
  2593  000B12  5023               	movf	moveBackward@mL+1,w,c
  2594  000B14  22DA               	addwfc	fsr2h,f,c
  2595  000B16  0E00               	movlw	0
  2596  000B18  6EDF               	movwf	indf2,c
  2597                           
  2598                           ;dc_motor.c: 88:     mR->direction = 0;
  2599  000B1A  EE20 F001          	lfsr	2,1
  2600  000B1E  5024               	movf	moveBackward@mR,w,c
  2601  000B20  26D9               	addwf	fsr2l,f,c
  2602  000B22  5025               	movf	moveBackward@mR+1,w,c
  2603  000B24  22DA               	addwfc	fsr2h,f,c
  2604  000B26  0E00               	movlw	0
  2605  000B28  6EDF               	movwf	indf2,c
  2606                           
  2607                           ;dc_motor.c: 89:     for(int i = 0; i < max_power; i++)
  2608  000B2A  0E00               	movlw	0
  2609  000B2C  6E2A               	movwf	moveBackward@i+1,c
  2610  000B2E  0E00               	movlw	0
  2611  000B30  6E29               	movwf	moveBackward@i,c
  2612  000B32  D021               	goto	l2383
  2613  000B34                     l2373:
  2614                           
  2615                           ;dc_motor.c: 90:     {;dc_motor.c: 91:         mL->power = i;
  2616  000B34  C022  FFD9         	movff	moveBackward@mL,fsr2l
  2617  000B38  C023  FFDA         	movff	moveBackward@mL+1,fsr2h
  2618  000B3C  C029  FFDF         	movff	moveBackward@i,indf2
  2619                           
  2620                           ;dc_motor.c: 92:         mR->power = i;
  2621  000B40  C024  FFD9         	movff	moveBackward@mR,fsr2l
  2622  000B44  C025  FFDA         	movff	moveBackward@mR+1,fsr2h
  2623  000B48  C029  FFDF         	movff	moveBackward@i,indf2
  2624                           
  2625                           ;dc_motor.c: 93:         setMotorPWM(mL);
  2626  000B4C  C022  F019         	movff	moveBackward@mL,setMotorPWM@m
  2627  000B50  C023  F01A         	movff	moveBackward@mL+1,setMotorPWM@m+1
  2628  000B54  EC75  F002         	call	_setMotorPWM	;wreg free
  2629                           
  2630                           ;dc_motor.c: 94:         setMotorPWM(mR);
  2631  000B58  C024  F019         	movff	moveBackward@mR,setMotorPWM@m
  2632  000B5C  C025  F01A         	movff	moveBackward@mR+1,setMotorPWM@m+1
  2633  000B60  EC75  F002         	call	_setMotorPWM	;wreg free
  2634                           
  2635                           ;dc_motor.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2636  000B64  0E03               	movlw	3
  2637  000B66  6E28               	movwf	??_moveBackward& (0+255),c
  2638  000B68  0E98               	movlw	152
  2639  000B6A                     u1987:
  2640  000B6A  2EE8               	decfsz	wreg,f,c
  2641  000B6C  D7FE               	bra	u1987
  2642  000B6E  2E28               	decfsz	??_moveBackward& (0+255),f,c
  2643  000B70  D7FC               	bra	u1987
  2644                           
  2645                           ;dc_motor.c: 96:     }
  2646  000B72  4A29               	infsnz	moveBackward@i,f,c
  2647  000B74  2A2A               	incf	moveBackward@i+1,f,c
  2648  000B76                     l2383:
  2649  000B76  5026               	movf	moveBackward@max_power,w,c
  2650  000B78  5C29               	subwf	moveBackward@i,w,c
  2651  000B7A  502A               	movf	moveBackward@i+1,w,c
  2652  000B7C  0A80               	xorlw	128
  2653  000B7E  6E28               	movwf	??_moveBackward& (0+255),c
  2654  000B80  5027               	movf	moveBackward@max_power+1,w,c
  2655  000B82  0A80               	xorlw	128
  2656  000B84  5828               	subwfb	??_moveBackward& (0+255),w,c
  2657  000B86  B0D8               	btfsc	status,0,c
  2658  000B88  0012               	return	
  2659  000B8A  D7D4               	goto	l2373
  2660  000B8C                     __end_of_moveBackward:
  2661                           	opt callstack 0
  2662                           
  2663 ;; *************** function _moveToBeacon *****************
  2664 ;; Defined at:
  2665 ;;		line 43 in file "subroutines.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  2668 ;;		 -> main@motorL(9), 
  2669 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  2670 ;;		 -> main@motorR(9), 
  2671 ;;  speed           2   46[COMRAM] int 
  2672 ;;  time            2   48[COMRAM] PTR volatile unsigned lo
  2673 ;;		 -> movement_time(4), 
  2674 ;;  exit_flag       2   50[COMRAM] PTR volatile unsigned ch
  2675 ;;		 -> NULL(0), RFID_flag(1), 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      unsigned char 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2687 ;;      Params:        10       0       0       0
  2688 ;;      Locals:         0       0       0       0
  2689 ;;      Temps:          1       0       0       0
  2690 ;;      Totals:        11       0       0       0
  2691 ;;Total ram usage:       11 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    7
  2694 ;; This function calls:
  2695 ;;		_ClearLCD
  2696 ;;		_LCD_String
  2697 ;;		_moveForward
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text17
  2704  000EAE                     __ptext17:
  2705                           	opt callstack 0
  2706  000EAE                     _moveToBeacon:
  2707                           	opt callstack 23
  2708                           
  2709                           ;subroutines.c: 43: volatile char moveToBeacon(struct DC_motor *mL, struct DC_motor *mR,
      +                           int speed,;subroutines.c: 44:                         volatile unsigned long *time, vol
      +                          atile char *exit_flag);subroutines.c: 45: {;subroutines.c: 46:     moveForward(mL,mR,spe
      +                          ed);
  2710                           
  2711                           ;incstack = 0
  2712  000EAE  C02B  F022         	movff	moveToBeacon@mL,moveForward@mL
  2713  000EB2  C02C  F023         	movff	moveToBeacon@mL+1,moveForward@mL+1
  2714  000EB6  C02D  F024         	movff	moveToBeacon@mR,moveForward@mR
  2715  000EBA  C02E  F025         	movff	moveToBeacon@mR+1,moveForward@mR+1
  2716  000EBE  C02F  F026         	movff	moveToBeacon@speed,moveForward@max_power
  2717  000EC2  C030  F027         	movff	moveToBeacon@speed+1,moveForward@max_power+1
  2718  000EC6  ECC6  F005         	call	_moveForward	;wreg free
  2719                           
  2720                           ;subroutines.c: 47:     ClearLCD();
  2721  000ECA  EC1A  F008         	call	_ClearLCD	;wreg free
  2722                           
  2723                           ;subroutines.c: 48:     LCD_String("MOVING TO BOMB");
  2724  000ECE  0E51               	movlw	low STR_5
  2725  000ED0  6E0F               	movwf	LCD_String@string,c
  2726  000ED2  0E03               	movlw	high STR_5
  2727  000ED4  6E10               	movwf	LCD_String@string+1,c
  2728  000ED6  EC43  F006         	call	_LCD_String	;wreg free
  2729  000EDA                     l2539:
  2730                           
  2731                           ;subroutines.c: 52:           {;subroutines.c: 55:               if(*exit_flag == 1)
  2732  000EDA  C033  FFD9         	movff	moveToBeacon@exit_flag,fsr2l
  2733  000EDE  C034  FFDA         	movff	moveToBeacon@exit_flag+1,fsr2h
  2734  000EE2  04DE               	decf	postinc2,w,c
  2735  000EE4  A4D8               	btfss	status,2,c
  2736  000EE6  D7F9               	goto	l2539
  2737                           
  2738                           ;subroutines.c: 58:                   return 2;
  2739  000EE8  0E02               	movlw	2
  2740  000EEA  0012               	return		;funcret
  2741  000EEC                     __end_of_moveToBeacon:
  2742                           	opt callstack 0
  2743                           
  2744 ;; *************** function _moveForward *****************
  2745 ;; Defined at:
  2746 ;;		line 70 in file "dc_motor.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  2749 ;;		 -> main@motorL(9), 
  2750 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  2751 ;;		 -> main@motorR(9), 
  2752 ;;  max_power       2   37[COMRAM] int 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  i               2   40[COMRAM] int 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2764 ;;      Params:         6       0       0       0
  2765 ;;      Locals:         2       0       0       0
  2766 ;;      Temps:          1       0       0       0
  2767 ;;      Totals:         9       0       0       0
  2768 ;;Total ram usage:        9 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    5
  2771 ;; This function calls:
  2772 ;;		_setMotorPWM
  2773 ;; This function is called by:
  2774 ;;		_moveToBeacon
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text18
  2779  000B8C                     __ptext18:
  2780                           	opt callstack 0
  2781  000B8C                     _moveForward:
  2782                           	opt callstack 24
  2783                           
  2784                           ;dc_motor.c: 70: void moveForward(struct DC_motor *mL, struct DC_motor *mR, int max_powe
      +                          r);dc_motor.c: 71: {;dc_motor.c: 72:     mL->direction = 1;
  2785                           
  2786                           ;incstack = 0
  2787  000B8C  EE20 F001          	lfsr	2,1
  2788  000B90  5022               	movf	moveForward@mL,w,c
  2789  000B92  26D9               	addwf	fsr2l,f,c
  2790  000B94  5023               	movf	moveForward@mL+1,w,c
  2791  000B96  22DA               	addwfc	fsr2h,f,c
  2792  000B98  0E01               	movlw	1
  2793  000B9A  6EDF               	movwf	indf2,c
  2794                           
  2795                           ;dc_motor.c: 73:     mR->direction = 1;
  2796  000B9C  EE20 F001          	lfsr	2,1
  2797  000BA0  5024               	movf	moveForward@mR,w,c
  2798  000BA2  26D9               	addwf	fsr2l,f,c
  2799  000BA4  5025               	movf	moveForward@mR+1,w,c
  2800  000BA6  22DA               	addwfc	fsr2h,f,c
  2801  000BA8  0E01               	movlw	1
  2802  000BAA  6EDF               	movwf	indf2,c
  2803                           
  2804                           ;dc_motor.c: 74:     for(int i = 0; i < max_power; i++)
  2805  000BAC  0E00               	movlw	0
  2806  000BAE  6E2A               	movwf	moveForward@i+1,c
  2807  000BB0  0E00               	movlw	0
  2808  000BB2  6E29               	movwf	moveForward@i,c
  2809  000BB4  D021               	goto	l2367
  2810  000BB6                     l2357:
  2811                           
  2812                           ;dc_motor.c: 75:     {;dc_motor.c: 76:         mL->power = i;
  2813  000BB6  C022  FFD9         	movff	moveForward@mL,fsr2l
  2814  000BBA  C023  FFDA         	movff	moveForward@mL+1,fsr2h
  2815  000BBE  C029  FFDF         	movff	moveForward@i,indf2
  2816                           
  2817                           ;dc_motor.c: 77:         mR->power = i;
  2818  000BC2  C024  FFD9         	movff	moveForward@mR,fsr2l
  2819  000BC6  C025  FFDA         	movff	moveForward@mR+1,fsr2h
  2820  000BCA  C029  FFDF         	movff	moveForward@i,indf2
  2821                           
  2822                           ;dc_motor.c: 78:         setMotorPWM(mL);
  2823  000BCE  C022  F019         	movff	moveForward@mL,setMotorPWM@m
  2824  000BD2  C023  F01A         	movff	moveForward@mL+1,setMotorPWM@m+1
  2825  000BD6  EC75  F002         	call	_setMotorPWM	;wreg free
  2826                           
  2827                           ;dc_motor.c: 79:         setMotorPWM(mR);
  2828  000BDA  C024  F019         	movff	moveForward@mR,setMotorPWM@m
  2829  000BDE  C025  F01A         	movff	moveForward@mR+1,setMotorPWM@m+1
  2830  000BE2  EC75  F002         	call	_setMotorPWM	;wreg free
  2831                           
  2832                           ;dc_motor.c: 80:         _delay((unsigned long)((1)*(8000000/4000.0)));
  2833  000BE6  0E03               	movlw	3
  2834  000BE8  6E28               	movwf	??_moveForward& (0+255),c
  2835  000BEA  0E98               	movlw	152
  2836  000BEC                     u1997:
  2837  000BEC  2EE8               	decfsz	wreg,f,c
  2838  000BEE  D7FE               	bra	u1997
  2839  000BF0  2E28               	decfsz	??_moveForward& (0+255),f,c
  2840  000BF2  D7FC               	bra	u1997
  2841                           
  2842                           ;dc_motor.c: 81:     }
  2843  000BF4  4A29               	infsnz	moveForward@i,f,c
  2844  000BF6  2A2A               	incf	moveForward@i+1,f,c
  2845  000BF8                     l2367:
  2846  000BF8  5026               	movf	moveForward@max_power,w,c
  2847  000BFA  5C29               	subwf	moveForward@i,w,c
  2848  000BFC  502A               	movf	moveForward@i+1,w,c
  2849  000BFE  0A80               	xorlw	128
  2850  000C00  6E28               	movwf	??_moveForward& (0+255),c
  2851  000C02  5027               	movf	moveForward@max_power+1,w,c
  2852  000C04  0A80               	xorlw	128
  2853  000C06  5828               	subwfb	??_moveForward& (0+255),w,c
  2854  000C08  B0D8               	btfsc	status,0,c
  2855  000C0A  0012               	return	
  2856  000C0C  D7D4               	goto	l2357
  2857  000C0E                     __end_of_moveForward:
  2858                           	opt callstack 0
  2859                           
  2860 ;; *************** function _LCD_String *****************
  2861 ;; Defined at:
  2862 ;;		line 119 in file "LCDIO.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  string          2   14[COMRAM] PTR unsigned char 
  2865 ;;		 -> STR_12(16), STR_11(16), STR_10(13), debug@buf2(16), 
  2866 ;;		 -> debug@buf(16), STR_7(16), STR_6(15), STR_5(15), 
  2867 ;;		 -> STR_4(10), STR_3(16), STR_2(16), STR_1(15), 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2879 ;;      Params:         2       0       0       0
  2880 ;;      Locals:         0       0       0       0
  2881 ;;      Temps:          0       0       0       0
  2882 ;;      Totals:         2       0       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    6
  2886 ;; This function calls:
  2887 ;;		_SendLCD
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;;		_check_RFID
  2891 ;;		_scanForBeacon
  2892 ;;		_moveToBeacon
  2893 ;;		_returnHome
  2894 ;;		_stopAndDisplay
  2895 ;;		_waitForInput
  2896 ;;		_debug
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text19
  2901  000C86                     __ptext19:
  2902                           	opt callstack 0
  2903  000C86                     _LCD_String:
  2904                           	opt callstack 23
  2905                           
  2906                           ;LCDIO.c: 121: while(*string != 0){
  2907                           
  2908                           ;incstack = 0
  2909  000C86  D01A               	goto	l2239
  2910  000C88                     l2233:
  2911                           
  2912                           ;LCDIO.c: 124: SendLCD(*string++,1);
  2913  000C88  0E01               	movlw	1
  2914  000C8A  6E0D               	movwf	SendLCD@type,c
  2915  000C8C  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2916  000C90  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2917  000C94  6AF8               	clrf	tblptru,c
  2918  000C96  0E02               	movlw	(high __ramtop+-1)
  2919  000C98  64F7               	cpfsgt	tblptrh,c
  2920  000C9A  D003               	bra	u1347
  2921  000C9C  0008               	tblrd		*
  2922  000C9E  50F5               	movf	tablat,w,c
  2923  000CA0  D005               	bra	u1340
  2924  000CA2                     u1347:
  2925  000CA2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2926  000CA6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2927  000CAA  50EF               	movf	indf0,w,c
  2928  000CAC                     u1340:
  2929  000CAC  ECAB  F007         	call	_SendLCD
  2930  000CB0  4A0F               	infsnz	LCD_String@string,f,c
  2931  000CB2  2A10               	incf	LCD_String@string+1,f,c
  2932                           
  2933                           ;LCDIO.c: 125:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  2934  000CB4  0E21               	movlw	33
  2935  000CB6                     u2007:
  2936  000CB6  2EE8               	decfsz	wreg,f,c
  2937  000CB8  D7FE               	bra	u2007
  2938  000CBA  F000               	nop	
  2939  000CBC                     l2239:
  2940                           
  2941                           ;LCDIO.c: 121: while(*string != 0){
  2942  000CBC  C00F  FFF6         	movff	LCD_String@string,tblptrl
  2943  000CC0  C010  FFF7         	movff	LCD_String@string+1,tblptrh
  2944  000CC4  6AF8               	clrf	tblptru,c
  2945  000CC6  0E02               	movlw	(high __ramtop+-1)
  2946  000CC8  64F7               	cpfsgt	tblptrh,c
  2947  000CCA  D003               	bra	u1357
  2948  000CCC  0008               	tblrd		*
  2949  000CCE  50F5               	movf	tablat,w,c
  2950  000CD0  D005               	bra	u1350
  2951  000CD2                     u1357:
  2952  000CD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2953  000CD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2954  000CDA  50EF               	movf	indf0,w,c
  2955  000CDC                     u1350:
  2956  000CDC  0900               	iorlw	0
  2957  000CDE  B4D8               	btfsc	status,2,c
  2958  000CE0  0012               	return	
  2959  000CE2  D7D2               	goto	l2233
  2960  000CE4                     __end_of_LCD_String:
  2961                           	opt callstack 0
  2962                           
  2963 ;; *************** function _ClearLCD *****************
  2964 ;; Defined at:
  2965 ;;		line 131 in file "LCDIO.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2979 ;;      Params:         0       0       0       0
  2980 ;;      Locals:         0       0       0       0
  2981 ;;      Temps:          1       0       0       0
  2982 ;;      Totals:         1       0       0       0
  2983 ;;Total ram usage:        1 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    6
  2986 ;; This function calls:
  2987 ;;		_SendLCD
  2988 ;; This function is called by:
  2989 ;;		_display_RFID
  2990 ;;		_scanForBeacon
  2991 ;;		_moveToBeacon
  2992 ;;		_returnHome
  2993 ;;		_stopAndDisplay
  2994 ;;		_waitForInput
  2995 ;;		_debug
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text20
  3000  001034                     __ptext20:
  3001                           	opt callstack 0
  3002  001034                     _ClearLCD:
  3003                           	opt callstack 23
  3004                           
  3005                           ;LCDIO.c: 132:     SendLCD(0b00000001,0);
  3006                           
  3007                           ;incstack = 0
  3008  001034  0E00               	movlw	0
  3009  001036  6E0D               	movwf	SendLCD@type,c
  3010  001038  0E01               	movlw	1
  3011  00103A  ECAB  F007         	call	_SendLCD
  3012                           
  3013                           ;LCDIO.c: 133:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3014  00103E  0E0D               	movlw	13
  3015  001040  6E0F               	movwf	??_ClearLCD& (0+255),c
  3016  001042  0EFC               	movlw	252
  3017  001044                     u2017:
  3018  001044  2EE8               	decfsz	wreg,f,c
  3019  001046  D7FE               	bra	u2017
  3020  001048  2E0F               	decfsz	??_ClearLCD& (0+255),f,c
  3021  00104A  D7FC               	bra	u2017
  3022  00104C  0012               	return		;funcret
  3023  00104E                     __end_of_ClearLCD:
  3024                           	opt callstack 0
  3025                           
  3026 ;; *************** function _SendLCD *****************
  3027 ;; Defined at:
  3028 ;;		line 44 in file "LCDIO.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  Byte            1    wreg     unsigned char 
  3031 ;;  type            1   12[COMRAM] unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  Byte            1   13[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3043 ;;      Params:         1       0       0       0
  3044 ;;      Locals:         1       0       0       0
  3045 ;;      Temps:          0       0       0       0
  3046 ;;      Totals:         2       0       0       0
  3047 ;;Total ram usage:        2 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    5
  3050 ;; This function calls:
  3051 ;;		_LCDout
  3052 ;; This function is called by:
  3053 ;;		_init_LCD
  3054 ;;		_SetLine
  3055 ;;		_LCD_String
  3056 ;;		_ClearLCD
  3057 ;;		_display_RFID
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text21
  3062  000F56                     __ptext21:
  3063                           	opt callstack 0
  3064  000F56                     _SendLCD:
  3065                           	opt callstack 23
  3066                           
  3067                           ;incstack = 0
  3068                           ;SendLCD@Byte stored from wreg
  3069  000F56  6E0E               	movwf	SendLCD@Byte,c
  3070                           
  3071                           ;LCDIO.c: 47:  LATAbits.LATA7 = type;
  3072  000F58  B00D               	btfsc	SendLCD@type,0,c
  3073  000F5A  D002               	bra	u1275
  3074  000F5C  9E89               	bcf	3977,7,c	;volatile
  3075  000F5E  D001               	bra	u1276
  3076  000F60                     u1275:
  3077  000F60  8E89               	bsf	3977,7,c	;volatile
  3078  000F62                     u1276:
  3079                           
  3080                           ;LCDIO.c: 49:  LCDout((0b11110000 & Byte) >> 4);
  3081  000F62  380E               	swapf	SendLCD@Byte,w,c
  3082  000F64  0B0F               	andlw	15
  3083  000F66  0B0F               	andlw	15
  3084  000F68  EC07  F006         	call	_LCDout
  3085                           
  3086                           ;LCDIO.c: 50:  _delay((unsigned long)((10)*(8000000/4000000.0)));
  3087  000F6C  0E06               	movlw	6
  3088  000F6E                     u2027:
  3089  000F6E  2EE8               	decfsz	wreg,f,c
  3090  000F70  D7FE               	bra	u2027
  3091  000F72  D000               	nop2	
  3092                           
  3093                           ;LCDIO.c: 53:  LCDout(0b00001111 & Byte);
  3094  000F74  500E               	movf	SendLCD@Byte,w,c
  3095  000F76  0B0F               	andlw	15
  3096  000F78  EC07  F006         	call	_LCDout
  3097                           
  3098                           ;LCDIO.c: 54:  _delay((unsigned long)((50)*(8000000/4000000.0)));
  3099  000F7C  0E21               	movlw	33
  3100  000F7E                     u2037:
  3101  000F7E  2EE8               	decfsz	wreg,f,c
  3102  000F80  D7FE               	bra	u2037
  3103  000F82  F000               	nop	
  3104  000F84  0012               	return		;funcret
  3105  000F86                     __end_of_SendLCD:
  3106                           	opt callstack 0
  3107                           
  3108 ;; *************** function _LCDout *****************
  3109 ;; Defined at:
  3110 ;;		line 31 in file "LCDIO.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  number          1    wreg     unsigned char 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  number          1   11[COMRAM] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3124 ;;      Params:         0       0       0       0
  3125 ;;      Locals:         1       0       0       0
  3126 ;;      Temps:          1       0       0       0
  3127 ;;      Totals:         2       0       0       0
  3128 ;;Total ram usage:        2 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    4
  3131 ;; This function calls:
  3132 ;;		_E_TOG
  3133 ;; This function is called by:
  3134 ;;		_SendLCD
  3135 ;;		_init_LCD
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text22
  3140  000C0E                     __ptext22:
  3141                           	opt callstack 0
  3142  000C0E                     _LCDout:
  3143                           	opt callstack 23
  3144                           
  3145                           ;incstack = 0
  3146                           ;LCDout@number stored from wreg
  3147  000C0E  6E0C               	movwf	LCDout@number,c
  3148                           
  3149                           ;LCDIO.c: 33:  LATCbits.LATC0 = (0b0001 & number);
  3150  000C10  C00C  F00B         	movff	LCDout@number,??_LCDout
  3151  000C14  0E01               	movlw	1
  3152  000C16  160B               	andwf	??_LCDout,f,c
  3153  000C18  508B               	movf	3979,w,c	;volatile
  3154  000C1A  180B               	xorwf	??_LCDout,w,c
  3155  000C1C  0BFE               	andlw	-2
  3156  000C1E  180B               	xorwf	??_LCDout,w,c
  3157  000C20  6E8B               	movwf	3979,c	;volatile
  3158                           
  3159                           ;LCDIO.c: 34:  LATCbits.LATC3 = (0b0010 & number) >> 1;
  3160  000C22  C00C  F00B         	movff	LCDout@number,??_LCDout
  3161  000C26  90D8               	bcf	status,0,c
  3162  000C28  320B               	rrcf	??_LCDout,f,c
  3163  000C2A  0E01               	movlw	1
  3164  000C2C  160B               	andwf	??_LCDout,f,c
  3165  000C2E  460B               	rlncf	??_LCDout,f,c
  3166  000C30  460B               	rlncf	??_LCDout,f,c
  3167  000C32  460B               	rlncf	??_LCDout,f,c
  3168  000C34  508B               	movf	3979,w,c	;volatile
  3169  000C36  180B               	xorwf	??_LCDout,w,c
  3170  000C38  0BF7               	andlw	-9
  3171  000C3A  180B               	xorwf	??_LCDout,w,c
  3172  000C3C  6E8B               	movwf	3979,c	;volatile
  3173                           
  3174                           ;LCDIO.c: 35:  LATDbits.LATD0 = (0b0100 & number) >> 2;
  3175  000C3E  C00C  F00B         	movff	LCDout@number,??_LCDout
  3176  000C42  90D8               	bcf	status,0,c
  3177  000C44  320B               	rrcf	??_LCDout,f,c
  3178  000C46  90D8               	bcf	status,0,c
  3179  000C48  320B               	rrcf	??_LCDout,f,c
  3180  000C4A  0E01               	movlw	1
  3181  000C4C  160B               	andwf	??_LCDout,f,c
  3182  000C4E  508C               	movf	3980,w,c	;volatile
  3183  000C50  180B               	xorwf	??_LCDout,w,c
  3184  000C52  0BFE               	andlw	-2
  3185  000C54  180B               	xorwf	??_LCDout,w,c
  3186  000C56  6E8C               	movwf	3980,c	;volatile
  3187                           
  3188                           ;LCDIO.c: 36:  LATDbits.LATD1 = (0b1000 & number) >> 3;
  3189  000C58  C00C  F00B         	movff	LCDout@number,??_LCDout
  3190  000C5C  90D8               	bcf	status,0,c
  3191  000C5E  320B               	rrcf	??_LCDout,f,c
  3192  000C60  90D8               	bcf	status,0,c
  3193  000C62  320B               	rrcf	??_LCDout,f,c
  3194  000C64  90D8               	bcf	status,0,c
  3195  000C66  320B               	rrcf	??_LCDout,f,c
  3196  000C68  0E01               	movlw	1
  3197  000C6A  160B               	andwf	??_LCDout,f,c
  3198  000C6C  460B               	rlncf	??_LCDout,f,c
  3199  000C6E  508C               	movf	3980,w,c	;volatile
  3200  000C70  180B               	xorwf	??_LCDout,w,c
  3201  000C72  0BFD               	andlw	-3
  3202  000C74  180B               	xorwf	??_LCDout,w,c
  3203  000C76  6E8C               	movwf	3980,c	;volatile
  3204                           
  3205                           ;LCDIO.c: 39:  E_TOG();
  3206  000C78  EC33  F008         	call	_E_TOG	;wreg free
  3207                           
  3208                           ;LCDIO.c: 40: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3209  000C7C  0E03               	movlw	3
  3210  000C7E                     u2047:
  3211  000C7E  2EE8               	decfsz	wreg,f,c
  3212  000C80  D7FE               	bra	u2047
  3213  000C82  F000               	nop	
  3214  000C84  0012               	return		;funcret
  3215  000C86                     __end_of_LCDout:
  3216                           	opt callstack 0
  3217                           
  3218 ;; *************** function _E_TOG *****************
  3219 ;; Defined at:
  3220 ;;		line 23 in file "LCDIO.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      void 
  3227 ;; Registers used:
  3228 ;;		wreg
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3234 ;;      Params:         0       0       0       0
  3235 ;;      Locals:         0       0       0       0
  3236 ;;      Temps:          0       0       0       0
  3237 ;;      Totals:         0       0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    3
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_LCDout
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text23
  3249  001066                     __ptext23:
  3250                           	opt callstack 0
  3251  001066                     _E_TOG:
  3252                           	opt callstack 23
  3253                           
  3254                           ;LCDIO.c: 25: LATAbits.LATA6 = 1;
  3255                           
  3256                           ;incstack = 0
  3257  001066  8C89               	bsf	3977,6,c	;volatile
  3258                           
  3259                           ;LCDIO.c: 26: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3260  001068  0E03               	movlw	3
  3261  00106A                     u2057:
  3262  00106A  2EE8               	decfsz	wreg,f,c
  3263  00106C  D7FE               	bra	u2057
  3264  00106E  F000               	nop	
  3265                           
  3266                           ;LCDIO.c: 27: LATAbits.LATA6 = 0;
  3267  001070  9C89               	bcf	3977,6,c	;volatile
  3268  001072  0012               	return		;funcret
  3269  001074                     __end_of_E_TOG:
  3270                           	opt callstack 0
  3271                           
  3272 ;; *************** function _init_motor_struct *****************
  3273 ;; Defined at:
  3274 ;;		line 99 in file "dc_motor.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  mL              2   33[COMRAM] PTR struct DC_motor
  3277 ;;		 -> main@motorL(9), 
  3278 ;;  mR              2   35[COMRAM] PTR struct DC_motor
  3279 ;;		 -> main@motorR(9), 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3291 ;;      Params:         4       0       0       0
  3292 ;;      Locals:         0       0       0       0
  3293 ;;      Temps:          0       0       0       0
  3294 ;;      Totals:         4       0       0       0
  3295 ;;Total ram usage:        4 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    5
  3298 ;; This function calls:
  3299 ;;		_setMotorPWM
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text24
  3306  000700                     __ptext24:
  3307                           	opt callstack 0
  3308  000700                     _init_motor_struct:
  3309                           	opt callstack 25
  3310                           
  3311                           ;dc_motor.c: 99: void init_motor_struct(struct DC_motor *mL, struct DC_motor *mR);dc_mot
      +                          or.c: 100: {;dc_motor.c: 102: mL->power = 0;
  3312                           
  3313                           ;incstack = 0
  3314  000700  C022  FFD9         	movff	init_motor_struct@mL,fsr2l
  3315  000704  C023  FFDA         	movff	init_motor_struct@mL+1,fsr2h
  3316  000708  0E00               	movlw	0
  3317  00070A  6EDF               	movwf	indf2,c
  3318                           
  3319                           ;dc_motor.c: 103: mL->direction = 1;
  3320  00070C  EE20 F001          	lfsr	2,1
  3321  000710  5022               	movf	init_motor_struct@mL,w,c
  3322  000712  26D9               	addwf	fsr2l,f,c
  3323  000714  5023               	movf	init_motor_struct@mL+1,w,c
  3324  000716  22DA               	addwfc	fsr2h,f,c
  3325  000718  0E01               	movlw	1
  3326  00071A  6EDF               	movwf	indf2,c
  3327                           
  3328                           ;dc_motor.c: 104: mL->dutyLowByte = (unsigned char *)(&PDC0L);
  3329  00071C  EE20 F002          	lfsr	2,2
  3330  000720  5022               	movf	init_motor_struct@mL,w,c
  3331  000722  26D9               	addwf	fsr2l,f,c
  3332  000724  5023               	movf	init_motor_struct@mL+1,w,c
  3333  000726  22DA               	addwfc	fsr2h,f,c
  3334  000728  0E79               	movlw	121
  3335  00072A  6EDE               	movwf	postinc2,c
  3336  00072C  0E0F               	movlw	15
  3337  00072E  6EDD               	movwf	postdec2,c
  3338                           
  3339                           ;dc_motor.c: 105: mL->dutyHighByte = (unsigned char *)(&PDC0H);
  3340  000730  EE20 F004          	lfsr	2,4
  3341  000734  5022               	movf	init_motor_struct@mL,w,c
  3342  000736  26D9               	addwf	fsr2l,f,c
  3343  000738  5023               	movf	init_motor_struct@mL+1,w,c
  3344  00073A  22DA               	addwfc	fsr2h,f,c
  3345  00073C  0E78               	movlw	120
  3346  00073E  6EDE               	movwf	postinc2,c
  3347  000740  0E0F               	movlw	15
  3348  000742  6EDD               	movwf	postdec2,c
  3349                           
  3350                           ;dc_motor.c: 106: mL->dir_pin=0;
  3351  000744  EE20 F006          	lfsr	2,6
  3352  000748  5022               	movf	init_motor_struct@mL,w,c
  3353  00074A  26D9               	addwf	fsr2l,f,c
  3354  00074C  5023               	movf	init_motor_struct@mL+1,w,c
  3355  00074E  22DA               	addwfc	fsr2h,f,c
  3356  000750  0E00               	movlw	0
  3357  000752  6EDF               	movwf	indf2,c
  3358                           
  3359                           ;dc_motor.c: 107: mL->PWMperiod=199;
  3360  000754  EE20 F007          	lfsr	2,7
  3361  000758  5022               	movf	init_motor_struct@mL,w,c
  3362  00075A  26D9               	addwf	fsr2l,f,c
  3363  00075C  5023               	movf	init_motor_struct@mL+1,w,c
  3364  00075E  22DA               	addwfc	fsr2h,f,c
  3365  000760  0EC7               	movlw	199
  3366  000762  6EDE               	movwf	postinc2,c
  3367  000764  0E00               	movlw	0
  3368  000766  6EDD               	movwf	postdec2,c
  3369                           
  3370                           ;dc_motor.c: 109: mR->power = 0;
  3371  000768  C024  FFD9         	movff	init_motor_struct@mR,fsr2l
  3372  00076C  C025  FFDA         	movff	init_motor_struct@mR+1,fsr2h
  3373  000770  0E00               	movlw	0
  3374  000772  6EDF               	movwf	indf2,c
  3375                           
  3376                           ;dc_motor.c: 110: mR->direction = 1;
  3377  000774  EE20 F001          	lfsr	2,1
  3378  000778  5024               	movf	init_motor_struct@mR,w,c
  3379  00077A  26D9               	addwf	fsr2l,f,c
  3380  00077C  5025               	movf	init_motor_struct@mR+1,w,c
  3381  00077E  22DA               	addwfc	fsr2h,f,c
  3382  000780  0E01               	movlw	1
  3383  000782  6EDF               	movwf	indf2,c
  3384                           
  3385                           ;dc_motor.c: 111: mR->dutyLowByte = (unsigned char *)(&PDC1L);
  3386  000784  EE20 F002          	lfsr	2,2
  3387  000788  5024               	movf	init_motor_struct@mR,w,c
  3388  00078A  26D9               	addwf	fsr2l,f,c
  3389  00078C  5025               	movf	init_motor_struct@mR+1,w,c
  3390  00078E  22DA               	addwfc	fsr2h,f,c
  3391  000790  0E77               	movlw	119
  3392  000792  6EDE               	movwf	postinc2,c
  3393  000794  0E0F               	movlw	15
  3394  000796  6EDD               	movwf	postdec2,c
  3395                           
  3396                           ;dc_motor.c: 112: mR->dutyHighByte = (unsigned char *)(&PDC1H);
  3397  000798  EE20 F004          	lfsr	2,4
  3398  00079C  5024               	movf	init_motor_struct@mR,w,c
  3399  00079E  26D9               	addwf	fsr2l,f,c
  3400  0007A0  5025               	movf	init_motor_struct@mR+1,w,c
  3401  0007A2  22DA               	addwfc	fsr2h,f,c
  3402  0007A4  0E76               	movlw	118
  3403  0007A6  6EDE               	movwf	postinc2,c
  3404  0007A8  0E0F               	movlw	15
  3405  0007AA  6EDD               	movwf	postdec2,c
  3406                           
  3407                           ;dc_motor.c: 113: mR->dir_pin=2;
  3408  0007AC  EE20 F006          	lfsr	2,6
  3409  0007B0  5024               	movf	init_motor_struct@mR,w,c
  3410  0007B2  26D9               	addwf	fsr2l,f,c
  3411  0007B4  5025               	movf	init_motor_struct@mR+1,w,c
  3412  0007B6  22DA               	addwfc	fsr2h,f,c
  3413  0007B8  0E02               	movlw	2
  3414  0007BA  6EDF               	movwf	indf2,c
  3415                           
  3416                           ;dc_motor.c: 114: mR->PWMperiod=199;
  3417  0007BC  EE20 F007          	lfsr	2,7
  3418  0007C0  5024               	movf	init_motor_struct@mR,w,c
  3419  0007C2  26D9               	addwf	fsr2l,f,c
  3420  0007C4  5025               	movf	init_motor_struct@mR+1,w,c
  3421  0007C6  22DA               	addwfc	fsr2h,f,c
  3422  0007C8  0EC7               	movlw	199
  3423  0007CA  6EDE               	movwf	postinc2,c
  3424  0007CC  0E00               	movlw	0
  3425  0007CE  6EDD               	movwf	postdec2,c
  3426                           
  3427                           ;dc_motor.c: 116: setMotorPWM(mL);
  3428  0007D0  C022  F019         	movff	init_motor_struct@mL,setMotorPWM@m
  3429  0007D4  C023  F01A         	movff	init_motor_struct@mL+1,setMotorPWM@m+1
  3430  0007D8  EC75  F002         	call	_setMotorPWM	;wreg free
  3431                           
  3432                           ;dc_motor.c: 117: setMotorPWM(mR);
  3433  0007DC  C024  F019         	movff	init_motor_struct@mR,setMotorPWM@m
  3434  0007E0  C025  F01A         	movff	init_motor_struct@mR+1,setMotorPWM@m+1
  3435  0007E4  EC75  F002         	call	_setMotorPWM	;wreg free
  3436  0007E8  0012               	return		;funcret
  3437  0007EA                     __end_of_init_motor_struct:
  3438                           	opt callstack 0
  3439                           
  3440 ;; *************** function _setMotorPWM *****************
  3441 ;; Defined at:
  3442 ;;		line 18 in file "dc_motor.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  m               2   24[COMRAM] PTR struct DC_motor
  3445 ;;		 -> main@motorR(9), main@motorL(9), 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  PWMduty         2   31[COMRAM] int 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3457 ;;      Params:         2       0       0       0
  3458 ;;      Locals:         2       0       0       0
  3459 ;;      Temps:          5       0       0       0
  3460 ;;      Totals:         9       0       0       0
  3461 ;;Total ram usage:        9 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    4
  3464 ;; This function calls:
  3465 ;;		___awdiv
  3466 ;;		___wmul
  3467 ;; This function is called by:
  3468 ;;		_stop
  3469 ;;		_turn
  3470 ;;		_moveForward
  3471 ;;		_moveBackward
  3472 ;;		_init_motor_struct
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text25
  3477  0004EA                     __ptext25:
  3478                           	opt callstack 0
  3479  0004EA                     _setMotorPWM:
  3480                           	opt callstack 24
  3481                           
  3482                           ;dc_motor.c: 18: void setMotorPWM(struct DC_motor *m);dc_motor.c: 19: {;dc_motor.c: 20: 
      +                              int PWMduty;;dc_motor.c: 22:     PWMduty = (m->power*m->PWMperiod)/100;
  3483                           
  3484                           ;incstack = 0
  3485  0004EA  C019  FFD9         	movff	setMotorPWM@m,fsr2l
  3486  0004EE  C01A  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3487  0004F2  50DF               	movf	indf2,w,c
  3488  0004F4  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3489  0004F6  501B               	movf	??_setMotorPWM,w,c
  3490  0004F8  6E0B               	movwf	___wmul@multiplier,c
  3491  0004FA  6A0C               	clrf	___wmul@multiplier+1,c
  3492  0004FC  EE20 F007          	lfsr	2,7
  3493  000500  5019               	movf	setMotorPWM@m,w,c
  3494  000502  26D9               	addwf	fsr2l,f,c
  3495  000504  501A               	movf	setMotorPWM@m+1,w,c
  3496  000506  22DA               	addwfc	fsr2h,f,c
  3497  000508  CFDE F00D          	movff	postinc2,___wmul@multiplicand
  3498  00050C  CFDD F00E          	movff	postdec2,___wmul@multiplicand+1
  3499  000510  ECED  F007         	call	___wmul	;wreg free
  3500  000514  C00B  F011         	movff	?___wmul,___awdiv@dividend
  3501  000518  C00C  F012         	movff	?___wmul+1,___awdiv@dividend+1
  3502  00051C  0E00               	movlw	0
  3503  00051E  6E14               	movwf	___awdiv@divisor+1,c
  3504  000520  0E64               	movlw	100
  3505  000522  6E13               	movwf	___awdiv@divisor,c
  3506  000524  EC02  F005         	call	___awdiv	;wreg free
  3507  000528  C011  F020         	movff	?___awdiv,setMotorPWM@PWMduty
  3508  00052C  C012  F021         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3509                           
  3510                           ;dc_motor.c: 24:     if (m->direction)
  3511  000530  EE20 F001          	lfsr	2,1
  3512  000534  5019               	movf	setMotorPWM@m,w,c
  3513  000536  26D9               	addwf	fsr2l,f,c
  3514  000538  501A               	movf	setMotorPWM@m+1,w,c
  3515  00053A  22DA               	addwfc	fsr2h,f,c
  3516  00053C  50DF               	movf	indf2,w,c
  3517  00053E  B4D8               	btfsc	status,2,c
  3518  000540  D024               	goto	l2247
  3519                           
  3520                           ;dc_motor.c: 25:     {;dc_motor.c: 26:         LATB=LATB|(1<<(m->dir_pin));
  3521  000542  EE20 F006          	lfsr	2,6
  3522  000546  5019               	movf	setMotorPWM@m,w,c
  3523  000548  26D9               	addwf	fsr2l,f,c
  3524  00054A  501A               	movf	setMotorPWM@m+1,w,c
  3525  00054C  22DA               	addwfc	fsr2h,f,c
  3526  00054E  50DF               	movf	indf2,w,c
  3527  000550  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3528  000552  0E01               	movlw	1
  3529  000554  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3530  000556  2A1B               	incf	??_setMotorPWM,f,c
  3531  000558  D002               	goto	u1384
  3532  00055A                     u1385:
  3533  00055A  90D8               	bcf	status,0,c
  3534  00055C  361C               	rlcf	??_setMotorPWM+1,f,c
  3535  00055E                     u1384:
  3536  00055E  2E1B               	decfsz	??_setMotorPWM,f,c
  3537  000560  D7FC               	goto	u1385
  3538  000562  501C               	movf	??_setMotorPWM+1,w,c
  3539  000564  108A               	iorwf	3978,w,c	;volatile
  3540  000566  6E8A               	movwf	3978,c	;volatile
  3541                           
  3542                           ;dc_motor.c: 27:   PWMduty=m->PWMperiod-PWMduty;
  3543  000568  EE20 F007          	lfsr	2,7
  3544  00056C  5019               	movf	setMotorPWM@m,w,c
  3545  00056E  26D9               	addwf	fsr2l,f,c
  3546  000570  501A               	movf	setMotorPWM@m+1,w,c
  3547  000572  22DA               	addwfc	fsr2h,f,c
  3548  000574  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3549  000578  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3550  00057C  5020               	movf	setMotorPWM@PWMduty,w,c
  3551  00057E  5C1B               	subwf	??_setMotorPWM,w,c
  3552  000580  6E20               	movwf	setMotorPWM@PWMduty,c
  3553  000582  5021               	movf	setMotorPWM@PWMduty+1,w,c
  3554  000584  581C               	subwfb	??_setMotorPWM+1,w,c
  3555  000586  6E21               	movwf	setMotorPWM@PWMduty+1,c
  3556                           
  3557                           ;dc_motor.c: 28:     }
  3558  000588  D014               	goto	l121
  3559  00058A                     l2247:
  3560                           
  3561                           ;dc_motor.c: 30:     {;dc_motor.c: 31:         LATB=LATB&(~(1<<(m->dir_pin)));
  3562  00058A  EE20 F006          	lfsr	2,6
  3563  00058E  5019               	movf	setMotorPWM@m,w,c
  3564  000590  26D9               	addwf	fsr2l,f,c
  3565  000592  501A               	movf	setMotorPWM@m+1,w,c
  3566  000594  22DA               	addwfc	fsr2h,f,c
  3567  000596  50DF               	movf	indf2,w,c
  3568  000598  6E1B               	movwf	??_setMotorPWM& (0+255),c
  3569  00059A  0E01               	movlw	1
  3570  00059C  6E1C               	movwf	(??_setMotorPWM+1)& (0+255),c
  3571  00059E  2A1B               	incf	??_setMotorPWM,f,c
  3572  0005A0  D002               	goto	u1394
  3573  0005A2                     u1395:
  3574  0005A2  90D8               	bcf	status,0,c
  3575  0005A4  361C               	rlcf	??_setMotorPWM+1,f,c
  3576  0005A6                     u1394:
  3577  0005A6  2E1B               	decfsz	??_setMotorPWM,f,c
  3578  0005A8  D7FC               	goto	u1395
  3579  0005AA  501C               	movf	??_setMotorPWM+1,w,c
  3580  0005AC  0AFF               	xorlw	255
  3581  0005AE  148A               	andwf	3978,w,c	;volatile
  3582  0005B0  6E8A               	movwf	3978,c	;volatile
  3583  0005B2                     l121:
  3584                           
  3585                           ;dc_motor.c: 35:     *(m->dutyLowByte)=PWMduty<<2;
  3586  0005B2  EE20 F002          	lfsr	2,2
  3587  0005B6  5019               	movf	setMotorPWM@m,w,c
  3588  0005B8  26D9               	addwf	fsr2l,f,c
  3589  0005BA  501A               	movf	setMotorPWM@m+1,w,c
  3590  0005BC  22DA               	addwfc	fsr2h,f,c
  3591  0005BE  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3592  0005C2  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3593  0005C6  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3594  0005CA  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3595  0005CE  4420               	rlncf	setMotorPWM@PWMduty,w,c
  3596  0005D0  46E8               	rlncf	wreg,f,c
  3597  0005D2  0BFC               	andlw	252
  3598  0005D4  6EDF               	movwf	indf2,c
  3599                           
  3600                           ;dc_motor.c: 36:     *(m->dutyHighByte)=PWMduty>>6;
  3601  0005D6  EE20 F004          	lfsr	2,4
  3602  0005DA  5019               	movf	setMotorPWM@m,w,c
  3603  0005DC  26D9               	addwf	fsr2l,f,c
  3604  0005DE  501A               	movf	setMotorPWM@m+1,w,c
  3605  0005E0  22DA               	addwfc	fsr2h,f,c
  3606  0005E2  CFDE F01B          	movff	postinc2,??_setMotorPWM
  3607  0005E6  CFDD F01C          	movff	postdec2,??_setMotorPWM+1
  3608  0005EA  C01B  FFD9         	movff	??_setMotorPWM,fsr2l
  3609  0005EE  C01C  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3610  0005F2  C020  F01D         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3611  0005F6  C021  F01E         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3612  0005FA  0E06               	movlw	6
  3613  0005FC  6E1F               	movwf	(??_setMotorPWM+4)& (0+255),c
  3614  0005FE                     u1405:
  3615  0005FE  341E               	rlcf	??_setMotorPWM+3,w,c
  3616  000600  321E               	rrcf	??_setMotorPWM+3,f,c
  3617  000602  321D               	rrcf	??_setMotorPWM+2,f,c
  3618  000604  2E1F               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3619  000606  D7FB               	goto	u1405
  3620  000608  501D               	movf	??_setMotorPWM+2,w,c
  3621  00060A  6EDF               	movwf	indf2,c
  3622  00060C  0012               	return		;funcret
  3623  00060E                     __end_of_setMotorPWM:
  3624                           	opt callstack 0
  3625                           
  3626 ;; *************** function ___wmul *****************
  3627 ;; Defined at:
  3628 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  multiplier      2   10[COMRAM] unsigned int 
  3631 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  product         2   14[COMRAM] unsigned int 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2   10[COMRAM] unsigned int 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0, prodl, prodh
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3643 ;;      Params:         4       0       0       0
  3644 ;;      Locals:         2       0       0       0
  3645 ;;      Temps:          0       0       0       0
  3646 ;;      Totals:         6       0       0       0
  3647 ;;Total ram usage:        6 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    3
  3650 ;; This function calls:
  3651 ;;		Nothing
  3652 ;; This function is called by:
  3653 ;;		_setMotorPWM
  3654 ;; This function uses a non-reentrant model
  3655 ;;
  3656                           
  3657                           	psect	text26
  3658  000FDA                     __ptext26:
  3659                           	opt callstack 0
  3660  000FDA                     ___wmul:
  3661                           	opt callstack 24
  3662                           
  3663                           ;incstack = 0
  3664  000FDA  500B               	movf	___wmul@multiplier,w,c
  3665  000FDC  020D               	mulwf	___wmul@multiplicand,c
  3666  000FDE  CFF3 F00F          	movff	prodl,___wmul@product
  3667  000FE2  CFF4 F010          	movff	prodh,___wmul@product+1
  3668  000FE6  500B               	movf	___wmul@multiplier,w,c
  3669  000FE8  020E               	mulwf	___wmul@multiplicand+1,c
  3670  000FEA  50F3               	movf	prodl,w,c
  3671  000FEC  2610               	addwf	___wmul@product+1,f,c
  3672  000FEE  500C               	movf	___wmul@multiplier+1,w,c
  3673  000FF0  020D               	mulwf	___wmul@multiplicand,c
  3674  000FF2  50F3               	movf	prodl,w,c
  3675  000FF4  2610               	addwf	___wmul@product+1,f,c
  3676  000FF6  C00F  F00B         	movff	___wmul@product,?___wmul
  3677  000FFA  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3678  000FFE  0012               	return		;funcret
  3679  001000                     __end_of___wmul:
  3680                           	opt callstack 0
  3681                           
  3682 ;; *************** function ___awdiv *****************
  3683 ;; Defined at:
  3684 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  dividend        2   16[COMRAM] int 
  3687 ;;  divisor         2   18[COMRAM] int 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  quotient        2   22[COMRAM] int 
  3690 ;;  sign            1   21[COMRAM] unsigned char 
  3691 ;;  counter         1   20[COMRAM] unsigned char 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  2   16[COMRAM] int 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3701 ;;      Params:         4       0       0       0
  3702 ;;      Locals:         4       0       0       0
  3703 ;;      Temps:          0       0       0       0
  3704 ;;      Totals:         8       0       0       0
  3705 ;;Total ram usage:        8 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    3
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_setMotorPWM
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text27
  3716  000A04                     __ptext27:
  3717                           	opt callstack 0
  3718  000A04                     ___awdiv:
  3719                           	opt callstack 24
  3720                           
  3721                           ;incstack = 0
  3722  000A04  0E00               	movlw	0
  3723  000A06  6E16               	movwf	___awdiv@sign,c
  3724  000A08  AE14               	btfss	___awdiv@divisor+1,7,c
  3725  000A0A  D006               	goto	l2195
  3726  000A0C  6C13               	negf	___awdiv@divisor,c
  3727  000A0E  1E14               	comf	___awdiv@divisor+1,f,c
  3728  000A10  B0D8               	btfsc	status,0,c
  3729  000A12  2A14               	incf	___awdiv@divisor+1,f,c
  3730  000A14  0E01               	movlw	1
  3731  000A16  6E16               	movwf	___awdiv@sign,c
  3732  000A18                     l2195:
  3733  000A18  AE12               	btfss	___awdiv@dividend+1,7,c
  3734  000A1A  D006               	goto	l2201
  3735  000A1C  6C11               	negf	___awdiv@dividend,c
  3736  000A1E  1E12               	comf	___awdiv@dividend+1,f,c
  3737  000A20  B0D8               	btfsc	status,0,c
  3738  000A22  2A12               	incf	___awdiv@dividend+1,f,c
  3739  000A24  0E01               	movlw	1
  3740  000A26  1A16               	xorwf	___awdiv@sign,f,c
  3741  000A28                     l2201:
  3742  000A28  0E00               	movlw	0
  3743  000A2A  6E18               	movwf	___awdiv@quotient+1,c
  3744  000A2C  0E00               	movlw	0
  3745  000A2E  6E17               	movwf	___awdiv@quotient,c
  3746  000A30  5013               	movf	___awdiv@divisor,w,c
  3747  000A32  1014               	iorwf	___awdiv@divisor+1,w,c
  3748  000A34  B4D8               	btfsc	status,2,c
  3749  000A36  D01C               	goto	l2223
  3750  000A38  0E01               	movlw	1
  3751  000A3A  6E15               	movwf	___awdiv@counter,c
  3752  000A3C  D004               	goto	l2209
  3753  000A3E                     l2207:
  3754  000A3E  90D8               	bcf	status,0,c
  3755  000A40  3613               	rlcf	___awdiv@divisor,f,c
  3756  000A42  3614               	rlcf	___awdiv@divisor+1,f,c
  3757  000A44  2A15               	incf	___awdiv@counter,f,c
  3758  000A46                     l2209:
  3759  000A46  AE14               	btfss	___awdiv@divisor+1,7,c
  3760  000A48  D7FA               	goto	l2207
  3761  000A4A                     u1310:
  3762  000A4A  90D8               	bcf	status,0,c
  3763  000A4C  3617               	rlcf	___awdiv@quotient,f,c
  3764  000A4E  3618               	rlcf	___awdiv@quotient+1,f,c
  3765  000A50  5013               	movf	___awdiv@divisor,w,c
  3766  000A52  5C11               	subwf	___awdiv@dividend,w,c
  3767  000A54  5014               	movf	___awdiv@divisor+1,w,c
  3768  000A56  5812               	subwfb	___awdiv@dividend+1,w,c
  3769  000A58  A0D8               	btfss	status,0,c
  3770  000A5A  D005               	goto	l2219
  3771  000A5C  5013               	movf	___awdiv@divisor,w,c
  3772  000A5E  5E11               	subwf	___awdiv@dividend,f,c
  3773  000A60  5014               	movf	___awdiv@divisor+1,w,c
  3774  000A62  5A12               	subwfb	___awdiv@dividend+1,f,c
  3775  000A64  8017               	bsf	___awdiv@quotient,0,c
  3776  000A66                     l2219:
  3777  000A66  90D8               	bcf	status,0,c
  3778  000A68  3214               	rrcf	___awdiv@divisor+1,f,c
  3779  000A6A  3213               	rrcf	___awdiv@divisor,f,c
  3780  000A6C  2E15               	decfsz	___awdiv@counter,f,c
  3781  000A6E  D7ED               	goto	u1310
  3782  000A70                     l2223:
  3783  000A70  5016               	movf	___awdiv@sign,w,c
  3784  000A72  B4D8               	btfsc	status,2,c
  3785  000A74  D004               	goto	l2227
  3786  000A76  6C17               	negf	___awdiv@quotient,c
  3787  000A78  1E18               	comf	___awdiv@quotient+1,f,c
  3788  000A7A  B0D8               	btfsc	status,0,c
  3789  000A7C  2A18               	incf	___awdiv@quotient+1,f,c
  3790  000A7E                     l2227:
  3791  000A7E  C017  F011         	movff	___awdiv@quotient,?___awdiv
  3792  000A82  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  3793  000A86  0012               	return		;funcret
  3794  000A88                     __end_of___awdiv:
  3795                           	opt callstack 0
  3796                           
  3797 ;; *************** function _InterruptHandlerLow *****************
  3798 ;; Defined at:
  3799 ;;		line 93 in file "main.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3813 ;;      Params:         0       0       0       0
  3814 ;;      Locals:         0       0       0       0
  3815 ;;      Temps:          3       0       0       0
  3816 ;;      Totals:         3       0       0       0
  3817 ;;Total ram usage:        3 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    2
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		Interrupt level 1
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	intcodelo
  3828  000018                     __pintcodelo:
  3829                           	opt callstack 0
  3830  000018                     _InterruptHandlerLow:
  3831                           	opt callstack 22
  3832                           
  3833                           ;incstack = 0
  3834  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3835  00001A  CFD8 F008          	movff	status,??_InterruptHandlerLow
  3836  00001E  CFE8 F009          	movff	wreg,??_InterruptHandlerLow+1
  3837  000022  CFE0 F00A          	movff	bsr,??_InterruptHandlerLow+2
  3838                           
  3839                           ;main.c: 96:     if((INTCONbits.TMR0IF) && (robot_mode == 1))
  3840  000026  A4F2               	btfss	4082,2,c	;volatile
  3841  000028  D00A               	goto	i1l70
  3842  00002A  0442               	decf	_robot_mode,w,c	;volatile
  3843  00002C  A4D8               	btfss	status,2,c
  3844  00002E  D007               	goto	i1l70
  3845                           
  3846                           ;main.c: 97:     {;main.c: 98:         movement_time += 1;
  3847  000030  0E01               	movlw	1
  3848  000032  2643               	addwf	_movement_time,f,c	;volatile
  3849  000034  0E00               	movlw	0
  3850  000036  2244               	addwfc	_movement_time+1,f,c	;volatile
  3851  000038  2245               	addwfc	_movement_time+2,f,c	;volatile
  3852  00003A  2246               	addwfc	_movement_time+3,f,c	;volatile
  3853  00003C  D00B               	goto	i1l1597
  3854  00003E                     i1l70:
  3855  00003E  A4F2               	btfss	4082,2,c	;volatile
  3856  000040  D009               	goto	i1l1597
  3857  000042  0E02               	movlw	2
  3858  000044  1842               	xorwf	_robot_mode,w,c	;volatile
  3859  000046  A4D8               	btfss	status,2,c
  3860  000048  D005               	goto	i1l1597
  3861                           
  3862                           ;main.c: 103:     {;main.c: 104:         movement_time -= 1;
  3863  00004A  0643               	decf	_movement_time,f,c	;volatile
  3864  00004C  0E00               	movlw	0
  3865  00004E  5A44               	subwfb	_movement_time+1,f,c	;volatile
  3866  000050  5A45               	subwfb	_movement_time+2,f,c	;volatile
  3867  000052  5A46               	subwfb	_movement_time+3,f,c	;volatile
  3868  000054                     i1l1597:
  3869                           
  3870                           ;main.c: 109:     {;main.c: 110:         INTCONbits.TMR0IF = 0;
  3871                           
  3872                           ;main.c: 108:     else
  3873                           
  3874                           ;main.c: 106:     }
  3875                           
  3876                           ;main.c: 105:         INTCONbits.TMR0IF = 0;
  3877  000054  94F2               	bcf	4082,2,c	;volatile
  3878  000056  C00A  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  3879  00005A  C009  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  3880  00005E  C008  FFD8         	movff	??_InterruptHandlerLow,status
  3881  000062  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3882  000064  0010               	retfie	
  3883  000066                     __end_of_InterruptHandlerLow:
  3884                           	opt callstack 0
  3885                           
  3886 ;; *************** function _InterruptHandlerHigh *****************
  3887 ;; Defined at:
  3888 ;;		line 75 in file "main.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  throwaway       1    0        unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      void 
  3895 ;; Registers used:
  3896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3902 ;;      Params:         0       0       0       0
  3903 ;;      Locals:         1       0       0       0
  3904 ;;      Temps:          2       0       0       0
  3905 ;;      Totals:         3       0       0       0
  3906 ;;Total ram usage:        3 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    1
  3909 ;; This function calls:
  3910 ;;		_processRFID
  3911 ;; This function is called by:
  3912 ;;		Interrupt level 2
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	intcode
  3917  000008                     __pintcode:
  3918                           	opt callstack 0
  3919  000008                     _InterruptHandlerHigh:
  3920                           	opt callstack 22
  3921                           
  3922                           ;incstack = 0
  3923  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3924  00000A  EF91  F007         	goto	int_func
  3925                           
  3926                           	psect	intcode_body
  3927  000F22                     __pintcode_body:
  3928                           	opt callstack 22
  3929  000F22                     int_func:
  3930                           	opt callstack 22
  3931  000F22  CFD9 F005          	movff	fsr2l,??_InterruptHandlerHigh
  3932  000F26  CFDA F006          	movff	fsr2h,??_InterruptHandlerHigh+1
  3933                           
  3934                           ;main.c: 79:     if((PIR1bits.RCIF) && (robot_mode == 1))
  3935  000F2A  AA9E               	btfss	3998,5,c	;volatile
  3936  000F2C  D00D               	goto	i2l63
  3937  000F2E  0442               	decf	_robot_mode,w,c	;volatile
  3938  000F30  A4D8               	btfss	status,2,c
  3939  000F32  D00A               	goto	i2l63
  3940                           
  3941                           ;main.c: 80:     {;main.c: 82:         RFID_flag = processRFID(RFIDbuf, RCREG);
  3942  000F34  0E82               	movlw	low _RFIDbuf
  3943  000F36  6E01               	movwf	processRFID@RFIDbuf,c
  3944  000F38  0E00               	movlw	high _RFIDbuf
  3945  000F3A  6E02               	movwf	processRFID@RFIDbuf+1,c
  3946  000F3C  CFAE F003          	movff	4014,processRFID@latestChar	;volatile
  3947  000F40  ECCD  F006         	call	_processRFID	;wreg free
  3948  000F44  6E47               	movwf	_RFID_flag,c	;volatile
  3949                           
  3950                           ;main.c: 83:     }
  3951  000F46  D001               	goto	i2l65
  3952  000F48                     i2l63:
  3953  000F48  50AE               	movf	4014,w,c	;volatile
  3954  000F4A                     i2l65:
  3955  000F4A  C006  FFDA         	movff	??_InterruptHandlerHigh+1,fsr2h
  3956  000F4E  C005  FFD9         	movff	??_InterruptHandlerHigh,fsr2l
  3957  000F52  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3958  000F54  0011               	retfie		f
  3959  000F56                     __end_of_InterruptHandlerHigh:
  3960                           	opt callstack 0
  3961                           
  3962 ;; *************** function _processRFID *****************
  3963 ;; Defined at:
  3964 ;;		line 34 in file "RFID.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  RFIDbuf         2    0[COMRAM] PTR volatile unsigned ch
  3967 ;;		 -> RFIDbuf(12), 
  3968 ;;  latestChar      1    2[COMRAM] unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  i               1    3[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      unsigned char 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3980 ;;      Params:         3       0       0       0
  3981 ;;      Locals:         1       0       0       0
  3982 ;;      Temps:          0       0       0       0
  3983 ;;      Totals:         4       0       0       0
  3984 ;;Total ram usage:        4 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_InterruptHandlerHigh
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text30
  3994  000D9A                     __ptext30:
  3995                           	opt callstack 0
  3996  000D9A                     _processRFID:
  3997                           	opt callstack 22
  3998                           
  3999                           ;RFID.c: 34: char processRFID(volatile char RFIDbuf[], char latestChar);RFID.c: 35: {;RF
      +                          ID.c: 39:     static char position_in_buf;;RFID.c: 42:     if(latestChar == 0x03)
  4000                           
  4001                           ;incstack = 0
  4002  000D9A  0E03               	movlw	3
  4003  000D9C  1803               	xorwf	processRFID@latestChar,w,c
  4004  000D9E  A4D8               	btfss	status,2,c
  4005  000DA0  D002               	goto	i2l1955
  4006                           
  4007                           ;RFID.c: 43:     {;RFID.c: 44:         return 1;
  4008  000DA2  0E01               	movlw	1
  4009  000DA4  0012               	return	
  4010  000DA6                     i2l1955:
  4011                           
  4012                           ;RFID.c: 47:     {;RFID.c: 50:        if(latestChar == 0x02)
  4013  000DA6  0E02               	movlw	2
  4014  000DA8  1803               	xorwf	processRFID@latestChar,w,c
  4015  000DAA  A4D8               	btfss	status,2,c
  4016  000DAC  D012               	goto	i2l1975
  4017                           
  4018                           ;RFID.c: 51:         {;RFID.c: 52:            position_in_buf = 0;
  4019  000DAE  0E00               	movlw	0
  4020  000DB0  6E41               	movwf	processRFID@position_in_buf,c
  4021                           
  4022                           ;RFID.c: 53:            for(char i=0 ;i<12 ;i++)
  4023  000DB2  0E00               	movlw	0
  4024  000DB4  6E04               	movwf	processRFID@i,c
  4025  000DB6                     i2l1963:
  4026                           
  4027                           ;RFID.c: 54:            {;RFID.c: 55:                RFIDbuf[i] = 0;
  4028  000DB6  5004               	movf	processRFID@i,w,c
  4029  000DB8  2401               	addwf	processRFID@RFIDbuf,w,c
  4030  000DBA  6ED9               	movwf	fsr2l,c
  4031  000DBC  0E00               	movlw	0
  4032  000DBE  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4033  000DC0  6EDA               	movwf	fsr2h,c
  4034  000DC2  0E00               	movlw	0
  4035  000DC4  6EDF               	movwf	indf2,c
  4036                           
  4037                           ;RFID.c: 56:            }
  4038  000DC6  2A04               	incf	processRFID@i,f,c
  4039  000DC8  0E0B               	movlw	11
  4040  000DCA  6404               	cpfsgt	processRFID@i,c
  4041  000DCC  D7F4               	goto	i2l1963
  4042  000DCE                     i2u111_40:
  4043                           
  4044                           ;RFID.c: 57:            return 0;
  4045  000DCE  0E00               	movlw	0
  4046  000DD0  0012               	return	
  4047  000DD2                     i2l1975:
  4048                           
  4049                           ;RFID.c: 61:         {;RFID.c: 62:             RFIDbuf[position_in_buf] = latestChar;
  4050  000DD2  5041               	movf	processRFID@position_in_buf,w,c
  4051  000DD4  2401               	addwf	processRFID@RFIDbuf,w,c
  4052  000DD6  6ED9               	movwf	fsr2l,c
  4053  000DD8  0E00               	movlw	0
  4054  000DDA  2002               	addwfc	processRFID@RFIDbuf+1,w,c
  4055  000DDC  6EDA               	movwf	fsr2h,c
  4056  000DDE  C003  FFDF         	movff	processRFID@latestChar,indf2
  4057                           
  4058                           ;RFID.c: 63:             position_in_buf++;
  4059  000DE2  2A41               	incf	processRFID@position_in_buf,f,c
  4060  000DE4  D7F4               	goto	i2u111_40
  4061  000DE6                     __end_of_processRFID:
  4062                           	opt callstack 0
  4063                           
  4064                           	psect	rparam
  4065  0000                     
  4066                           	psect	temp
  4067  000048                     btemp:
  4068                           	opt callstack 0
  4069  000048                     	ds	1
  4070  0000                     int$flags	set	btemp
  4071  0000                     wtemp8	set	btemp+1
  4072  0000                     ttemp5	set	btemp+1
  4073  0000                     ttemp6	set	btemp+4
  4074  0000                     ttemp7	set	btemp+8
  4075                           tosu	equ	0xFFF
  4076                           tosh	equ	0xFFE
  4077                           tosl	equ	0xFFD
  4078                           stkptr	equ	0xFFC
  4079                           pclatu	equ	0xFFB
  4080                           pclath	equ	0xFFA
  4081                           pcl	equ	0xFF9
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           indf0	equ	0xFEF
  4089                           postinc0	equ	0xFEE
  4090                           postdec0	equ	0xFED
  4091                           preinc0	equ	0xFEC
  4092                           plusw0	equ	0xFEB
  4093                           fsr0h	equ	0xFEA
  4094                           fsr0l	equ	0xFE9
  4095                           wreg	equ	0xFE8
  4096                           indf1	equ	0xFE7
  4097                           postinc1	equ	0xFE6
  4098                           postdec1	equ	0xFE5
  4099                           preinc1	equ	0xFE4
  4100                           plusw1	equ	0xFE3
  4101                           fsr1h	equ	0xFE2
  4102                           fsr1l	equ	0xFE1
  4103                           bsr	equ	0xFE0
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           preinc2	equ	0xFDC
  4108                           plusw2	equ	0xFDB
  4109                           fsr2h	equ	0xFDA
  4110                           fsr2l	equ	0xFD9
  4111                           status	equ	0xFD8


Data Sizes:
    Strings     151
    Constant    0
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      71
    BANK0           160     22      68
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    moveToBeacon@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    S1861_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> debug@buf2(COMRAM[16]), debug@buf(COMRAM[16]), 

    stopAndDisplay@RFID_buffer	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    stopAndDisplay@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stopAndDisplay@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    returnHome@time	PTR volatile unsigned long  size(2) Largest target is 4
		 -> movement_time(COMRAM[4]), 

    returnHome@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    returnHome@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveToBeacon@exit_flag	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), RFID_flag(COMRAM[1]), 

    moveToBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveToBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    scanForBeacon@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    scanForBeacon@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    display_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    check_RFID@dataBuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    processRFID@RFIDbuf	PTR volatile unsigned char  size(2) Largest target is 12
		 -> RFIDbuf(BANK0[12]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[13]), debug@buf2(COMRAM[16]), 
		 -> debug@buf(COMRAM[16]), STR_7(CODE[16]), STR_6(CODE[15]), STR_5(CODE[15]), 
		 -> STR_4(CODE[10]), STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[15]), 

    init_motor_struct@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    init_motor_struct@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    init_motor_struct@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    init_motor_struct@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveBackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveBackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveBackward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveBackward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    moveForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    moveForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    moveForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    moveForward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    turn@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    turn@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turn@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turn@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK0[9]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK0[9]), main@motorL(BANK0[9]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S366DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S366DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    motorL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_returnHome
    _main->_stopAndDisplay
    _waitForInput->_LCD_String
    _waitForInput->_classify_data
    _stopAndDisplay->_stop
    _stop->_setMotorPWM
    _display_RFID->_ClearLCD
    _display_RFID->_SetLine
    _check_RFID->_LCD_String
    _SetLine->_SendLCD
    _setup->_init_LCD
    _init_LCD->_SendLCD
    _scanForBeacon->_turn
    _turn->_setMotorPWM
    _returnHome->_moveBackward
    _moveBackward->_setMotorPWM
    _moveToBeacon->_moveForward
    _moveForward->_setMotorPWM
    _LCD_String->_SendLCD
    _ClearLCD->_SendLCD
    _SendLCD->_LCDout
    _init_motor_struct->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->_processRFID

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   47553
                                              0 BANK0     22    22      0
                         _LCD_String
                  _init_motor_struct
                       _moveToBeacon
                         _returnHome
                      _scanForBeacon
                              _setup
                     _stopAndDisplay
                       _waitForInput
 ---------------------------------------------------------------------------------
 (1) _waitForInput                                         9     9      0    5007
                                             16 COMRAM     9     9      0
                           _ClearLCD
                         _LCD_String
                            _SetLine
                      _classify_data
 ---------------------------------------------------------------------------------
 (1) _stopAndDisplay                                      12     4      8   15111
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                         _check_RFID
                       _display_RFID
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 9     3      6    2769
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _display_RFID                                         4     2      2    3633
                                             15 COMRAM     4     2      2
                           _ClearLCD
                            _SendLCD
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _check_RFID                                          24    22      2    4716
                                             16 COMRAM    24    22      2
                         _LCD_String
                            _SetLine
 ---------------------------------------------------------------------------------
 (2) _SetLine                                              1     1      0    1179
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1396
                            _initPWM
                           _init_LCD
                          _init_RFID
                        _init_sensor
 ---------------------------------------------------------------------------------
 (2) _init_sensor                                          2     2      0       3
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_RFID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             1     1      0    1241
                                             14 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _initPWM                                              2     0      2     152
                                             10 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _scanForBeacon                                       11     5      6    6886
                                             42 COMRAM    11     5      6
                           _ClearLCD
                         _LCD_String
                      _classify_data
                               _turn
 ---------------------------------------------------------------------------------
 (2) _turn                                                 9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _classify_data                                        6     4      2     276
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _returnHome                                          12     4      8    6663
                                             42 COMRAM    12     4      8
                           _ClearLCD
                         _LCD_String
                       _moveBackward
 ---------------------------------------------------------------------------------
 (2) _moveBackward                                         9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveToBeacon                                        11     1     10    6756
                                             42 COMRAM    11     1     10
                           _ClearLCD
                         _LCD_String
                        _moveForward
 ---------------------------------------------------------------------------------
 (2) _moveForward                                          9     3      6    2800
                                             33 COMRAM     9     3      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2262
                                             14 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _ClearLCD                                             1     1      0    1117
                                             14 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (3) _SendLCD                                              2     1      1    1117
                                             12 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (4) _LCDout                                               2     2      0     124
                                             10 COMRAM     2     2      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (5) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_motor_struct                                    4     0      4    2828
                                             33 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    2214
                                             24 COMRAM     9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     402
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                             16 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerLow                                  3     3      0       0
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandlerHigh                                 3     3      0     331
                                              4 COMRAM     3     3      0
                        _processRFID
 ---------------------------------------------------------------------------------
 (9) _processRFID                                          4     1      3     330
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _init_motor_struct
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _moveToBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveForward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _returnHome
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _moveBackward
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _scanForBeacon
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data
     _turn
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _setup
     _initPWM
     _init_LCD
       _LCDout
         _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
     _init_RFID
     _init_sensor
   _stopAndDisplay
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _check_RFID
       _LCD_String
         _SendLCD
           _LCDout
             _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _display_RFID
       _ClearLCD
         _SendLCD
           _LCDout
             _E_TOG
       _SendLCD
         _LCDout
           _E_TOG
       _SetLine
         _SendLCD
           _LCDout
             _E_TOG
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _waitForInput
     _ClearLCD
       _SendLCD
         _LCDout
           _E_TOG
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _classify_data

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   _processRFID

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      44       5       42.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      47       1       75.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8B       3        0.0%
DATA                 0      0      8B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 09 16:11:17 2020

                           l55 0EF0                   ___awdiv@sign 0016                             bsr 000FE0  
          ___wmul@multiplicand 000D                  ?_display_RFID 0010                    ?_LCD_String 000F  
                          l121 05B2                            l341 0918            display_RFID@dataBuf 0010  
               moveToBeacon@mL 002B                 moveToBeacon@mR 002D        __size_of_stopAndDisplay 0098  
                          wreg 000FE8                   processRFID@i 0004                   __CFG_LVP$OFF 000000  
                         l2201 0A28                           l2207 0A3E                           l2223 0A70  
                         l2209 0A46                           l2233 0C88                           l2321 0CEC  
                         l2227 0A7E                           l2219 0A66                           l2403 0426  
                         l2341 0AB2                           l2253 0F98                           l2413 04D6  
                         l2325 0CFA                           l2247 058A                           l2239 0CBC  
                         l2351 0AF4                           l2511 093A                           l2257 0FAA  
                         l2425 0E80                           l2195 0A18                           l2523 0D6C  
                         l2611 06C2                           l2603 0660                           l2357 0BB6  
                         l2373 0B34                           l2367 0BF8                           l2383 0B76  
                         l2439 0E26                           l2391 03A2                           l2615 06F2  
                         l2607 0694                           l2553 0E56                           l2539 0EDA  
                         l2397 03E4                           l2567 09B0                           l2583 09FA  
                         l2487 08BA                           l2577 09C8                           l2585 0A00  
                         l2599 063C                           STR_1 036F                           STR_2 0341  
                         STR_3 0331                           STR_4 038B                           STR_5 0351  
                         STR_6 0360                           STR_7 0321                           STR_8 0395  
                         u1310 0A4A                           u2007 0CB6                           u2017 1044  
                         u2027 0F6E                           u1340 0CAC                           u1405 05FE  
                         u2037 0F7E                           u1350 0CDC                           u1510 043A  
                         _LATB 000F8A                           u2047 0C7E                           u1600 0484  
                         u1520 0444                           u2057 106A                           u1610 0486  
                         u1530 0446                           u1275 0F60                           u1347 0CA2  
                         u1276 0F62                           u1620 0494                           u1540 0454  
                         u1357 0CD2                           u1630 0496                           u1550 0456  
                         u1384 055E                           u1640 04B2                           u1560 0464  
                         u1720 0966                           u1385 055A                           u1394 05A6  
                         u1650 04B4                           u1570 0466                           u1395 05A2  
                         u1580 0474                           u1590 0476                           u1670 0EAC  
                         u1680 0E22                           u1770 09F4                           u1907 083C  
                         u1917 084A                           u1837 0944                           u1927 085C  
                         u1847 09D2                           u1937 086E                           u1857 0D30  
                         u1947 0884                           u1867 0FAC                           u1957 0898  
                         u1877 0808                           u1967 08AA                           u1887 081E  
                         u1977 0AE8                           u1897 082E                           u1987 0B6A  
                         u1997 0BEC                           i1l70 003E                           i2l63 0F48  
                         i2l65 0F4A                           _dbuf 0062                           _main 060E  
                         _prec 0039                           _nout 0060                           fsr0h 000FEA  
                         indf0 000FEF                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0048                           _stop 0CE4  
                         _turn 0A88                           prodh 000FF4                           prodl 000FF3  
                         start 0066                   ___param_bank 000000                __end_of_SendLCD 0F86  
              __end_of_SetLine 0FB4                 ??_display_RFID 0012                          ?_main 0001  
          main@searching_speed 008E                __end_of___awdiv 0A88                          STR_10 037E  
                        STR_11 0311                          STR_12 0301                          ?_stop 0022  
                        ?_turn 0022                          _T0CON 000FD5                ___awdiv@divisor 0013  
                        _PDC0H 000F78                          _PDC1H 000F76                          _PDC0L 000F79  
                        _PDC1L 000F77                          _T5CON 000FB7                ___awdiv@counter 0015  
                        _RCREG 000FAE                          _E_TOG 1066                          _SPBRG 000FAF  
                 ?_init_sensor 0001                __end_of_initPWM 1034                          _flags 003B  
                        _setup 0EEC                          _width 0037               moveToBeacon@time 0031  
                        tablat 000FF5             processRFID@RFIDbuf 0001                          ttemp5 0049  
                        ttemp6 004C                          ttemp7 0050                          stop@i 0029  
                        status 000FD8                          turn@i 0029                          wtemp8 0049  
          __size_of_LCD_String 005E               __end_of_ClearLCD 104E           moveForward@max_power 0026  
               __CFG_MCLRE$OFF 000000                __initialization 0FB4                   __end_of_main 0700  
                 __end_of_stop 0D40                   __end_of_turn 0B0A                 __CFG_OSC$IRCIO 000000  
             LCD_String@string 000F                         ??_main 0037                         ??_stop 0028  
                       ??_turn 0028                  __activetblptr 000002                         ?_E_TOG 0001  
                 ?_setMotorPWM 0019                   ?_moveForward 0022   scanForBeacon@beacon_location 0035  
             ___awdiv@dividend 0011                         ?_setup 0001                         _ANSEL0 000FB8  
                       _ANSEL1 000FB9                         i1l1597 0054                         i2l1963 0DB6  
                       i2l1955 0DA6                         i2l1975 0DD2                         _LCDout 0C0E  
                  SendLCD@Byte 000E                         _OSCCON 000FD3                         _PTCON0 000F7F  
                       _PTCON1 000F7E                         _SPBRGH 000FB0                         _PTPERH 000F7A  
                       _PTPERL 000F7B                    SendLCD@type 000D                      ??_SendLCD 000E  
                    ??_SetLine 000F                  display_RFID@i 0012                         ___wmul 0FDA  
                    ??___awdiv 0015               __end_of_init_LCD 08B2            init_motor_struct@mL 0022  
          init_motor_struct@mR 0024                         clear_0 0FBA                         clear_1 0FC6  
             ___awdiv@quotient 0017         __size_of_scanForBeacon 005A              moveToBeacon@speed 002F  
                    ??_initPWM 000D                 _stopAndDisplay 096C                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                       stop@mL 0022                         stop@mR 0024                         turn@mL 0022  
                       turn@mR 0024                   ?_processRFID 0001              _init_motor_struct 0700  
         __end_of_display_RFID 0EAE             ?_init_motor_struct 0022                     __accesstop 0060  
      __end_of__initialization 0FCC                  ___rparam_used 000001                    SetLine@line 000F  
                __end_of_E_TOG 1074            ??_init_motor_struct 0026                 __pcstackCOMRAM 0001  
                __end_of_setup 0F22                   ??_LCD_String 0011         __end_of_stopAndDisplay 0A04  
                      ??_E_TOG 000B  __size_of_InterruptHandlerHigh 0F4E                      ?_ClearLCD 0001  
  __end_of_InterruptHandlerLow 0066      __end_of_init_motor_struct 07EA          __end_of_classify_data 0E2A  
                   _check_RFID 039A           __size_of_init_sensor 0018                        ??_setup 0010  
                ?_moveBackward 0022                     __pbssBANK0 0060                        ?_LCDout 0001  
                _scanForBeacon 0D40             __size_of_init_RFID 001A             __end_of_LCD_String 0CE4  
           waitForInput@i_1361 0018                        ?___wmul 000B                  ?_moveToBeacon 002B  
                      _CAP1CON 000F63                ?_stopAndDisplay 002B                     ??_ClearLCD 000F  
                      _RFIDbuf 0082                        _PWMCON0 000F6F                        _PWMCON1 000F6E  
               ??_moveBackward 0028                 ?_scanForBeacon 002B           __size_of_setMotorPWM 0124  
         __size_of_moveForward 0082      stopAndDisplay@RFID_buffer 0031                      ?_init_LCD 0001  
              __size_of_LCDout 0078                  moveBackward@i 0029                  ?_waitForInput 0001  
                      _SendLCD 0F56                        __Hparam 0000                        _SetLine 0F86  
                      __Lparam 0000                 ??_moveToBeacon 0035          processRFID@latestChar 0003  
                      ___awdiv 0A04                __size_of___wmul 0026                   __psmallconst 0300  
             initPWM@PWMperiod 000B                        __pcinit 0FB4                        __ramtop 0300  
                      __ptext0 060E                        __ptext1 08B2                        __ptext2 096C  
                      __ptext3 0CE4                        __ptext4 0E6E                        __ptext5 039A  
                      __ptext6 0F86                        __ptext7 0EEC                        __ptext8 104E  
                      __ptext9 1000              __end_of_init_RFID 101A               check_RFID@hexBuf 0015  
                      _initPWM 101A           waitForInput@raw_data 0014                   LCDout@number 000C  
   __size_of_init_motor_struct 00EA          __size_of_display_RFID 0040              stop@initial_speed 0026  
                  ?_check_RFID 0011                 __pintcode_body 0F22           end_of_initialization 0FCC  
           setMotorPWM@PWMduty 0020                     ??_init_LCD 000F           __size_of_processRFID 004C  
               ??_waitForInput 0011                  __Lmediumconst 0000                        int_func 0F22  
                    _RFID_flag 0047                      _RCSTAbits 000FAB                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE          moveToBeacon@exit_flag 0033  
                   _robot_mode 0042                     _returnHome 0E2A                   _display_RFID 0E6E  
                    _PORTDbits 000F83                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                ??_scanForBeacon 0031  
           debug@smoothed_data 003D                  moveForward@mL 0022                  moveForward@mR 0024  
               __end_of_LCDout 0C86                      _TXSTAbits 000FAC                     main@motorL 0092  
                   main@motorR 009B           __end_of_moveBackward 0B8C            __size_of_check_RFID 0150  
               __end_of___wmul 1000                    _BAUDCONbits 000FAA          classify_data@filtered 000F  
          start_initialization 0FB4              __size_of_ClearLCD 001A           __end_of_moveToBeacon 0EEC  
        classify_data@raw_data 000B                       ??_LCDout 000B          moveBackward@max_power 0026  
 __end_of_InterruptHandlerHigh 0F56          classify_data@smoothed 003F               ??_stopAndDisplay 0033  
                     ??___wmul 000F                scanForBeacon@mL 002B                scanForBeacon@mR 002D  
                  ?_returnHome 002B           __end_of_waitForInput 096C                    __pbssCOMRAM 0037  
                ??_init_sensor 000B                  __pcstackBANK0 008E   __size_of_InterruptHandlerLow 004E  
            __size_of_init_LCD 00C8                       ?_SendLCD 000D                       ?_SetLine 0001  
                    __pintcode 0008                       ?___awdiv 0011         __size_of_classify_data 0044  
           check_RFID@checksum 0026                    __pintcodelo 0018                       _CAP1BUFH 000F69  
                     _CAP1BUFL 000F68                       ?_initPWM 000B                    __smallconst 0300  
               __size_of_E_TOG 000E                  waitForInput@i 0016                      _init_RFID 1000  
          stopAndDisplay@speed 002F                  ??_setMotorPWM 001B                  ??_moveForward 0028  
                 ??_check_RFID 0013                 __size_of_setup 0036                check_RFID@byte1 0021  
              check_RFID@byte2 0022                check_RFID@byte3 0023                check_RFID@byte4 0024  
              check_RFID@byte5 0025            __end_of_init_sensor 1066                 ___wmul@product 000F  
          __size_of_returnHome 0044                       _LATAbits 000F89                       _LATCbits 000F8B  
                     _LATDbits 000F8C                       _IPR1bits 000F9F                       _PIE1bits 000F9D  
                     i2u111_40 0DCE          __size_of_moveBackward 0082                       _PIR1bits 000F9E  
                     _RCONbits 000FD0             __end_of_check_RFID 04EA              ___wmul@multiplier 000B  
                 setMotorPWM@m 0019                   moveForward@i 0029               main@moving_speed 0090  
        __size_of_moveToBeacon 003E           _InterruptHandlerHigh 0008                       _ClearLCD 1034  
                _movement_time 0043                     ?_init_RFID 0001                  ??_processRFID 0004  
                _classify_data 0DE6                    _INTCON2bits 000FF1                 moveBackward@mL 0022  
               moveBackward@mR 0024                   _moveBackward 0B0A            __end_of_setMotorPWM 060E  
          __end_of_moveForward 0C0E                    check_RFID@i 0027                       __Hrparam 0000  
                turn@max_power 0026               __size_of_SendLCD 0030                       __Lrparam 0000  
             __size_of_SetLine 002E          __size_of_waitForInput 00BA                   _moveToBeacon 0EAE  
             __size_of___awdiv 0084          ?_InterruptHandlerHigh 0001               __size_of_initPWM 001A  
                  _init_sensor 104E                 ?_classify_data 000B              check_RFID@dataBuf 0011  
                     __ptext10 07EA                       __ptext11 101A                       __ptext20 1034  
                     __ptext12 0D40                       __ptext21 0F56                       __ptext13 0A88  
                     __ptext30 0D9A                       __ptext22 0C0E                       __ptext14 0DE6  
                     __ptext23 1066                       __ptext15 0E2A                       __ptext24 0700  
                     __ptext16 0B0A                       __ptext25 04EA                       __ptext17 0EAE  
                     __ptext26 0FDA                       __ptext18 0B8C                       __ptext27 0A04  
                     __ptext19 0C86          __end_of_scanForBeacon 0D9A                       _init_LCD 07EA  
                __size_of_main 00F2                  __size_of_stop 005C                  __size_of_turn 0082  
          __end_of_processRFID 0DE6                   _waitForInput 08B2             scanForBeacon@speed 002F  
                     int$flags 0048                   ??_returnHome 0033            _InterruptHandlerLow 0018  
                   _LCD_String 0C86          scanForBeacon@raw_data 0033                     _INTCONbits 000FF2  
                  ??_init_RFID 000B                    _setMotorPWM 04EA                    _moveForward 0B8C  
                     intlevel1 0000                       intlevel2 0000           ?_InterruptHandlerLow 0001  
           __end_of_returnHome 0E6E                     _OSCCONbits 000FD3     processRFID@position_in_buf 0041  
       ??_InterruptHandlerHigh 0005                ??_classify_data 000D               stopAndDisplay@mL 002B  
             stopAndDisplay@mR 002D                returnHome@speed 002F                    _processRFID 0D9A  
        ??_InterruptHandlerLow 0008                stopAndDisplay@i 0035                 returnHome@time 0031  
                 returnHome@mL 002B                   returnHome@mR 002D  
